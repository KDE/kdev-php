<?php
// THIS FILE IS GENERATED
// WARNING! All changes made in this file will be lost!

/**
 * The number of arguments passed to script
 **/
$argc = array();

/**
 * Array of arguments passed to script
 **/
$argv = array();

/**
 * References all variables available in global scope
 * @superglobal
 **/
$GLOBALS = array();

/**
 * HTTP Cookies
 * @deprecated
 **/
$HTTP_COOKIE_VARS = array();

/**
 * Environment variables
 * @deprecated
 **/
$HTTP_ENV_VARS = array();

/**
 * HTTP GET variables
 * @deprecated
 **/
$HTTP_GET_VARS = array();

/**
 * HTTP File Upload variables
 * @deprecated
 **/
$HTTP_POST_FILES = array();

/**
 * HTTP POST variables
 * @deprecated
 **/
$HTTP_POST_VARS = array();

/**
 * Raw POST data
 **/
$HTTP_RAW_POST_DATA = array();

/**
 * HTTP response headers
 **/
$http_response_header = array();

/**
 * Server and execution environment information
 * @deprecated
 **/
$HTTP_SERVER_VARS = array();

/**
 * Session variables
 * @deprecated
 **/
$HTTP_SESSION_VARS = array();

/**
 * The previous error message
 **/
$php_errormsg = array();

/**
 * HTTP Cookies
 * @superglobal
 **/
$_COOKIE = array();

/**
 * Environment variables
 * @superglobal
 **/
$_ENV = array();

/**
 * HTTP File Upload variables
 * @superglobal
 **/
$_FILES = array();

/**
 * HTTP GET variables
 * @superglobal
 **/
$_GET = array();

/**
 * HTTP POST variables
 * @superglobal
 **/
$_POST = array();

/**
 * HTTP Request variables
 * @superglobal
 **/
$_REQUEST = array();

/**
 * Server and execution environment information
 * @superglobal
 **/
$_SERVER = array();

/**
 * Session variables
 * @superglobal
 **/
$_SESSION = array();













/** @ingroup SPL
 * @brief Default implementation for __autoload()
 * @since PHP 5.1
 *
 * @param class_name        name of class to load
 * @param file_extensions   file extensions (use defaults if NULL)
 */
function spl_autoload($class_name, $file_extensions = NULL) {}

/** @ingroup SPL
 * @brief Manual invocation of all registerd autoload functions
 * @since PHP 5.1
 *
 * @param class_name        name of class to load
 */
function spl_autoload_call($class_name) {}

/** @ingroup SPL
 * @brief Register and return default file extensions for spl_autoload
 * @since PHP 5.1
 *
 * @param file_extensions optional comma separated list of extensions to use in
 *        default autoload function. If not given just return the current list.
 * @return comma separated list of file extensions to use in default autoload
 *        function.
 */
function spl_autoload_extensions($file_extensions) {}

/** @ingroup SPL
 * @brief Return all registered autoload functionns
 * @since PHP 5.1
 *
 * @return array of all registered autoload functions or false
 */
function spl_autoload_functions() {}

/** @ingroup SPL
 * @brief Register given function as autoload implementation
 * @since PHP 5.1
 *
 * @param autoload_function  name of function or array of object/class and
 *                           function name to register as autoload function.
 * @param throw              whether to throw or issue an error on failure.
 */
function spl_autoload_register($autoload_function = "spl_autoload", $throw = true) {}

/** @ingroup SPL
 * @brief Unregister given function as autoload implementation
 * @since PHP 5.1
 *
 * @param autoload_function  name of function or array of object/class and
 *                           function name to unregister as autoload function.
 */
function spl_autoload_unregister($autoload_function = "spl_autoload") {}

/** @ingroup SPL
 * @brief Return an array of classes and interfaces in SPL
 *
 * @return array containing the names of all clsses and interfaces defined in
 *         extension SPL
 */
function spl_classes() {}

/** @ingroup SPL
 * @brief Count the elements in an iterator
 * @since PHP 5.1
 *
 * @return number of elements in an iterator
 */
function iterator_count(Traversable $it) {}

/** @ingroup SPL
 * @brief Copy iterator elements into an array
 * @since PHP 5.1
 *
 * @param it  iterator to copy
 * @param use_keys whether touse the keys
 * @return array with elements copied from the iterator
 */
function iterator_to_array(Traversable $it, $use_keys = true) {}

/** @ingroup ZendEngine
 * @brief Basic Exception class.
 * @since PHP 5.0
 */
class Exception
{
    /** The exception message */
    protected $message;

    /** The string represenations as generated during construction */
    private $string;

    /** The code passed to the constructor */
    protected $code;

    /** The file name where the exception was instantiated */
    protected $file;

    /** The line number where the exception was instantiated */
    protected $line;

    /** The stack trace */
    private $trace;

    /** Prevent clone
     */
    final private function __clone() {}

    /** Construct an exception
     *
     * @param $message Some text describing the exception
     * @param $code    Some code describing the exception
     */
    function __construct($message = NULL, $code = 0){}

    /** @return the message passed to the constructor
     */
    final public function getMessage(){}

    /** @return the code passed to the constructor
     */
    final public function getCode(){}

    /** @return the name of the file where the exception was thrown
     */
    final public function getFile(){}

    /** @return the line number where the exception was thrown
     */
    final public function getLine(){}

    /** @return the stack trace as array
     */
    final public function getTrace(){}

    /** @return the stack trace as string
     */
    final public function getTraceAsString()
    {
    }

    /** @return string represenation of exception
     */
    public function __toString(){}
}

/** @ingroup SPL
 * @brief Exception that represents error in the program logic.
 * @since PHP 5.1
 *
 * This kind of exceptions should directly leed to a fix in your code.
 */
class LogicException extends Exception
{
}

/** @ingroup SPL
 * @brief Exception thrown when a function call was illegal.
 * @since PHP 5.1
 */
class BadFunctionCallException extends LogicException
{
}

/** @ingroup SPL
 * @brief Exception thrown when a method call was illegal.
 * @since PHP 5.1
 */
class BadMethodCallException extends BadFunctionCallException
{
}

/** @ingroup SPL
 * @brief Exception that denotes a value not in the valid domain was used.
 * @since PHP 5.1
 *
 * This kind of exception should be used to inform about domain erors in
 * mathematical sense.
 *
 * @see RangeException
 */
class DomainException extends LogicException
{
}

/** @ingroup SPL
 * @brief Exception that denotes invalid arguments were passed.
 * @since PHP 5.1
 *
 * @see UnexpectedValueException
 */
class InvalidArgumentException extends LogicException
{
}

/** @ingroup SPL
 * @brief Exception thrown when a parameter exceeds the allowed length.
 * @since PHP 5.1
 *
 * This can be used for strings length, array size, file size, number of
 * elements read from an Iterator and so on.
 */
class LengthException extends LogicException
{
}

/** @ingroup SPL
 * @brief Exception thrown when an illegal index was requested.
 * @since PHP 5.1
 *
 * This represents errors that should be detected at compile time.
 *
 * @see OutOfBoundsException
 */
class OutOfRangeException extends LogicException
{
}

/** @ingroup SPL
 * @brief Exception thrown for errors that are only detectable at runtime.
 * @since PHP 5.1
 */
class RuntimeException extends Exception
{
}

/** @ingroup SPL
 * @brief Exception thrown when an illegal index was requested.
 * @since PHP 5.1
 *
 * This represents errors that cannot be detected at compile time.
 *
 * @see OutOfRangeException
 */
class OutOfBoundsException extends RuntimeException
{
}

/** @ingroup SPL
 * @brief Exception thrown to indicate arithmetic/buffer overflow.
 * @since PHP 5.1
 */
class OverflowException extends RuntimeException
{
}

/** @ingroup SPL
 * @brief Exception thrown to indicate range errors during program execution.
 * @since PHP 5.1
 *
 * Normally this means there was an arithmetic error other than under/overflow.
 * This is the runtime version of DomainException.
 *
 * @see DomainException
 */
class RangeException extends RuntimeException
{
}

/** @ingroup SPL
 * @brief Exception thrown to indicate arithmetic/buffer underflow.
 * @since PHP 5.1
 */
class UnderflowException extends RuntimeException
{
}

/** @ingroup SPL
 * @brief Exception thrown to indicate an unexpected value.
 * @since PHP 5.1
 *
 * Typically this happens when a function calls another function and espects
 * the return value to be of a certain type or value not including arithmetic
 * or buffer related errors.
 *
 * @see InvalidArgumentException
 */
class UnexpectedValueException extends RuntimeException
{
}

/** @ingroup ZendEngine
 * @brief Interface to override array access of objects.
 * @since PHP 5.0
 */
interface ArrayAccess
{
    /** @param $offset to modify
     * @param $value new value
     */
    function offsetSet($offset, $value);

    /** @param $offset to retrieve
     * @return value at given offset
     */
    function offsetGet($offset);

    /** @param $offset to delete
     */
    function offsetUnset($offset);

    /** @param $offset to check
     * @return whether the offset exists.
     */
    function offsetExists($offset);
}

/** @ingroup ZendEngine
 * @brief Interface to detect a class is traversable using foreach.
 * @since PHP 5.0
 *
 * Abstract base interface that cannot be implemented alone. Instead it
 * must be implemented by either IteratorAggregate or Iterator.
 *
 * @note Internal classes that implement this interface can be used in a
 * foreach construct and do not need to implement IteratorAggregate or
 * Iterator.
 *
 * @note This is an engine internal interface which cannot be implemented
 * in PHP scripts. Either IteratorAggregate or Iterator must be used
 * instead.
 */
interface Traversable
{
}

/** @ingroup ZendEngine
 * @brief Interface to create an external Iterator.
 * @since PHP 5.0
 *
 * @note This is an engine internal interface.
 */
interface IteratorAggregate extends Traversable
{
    /** @return an Iterator for the implementing object.
     */
    function getIterator();
}

/** @ingroup ZendEngine
 * @brief Basic iterator
 * @since PHP 5.0
 *
 * Interface for external iterators or objects that can be iterated
 * themselves internally.
 *
 * @note This is an engine internal interface.
 */
interface Iterator extends Traversable
{
    /** Rewind the Iterator to the first element.
     */
    function rewind();

    /** Return the current element.
     */
    function current();

    /** Return the key of the current element.
     */
    function key();

    /** Move forward to next element.
     */
    function next();

    /** Check if there is a current element after calls to rewind() or next().
     */
    function valid();
}

/** @ingroup SPL
 * @brief This Interface allows to hook into the global count() function.
 * @since PHP 5.1
 */
interface Countable
{
    /** @return the number the global function count() should show
     */
    function count();
}

/** @ingroup ZendEngine
 * @brief Interface for customized serializing
 * @since 5.1
 *
 * Classes that implement this interface no longer support __sleep() and
 * __wakeup(). The method serialized is called whenever an instance needs to
 * be serialized. This does not invoke __destruct() or has any other side
 * effect unless programmed inside the method. When the data is unserialized
 * the class is known and the appropriate unserialize() method is called as a
 * constructor instead of calling __construct(). If you need to execute the
 * standard constructor you may do so in the method.
 */
interface Serializable
{
    /**
     * @return string representation of the instance
     */
    function serialize();

    /**
     * @note This is a constructor
     *
     * @param $serialized data read from stream to construct the instance
     */
    function unserialize($serialized);
}

/** @ingroup SPL
 * @brief An Array wrapper
 * @since PHP 5.0
 * @version 1.2
 *
 * This array wrapper allows to recursively iterate over Arrays and public
 * Object properties.
 *
 * @see ArrayIterator
 */
class ArrayObject implements IteratorAggregate, ArrayAccess, Countable
{
    /** Properties of the object have their normal functionality
     * when accessed as list (var_dump, foreach, etc.) */
    const STD_PROP_LIST     = 0x00000001;
    /** Array indices can be accessed as properties in read/write */
    const ARRAY_AS_PROPS    = 0x00000002;

    /** Construct a new array iterator from anything that has a hash table.
     * That is any Array or Object.
     *
     * @param $array the array to use.
     * @param $flags see setFlags().
     * @param $iterator_class class used in getIterator()
     */
    function __construct($array, $flags = 0, $iterator_class = "ArrayIterator") {}

    /** Set behavior flags.
     *
     * @param $flags bitmask as follows:
     *        0 set: properties of the object have their normal functionality
     *               when accessed as list (var_dump, foreach, etc.)
     *        1 set: array indices can be accessed as properties in read/write
     */
    function setFlags($flags) {}

    /** @return current flags
     */
    function getFlags() {}

    /** Sort the entries by values.
     */
    function asort() {}

    /** Sort the entries by key.
     */
    function ksort() {}

    /** Sort the entries by values using user defined function.
     */
    function uasort($cmp_function) {}

    /** Sort the entries by key using user defined function.
     */
    function uksort($cmp_function) {}

    /** Sort the entries by values using "natural order" algorithm.
     */
    function natsort() {}

    /** Sort the entries by values using case insensitive "natural order" algorithm.
     */
    function natcasesort() {}

    /** @param $array new array or object
     */
    function exchangeArray($array) {}

    /** @return the iterator which is an ArrayIterator object connected to
     * this object.
     */
    function getIterator() {}

    /** @param $index offset to inspect
     * @return whetehr offset $index esists
     */
    function offsetExists($index) {}

    /** @param $index offset to return value for
     * @return value at offset $index
     */
    function offsetGet($index) {}

    /** @param $index index to set
     * @param $newval new value to store at offset $index
     */
    function offsetSet($index, $newval) {}

    /** @param $index offset to unset
     */
    function offsetUnset($index) {}

    /** @param $value is appended as last element
     * @warning this method cannot be called when the ArrayObject refers to
     *          an object.
     */
    function append($value) {}

    /** @return a \b copy of the array
     * @note when the ArrayObject refers to an object then this method
     *       returns an array of the public properties.
     */
    function getArrayCopy() {}

    /** @return the number of elements in the array or the number of public
     * properties in the object.
     */
    function count() {}

    /* @param $iterator_class new class used in getIterator()
     */
    function setIteratorClass($itertor_class) {}

    /* @return class used in getIterator()
     */
    function getIteratorClass() {}
}

/** @ingroup SPL
 * @brief An Array iterator
 * @since PHP 5.0
 * @version 1.2
 *
 * This iterator allows to unset and modify values and keys while iterating
 * over Arrays and Objects.
 *
 * When you want to iterate over the same array multiple times you need to
 * instanciate ArrayObject and let it create ArrayIterator instances that
 * refer to it either by using foreach or by calling its getIterator()
 * method manually.
 */
class ArrayIterator implements SeekableIterator, ArrayAccess, Countable
{
    /** Properties of the object have their normal functionality
     * when accessed as list (var_dump, foreach, etc.) */
    const STD_PROP_LIST  = 0x00000001;
    /** Array indices can be accessed as properties in read/write */
    const ARRAY_AS_PROPS = 0x00000002;

    /** Construct a new array iterator from anything that has a hash table.
     * That is any Array or Object.
     *
     * @param $array the array to use.
     * @param $flags see setFlags().
     */
    function __construct($array, $flags = 0) {}

    /** Set behavior flags.
     *
     * @param $flags bitmask as follows:
     *        0 set: properties of the object have their normal functionality
     *               when accessed as list (var_dump, foreach, etc.)
     *        1 set: array indices can be accessed as properties in read/write
     */
    function setFlags($flags) {}

    /**
     * @return current flags
     */
    function getFlags() {}

    /** Sort the entries by values.
     */
    function asort() {}

    /** Sort the entries by key.
     */
    function ksort() {}

    /** Sort the entries by values using user defined function.
     */
    function uasort($cmp_function) {}

    /** Sort the entries by key using user defined function.
     */
    function uksort($cmp_function) {}

    /** Sort the entries by values using "natural order" algorithm.
     */
    function natsort() {}

    /** Sort the entries by values using case insensitive "natural order" algorithm.
     */
    function natcasesort() {}

    /** @param $index offset to inspect
     * @return whetehr offset $index esists
     */
    function offsetExists($index) {}

    /** @param $index offset to return value for
     * @return value at offset $index
     */
    function offsetGet($index) {}

    /** @param $index index to set
     * @param $newval new value to store at offset $index
     */
    function offsetSet($index, $newval) {}

    /** @param $index offset to unset
     */
    function offsetUnset($index) {}

    /** @param $value is appended as last element
     * @warning this method cannot be called when the ArrayIterator refers to
     *          an object.
     */
    function append($value) {}

    /** @return a \b copy of the array
     * @note when the ArrayIterator refers to an object then this method
     *       returns an array of the public properties.
     */
    function getArrayCopy() {}

    /** @param $position offset to seek to
     * @throw OutOfBoundsException if $position is invalid
     */
    function seek($position) {}

    /** @return the number of elements in the array or the number of public
     * properties in the object.
     */
    function count() {}

    /** @copydoc Iterator::rewind */
    function rewind() {}

    /** @copydoc Iterator::valid */
    function valid() {}

    /** @copydoc Iterator::current */
    function current() {}

    /** @copydoc Iterator::key */
    function key() {}

    /** @copydoc Iterator::next */
    function next() {}
}

/** @ingroup SPL
 * @brief File info class
 * @since PHP 5.1.3
 */
class SplFileInfo
{
    /** Construct a file info object
     *
     * @param $file_name path or file name
     */
    function __construct($file_name) {}

    /** @return the path part only.
     */
    function getPath() {}

    /** @return the filename only.
     */
    function getFilename() {}

    /** @return SplFileInfo created for the file
     * @param class_name name of class to instantiate
     * @see SplFileInfo::setInfoClass()
     */
    function getFileInfo($class_name = NULL) {}

    /** @return The current entries path and file name.
     */
    function getPathname() {}

    /** @return SplFileInfo created for the path
     * @param class_name name of class to instantiate
     * @see SplFileInfo::setInfoClass()
     */
    function getPathInfo($class_name = NULL) {}

    /** @return The current entry's permissions.
     */
    function getPerms() {}

    /** @return The current entry's inode.
     */
    function getInode() {}

    /** @return The current entry's size in bytes .
     */
    function getSize() {}

    /** @return The current entry's owner name.
     */
    function getOwner() {}

    /** @return The current entry's group name.
     */
    function getGroup() {}

    /** @return The current entry's last access time.
     */
    function getATime() {}

    /** @return The current entry's last modification time.
     */
    function getMTime() {}

    /** @return The current entry's last change time.
     */
    function getCTime() {}

    /** @return The current entry's file type.
     */
    function getType() {}

    /** @return Whether the current entry is writeable.
     */
    function isWritable() {}

    /** @return Whether the current entry is readable.
     */
    function isReadable() {}

    /** @return Whether the current entry is executable.
     */
    function isExecutable() {}

    /** @return Whether the current entry is .
     */
    function isFile() {}

    /** @return Whether the current entry is a directory.
     */
    function isDir() {}

    /** @return whether the current entry is a link.
     */
    function isLink() {}

    /** @return target of link.
     */
    function getLinkTarget() {}

    /** @return The resolved path
     */
    function getRealPath() {}

    /** @return getPathname()
     */
    function __toString() {}

    /** Open the current file as a SplFileObject instance
     *
     * @param mode              open mode
     * @param use_include_path  whether to search include paths (don't use)
     * @param context           resource context to pased to open function
     * @throw RuntimeException  if file cannot be opened (e.g. insufficient
     *                          access rights).
     * @return The opened file as a SplFileObject instance
     *
     * @see SplFileObject
     * @see SplFileInfo::setFileClass()
     * @see file()
     */
    function openFile($mode = 'r', $use_include_path = false, $context = NULL) {}

    /** @param class_name name of class used with openFile(). Must be derived
     * from SPLFileObject.
     */
    function setFileClass($class_name = "SplFileObject") {}

    /** @param class_name name of class used with getFileInfo(), getPathInfo().
     *                     Must be derived from SplFileInfo.
     */
    function setInfoClass($class_name = "SplFileInfo") {}
}

/** @ingroup SPL
 * @brief Directory iterator
 * @version 1.1
 * @since PHP 5.0
 */
class DirectoryIterator extends SplFileInfo implements Iterator
{
    /** Construct a directory iterator from a path-string.
     *
     * @param $path directory to iterate.
     */
    function __construct($path) {}

    /** @copydoc Iterator::rewind */
    function rewind() {}

    /** @copydoc Iterator::valid */
    function valid() {}

    /** @return index of entry
     */
    function key() {}

    /** @return $this
     */
    function current() {}

    /** @copydoc Iterator::next */
    function next() {}

    /** @return Whether the current entry is either '.' or '..'.
     */
    function isDot() {}

    /** @return whether the current entry is a link.
     */
    function isLink() {}

    /** @return getFilename()
     */
    function __toString() {}
}

/** @ingroup SPL
 * @brief recursive directory iterator
 * @version 1.1
 * @since PHP 5.0
 */
class RecursiveDirectoryIterator extends DirectoryIterator implements RecursiveIterator
{
    const CURRENT_AS_FILEINFO   = 0x00000000; /* make RecursiveDirectoryTree::current() return SplFileInfo */
    const CURRENT_AS_SELF       = 0x00000010; /* make RecursiveDirectoryTree::current() return getSelf() */
    const CURRENT_AS_PATHNAME   = 0x00000020; /* make RecursiveDirectoryTree::current() return getPathname() */

    const KEY_AS_PATHNAME       = 0x00000000; /* make RecursiveDirectoryTree::key() return getPathname() */
    const KEY_AS_FILENAME       = 0x00000100; /* make RecursiveDirectoryTree::key() return getFilename() */

    const NEW_CURRENT_AND_KEY   = 0x00000100; /* CURRENT_AS_FILEINFO + KEY_AS_FILENAME */

    /** Construct a directory iterator from a path-string.
     *
     * @param $path   directory to iterate.
     * @param $flags  open flags
     * - CURRENT_AS_FILEINFO
     * - CURRENT_AS_SELF
     * - CURRENT_AS_PATHNAME
     * - KEY_AS_PATHNAME
     * - KEY_AS_FILENAME
     * - NEW_CURRENT_AND_KEY
     */
    function __construct($path, $flags = 0) {}

    /** @return getPathname() or getFilename() depending on flags
     */
    function key() {}

    /** @return getFilename() or getFileInfo() depending on flags
     */
    function current() {}

    /** @return whether the current is a directory (not '.' or '..').
     */
    function hasChildren() {}

    /** @return a RecursiveDirectoryIterator for the current entry.
     */
    function getChildren() {}

    /** @return sub path only (without main path)
     */
    function getSubPath() {}

    /** @return the current sub path
     */
    function getSubPathname() {}
}

/** @ingroup SPL
 * @brief recursive SimpleXML_Element iterator
 * @since PHP 5.0
 *
 * The SimpleXMLIterator implements the RecursiveIterator interface. This
 * allows iteration over all elements using foreach or an appropriate while
 * construct, just like SimpleXMLElement does. When using the foreach construct,
 * you will also iterate over the subelements. For every element which
 * has subelements, hasChildren() returns true.  This will trigger a call to
 * getChildren() which returns the iterator for that sub element.
 */
class SimpleXMLIterator extends SimpleXMLElement implements RecursiveIterator, Countable
{
    /** @return whether the current node has sub nodes.
     */
    function hasChildren() {}

    /** @return a SimpleXMLIterator for the current node.
     */
    function getChildren() {}

    /** @return number of elements/attributes seen with foreach()
     */
    function count() {}

    /** @copydoc Iterator::rewind */
    function rewind() {}

    /** @copydoc Iterator::valid */
    function valid() {}

    /** @copydoc Iterator::current */
    function current() {}

    /** @copydoc Iterator::key */
    function key() {}

    /** @copydoc Iterator::next */
    function next() {}
}

/** @ingroup SPL
 * @brief Observer of the observer pattern
 * @since PHP 5.1
 *
 * For a detailed explanation see Observer pattern in
 * <em>
 * Gamma, Helm, Johnson, Vlissides<br />
 * Design Patterns
 * </em>
 */
interface SplObserver
{
    /** Called from the subject (i.e. when it's value has changed).
     * @param $subject the callee
     */
    function update(SplSubject $subject);
}

/** @ingroup SPL
 * @brief Subject to the observer pattern
 * @since PHP 5.1
 * @see Observer
 */
interface SplSubject
{
    /** @param $observer new observer to attach
     */
    function attach(SplObserver $observer);

    /** @param $observer existing observer to detach
     * @note a non attached observer shouldn't result in a warning or similar
     */
    function detach(SplObserver $observer);

    /** Notify all observers
     */
    function notify();
}





/** @ingroup SPL
 * @brief   An infinite Iterator
 * @author  Marcus Boerger
 * @version 1.1
 * @since PHP 5.1
 *
 * This Iterator takes another Iterator and infinitvely iterates it by
 * rewinding it when its end is reached.
 *
 * \note Even an InfiniteIterator stops if its inner Iterator is empty.
 *
 \verbatim
 $it       = new ArrayIterator(array(1,2,3));
 $infinite = new InfiniteIterator($it);
 $limit    = new LimitIterator($infinite, 0, 5);
 foreach($limit as $val=>$key)
 {
     echo "$val=>$key\n";
 }
 \endverbatim
 */
class InfiniteIterator extends IteratorIterator
{
    /** Move the inner Iterator forward to its next element or rewind it.
     * @return void
     */
    function next(){}
}





/**
 * @brief   Abstract filter for iterators
 * @author  Marcus Boerger
 * @version 1.1
 * @since PHP 5.0
 *
 * Instances of this class act as a filter around iterators. In other words 
 * you can put an iterator into the constructor and the instance will only 
 * return selected (accepted) elements.
 *
 * The only thing that needs to be done to make this work is implementing 
 * method accept(). Typically this invloves reading the current element or 
 * key of the inner Iterator and checking whether it is acceptable.
 */
abstract class FilterIterator implements OuterIterator
{
    private $it;

    /**
     * Constructs a filter around another iterator.
     *
     * @param it     Iterator to filter
     */
    function __construct(Iterator $it){}

    /**
     * Rewind the inner iterator.
     */
    function rewind() {    
        $this->it->rewind();
        $this->fetch();
    }

    /**
     * Accept function to decide whether an element of the inner iterator
     * should be accessible through the Filteriterator.
     *
     * @return whether or not to expose the current element of the inner
     *         iterator.
     */
    abstract function accept();

    /**
     * Fetch next element and store it.
     *
     * @return void
     */
    protected function fetch(){}

    /**
     * Move to next element
     *
     * @return void
     */
    function next(){}
    
    /**
     * @return Whether more elements are available
     */
    function valid(){}
    
    /**
     * @return The current key
     */
    function key(){}
    
    /**
     * @return The current value
     */
    function current(){}
    
    /**
     * hidden __clone
     */
    protected function __clone(){}

    /**
     * @return The inner iterator
     */    
    function getInnerIterator(){}

    /** Aggregate the inner iterator
     *
     * @param func    Name of method to invoke
     * @param params  Array of parameters to pass to method
     */
    function __call($func, $params){}
}





/**
 * @brief   Interface to access the current inner iteraor of iterator wrappers
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 */
interface OuterIterator extends Iterator
{
    /** @return inner iterator
     */
    function getInnerIterator();
}





/** @ingroup SPL
 * @brief   Object representation for any stream
 * @author  Marcus Boerger
 * @version 1.1
 * @since PHP 5.1
 */
class SplFileObject extends SplFileInfo implements RecursiveIterator, SeekableIterator
{
    /** Flag: wheter to suppress new lines */
    const DROP_NEW_LINE   = 0x00000001;

    private $fp;
    private $fname;
    private $line     = NULL;
    private $lnum     = 0;
    private $max_len  = 0;
    private $flags    = 0;
    private $delimiter= ',';
    private $enclosure= '"';
    
    /**
     * Constructs a new file object
     * 
     * @param $file_name         The name of the stream to open
     * @param $open_mode         The file open mode
     * @param $use_include_path  Whether to search in include paths
     * @param $context           A stream context
     * @throw RuntimeException   If file cannot be opened (e.g. insufficient 
     *                           access rights).
     */
    function __construct($file_name, $open_mode = 'r', $use_include_path = false, $context = NULL){}
    
    /**
     * @return whether the end of the stream is reached
     */
    function eof(){}

    /** increase current line number
     * @return next line from stream
     */
    function fgets(){}

    /**
     * @param delimiter  character used as field separator
     * @param enclosure  end of 
     * @return array containing read data
     */
    function fgetcsv($delimiter = NULL, $enclosure = NULL){}

    /**
     * Set the delimiter and enclosure character used in fgetcsv
     *
     * @param delimiter new delimiter, defaults to ','
     * @param enclosure new enclosure, defaults to '"'
     */
    function setCsvControl($delimiter = ';', $enclosure = '"'){}

    /**
     * @return array(delimiter, enclosure) as used in fgetcsv
     */
    function getCsvControl($delimiter = ',', $enclosure = '"'){}

    /**
     * @param operation lock operation (LOCK_SH, LOCK_EX, LOCK_UN, LOCK_NB)
     * @retval $wouldblock  whether the operation would block
     */
    function flock($operation, &$wouldblock){}

    /**
     * Flush current data
     * @return success or failure
     */
    function fflush(){}

    /**
     * @return current file position
     */
    function ftell(){}

    /**
     * @param pos new file position
     * @param whence seek method (SEEK_SET, SEEK_CUR, SEEK_END)
     * @return Upon success, returns 0; otherwise, returns -1. Note that 
     *         seeking past EOF is not considered an error.
     */
    function fseek($pos, $whence = SEEK_SET){}

    /**
     * @return next char from file
     * @note a new line character does not increase $this->lnum
     */
    function fgetc(){}

    /** Read and return remaining part of stream
     * @return size of remaining part passed through
     */
    function fpassthru(){}

    /** Get a line from the file and strip HTML tags
     * @param $allowable_tags tags to keep in the string
     */
    function fgetss($allowable_tags = NULL){}

    /** Scan the next line
     * @param $format string specifying format to parse
     */    
    function fscanf($format /* , ... */){}

    /**
     * @param $str to write
     * @param $length maximum line length to write
     */
    function fwrite($str, $length = NULL){}

    /**
     * @return array of file stat information
     */
    function fstat(){}

    /**
     * @param $size new size to truncate file to
     */
    function ftruncate($size){}

    /**
     * @param $flags new flag set
     */
    function setFlags($flags){}

    /**
     *  @return current set of flags
     */
    function getFlags(){}

    /**
     * @param $max_len set the maximum line length read
     */
    function setMaxLineLen($max_len){}

    /**
     * @return current setting for max line
     */
    function getMaxLineLen(){}

    /**
     * @return false
     */
    function hasChildren(){}

    /**
     * @return false
     */
    function getChildren(){}

    /**
     * Invalidate current line buffer and set line number to 0.
     */
    function rewind(){}

    /**
     * @return whether more data can be read
     */
    function valid(){}
    
    /**
     * @note Fill current line buffer if not done yet.
     * @return line buffer 
     */    
    function current(){}

    /**
     * @return line number 
     * @note fgetc() will increase the line number when reaing a new line char.
     *       This has the effect key() called on a read a new line will already
     *       return the increased line number.
     * @note Line counting works as long as you only read the file and do not
     *       use fseek().
     */    
    function key(){}

    /** Invalidate current line buffer.
     */    
    function next(){}

    /**
     * @return next line read from file and increase the line counter
     */
    private function readLine(){}

    /**
     * Free the current line buffer and increment the line counter
     */
    private function freeLine(){}

    /*
     * @note If you DO overload this function key() and current() will increment
     *       $this->lnum automatically. If not then function reaLine() will do
     *       that for you.
     */ 
    function getCurrentLine(){}

    /**
     * @return current line
     */
    function __toString(){}

    /**
     * @param $line_pos Seek to this line
     */    
    function seek($line_pos){}
}





/**
 * @brief   Cached recursive iteration over another Iterator
 * @author  Marcus Boerger
 * @version 1.2
 * @since PHP 5.1
 *
 * @see CachingIterator
 */
class RecursiveCachingIterator extends CachingIterator implements RecursiveIterator
{
    private $hasChildren;
    private $getChildren;

    /** Construct from another iterator
     *
     * @param it    Iterator to cache
     * @param flags Bitmask: 
     *              - CALL_TOSTRING   (whether to call __toString() for every element)
     *              - CATCH_GET_CHILD (whether to catch exceptions when trying to get childs)
     */
    function __construct(RecursiveIterator $it, $flags = self::CALL_TOSTRING){}

    /** Rewind Iterator
     */    
    function rewind(){}

    /** Forward to next element if necessary then an Iterator for the Children
     * will be created.
     */
    function next(){}
    
    private $ref;

    /** @return whether the current element has children
     * @note The check whether the Iterator for the children can be created was
     *       already executed. Hence when flag CATCH_GET_CHILD was given in
     *       constructor this fucntion returns false so that getChildren does 
     *       not try to access those children.
     */
    function hasChildren(){}

    /** @return An Iterator for the children
     */
    function getChildren(){}
}





/**
 * @brief   Interface for recursive iteration with RecursiveIteratorIterator
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.0
 */
interface RecursiveIterator extends Iterator
{
    /** @return whether the current element has children
     */
    function hasChildren();
    
    /** @return the sub iterator for the current element
     * @note The returned object must implement RecursiveIterator.
     */
    function getChildren();
}





/**
 * @brief   Iterates through recursive iterators
 * @author  Marcus Boerger
 * @version 1.2
 * @since PHP 5.0
 *
 * The objects of this class are created by instances of RecursiveIterator. 
 * Elements of those iterators may be traversable themselves. If so these 
 * sub elements are recursed into.
 */
class RecursiveIteratorIterator implements OuterIterator
{
    /** Mode: Only show leaves */
    const LEAVES_ONLY         = 0;
    /** Mode: Show parents prior to their children */
    const SELF_FIRST        = 1;
    /** Mode: Show all children prior to their parent */
    const CHILD_FIRST        = 2;

    /** Flag: Catches exceptions during getChildren() calls and simply jumps
     * to the next element. */
    const CATCH_GET_CHILD    = 0x00000002;

    private $ait = array();
    private $count = 0;
    private $mode  = self::LEAVES_ONLY;
    private $flags = 0;

    /** Construct from RecursiveIterator
     *
     * @param it     RecursiveIterator to iterate
     * @param mode   Operation mode (one of):
     *               - LEAVES_ONLY only show leaves
     *               - SELF_FIRST  show parents prior to their childs
     *               - CHILD_FIRST show all children prior to their parent
     * @param flags  Control flags, zero or any combination of the following
     *               (since PHP 5.1).
     *               - CATCH_GET_CHILD which catches exceptions during
     *                 getChildren() calls and simply jumps to the next 
     *                 element.
     */
    function __construct(RecursiveIterator $it, $mode = self::LEAVES_ONLY, $flags = 0){}

    /** Rewind to top iterator as set in constructor
     */
    function rewind(){}
    
    /** @return whether iterator is valid
     */
    function valid(){}
    
    /** @return current key
     */
    function key(){}
    
    /** @return current element
     */
    function current(){}
    
    /** Forward to next element
     */
    function next(){}

    /** @return Sub Iterator at given level or if unspecified the current sub 
     *          Iterator
     */
    function getSubIterator($level = NULL){}

    /**
     * @return The inner iterator
     */    
    function getInnerIterator(){}

    /** @return Current Depth (Number of parents)
     */
    function getDepth(){}

    /** @return whether current sub iterators current element has children
     * @since PHP 5.1
     */
    function callHasChildren(){}

    /** @return current sub iterators current children
     * @since PHP 5.1
     */
    function callGetChildren(){}

    /** Called right after calling getChildren() and its rewind().
     * @since PHP 5.1
     */
    function beginChildren(){}

    private function callNextElement($after_move){}
    
    /** Called when the next element is available
     */
    function nextElement()
    {
    }
}





/**
 * @brief   Iterator to filter parents
 * @author  Marcus Boerger
 * @version 1.2
 * @since PHP 5.1
 *
 * This extended FilterIterator allows a recursive iteration using 
 * RecursiveIteratorIterator that only shows those elements which have 
 * children.
 */
class ParentIterator extends RecursiveFilterIterator
{
    /** @return whetehr the current element has children
     */
    function accept(){}
}





/** @ingroup SPL
 * @brief   Iterator to filter recursive iterators
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 *
 * Passes the RecursiveIterator interface to the inner Iterator and provides
 * the same functionality as FilterIterator. This allows you to skip parents
 * and all their childs before loading them all. You need to care about
 * function getChildren() because it may not always suit your needs. The 
 * builtin behavior uses reflection to return a new instance of the exact same
 * class it is called from. That is you extend RecursiveFilterIterator and
 * getChildren() will create instance of that class. The problem is that doing
 * this does not transport any state or control information of your accept()
 * implementation to the new instance. To overcome this problem you might 
 * need to overwrite getChildren(), call this implementation and pass the
 * control vaules manually.
 */
abstract class RecursiveFilterIterator extends FilterIterator implements RecursiveIterator
{
    /** @param $it the RecursiveIterator to filter
     */
    function __construct(RecursiveIterator $it){}
    
    /** @return whether the current element has children
     */
    function hasChildren(){}

    /** @return an iterator for the current elements children
     *
     * @note the returned iterator will be of the same class as $this
     */
    function getChildren(){}
    
    private $ref;
}





/**
 * @brief   Regular expression filter for iterators
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 *
 * This filter iterator assumes that the inner iterator 
 */
class RegexIterator extends FilterIterator
{
    const USE_KEY     = 0x00000001; /**< If present in $flags the the key is 
                                         used rather then the current value. */

    const MATCH       = 0; /**< Mode: Executed a plain match only      */
    const GET_MATCH   = 1; /**< Mode: Return the first matche (if any) */
    const ALL_MATCHES = 2; /**< Mode: Return all matches (if any)      */
    const SPLIT       = 3; /**< Mode: Return the split values (if any) */
    const REPLACE     = 4; /**< Mode: Replace the input key or current */
    
    private $regex;     /**< the regular expression to match against */
    private $mode;      /**< operation mode (one of self::MATCH, 
                             self::GET_MATCH, self::ALL_MATCHES, self::SPLIT) */
    private $flags;     /**< special flags (self::USE_KEY) */
    private $preg_flags;/**< PREG_* flags, see preg_match(), preg_match_all(), 
                             preg_split() */ 
    private $key;       /**< the value used for key() */
    private $current;   /**< the value used for current() */

    /**
     * Constructs a regular expression filter around an iterator whose 
     * elemnts or keys are strings.
     *
     * @param it          inner iterator
     * @param regex       the regular expression to match
     * @param mode        operation mode (one of self::MATCH, self::GET_MATCH, 
     *                    self::ALL_MATCHES, self::SPLIT)
     * @param flags       special flags (self::USE_KEY)
     * @param preg_flags  global PREG_* flags, see preg_match(), 
     *                    preg_match_all(), preg_split()
     */
    function __construct(Iterator $it, $regex, $mode = 0, $flags = 0, $preg_flags = 0){}

    /**
     * Match current or key against regular expression using mode, flags and
     * preg_flags.
     *
     * @return whether this is a match
     *
     * @warning never call this twice for the same state
     */
    function accept(){}

    /** @return the key after accept has been called
     */
    function key(){}

    /** @return the current value after accept has been called
     */
    function current(){}

    /** @return current operation mode
     */
    function getMode(){}

    /** @param mode new operaion mode
     */
    function setMode($mode){}

    /** @return current operation flags
     */
    function getFlags(){}

    /** @param flags new operaion flags
     */
    function setFlags($flags){}

    /** @return current PREG flags
     */
    function getPregFlags(){}

    /** @param preg_flags new PREG flags
     */
    function setPregFlags($preg_flags){}
}





/** @ingroup SPL
 * @brief   An empty Iterator
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 */
class EmptyIterator implements Iterator
{
    /** No operation.
     * @return void
     */
    function rewind(){}

    /** @return \c false
     */
    function valid(){}

    /** This function must not be called. It throws an exception upon access.
     * @throw Exception
     * @return void
     */
    function current(){}

    /** This function must not be called. It throws an exception upon access.
     * @throw Exception
     * @return void
     */
    function key(){}

    /** No operation.
     * @return void
     */
    function next(){}
}





/** @ingroup SPL
 * @brief Basic Iterator wrapper
 * @since PHP 5.1
 *
 * This iterator wrapper allows to convert anything that is traversable into 
 * an Iterator. It is very important to understand that most classes that do 
 * not implement Iterator have their reasone to. Most likely they do not allow
 * the full Iterator feature set. If so you need to provide techniques to
 * prevent missuse. If you do not you must expect exceptions or fatal erros.
 *
 * It is also possible to derive the class and implement IteratorAggregate by
 * downcasting the instances returned in getIterator. See the following
 * example (assuming BaseClass implements Traversable):
 \code
 class SomeClass extends BaseClass implements IteratorAggregate
 {
   function getIterator()
   {
     return new IteratorIterator($this, 'BaseClass');
   }
 }
 \endcode
 *
 * As you can see in the example this approach requires that the class to 
 * downcast to is actually a base class of the specified iterator to wrap.
 * Omitting the downcast in the above example would result in an endless loop
 * since IteratorIterator::__construct() would call SomeClass::getIterator().
 */
class IteratorIterator implements OuterIterator
{
    /** Construct an IteratorIterator from an Iterator or an IteratorAggregate.
     *
     * @param iterator  inner iterator
     * @param classname optional class the iterator has to be downcasted to
     */
    function __construct(Traversable $iterator, $classname = null){}

    /** \return the inner iterator as passed to the constructor
     */
    function getInnerIterator(){}

    /** \return whether the iterator is valid
     */
    function valid(){}

    /** \return current key
     */
    function key(){}

    /** \return current value
     */
    function current(){}

    /** forward to next element
     */
    function next(){}

    /** rewind to the first element
     */
    function rewind(){}

    /** Aggregate the inner iterator
     *
     * @param func    Name of method to invoke
     * @param params  Array of parameters to pass to method
     */
    function __call($func, $params){}

    /** The inner iterator must be private because when this class will be
     * converted to c code it won't no longer be available.
     */
    private $iterator;
}





/**
 * @brief   Limited Iteration over another Iterator
 * @author  Marcus Boerger
 * @version 1.1
 * @since PHP 5.0
 *
 * A class that starts iteration at a certain offset and only iterates over
 * a specified amount of elements.
 *
 * This class uses SeekableIterator::seek() if available and rewind() plus
 * a skip loop otehrwise.
 */
class LimitIterator implements OuterIterator
{
    private $it;
    private $offset;
    private $count;
    private $pos;

    /** Construct
     *
     * @param it     Iterator to limit
     * @param offset Offset to first element
     * @param count  Maximum number of elements to show or -1 for all
     */
    function __construct(Iterator $it, $offset = 0, $count = -1){}
    
    /** Seek to specified position
     * @param position offset to seek to (relative to beginning not offset
     *                 specified in constructor).
     * @throw exception when position is invalid
     */
    function seek($position){}

    /** Rewind to offset specified in constructor
     */
    function rewind(){}
    
    /** @return whether iterator is valid
     */
    function valid(){}
    
    /** @return current key
     */
    function key(){}

    /** @return current element
     */
    function current(){}

    /** Forward to nect element
     */
    function next(){}

    /** @return current position relative to zero (not to offset specified in 
     *          constructor).
     */
    function getPosition(){}

    /**
     * @return The inner iterator
     */    
    function getInnerIterator(){}

    /** Aggregate the inner iterator
     *
     * @param func    Name of method to invoke
     * @param params  Array of parameters to pass to method
     */
    function __call($func, $params){}
}





/**
 * @brief   Object storage
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1.2
 *
 * This container allows to store objects uniquly without the need to compare
 * them one by one. This is only possible internally. The code represenation
 * here therefore has a complexity of O(n) while the actual implementation has
 * complexity O(1).
 */
class SplObjectStorage implements Iterator, Countable
{
    private $storage = array();
    private $index = 0;

    /** Rewind to top iterator as set in constructor
     */
    function rewind(){}
    
    /** @return whether iterator is valid
     */
    function valid(){}
    
    /** @return current key
     */
    function key(){}
    
    /** @return current object
     */
    function current(){}
    
    /** Forward to next element
     */
    function next(){}

    /** @return number of objects in storage
     */
    function count(){}

    /** @param obj object to look for
     * @return whether $obj is contained in storage
      */
    function contains($obj){}

    /** @param $obj new object to attach to storage if not yet contained
     */
    function attach($obj){}

    /** @param $obj object to remove from storage
     */
    function detach($obj){}
}





/** @ingroup SPL
 * @brief   An Iterator wrapper that doesn't call rewind
 * @author  Marcus Boerger
 * @version 1.1
 * @since PHP 5.1
 */
class NoRewindIterator extends IteratorIterator
{
    /** Simply prevent execution of inner iterators rewind().
     */
    function rewind(){}
}





/**
 * @brief   Recursive regular expression filter for iterators
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 *
 * This filter iterator assumes that the inner iterator 
 */
class RecursiveRegexIterator extends RegexIterator implements RecursiveIterator
{
    /**
     * Constructs a regular expression filter around an iterator whose 
     * elemnts or keys are strings.
     *
     * @param it          inner iterator
     * @param regex       the regular expression to match
     * @param mode        operation mode (one of self::MATCH, self::GET_MATCH, 
     *                    self::ALL_MATCHES, self::SPLIT)
     * @param flags       special flags (self::USE_KEY)
     * @param preg_flags  global PREG_* flags, see preg_match(), 
     *                    preg_match_all(), preg_split()
     */
    function __construct(RecursiveIterator $it, $regex, $mode = 0, $flags = 0, $preg_flags = 0){}

    /** @return whether the current element has children
     */
    function hasChildren(){}

    /** @return an iterator for the current elements children
     *
     * @note the returned iterator will be of the same class as $this
     */
    function getChildren(){}
    
    private $ref;
}





/**
 * @brief   Cached iteration over another Iterator
 * @author  Marcus Boerger
 * @version 1.2
 * @since PHP 5.0
 *
 * This iterator wrapper does a one ahead iteration. This way it knows whether
 * the inner iterator has one more element.
 *
 * @note If you want to convert the elements into strings and the inner 
 *       Iterator is an internal Iterator then you need to provide the 
 *       flag CALL_TOSTRING to do the conversion when the actual element
 *       is being fetched. Otherwise the conversion would happen with the
 *       already changed iterator. If you do not need this then it you should
 *       omit this flag because it costs unneccessary work and time.
 */
class CachingIterator implements OuterIterator
{
    const CALL_TOSTRING        = 0x00000001;
    const CATCH_GET_CHILD      = 0x00000002;
    const TOSTRING_USE_KEY     = 0x00000010;
    const TOSTRING_USE_CURRENT = 0x00000020;

    private $it;
    private $current;
    private $key;
    private $valid;
    private $strValue;

    /** Construct from another iterator
     *
     * @param it    Iterator to cache
     * @param flags Bitmask: 
     *              - CALL_TOSTRING  (whether to call __toString() for every element)
     */
    function __construct(Iterator $it, $flags = self::CALL_TOSTRING){}

    /** Rewind the Iterator
     */
    function rewind(){}
    
    /** Forward to the next element
     */
    function next(){}
    
    /** @return whether teh iterator is valid
     */
    function valid(){}

    /** @return whether there is one more element
     */
    function hasNext(){}
    
    /** @return the current element
     */
    function current(){}

    /** @return the current key
     */
    function key(){}

    /** Aggregate the inner iterator
     *
     * @param func    Name of method to invoke
     * @param params  Array of parameters to pass to method
     */
    function __call($func, $params){}
    
    /** @return the string represenatation that was generated for the current 
     *          element
     * @throw exception when CALL_TOSTRING was not specified in constructor
     */
    function __toString(){}
    
    /**
     * @return The inner iterator
     */    
    function getInnerIterator(){}
}





/** @ingroup SPL
 * @brief   Iterator that iterates over several iterators one after the other
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 */
class AppendIterator implements OuterIterator
{
    /** @internal array of inner iterators */
    private $iterators;

    /** Construct an empty AppendIterator
     */
    function __construct(){}

    /** Append an Iterator
     * @param $it Iterator to append
     *
     * If the current state is invalid but the appended iterator is valid
     * the the AppendIterator itself becomes valid. However there will be no
     * call to $it->rewind(). Also if the current state is invalid the inner
     * ArrayIterator will be rewound und forwarded to the appended element.
     */    
    function append(Iterator $it){}

    /** @return the current inner Iterator
     */
    function getInnerIterator(){}

    /** Rewind to the first element of the first inner Iterator.
     * @return void
     */
    function rewind(){}

    /** @return whether the current element is valid
      */
    function valid(){}

    /** @return the current value if it is valid or \c NULL
     */
    function current(){}

    /** @return the current key if it is valid or \c NULL
     */
    function key(){}

    /** Move to the next element. If this means to another Iterator that 
     * rewind that Iterator.
     * @return void
     */
    function next(){}

    /** Aggregates the inner iterator
     */    
    function __call($func, $params){}
}





/** @brief seekable iterator
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.0
 *
 * Turns a normal iterator ino a seekable iterator. When there is a way
 * to seek on an iterator LimitIterator can use this to efficiently rewind
 * to offset.
 */
interface SeekableIterator extends Iterator
{
    /** Seek to an absolute position
     *
     * \param $index position to seek to
     * \return void
     *
     * The method should throw an exception if it is not possible to seek to 
     * the given position. Typically this exception should be of type 
     * OutOfBoundsException.
     \code
    function seek($index);
        $this->rewind();
        $position = 0;
        while($position < $index && $this->valid()) {
            $this->next();
            $position++;
        }
        if (!$this->valid()) {
            throw new OutOfBoundsException('Invalid seek position');
        }
    }
     \endcode
     */
    function seek($index);
}





/** @ingroup SPL
 * @brief   A recursive array iterator
 * @author  Marcus Boerger
 * @version 1.0
 * @since PHP 5.1
 *
 * Passes the RecursiveIterator interface to the inner Iterator and provides
 * the same functionality as FilterIterator. This allows you to skip parents
 * and all their childs before loading them all. You need to care about
 * function getChildren() because it may not always suit your needs. The 
 * builtin behavior uses reflection to return a new instance of the exact same
 * class it is called from. That is you extend RecursiveFilterIterator and
 * getChildren() will create instance of that class. The problem is that doing
 * this does not transport any state or control information of your accept()
 * implementation to the new instance. To overcome this problem you might 
 * need to overwrite getChildren(), call this implementation and pass the
 * control vaules manually.
 */
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator
{
    /** @return whether the current element has children
     */
    function hasChildren(){}

    /** @return an iterator for the current elements children
     *
     * @note the returned iterator will be of the same class as $this
     */
    function getChildren(){}
    
    private $ref;
}

class AppendIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Appends an iterator.
     *
     * @param Iterator
     * @return void
     **/
    function append($iterator) {}

    /**
     * Gets the current value.
     *
     * @return void
     **/
    function current() {}

    /**
     * The getArrayIterator method
     *
     * @return void
     **/
    function getArrayIterator() {}

    /**
     * Get an inner iterator
     *
     * @return void
     **/
    function getInnerIterator() {}

    /**
     * Get an index of iterators.
     *
     * @return void
     **/
    function getIteratorIndex() {}

    /**
     * Get the current key
     *
     * @return void
     **/
    function key() {}

    /**
     * Moves to the next element. If this means to another Iterator then it
     * rewinds that Iterator.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewind to the first element of the first inner Iterator.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Checks validity of the current element.
     *
     * @return void
     **/
    function valid() {}

    /**
     * Constructs an AppendIterator.
     *
     **/
    function __construct() {}

}
class ArrayIterator implements Iterator, Traversable, ArrayAccess, SeekableIterator, Countable {
    /**
     * Appends value as the last element.
     *
     * @param string
     * @return void
     **/
    function append($value) {}

    /**
     * Sorts an array by values.
     *
     * @return void
     **/
    function asort() {}

    /**
     * Gets the number of elements in the array, or the number of public
     * properties in the object.
     *
     * @return void
     **/
    function count() {}

    /**
     * Get the current array entry.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * Get a copy of an array.
     *
     * @return void
     **/
    function getArrayCopy() {}

    /**
     * Get the current flags.
     *
     * @return void
     **/
    function getFlags() {}

    /**
     * This function returns the current array key
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Sorts an array by the keys.
     *
     * @return void
     **/
    function ksort() {}

    /**
     * Sort the entries by values using a case insensitive "natural order"
     * algorithm.
     *
     * @return void
     **/
    function natcasesort() {}

    /**
     * Sort the entries by values using "natural order" algorithm.
     *
     * @return void
     **/
    function natsort() {}

    /**
     * The iterator to the next entry.
     *
     * @return void
     **/
    function next() {}

    /**
     * Checks if the offset exists.
     *
     * @param string
     * @return void
     **/
    function offsetExists($index) {}

    /**
     * Gets the value from the provided offset.
     *
     * @param string
     * @return mixed
     **/
    function offsetGet($index) {}

    /**
     * Sets a value for a given offset.
     *
     * @param string
     * @param string
     * @return void
     **/
    function offsetSet($index, $newval) {}

    /**
     * Unsets a value for an offset.
     *
     * @param string
     * @return void
     **/
    function offsetUnset($index) {}

    /**
     * This rewinds the iterator to the beginning.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * @param int
     * @return void
     **/
    function seek($position) {}

    /**
     * Serialize.
     *
     * @return string
     **/
    function serialize() {}

    /**
     * Sets behaviour flags.
     *
     * @param string
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Sort the entries by values using user defined function.
     *
     * @param string
     * @return void
     **/
    function uasort($cmp_function) {}

    /**
     * Sort the entries by key using user defined function.
     *
     * @param string
     * @return void
     **/
    function uksort($cmp_function) {}

    /**
     * Unserialize.
     *
     * @param string
     * @return string
     **/
    function unserialize($serialized) {}

    /**
     * Checks if the array contains any more entries.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Constructs an ArrayIterator object.
     *
     * @param mixed
     **/
    function __construct($array) {}

}
class ArrayObject implements IteratorAggregate, Traversable, ArrayAccess, Serializable, Countable {
    /**
     * Appends a new value as the last element.
     *
     * @param mixed
     * @return void
     **/
    function append($value) {}

    /**
     * Sorts the entries such that the keys maintain their correlation with
     * the entries they are associated with. This is used mainly when sorting
     * associative arrays where the actual element order is significant.
     *
     * @return void
     **/
    function asort() {}

    /**
     * Get the number of public properties in the ArrayObject.
     *
     * @return int
     **/
    function count() {}

    /**
     * Exchange the current array with another array or object.
     *
     * @param mixed
     * @return array
     **/
    function exchangeArray($input) {}

    /**
     * Exports the ArrayObject to an array.
     *
     * @return array
     **/
    function getArrayCopy() {}

    /**
     * Gets the behavior flags of the ArrayObject. See the
     * ArrayObject::setFlags method for a list of the available flags.
     *
     * @return int
     **/
    function getFlags() {}

    /**
     * Create a new iterator from an ArrayObject instance.
     *
     * @return ArrayIterator
     **/
    function getIterator() {}

    /**
     * Gets the classname of the array iterator that is used by
     * ArrayObject::getIterator().
     *
     * @return int
     **/
    function getIteratorClass() {}

    /**
     * Sorts the entries by key, maintaining key to entry correlations. This
     * is useful mainly for associative arrays.
     *
     * @return void
     **/
    function ksort() {}

    /**
     * This method is a case insensitive version of ArrayObject::natsort.
     * 
     * This method implements a sort algorithm that orders alphanumeric
     * strings in the way a human being would while maintaining key/value
     * associations. This is described as a "natural ordering".
     *
     * @return void
     **/
    function natcasesort() {}

    /**
     * This method implements a sort algorithm that orders alphanumeric
     * strings in the way a human being would while maintaining key/value
     * associations. This is described as a "natural ordering". An example of
     * the difference between this algorithm and the regular computer string
     * sorting algorithms (used in ArrayObject::asort) method can be seen in
     * the example below.
     *
     * @return void
     **/
    function natsort() {}

    /**
     * @param mixed
     * @return bool
     **/
    function offsetExists($index) {}

    /**
     * @param mixed
     * @return mixed
     **/
    function offsetGet($index) {}

    /**
     * Sets the value at the specified index to newval.
     *
     * @param mixed
     * @param mixed
     * @return void
     **/
    function offsetSet($index, $newval) {}

    /**
     * Unsets the value at the specified index.
     *
     * @param mixed
     * @return void
     **/
    function offsetUnset($index) {}

    /**
     * Serializes an ArrayObject.
     *
     * @return void
     **/
    function serialize() {}

    /**
     * Set the flags that change the behavior of the ArrayObject.
     *
     * @param int
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Sets the classname of the array iterator that is used by
     * ArrayObject::getIterator().
     *
     * @param string
     * @return void
     **/
    function setIteratorClass($iterator_class) {}

    /**
     * This function sorts the entries such that keys maintain their
     * correlation with the entry that they are associated with, using a
     * user-defined comparison function.
     * 
     * This is used mainly when sorting associative arrays where the actual
     * element order is significant.
     *
     * @param callback
     * @return void
     **/
    function uasort($cmp_function) {}

    /**
     * This function sorts the keys of the entries using a user-supplied
     * comparison function. The key to entry correlations will be maintained.
     *
     * @param callback
     * @return void
     **/
    function uksort($cmp_function) {}

    /**
     * Unserializes a serialized ArrayObject.
     *
     * @param string
     * @return void
     **/
    function unserialize($serialized) {}

}
class BadFunctionCallException extends LogicException {
}
class BadMethodCallException extends BadFunctionCallException {
}
class CachingIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator, ArrayAccess, Countable {
    const CALL_TOSTRING = 0;
    const CATCH_GET_CHILD = 0;
    /**
     * May return the number of elements in the iterator.
     *
     * @return void
     **/
    function count() {}

    /**
     * May return the current element in the iteration.
     *
     * @return void
     **/
    function current() {}

    /**
     * @return void
     **/
    function getCache() {}

    /**
     * Get the bitmask of the flags used for this CachingIterator instance.
     *
     * @return void
     **/
    function getFlags() {}

    /**
     * Returns the iterator sent to the constructor.
     *
     * @return void
     **/
    function getInnerIterator() {}

    /**
     * @return void
     **/
    function hasNext() {}

    /**
     * This method may return a key for the current element.
     *
     * @return void
     **/
    function key() {}

    /**
     * Move the iterator forward.
     *
     * @return void
     **/
    function next() {}

    /**
     * @param string
     * @return void
     **/
    function offsetExists($index) {}

    /**
     * @param string
     * @return void
     **/
    function offsetGet($index) {}

    /**
     * @param string
     * @param string
     * @return void
     **/
    function offsetSet($index, $newval) {}

    /**
     * @param string
     * @return void
     **/
    function offsetUnset($index) {}

    /**
     * Rewind the iterator.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Set the flags for the CachingIterator object.
     *
     * @param bitmask
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Check whether the current element is valid.
     *
     * @return void
     **/
    function valid() {}

    /**
     * @param Iterator
     * @param string
     **/
    function __construct($iterator, $flags) {}

    /**
     * Get the string representation of the current element.
     *
     * @return void
     **/
    function __toString() {}

}
class Cairo {
    /**
     * Returns an array with the available font backends
     *
     * @return array
     **/
    function availableFonts() {}

    /**
     * Returns an array with the available surface backends
     *
     * @return array
     **/
    function availableSurfaces() {}

    /**
     * Retrieves the current status as a readable string
     *
     * @param int
     * @return void
     **/
    function statusToString($status) {}

    /**
     * Retrieves the current version of the cairo library as an integer value
     *
     * @return integer
     **/
    function version() {}

    /**
     * Retrieves the current cairo library version as a string.
     *
     * @return string
     **/
    function versionString() {}

}
class CairoAntialias {
}
class CairoContent {
}
class CairoContext {
    /**
     * Appends the path onto the current path. The path may be either the
     * return value from one of CairoContext::copyPath or
     * CairoContext::copyPathFlat;
     * 
     * if path is not a valid CairoPath instance a CairoException will be
     * thrown
     *
     * @param CairoPath
     * @return void
     **/
    function appendPath($path) {}

    /**
     * Adds a circular arc of the given radius to the current path. The arc
     * is centered at (x, y), begins at angle1 and proceeds in the direction
     * of increasing angles to end at angle2. If angle2 is less than angle1
     * it will be progressively increased by 2*M_PI until it is greater than
     * angle1.
     * 
     * If there is a current point, an initial line segment will be added to
     * the path to connect the current point to the beginning of the arc. If
     * this initial line is undesired, it can be avoided by calling
     * CairoContext::newSubPath or procedural cairo_new_sub_path before
     * calling CairoContext::arc or cairo_arc.
     * 
     * Angles are measured in radians. An angle of 0.0 is in the direction
     * of the positive X axis (in user space). An angle of M_PI/2.0 radians
     * (90 degrees) is in the direction of the positive Y axis (in user
     * space). Angles increase in the direction from the positive X axis
     * toward the positive Y axis. So with the default transformation matrix,
     * angles increase in a clockwise direction.
     * 
     * (To convert from degrees to radians, use degrees * (M_PI / 180.).)
     * This function gives the arc in the direction of increasing angles; see
     * CairoContext::arcNegative or cairo_arc_negative to get the arc in the
     * direction of decreasing angles.
     *
     * @param double
     * @param double
     * @param double
     * @param double
     * @param double
     * @return void
     **/
    function arc($x, $y, $radius, $angle1, $angle2) {}

    /**
     * Adds a circular arc of the given radius to the current path. The arc
     * is centered at (x, y), begins at angle1 and proceeds in the direction
     * of decreasing angles to end at angle2. If angle2 is greater than
     * angle1 it will be progressively decreased by 2*M_PI until it is less
     * than angle1.
     * 
     * See CairoContext::arc or cairo_arc for more details. This function
     * differs only in the direction of the arc between the two angles.
     *
     * @param double
     * @param double
     * @param double
     * @param double
     * @param double
     * @return void
     **/
    function arcNegative($x, $y, $radius, $angle1, $angle2) {}

    /**
     * Establishes a new clip region by intersecting the current clip region
     * with the current path as it would be filled by CairoContext::fill or
     * cairo_fill and according to the current fill rule (see
     * CairoContext::setFillRule or cairo_set_fill_rule).
     * 
     * After CairoContext::clip or cairo_clip, the current path will be
     * cleared from the cairo context.
     * 
     * The current clip region affects all drawing operations by effectively
     * masking out any changes to the surface that are outside the current
     * clip region.
     * 
     * Calling CairoContext::clip or cairo_clip can only make the clip region
     * smaller, never larger. But the current clip is part of the graphics
     * state, so a temporary restriction of the clip region can be achieved
     * by calling CairoContext::clip or cairo_clip within a
     * CairoContext::save/CairoContext::restore or cairo_save/cairo_restore
     * pair. The only other means of increasing the size of the clip region
     * is CairoContext::resetClip or procedural cairo_reset_clip.
     *
     * @return void
     **/
    function clip() {}

    /**
     * Computes a bounding box in user coordinates covering the area inside
     * the current clip.
     *
     * @return array
     **/
    function clipExtents() {}

    /**
     * Establishes a new clip region by intersecting the current clip region
     * with the current path as it would be filled by Context.fill and
     * according to the current FILL RULE (see CairoContext::setFillRule or
     * cairo_set_fill_rule).
     * 
     * Unlike CairoContext::clip, CairoContext::clipPreserve preserves the
     * path within the Context. The current clip region affects all drawing
     * operations by effectively masking out any changes to the surface that
     * are outside the current clip region.
     * 
     * Calling CairoContext::clipPreserve can only make the clip region
     * smaller, never larger. But the current clip is part of the graphics
     * state, so a temporary restriction of the clip region can be achieved
     * by calling CairoContext::clipPreserve within a
     * CairoContext::save/CairoContext::restore pair. The only other means of
     * increasing the size of the clip region is CairoContext::resetClip.
     *
     * @return void
     **/
    function clipPreserve() {}

    /**
     * Returns a list-type array with the current clip region as a list of
     * rectangles in user coordinates
     *
     * @return array
     **/
    function clipRectangleList() {}

    /**
     * Adds a line segment to the path from the current point to the
     * beginning of the current sub-path, (the most recent point passed to
     * CairoContext::moveTo), and closes this sub-path. After this call the
     * current point will be at the joined endpoint of the sub-path.
     * 
     * The behavior of close_path() is distinct from simply calling
     * CairoContext::lineTo with the equivalent coordinate in the case of
     * stroking. When a closed sub-path is stroked, there are no caps on the
     * ends of the sub-path. Instead, there is a line join connecting the
     * final and initial segments of the sub-path.
     * 
     * If there is no current point before the call to
     * CairoContext::closePath, this function will have no effect.
     *
     * @return void
     **/
    function closePath() {}

    /**
     * Emits the current page for backends that support multiple pages, but
     * doesn’t clear it, so, the contents of the current page will be
     * retained for the next page too. Use CairoContext::showPage if you want
     * to get an empty page after the emission.
     * 
     * This is a convenience function that simply calls
     * CairoSurface::copyPage on CairoContext’s target.
     *
     * @return void
     **/
    function copyPage() {}

    /**
     * Creates a copy of the current path and returns it to the user as a
     * CairoPath. See CairoPath for hints on how to iterate over the returned
     * data structure.
     * 
     * This function will always return a valid CairoPath object, but the
     * result will have no data, if either of the following conditions hold:
     * 
     * 1. If there is insufficient memory to copy the path. In this case
     * CairoPath-&gt;status will be set to CAIRO_STATUS_NO_MEMORY. 2. If
     * context is already in an error state. In this case
     * CairoPath-&gt;status will contain the same status that would be
     * returned by cairo_status.
     * 
     * In either case, CairoPath-&gt;status will be set to
     * CAIRO_STATUS_NO_MEMORY (regardless of what the error status in cr
     * might have been).
     *
     * @return CairoPath
     **/
    function copyPath() {}

    /**
     * Description here.
     *
     * @return CairoPath
     **/
    function copyPathFlat() {}

    /**
     * Adds a cubic Bezier spline to the path from the current point to
     * position x3 ,y3 in user-space coordinates, using x1, y1 and x2, y2 as
     * the control points. After this call the current point will be x3, y3.
     * 
     * If there is no current point before the call to CairoContext::curveTo
     * this function will behave as if preceded by a call to
     * CairoContext::moveTo (x1, y1).
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function curveTo($x1, $y1, $x2, $y2, $x3, $y3) {}

    /**
     * Transform a coordinate from device space to user space by multiplying
     * the given point by the inverse of the current transformation matrix
     * (CTM).
     *
     * @param float
     * @param float
     * @return array
     **/
    function deviceToUser($x, $y) {}

    /**
     * Transform a distance vector from device space to user space. This
     * function is similar to CairoContext::deviceToUser or
     * cairo_device_to_user except that the translation components of the
     * inverse Cairo Transformation Matrix will be ignored when transforming
     * (x,y).
     *
     * @param float
     * @param float
     * @return array
     **/
    function deviceToUserDistance($x, $y) {}

    /**
     * A drawing operator that fills the current path according to the
     * current CairoFillRule, (each sub-path is implicitly closed before
     * being filled). After CairoContext::fill or cairo_fill, the current
     * path will be cleared from the CairoContext.
     *
     * @return void
     **/
    function fill() {}

    /**
     * Computes a bounding box in user coordinates covering the area that
     * would be affected, (the “inked” area), by a CairoContext::fill
     * operation given the current path and fill parameters. If the current
     * path is empty, returns an empty rectangle (0,0,0,0). Surface
     * dimensions and clipping are not taken into account.
     * 
     * Contrast with CairoContext::pathExtents, which is similar, but returns
     * non-zero extents for some paths with no inked area, (such as a simple
     * line segment).
     * 
     * Note that CairoContext::fillExtents must necessarily do more work to
     * compute the precise inked areas in light of the fill rule, so
     * CairoContext::pathExtents may be more desirable for sake of
     * performance if the non-inked path extents are desired.
     *
     * @return array
     **/
    function fillExtents() {}

    /**
     * A drawing operator that fills the current path according to the
     * current CairoFillRule, (each sub-path is implicitly closed before
     * being filled). Unlike CairoContext::fill, CairoContext::fillPreserve
     * (Procedural cairo_fill, cairo_fill_preserve, respectively) preserves
     * the path within the Context.
     *
     * @return void
     **/
    function fillPreserve() {}

    /**
     * Gets the font extents for the currently selected font.
     *
     * @return array
     **/
    function fontExtents() {}

    /**
     * Returns the current CairoAntialias mode, as set by
     * CairoContext::setAntialias.
     *
     * @return integer
     **/
    function getAntialias() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getCurrentPoint() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getDash() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getDashCount() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFillRule() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontFace() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontMatrix() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontOptions() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getGroupTarget() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getLineCap() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getLineJoin() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getLineWidth() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getMatrix() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getMiterLimit() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getOperator() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getScaledFont() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getSource() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getTarget() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getTolerance() {}

    /**
     * Description here.
     *
     * @param array
     * @return void
     **/
    function glyphPath($glyphs) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function hasCurrentPoint() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function identityMatrix() {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function inFill($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function inStroke($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function lineTo($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function mask($pattern) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function maskSurface($surface, $x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function moveTo($x, $y) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function newPath() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function newSubPath() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function paint() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function paintWithAlpha($alpha) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function pathExtents() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function popGroup() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function popGroupToSource() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function pushGroup() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function pushGroupWithContent($content) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function rectangle($x, $y, $width, $height) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function relCurveTo($x1, $y1, $x2, $y2, $x3, $y3) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function relLineTo($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function relMoveTo($x, $y) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function resetClip() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function restore() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function rotate($angle) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function save() {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function scale($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function selectFontFace($family, $slant, $weight) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setAntialias($antialias) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setDash($dashes, $offset) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setFillRule($setting) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setFontFace($fontface) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setFontMatrix($matrix) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setFontOptions($fontoptions) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setFontSize($size) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setLineCap($setting) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setLineJoin($setting) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setLineWidth($width) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setMatrix($matrix) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setMiterLimit($limit) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setOperator($setting) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setScaledFont($scaledfont) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setSource($pattern) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function setSourceRGB($red, $green, $blue) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function setSourceRGBA($red, $green, $blue, $alpha) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function setSourceSurface($surface, $x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setTolerance($tolerance) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function showPage() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function showText($text) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function status() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function stroke() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function strokeExtents() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function strokePreserve() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function textExtents($text) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function textPath($string) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function transform($matrix) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function translate($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function userToDevice($x, $y) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function userToDeviceDistance($x, $y) {}

    /**
     * Creates a new CairoContext object to draw
     *
     * @param CairoSurface
     **/
    function __construct($surface) {}

}
class CairoException extends Exception {
}
class CairoExtend {
}
class CairoFillRule {
}
class CairoFilter {
}
class CairoFontFace {
    /**
     * This function returns the type of the backend used to create a font
     * face. See CairoFontType class constants for available types.
     *
     * @return void
     **/
    function getType() {}

    /**
     * Checks whether an error has previously occurred for this font face
     *
     * @return void
     **/
    function status() {}

    /**
     * CairoFontFace class represents a particular font at a particular
     * weight, slant, and other characteristic but no transformation or size.
     * 
     * Note: This class can't be instantiated directly it is created by
     * CairoContext::getFontFace or cairo_scaled_font_get_font_face
     *
     **/
    function __construct() {}

}
class CairoFontOptions {
    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function equal($other) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getAntialias() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getHintMetrics() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getHintStyle() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getSubpixelOrder() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function hash() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function merge($other) {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setAntialias($antialias) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setHintMetrics($hint_metrics) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setHintStyle($hint_style) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setSubpixelOrder($subpixel_order) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function status() {}

    /**
     * The method description goes here.
     *
     **/
    function __construct() {}

}
class CairoFontSlant {
}
class CairoFontType {
}
class CairoFontWeight {
}
class CairoFormat {
    /**
     * This method provides a stride value that will respect all alignment
     * requirements of the accelerated image-rendering code within cairo.
     *
     * @param long
     * @param integer
     * @return integer
     **/
    function strideForWidth($format, $width) {}

}
class CairoGradientPattern extends CairoPattern {
    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function addColorStopRgb($offset, $red, $green, $blue) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function addColorStopRgba($offset, $red, $green, $blue, $alpha) {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getColorStopCount() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function getColorStopRgba($index) {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getExtend() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setExtend($extend) {}

}
class CairoHintMetrics {
}
class CairoHintStyle {
}
class CairoImageSurface extends CairoSurface {
    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param integer
     * @param integer
     * @param string
     * @return void
     **/
    function createForData($data, $format, $width, $height, $stride) {}

    /**
     * Creates a new CairoImageSurface form a png image file
     * 
     * This method should be called static
     *
     * @param string
     * @return CairoImageSurface
     **/
    function createFromPng($file) {}

    /**
     * Returns the image data of this surface or NULL if surface is not an
     * image surface, or if CairoContext::finish, procedural :
     * cairo_surface_finish, has been called.
     *
     * @return string
     **/
    function getData() {}

    /**
     * Retrieves the image format, as one of the CairoFormat defined
     *
     * @return integer
     **/
    function getFormat() {}

    /**
     * This methods returns the CairoImageSurface height.
     *
     * @return integer
     **/
    function getHeight() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getStride() {}

    /**
     * Gets the width of the CairoImageSurface
     *
     * @return integer
     **/
    function getWidth() {}

    /**
     * Creates a new CairoImageSuface object of type format
     *
     * @param string
     * @param integer
     * @param integer
     **/
    function __construct($format, $width, $height) {}

}
class CairoLinearGradient extends CairoGradientPattern {
    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getPoints() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($x0, $y0, $x1, $y1) {}

}
class CairoLineCap {
}
class CairoLineJoin {
}
class CairoMatrix {
    /**
     * Creates a new matrix that is an identity transformation. An identity
     * transformation means the source data is copied into the destination
     * data without change
     *
     * @return void
     **/
    function initIdentity() {}

    /**
     * Creats a new matrix to a transformation that rotates by radians
     * provided
     *
     * @param float
     * @return void
     **/
    function initRotate($radians) {}

    /**
     * Creates a new matrix to a transformation that scales by sx and sy in
     * the X and Y dimensions, respectively.
     *
     * @param float
     * @param float
     * @return void
     **/
    function initScale($sx, $sy) {}

    /**
     * Creates a new matrix to a transformation that translates by tx and ty
     * in the X and Y dimensions, respectively.
     *
     * @param float
     * @param float
     * @return void
     **/
    function initTranslate($tx, $ty) {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function invert() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function multiply($matrix1, $matrix2) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function rotate($sx, $sy) {}

    /**
     * Applies scaling by sx, sy to the transformation in the matrix. The
     * effect of the new transformation is to first scale the coordinates by
     * sx and sy, then apply the original transformation to the coordinates.
     *
     * @param float
     * @param float
     * @return void
     **/
    function scale($sx, $sy) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function transformDistance($dx, $dy) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function transformPoint($dx, $dy) {}

    /**
     * Description here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function translate($tx, $ty) {}

    /**
     * Returns new CairoMatrix object. Matrices are used throughout cairo to
     * convert between different coordinate spaces. Sets matrix to be the
     * affine transformation given by xx, yx, xy, yy, x0, y0. The
     * transformation is given by: x_new = xx * x + xy * y + x0; and y_new =
     * yx * x + yy * y + y0;
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     **/
    function __construct($xx, $yx, $xy, $yy, $x0, $y0) {}

}
class CairoOperator {
}
class CairoPath {
}
class CairoPattern {
    /**
     * Description here.
     *
     * @return void
     **/
    function getMatrix() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getType() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function setMatrix($matrix) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function status() {}

    /**
     * The method description goes here.
     *
     **/
    function __construct() {}

}
class CairoPatternType {
}
class CairoPdfSurface extends CairoSurface {
    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setSize($width, $height) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     **/
    function __construct($file, $width, $height) {}

}
class CairoPsLevel {
}
class CairoPsSurface extends CairoSurface {
    /**
     * The method description goes here.
     *
     * @return void
     **/
    function dscBeginPageSetup() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function dscBeginSetup() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function dscComment($comment) {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getEps() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getLevels() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function levelToString($level) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function restrictToLevel($level) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setEps($level) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setSize($width, $height) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     **/
    function __construct($file, $width, $height) {}

}
class CairoRadialGradient extends CairoGradientPattern {
    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getCircles() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($x0, $y0, $r0, $x1, $y1, $r1) {}

}
class CairoScaledFont {
    /**
     * The method description goes here.
     *
     * @return void
     **/
    function extents() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getCtm() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontFace() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontMatrix() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontOptions() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getScaleMatrix() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getType() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function glyphExtents($glyphs) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function status() {}

    /**
     * Description here.
     *
     * @param string
     * @return void
     **/
    function textExtents($text) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($font_face, $matrix, $ctm, $options) {}

}
class CairoSolidPattern extends CairoPattern {
    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getRgba() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($red, $green, $blue, $alpha) {}

}
class CairoStatus {
}
class CairoSubpixelOrder {
}
class CairoSurface {
    /**
     * Description here.
     *
     * @return void
     **/
    function copyPage() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function createSimilar($content, $width, $height) {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function finish() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function flush() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getContent() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getDeviceOffset() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function getFontOptions() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getType() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function markDirty() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function markDirtyRectangle($x, $y, $width, $height) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setDeviceOffset($x, $y) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setFallbackResolution($x, $y) {}

    /**
     * Description here.
     *
     * @return void
     **/
    function showPage() {}

    /**
     * Description here.
     *
     * @return void
     **/
    function status() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function writeToPng($file) {}

    /**
     * The method description goes here.
     *
     **/
    function __construct() {}

}
class CairoSurfacePattern extends CairoPattern {
    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getExtend() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getFilter() {}

    /**
     * The method description goes here.
     *
     * @return void
     **/
    function getSurface() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setExtend($extend) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function setFilter($filter) {}

    /**
     * The method description goes here.
     *
     * @param string
     **/
    function __construct($surface) {}

}
class CairoSurfaceType {
}
class CairoSvgSurface extends CairoSurface {
    /**
     * Returns a numerically indexed array of currently available
     * CairoSvgVersion constants. In order to retreive the string values for
     * each item, use CairoSvgSurface::versionToString.
     *
     * @return array
     **/
    function getVersions() {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function restrictToVersion($version) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @return void
     **/
    function versionToString($version) {}

    /**
     * The method description goes here.
     *
     * @param string
     * @param string
     * @param string
     **/
    function __construct($file, $width, $height) {}

}
class CairoSvgVersion {
}
class CairoToyFontFace extends CairoFontFace {
}
class Collator {
    /**
     * This function sorts an array such that array indices maintain their
     * correlation with the array elements they are associated with. This is
     * used mainly when sorting associative arrays where the actual element
     * order is significant. Array elements will have sort order according to
     * current locale rules.
     * 
     * Equivalent to standard PHP asort.
     *
     * @param array
     * @param int
     * @return bool
     **/
    function asort(&$arr, $sort_flag) {}

    /**
     * Compare two Unicode strings according to collation rules.
     *
     * @param string
     * @param string
     * @return int
     **/
    function compare($str1, $str2) {}

    /**
     * The strings will be compared using the options already specified.
     *
     * @param string
     * @return Collator
     **/
    function create($locale) {}

    /**
     * Get a value of an integer collator attribute.
     *
     * @param int
     * @return int
     **/
    function getAttribute($attr) {}

    /**
     * @return int
     **/
    function getErrorCode() {}

    /**
     * Retrieves the message for the last error.
     *
     * @return string
     **/
    function getErrorMessage() {}

    /**
     * Get collector locale name.
     *
     * @param int
     * @return string
     **/
    function getLocale($type) {}

    /**
     * @return int
     **/
    function getStrength() {}

    /**
     * @param int
     * @param int
     * @return bool
     **/
    function setAttribute($attr, $val) {}

    /**
     * The ICU Collation Service supports many levels of comparison (named
     * "Levels", but also known as "Strengths"). Having these categories
     * enables ICU to sort strings precisely according to local conventions.
     * However, by allowing the levels to be selectively employed, searching
     * for a string in text can be performed with various matching
     * conditions.
     * 
     * Primary Level: Typically, this is used to denote differences between
     * base characters (for example, "a" "b"). It is the strongest
     * difference. For example, dictionaries are divided into different
     * sections by base character. This is also called the level1 strength.
     * 
     * Secondary Level: Accents in the characters are considered secondary
     * differences (for example, "as" "às" "at"). Other differences between
     * letters can also be considered secondary differences, depending on the
     * language. A secondary difference is ignored when there is a primary
     * difference anywhere in the strings. This is also called the level2
     * strength.
     * 
     * Note: In some languages (such as Danish), certain accented letters
     * are considered to be separate base characters. In most languages,
     * however, an accented letter only has a secondary difference from the
     * unaccented version of that letter.
     * 
     * Tertiary Level: Upper and lower case differences in characters are
     * distinguished at the tertiary level (for example, "ao" "Ao" "aò"). In
     * addition, a variant of a letter differs from the base form on the
     * tertiary level (such as "A" and " "). Another example is the
     * difference between large and small Kana. A tertiary difference is
     * ignored when there is a primary or secondary difference anywhere in
     * the strings. This is also called the level3 strength.
     * 
     * Quaternary Level: When punctuation is ignored (see Ignoring
     * Punctuations ) at level 13, an additional level can be used to
     * distinguish words with and without punctuation (for example, "ab"
     * "a-b" "aB"). This difference is ignored when there is a primary,
     * secondary or tertiary difference. This is also known as the level4
     * strength. The quaternary level should only be used if ignoring
     * punctuation is required or when processing Japanese text (see Hiragana
     * processing).
     * 
     * Identical Level: When all other levels are equal, the identical level
     * is used as a tiebreaker. The Unicode code point values of the NFD form
     * of each string are compared at this level, just in case there is no
     * difference at levels 14. For example, Hebrew cantillation marks are
     * only distinguished at this level. This level should be used sparingly,
     * as only code point values differences between two strings is an
     * extremely rare occurrence. Using this level substantially decreases
     * the performance for both incremental comparison and sort key
     * generation (as well as increasing the sort key length). It is also
     * known as level 5 strength.
     * 
     * For example, people may choose to ignore accents or ignore accents and
     * case when searching for text. Almost all characters are distinguished
     * by the first three levels, and in most locales the default value is
     * thus Tertiary. However, if Alternate is set to be Shifted, then the
     * Quaternary strength can be used to break ties among whitespace,
     * punctuation, and symbols that would otherwise be ignored. If very fine
     * distinctions among characters are required, then the Identical
     * strength can be used (for example, Identical Strength distinguishes
     * between the Mathematical Bold Small A and the Mathematical Italic
     * Small A.). However, using levels higher than Tertiary the Identical
     * strength result in significantly longer sort keys, and slower string
     * comparison performance for equal strings.
     *
     * @param int
     * @return bool
     **/
    function setStrength($strength) {}

    /**
     * This function sorts an array according to current locale rules.
     * 
     * Equivalent to standard PHP sort .
     *
     * @param array
     * @param int
     * @return bool
     **/
    function sort(&$arr, $sort_flag) {}

    /**
     * Similar to collator_sort but uses ICU sorting keys produced by
     * ucol_getSortKey() to gain more speed on large arrays.
     *
     * @param array
     * @return bool
     **/
    function sortWithSortKeys(&$arr) {}

}
class Countable {
    /**
     * This method is executed when using the count function on an object
     * implementing Countable.
     *
     * @return int
     **/
    function count() {}

}
class DateInterval {
    /**
     * Uses the normal date parsers and sets up a DateInterval from the
     * relative parts of the parsed string.
     *
     * @param string
     * @return DateInterval
     **/
    function createFromDateString($time) {}

    /**
     * Formats the interval.
     *
     * @param string
     * @return string
     **/
    function format($format) {}

    /**
     * Creates new DateInterval object.
     *
     * @param string
     **/
    function __construct($interval_spec) {}

}
class DatePeriod implements Traversable {
    /**
     * Creates new DatePeriod object.
     *
     * @param DateTime
     * @param DateInterval
     * @param int
     * @param int
     **/
    function __construct($start, $interval, $recurrences, $options) {}

}
class DateTime {
    /**
     * Adds the specified DateInterval object to the specified DateTime
     * object.
     *
     * @param DateInterval
     * @return DateTime
     **/
    function add($interval) {}

    /**
     * Returns new DateTime object formatted according to the specified
     * format.
     *
     * @param string
     * @param string
     * @param DateTimeZone
     * @return DateTime
     **/
    function createFromFormat($format, $time, $timezone) {}

    /**
     * Returns the difference between two DateTime objects.
     *
     * @param DateTime
     * @param bool
     * @return DateInterval
     **/
    function diff($datetime, $absolute) {}

    /**
     * @param string
     * @return string
     **/
    function format($format) {}

    /**
     * Returns the warnings and errors found while parsing a date/time
     * string.
     *
     * @return array
     **/
    function getLastErrors() {}

    /**
     * @return int
     **/
    function getOffset() {}

    /**
     * Gets the Unix timestamp.
     *
     * @return int
     **/
    function getTimestamp() {}

    /**
     * @return DateTimeZone
     **/
    function getTimezone() {}

    /**
     * Alter the timestamp of a DateTime object by incrementing or
     * decrementing in a format accepted by strtotime.
     *
     * @param string
     * @return DateTime
     **/
    function modify($modify) {}

    /**
     * Resets the current date of the DateTime object to a different date.
     *
     * @param int
     * @param int
     * @param int
     * @return DateTime
     **/
    function setDate($year, $month, $day) {}

    /**
     * Set a date according to the ISO 8601 standard - using weeks and day
     * offsets rather than specific dates.
     *
     * @param int
     * @param int
     * @param int
     * @return DateTime
     **/
    function setISODate($year, $week, $day) {}

    /**
     * Resets the current time of the DateTime object to a different time.
     *
     * @param int
     * @param int
     * @param int
     * @return DateTime
     **/
    function setTime($hour, $minute, $second) {}

    /**
     * Sets the date and time based on an Unix timestamp.
     *
     * @param int
     * @return DateTime
     **/
    function setTimestamp($unixtimestamp) {}

    /**
     * @param DateTimeZone
     * @return DateTime
     **/
    function setTimezone($timezone) {}

    /**
     * Subtracts the specified DateInterval object from the specified
     * DateTime object.
     *
     * @param DateInterval
     * @return DateTime
     **/
    function sub($interval) {}

    /**
     * Returns new DateTime object.
     *
     * @param string
     * @param DateTimeZone
     **/
    function __construct($time, $timezone) {}

    /**
     * The __set_state handler.
     *
     * @param array
     * @return DateTime
     **/
    function __set_state($array) {}

    /**
     * The __wakeup handler.
     *
     * @return DateTime
     **/
    function __wakeup() {}

}
class DateTimeZone {
    /**
     * Returns location information for a timezone, including country code,
     * latitude/longitude and comments.
     *
     * @return array
     **/
    function getLocation() {}

    /**
     * Returns the name of the timezone.
     *
     * @return string
     **/
    function getName() {}

    /**
     * This function returns the offset to GMT for the date/time specified in
     * the datetime parameter. The GMT offset is calculated with the timezone
     * information contained in the DateTimeZone object being used.
     *
     * @param DateTime
     * @return int
     **/
    function getOffset($datetime) {}

    /**
     * @param int
     * @param int
     * @return array
     **/
    function getTransitions($timestamp_begin, $timestamp_end) {}

    /**
     * @return array
     **/
    function listAbbreviations() {}

    /**
     * @param int
     * @param string
     * @return array
     **/
    function listIdentifiers($what, $country) {}

    /**
     * Creates new DateTimeZone object.
     *
     * @param string
     **/
    function __construct($timezone) {}

}
/**
 * The class from which dir is instantiated.
 **/
class Directory {
    /**
     * A pseudo-object oriented mechanism for reading a directory. The given
     * directory is opened. Two properties are available once the directory
     * has been opened. The handle property can be used with other directory
     * functions such as readdir, rewinddir and closedir. The path property
     * is set to path the directory that was opened. Three methods are
     * available: read, rewind and close.
     *
     * @var resource
     **/
    var $handle;
    /**
     * A pseudo-object oriented mechanism for reading a directory. The given
     * directory is opened. Two properties are available once the directory
     * has been opened. The handle property can be used with other directory
     * functions such as readdir, rewinddir and closedir. The path property
     * is set to path the directory that was opened. Three methods are
     * available: read, rewind and close.
     *
     * @var string
     **/
    var $path;
    /**
     * A pseudo-object oriented mechanism for reading a directory. The given
     * directory is opened. Two properties are available once the directory
     * has been opened. The handle property can be used with other directory
     * functions such as readdir, rewinddir and closedir. The path property
     * is set to path the directory that was opened. Three methods are
     * available: read, rewind and close.
     *
     * @return string
     **/
    function read() {}

}
class DirectoryIterator extends SplFileInfo implements Iterator, Traversable, SeekableIterator {
    /**
     * Get the current DirectoryIterator item.
     *
     * @return DirectoryIterator
     **/
    function current() {}

    /**
     * Get the last access time of the current DirectoryIterator item.
     *
     * @return int
     **/
    function getATime() {}

    /**
     * Get the base name of the current DirectoryIterator item.
     *
     * @param string
     * @return string
     **/
    function getBasename($suffix) {}

    /**
     * Get the inode change time for the current DirectoryIterator item.
     *
     * @return int
     **/
    function getCTime() {}

    /**
     * Get the file name of the current DirectoryIterator item.
     *
     * @return string
     **/
    function getFilename() {}

    /**
     * Get the group id of the file.
     *
     * @return int
     **/
    function getGroup() {}

    /**
     * Get the inode number for the current DirectoryIterator item.
     *
     * @return int
     **/
    function getInode() {}

    /**
     * Get the last modification time of the current DirectoryIterator item,
     * as a Unix timestamp.
     *
     * @return int
     **/
    function getMTime() {}

    /**
     * Get the owner of the current DirectoryIterator item, in numerical
     * format.
     *
     * @return int
     **/
    function getOwner() {}

    /**
     * Get the path to the current DirectoryIterator item.
     *
     * @return string
     **/
    function getPath() {}

    /**
     * Get the path and file name of the current file.
     *
     * @return string
     **/
    function getPathname() {}

    /**
     * Get the permissions of the current DirectoryIterator item.
     *
     * @return int
     **/
    function getPerms() {}

    /**
     * Get the file size for the current DirectoryIterator item.
     *
     * @return int
     **/
    function getSize() {}

    /**
     * Determines which file type the current DirectoryIterator item belongs
     * to. One of file, link, or dir.
     *
     * @return string
     **/
    function getType() {}

    /**
     * Determines if the current DirectoryIterator item is a directory.
     *
     * @return bool
     **/
    function isDir() {}

    /**
     * Determines if the current DirectoryIterator item is a directory and
     * either . or ...
     *
     * @return bool
     **/
    function isDot() {}

    /**
     * Determines if the current DirectoryIterator item is executable.
     *
     * @return bool
     **/
    function isExecutable() {}

    /**
     * Determines if the current DirectoryIterator item is a regular file.
     *
     * @return bool
     **/
    function isFile() {}

    /**
     * Determines if the current DirectoryIterator item is a symbolic link.
     *
     * @return bool
     **/
    function isLink() {}

    /**
     * Determines if the current DirectoryIterator item is readable.
     *
     * @return bool
     **/
    function isReadable() {}

    /**
     * Determines if the current DirectoryIterator item is writable.
     *
     * @return bool
     **/
    function isWritable() {}

    /**
     * Get the key for the current DirectoryIterator item.
     *
     * @return string
     **/
    function key() {}

    /**
     * Move forward to the next DirectoryIterator item.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewind the DirectoryIterator back to the start.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Seek to a given position in the DirectoryIterator.
     *
     * @param int
     * @return void
     **/
    function seek($position) {}

    /**
     * Check whether current DirectoryIterator position is a valid file.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Get the file name of the current DirectoryIterator item.
     *
     * @return string
     **/
    function __toString() {}

}
class DomainException extends LogicException {
}
class DOMAttr extends DOMNode {
    /**
     * This function checks if the attribute is a defined ID.
     * 
     * According to the DOM standard this requires a DTD which defines the
     * attribute ID to be of type ID. You need to validate your document with
     * 
     * or DOMDocument::validateOnParse before using this function.
     *
     * @return bool
     **/
    function isId() {}

    /**
     * Creates a new DOMAttr object. This object is read only. It may be
     * appended to a document, but additional nodes may not be appended to
     * this node until the node is associated with a document. To create a
     * writable node, use .
     *
     * @param string
     * @param string
     **/
    function __construct($name, $value) {}

}
class DomAttribute {
    /**
     * Gets the name of the attribute.
     *
     * @return string
     **/
    function name() {}

    /**
     * This function sets the value of an attribute.
     *
     * @param string
     * @return bool
     **/
    function set_value($content) {}

    /**
     * Checks if the attribute was explicitly given a value in the original
     * document.
     *
     * @return bool
     **/
    function specified() {}

    /**
     * This function returns the value of the attribute.
     *
     * @return string
     **/
    function value() {}

}
class DOMCharacterData extends DOMNode {
    /**
     * Append the string data to the end of the character data of the node.
     *
     * @param string
     * @return void
     **/
    function appendData($data) {}

    /**
     * Deletes count characters starting from position offset.
     *
     * @param int
     * @param int
     * @return void
     **/
    function deleteData($offset, $count) {}

    /**
     * Inserts string data at position offset.
     *
     * @param int
     * @param string
     * @return void
     **/
    function insertData($offset, $data) {}

    /**
     * Replace count characters starting from position offset with data.
     *
     * @param int
     * @param int
     * @param string
     * @return void
     **/
    function replaceData($offset, $count, $data) {}

    /**
     * Returns the specified substring.
     *
     * @param int
     * @param int
     * @return string
     **/
    function substringData($offset, $count) {}

}
class DomComment extends DOMCharacterData {
    /**
     * Creates a new DOMComment object. This object is read only. It may be
     * appended to a document, but additional nodes may not be appended to
     * this node until the node is associated with a document. To create a
     * writeable node, use .
     *
     * @param string
     **/
    function __construct($value) {}

}
class DomDocument extends DOMNode {
    /**
     * Adds a root element node to a dom document and returns the new node.
     * The element name is given in the passed parameter.
     * 
     * Creating a simple HTML document header
     *
     * @param string
     * @return domelement
     **/
    function add_root($name) {}

    /**
     * This function creates a new instance of class DOMAttr.
     *
     * @param string
     * @return DOMAttr
     **/
    function createAttribute($name) {}

    /**
     * This function creates a new instance of class DOMAttr.
     *
     * @param string
     * @param string
     * @return DOMAttr
     **/
    function createAttributeNS($namespaceURI, $qualifiedName) {}

    /**
     * This function creates a new instance of class DOMCDATASection.
     *
     * @param string
     * @return DOMCDATASection
     **/
    function createCDATASection($data) {}

    /**
     * This function creates a new instance of class DOMComment.
     *
     * @param string
     * @return DOMComment
     **/
    function createComment($data) {}

    /**
     * This function creates a new instance of class DOMDocumentFragment.
     *
     * @return DOMDocumentFragment
     **/
    function createDocumentFragment() {}

    /**
     * This function creates a new instance of class DOMElement.
     *
     * @param string
     * @param string
     * @return DOMElement
     **/
    function createElement($name, $value) {}

    /**
     * This function creates a new element node with an associated namespace.
     *
     * @param string
     * @param string
     * @param string
     * @return DOMElement
     **/
    function createElementNS($namespaceURI, $qualifiedName, $value) {}

    /**
     * This function creates a new instance of class DOMEntityReference.
     *
     * @param string
     * @return DOMEntityReference
     **/
    function createEntityReference($name) {}

    /**
     * This function creates a new instance of class
     * DOMProcessingInstruction.
     *
     * @param string
     * @param string
     * @return DOMProcessingInstruction
     **/
    function createProcessingInstruction($target, $data) {}

    /**
     * This function creates a new instance of class DOMText.
     *
     * @param string
     * @return DOMText
     **/
    function createTextNode($content) {}

    /**
     * This function returns a new instance of class DomAttribute. The name
     * of the attribute is the value of the first parameter. The value of the
     * attribute is the value of the second parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domnode_append_child, domdocument_create_element,
     * domdocument_create_text, domdocument_create_cdata_section,
     * domdocument_create_processing_instruction,
     * domdocument_create_entity_reference, and domnode_insert_before.
     *
     * @param string
     * @param string
     * @return domattribute
     **/
    function create_attribute($name, $value) {}

    /**
     * This function returns a new instance of class DomCData. The content of
     * the cdata is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domnode_append_child, domdocument_create_element,
     * domdocument_create_text, domdocument_create_attribute,
     * domdocument_create_processing_instruction,
     * domdocument_create_entity_reference, and domnode_insert_before.
     *
     * @param string
     * @return domcdata
     **/
    function create_cdata_section($content) {}

    /**
     * This function returns a new instance of class DomComment. The content
     * of the comment is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domnode_append_child, domdocument_create_element,
     * domdocument_create_text, domdocument_create_attribute,
     * domdocument_create_processing_instruction,
     * domdocument_create_entity_reference, and domnode_insert_before.
     *
     * @param string
     * @return domcomment
     **/
    function create_comment($content) {}

    /**
     * This function returns a new instance of class DomElement. The tag name
     * of the element is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domdocument_create_element_ns, domnode_append_child,
     * domdocument_create_text, domdocument_create_comment,
     * domdocument_create_attribute,
     * domdocument_create_processing_instruction,
     * domdocument_create_entity_reference, and domnode_insert_before.
     *
     * @param string
     * @return domelement
     **/
    function create_element($name) {}

    /**
     * This function returns a new instance of class DomElement. The tag name
     * of the element is the value of the passed parameter name. The URI of
     * the namespace is the value of the passed parameter uri. If there is
     * already a namespace declaration with the same uri in the root-node of
     * the document, the prefix of this is taken, otherwise it will take the
     * one provided in the optional parameter prefix or generate a random
     * one.
     * 
     * The return value is if an error occurred.
     * 
     * See also domdocument_create_element_ns, domnode_add_namespace,
     * domnode_set_namespace, domnode_append_child, domdocument_create_text,
     * domdocument_create_comment, domdocument_create_attribute,
     * domdocument_create_processing_instruction,
     * domdocument_create_entity_reference, and domnode_insert_before.
     *
     * @param string
     * @param string
     * @param string
     * @return domelement
     **/
    function create_element_ns($uri, $name, $prefix) {}

    /**
     * This function returns a new instance of class DomEntityReference. The
     * content of the entity reference is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domnode_append_child, domdocument_create_element,
     * domdocument_create_text, domdocument_create_cdata_section,
     * domdocument_create_processing_instruction,
     * domdocument_create_attribute, and domnode_insert_before.
     *
     * @param string
     * @return domentityreference
     **/
    function create_entity_reference($content) {}

    /**
     * This function returns a new instance of class DomCData. The content of
     * the pi is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domnode_append_child, domdocument_create_element,
     * domdocument_create_text, domdocument_create_cdata_section,
     * domdocument_create_attribute, domdocument_create_entity_reference, and
     * domnode_insert_before.
     *
     * @param string
     * @return domprocessinginstruction
     **/
    function create_processing_instruction($content) {}

    /**
     * This function returns a new instance of class DomText. The content of
     * the text is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also domnode_append_child, domdocument_create_element,
     * domdocument_create_comment, domdocument_create_text,
     * domdocument_create_attribute,
     * domdocument_create_processing_instruction,
     * domdocument_create_entity_reference, and domnode_insert_before.
     *
     * @param string
     * @return domtext
     **/
    function create_text_node($content) {}

    /**
     * This function returns an object of class DomDocumentType. In versions
     * of PHP before 4.3 this has been the class Dtd, but the DOM Standard
     * does not know such a class.
     * 
     * See also the methods of class DomDocumentType.
     *
     * @return domdocumenttype
     **/
    function doctype() {}

    /**
     * This function returns the root element node of a document.
     * 
     * The following example returns just the element with name CHAPTER and
     * prints it. The other node -- the comment -- is not returned.
     * 
     * Retrieving root element
     *
     * @return domelement
     **/
    function document_element() {}

    /**
     * Creates an XML document from the dom representation. This function
     * usually is called after building a new dom document from scratch as in
     * the example below. The format specifies whether the output should be
     * neatly formatted, or not. The first parameter specifies the name of
     * the filename and the second parameter, whether it should be compressed
     * or not.
     * 
     * Creating a simple HTML document header
     * 
     * See also domdocument_dump_mem, and domdocument_html_dump_mem.
     *
     * @param string
     * @param bool
     * @param bool
     * @return string
     **/
    function dump_file($filename, $compressionmode, $format) {}

    /**
     * Creates an XML document from the dom representation. This function
     * usually is called after building a new dom document from scratch as in
     * the example below. The format specifies whether the output should be
     * neatly formatted, or not.
     * 
     * Creating a simple HTML document header
     * 
     * See also domdocument_dump_file, and domdocument_html_dump_mem.
     *
     * @param bool
     * @param string
     * @return string
     **/
    function dump_mem($format, $encoding) {}

    /**
     * This function is similar to but searches for an element with a given
     * id.
     * 
     * For this function to work, you will need either to set some ID
     * attributes with or a DTD which defines an attribute to be of type ID.
     * In the later case, you will need to validate your document with
     * 
     * or DOMDocument-&gt;validateOnParse before using this function.
     *
     * @param string
     * @return DOMElement
     **/
    function getElementById($elementId) {}

    /**
     * This function returns a new instance of class DOMNodeList containing
     * the elements with a given tag name.
     *
     * @param string
     * @return DOMNodeList
     **/
    function getElementsByTagName($name) {}

    /**
     * Returns a DOMNodeList of all elements with a given local name and a
     * namespace URI.
     *
     * @param string
     * @param string
     * @return DOMNodeList
     **/
    function getElementsByTagNameNS($namespaceURI, $localName) {}

    /**
     * 
     * 
     * See also domdocument_add_root
     *
     * @param string
     * @return array
     **/
    function get_elements_by_tagname($name) {}

    /**
     * This function is similar to domdocument_get_elements_by_tagname but
     * searches for an element with a given id. According to the DOM standard
     * this requires a DTD which defines the attribute ID to be of type ID,
     * though the current implementation simply does an xpath search for
     * "//*[@ID = '%s']". This does not comply to the DOM standard which
     * requires to return null if it is not known which attribute is of type
     * id. This behaviour is likely to be fixed, so do not rely on the
     * current behaviour.
     * 
     * See also domdocument_get_elements_by_tagname
     *
     * @param string
     * @return domelement
     **/
    function get_element_by_id($id) {}

    /**
     * Creates an HTML document from the dom representation. This function
     * usually is called after building a new dom document from scratch as in
     * the example below.
     * 
     * Creating a simple HTML document header
     * 
     * See also domdocument_dump_file, and domdocument_html_dump_mem.
     *
     * @return string
     **/
    function html_dump_mem() {}

    /**
     * This function returns a copy of the node to import and associates it
     * with the current document.
     *
     * @param DOMNode
     * @param bool
     * @return DOMNode
     **/
    function importNode($importedNode, $deep) {}

    /**
     * Loads an XML document from a file.
     *
     * @param string
     * @param int
     * @return mixed
     **/
    function load($filename, $options) {}

    /**
     * The function parses the HTML contained in the string source. Unlike
     * loading XML, HTML does not have to be well-formed to load. This
     * function may also be called statically to load and create a
     * DOMDocument object. The static invocation may be used when no
     * DOMDocument properties need to be set prior to loading.
     *
     * @param string
     * @return bool
     **/
    function loadHTML($source) {}

    /**
     * The function parses the HTML document in the file named filename.
     * Unlike loading XML, HTML does not have to be well-formed to load.
     * 
     * Though not recommended, this function may also be called statically to
     * load and create a DOMDocument object. The static invocation may be
     * used when no DOMDocument properties need to be set prior to loading.
     * However, doing so will result an in E_STRICT error being generated.
     *
     * @param string
     * @return bool
     **/
    function loadHTMLFile($filename) {}

    /**
     * Loads an XML document from a string.
     * 
     * This method may also be called statically to load and create a
     * DOMDocument object. The static invocation may be used when no
     * DOMDocument properties need to be set prior to loading.
     *
     * @param string
     * @param int
     * @return mixed
     **/
    function loadXML($source, $options) {}

    /**
     * This method acts as if you saved and then loaded the document, putting
     * the document in a "normal" form.
     *
     * @return void
     **/
    function normalizeDocument() {}

    /**
     * This method allows you to register your own extended DOM class to be
     * used afterward by the PHP DOM extension.
     * 
     * This method is not part of the DOM standard.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function registerNodeClass($baseclass, $extendedclass) {}

    /**
     * Performs relaxNG validation on the document based on the given RNG
     * schema.
     *
     * @param string
     * @return bool
     **/
    function relaxNGValidate($filename) {}

    /**
     * Performs relaxNG validation on the document based on the given RNG
     * source.
     *
     * @param string
     * @return bool
     **/
    function relaxNGValidateSource($source) {}

    /**
     * Creates an XML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     *
     * @param string
     * @param int
     * @return int
     **/
    function save($filename, $options) {}

    /**
     * Creates an HTML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     *
     * @return string
     **/
    function saveHTML() {}

    /**
     * Creates an HTML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     *
     * @param string
     * @return int
     **/
    function saveHTMLFile($filename) {}

    /**
     * Creates an XML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     *
     * @param DOMNode
     * @param int
     * @return string
     **/
    function saveXML($node, $options) {}

    /**
     * Validates a document based on the given schema file.
     *
     * @param string
     * @return bool
     **/
    function schemaValidate($filename) {}

    /**
     * Validates a document based on a schema defined in the given string.
     *
     * @param string
     * @return bool
     **/
    function schemaValidateSource($source) {}

    /**
     * Validates the document based on its DTD.
     * 
     * You can also use the validateOnParse property of DOMDocument to make a
     * DTD validation.
     *
     * @return bool
     **/
    function validate() {}

    /**
     * This method substitutes XIncludes in a DOMDocument object.
     *
     * @param int
     * @return int
     **/
    function xinclude($options) {}

    /**
     * Creates a new DOMDocument object.
     *
     * @param string
     * @param string
     **/
    function __construct($version, $encoding) {}

}
class DomDocumentFragment extends DOMNode {
    /**
     * Appends raw XML data to a DOMDocumentFragment.
     * 
     * This method is not part of the DOM standard. It was created as a
     * simpler approach for appending an XML DocumentFragment in a
     * DOMDocument.
     * 
     * If you want to stick to the standards, you will have to create a
     * temporary DOMDocument with a dummy root and then loop through the
     * child nodes of the root of your XML data to append them.
     *
     * @param string
     * @return bool
     **/
    function appendXML($data) {}

}
class DomDocumentType extends DOMNode {
    /**
     * @return array
     **/
    function entities() {}

    /**
     * @return bool
     **/
    function internal_subset() {}

    /**
     * This function returns the name of the document type.
     *
     * @return string
     **/
    function name() {}

    /**
     * @return array
     **/
    function notations() {}

    /**
     * This function returns the public id of the document type.
     *
     * @return string
     **/
    function public_id() {}

    /**
     * Returns the system id of the document type.
     *
     * @return string
     **/
    function system_id() {}

}
class DomElement extends DOMNode {
    /**
     * Gets the value of the attribute with name name for the current node.
     *
     * @param string
     * @return string
     **/
    function getAttribute($name) {}

    /**
     * Returns the attribute node with name name for the current element.
     *
     * @param string
     * @return DOMAttr
     **/
    function getAttributeNode($name) {}

    /**
     * Returns the attribute node in namespace namespaceURI with local name
     * localName for the current node.
     *
     * @param string
     * @param string
     * @return DOMAttr
     **/
    function getAttributeNodeNS($namespaceURI, $localName) {}

    /**
     * Gets the value of the attribute in namespace namespaceURI with local
     * name localName for the current node.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getAttributeNS($namespaceURI, $localName) {}

    /**
     * This function returns a new instance of the class DOMNodeList of all
     * descendant elements with a given tag name, in the order in which they
     * are encountered in a preorder traversal of this element tree.
     *
     * @param string
     * @return DOMNodeList
     **/
    function getElementsByTagName($name) {}

    /**
     * This function fetch all the descendant elements with a given localName
     * and namespaceURI.
     *
     * @param string
     * @param string
     * @return DOMNodeList
     **/
    function getElementsByTagNameNS($namespaceURI, $localName) {}

    /**
     * Returns the value of the given attribute in the current element.
     * 
     * Since PHP 4.3, if no attribute with given name is found, an empty
     * string is returned.
     *
     * @param string
     * @return string
     **/
    function get_attribute($name) {}

    /**
     * Returns the node of the given attribute in the current element.
     *
     * @param string
     * @return DomAttribute
     **/
    function get_attribute_node($name) {}

    /**
     * Gets all the sub elements with the specific name within the current
     * element.
     *
     * @param string
     * @return array
     **/
    function get_elements_by_tagname($name) {}

    /**
     * Indicates whether attribute named name exists as a member of the
     * element.
     *
     * @param string
     * @return bool
     **/
    function hasAttribute($name) {}

    /**
     * Indicates whether attribute in namespace namespaceURI named localName
     * exists as a member of the element.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function hasAttributeNS($namespaceURI, $localName) {}

    /**
     * This functions checks to see if an attribute named name exists in the
     * current node.
     *
     * @param string
     * @return bool
     **/
    function has_attribute($name) {}

    /**
     * Removes attribute named name from the element.
     *
     * @param string
     * @return bool
     **/
    function removeAttribute($name) {}

    /**
     * Removes attribute oldnode from the element.
     *
     * @param DOMAttr
     * @return bool
     **/
    function removeAttributeNode($oldnode) {}

    /**
     * Removes attribute is namespace namespaceURI named localName from the
     * element.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function removeAttributeNS($namespaceURI, $localName) {}

    /**
     * Removes an attribute from the current DomElement node.
     *
     * @param string
     * @return bool
     **/
    function remove_attribute($name) {}

    /**
     * Sets an attribute with name name to the given value. If the attribute
     * does not exist, it will be created.
     *
     * @param string
     * @param string
     * @return DOMAttr
     **/
    function setAttribute($name, $value) {}

    /**
     * Adds new attribute node attr to element.
     *
     * @param DOMAttr
     * @return DOMAttr
     **/
    function setAttributeNode($attr) {}

    /**
     * Adds new attribute node attr to element.
     *
     * @param DOMAttr
     * @return DOMAttr
     **/
    function setAttributeNodeNS($attr) {}

    /**
     * Sets an attribute with namespace namespaceURI and name name to the
     * given value. If the attribute does not exist, it will be created.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function setAttributeNS($namespaceURI, $qualifiedName, $value) {}

    /**
     * Declares the attribute name to be of type ID.
     *
     * @param string
     * @param bool
     * @return void
     **/
    function setIdAttribute($name, $isId) {}

    /**
     * Declares the attribute specified by attr to be of type ID.
     *
     * @param DOMAttr
     * @param bool
     * @return void
     **/
    function setIdAttributeNode($attr, $isId) {}

    /**
     * Declares the attribute specified by localName and namespaceURI to be
     * of type ID.
     *
     * @param string
     * @param string
     * @param bool
     * @return void
     **/
    function setIdAttributeNS($namespaceURI, $localName, $isId) {}

    /**
     * Sets an attribute with name name to the given value.
     *
     * @param string
     * @param string
     * @return DomAttribute
     **/
    function set_attribute($name, $value) {}

    /**
     * @param DomNode
     * @return DomNode
     **/
    function set_attribute_node($attr) {}

    /**
     * Returns the name of the current node. Calling this function is the
     * same as accessing the tagname property, or calling on the current
     * node.
     *
     * @return string
     **/
    function tagname() {}

    /**
     * Creates a new DOMElement object. This object is read only. It may be
     * appended to a document, but additional nodes may not be appended to
     * this node until the node is associated with a document. To create a
     * writeable node, use or .
     *
     * @param string
     * @param string
     * @param string
     **/
    function __construct($name, $value, $namespaceURI) {}

}
class DOMEntity extends DOMNode {
}
class DomEntityReference extends DOMNode {
    /**
     * Creates a new DOMEntityReference object.
     *
     * @param string
     **/
    function __construct($name) {}

}
class DOMException extends Exception {
}
class DOMImplementation {
    /**
     * Creates a DOMDocument object of the specified type with its document
     * element.
     *
     * @param string
     * @param string
     * @param DOMDocumentType
     * @return DOMDocument
     **/
    function createDocument($namespaceURI, $qualifiedName, $doctype) {}

    /**
     * Creates an empty DOMDocumentType object. Entity declarations and
     * notations are not made available. Entity reference expansions and
     * default attribute additions do not occur.
     *
     * @param string
     * @param string
     * @param string
     * @return DOMDocumentType
     **/
    function createDocumentType($qualifiedName, $publicId, $systemId) {}

    /**
     * Test if the DOM implementation implements a specific feature.
     * 
     * You can find a list of all features in the Conformance section of the
     * DOM specification.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function hasFeature($feature, $version) {}

    /**
     * Creates a new DOMImplementation object.
     *
     **/
    function __construct() {}

}
class DomNamedNodeMap {
    /**
     * Retrieves a node specified by its nodeName.
     *
     * @param string
     * @return DOMNode
     **/
    function getNamedItem($name) {}

    /**
     * Retrieves a node specified by localName and namespaceURI.
     *
     * @param string
     * @param string
     * @return DOMNode
     **/
    function getNamedItemNS($namespaceURI, $localName) {}

    /**
     * Retrieves a node specified by index within the DOMNamedNodeMap object.
     *
     * @param int
     * @return DOMNode
     **/
    function item($index) {}

}
class DomNode {
    /**
     * This method adds a namespace declaration to a node.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function add_namespace($uri, $prefix) {}

    /**
     * This functions appends a child to an existing list of children or
     * creates a new list of children. The child can be created with e.g.
     * DOMDocument::createElement, DOMDocument::createTextNode etc. or simply
     * by using any other node.
     *
     * @param DOMNode
     * @return DOMNode
     **/
    function appendChild($newnode) {}

    /**
     * This functions appends a child to an existing list of children or
     * creates a new list of children.
     *
     * @param DOMNode
     * @return DOMNode
     **/
    function append_child($newnode) {}

    /**
     * This functions appends a sibling to an existing node. The child can be
     * created with e.g. domdocument_create_element, domdocument_create_text
     * etc. or simply by using any other node.
     * 
     * Before a new sibling is added it is first duplicated. Therefore the
     * new child is a completely new copy which can be modified without
     * changing the node which was passed to this function. If the node
     * passed has children itself, they will be duplicated as well, which
     * makes it quite easy to duplicate large parts of an XML document. The
     * return value is the added sibling. If you plan to do further
     * modifications on the added sibling you must use the returned node.
     * 
     * This function has been added to provide the behaviour of
     * domnode_append_child as it works till PHP 4.2.
     * 
     * See also domnode_append_before.
     *
     * @param domelement
     * @return domelement
     **/
    function append_sibling($newnode) {}

    /**
     * This function only returns an array of attributes if the node is of
     * type XML_ELEMENT_NODE.
     * 
     * (PHP = 4.3 only) If no attributes are found, NULL is returned.
     *
     * @return array
     **/
    function attributes() {}

    /**
     * Returns all children of the node.
     * 
     * See also domnode_next_sibling, and domnode_previous_sibling.
     *
     * @return array
     **/
    function child_nodes() {}

    /**
     * Creates a copy of the node.
     *
     * @param bool
     * @return DOMNode
     **/
    function cloneNode($deep) {}

    /**
     * @return domelement
     **/
    function clone_node() {}

    /**
     * 
     * 
     * See also domdocument_dump_mem.
     *
     * @return string
     **/
    function dump_node() {}

    /**
     * Returns the first child of the node.
     * 
     * (PHP = 4.3 only) If no first child is found, NULL is returned.
     * 
     * See also domnode_last_child, and domnode_next_sibling,
     * domnode_previous_sibling.
     *
     * @return domelement
     **/
    function first_child() {}

    /**
     * Gets line number for where the node is defined.
     *
     * @return int
     **/
    function getLineNo() {}

    /**
     * This function returns the content of the actual node.
     * 
     * Getting a content
     *
     * @return string
     **/
    function get_content() {}

    /**
     * This method checks if the node has attributes. The tested node have to
     * be an XML_ELEMENT_NODE.
     *
     * @return bool
     **/
    function hasAttributes() {}

    /**
     * This function checks if the node has children.
     *
     * @return bool
     **/
    function hasChildNodes() {}

    /**
     * This function checks if the node has attributes.
     * 
     * See also domnode_has_child_nodes.
     *
     * @return bool
     **/
    function has_attributes() {}

    /**
     * This function checks if the node has children.
     * 
     * See also domnode_child_nodes.
     *
     * @return bool
     **/
    function has_child_nodes() {}

    /**
     * This function inserts a new node right before the reference node. If
     * you plan to do further modifications on the appended child you must
     * use the returned node.
     *
     * @param DOMNode
     * @param DOMNode
     * @return DOMNode
     **/
    function insertBefore($newnode, $refnode) {}

    /**
     * This function inserts the new node newnode right before the node
     * refnode. The return value is the inserted node. If you plan to do
     * further modifications on the appended child you must use the returned
     * node.
     * 
     * (PHP = 4.3 only) If newnode already is part of a document, it will be
     * first unlinked from its existing context. If refnode is NULL, then
     * newnode will be inserted at the end of the list of children.
     * 
     * domnode_insert_before is very similar to domnode_append_child as the
     * following example shows which does the same as the example at
     * domnode_append_child.
     * 
     * Adding a child
     * 
     * See also domnode_append_child.
     *
     * @param domelement
     * @param domelement
     * @return domelement
     **/
    function insert_before($newnode, $refnode) {}

    /**
     * Tells whether namespaceURI is the default namespace.
     *
     * @param string
     * @return bool
     **/
    function isDefaultNamespace($namespaceURI) {}

    /**
     * This function indicates if two nodes are the same node. The comparison
     * is not based on content
     *
     * @param DOMNode
     * @return bool
     **/
    function isSameNode($node) {}

    /**
     * Checks if the asked feature is supported for the specified version.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function isSupported($feature, $version) {}

    /**
     * @return bool
     **/
    function is_blank_node() {}

    /**
     * Returns the last child of the node.
     * 
     * (PHP = 4.3 only) If no last child is found, NULL is returned.
     * 
     * See also domnode_first_child, and domnode_next_sibling,
     * domnode_previous_sibling.
     *
     * @return domelement
     **/
    function last_child() {}

    /**
     * Gets the namespace URI of the node based on the prefix.
     *
     * @param string
     * @return string
     **/
    function lookupNamespaceURI($prefix) {}

    /**
     * Gets the namespace prefix of the node based on the namespace URI.
     *
     * @param string
     * @return string
     **/
    function lookupPrefix($namespaceURI) {}

    /**
     * This function returns the next sibling of the current node. If there
     * is no next sibling it returns ( 4.3) or null (= 4.3). You can use this
     * function to iterate over all children of a node as shown in the
     * example.
     * 
     * Iterate over children
     * 
     * See also domnode_previous_sibling.
     *
     * @return domelement
     **/
    function next_sibling() {}

    /**
     * Returns name of the node. The name has different meanings for the
     * different types of nodes as illustrated in the following table.
     * 
     * Meaning of value
     * 
     * Type Meaning
     * 
     * DomAttribute value of attribute
     * 
     * DomAttribute
     * 
     * DomCDataSection #cdata-section
     * 
     * DomComment #comment
     * 
     * DomDocument #document
     * 
     * DomDocumentType document type name
     * 
     * DomElement tag name
     * 
     * DomEntity name of entity
     * 
     * DomEntityReference name of entity reference
     * 
     * DomNotation notation name
     * 
     * DomProcessingInstruction target
     * 
     * DomText #text
     *
     * @return string
     **/
    function node_name() {}

    /**
     * Returns the type of the node. All possible types are listed in the
     * table in the introduction.
     *
     * @return int
     **/
    function node_type() {}

    /**
     * Returns value of the node. The value has different meanings for the
     * different types of nodes as illustrated in the following table.
     * 
     * Meaning of value
     * 
     * Type Meaning
     * 
     * DomAttribute value of attribute
     * 
     * DomAttribute
     * 
     * DomCDataSection content
     * 
     * DomComment content of comment
     * 
     * DomDocument null
     * 
     * DomDocumentType null
     * 
     * DomElement null
     * 
     * DomEntity null
     * 
     * DomEntityReference null
     * 
     * DomNotation null
     * 
     * DomProcessingInstruction entire content without target
     * 
     * DomText content of text
     *
     * @return string
     **/
    function node_value() {}

    /**
     * Normalizes the node.
     *
     * @return void
     **/
    function normalize() {}

    /**
     * This function returns the document the current node belongs to.
     * 
     * The following example will create two identical lists of children.
     * 
     * Finding the document of a node
     * 
     * See also domnode_insert_before.
     *
     * @return domdocument
     **/
    function owner_document() {}

    /**
     * This function returns the parent node.
     * 
     * (PHP = 4.3 only) If no parent is found, NULL is returned.
     * 
     * The following example will show two identical lists of children.
     * 
     * Finding the document of a node
     *
     * @return domnode
     **/
    function parent_node() {}

    /**
     * Returns the name space prefix of the node.
     *
     * @return string
     **/
    function prefix() {}

    /**
     * This function returns the previous sibling of the current node. If
     * there is no previous sibling it returns ( 4.3) or (= 4.3). You can use
     * this function to iterate over all children of a node as shown in the
     * example.
     * 
     * See also domnode_next_sibling.
     *
     * @return domelement
     **/
    function previous_sibling() {}

    /**
     * This functions removes a child from a list of children.
     *
     * @param DOMNode
     * @return DOMNode
     **/
    function removeChild($oldnode) {}

    /**
     * This functions removes a child from a list of children. If child
     * cannot be removed or is not a child the function will return . If the
     * child could be removed the functions returns the old child.
     * 
     * Removing a child
     * 
     * See also domnode_append_child.
     *
     * @param domtext
     * @return domtext
     **/
    function remove_child($oldchild) {}

    /**
     * This function replaces the child oldnode with the passed new node. If
     * the new node is already a child it will not be added a second time. If
     * the replacement succeeds the old node is returned.
     *
     * @param DOMNode
     * @param DOMNode
     * @return DOMNode
     **/
    function replaceChild($newnode, $oldnode) {}

    /**
     * (PHP 4.2) This function replaces the child oldnode with the passed new
     * node. If the new node is already a child it will not be added a second
     * time. If the old node cannot be found the function returns . If the
     * replacement succeeds the old node is returned.
     * 
     * (PHP 4.3) This function replaces the child oldnode with the passed
     * newnode, even if the new node already is a child of the DomNode. If
     * newnode was already inserted in the document it is first unlinked from
     * its existing context. If the old node cannot be found the function
     * returns . If the replacement succeeds the old node is returned. (This
     * behaviour is according to the W3C specs).
     * 
     * See also domnode_append_child
     *
     * @param domelement
     * @param domelement
     * @return domelement
     **/
    function replace_child($newnode, $oldnode) {}

    /**
     * (PHP 4.2) This function replaces an existing node with the passed new
     * node. Before the replacement newnode is copied if it has a parent to
     * make sure a node which is already in the document will not be inserted
     * a second time. This behaviour enforces doing all modifications on the
     * node before the replacement or to refetch the inserted node afterwards
     * with functions like domnode_first_child, domnode_child_nodes etc..
     * 
     * (PHP 4.3) This function replaces an existing node with the passed new
     * node. It is not copied anymore. If newnode was already inserted in the
     * document it is first unlinked from its existing context. If the
     * replacement succeeds the old node is returned.
     * 
     * See also domnode_append_child
     *
     * @param domelement
     * @return domelement
     **/
    function replace_node($newnode) {}

    /**
     * @param string
     * @return bool
     **/
    function set_content($content) {}

    /**
     * Sets name of node.
     * 
     * See also domnode_node_name.
     *
     * @return bool
     **/
    function set_name() {}

    /**
     * Sets the namespace of a node to uri. If there is already a namespace
     * declaration with the same uri in one of the parent nodes of the node,
     * the prefix of this is taken, otherwise it will take the one provided
     * in the optional parameter prefix or generate a random one.
     * 
     * See also domdocument_create_element_ns, and domnode_add_namespace
     *
     * @param string
     * @param string
     * @return void
     **/
    function set_namespace($uri, $prefix) {}

    /**
     * @return void
     **/
    function unlink_node() {}

}
class DomNodelist {
    /**
     * Retrieves a node specified by index within the DOMNodeList object.
     *
     * @param int
     * @return DOMNode
     **/
    function item($index) {}

}
class DOMNotation extends DOMNode {
}
class DomProcessingInstruction extends DOMNode {
    /**
     * This method gets the data of the ProcessingInstruction node.
     *
     * @return string
     **/
    function data() {}

    /**
     * This method gets the target of the ProcessingInstruction node.
     *
     * @return string
     **/
    function target() {}

    /**
     * Creates a new DOMProcessingInstruction object. This object is read
     * only. It may be appended to a document, but additional nodes may not
     * be appended to this node until the node is associated with a document.
     * To create a writeable node, use .
     *
     * @param string
     * @param string
     **/
    function __construct($name, $value) {}

}
class DOMText extends DOMCharacterData {
    /**
     * Indicates whether this text node contains whitespace. The text node is
     * determined to contain whitespace in element content during the load of
     * the document.
     *
     * @return bool
     **/
    function isWhitespaceInElementContent() {}

    /**
     * Breaks this node into two nodes at the specified offset, keeping both
     * in the tree as siblings.
     * 
     * After being split, this node will contain all the content up to the
     * offset. If the original node had a parent node, the new node is
     * inserted as the next sibling of the original node. When the offset is
     * equal to the length of this node, the new node has no data.
     *
     * @param int
     * @return DOMText
     **/
    function splitText($offset) {}

    /**
     * Creates a new DOMText object.
     *
     * @param string
     **/
    function __construct($value) {}

}
class DomXPath {
    /**
     * Executes the given XPath expression and returns a typed result if
     * possible.
     *
     * @param string
     * @param DOMNode
     * @return mixed
     **/
    function evaluate($expression, $contextnode) {}

    /**
     * Executes the given XPath expression.
     *
     * @param string
     * @param DOMNode
     * @return DOMNodeList
     **/
    function query($expression, $contextnode) {}

    /**
     * Registers the namespaceURI and prefix with the DOMXPath object.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function registerNamespace($prefix, $namespaceURI) {}

    /**
     * Creates a new DOMXPath object.
     *
     * @param DOMDocument
     **/
    function __construct($doc) {}

}
class DomXsltStylesheet {
    /**
     * Applies an XSLT Transformation on the given DomDocument object.
     *
     * @param DomDocument
     * @param array
     * @param bool
     * @param string
     * @return DomDocument
     **/
    function process($xml_doc, $xslt_params, $is_xpath_param, $profile_filename) {}

    /**
     * Since always returns a well-formed XML DomDocument, no matter what
     * output method was declared in and similar attributes/elements, it's of
     * not much use, if you want to output HTML 4 or text data.
     * 
     * This function on the contrary honors and other output control
     * directives. See the example for instruction on how to use it.
     *
     * @param DomDocument
     * @param string
     * @return string
     **/
    function result_dump_file($xmldoc, $filename) {}

    /**
     * Since always returns a well-formed XML DomDocument, no matter what
     * output method was declared in and similar attributes/elements, it's of
     * not much use, if you want to output HTML 4 or text data.
     * 
     * This function on the contrary honors and other output control
     * directives. See the example for instruction on how to use it.
     *
     * @param DomDocument
     * @return string
     **/
    function result_dump_mem($xmldoc) {}

}
class EmptyIterator implements Iterator, Traversable {
    /**
     * This function must not be called. It throws an exception upon access.
     *
     * @return void
     **/
    function current() {}

    /**
     * This function must not be called. It throws an exception upon access.
     *
     * @return void
     **/
    function key() {}

    /**
     * No operation, nothing to do.
     *
     * @return void
     **/
    function next() {}

    /**
     * No operation, nothing to do.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * The EmptyIterator valid() method.
     *
     * @return void
     **/
    function valid() {}

}
class FilesystemIterator extends DirectoryIterator implements SeekableIterator, Traversable, Iterator {
    /**
     * Get file information of the current element.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * Gets the handling flags, as set in FilesystemIterator::__construct or
     * FilesystemIterator::setFlags.
     *
     * @return int
     **/
    function getFlags() {}

    /**
     * @return string
     **/
    function key() {}

    /**
     * Move to the next file.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewinds the directory back to the start.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Sets handling flags.
     *
     * @param int
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Constructs a new filesystem iterator from the path.
     *
     * @param string
     * @param int
     **/
    function __construct($path, $flags) {}

}
class FilterIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Returns whether the current element of the iterator is acceptable
     * through this filter.
     *
     * @return bool
     **/
    function accept() {}

    /**
     * Get the current element value.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * Get the inner iterator.
     *
     * @return Iterator
     **/
    function getInnerIterator() {}

    /**
     * Get the current key.
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Move the iterator forward.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewind the iterator.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Checks whether the current element is valid.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Constructs a new FilterIterator, which consists of a passed in
     * iterator with filters applied to it.
     *
     * @param Iterator
     **/
    function __construct($iterator) {}

}
class finfo {
    /**
     * This function is used to get information about binary data in a
     * string.
     *
     * @param string
     * @param int
     * @param resource
     * @return string
     **/
    function buffer($string, $options, $context) {}

    /**
     * This function is used to get information about a file.
     *
     * @param string
     * @param int
     * @param resource
     * @return string
     **/
    function file($file_name, $options, $context) {}

    /**
     * This function sets various Fileinfo options. Options can be set also
     * directly in finfo_open or other Fileinfo functions.
     *
     * @param int
     * @return bool
     **/
    function set_flags($options) {}

}
class GearmanException extends Exception {
}
class GearmanJob {
    /**
     * Sends result data and the complete status update for this job.
     *
     * @param string
     * @return boolean
     **/
    function complete($result) {}

    /**
     * Sends data to the job server (and any listening clients) for this job.
     *
     * @param string
     * @return boolean
     **/
    function data($data) {}

    /**
     * Sends the supplied exception when this job is running.
     *
     * @param string
     * @return boolean
     **/
    function exception($exception) {}

    /**
     * Sends failure status for this job, indicating that the job failed in a
     * known way (as opposed to failing due to a thrown exception).
     *
     * @return boolean
     **/
    function fail() {}

    /**
     * Returns the function name for this job. This is the function the work
     * will execute to perform the job.
     *
     * @return string
     **/
    function functionName() {}

    /**
     * Returns the opaque job handle assigned by the job server.
     *
     * @return string
     **/
    function handle() {}

    /**
     * Returns the last return code issued by the job server.
     *
     * @return integer
     **/
    function returnCode() {}

    /**
     * Sends result data and the complete status update for this job.
     *
     * @param string
     * @return boolean
     **/
    function sendComplete($result) {}

    /**
     * Sends data to the job server (and any listening clients) for this job.
     *
     * @param string
     * @return boolean
     **/
    function sendData($data) {}

    /**
     * Sends the supplied exception when this job is running.
     *
     * @param string
     * @return boolean
     **/
    function sendException($exception) {}

    /**
     * Sends failure status for this job, indicating that the job failed in a
     * known way (as opposed to failing due to a thrown exception).
     *
     * @return boolean
     **/
    function sendFail() {}

    /**
     * Sends status information to the job server and any listening clients.
     * Use this to specify what percentage of the job has been completed.
     *
     * @param integer
     * @param integer
     * @return boolean
     **/
    function sendStatus($numerator, $denominator) {}

    /**
     * Sends a warning for this job while it is running.
     *
     * @param string
     * @return boolean
     **/
    function sendWarning($warning) {}

    /**
     * Sets the return value for this job, indicates how the job completed.
     *
     * @param string
     * @return boolean
     **/
    function setReturn($gearman_return_t) {}

    /**
     * Sends status information to the job server and any listening clients.
     * Use this to specify what percentage of the job has been completed.
     *
     * @param integer
     * @param integer
     * @return boolean
     **/
    function status($numerator, $denominator) {}

    /**
     * Returns the unique identifiter for this job. The identifier is
     * assigned by the client.
     *
     * @return string
     **/
    function unique() {}

    /**
     * Sends a warning for this job while it is running.
     *
     * @param string
     * @return boolean
     **/
    function warning($warning) {}

    /**
     * Returns the workload for the job. This is serialized data that is to
     * be processed by the worker.
     *
     * @return string
     **/
    function workload() {}

    /**
     * Returns the size of the job's work load (the data the worker is to
     * process) in bytes.
     *
     * @return integer
     **/
    function workloadSize() {}

    /**
     * Creates a GearmanJob instance representing a job the worker is to
     * complete.
     *
     **/
    function __construct() {}

}
class GearmanTask {
    /**
     * Returns a new GearmanTask object.
     *
     * @return GearmanTask
     **/
    function create() {}

    /**
     * Returns data being returned for a task by a worker.
     *
     * @return string
     **/
    function data() {}

    /**
     * Returns the size of the data being returned for a task.
     *
     * @return integer
     **/
    function dataSize() {}

    /**
     * Returns the name of the function this task is associated with, i.e.,
     * the function the Gearman worker calls.
     *
     * @return string
     **/
    function function() {}

    /**
     * Returns the name of the function this task is associated with, i.e.,
     * the function the Gearman worker calls.
     *
     * @return string
     **/
    function functionName() {}

    /**
     * Gets the status information for whether or not this task is known to
     * the job server.
     *
     * @return boolean
     **/
    function isKnown() {}

    /**
     * Indicates whether or not this task is currently running.
     *
     * @return boolean
     **/
    function isRunning() {}

    /**
     * Returns the job handle for this task.
     *
     * @return string
     **/
    function jobHandle() {}

    /**
     * @param integer
     * @return array
     **/
    function recvData($data_len) {}

    /**
     * Returns the last Gearman return code for this task.
     *
     * @return integer
     **/
    function returnCode() {}

    /**
     * @param string
     * @return integer
     **/
    function sendData($data) {}

    /**
     * @param string
     * @return integer
     **/
    function sendWorkload($data) {}

    /**
     * Returns the denominator of the percentage of the task that is complete
     * expressed as a fraction.
     *
     * @return integer
     **/
    function taskDenominator() {}

    /**
     * Returns the numerator of the percentage of the task that is complete
     * expressed as a fraction.
     *
     * @return integer
     **/
    function taskNumerator() {}

    /**
     * Returns the unique identifier for this task. This is assigned by the
     * GearmanClient, as opposed to the job handle which is set by the
     * Gearman job server.
     *
     * @return string
     **/
    function unique() {}

    /**
     * Returns the unique identifier for this task. This is assigned by the
     * GearmanClient, as opposed to the job handle which is set by the
     * Gearman job server.
     *
     * @return string
     **/
    function uuid() {}

    /**
     * Creates a GearmanTask instance representing a task to be submitted to
     * a job server.
     *
     **/
    function __construct() {}

}
/**
 * Returns the absolute value of number.
 *
 * @param mixed
 * @return number
 **/
function abs($number) {}

/**
 * Returns the arc cosine of arg in radians. acos is the complementary
 * function of cos, which means that a==cos(acos(a)) for every value of a
 * that is within acos' range.
 *
 * @param float
 * @return float
 **/
function acos($arg) {}

/**
 * Returns the inverse hyperbolic cosine of arg, i.e. the value whose
 * hyperbolic cosine is arg.
 *
 * @param float
 * @return float
 **/
function acosh($arg) {}

/**
 * Returns a string with backslashes before characters that are listed in
 * charlist parameter.
 *
 * @param string
 * @param string
 * @return string
 **/
function addcslashes($str, $charlist) {}

/**
 * Returns a string with backslashes before characters that need to be
 * quoted in database queries etc. These characters are single quote ('),
 * double quote ("), backslash (\) and NUL (the byte).
 * 
 * An example use of addslashes is when you're entering data into a
 * database. For example, to insert the name O'reilly into a database,
 * you will need to escape it. It's highly recommeneded to use DBMS
 * specific escape function (e.g. mysqli_real_escape_string for MySQL or
 * pg_escape_string for PostgreSQL), but if the DBMS you're using does't
 * have an escape function and the DBMS uses \ to escape special chars,
 * you can use this function. This would only be to get the data into the
 * database, the extra \ will not be inserted. Having the PHP directive
 * magic_quotes_sybase set to on will mean ' is instead escaped with
 * another '.
 * 
 * The PHP directive magic_quotes_gpc is on by default, and it
 * essentially runs addslashes on all GET, POST, and COOKIE data. Do not
 * use addslashes on strings that have already been escaped with
 * magic_quotes_gpc as you'll then do double escaping. The function
 * get_magic_quotes_gpc may come in handy for checking this.
 *
 * @param string
 * @return string
 **/
function addslashes($str) {}

/**
 * Aggregates methods and properties defined in a class to an existing
 * object. Methods and properties with names starting with an underscore
 * character (_) are considered private to the aggregated class and are
 * not used, constructors are also excluded from the aggregation
 * procedure.
 *
 * @param object
 * @param string
 * @return void
 **/
function aggregate($object, $class_name) {}

/**
 * Gets the aggregation information for the given object.
 *
 * @param object
 * @return array
 **/
function aggregate_info($object) {}

/**
 * Aggregates all methods defined in a class to an existing object,
 * except for the class constructor, or methods whose names start with an
 * underscore character (_) which are considered private to the
 * aggregated class.
 *
 * @param object
 * @param string
 * @return void
 **/
function aggregate_methods($object, $class_name) {}

/**
 * Aggregates methods from a class to an existing object using a list of
 * method names.
 * 
 * The class constructor or methods whose names start with an underscore
 * character (_), which are considered private to the aggregated class,
 * are always excluded.
 *
 * @param object
 * @param string
 * @param array
 * @param bool
 * @return void
 **/
function aggregate_methods_by_list($object, $class_name, $methods_list, $exclude) {}

/**
 * Aggregates methods from a class to an existing object using a regular
 * expression to match method names.
 * 
 * The class constructor or methods whose names start with an underscore
 * character (_), which are considered private to the aggregated class,
 * are always excluded.
 *
 * @param object
 * @param string
 * @param string
 * @param bool
 * @return void
 **/
function aggregate_methods_by_regexp($object, $class_name, $regexp, $exclude) {}

/**
 * Aggregates all properties defined in a class to an existing object,
 * except for properties whose names start with an underscore character
 * (_) which are considered private to the aggregated class.
 *
 * @param object
 * @param string
 * @return void
 **/
function aggregate_properties($object, $class_name) {}

/**
 * Aggregates properties from a class to an existing object using a list
 * of property names.
 * 
 * The properties whose names start with an underscore character (_),
 * which are considered private to the aggregated class, are always
 * excluded.
 *
 * @param object
 * @param string
 * @param array
 * @param bool
 * @return void
 **/
function aggregate_properties_by_list($object, $class_name, $properties_list, $exclude) {}

/**
 * Aggregates properties from a class to an existing object using a
 * regular expression to match their names.
 * 
 * The properties whose names start with an underscore character (_),
 * which are considered private to the aggregated class, are always
 * excluded.
 *
 * @param object
 * @param string
 * @param string
 * @param bool
 * @return void
 **/
function aggregate_properties_by_regexp($object, $class_name, $regexp, $exclude) {}

/**
 * Gets the aggregation information for the given object.
 *
 * @param object
 * @return array
 **/
function aggregation_info($object) {}

/**
 * apache_child_terminate will register the Apache process executing the
 * current PHP request for termination once execution of PHP code is
 * completed. It may be used to terminate a process after a script with
 * high memory consumption has been run as memory will usually only be
 * freed internally but not given back to the operating system.
 *
 * @return bool
 **/
function apache_child_terminate() {}

/**
 * Get an Apache environment variable as specified by variable.
 * 
 * This function requires Apache 2 otherwise it's undefined.
 *
 * @param string
 * @param bool
 * @return string
 **/
function apache_getenv($variable, $walk_to_top) {}

/**
 * Get a list of loaded Apache modules.
 *
 * @return array
 **/
function apache_get_modules() {}

/**
 * Fetch the Apache version.
 *
 * @return string
 **/
function apache_get_version() {}

/**
 * This performs a partial request for a URI. It goes just far enough to
 * obtain all the important information about the given resource.
 *
 * @param string
 * @return object
 **/
function apache_lookup_uri($filename) {}

/**
 * This function is a wrapper for Apache's table_get and table_set. It
 * edits the table of notes that exists during a request. The table's
 * purpose is to allow Apache modules to communicate.
 * 
 * The main use for apache_note is to pass information from one module to
 * another within the same request.
 *
 * @param string
 * @param string
 * @return string
 **/
function apache_note($note_name, $note_value) {}

/**
 * Fetches all HTTP request headers from the current request.
 *
 * @return array
 **/
function apache_request_headers() {}

/**
 * apache_reset_timeout resets the Apache write timer, which defaults to
 * 300 seconds. With set_time_limit(0); ignore_user_abort(true) and
 * periodic apache_reset_timeout calls, Apache can theoretically run
 * forever.
 * 
 * This function requires Apache 1.
 *
 * @return bool
 **/
function apache_reset_timeout() {}

/**
 * Fetch all HTTP response headers.
 *
 * @return array
 **/
function apache_response_headers() {}

/**
 * apache_setenv sets the value of the Apache environment variable
 * specified by variable.
 *
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function apache_setenv($variable, $value, $walk_to_top) {}

/**
 * Caches a variable in the data store, only if it's not already stored.
 *
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function apc_add($key, $var, $ttl) {}

/**
 * Retrieves cached information and meta-data from APC's data store.
 *
 * @param string
 * @param bool
 * @return array
 **/
function apc_cache_info($cache_type, $limited) {}

/**
 * Clears the user/system cache.
 *
 * @param string
 * @return bool
 **/
function apc_clear_cache($cache_type) {}

/**
 * Stores a file in the bytecode cache, bypassing all filters.
 *
 * @param string
 * @return bool
 **/
function apc_compile_file($filename) {}

/**
 * define is notoriously slow. Since the main benefit of APC is to
 * increase the performance of scripts/applications, this mechanism is
 * provided to streamline the process of mass constant definition.
 * However, this function does not perform as well as anticipated.
 * 
 * For a better-performing solution, try the hidef extension from PECL.
 *
 * @param string
 * @param array
 * @param bool
 * @return bool
 **/
function apc_define_constants($key, $constants, $case_sensitive) {}

/**
 * Removes a stored variable from the cache.
 *
 * @param string
 * @return bool
 **/
function apc_delete($key) {}

/**
 * Fetchs a stored variable from the cache.
 *
 * @param mixed
 * @param bool
 * @return mixed
 **/
function apc_fetch($key, &$success) {}

/**
 * Loads a set of constants from the cache.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function apc_load_constants($key, $case_sensitive) {}

/**
 * Retrieves APC's Shared Memory Allocation information.
 *
 * @param bool
 * @return array
 **/
function apc_sma_info($limited) {}

/**
 * Cache a variable in the data store.
 *
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function apc_store($key, $var, $ttl) {}

/**
 * This can be used to stop the running of your script, and await
 * responses on the connected socket. To step the program, just send
 * enter (a blank line), or enter a php command to be executed.
 *
 * @param int
 * @return bool
 **/
function apd_breakpoint($debug_level) {}

/**
 * Returns the current call stack as an array
 *
 * @return array
 **/
function apd_callstack() {}

/**
 * Behaves like perl's Carp::cluck. Throw a warning and a callstack.
 *
 * @param string
 * @param string
 * @return void
 **/
function apd_clunk($warning, $delimiter) {}

/**
 * Usually sent via the socket to restart the interpreter.
 *
 * @param int
 * @return bool
 **/
function apd_continue($debug_level) {}

/**
 * Behaves like perl's Carp::croak. Throw an error, a callstack and then
 * exit.
 *
 * @param string
 * @param string
 * @return void
 **/
function apd_croak($warning, $delimiter) {}

/**
 * Outputs the current function table.
 *
 * @return void
 **/
function apd_dump_function_table() {}

/**
 * Return all persistent resources as an array.
 *
 * @return array
 **/
function apd_dump_persistent_resources() {}

/**
 * Return all current regular resources as an array.
 *
 * @return array
 **/
function apd_dump_regular_resources() {}

/**
 * Usually sent via the socket to request information about the running
 * script.
 *
 * @param string
 * @return bool
 **/
function apd_echo($output) {}

/**
 * Returns the names of all the variables defined in the active scope,
 * (not their values).
 *
 * @return array
 **/
function apd_get_active_symbols() {}

/**
 * Starts debugging to pprof_{process_id} in the dump directory.
 *
 * @param string
 * @param string
 * @return string
 **/
function apd_set_pprof_trace($dump_directory, $fragment) {}

/**
 * This can be used to increase or decrease debugging in a different area
 * of your application.
 *
 * @param int
 * @return void
 **/
function apd_set_session($debug_level) {}

/**
 * Starts debugging to apd_dump_{process_id} in the dump directory.
 *
 * @param int
 * @param string
 * @return void
 **/
function apd_set_session_trace($debug_level, $dump_directory) {}

/**
 * Connects to the specified tcp_server (eg. tcplisten) and sends
 * debugging data to the socket.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function apd_set_session_trace_socket($tcp_server, $socket_type, $port, $debug_level) {}

/**
 * Returns an array with all keys from input lowercased or uppercased.
 * Numbered indices are left as is.
 *
 * @param array
 * @param int
 * @return array
 **/
function array_change_key_case($input, $case) {}

/**
 * Chunks an array into size large chunks. The last chunk may contain
 * less than size elements.
 *
 * @param array
 * @param int
 * @param bool
 * @return array
 **/
function array_chunk($input, $size, $preserve_keys) {}

/**
 * Creates an array by using the values from the keys array as keys and
 * the values from the values array as the corresponding values.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_combine($keys, $values) {}

/**
 * array_count_values returns an array using the values of the input
 * array as keys and their frequency in input as values.
 *
 * @param array
 * @return array
 **/
function array_count_values($input) {}

/**
 * Compares array1 against array2 and returns the difference.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_diff($array1, $array2) {}

/**
 * Compares array1 against array2 and returns the difference. Unlike
 * array_diff the array keys are used in the comparison.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_diff_assoc($array1, $array2) {}

/**
 * Compares the keys from array1 against the keys from array2 and returns
 * the difference. This function is like array_diff except the comparison
 * is done on the keys instead of the values.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_diff_key($array1, $array2) {}

/**
 * Compares array1 against array2 and returns the difference. Unlike
 * array_diff the array keys are used in the comparison.
 * 
 * Unlike array_diff_assoc an user supplied callback function is used for
 * the indices comparison, not internal function.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_diff_uassoc($array1, $array2, $key_compare_func) {}

/**
 * Compares the keys from array1 against the keys from array2 and returns
 * the difference. This function is like array_diff except the comparison
 * is done on the keys instead of the values.
 * 
 * Unlike array_diff_key an user supplied callback function is used for
 * the indices comparison, not internal function.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_diff_ukey($array1, $array2, $key_compare_func) {}

/**
 * Fills an array with num entries of the value of the value parameter,
 * keys starting at the start_index parameter.
 *
 * @param int
 * @param int
 * @param mixed
 * @return array
 **/
function array_fill($start_index, $num, $value) {}

/**
 * Fills an array with the value of the value parameter, using the values
 * of the keys array as keys.
 *
 * @param array
 * @param mixed
 * @return array
 **/
function array_fill_keys($keys, $value) {}

/**
 * Iterates over each value in the input array passing them to the
 * callback function. If the callback function returns true, the current
 * value from input is returned into the result array. Array keys are
 * preserved.
 *
 * @param array
 * @param callback
 * @return array
 **/
function array_filter($input, $callback) {}

/**
 * array_flip returns an array in flip order, i.e. keys from trans become
 * values and values from trans become keys.
 * 
 * Note that the values of trans need to be valid keys, i.e. they need to
 * be either integer or string. A warning will be emitted if a value has
 * the wrong type, and the key/value pair in question will not be
 * flipped.
 * 
 * If a value has several occurrences, the latest key will be used as its
 * values, and all others will be lost.
 *
 * @param array
 * @return array
 **/
function array_flip($trans) {}

/**
 * array_intersect returns an array containing all the values of array1
 * that are present in all the arguments. Note that keys are preserved.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_intersect($array1, $array2) {}

/**
 * @param array
 * @param array
 * @return array
 **/
function array_intersect_assoc($array1, $array2) {}

/**
 * array_intersect_key returns an array containing all the values of
 * array1 which have matching keys that are present in all the arguments.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_intersect_key($array1, $array2) {}

/**
 * array_intersect_uassoc returns an array containing all the values of
 * array1 that are present in all the arguments. Note that the keys are
 * used in the comparison unlike in array_intersect.
 * 
 * The index comparison is done by a user supplied callback function. It
 * must return an integer less than, equal to, or greater than zero if
 * the first argument is considered to be respectively less than, equal
 * to, or greater than the second.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_intersect_uassoc($array1, $array2, $key_compare_func) {}

/**
 * array_intersect_ukey returns an array containing all the values of
 * array1 which have matching keys that are present in all the arguments.
 * 
 * This comparison is done by a user supplied callback function. It must
 * return an integer less than, equal to, or greater than zero if the
 * first key is considered to be respectively less than, equal to, or
 * greater than the second.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_intersect_ukey($array1, $array2, $key_compare_func) {}

/**
 * array_keys returns the keys, numeric and string, from the input array.
 * 
 * If the optional search_value is specified, then only the keys for that
 * value are returned. Otherwise, all the keys from the input are
 * returned.
 *
 * @param array
 * @param mixed
 * @param bool
 * @return array
 **/
function array_keys($input, $search_value, $strict) {}

/**
 * array_key_exists returns if the given key is set in the array. key can
 * be any value possible for an array index.
 *
 * @param mixed
 * @param array
 * @return bool
 **/
function array_key_exists($key, $search) {}

/**
 * array_map returns an array containing all the elements of arr1 after
 * applying the callback function to each one. The number of parameters
 * that the callback function accepts should match the number of arrays
 * passed to the array_map
 *
 * @param callback
 * @param array
 * @return array
 **/
function array_map($callback, $arr1) {}

/**
 * Merges the elements of one or more arrays together so that the values
 * of one are appended to the end of the previous one. It returns the
 * resulting array.
 * 
 * If the input arrays have the same string keys, then the later value
 * for that key will overwrite the previous one. If, however, the arrays
 * contain numeric keys, the later value will not overwrite the original
 * value, but will be appended.
 * 
 * If only one array is given and the array is numerically indexed, the
 * keys get reindexed in a continuous way.
 *
 * @param array
 * @param array
 * @return array
 **/
function array_merge($array1, $array2) {}

/**
 * array_merge_recursive merges the elements of one or more arrays
 * together so that the values of one are appended to the end of the
 * previous one. It returns the resulting array.
 * 
 * If the input arrays have the same string keys, then the values for
 * these keys are merged together into an array, and this is done
 * recursively, so that if one of the values is an array itself, the
 * function will merge it with a corresponding entry in another array
 * too. If, however, the arrays have the same numeric key, the later
 * value will not overwrite the original value, but will be appended.
 *
 * @param array
 * @return array
 **/
function array_merge_recursive($array1) {}

/**
 * array_multisort can be used to sort several arrays at once, or a
 * multi-dimensional array by one or more dimensions.
 * 
 * Associative (string) keys will be maintained, but numeric keys will be
 * re-indexed.
 *
 * @param array
 * @param mixed
 * @param mixed
 * @return bool
 **/
function array_multisort(&$arr, $arg, $arg) {}

/**
 * array_pad returns a copy of the input padded to size specified by
 * pad_size with value pad_value. If pad_size is positive then the array
 * is padded on the right, if it's negative then on the left. If the
 * absolute value of pad_size is less than or equal to the length of the
 * input then no padding takes place. It is possible to add most 1048576
 * elements at a time.
 *
 * @param array
 * @param int
 * @param mixed
 * @return array
 **/
function array_pad($input, $pad_size, $pad_value) {}

/**
 * array_pop pops and returns the last value of the array, shortening the
 * array by one element. If array is empty (or is not an array), will be
 * returned. Will additionally produce a Warning when called on a
 * non-array.
 *
 * @param array
 * @return mixed
 **/
function array_pop(&$array) {}

/**
 * array_product returns the product of values in an array.
 *
 * @param array
 * @return number
 **/
function array_product($array) {}

/**
 * array_push treats array as a stack, and pushes the passed variables
 * onto the end of array. The length of array increases by the number of
 * variables pushed. Has the same effect as:
 * 
 * repeated for each var.
 *
 * @param array
 * @param mixed
 * @return int
 **/
function array_push(&$array, $var) {}

/**
 * array_rand is rather useful when you want to pick one or more random
 * entries out of an array.
 *
 * @param array
 * @param int
 * @return mixed
 **/
function array_rand($input, $num_req) {}

/**
 * array_reduce applies iteratively the function function to the elements
 * of the array input, so as to reduce the array to a single value.
 *
 * @param array
 * @param callback
 * @param int
 * @return mixed
 **/
function array_reduce($input, $function, $initial) {}

/**
 * array_replace replaces the values of the first array with the same
 * values from all the following arrays. If a key from the first array
 * exists in the second array, its value will be replaced by the value
 * from the second array. If the key exists in the second array, and not
 * the first, it will be created in the first array. If a key only exists
 * in the first array, it will be left as is. If several arrays are
 * passed for replacement, they will be processed in order, the later
 * arrays overwriting the previous values.
 * 
 * array_replace is not recursive : it will replace values in the first
 * array by whatever type is in the second array.
 *
 * @param array
 * @param array
 * @param array
 * @return array
 **/
function array_replace(&$array, &$array1, &$array2) {}

/**
 * array_replace_recursive replaces the values of the first array with
 * the same values from all the following arrays. If a key from the first
 * array exists in the second array, its value will be replaced by the
 * value from the second array. If the key exists in the second array,
 * and not the first, it will be created in the first array. If a key
 * only exists in the first array, it will be left as is. If several
 * arrays are passed for replacement, they will be processed in order,
 * the later array overwriting the previous values.
 * 
 * array_replace_recursive is recursive : it will recurse into arrays and
 * apply the same process to the inner value.
 * 
 * When the value in array is scalar, it will be replaced by the value in
 * array1, may it be scalar or array. When the value in array and array1
 * are both arrays, array_replace_recursive will replace their respective
 * value recursively.
 *
 * @param array
 * @param array
 * @param array
 * @return array
 **/
function array_replace_recursive(&$array, &$array1, &$array2) {}

/**
 * Takes an input array and returns a new array with the order of the
 * elements reversed.
 *
 * @param array
 * @param bool
 * @return array
 **/
function array_reverse($array, $preserve_keys) {}

/**
 * Searches haystack for needle.
 *
 * @param mixed
 * @param array
 * @param bool
 * @return mixed
 **/
function array_search($needle, $haystack, $strict) {}

/**
 * array_shift shifts the first value of the array off and returns it,
 * shortening the array by one element and moving everything down. All
 * numerical array keys will be modified to start counting from zero
 * while literal keys won't be touched.
 *
 * @param array
 * @return mixed
 **/
function array_shift(&$array) {}

/**
 * array_slice returns the sequence of elements from the array array as
 * specified by the offset and length parameters.
 *
 * @param array
 * @param int
 * @param int
 * @param bool
 * @return array
 **/
function array_slice($array, $offset, $length, $preserve_keys) {}

/**
 * Removes the elements designated by offset and length from the input
 * array, and replaces them with the elements of the replacement array,
 * if supplied.
 * 
 * Note that numeric keys in input are not preserved.
 *
 * @param array
 * @param int
 * @param int
 * @param mixed
 * @return array
 **/
function array_splice(&$input, $offset, $length, $replacement) {}

/**
 * array_sum returns the sum of values in an array.
 *
 * @param array
 * @return number
 **/
function array_sum($array) {}

/**
 * Computes the difference of arrays by using a callback function for
 * data comparison. This is unlike array_diff which uses an internal
 * function for comparing the data.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_udiff($array1, $array2, $data_compare_func) {}

/**
 * Computes the difference of arrays with additional index check,
 * compares data by a callback function.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_udiff_assoc($array1, $array2, $data_compare_func) {}

/**
 * Computes the difference of arrays with additional index check,
 * compares data and indexes by a callback function.
 * 
 * Note that the keys are used in the comparison unlike array_diff and
 * array_udiff.
 *
 * @param array
 * @param array
 * @param callback
 * @param callback
 * @return array
 **/
function array_udiff_uassoc($array1, $array2, $data_compare_func, $key_compare_func) {}

/**
 * Computes the intersection of arrays, compares data by a callback
 * function.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_uintersect($array1, $array2, $data_compare_func) {}

/**
 * Computes the intersection of arrays with additional index check,
 * compares data by a callback function.
 * 
 * Note that the keys are used in the comparison unlike in
 * array_uintersect. The data is compared by using a callback function.
 *
 * @param array
 * @param array
 * @param callback
 * @return array
 **/
function array_uintersect_assoc($array1, $array2, $data_compare_func) {}

/**
 * Computes the intersection of arrays with additional index check,
 * compares data and indexes by a callback functions Note that the keys
 * are used in the comparison unlike in array_uintersect. Both the data
 * and the indexes are compared by using separate callback functions.
 *
 * @param array
 * @param array
 * @param callback
 * @param callback
 * @return array
 **/
function array_uintersect_uassoc($array1, $array2, $data_compare_func, $key_compare_func) {}

/**
 * Takes an input array and returns a new array without duplicate values.
 * 
 * Note that keys are preserved. array_unique sorts the values treated as
 * string at first, then will keep the first key encountered for every
 * value, and ignore all following keys. It does not mean that the key of
 * the first related value from the unsorted array will be kept.
 *
 * @param array
 * @param int
 * @return array
 **/
function array_unique($array, $sort_flags) {}

/**
 * array_unshift prepends passed elements to the front of the array. Note
 * that the list of elements is prepended as a whole, so that the
 * prepended elements stay in the same order. All numerical array keys
 * will be modified to start counting from zero while literal keys won't
 * be touched.
 *
 * @param array
 * @param mixed
 * @return int
 **/
function array_unshift(&$array, $var) {}

/**
 * array_values returns all the values from the input array and indexes
 * numerically the array.
 *
 * @param array
 * @return array
 **/
function array_values($input) {}

/**
 * array_walk is not affected by the internal array pointer of array.
 * array_walk will walk through the entire array regardless of pointer
 * position.
 *
 * @param array
 * @param callback
 * @param mixed
 * @return bool
 **/
function array_walk(&$array, $funcname, $userdata) {}

/**
 * Applies the user-defined function funcname to each element of the
 * input array. This function will recur into deeper arrays.
 *
 * @param array
 * @param callback
 * @param mixed
 * @return bool
 **/
function array_walk_recursive(&$input, $funcname, $userdata) {}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with.
 * 
 * This is used mainly when sorting associative arrays where the actual
 * element order is significant.
 *
 * @param array
 * @param int
 * @return bool
 **/
function arsort(&$array, $sort_flags) {}

/**
 * ascii2ebcdic is an Apache-specific function which is available only on
 * EBCDIC based operating systems (OS/390, BS2000). It translates the
 * ASCII encoded string ascii_str to its equivalent EBCDIC representation
 * (binary safe), and returns the result.
 *
 * @param string
 * @return int
 **/
function ascii2ebcdic($ascii_str) {}

/**
 * Returns the arc sine of arg in radians. asin is the complementary
 * function of sin, which means that a==sin(asin(a)) for every value of a
 * that is within asin's range.
 *
 * @param float
 * @return float
 **/
function asin($arg) {}

/**
 * Returns the inverse hyperbolic sine of arg, i.e. the value whose
 * hyperbolic sine is arg.
 *
 * @param float
 * @return float
 **/
function asinh($arg) {}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with. This is
 * used mainly when sorting associative arrays where the actual element
 * order is significant.
 *
 * @param array
 * @param int
 * @return bool
 **/
function asort(&$array, $sort_flags) {}

/**
 * assert will check the given assertion and take appropriate action if
 * its result is .
 * 
 * If the assertion is given as a string it will be evaluated as PHP code
 * by assert. The advantages of a string assertion are less overhead when
 * assertion checking is off and messages containing the assertion
 * expression when an assertion fails. This means that if you pass a
 * boolean condition as assertion this condition will not show up as
 * parameter to the assertion function which you may have defined with
 * the assert_options function, the condition is converted to a string
 * before calling that handler function, and the boolean is converted as
 * the empty string.
 * 
 * Assertions should be used as a debugging feature only. You may use
 * them for sanity-checks that test for conditions that should always be
 * and that indicate some programming errors if not or to check for the
 * presence of certain features like extension functions or certain
 * system limits and features.
 * 
 * Assertions should not be used for normal runtime operations like input
 * parameter checks. As a rule of thumb your code should always be able
 * to work correctly if assertion checking is not activated.
 * 
 * The behavior of assert may be configured by assert_options or by
 * .ini-settings described in that functions manual page.
 * 
 * The assert_options function and/or ASSERT_CALLBACK configuration
 * directive allow a callback function to be set to handle failed
 * assertions.
 * 
 * assert callbacks are particularly useful for building automated test
 * suites because they allow you to easily capture the code passed to the
 * assertion, along with information on where the assertion was made.
 * While this information can be captured via other methods, using
 * assertions makes it much faster and easier!
 * 
 * The callback function should accept three arguments. The first
 * argument will contain the file the assertion failed in. The second
 * argument will contain the line the assertion failed on and the third
 * argument will contain the expression that failed (if any - literal
 * values such as 1 or "two" will not be passed via this argument)
 *
 * @param mixed
 * @return bool
 **/
function assert($assertion) {}

/**
 * Set the various assert control options or just query their current
 * settings.
 *
 * @param int
 * @param mixed
 * @return mixed
 **/
function assert_options($what, $value) {}

/**
 * Returns the arc tangent of arg in radians. atan is the complementary
 * function of tan, which means that a==tan(atan(a)) for every value of a
 * that is within atan's range.
 *
 * @param float
 * @return float
 **/
function atan($arg) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function atan2($y, $x) {}

/**
 * Returns the inverse hyperbolic tangent of arg, i.e. the value whose
 * hyperbolic tangent is arg.
 *
 * @param float
 * @return float
 **/
function atanh($arg) {}

/**
 * Decodes a base64 encoded data.
 *
 * @param string
 * @param bool
 * @return string
 **/
function base64_decode($data, $strict) {}

/**
 * Encodes the given data with base64.
 * 
 * This encoding is designed to make binary data survive transport
 * through transport layers that are not 8-bit clean, such as mail
 * bodies.
 * 
 * Base64-encoded data takes about 33% more space than the original data.
 *
 * @param string
 * @return string
 **/
function base64_encode($data) {}

/**
 * Given a string containing a path to a file, this function will return
 * the base name of the file.
 *
 * @param string
 * @param string
 * @return string
 **/
function basename($path, $suffix) {}

/**
 * Returns a string containing number represented in base tobase. The
 * base in which number is given is specified in frombase. Both frombase
 * and tobase have to be between 2 and 36, inclusive. Digits in numbers
 * with a base higher than 10 will be represented with the letters a-z,
 * with a meaning 10, b meaning 11 and z meaning 35.
 *
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function base_convert($number, $frombase, $tobase) {}

/**
 * Adds a tag to an existing BBCode_Container tag_set using tag_rules.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function bbcode_add_element($bbcode_container, $tag_name, $tag_rules) {}

/**
 * Adds a smiley to the parser
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function bbcode_add_smiley($bbcode_container, $smiley, $replace_by) {}

/**
 * This function returns a new BBCode Resource used to parse BBCode
 * strings.
 *
 * @param array
 * @return resource
 **/
function bbcode_create($bbcode_initial_tags) {}

/**
 * This function closes the resource opened by bbcode_create.
 *
 * @param resource
 * @return bool
 **/
function bbcode_destroy($bbcode_container) {}

/**
 * This function parse the string to_parse following the rules in the
 * bbcode_container created by bbcode_create
 *
 * @param resource
 * @param string
 * @return string
 **/
function bbcode_parse($bbcode_container, $to_parse) {}

/**
 * Attaches another parser to the bbcode_container. This parser is used
 * only when arguments must be parsed. If this function is not used, the
 * default argument parser is the parser itself.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function bbcode_set_arg_parser($bbcode_container, $bbcode_arg_parser) {}

/**
 * Set or alter parser options
 *
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function bbcode_set_flags($bbcode_container, $flags, $mode) {}

/**
 * Sums left_operand and right_operand.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function bcadd($left_operand, $right_operand, $scale) {}

/**
 * Compares the left_operand to the right_operand and returns the result
 * as an integer.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function bccomp($left_operand, $right_operand, $scale) {}

/**
 * Divides the left_operand by the right_operand.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function bcdiv($left_operand, $right_operand, $scale) {}

/**
 * Get the modulus of the left_operand using modulus.
 *
 * @param string
 * @param string
 * @return string
 **/
function bcmod($left_operand, $modulus) {}

/**
 * Multiply the left_operand by the right_operand.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function bcmul($left_operand, $right_operand, $scale) {}

/**
 * Reads data from a bzcompressed file and creates classes from the
 * bytecodes.
 *
 * @param string
 * @return bool
 **/
function bcompiler_load($filename) {}

/**
 * Reads data from a bcompiler exe file and creates classes from the
 * bytecodes.
 *
 * @param string
 * @return bool
 **/
function bcompiler_load_exe($filename) {}

/**
 * Reads the bytecodes of a class and calls back to a user function.
 *
 * @param string
 * @param string
 * @return bool
 **/
function bcompiler_parse_class($class, $callback) {}

/**
 * Reads data from a open file handle and creates classes from the
 * bytecodes.
 *
 * @param resource
 * @return bool
 **/
function bcompiler_read($filehandle) {}

/**
 * Reads the bytecodes from PHP for an existing class, and writes them to
 * the open file handle.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function bcompiler_write_class($filehandle, $className, $extends) {}

/**
 * Reads the bytecodes from PHP for an existing constant, and writes them
 * to the open file handle.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function bcompiler_write_constant($filehandle, $constantName) {}

/**
 * An EXE (or self executable) file consists of 3 parts:
 * 
 * The stub (executable code, e.g. a compiled C program) that loads PHP
 * interpreter, bcompiler extension, stored Bytecodes and initiates a
 * call for the specified function (e.g. main) or class method (e.g.
 * main::main)
 * 
 * The Bytecodes (uncompressed only for the moment) The bcompiler EXE
 * footer
 * 
 * To obtain a suitable stub you can compile php_embed-based stub phpe.c
 * located in the examples/embed directory on bcompiler's CVS.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function bcompiler_write_exe_footer($filehandle, $startpos) {}

/**
 * This function complies specified source file into bytecodes, and
 * writes them to the open file handle.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function bcompiler_write_file($filehandle, $filename) {}

/**
 * Writes the single character \x00 to indicate End of compiled data.
 *
 * @param resource
 * @return bool
 **/
function bcompiler_write_footer($filehandle) {}

/**
 * Reads the bytecodes from PHP for an existing function, and writes them
 * to the open file handle. Order is not important, (eg. if function b
 * uses function a, and you compile it like the example below, it will
 * work perfectly OK).
 *
 * @param resource
 * @param string
 * @return bool
 **/
function bcompiler_write_function($filehandle, $functionName) {}

/**
 * Searches for all functions declared in the given file, and writes
 * their correspondent bytecodes to the open file handle.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function bcompiler_write_functions_from_file($filehandle, $fileName) {}

/**
 * Writes the header part of a bcompiler file.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function bcompiler_write_header($filehandle, $write_ver) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function bcompiler_write_included_filename($filehandle, $filename) {}

/**
 * Raise left_operand to the power right_operand.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function bcpow($left_operand, $right_operand, $scale) {}

/**
 * Use the fast-exponentiation method to raise left_operand to the power
 * right_operand with respect to the modulus modulus.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function bcpowmod($left_operand, $right_operand, $modulus, $scale) {}

/**
 * Sets the default scale parameter for all subsequent bc math functions
 * that do not explicitly specify a scale parameter.
 *
 * @param int
 * @return bool
 **/
function bcscale($scale) {}

/**
 * Return the square root of the operand.
 *
 * @param string
 * @param int
 * @return string
 **/
function bcsqrt($operand, $scale) {}

/**
 * Subtracts the right_operand from the left_operand.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function bcsub($left_operand, $right_operand, $scale) {}

/**
 * Returns an ASCII string containing the hexadecimal representation of
 * str. The conversion is done byte-wise with the high-nibble first.
 *
 * @param string
 * @return string
 **/
function bin2hex($str) {}

/**
 * Returns the decimal equivalent of the binary number represented by the
 * binary_string argument.
 * 
 * bindec converts a binary number to an integer or, if needed for size
 * reasons, float.
 * 
 * bindec interprets all binary_string values as unsigned integers. This
 * is because bindec sees the most significant bit as another order of
 * magnitude rather than as the sign bit.
 *
 * @param string
 * @return number
 **/
function bindec($binary_string) {}

/**
 * The bindtextdomain function sets the path for a domain.
 *
 * @param string
 * @param string
 * @return string
 **/
function bindtextdomain($domain, $directory) {}

/**
 * With bind_textdomain_codeset, you can set in which encoding will be
 * messages from domain returned by gettext and similar functions.
 *
 * @param string
 * @param string
 * @return string
 **/
function bind_textdomain_codeset($domain, $codeset) {}

/**
 * @param string
 * @return array
 **/
function bson_decode($bson) {}

/**
 * @param mixed
 * @return string
 **/
function bson_encode($anything) {}

/**
 * Closes the given bzip2 file pointer.
 *
 * @param resource
 * @return int
 **/
function bzclose($bz) {}

/**
 * bzcompress compresses the given string and returns it as bzip2 encoded
 * data.
 *
 * @param string
 * @param int
 * @param int
 * @return mixed
 **/
function bzcompress($source, $blocksize, $workfactor) {}

/**
 * bzdecompress decompresses the given string containing bzip2 encoded
 * data.
 *
 * @param string
 * @param int
 * @return mixed
 **/
function bzdecompress($source, $small) {}

/**
 * Returns the error number of any bzip2 error returned by the given file
 * pointer.
 *
 * @param resource
 * @return int
 **/
function bzerrno($bz) {}

/**
 * Returns the error number and error string of any bzip2 error returned
 * by the given file pointer.
 *
 * @param resource
 * @return array
 **/
function bzerror($bz) {}

/**
 * Gets the error string of any bzip2 error returned by the given file
 * pointer.
 *
 * @param resource
 * @return string
 **/
function bzerrstr($bz) {}

/**
 * Forces a write of all buffered bzip2 data for the file pointer bz.
 *
 * @param resource
 * @return int
 **/
function bzflush($bz) {}

/**
 * bzopen opens a bzip2 (.bz2) file for reading or writing.
 *
 * @param string
 * @param string
 * @return resource
 **/
function bzopen($filename, $mode) {}

/**
 * bzread reads from the given bzip2 file pointer.
 * 
 * Reading stops when length (uncompressed) bytes have been read or EOF
 * is reached, whichever comes first.
 *
 * @param resource
 * @param int
 * @return string
 **/
function bzread($bz, $length) {}

/**
 * bzwrite writes a string into the given bzip2 file stream.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function bzwrite($bz, $data, $length) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_create($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoFontFace
 * @return ReturnType
 **/
function cairo_font_face_get_type($fontface) {}

/**
 * The function description goes here.
 *
 * @param CairoFontFace
 * @return ReturnType
 **/
function cairo_font_face_status($fontface) {}

/**
 * The function description goes here.
 *
 * @return ReturnType
 **/
function cairo_font_options_create() {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_equal($options, $other) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_get_antialias($options) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_get_hint_metrics($options) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_get_hint_style($options) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_get_subpixel_order($options) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_hash($options) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_merge($options, $other) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @param string
 * @return ReturnType
 **/
function cairo_font_options_set_antialias($options, $antialias) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @param string
 * @return ReturnType
 **/
function cairo_font_options_set_hint_metrics($options, $hint_metrics) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @param string
 * @return ReturnType
 **/
function cairo_font_options_set_hint_style($options, $hint_style) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @param string
 * @return ReturnType
 **/
function cairo_font_options_set_subpixel_order($options, $subpixel_order) {}

/**
 * The function description goes here.
 *
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_font_options_status($options) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_format_stride_for_width($format, $width) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_image_surface_create($format, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_image_surface_create_for_data($data, $format, $width, $height, $stride) {}

/**
 * The function description goes here.
 *
 * @param string
 * @return ReturnType
 **/
function cairo_image_surface_create_from_png($file) {}

/**
 * The function description goes here.
 *
 * @param CairoImageSurface
 * @return ReturnType
 **/
function cairo_image_surface_get_data($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoImageSurface
 * @return ReturnType
 **/
function cairo_image_surface_get_format($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoImageSurface
 * @return ReturnType
 **/
function cairo_image_surface_get_height($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoImageSurface
 * @return ReturnType
 **/
function cairo_image_surface_get_stride($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoImageSurface
 * @return ReturnType
 **/
function cairo_image_surface_get_width($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoMatrix
 * @return ReturnType
 **/
function cairo_matrix_invert($matrix) {}

/**
 * The function description goes here.
 *
 * @param array
 * @param array
 * @return ReturnType
 **/
function cairo_matrix_multiply($matrix1, $matrix2) {}

/**
 * The function description goes here.
 *
 * @param CairoMatrix
 * @param string
 * @return ReturnType
 **/
function cairo_matrix_rotate($matrix, $radians) {}

/**
 * The function description goes here.
 *
 * @param CairoMatrix
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_matrix_transform_distance($matrix, $dx, $dy) {}

/**
 * The function description goes here.
 *
 * @param CairoMatrix
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_matrix_transform_point($matrix, $dx, $dy) {}

/**
 * The function description goes here.
 *
 * @param CairoMatrix
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_matrix_translate($matrix, $tx, $ty) {}

/**
 * The function description goes here.
 *
 * @param CairoGradientPattern
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_add_color_stop_rgb($pattern, $offset, $red, $green, $blue) {}

/**
 * The function description goes here.
 *
 * @param CairoGradientPattern
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_add_color_stop_rgba($pattern, $offset, $red, $green, $blue, $alpha) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_pattern_create_for_surface($surface) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_create_linear($x0, $y0, $x1, $y1) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_create_radial($x0, $y0, $r0, $x1, $y1, $r1) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_create_rgb($red, $green, $blue) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_create_rgba($red, $green, $blue, $alpha) {}

/**
 * The function description goes here.
 *
 * @param CairoGradientPattern
 * @return ReturnType
 **/
function cairo_pattern_get_color_stop_count($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoGradientPattern
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_get_color_stop_rgba($pattern, $index) {}

/**
 * The function description goes here.
 *
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_get_extend($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoSurfacePattern
 * @return ReturnType
 **/
function cairo_pattern_get_filter($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoLinearGradient
 * @return ReturnType
 **/
function cairo_pattern_get_linear_points($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoPattern
 * @return ReturnType
 **/
function cairo_pattern_get_matrix($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoRadialGradient
 * @return ReturnType
 **/
function cairo_pattern_get_radial_circles($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoSolidPattern
 * @return ReturnType
 **/
function cairo_pattern_get_rgba($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoSurfacePattern
 * @return ReturnType
 **/
function cairo_pattern_get_surface($pattern) {}

/**
 * The function description goes here.
 *
 * @param CairoPattern
 * @return ReturnType
 **/
function cairo_pattern_get_type($pattern) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_set_extend($pattern, $extend) {}

/**
 * The function description goes here.
 *
 * @param CairoSurfacePattern
 * @param string
 * @return ReturnType
 **/
function cairo_pattern_set_filter($pattern, $filter) {}

/**
 * The function description goes here.
 *
 * @param CairoPattern
 * @param CairoMatrix
 * @return ReturnType
 **/
function cairo_pattern_set_matrix($pattern, $matrix) {}

/**
 * The function description goes here.
 *
 * @param CairoPattern
 * @return ReturnType
 **/
function cairo_pattern_status($pattern) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pdf_surface_create($file, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param CairoPdfSurface
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_pdf_surface_set_size($surface, $width, $height) {}

/**
 * The function description goes here.
 *
 * @return ReturnType
 **/
function cairo_ps_get_levels() {}

/**
 * The function description goes here.
 *
 * @param string
 * @return ReturnType
 **/
function cairo_ps_level_to_string($level) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_ps_surface_create($file, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @return ReturnType
 **/
function cairo_ps_surface_dsc_begin_page_setup($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @return ReturnType
 **/
function cairo_ps_surface_dsc_begin_setup($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @param string
 * @return ReturnType
 **/
function cairo_ps_surface_dsc_comment($surface, $comment) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @return ReturnType
 **/
function cairo_ps_surface_get_eps($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @param string
 * @return ReturnType
 **/
function cairo_ps_surface_restrict_to_level($surface, $level) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @param string
 * @return ReturnType
 **/
function cairo_ps_surface_set_eps($surface, $level) {}

/**
 * The function description goes here.
 *
 * @param CairoPsSurface
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_ps_surface_set_size($surface, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param CairoFontFace
 * @param CairoMatrix
 * @param CairoMatrix
 * @param CairoFontOptions
 * @return ReturnType
 **/
function cairo_scaled_font_create($fontface, $matrix, $ctm, $fontoptions) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_extents($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_get_ctm($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_get_font_face($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_get_font_matrix($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_get_font_options($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_get_scale_matrix($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_get_type($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @param string
 * @return ReturnType
 **/
function cairo_scaled_font_glyph_extents($scaledfont, $glyphs) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @return ReturnType
 **/
function cairo_scaled_font_status($scaledfont) {}

/**
 * The function description goes here.
 *
 * @param CairoScaledFont
 * @param string
 * @return ReturnType
 **/
function cairo_scaled_font_text_extents($scaledfont, $text) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_copy_page($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_surface_create_similar($surface, $content, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_finish($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_flush($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_get_content($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_get_device_offset($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_get_font_options($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_get_type($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_mark_dirty($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @param string
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_surface_mark_dirty_rectangle($surface, $x, $y, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_surface_set_device_offset($surface, $x, $y) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_surface_set_fallback_resolution($surface, $x, $y) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_show_page($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @return ReturnType
 **/
function cairo_surface_status($surface) {}

/**
 * The function description goes here.
 *
 * @param CairoSurface
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_surface_write_to_png($surface, $x, $y) {}

/**
 * The function description goes here.
 *
 * @param string
 * @param string
 * @param string
 * @return ReturnType
 **/
function cairo_svg_surface_create($file, $width, $height) {}

/**
 * The function description goes here.
 *
 * @param CairoSvgSurface
 * @param string
 * @return ReturnType
 **/
function cairo_svg_surface_restrict_to_version($surface, $version) {}

/**
 * The function description goes here.
 *
 * @param string
 * @return ReturnType
 **/
function cairo_svg_version_to_string($version) {}

/**
 * @param string
 * @param string
 * @return string
 **/
function calculhmac($clent, $data) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function calcul_hmac($clent, $siretcode, $price, $reference, $validity, $taxation, $devise, $language) {}

/**
 * Call a user defined function given by the function parameter.
 *
 * @param callback
 * @param mixed
 * @return mixed
 **/
function call_user_func($function, $parameter) {}

/**
 * Call a user defined function with the parameters in param_arr.
 *
 * @param callback
 * @param array
 * @return mixed
 **/
function call_user_func_array($function, $param_arr) {}

/**
 * @param string
 * @param object
 * @param mixed
 * @return mixed
 **/
function call_user_method($method_name, &$obj, $parameter) {}

/**
 * @param string
 * @param object
 * @param array
 * @return mixed
 **/
function call_user_method_array($method_name, &$obj, $params) {}

/**
 * This function will return the number of days in the month of year for
 * the specified calendar.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function cal_days_in_month($calendar, $month, $year) {}

/**
 * cal_from_jd converts the Julian day given in jd into a date of the
 * specified calendar. Supported calendar values are CAL_GREGORIAN,
 * CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
 *
 * @param int
 * @param int
 * @return array
 **/
function cal_from_jd($jd, $calendar) {}

/**
 * cal_info returns information on the specified calendar.
 * 
 * Calendar information is returned as an array containing the elements
 * calname, calsymbol, month, abbrevmonth and maxdaysinmonth. The names
 * of the different calendars which can be used as calendar are as
 * follows:
 * 
 * 0 or CAL_GREGORIAN - Gregorian Calendar
 * 
 * 1 or CAL_JULIAN - Julian Calendar
 * 
 * 2 or CAL_JEWISH - Jewish Calendar
 * 
 * 3 or CAL_FRENCH - French Revolutionary Calendar
 * 
 * If no calendar is specified information on all supported calendars is
 * returned as an array.
 *
 * @param int
 * @return array
 **/
function cal_info($calendar) {}

/**
 * cal_to_jd calculates the Julian day count for a date in the specified
 * calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN,
 * CAL_JEWISH and CAL_FRENCH.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function cal_to_jd($calendar, $month, $day, $year) {}

/**
 * @param float
 * @return float
 **/
function ceil($value) {}

/**
 * Changes PHP's current directory to directory.
 *
 * @param string
 * @return bool
 **/
function chdir($directory) {}

/**
 * Checks the validity of the date formed by the arguments. A date is
 * considered valid if each parameter is properly defined.
 *
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function checkdate($month, $day, $year) {}

/**
 * Searches DNS for records of type type corresponding to host.
 *
 * @param string
 * @param string
 * @return bool
 **/
function checkdnsrr($host, $type) {}

/**
 * Attempts to change the group of the file filename to group.
 * 
 * Only the superuser may change the group of a file arbitrarily; other
 * users may change the group of a file to any group of which that user
 * is a member.
 *
 * @param string
 * @param mixed
 * @return bool
 **/
function chgrp($filename, $group) {}

/**
 * Attempts to change the mode of the specified file to that given in
 * mode.
 *
 * @param string
 * @param int
 * @return bool
 **/
function chmod($filename, $mode) {}

/**
 * This function returns a string with whitespace stripped from the end
 * of str.
 * 
 * Without the second parameter, chop will strip these characters:
 * 
 * " " (ASCII 32 (0x20)), an ordinary space.
 * 
 * "\t" (ASCII 9 (0x09)), a tab.
 * 
 * "\n" (ASCII 10 (0x0A)), a new line (line feed).
 * 
 * "\r" (ASCII 13 (0x0D)), a carriage return.
 * 
 * "\0" (ASCII 0 (0x00)), the NUL-byte.
 * 
 * "\x0B" (ASCII 11 (0x0B)), a vertical tab.
 *
 * @param string
 * @param string
 * @return string
 **/
function chop($str, $charlist) {}

/**
 * Attempts to change the owner of the file filename to user user. Only
 * the superuser may change the owner of a file.
 *
 * @param string
 * @param mixed
 * @return bool
 **/
function chown($filename, $user) {}

/**
 * Returns a one-character string containing the character specified by
 * ascii.
 * 
 * This function complements ord.
 *
 * @param int
 * @return string
 **/
function chr($ascii) {}

/**
 * Changes the root directory of the current process to directory.
 * 
 * This function is only available if your system supports it and you're
 * using the CLI, CGI or Embed SAPI. Also, this function requires root
 * privileges.
 *
 * @param string
 * @return bool
 **/
function chroot($directory) {}

/**
 * Can be used to split a string into smaller chunks which is useful for
 * e.g. converting base64_encode output to match RFC 2045 semantics. It
 * inserts end every chunklen characters.
 *
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function chunk_split($body, $chunklen, $end) {}

/**
 * @param string
 * @return array
 **/
function classkit_import($filename) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function classkit_method_add($classname, $methodname, $args, $code, $flags) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function classkit_method_copy($dClass, $dMethod, $sClass, $sMethod) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function classkit_method_redefine($classname, $methodname, $args, $code, $flags) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function classkit_method_remove($classname, $methodname) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function classkit_method_rename($classname, $methodname, $newname) {}

/**
 * Creates an alias named alias base on the defined class original. The
 * aliased class is exactly the same as the original class.
 *
 * @param string
 * @param string
 * @return boolean
 **/
function class_alias($original, $alias) {}

/**
 * This function checks whether or not the given class has been defined.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function class_exists($class_name, $autoload) {}

/**
 * This function returns an array with the names of the interfaces that
 * the given class and its parents implement.
 *
 * @param mixed
 * @param bool
 * @return array
 **/
function class_implements($class, $autoload) {}

/**
 * This function returns an array with the name of the parent classes of
 * the given class.
 *
 * @param mixed
 * @param bool
 * @return array
 **/
function class_parents($class, $autoload) {}

/**
 * When you use stat, lstat, or any of the other functions listed in the
 * affected functions list (below), PHP caches the information those
 * functions return in order to provide faster performance. However, in
 * certain cases, you may want to clear the cached information. For
 * instance, if the same file is being checked multiple times within a
 * single script, and that file is in danger of being removed or changed
 * during that script's operation, you may elect to clear the status
 * cache. In these cases, you can use the clearstatcache function to
 * clear the information that PHP caches about a file.
 * 
 * You should also note that PHP doesn't cache information about
 * non-existent files. So, if you call file_exists on a file that doesn't
 * exist, it will return until you create the file. If you create the
 * file, it will return even if you then delete the file. However unlink
 * clears the cache automatically.
 * 
 * Affected functions include stat, lstat, file_exists, is_writable,
 * is_readable, is_executable, is_file, is_dir, is_link, filectime,
 * fileatime, filemtime, fileinode, filegroup, fileowner, filesize,
 * filetype, and fileperms.
 *
 * @param bool
 * @param string
 * @return void
 **/
function clearstatcache($clear_realpath_cache, $filename) {}

/**
 * Closes the directory stream indicated by dir_handle. The stream must
 * have previously been opened by opendir.
 *
 * @param resource
 * @return void
 **/
function closedir($dir_handle) {}

/**
 * closelog closes the descriptor being used to write to the system
 * logger. The use of closelog is optional.
 *
 * @return bool
 **/
function closelog() {}

/**
 * Creates an array containing variables and their values.
 * 
 * For each of these, compact looks for a variable with that name in the
 * current symbol table and adds it to the output array such that the
 * variable name becomes the key and the contents of the variable become
 * the value for that key. In short, it does the opposite of extract.
 * 
 * Any strings that are not set will simply be skipped.
 *
 * @param mixed
 * @return array
 **/
function compact($varname) {}

/**
 * Increases the components reference counter.
 *
 * @return void
 **/
function com_addref() {}

/**
 * Generates a Globally Unique Identifier (GUID).
 * 
 * A GUID is generated in the same way as DCE UUID's, except that the
 * Microsoft convention is to enclose a GUID in curly braces.
 *
 * @return string
 **/
function com_create_guid() {}

/**
 * Instructs COM to sink events generated by comobject into the PHP
 * object sinkobject.
 * 
 * Be careful how you use this feature; if you are doing something
 * similar to the example below, then it doesn't really make sense to run
 * it in a web server context.
 *
 * @param variant
 * @param object
 * @param mixed
 * @return bool
 **/
function com_event_sink($comobject, $sinkobject, $sinkinterface) {}

/**
 * com_get_active_object is similar to creating a new instance of a
 * object, except that it will only return an object to your script if
 * the object is already running. OLE applications use something known as
 * the Running Object Table to allow well-known applications to be
 * launched only once; this function exposes the COM library function
 * GetActiveObject() to get a handle on a running instance.
 *
 * @param string
 * @param int
 * @return variant
 **/
function com_get_active_object($progid, $code_page) {}

/**
 * com_invoke invokes the method named function_name of the COM component
 * referenced by com_object. com_invoke returns on error, returns the
 * function_name's return value on success. All the extra parameters
 * function_parameters are passed to the method function_name.
 * 
 * Don't use com_invoke(), use OO syntax instead
 *
 * @param resource
 * @param string
 * @param mixed
 * @return mixed
 **/
function com_invoke($com_object, $function_name, $function_parameters) {}

/**
 * Checks to see if a COM object can be enumerated using the Next()
 * method hack. See class for more details on these methods.
 *
 * @param variant
 * @return bool
 **/
function com_isenum($com_module) {}

/**
 * Loads a type-library and registers its constants in the engine, as
 * though they were defined using define.
 * 
 * Note that it is much more efficient to use the configuration setting
 * to pre-load and register the constants, although not so flexible.
 * 
 * If you have turned on , then PHP will attempt to automatically
 * register the constants associated with a COM object when you
 * instantiate it. This depends on the interfaces provided by the COM
 * object itself, and may not always be possible.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function com_load_typelib($typelib_name, $case_insensitive) {}

/**
 * This function will sleep for up to timeoutms milliseconds, or until a
 * message arrives in the queue.
 * 
 * The purpose of this function is to route COM calls between apartments
 * and handle various synchronization issues. This allows your script to
 * wait efficiently for events to be triggered, while still handling
 * other events or running other code in the background. You should use
 * it in a loop, as demonstrated by the example in the com_event_sink
 * function, until you are finished using event bound COM objects.
 *
 * @param int
 * @return bool
 **/
function com_message_pump($timeoutms) {}

/**
 * The purpose of this function is to help generate a skeleton class for
 * use as an event sink. You may also use it to generate a dump of any
 * COM object, provided that it supports enough of the introspection
 * interfaces, and that you know the name of the interface you want to
 * display.
 *
 * @param object
 * @param string
 * @param bool
 * @return bool
 **/
function com_print_typeinfo($comobject, $dispinterface, $wantsink) {}

/**
 * Decreases the components reference counter.
 *
 * @return void
 **/
function com_release() {}

/**
 * Checks whether the client disconnected.
 *
 * @return int
 **/
function connection_aborted() {}

/**
 * Gets the connection status bitfield.
 *
 * @return int
 **/
function connection_status() {}

/**
 * Determines whether the script timed out.
 *
 * @return int
 **/
function connection_timeout() {}

/**
 * @param string
 * @return mixed
 **/
function constant($name) {}

/**
 * Converts from one Cyrillic character set to another.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function convert_cyr_string($str, $from, $to) {}

/**
 * convert_uudecode decodes a uuencoded string.
 *
 * @param string
 * @return string
 **/
function convert_uudecode($data) {}

/**
 * convert_uuencode encodes a string using the uuencode algorithm.
 * 
 * Uuencode translates all strings (including binary's ones) into
 * printable characters, making them safe for network transmissions.
 * Uuencoded data is about 35% larger than the original.
 *
 * @param string
 * @return string
 **/
function convert_uuencode($data) {}

/**
 * Makes a copy of the file source to dest.
 * 
 * If you wish to move a file, use the rename function.
 *
 * @param string
 * @param string
 * @param resource
 * @return bool
 **/
function copy($source, $dest, $context) {}

/**
 * cos returns the cosine of the arg parameter. The arg parameter is in
 * radians.
 *
 * @param float
 * @return float
 **/
function cos($arg) {}

/**
 * Returns the hyperbolic cosine of arg, defined as (exp(arg) +
 * exp(-arg))/2.
 *
 * @param float
 * @return float
 **/
function cosh($arg) {}

/**
 * Counts all elements in an array, or properties in an object.
 * 
 * For objects, if you have SPL installed, you can hook into count by
 * implementing interface Countable. The interface has exactly one
 * method, count, which returns the return value for the count function.
 * 
 * Please see the Array section of the manual for a detailed explanation
 * of how arrays are implemented and used in PHP.
 *
 * @param mixed
 * @param int
 * @return int
 **/
function count($var, $mode) {}

/**
 * Counts the number of occurrences of every byte-value (0..255) in
 * string and returns it in various ways.
 *
 * @param string
 * @param int
 * @return mixed
 **/
function count_chars($string, $mode) {}

/**
 * Performs an obscure check with the given password on the specified
 * dictionary.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function crack_check($dictionary, $password) {}

/**
 * crack_closedict closes the specified dictionary identifier.
 *
 * @param resource
 * @return bool
 **/
function crack_closedict($dictionary) {}

/**
 * crack_getlastmessage returns the message from the last obscure check.
 *
 * @return string
 **/
function crack_getlastmessage() {}

/**
 * crack_opendict opens the specified CrackLib dictionary for use with
 * crack_check.
 *
 * @param string
 * @return resource
 **/
function crack_opendict($dictionary) {}

/**
 * Generates the cyclic redundancy checksum polynomial of 32-bit lengths
 * of the str. This is usually used to validate the integrity of data
 * being transmitted.
 * 
 * Because PHP's integer type is signed, and many crc32 checksums will
 * result in negative integers, you need to use the "%u" formatter of
 * sprintf or printf to get the string representation of the unsigned
 * crc32 checksum.
 *
 * @param string
 * @return int
 **/
function crc32($str) {}

/**
 * Creates an anonymous function from the parameters passed, and returns
 * a unique name for it.
 *
 * @param string
 * @param string
 * @return string
 **/
function create_function($args, $code) {}

/**
 * crypt will return an encrypted string using the standard Unix
 * DES-based encryption algorithm or alternative algorithms that may be
 * available on the system.
 * 
 * Some operating systems support more than one type of encryption. In
 * fact, sometimes the standard DES-based encryption is replaced by an
 * MD5-based encryption algorithm. The encryption type is triggered by
 * the salt argument. At install time, PHP determines the capabilities of
 * the crypt function and will accept salts for other encryption types.
 * If no salt is provided, PHP will auto-generate a standard two
 * character salt by default, unless the default encryption type on the
 * system is MD5, in which case a random MD5-compatible salt is
 * generated. PHP sets a constant named CRYPT_SALT_LENGTH which tells you
 * whether a regular two character salt applies to your system or the
 * longer twelve character salt is applicable.
 * 
 * The standard DES-based encryption crypt returns the salt as the first
 * two characters of the output. It also only uses the first eight
 * characters of str, so longer strings that start with the same eight
 * characters will generate the same result (when the same salt is used).
 *
 * @param string
 * @param string
 * @return string
 **/
function crypt($str, $salt) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * alphanumeric. In the standard C locale letters are just [A-Za-z].
 *
 * @param string
 * @return bool
 **/
function ctype_alnum($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * alphabetic. In the standard C locale letters are just [A-Za-z] and
 * ctype_alpha is equivalent to (ctype_upper($text) ||
 * ctype_lower($text)) if $text is just a single character, but other
 * languages have letters that are considered neither upper nor lower
 * case.
 *
 * @param string
 * @return bool
 **/
function ctype_alpha($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * control characters. Control characters are e.g. line feed, tab,
 * escape.
 *
 * @param string
 * @return bool
 **/
function ctype_cntrl($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * numerical.
 *
 * @param string
 * @return bool
 **/
function ctype_digit($text) {}

/**
 * Checks if all of the characters in the provided string, text, creates
 * visible output.
 *
 * @param string
 * @return bool
 **/
function ctype_graph($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * lowercase letters.
 *
 * @param string
 * @return bool
 **/
function ctype_lower($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * printable.
 *
 * @param string
 * @return bool
 **/
function ctype_print($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * punctuation character.
 *
 * @param string
 * @return bool
 **/
function ctype_punct($text) {}

/**
 * Checks if all of the characters in the provided string, text, creates
 * whitespace.
 *
 * @param string
 * @return bool
 **/
function ctype_space($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * uppercase characters.
 *
 * @param string
 * @return bool
 **/
function ctype_upper($text) {}

/**
 * Checks if all of the characters in the provided string, text, are
 * hexadecimal 'digits'.
 *
 * @param string
 * @return bool
 **/
function ctype_xdigit($text) {}

/**
 * Closes a cURL session and frees all resources. The cURL handle, ch, is
 * also deleted.
 *
 * @param resource
 * @return void
 **/
function curl_close($ch) {}

/**
 * Copies a cURL handle keeping the same preferences.
 *
 * @param resource
 * @return resource
 **/
function curl_copy_handle($ch) {}

/**
 * Returns the error number for the last cURL operation.
 *
 * @param resource
 * @return int
 **/
function curl_errno($ch) {}

/**
 * Returns a clear text error message for the last cURL operation.
 *
 * @param resource
 * @return string
 **/
function curl_error($ch) {}

/**
 * Execute the given cURL session.
 * 
 * This function should be called after initializing a cURL session and
 * all the options for the session are set.
 *
 * @param resource
 * @return mixed
 **/
function curl_exec($ch) {}

/**
 * Gets information about the last transfer,
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function curl_getinfo($ch, $opt) {}

/**
 * Initializes a new session and return a cURL handle for use with the
 * curl_setopt, curl_exec, and curl_close functions.
 *
 * @param string
 * @return resource
 **/
function curl_init($url) {}

/**
 * Adds the ch handle to the multi handle mh
 *
 * @param resource
 * @param resource
 * @return int
 **/
function curl_multi_add_handle($mh, $ch) {}

/**
 * Closes a set of cURL handles.
 *
 * @param resource
 * @return void
 **/
function curl_multi_close($mh) {}

/**
 * Processes each of the handles in the stack. This method can be called
 * whether or not a handle needs to read or write data.
 *
 * @param resource
 * @param int
 * @return int
 **/
function curl_multi_exec($mh, &$still_running) {}

/**
 * If CURLOPT_RETURNTRANSFER is an option that is set for a specific
 * handle, then this function will return the content of that cURL handle
 * in the form of a string.
 *
 * @param resource
 * @return string
 **/
function curl_multi_getcontent($ch) {}

/**
 * Ask the multi handle if there are any messages or information from the
 * individual transfers. Messages may include information such as an
 * error code from the transfer or just the fact that a transfer is
 * completed.
 * 
 * Repeated calls to this function will return a new result each time,
 * until a is returned as a signal that there is no more to get at this
 * point. The integer pointed to with msgs_in_queue will contain the
 * number of remaining messages after this function was called.
 *
 * @param resource
 * @param int
 * @return array
 **/
function curl_multi_info_read($mh, &$msgs_in_queue) {}

/**
 * Allows the processing of multiple cURL handles in parallel.
 *
 * @return resource
 **/
function curl_multi_init() {}

/**
 * Removes a given ch handle from the given mh handle. When the ch handle
 * has been removed, it is again perfectly legal to run curl_exec on this
 * handle. Removing a handle while being used, will effectively halt all
 * transfers in progress.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function curl_multi_remove_handle($mh, $ch) {}

/**
 * Blocks until there is activity on any of the curl_multi connections.
 *
 * @param resource
 * @param float
 * @return int
 **/
function curl_multi_select($mh, $timeout) {}

/**
 * Sets an option on the given cURL session handle.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function curl_setopt($ch, $option, $value) {}

/**
 * Sets multiple options for a cURL session. This function is useful for
 * setting a large amount of cURL options without repetitively calling
 * curl_setopt.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function curl_setopt_array($ch, $options) {}

/**
 * Returns information about the cURL version.
 *
 * @param int
 * @return array
 **/
function curl_version($age) {}

/**
 * Every array has an internal pointer to its "current" element, which is
 * initialized to the first element inserted into the array.
 *
 * @param array
 * @return mixed
 **/
function current(&$array) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @param string
 * @param string
 * @return void
 **/
function cyrus_authenticate($connection, $mechlist, $service, $user, $minssf, $maxssf, $authname, $password) {}

/**
 * Binds callbacks to a Cyrus IMAP connection.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function cyrus_bind($connection, $callbacks) {}

/**
 * Closes the connection to a Cyrus IMAP server.
 *
 * @param resource
 * @return bool
 **/
function cyrus_close($connection) {}

/**
 * Connects to a Cyrus IMAP server.
 *
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function cyrus_connect($host, $port, $flags) {}

/**
 * Sends a query to a Cyrus IMAP server.
 *
 * @param resource
 * @param string
 * @return array
 **/
function cyrus_query($connection, $query) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function cyrus_unbind($connection, $trigger_name) {}

/**
 * Returns a string formatted according to the given format string using
 * the given integer timestamp or the current time if no timestamp is
 * given. In other words, timestamp is optional and defaults to the value
 * of time.
 *
 * @param string
 * @param int
 * @return string
 **/
function date($format, $timestamp) {}

/**
 * @param string
 * @param DateTimeZone
 * @return DateTime
 **/
function date_create($time, $timezone) {}

/**
 * In order of preference, this function returns the default timezone by:
 * 
 * Reading the timezone set using the date_default_timezone_set function
 * (if any)
 * 
 * Reading the TZ environment variable (if non empty)
 * 
 * Reading the value of the date.timezone ini option (if set)
 * 
 * Querying the host operating system (if supported and allowed by the
 * OS)
 * 
 * If none of the above succeed, date_default_timezone_get will return a
 * default timezone of UTC.
 *
 * @return string
 **/
function date_default_timezone_get() {}

/**
 * date_default_timezone_set sets the default timezone used by all
 * date/time functions.
 * 
 * Instead of using this function to set the default timezone in your
 * script, you can also use the INI setting date.timezone to set the
 * default timezone.
 *
 * @param string
 * @return bool
 **/
function date_default_timezone_set($timezone_identifier) {}

/**
 * @param string
 * @return array
 **/
function date_parse($date) {}

/**
 * Returns associative array with detailed info about given date.
 *
 * @param string
 * @param string
 * @return array
 **/
function date_parse_from_format($format, $date) {}

/**
 * date_sunrise returns the sunrise time for a given day (specified as a
 * timestamp) and location.
 *
 * @param int
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @return mixed
 **/
function date_sunrise($timestamp, $format, $latitude, $longitude, $zenith, $gmt_offset) {}

/**
 * date_sunset returns the sunset time for a given day (specified as a
 * timestamp) and location.
 *
 * @param int
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @return mixed
 **/
function date_sunset($timestamp, $format, $latitude, $longitude, $zenith, $gmt_offset) {}

/**
 * @param int
 * @param float
 * @param float
 * @return array
 **/
function date_sun_info($time, $latitude, $longitude) {}

/**
 * Sets or gets the AUTOCOMMIT behavior of the specified connection
 * resource.
 *
 * @param resource
 * @param bool
 * @return mixed
 **/
function db2_autocommit($connection, $value) {}

/**
 * Binds a PHP variable to an SQL statement parameter in a statement
 * resource returned by db2_prepare. This function gives you more control
 * over the parameter type, data type, precision, and scale for the
 * parameter than simply passing the variable as part of the optional
 * input array to db2_execute.
 *
 * @param resource
 * @param int
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function db2_bind_param($stmt, $parameternumber, $variablename, $parametertype, $datatype, $precision, $scale) {}

/**
 * This function returns an object with read-only properties that return
 * information about the DB2 database client. The following table lists
 * the DB2 client properties:
 * 
 * DB2 client properties
 * 
 * Property name Return type Description
 * 
 * APPL_CODEPAGE int The application code page.
 * 
 * CONN_CODEPAGE int The code page for the current connection.
 * 
 * DATA_SOURCE_NAME string The data source name (DSN) used to create the
 * current connection to the database.
 * 
 * DRIVER_NAME string The name of the library that implements the DB2
 * Call Level Interface (CLI) specification.
 * 
 * DRIVER_ODBC_VER string The version of ODBC that the DB2 client
 * supports. This returns a string "MM.mm" where MM is the major version
 * and mm is the minor version. The DB2 client always returns "03.51".
 * 
 * DRIVER_VER string The version of the client, in the form of a string
 * "MM.mm.uuuu" where MM is the major version, mm is the minor version,
 * and uuuu is the update. For example, "08.02.0001" represents major
 * version 8, minor version 2, update 1.
 * 
 * ODBC_SQL_CONFORMANCE string
 * 
 * The level of ODBC SQL grammar supported by the client:
 * 
 * MINIMUM
 * 
 * Supports the minimum ODBC SQL grammar.
 * 
 * CORE
 * 
 * Supports the core ODBC SQL grammar.
 * 
 * EXTENDED
 * 
 * Supports extended ODBC SQL grammar.
 * 
 * ODBC_VER string The version of ODBC that the ODBC driver manager
 * supports. This returns a string "MM.mm.rrrr" where MM is the major
 * version, mm is the minor version, and rrrr is the release. The DB2
 * client always returns "03.01.0000".
 *
 * @param resource
 * @return object
 **/
function db2_client_info($connection) {}

/**
 * This function closes a DB2 client connection created with db2_connect
 * and returns the corresponding resources to the database server.
 * 
 * If you attempt to close a persistent DB2 client connection created
 * with db2_pconnect, the close request is ignored and the persistent DB2
 * client connection remains available for the next caller.
 *
 * @param resource
 * @return bool
 **/
function db2_close($connection) {}

/**
 * Returns a result set listing the columns and associated metadata for a
 * table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_columns($connection, $qualifier, $schema, $tablename, $columnname) {}

/**
 * Returns a result set listing the columns and associated privileges for
 * a table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_column_privileges($connection, $qualifier, $schema, $tablename, $columnname) {}

/**
 * Commits an in-progress transaction on the specified connection
 * resource and begins a new transaction. PHP applications normally
 * default to AUTOCOMMIT mode, so db2_commit is not necessary unless
 * AUTOCOMMIT has been turned off for the connection resource.
 *
 * @param resource
 * @return bool
 **/
function db2_commit($connection) {}

/**
 * Creates a new connection to an IBM DB2 Universal Database, IBM
 * Cloudscape, or Apache Derby database.
 *
 * @param string
 * @param string
 * @param string
 * @param array
 * @return resource
 **/
function db2_connect($database, $username, $password, $options) {}

/**
 * db2_conn_error returns an SQLSTATE value representing the reason the
 * last attempt to connect to a database failed. As db2_connect returns
 * in the event of a failed connection attempt, you do not pass any
 * parameters to db2_conn_error to retrieve the SQLSTATE value.
 * 
 * If, however, the connection was successful but becomes invalid over
 * time, you can pass the connection parameter to retrieve the SQLSTATE
 * value for a specific connection.
 * 
 * To learn what the SQLSTATE value means, you can issue the following
 * command at a DB2 Command Line Processor prompt: db2 '?
 * sqlstate-value'. You can also call db2_conn_errormsg to retrieve an
 * explicit error message and the associated SQLCODE value.
 *
 * @param resource
 * @return string
 **/
function db2_conn_error($connection) {}

/**
 * db2_conn_errormsg returns an error message and SQLCODE value
 * representing the reason the last database connection attempt failed.
 * As db2_connect returns in the event of a failed connection attempt, do
 * not pass any parameters to db2_conn_errormsg to retrieve the
 * associated error message and SQLCODE value.
 * 
 * If, however, the connection was successful but becomes invalid over
 * time, you can pass the connection parameter to retrieve the associated
 * error message and SQLCODE value for a specific connection.
 *
 * @param resource
 * @return string
 **/
function db2_conn_errormsg($connection) {}

/**
 * Returns the cursor type used by a statement resource. Use this to
 * determine if you are working with a forward-only cursor or scrollable
 * cursor.
 *
 * @param resource
 * @return int
 **/
function db2_cursor_type($stmt) {}

/**
 * Prepends backslashes to special characters in the string argument.
 *
 * @param string
 * @return string
 **/
function db2_escape_string($string_literal) {}

/**
 * Executes an SQL statement directly.
 * 
 * If you plan to interpolate PHP variables into the SQL statement,
 * understand that this is one of the more common security exposures.
 * Consider calling db2_prepare to prepare an SQL statement with
 * parameter markers for input values. Then you can call db2_execute to
 * pass in the input values and avoid SQL injection attacks.
 * 
 * If you plan to repeatedly issue the same SQL statement with different
 * parameters, consider calling db2_prepare and db2_execute to enable the
 * database server to reuse its access plan and increase the efficiency
 * of your database access.
 *
 * @param resource
 * @param string
 * @param array
 * @return resource
 **/
function db2_exec($connection, $statement, $options) {}

/**
 * db2_execute executes an SQL statement that was prepared by
 * db2_prepare.
 * 
 * If the SQL statement returns a result set, for example, a SELECT
 * statement or a CALL to a stored procedure that returns one or more
 * result sets, you can retrieve a row as an array from the stmt resource
 * using db2_fetch_assoc, db2_fetch_both, or db2_fetch_array.
 * Alternatively, you can use db2_fetch_row to move the result set
 * pointer to the next row and fetch a column at a time from that row
 * with db2_result.
 * 
 * Refer to db2_prepare for a brief discussion of the advantages of using
 * db2_prepare and db2_execute rather than db2_exec.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function db2_execute($stmt, $parameters) {}

/**
 * Returns an array, indexed by column position, representing a row in a
 * result set. The columns are 0-indexed.
 *
 * @param resource
 * @param int
 * @return array
 **/
function db2_fetch_array($stmt, $row_number) {}

/**
 * Returns an array, indexed by column name, representing a row in a
 * result set.
 *
 * @param resource
 * @param int
 * @return array
 **/
function db2_fetch_assoc($stmt, $row_number) {}

/**
 * Returns an array, indexed by both column name and position,
 * representing a row in a result set. Note that the row returned by
 * db2_fetch_both requires more memory than the single-indexed arrays
 * returned by db2_fetch_assoc or db2_fetch_array.
 *
 * @param resource
 * @param int
 * @return array
 **/
function db2_fetch_both($stmt, $row_number) {}

/**
 * Returns an object in which each property represents a column returned
 * in the row fetched from a result set.
 *
 * @param resource
 * @param int
 * @return object
 **/
function db2_fetch_object($stmt, $row_number) {}

/**
 * Use db2_fetch_row to iterate through a result set, or to point to a
 * specific row in a result set if you requested a scrollable cursor.
 * 
 * To retrieve individual fields from the result set, call the db2_result
 * function.
 * 
 * Rather than calling db2_fetch_row and db2_result, most applications
 * will call one of db2_fetch_assoc, db2_fetch_both, or db2_fetch_array
 * to advance the result set pointer and return a complete row as an
 * array.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function db2_fetch_row($stmt, $row_number) {}

/**
 * Returns the maximum number of bytes required to display a column in a
 * result set.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function db2_field_display_size($stmt, $column) {}

/**
 * Returns the name of the specified column in the result set.
 *
 * @param resource
 * @param mixed
 * @return string
 **/
function db2_field_name($stmt, $column) {}

/**
 * Returns the position of the named column in a result set.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function db2_field_num($stmt, $column) {}

/**
 * Returns the precision of the indicated column in a result set.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function db2_field_precision($stmt, $column) {}

/**
 * Returns the scale of the indicated column in a result set.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function db2_field_scale($stmt, $column) {}

/**
 * Returns the data type of the indicated column in a result set.
 *
 * @param resource
 * @param mixed
 * @return string
 **/
function db2_field_type($stmt, $column) {}

/**
 * Returns the width of the current value of the indicated column in a
 * result set. This is the maximum width of the column for a fixed-length
 * data type, or the actual width of the column for a variable-length
 * data type.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function db2_field_width($stmt, $column) {}

/**
 * Returns a result set listing the foreign keys for a table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_foreign_keys($connection, $qualifier, $schema, $tablename) {}

/**
 * Frees the system and database resources that are associated with a
 * result set. These resources are freed implicitly when a script
 * finishes, but you can call db2_free_result to explicitly free the
 * result set resources before the end of the script.
 *
 * @param resource
 * @return bool
 **/
function db2_free_result($stmt) {}

/**
 * Frees the system and database resources that are associated with a
 * statement resource. These resources are freed implicitly when a script
 * finishes, but you can call db2_free_stmt to explicitly free the
 * statement resources before the end of the script.
 *
 * @param resource
 * @return bool
 **/
function db2_free_stmt($stmt) {}

/**
 * Retrieves the value of a specified option value for a statement
 * resource or a connection resource.
 *
 * @param resource
 * @param string
 * @return string
 **/
function db2_get_option($resource, $option) {}

/**
 * Returns the auto generated ID of the last insert query that
 * successfully executed on this connection.
 * 
 * The result of this function is not affected by any of the following:
 * 
 * A single row INSERT statement with a VALUES clause for a table
 * without an identity column.
 * 
 * A multiple row INSERT statement with a VALUES clause.
 * 
 * An INSERT statement with a fullselect.
 * 
 * A ROLLBACK TO SAVEPOINT statement.
 *
 * @param resource
 * @return int
 **/
function db2_last_insert_id($resource) {}

/**
 * Use db2_lob_read to iterate through a specified column of a result set
 * and retrieve a user defined size of LOB data.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function db2_lob_read($stmt, $colnum, $length) {}

/**
 * A stored procedure can return zero or more result sets. While you
 * handle the first result set in exactly the same way you would handle
 * the results returned by a simple SELECT statement, to fetch the second
 * and subsequent result sets from a stored procedure you must call the
 * db2_next_result function and return the result to a uniquely named PHP
 * variable.
 *
 * @param resource
 * @return resource
 **/
function db2_next_result($stmt) {}

/**
 * Returns the number of fields contained in a result set. This is most
 * useful for handling the result sets returned by dynamically generated
 * queries, or for result sets returned by stored procedures, where your
 * application cannot otherwise know how to retrieve and use the results.
 *
 * @param resource
 * @return int
 **/
function db2_num_fields($stmt) {}

/**
 * Returns the number of rows deleted, inserted, or updated by an SQL
 * statement.
 * 
 * To determine the number of rows that will be returned by a SELECT
 * statement, issue SELECT COUNT(*) with the same predicates as your
 * intended SELECT statement and retrieve the value.
 * 
 * If your application logic checks the number of rows returned by a
 * SELECT statement and branches if the number of rows is 0, consider
 * modifying your application to attempt to return the first row with one
 * of db2_fetch_assoc, db2_fetch_both, db2_fetch_array, or db2_fetch_row,
 * and branch if the fetch function returns .
 *
 * @param resource
 * @return int
 **/
function db2_num_rows($stmt) {}

/**
 * This function closes a DB2 client connection created with db2_pconnect
 * and returns the corresponding resources to the database server.
 * 
 * This function is only available on i5/OS in response to i5/OS system
 * administration requests.
 * 
 * If you have a persistent DB2 client connection created with
 * db2_pconnect, you may use this function to close the connection. To
 * avoid substantial connection performance penalties, this function
 * should only be used in rare cases when the persistent connection has
 * become unresponsive or the persistent connection will not be needed
 * for a long period of time.
 *
 * @param resource
 * @return bool
 **/
function db2_pclose($resource) {}

/**
 * Returns a persistent connection to an IBM DB2 Universal Database, IBM
 * Cloudscape, or Apache Derby database. For more information on
 * persistent connections, refer to .
 * 
 * Calling db2_close on a persistent connection always returns , but the
 * underlying DB2 client connection remains open and waiting to serve the
 * next matching db2_pconnect request.
 *
 * @param string
 * @param string
 * @param string
 * @param array
 * @return resource
 **/
function db2_pconnect($database, $username, $password, $options) {}

/**
 * db2_prepare creates a prepared SQL statement which can include 0 or
 * more parameter markers (? characters) representing parameters for
 * input, output, or input/output. You can pass parameters to the
 * prepared statement using db2_bind_param, or for input values only, as
 * an array passed to db2_execute.
 * 
 * There are three main advantages to using prepared statements in your
 * application:
 * 
 * Performance: when you prepare a statement, the database server
 * creates an optimized access plan for retrieving data with that
 * statement. Subsequently issuing the prepared statement with
 * db2_execute enables the statements to reuse that access plan and
 * avoids the overhead of dynamically creating a new access plan for
 * every statement you issue.
 * 
 * Security: when you prepare a statement, you can include parameter
 * markers for input values. When you execute a prepared statement with
 * input values for placeholders, the database server checks each input
 * value to ensure that the type matches the column definition or
 * parameter definition.
 * 
 * Advanced functionality: Parameter markers not only enable you to pass
 * input values to prepared SQL statements, they also enable you to
 * retrieve OUT and INOUT parameters from stored procedures using
 * db2_bind_param.
 *
 * @param resource
 * @param string
 * @param array
 * @return resource
 **/
function db2_prepare($connection, $statement, $options) {}

/**
 * Returns a result set listing the primary keys for a table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_primary_keys($connection, $qualifier, $schema, $tablename) {}

/**
 * Returns a result set listing the stored procedures registered in a
 * database.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_procedures($connection, $qualifier, $schema, $procedure) {}

/**
 * Returns a result set listing the parameters for one or more stored
 * procedures.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_procedure_columns($connection, $qualifier, $schema, $procedure, $parameter) {}

/**
 * Use db2_result to return the value of a specified column in the
 * current row of a result set. You must call db2_fetch_row before
 * calling db2_result to set the location of the result set pointer.
 *
 * @param resource
 * @param mixed
 * @return mixed
 **/
function db2_result($stmt, $column) {}

/**
 * Rolls back an in-progress transaction on the specified connection
 * resource and begins a new transaction. PHP applications normally
 * default to AUTOCOMMIT mode, so db2_rollback normally has no effect
 * unless AUTOCOMMIT has been turned off for the connection resource.
 *
 * @param resource
 * @return bool
 **/
function db2_rollback($connection) {}

/**
 * This function returns an object with read-only properties that return
 * information about the IBM DB2, Cloudscape, or Apache Derby database
 * server. The following table lists the database server properties:
 * 
 * Database server properties
 * 
 * Property name Return type Description
 * 
 * DBMS_NAME string The name of the database server to which you are
 * connected. For DB2 servers this is a combination of DB2 followed by
 * the operating system on which the database server is running.
 * 
 * DBMS_VER string The version of the database server, in the form of a
 * string "MM.mm.uuuu" where MM is the major version, mm is the minor
 * version, and uuuu is the update. For example, "08.02.0001" represents
 * major version 8, minor version 2, update 1.
 * 
 * DB_CODEPAGE int The code page of the database to which you are
 * connected.
 * 
 * DB_NAME string The name of the database to which you are connected.
 * 
 * DFT_ISOLATION string
 * 
 * The default transaction isolation level supported by the server:
 * 
 * UR
 * 
 * Uncommitted read: changes are immediately visible by all concurrent
 * transactions.
 * 
 * CS
 * 
 * Cursor stability: a row read by one transaction can be altered and
 * committed by a second concurrent transaction.
 * 
 * RS
 * 
 * Read stability: a transaction can add or remove rows matching a
 * search condition or a pending transaction.
 * 
 * RR
 * 
 * Repeatable read: data affected by pending transaction is not
 * available to other transactions.
 * 
 * NC
 * 
 * No commit: any changes are visible at the end of a successful
 * operation. Explicit commits and rollbacks are not allowed.
 * 
 * IDENTIFIER_QUOTE_CHAR string The character used to delimit an
 * identifier.
 * 
 * INST_NAME string The instance on the database server that contains
 * the database.
 * 
 * ISOLATION_OPTION array An array of the isolation options supported by
 * the database server. The isolation options are described in the
 * DFT_ISOLATION property.
 * 
 * KEYWORDS array An array of the keywords reserved by the database
 * server.
 * 
 * LIKE_ESCAPE_CLAUSE bool if the database server supports the use of %
 * and _ wildcard characters. if the database server does not support
 * these wildcard characters.
 * 
 * MAX_COL_NAME_LEN int Maximum length of a column name supported by the
 * database server, expressed in bytes.
 * 
 * MAX_IDENTIFIER_LEN int Maximum length of an SQL identifier supported
 * by the database server, expressed in characters.
 * 
 * MAX_INDEX_SIZE int Maximum size of columns combined in an index
 * supported by the database server, expressed in bytes.
 * 
 * MAX_PROC_NAME_LEN int Maximum length of a procedure name supported by
 * the database server, expressed in bytes.
 * 
 * MAX_ROW_SIZE int Maximum length of a row in a base table supported by
 * the database server, expressed in bytes.
 * 
 * MAX_SCHEMA_NAME_LEN int Maximum length of a schema name supported by
 * the database server, expressed in bytes.
 * 
 * MAX_STATEMENT_LEN int Maximum length of an SQL statement supported by
 * the database server, expressed in bytes.
 * 
 * MAX_TABLE_NAME_LEN int Maximum length of a table name supported by
 * the database server, expressed in bytes.
 * 
 * NON_NULLABLE_COLUMNS bool if the database server supports columns
 * that can be defined as NOT NULL, if the database server does not
 * support columns defined as NOT NULL.
 * 
 * PROCEDURES bool if the database server supports the use of the CALL
 * statement to call stored procedures, if the database server does not
 * support the CALL statement.
 * 
 * SPECIAL_CHARS string A string containing all of the characters other
 * than a-Z, 0-9, and underscore that can be used in an identifier name.
 * 
 * SQL_CONFORMANCE string
 * 
 * The level of conformance to the ANSI/ISO SQL-92 specification offered
 * by the database server:
 * 
 * ENTRY
 * 
 * Entry-level SQL-92 compliance.
 * 
 * FIPS127
 * 
 * FIPS-127-2 transitional compliance.
 * 
 * FULL
 * 
 * Full level SQL-92 compliance.
 * 
 * INTERMEDIATE
 * 
 * Intermediate level SQL-92 compliance.
 *
 * @param resource
 * @return object
 **/
function db2_server_info($connection) {}

/**
 * Sets options for a statement resource or a connection resource. You
 * cannot set options for result set resources.
 *
 * @param resource
 * @param array
 * @param int
 * @return bool
 **/
function db2_set_option($resource, $options, $type) {}

/**
 * Returns a result set listing the unique row identifier columns for a
 * table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function db2_special_columns($connection, $qualifier, $schema, $table_name, $scope) {}

/**
 * Returns a result set listing the index and statistics for a table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return resource
 **/
function db2_statistics($connection, $qualifier, $schema, $tablename, $unique) {}

/**
 * Returns a string containing the SQLSTATE value returned by an SQL
 * statement.
 * 
 * If you do not pass a statement resource as an argument to
 * db2_stmt_error, the driver returns the SQLSTATE value associated with
 * the last attempt to return a statement resource, for example, from
 * db2_prepare or db2_exec.
 * 
 * To learn what the SQLSTATE value means, you can issue the following
 * command at a DB2 Command Line Processor prompt: db2 '?
 * sqlstate-value'. You can also call db2_stmt_errormsg to retrieve an
 * explicit error message and the associated SQLCODE value.
 *
 * @param resource
 * @return string
 **/
function db2_stmt_error($stmt) {}

/**
 * Returns a string containing the last SQL statement error message.
 * 
 * If you do not pass a statement resource as an argument to
 * db2_stmt_errormsg, the driver returns the error message associated
 * with the last attempt to return a statement resource, for example,
 * from db2_prepare or db2_exec.
 *
 * @param resource
 * @return string
 **/
function db2_stmt_errormsg($stmt) {}

/**
 * Returns a result set listing the tables and associated metadata in a
 * database.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_tables($connection, $qualifier, $schema, $tablename, $tabletype) {}

/**
 * Returns a result set listing the tables and associated privileges in a
 * database.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function db2_table_privileges($connection, $qualifier, $schema, $table_name) {}

/**
 * Adds the given data to the database.
 *
 * @param int
 * @param array
 * @return bool
 **/
function dbase_add_record($dbase_identifier, $record) {}

/**
 * Closes the given database link identifier.
 *
 * @param int
 * @return bool
 **/
function dbase_close($dbase_identifier) {}

/**
 * dbase_create creates a dBase database with the given definition.
 *
 * @param string
 * @param array
 * @return int
 **/
function dbase_create($filename, $fields) {}

/**
 * Marks the given record to be deleted from the database.
 *
 * @param int
 * @param int
 * @return bool
 **/
function dbase_delete_record($dbase_identifier, $record_number) {}

/**
 * Returns information on the column structure of the given database link
 * identifier.
 *
 * @param int
 * @return array
 **/
function dbase_get_header_info($dbase_identifier) {}

/**
 * Gets a record from a database as an indexed array.
 *
 * @param int
 * @param int
 * @return array
 **/
function dbase_get_record($dbase_identifier, $record_number) {}

/**
 * Gets a record from a dBase database as an associative array.
 *
 * @param int
 * @param int
 * @return array
 **/
function dbase_get_record_with_names($dbase_identifier, $record_number) {}

/**
 * Gets the number of fields (columns) in the specified database.
 *
 * @param int
 * @return int
 **/
function dbase_numfields($dbase_identifier) {}

/**
 * Gets the number of records (rows) in the specified database.
 *
 * @param int
 * @return int
 **/
function dbase_numrecords($dbase_identifier) {}

/**
 * dbase_open opens a dBase database with the given access mode.
 *
 * @param string
 * @param int
 * @return int
 **/
function dbase_open($filename, $mode) {}

/**
 * Packs the specified database by permanently deleting all records
 * marked for deletion using dbase_delete_record.
 *
 * @param int
 * @return bool
 **/
function dbase_pack($dbase_identifier) {}

/**
 * Replaces the given record in the database with the given data.
 *
 * @param int
 * @param array
 * @param int
 * @return bool
 **/
function dbase_replace_record($dbase_identifier, $record, $record_number) {}

/**
 * dba_close closes the established database and frees all resources of
 * the specified database handle.
 *
 * @param resource
 * @return void
 **/
function dba_close($handle) {}

/**
 * dba_delete deletes the specified entry from the database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function dba_delete($key, $handle) {}

/**
 * dba_exists checks whether the specified key exists in the database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function dba_exists($key, $handle) {}

/**
 * dba_fetch fetches the data specified by key from the database
 * specified with handle.
 *
 * @param string
 * @param resource
 * @return string
 **/
function dba_fetch($key, $handle) {}

/**
 * dba_firstkey returns the first key of the database and resets the
 * internal key pointer. This permits a linear search through the whole
 * database.
 *
 * @param resource
 * @return string
 **/
function dba_firstkey($handle) {}

/**
 * dba_handlers list all the handlers supported by this extension.
 *
 * @param bool
 * @return array
 **/
function dba_handlers($full_info) {}

/**
 * dba_insert inserts the entry described with key and value into the
 * database.
 *
 * @param string
 * @param string
 * @param resource
 * @return bool
 **/
function dba_insert($key, $value, $handle) {}

/**
 * dba_key_split splits a key (string representation) into an array
 * representation.
 *
 * @param mixed
 * @return mixed
 **/
function dba_key_split($key) {}

/**
 * dba_list list all open database files.
 *
 * @return array
 **/
function dba_list() {}

/**
 * dba_nextkey returns the next key of the database and advances the
 * internal key pointer.
 *
 * @param resource
 * @return string
 **/
function dba_nextkey($handle) {}

/**
 * dba_open establishes a database instance for path with mode using
 * handler.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function dba_open($path, $mode, $handler) {}

/**
 * dba_optimize optimizes the underlying database.
 *
 * @param resource
 * @return bool
 **/
function dba_optimize($handle) {}

/**
 * dba_popen establishes a persistent database instance for path with
 * mode using handler.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function dba_popen($path, $mode, $handler) {}

/**
 * dba_replace replaces or inserts the entry described with key and value
 * into the database specified by handle.
 *
 * @param string
 * @param string
 * @param resource
 * @return bool
 **/
function dba_replace($key, $value, $handle) {}

/**
 * dba_sync synchronizes the database. This will probably trigger a
 * physical write to the disk, if supported.
 *
 * @param resource
 * @return bool
 **/
function dba_sync($handle) {}

/**
 * Adds a tuple to a relation.
 *
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_add($relation, $tuple) {}

/**
 * Executes an AQL query on the given server and dbpath.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function dbplus_aql($query, $server, $dbpath) {}

/**
 * Changes the virtual current directory where relation files will be
 * looked for by dbplus_open.
 *
 * @param string
 * @return string
 **/
function dbplus_chdir($newdir) {}

/**
 * Closes a relation previously opened by dbplus_open.
 *
 * @param resource
 * @return mixed
 **/
function dbplus_close($relation) {}

/**
 * Reads the data for the current tuple for the given relation.
 *
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_curr($relation, &$tuple) {}

/**
 * Returns a clear error string for the given error code.
 *
 * @param int
 * @return string
 **/
function dbplus_errcode($errno) {}

/**
 * Returns the error code returned by the last db++ operation.
 *
 * @return int
 **/
function dbplus_errno() {}

/**
 * Places a constraint on the given relation.
 * 
 * Further calls to functions like dbplus_curr or dbplus_next will only
 * return tuples matching the given constraints.
 *
 * @param resource
 * @param array
 * @param mixed
 * @return int
 **/
function dbplus_find($relation, $constraints, $tuple) {}

/**
 * Reads the data for the first tuple for the given relation, makes it
 * the current tuple and pass it back as an associative array in tuple.
 *
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_first($relation, &$tuple) {}

/**
 * Writes all changes applied to relation since the last flush to disk.
 *
 * @param resource
 * @return int
 **/
function dbplus_flush($relation) {}

/**
 * Frees all tuple locks held by this client.
 *
 * @return int
 **/
function dbplus_freealllocks() {}

/**
 * Releases a write lock on the given tuple previously obtained by
 * dbplus_getlock.
 *
 * @param resource
 * @param string
 * @return int
 **/
function dbplus_freelock($relation, $tuple) {}

/**
 * Frees all tuple locks held on the given relation.
 *
 * @param resource
 * @return int
 **/
function dbplus_freerlocks($relation) {}

/**
 * Requests a write lock on the specified tuple.
 *
 * @param resource
 * @param string
 * @return int
 **/
function dbplus_getlock($relation, $tuple) {}

/**
 * Obtains a number guaranteed to be unique for the given relation and
 * will pass it back in the variable given as uniqueid.
 *
 * @param resource
 * @param int
 * @return int
 **/
function dbplus_getunique($relation, $uniqueid) {}

/**
 * @param resource
 * @param string
 * @param array
 * @return int
 **/
function dbplus_info($relation, $key, &$result) {}

/**
 * Reads the data for the last tuple for the given relation, makes it the
 * current tuple and pass it back as an associative array in tuple.
 *
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_last($relation, &$tuple) {}

/**
 * Requests a write lock on the given relation.
 * 
 * Other clients may still query the relation, but can't alter it while
 * it is locked.
 *
 * @param resource
 * @return int
 **/
function dbplus_lockrel($relation) {}

/**
 * Reads the data for the next tuple for the given relation, makes it the
 * current tuple and will pass it back as an associative array in tuple.
 *
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_next($relation, &$tuple) {}

/**
 * Opens the given relation file.
 *
 * @param string
 * @return resource
 **/
function dbplus_open($name) {}

/**
 * Reads the data for the previous tuple for the given relation, makes it
 * the current tuple and will pass it back as an associative array in
 * tuple.
 *
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_prev($relation, &$tuple) {}

/**
 * Changes access permissions as specified by mask, user and group. The
 * values for these are operating system specific.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function dbplus_rchperm($relation, $mask, $user, $group) {}

/**
 * Creates a new relation. Any existing relation sharing the same name
 * will be overwritten if the relation is currently not in use and
 * overwrite is set to TRUE.
 *
 * @param string
 * @param mixed
 * @param bool
 * @return resource
 **/
function dbplus_rcreate($name, $domlist, $overwrite) {}

/**
 * dbplus_rcrtexact will create an exact but empty copy of the given
 * relation under a new name.
 *
 * @param string
 * @param resource
 * @param bool
 * @return mixed
 **/
function dbplus_rcrtexact($name, $relation, $overwrite) {}

/**
 * dbplus_rcrtexact will create an empty copy of the given relation under
 * a new name, but with default indices.
 *
 * @param string
 * @param resource
 * @param int
 * @return mixed
 **/
function dbplus_rcrtlike($name, $relation, $overwrite) {}

/**
 * dbplus_resolve will try to resolve the given relation_name and find
 * out internal server id, real hostname and the database path on this
 * host.
 *
 * @param string
 * @return array
 **/
function dbplus_resolve($relation_name) {}

/**
 * @param resource
 * @param array
 * @return int
 **/
function dbplus_restorepos($relation, $tuple) {}

/**
 * dbplus_rkeys will replace the current primary key for relation with
 * the combination of domains specified by domlist.
 *
 * @param resource
 * @param mixed
 * @return mixed
 **/
function dbplus_rkeys($relation, $domlist) {}

/**
 * dbplus_ropen will open the relation file locally for quick access
 * without any client/server overhead. Access is read only and only
 * dbplus_curr and dbplus_next may be applied to the returned relation.
 *
 * @param string
 * @return resource
 **/
function dbplus_ropen($name) {}

/**
 * dbplus_rquery performs a local (raw) AQL query using an AQL
 * interpreter embedded into the db++ client library. dbplus_rquery is
 * faster than dbplus_aql but will work on local data only.
 *
 * @param string
 * @param string
 * @return resource
 **/
function dbplus_rquery($query, $dbpath) {}

/**
 * dbplus_rrename will change the name of relation to name.
 *
 * @param resource
 * @param string
 * @return int
 **/
function dbplus_rrename($relation, $name) {}

/**
 * dbplus_rsecindex will create a new secondary index for relation with
 * consists of the domains specified by domlist and is of type type
 *
 * @param resource
 * @param mixed
 * @param int
 * @return mixed
 **/
function dbplus_rsecindex($relation, $domlist, $type) {}

/**
 * dbplus_runlink will close and remove the relation.
 *
 * @param resource
 * @return int
 **/
function dbplus_runlink($relation) {}

/**
 * dbplus_rzap will remove all tuples from relation.
 *
 * @param resource
 * @return int
 **/
function dbplus_rzap($relation) {}

/**
 * @param resource
 * @return int
 **/
function dbplus_savepos($relation) {}

/**
 * @param resource
 * @param string
 * @return int
 **/
function dbplus_setindex($relation, $idx_name) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function dbplus_setindexbynumber($relation, $idx_number) {}

/**
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function dbplus_sql($query, $server, $dbpath) {}

/**
 * A db++ server will prepare a TCL interpreter for each client
 * connection. This interpreter will enable the server to execute TCL
 * code provided by the client as a sort of stored procedures to improve
 * the performance of database operations by avoiding client/server data
 * transfers and context switches.
 * 
 * dbplus_tcl needs to pass the client connection id the TCL script code
 * should be executed by. dbplus_resolve will provide this connection id.
 * The function will return whatever the TCL code returns or a TCL error
 * message if the TCL code fails.
 *
 * @param int
 * @param string
 * @return string
 **/
function dbplus_tcl($sid, $script) {}

/**
 * dbplus_tremove removes tuple from relation if it perfectly matches a
 * tuple within the relation. current, if given, will contain the data of
 * the new current tuple after calling dbplus_tremove.
 *
 * @param resource
 * @param array
 * @param array
 * @return int
 **/
function dbplus_tremove($relation, $tuple, &$current) {}

/**
 * @param resource
 * @return int
 **/
function dbplus_undo($relation) {}

/**
 * @param resource
 * @return int
 **/
function dbplus_undoprepare($relation) {}

/**
 * Release a write lock previously obtained by dbplus_lockrel.
 *
 * @param resource
 * @return int
 **/
function dbplus_unlockrel($relation) {}

/**
 * Calling dbplus_unselect will remove a constraint previously set by
 * dbplus_find on relation.
 *
 * @param resource
 * @return int
 **/
function dbplus_unselect($relation) {}

/**
 * dbplus_update replaces the old tuple with the data from the new one,
 * only if the old completely matches a tuple within relation.
 *
 * @param resource
 * @param array
 * @param array
 * @return int
 **/
function dbplus_update($relation, $old, $new) {}

/**
 * Request an exclusive lock on relation preventing even read access from
 * other clients.
 *
 * @param resource
 * @return int
 **/
function dbplus_xlockrel($relation) {}

/**
 * Releases an exclusive lock previously obtained by dbplus_xlockrel.
 *
 * @param resource
 * @return int
 **/
function dbplus_xunlockrel($relation) {}

/**
 * @param object
 * @return int
 **/
function dbx_close($link_identifier) {}

/**
 * dbx_compare is a helper function for dbx_sort to ease the make and use
 * of the custom sorting function.
 *
 * @param array
 * @param array
 * @param string
 * @param int
 * @return int
 **/
function dbx_compare($row_a, $row_b, $column_key, $flags) {}

/**
 * Opens a connection to a database.
 *
 * @param mixed
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return object
 **/
function dbx_connect($module, $host, $database, $username, $password, $persistent) {}

/**
 * dbx_error returns the last error message.
 *
 * @param object
 * @return string
 **/
function dbx_error($link_identifier) {}

/**
 * Escape the given string so that it can safely be used in an
 * sql-statement.
 *
 * @param object
 * @param string
 * @return string
 **/
function dbx_escape_string($link_identifier, $text) {}

/**
 * dbx_fetch_row fetches rows from a result identifier that had the
 * DBX_RESULT_UNBUFFERED flag set.
 * 
 * When the DBX_RESULT_UNBUFFERED is not set in the query, dbx_fetch_row
 * will fail as all rows have already been fetched into the results data
 * property.
 * 
 * As a side effect, the rows property of the query-result object is
 * incremented for each successful call to dbx_fetch_row.
 *
 * @param object
 * @return mixed
 **/
function dbx_fetch_row($result_identifier) {}

/**
 * Sends a query and fetch all results.
 *
 * @param object
 * @param string
 * @param int
 * @return mixed
 **/
function dbx_query($link_identifier, $sql_statement, $flags) {}

/**
 * Sort a result from a dbx_query call with a custom sort function.
 *
 * @param object
 * @param string
 * @return bool
 **/
function dbx_sort($result, $user_compare_function) {}

/**
 * This function allows you to override the current domain for a single
 * message lookup.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function dcgettext($domain, $message, $category) {}

/**
 * This function allows you to override the current domain for a single
 * plural message lookup.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function dcngettext($domain, $msgid1, $msgid2, $n, $category) {}

/**
 * Removes the methods and properties from classes that were aggregated
 * to an object.
 *
 * @param object
 * @param string
 * @return void
 **/
function deaggregate($object, $class_name) {}

/**
 * debug_backtrace generates a PHP backtrace.
 *
 * @param bool
 * @return array
 **/
function debug_backtrace($provide_object) {}

/**
 * debug_print_backtrace prints a PHP backtrace. It prints the function
 * calls, included/required files and evaled stuff.
 *
 * @return void
 **/
function debug_print_backtrace() {}

/**
 * Dumps a string representation of an internal zend value to output.
 *
 * @param mixed
 * @return void
 **/
function debug_zval_dump($variable) {}

/**
 * Returns a string containing a binary representation of the given
 * number argument.
 *
 * @param int
 * @return string
 **/
function decbin($number) {}

/**
 * Returns a string containing a hexadecimal representation of the given
 * number argument. The largest number that can be converted is
 * 4294967295 in decimal resulting to "ffffffff".
 *
 * @param int
 * @return string
 **/
function dechex($number) {}

/**
 * Returns a string containing an octal representation of the given
 * number argument. The largest number that can be converted is
 * 4294967295 in decimal resulting to "37777777777".
 *
 * @param int
 * @return string
 **/
function decoct($number) {}

/**
 * Defines a named constant at runtime.
 *
 * @param string
 * @param mixed
 * @param bool
 * @return bool
 **/
function define($name, $value, $case_insensitive) {}

/**
 * Checks whether the given constant exists and is defined.
 *
 * @param string
 * @return bool
 **/
function defined($name) {}

/**
 * Initializes all variables used in the syslog functions.
 *
 * @return void
 **/
function define_syslog_variables() {}

/**
 * This function converts number from degrees to the radian equivalent.
 *
 * @param float
 * @return float
 **/
function deg2rad($number) {}

/**
 * The dgettext function allows you to override the current domain for a
 * single message lookup.
 *
 * @param string
 * @param string
 * @return string
 **/
function dgettext($domain, $message) {}

/**
 * The function dio_close closes the file descriptor fd.
 *
 * @param resource
 * @return void
 **/
function dio_close($fd) {}

/**
 * The dio_fcntl function performs the operation specified by cmd on the
 * file descriptor fd. Some commands require additional arguments args to
 * be supplied.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return mixed
 **/
function dio_fcntl($fd, $cmd, $args) {}

/**
 * dio_open opens a file and returns a new file descriptor for it.
 *
 * @param string
 * @param int
 * @param int
 * @return resource
 **/
function dio_open($filename, $flags, $mode) {}

/**
 * The function dio_read reads and returns len bytes from file with
 * descriptor fd.
 *
 * @param resource
 * @param int
 * @return string
 **/
function dio_read($fd, $len) {}

/**
 * The function dio_seek is used to change the file position of the given
 * file descriptor.
 *
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function dio_seek($fd, $pos, $whence) {}

/**
 * dio_stat returns information about the given file descriptor.
 *
 * @param resource
 * @return array
 **/
function dio_stat($fd) {}

/**
 * dio_tcsetattr sets the terminal attributes and baud rate of the open
 * fd.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function dio_tcsetattr($fd, $options) {}

/**
 * dio_truncate truncates a file to at most offset bytes in size.
 * 
 * If the file previously was larger than this size, the extra data is
 * lost. If the file previously was shorter, it is unspecified whether
 * the file is left unchanged or is extended. In the latter case the
 * extended part reads as zero bytes.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function dio_truncate($fd, $offset) {}

/**
 * dio_write writes up to len bytes from data to file fd.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function dio_write($fd, $data, $len) {}

/**
 * Return an instance of the Directory class
 *
 * @param string
 * @return Directory
 **/
function dir($path) {}

/**
 * Given a string containing a path to a file, this function will return
 * the name of the directory.
 *
 * @param string
 * @return string
 **/
function dirname($path) {}

/**
 * Given a string containing a directory, this function will return the
 * number of bytes available on the corresponding filesystem or disk
 * partition.
 *
 * @param string
 * @return float
 **/
function diskfreespace($directory) {}

/**
 * Given a string containing a directory, this function will return the
 * number of bytes available on the corresponding filesystem or disk
 * partition.
 *
 * @param string
 * @return float
 **/
function disk_free_space($directory) {}

/**
 * Given a string containing a directory, this function will return the
 * total number of bytes on the corresponding filesystem or disk
 * partition.
 *
 * @param string
 * @return float
 **/
function disk_total_space($directory) {}

/**
 * Loads the PHP extension given by the parameter library.
 * 
 * Use extension_loaded to test whether a given extension is already
 * available or not. This works on both built-in extensions and
 * dynamically loaded ones (either through or dl).
 *
 * @param string
 * @return int
 **/
function dl($library) {}

/**
 * The dngettext function allows you to override the current domain for a
 * single plural message lookup.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function dngettext($domain, $msgid1, $msgid2, $n) {}

/**
 * Searches DNS for records of type type corresponding to host.
 *
 * @param string
 * @param string
 * @return bool
 **/
function dns_check_record($host, $type) {}

/**
 * Searches DNS for MX records corresponding to hostname.
 *
 * @param string
 * @param array
 * @param array
 * @return bool
 **/
function dns_get_mx($hostname, &$mxhosts, &$weight) {}

/**
 * Fetch DNS Resource Records associated with the given hostname.
 *
 * @param string
 * @param int
 * @param array
 * @param array
 * @return array
 **/
function dns_get_record($hostname, $type, &$authns, &$addtl) {}

/**
 * Creates a new Dom document from scratch and returns it.
 *
 * @param string
 * @return DomDocument
 **/
function domxml_new_doc($version) {}

/**
 * The function parses the XML document in the given file.
 *
 * @param string
 * @param int
 * @param array
 * @return DomDocument
 **/
function domxml_open_file($filename, $mode, &$error) {}

/**
 * The function parses the XML document in the given string.
 *
 * @param string
 * @param int
 * @param array
 * @return DomDocument
 **/
function domxml_open_mem($str, $mode, &$error) {}

/**
 * Gets the version of the XML library currently used.
 *
 * @return string
 **/
function domxml_version() {}

/**
 * The function parses the XML document in str and returns a tree PHP
 * objects as the parsed document.
 * 
 * This function is isolated from the other functions, which means you
 * cannot access the tree with any of the other functions. Modifying it,
 * for example by adding nodes, makes no sense since there is currently
 * no way to dump it as an XML file.
 * 
 * However this function may be valuable if you want to read a file and
 * investigate the content.
 *
 * @param string
 * @return DomDocument
 **/
function domxml_xmltree($str) {}

/**
 * Creates a DomXsltStylesheet object from the given XSL buffer.
 *
 * @param string
 * @return DomXsltStylesheet
 **/
function domxml_xslt_stylesheet($xsl_buf) {}

/**
 * Creates a DomXsltStylesheet object from the given XSL document.
 *
 * @param DomDocument
 * @return DomXsltStylesheet
 **/
function domxml_xslt_stylesheet_doc($xsl_doc) {}

/**
 * Creates a DomXsltStylesheet object from the given XSL file.
 *
 * @param string
 * @return DomXsltStylesheet
 **/
function domxml_xslt_stylesheet_file($xsl_file) {}

/**
 * Gets the XSLT library version.
 *
 * @return int
 **/
function domxml_xslt_version() {}

/**
 * This function takes the node node of class SimpleXML and makes it into
 * a DOMElement node. This new object can then be used as a native
 * DOMElement node.
 *
 * @param SimpleXMLElement
 * @return DOMElement
 **/
function dom_import_simplexml($node) {}

/**
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function dotnet_load($assembly_name, $datatype_name, $codepage) {}

/**
 * Gets the float value of var.
 *
 * @param mixed
 * @return float
 **/
function doubleval($var) {}

/**
 * Return the current key and value pair from an array and advance the
 * array cursor.
 * 
 * After each has executed, the array cursor will be left on the next
 * element of the array, or past the last element if it hits the end of
 * the array. You have to use reset if you want to traverse the array
 * again using each.
 *
 * @param array
 * @return array
 **/
function each(&$array) {}

/**
 * Returns the Unix timestamp corresponding to midnight on Easter of the
 * given year.
 * 
 * The date of Easter Day was defined by the Council of Nicaea in AD325
 * as the Sunday after the first full moon which falls on or after the
 * Spring Equinox. The Equinox is assumed to always fall on 21st March,
 * so the calculation reduces to determining the date of the full moon
 * and the date of the following Sunday. The algorithm used here was
 * introduced around the year 532 by Dionysius Exiguus. Under the Julian
 * Calendar (for years before 1753) a simple 19-year cycle is used to
 * track the phases of the Moon. Under the Gregorian Calendar (for years
 * after 1753 - devised by Clavius and Lilius, and introduced by Pope
 * Gregory XIII in October 1582, and into Britain and its then colonies
 * in September 1752) two correction factors are added to make the cycle
 * more accurate.
 * 
 * (The code is based on a C program by Simon Kershaw, webmaster at
 * ely.anglican dot org)
 *
 * @param int
 * @return int
 **/
function easter_date($year) {}

/**
 * Returns the number of days after March 21 on which Easter falls for a
 * given year. If no year is specified, the current year is assumed.
 * 
 * This function can be used instead of easter_date to calculate Easter
 * for years which fall outside the range of Unix timestamps (i.e. before
 * 1970 or after 2037).
 * 
 * The date of Easter Day was defined by the Council of Nicaea in AD325
 * as the Sunday after the first full moon which falls on or after the
 * Spring Equinox. The Equinox is assumed to always fall on 21st March,
 * so the calculation reduces to determining the date of the full moon
 * and the date of the following Sunday. The algorithm used here was
 * introduced around the year 532 by Dionysius Exiguus. Under the Julian
 * Calendar (for years before 1753) a simple 19-year cycle is used to
 * track the phases of the Moon. Under the Gregorian Calendar (for years
 * after 1753 - devised by Clavius and Lilius, and introduced by Pope
 * Gregory XIII in October 1582, and into Britain and its then colonies
 * in September 1752) two correction factors are added to make the cycle
 * more accurate.
 * 
 * (The code is based on a C program by Simon Kershaw, webmaster at
 * ely.anglican dot org)
 *
 * @param int
 * @param int
 * @return int
 **/
function easter_days($year, $method) {}

/**
 * ebcdic2ascii is an Apache-specific function which is available only on
 * EBCDIC based operating systems (OS/390, BS2000). It translates the
 * EBCDIC encoded string ebcdic_str to its equivalent ASCII
 * representation (binary safe), and returns the result.
 *
 * @param string
 * @return int
 **/
function ebcdic2ascii($ebcdic_str) {}

/**
 * Enumerates the Enchant providers and tells you some rudimentary
 * information about them. The same info is provided through phpinfo().
 *
 * @param resource
 * @return array
 **/
function enchant_broker_describe($broker) {}

/**
 * Tells if a dictionary exists or not, using a non-empty tags
 *
 * @param resource
 * @param string
 * @return bool
 **/
function enchant_broker_dict_exists($broker, $tag) {}

/**
 * Free a broker resource with all its dictionaries.
 *
 * @param resource
 * @return bool
 **/
function enchant_broker_free($broker) {}

/**
 * Free a dictionary resource.
 *
 * @param resource
 * @return bool
 **/
function enchant_broker_free_dict($dict) {}

/**
 * Returns the last error which occurred in this broker.
 *
 * @param resource
 * @return string
 **/
function enchant_broker_get_error($broker) {}

/**
 * @return resource
 **/
function enchant_broker_init() {}

/**
 * Returns a list of available dictionaries with their details.
 *
 * @param resource
 * @return mixed
 **/
function enchant_broker_list_dicts($broker) {}

/**
 * create a new dictionary using tag, the non-empty language tag you wish
 * to request a dictionary for ("en_US", "de_DE", ...)
 *
 * @param resource
 * @param string
 * @return resource
 **/
function enchant_broker_request_dict($broker, $tag) {}

/**
 * Creates a dictionary using a PWL file. A PWL file is personal word
 * file one word per line.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function enchant_broker_request_pwl_dict($broker, $filename) {}

/**
 * Declares a preference of dictionaries to use for the language
 * described/referred to by 'tag'. The ordering is a comma delimited list
 * of provider names. As a special exception, the "*" tag can be used as
 * a language tag to declare a default ordering for any language that
 * does not explicitly declare an ordering.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function enchant_broker_set_ordering($broker, $tag, $ordering) {}

/**
 * Add a word to personal word list of the given dictionary.
 *
 * @param resource
 * @param string
 * @return void
 **/
function enchant_dict_add_to_personal($dict, $word) {}

/**
 * Add a word to the given dictionary. It will be added only for the
 * active spell-checking session.
 *
 * @param resource
 * @param string
 * @return void
 **/
function enchant_dict_add_to_session($dict, $word) {}

/**
 * If the word is correctly spelled return , otherwise return
 *
 * @param resource
 * @param string
 * @return bool
 **/
function enchant_dict_check($dict, $word) {}

/**
 * Returns the details of the dictionary.
 *
 * @param resource
 * @return mixed
 **/
function enchant_dict_describe($dict) {}

/**
 * Returns the last error of the current spelling-session
 *
 * @param resource
 * @return string
 **/
function enchant_dict_get_error($dict) {}

/**
 * Tells whether or not a word already exists in the current session.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function enchant_dict_is_in_session($dict, $word) {}

/**
 * If the word is correctly spelled return , otherwise return , if
 * suggestions variable is provided, fill it with spelling alternatives.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function enchant_dict_quick_check($dict, $word, &$suggestions) {}

/**
 * Add a correction for 'mis' using 'cor'. Notes that you replaced @mis
 * with @cor, so it's possibly more likely that future occurrences of
 * @mis will be replaced with @cor. So it might bump @cor up in the
 * suggestion list.
 *
 * @param resource
 * @param string
 * @param string
 * @return void
 **/
function enchant_dict_store_replacement($dict, $mis, $cor) {}

/**
 * @param resource
 * @param string
 * @return array
 **/
function enchant_dict_suggest($dict, $word) {}

/**
 * end advances array's internal pointer to the last element, and returns
 * its value.
 *
 * @param array
 * @return mixed
 **/
function end(&$array) {}

/**
 * @param string
 * @param string
 * @param array
 * @return int
 **/
function ereg($pattern, $string, &$regs) {}

/**
 * This function is identical to ereg except that it ignores case
 * distinction when matching alphabetic characters.
 *
 * @param string
 * @param string
 * @param array
 * @return int
 **/
function eregi($pattern, $string, &$regs) {}

/**
 * This function is identical to ereg_replace except that this ignores
 * case distinction when matching alphabetic characters.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function eregi_replace($pattern, $replacement, $string) {}

/**
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function ereg_replace($pattern, $replacement, $string) {}

/**
 * Gets information about the last error that occurred.
 *
 * @return array
 **/
function error_get_last() {}

/**
 * Sends an error message to the web server's error log, a TCP port or to
 * a file.
 *
 * @param string
 * @param int
 * @param string
 * @param string
 * @return bool
 **/
function error_log($message, $message_type, $destination, $extra_headers) {}

/**
 * The error_reporting function sets the error_reporting directive at
 * runtime. PHP has many levels of errors, using this function sets that
 * level for the duration (runtime) of your script.
 *
 * @param int
 * @return int
 **/
function error_reporting($level) {}

/**
 * escapeshellarg adds single quotes around a string and quotes/escapes
 * any existing single quotes allowing you to pass a string directly to a
 * shell function and having it be treated as a single safe argument.
 * This function should be used to escape individual arguments to shell
 * functions coming from user input. The shell functions include exec,
 * system and the backtick operator.
 *
 * @param string
 * @return string
 **/
function escapeshellarg($arg) {}

/**
 * escapeshellcmd escapes any characters in a string that might be used
 * to trick a shell command into executing arbitrary commands. This
 * function should be used to make sure that any data coming from user
 * input is escaped before this data is passed to the exec or system
 * functions, or to the backtick operator.
 * 
 * Following characters are preceded by a backslash: #;`|*?~^()[]{}$\,
 * \x0A and \xFF. ' and " are escaped only if they are not paired. In
 * Windows, all these characters plus % are replaced by a space instead.
 *
 * @param string
 * @return string
 **/
function escapeshellcmd($command) {}

/**
 * event_add schedules the execution of the event when the event
 * specified in event_set occurs or in at least the time specified by the
 * timeout argument. If timeout was not specified, not timeout is set.
 * The event must be already initalized by event_set and event_base_set
 * functions. If the event already has a timeout set, it is replaced by
 * the new one.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function event_add($event, $timeout) {}

/**
 * Destroys the specified event_base and frees all the resources
 * associated. Note that it's not possible to destroy an event base with
 * events attached to it.
 *
 * @param resource
 * @return void
 **/
function event_base_free($event_base) {}

/**
 * Starts event loop for the specified event base.
 *
 * @param resource
 * @param int
 * @return int
 **/
function event_base_loop($event_base, $flags) {}

/**
 * Abort the active event loop immediately. The behaviour is similar to
 * break statement.
 *
 * @param resource
 * @return bool
 **/
function event_base_loopbreak($event_base) {}

/**
 * The next event loop iteration after the given timer expires will
 * complete normally, then exit without blocking for events again.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function event_base_loopexit($event_base, $timeout) {}

/**
 * Returns new event base, which can be used later in event_base_set,
 * event_base_loop and other functions.
 *
 * @return resource
 **/
function event_base_new() {}

/**
 * Sets the number of different event priority levels.
 * 
 * By default all events are scheduled with the same priority
 * (npriorities/2). Using event_base_priority_init you can change the
 * number of event priority levels and then set a desired priority for
 * each event.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function event_base_priority_init($event_base, $npriorities) {}

/**
 * Associates the event_base with the event.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function event_base_set($event, $event_base) {}

/**
 * Assign the specified bevent to the event_base.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function event_buffer_base_set($bevent, $event_base) {}

/**
 * Disables the specified buffered event.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function event_buffer_disable($bevent, $events) {}

/**
 * Enables the specified buffered event.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function event_buffer_enable($bevent, $events) {}

/**
 * Changes the file descriptor on which the buffered event operates.
 *
 * @param resource
 * @param resource
 * @return void
 **/
function event_buffer_fd_set($bevent, $fd) {}

/**
 * Destroys the specified buffered event and frees all the resources
 * associated.
 *
 * @param resource
 * @return void
 **/
function event_buffer_free($bevent) {}

/**
 * Libevent provides an abstraction layer on top of the regular event
 * API. Using buffered event you don't need to deal with the I/O
 * manually, instead it provides input and output buffers that get filled
 * and drained automatically.
 *
 * @param resource
 * @param mixed
 * @param mixed
 * @param mixed
 * @param mixed
 * @return resource
 **/
function event_buffer_new($stream, $readcb, $writecb, $errorcb, $arg) {}

/**
 * Assign a priority to the bevent.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function event_buffer_priority_set($bevent, $priority) {}

/**
 * Reads data from the input buffer of the buffered event.
 *
 * @param resource
 * @param int
 * @return string
 **/
function event_buffer_read($bevent, $data_size) {}

/**
 * Sets the read and write timeouts for the specified buffered event.
 *
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function event_buffer_timeout_set($bevent, $read_timeout, $write_timeout) {}

/**
 * Sets the watermarks for read and write events. Libevent does not
 * invoke read callback unless there is at least lowmark bytes in the
 * input buffer; if the read buffer is beyond the highmark, reading is
 * stopped. On output, the write callback is invoked whenever the
 * buffered data falls below the lowmark.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function event_buffer_watermark_set($bevent, $events, $lowmark, $highmark) {}

/**
 * Writes data to the specified buffered event. The data is appended to
 * the output buffer and written to the descriptor when it becomes
 * available for writing.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function event_buffer_write($bevent, $data, $data_size) {}

/**
 * Cancels the event.
 *
 * @param resource
 * @return bool
 **/
function event_del($event) {}

/**
 * Frees previously created event resource.
 *
 * @param resource
 * @return void
 **/
function event_free($event) {}

/**
 * Creates and returns new event resource.
 *
 * @return resource
 **/
function event_new() {}

/**
 * Prepares the event to be used in event_add. The event is prepared to
 * call the function specified by the callback on the events specified in
 * parameter events, which is a set of the following flags: EV_TIMEOUT,
 * EV_SIGNAL, EV_READ and EV_WRITE.
 * 
 * After initializing the event, use event_base_set to associate the
 * event with its event base.
 * 
 * In case of matching event, these three arguments are passed to the
 * callback function:
 * 
 * fd
 * 
 * Resource indicating the stream.
 * 
 * events
 * 
 * A flag indicating the event. Can be one of the following: EV_TIMEOUT,
 * EV_SIGNAL, EV_READ or EV_WRITE.
 * 
 * arg
 * 
 * Optional parameter, previously passed to event_set as arg.
 *
 * @param resource
 * @param resource
 * @param int
 * @param mixed
 * @param mixed
 * @return bool
 **/
function event_set($event, $fd, $events, $callback, $arg) {}

/**
 * exec executes the given command.
 *
 * @param string
 * @param array
 * @param int
 * @return string
 **/
function exec($command, &$output, &$return_var) {}

/**
 * exif_imagetype reads the first bytes of an image and checks its
 * signature.
 * 
 * exif_imagetype can be used to avoid calls to other exif functions with
 * unsupported file types or in conjunction with $_SERVER['HTTP_ACCEPT']
 * to check whether or not the viewer is able to see a specific image in
 * the browser.
 *
 * @param string
 * @return int
 **/
function exif_imagetype($filename) {}

/**
 * exif_read_data reads the EXIF headers from a JPEG or TIFF image file.
 * This way you can read meta data generated by digital cameras.
 * 
 * EXIF headers tend to be present in JPEG/TIFF images generated by
 * digital cameras, but unfortunately each digital camera maker has a
 * different idea of how to actually tag their images, so you can't
 * always rely on a specific Exif header being present.
 * 
 * Height and Width are computed the same way getimagesize does so their
 * values must not be part of any header returned. Also, html is a
 * height/width text string to be used inside normal HTML.
 * 
 * When an Exif header contains a Copyright note, this itself can contain
 * two values. As the solution is inconsistent in the Exif 2.10 standard,
 * the COMPUTED section will return both entries Copyright.Photographer
 * and Copyright.Editor while the IFD0 sections contains the byte array
 * with the NULL character that splits both entries. Or just the first
 * entry if the datatype was wrong (normal behaviour of Exif). The
 * COMPUTED will also contain the entry Copyright which is either the
 * original copyright string, or a comma separated list of the photo and
 * editor copyright.
 * 
 * The tag UserComment has the same problem as the Copyright tag. It can
 * store two values. First the encoding used, and second the value
 * itself. If so the IFD section only contains the encoding or a byte
 * array. The COMPUTED section will store both in the entries
 * UserCommentEncoding and UserComment. The entry UserComment is
 * available in both cases so it should be used in preference to the
 * value in IFD0 section.
 * 
 * exif_read_data also validates EXIF data tags according to the EXIF
 * specification (, page 20).
 *
 * @param string
 * @param string
 * @param bool
 * @param bool
 * @return array
 **/
function exif_read_data($filename, $sections, $arrays, $thumbnail) {}

/**
 * @param int
 * @return string
 **/
function exif_tagname($index) {}

/**
 * exif_thumbnail reads the embedded thumbnail of a TIFF or JPEG image.
 * 
 * If you want to deliver thumbnails through this function, you should
 * send the mimetype information using the header function.
 * 
 * It is possible that exif_thumbnail cannot create an image but can
 * determine its size. In this case, the return value is but width and
 * height are set.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function exif_thumbnail($filename, &$width, &$height, &$imagetype) {}

/**
 * Returns e raised to the power of arg.
 *
 * @param float
 * @return float
 **/
function exp($arg) {}

/**
 * Waits until the output from a process matches one of the patterns, a
 * specified time period has passed, or an EOF is seen.
 * 
 * If match is provided, then it is filled with the result of search. The
 * matched string can be found in match[0]. The match substrings
 * (according to the parentheses) in the original pattern can be found in
 * match[1], match[2], and so on, up to match[9] (the limitation of
 * libexpect).
 *
 * @param resource
 * @param array
 * @param array
 * @return int
 **/
function expect_expectl($expect, $cases, &$match) {}

/**
 * Execute command via Bourne shell, and open the PTY stream to the
 * process.
 *
 * @param string
 * @return resource
 **/
function expect_popen($command) {}

/**
 * Returns an array of strings, each of which is a substring of string
 * formed by splitting it on boundaries formed by the string delimiter.
 *
 * @param string
 * @param string
 * @param int
 * @return array
 **/
function explode($delimiter, $string, $limit) {}

/**
 * expm1 returns the equivalent to 'exp(arg) - 1' computed in a way that
 * is accurate even if the value of arg is near zero, a case where 'exp
 * (arg) - 1' would be inaccurate due to subtraction of two numbers that
 * are nearly equal.
 *
 * @param float
 * @return float
 **/
function expm1($arg) {}

/**
 * Finds out whether the extension is loaded.
 *
 * @param string
 * @return bool
 **/
function extension_loaded($name) {}

/**
 * Import variables from an array into the current symbol table.
 * 
 * Checks each key to see whether it has a valid variable name. It also
 * checks for collisions with existing variables in the symbol table.
 *
 * @param array
 * @param int
 * @param string
 * @return int
 **/
function extract($var_array, $extract_type, $prefix) {}

/**
 * @param string
 * @return int
 **/
function ezmlm_hash($addr) {}

/**
 * Terminates monitoring on a resource.
 * 
 * In addition an FAMAcknowledge event occurs.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function fam_cancel_monitor($fam, $fam_monitor) {}

/**
 * Closes a connection to the FAM service.
 *
 * @param resource
 * @return void
 **/
function fam_close($fam) {}

/**
 * Requests monitoring for a collection of files within a directory.
 * 
 * A FAM event will be generated whenever the status of the files change.
 * The possible event codes are described in detail in the constants part
 * of this section.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function fam_monitor_collection($fam, $dirname, $depth, $mask) {}

/**
 * Requests monitoring for a directory and all contained files.
 * 
 * A FAM event will be generated whenever the status of the directory
 * (i.e. the result of function stat on that directory) or its content
 * (i.e. the results of readdir) changes.
 * 
 * The possible event codes are described in detail in the constants part
 * of this section.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function fam_monitor_directory($fam, $dirname) {}

/**
 * Requests monitoring for a single file. A FAM event will be generated
 * whenever the file status changes (i.e. the result of function stat on
 * that file).
 * 
 * The possible event codes are described in detail in the constants part
 * of this section.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function fam_monitor_file($fam, $filename) {}

/**
 * Returns the next pending FAM event.
 * 
 * The function will block until an event is available which can be
 * checked for using fam_pending.
 *
 * @param resource
 * @return array
 **/
function fam_next_event($fam) {}

/**
 * Opens a connection to the FAM service daemon.
 *
 * @param string
 * @return resource
 **/
function fam_open($appname) {}

/**
 * Checks for pending FAM events.
 *
 * @param resource
 * @return int
 **/
function fam_pending($fam) {}

/**
 * Resumes monitoring of a resource previously suspended using
 * fam_suspend_monitor.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function fam_resume_monitor($fam, $fam_monitor) {}

/**
 * fam_suspend_monitor temporarily suspend monitoring of a resource.
 * 
 * Monitoring can later be continued using fam_resume_monitor without the
 * need of requesting a complete new monitor.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function fam_suspend_monitor($fam, $fam_monitor) {}

/**
 * fbsql_affected_rows returns the number of rows affected by the last
 * INSERT, UPDATE or DELETE query associated with link_identifier.
 * 
 * If the last query was a DELETE query with no WHERE clause, all of the
 * records will have been deleted from the table but this function will
 * return zero.
 *
 * @param resource
 * @return int
 **/
function fbsql_affected_rows($link_identifier) {}

/**
 * Returns the current autocommit status.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function fbsql_autocommit($link_identifier, $OnOff) {}

/**
 * Returns the size of the given BLOB.
 *
 * @param string
 * @param resource
 * @return int
 **/
function fbsql_blob_size($blob_handle, $link_identifier) {}

/**
 * fbsql_change_user changes the logged in user of the specified
 * connection. If the new user and password authorization fails, the
 * current connected user stays active.
 *
 * @param string
 * @param string
 * @param string
 * @param resource
 * @return bool
 **/
function fbsql_change_user($user, $password, $database, $link_identifier) {}

/**
 * Returns the size of the given CLOB.
 *
 * @param string
 * @param resource
 * @return int
 **/
function fbsql_clob_size($clob_handle, $link_identifier) {}

/**
 * Closes the connection to the FrontBase server that's associated with
 * the specified link identifier.
 * 
 * Using fbsql_close isn't usually necessary, as non-persistent open
 * links are automatically closed at the end of the script's execution.
 *
 * @param resource
 * @return bool
 **/
function fbsql_close($link_identifier) {}

/**
 * Ends the current transaction by writing all inserts, updates and
 * deletes to the disk and unlocking all row and table locks held by the
 * transaction. This command is only needed if autocommit is set to
 * false.
 *
 * @param resource
 * @return bool
 **/
function fbsql_commit($link_identifier) {}

/**
 * fbsql_connect establishes a connection to a FrontBase server.
 * 
 * If a second call is made to fbsql_connect with the same arguments, no
 * new link will be established, but instead, the link identifier of the
 * already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling
 * fbsql_close.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function fbsql_connect($hostname, $username, $password) {}

/**
 * Creates a BLOB from the given data.
 *
 * @param string
 * @param resource
 * @return string
 **/
function fbsql_create_blob($blob_data, $link_identifier) {}

/**
 * Creates a CLOB from the given data.
 *
 * @param string
 * @param resource
 * @return string
 **/
function fbsql_create_clob($clob_data, $link_identifier) {}

/**
 * Attempts to create a new database on the specified server.
 *
 * @param string
 * @param resource
 * @param string
 * @return bool
 **/
function fbsql_create_db($database_name, $link_identifier, $database_options) {}

/**
 * Get or set the database name used with the connection.
 *
 * @param resource
 * @param string
 * @return string
 **/
function fbsql_database($link_identifier, $database) {}

/**
 * Sets and retrieves the database password used by the connection. If a
 * database is protected by a database password, the user must call this
 * function before calling fbsql_select_db.
 * 
 * If no link is open, the function will try to establish a link as if
 * fbsql_connect was called, and use it.
 * 
 * This function does not change the database password in the database
 * nor can it be used to retrieve the database password for a database.
 *
 * @param resource
 * @param string
 * @return string
 **/
function fbsql_database_password($link_identifier, $database_password) {}

/**
 * Moves the internal row pointer of the FrontBase result associated with
 * the specified result identifier to point to the specified row number.
 * 
 * The next call to fbsql_fetch_row would return that row.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function fbsql_data_seek($result, $row_number) {}

/**
 * Selects a database and executes a query on it.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function fbsql_db_query($database, $query, $link_identifier) {}

/**
 * Gets the current status of the specified database.
 *
 * @param string
 * @param resource
 * @return int
 **/
function fbsql_db_status($database_name, $link_identifier) {}

/**
 * fbsql_drop_db attempts to drop (remove) an entire database from the
 * server associated with the specified link identifier.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function fbsql_drop_db($database_name, $link_identifier) {}

/**
 * Returns the numerical value of the error message from previous
 * FrontBase operation.
 * 
 * Errors coming back from the fbsql database backend don't issue
 * warnings. Instead, use fbsql_errno to retrieve the error code. Note
 * that this function only returns the error code from the most recently
 * executed fbsql function (not including fbsql_error and fbsql_errno),
 * so if you want to use it, make sure you check the value before calling
 * another fbsql function.
 *
 * @param resource
 * @return int
 **/
function fbsql_errno($link_identifier) {}

/**
 * Returns the error message from previous FrontBase operation.
 * 
 * Errors coming back from the fbsql database backend don't issue
 * warnings. Instead, use fbsql_error to retrieve the error text. Note
 * that this function only returns the error code from the most recently
 * executed fbsql function (not including fbsql_error and fbsql_errno),
 * so if you want to use it, make sure you check the value before calling
 * another fbsql function.
 *
 * @param resource
 * @return string
 **/
function fbsql_error($link_identifier) {}

/**
 * fbsql_fetch_array is a combination of fbsql_fetch_row and
 * fbsql_fetch_assoc.
 * 
 * An important thing to note is that using fbsql_fetch_array is NOT
 * significantly slower than using fbsql_fetch_row, while it provides a
 * significant added value.
 *
 * @param resource
 * @param int
 * @return array
 **/
function fbsql_fetch_array($result, $result_type) {}

/**
 * Calling fbsql_fetch_assoc is equivalent to calling fbsql_fetch_array
 * with FBSQL_ASSOC as second parameter. It only returns an associative
 * array.
 * 
 * This is the way fbsql_fetch_array originally worked. If you need the
 * numeric indices as well as the associative, use fbsql_fetch_array.
 * 
 * An important thing to note is that using fbsql_fetch_assoc is NOT
 * significantly slower than using fbsql_fetch_row, while it provides a
 * significant added value.
 *
 * @param resource
 * @return array
 **/
function fbsql_fetch_assoc($result) {}

/**
 * Used in order to obtain information about fields in a certain query
 * result.
 *
 * @param resource
 * @param int
 * @return object
 **/
function fbsql_fetch_field($result, $field_offset) {}

/**
 * Stores the lengths of each result column in the last row returned by
 * fbsql_fetch_row, fbsql_fetch_array and fbsql_fetch_object in an array.
 *
 * @param resource
 * @return array
 **/
function fbsql_fetch_lengths($result) {}

/**
 * fbsql_fetch_object is similar to fbsql_fetch_array, with one
 * difference - an object is returned, instead of an array. Indirectly,
 * that means that you can only access the data by the field names, and
 * not by their offsets (numbers are illegal property names).
 * 
 * Speed-wise, the function is identical to fbsql_fetch_array, and almost
 * as quick as fbsql_fetch_row (the difference is insignificant).
 *
 * @param resource
 * @return object
 **/
function fbsql_fetch_object($result) {}

/**
 * fbsql_fetch_row fetches one row of data from the result associated
 * with the specified result identifier.
 * 
 * Subsequent call to fbsql_fetch_row would return the next row in the
 * result set, or if there are no more rows.
 *
 * @param resource
 * @return array
 **/
function fbsql_fetch_row($result) {}

/**
 * Gets the flags associated with the specified field in a result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fbsql_field_flags($result, $field_offset) {}

/**
 * Returns the length of the specified field.
 *
 * @param resource
 * @param int
 * @return int
 **/
function fbsql_field_len($result, $field_offset) {}

/**
 * Returns the name of the specified field index.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fbsql_field_name($result, $field_index) {}

/**
 * Seeks to the specified field offset. If the next call to
 * fbsql_fetch_field doesn't include a field offset, the field offset
 * specified in fbsql_field_seek will be returned.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function fbsql_field_seek($result, $field_offset) {}

/**
 * Returns the name of the table that the specified field is in.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fbsql_field_table($result, $field_offset) {}

/**
 * fbsql_field_type is similar to the fbsql_field_name function, but the
 * field type is returned instead.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fbsql_field_type($result, $field_offset) {}

/**
 * Frees all memory associated with the given result identifier.
 * 
 * fbsql_free_result only needs to be called if you are concerned about
 * how much memory is being used for queries that return large result
 * sets. All associated result memory is automatically freed at the end
 * of the script's execution.
 *
 * @param resource
 * @return bool
 **/
function fbsql_free_result($result) {}

/**
 * @param resource
 * @return array
 **/
function fbsql_get_autostart_info($link_identifier) {}

/**
 * Gets or sets the host name used with a connection.
 *
 * @param resource
 * @param string
 * @return string
 **/
function fbsql_hostname($link_identifier, $host_name) {}

/**
 * Gets the id generated from the previous INSERT operation which created
 * a DEFAULT UNIQUE value.
 *
 * @param resource
 * @return int
 **/
function fbsql_insert_id($link_identifier) {}

/**
 * Return a result pointer containing the databases available from the
 * current fbsql daemon. Use the fbsql_tablename to traverse this result
 * pointer.
 *
 * @param resource
 * @return resource
 **/
function fbsql_list_dbs($link_identifier) {}

/**
 * Retrieves information about the given table.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function fbsql_list_fields($database_name, $table_name, $link_identifier) {}

/**
 * Returns a result pointer describing the database.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function fbsql_list_tables($database, $link_identifier) {}

/**
 * When sending more than one SQL statement to the server or executing a
 * stored procedure with multiple results will cause the server to return
 * multiple result sets. This function will test for additional results
 * available form the server. If an additional result set exists it will
 * free the existing result set and prepare to fetch the words from the
 * new result set.
 *
 * @param resource
 * @return bool
 **/
function fbsql_next_result($result) {}

/**
 * Returns the number of fields in the given result set.
 *
 * @param resource
 * @return int
 **/
function fbsql_num_fields($result) {}

/**
 * Gets the number of rows in the given result set.
 * 
 * This function is only valid for SELECT statements. To retrieve the
 * number of rows returned from a INSERT, UPDATE or DELETE query, use
 * fbsql_affected_rows.
 *
 * @param resource
 * @return int
 **/
function fbsql_num_rows($result) {}

/**
 * Get or set the user password used with a connection.
 *
 * @param resource
 * @param string
 * @return string
 **/
function fbsql_password($link_identifier, $password) {}

/**
 * Establishes a persistent connection to a FrontBase server.
 * 
 * To set the server port number, use fbsql_select_db.
 * 
 * fbsql_pconnect acts very much like fbsql_connect with two major
 * differences:
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use.
 * 
 * This type of links is therefore called 'persistent'.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function fbsql_pconnect($hostname, $username, $password) {}

/**
 * Sends a query to the currently active database on the server.
 * 
 * If the query succeeds, you can call fbsql_num_rows to find out how
 * many rows were returned for a SELECT statement or fbsql_affected_rows
 * to find out how many rows were affected by a DELETE, INSERT, REPLACE,
 * or UPDATE statement.
 *
 * @param string
 * @param resource
 * @param int
 * @return resource
 **/
function fbsql_query($query, $link_identifier, $batch_size) {}

/**
 * Reads BLOB data from the database.
 * 
 * If a select statement contains BLOB and/or CLOB columns FrontBase will
 * return the data directly when data is fetched. This default behavior
 * can be changed with fbsql_set_lob_mode so the fetch functions will
 * return handles to BLOB and CLOB data. If a handle is fetched a user
 * must call fbsql_read_blob to get the actual BLOB data from the
 * database.
 *
 * @param string
 * @param resource
 * @return string
 **/
function fbsql_read_blob($blob_handle, $link_identifier) {}

/**
 * Reads CLOB data from the database.
 * 
 * If a select statement contains BLOB and/or CLOB columns FrontBase will
 * return the data directly when data is fetched. This default behavior
 * can be changed with fbsql_set_lob_mode so the fetch functions will
 * return handles to BLOB and CLOB data. If a handle is fetched a user
 * must call fbsql_read_clob to get the actual CLOB data from the
 * database.
 *
 * @param string
 * @param resource
 * @return string
 **/
function fbsql_read_clob($clob_handle, $link_identifier) {}

/**
 * Returns the contents of one cell from a FrontBase result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they're MUCH quicker than fbsql_result.
 * 
 * Calls to fbsql_result should not be mixed with calls to other
 * functions that deal with the result set.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return mixed
 **/
function fbsql_result($result, $row, $field) {}

/**
 * Ends the current transaction by rolling back all statements issued
 * since last commit.
 * 
 * This command is only needed if autocommit is set to false.
 *
 * @param resource
 * @return bool
 **/
function fbsql_rollback($link_identifier) {}

/**
 * Gets the number of rows affected by the last statement.
 *
 * @param resource
 * @return int
 **/
function fbsql_rows_fetched($result) {}

/**
 * Sets the current active database on the given link identifier.
 * 
 * The client contacts FBExec to obtain the port number to use for the
 * connection to the database. If the database name is a number the
 * system will use that as a port number and it will not ask FBExec for
 * the port number. The FrontBase server can be stared as FRontBase
 * -FBExec=No -port=port number database name.
 * 
 * Every subsequent call to fbsql_query will be made on the active
 * database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function fbsql_select_db($database_name, $link_identifier) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function fbsql_set_characterset($link_identifier, $characterset, $in_out_both) {}

/**
 * Sets the mode for retrieving LOB data from the database.
 * 
 * When BLOB and CLOB data is retrieved in FrontBase it can be retrieved
 * direct or indirect. Direct retrieved LOB data will always be fetched
 * no matter the setting of the lob mode. If the LOB data is less than
 * 512 bytes it will always be retrieved directly.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function fbsql_set_lob_mode($result, $lob_mode) {}

/**
 * Changes the password for the given user.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function fbsql_set_password($link_identifier, $user, $password, $old_password) {}

/**
 * Sets the transaction locking and isolation.
 *
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function fbsql_set_transaction($link_identifier, $locking, $isolation) {}

/**
 * Start a database on local or remote server.
 *
 * @param string
 * @param resource
 * @param string
 * @return bool
 **/
function fbsql_start_db($database_name, $link_identifier, $database_options) {}

/**
 * Stops a database on local or remote server.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function fbsql_stop_db($database_name, $link_identifier) {}

/**
 * fbsql_tablename gets the name of the current table in the given
 * result set.
 * 
 * The fbsql_num_rows function may be used to determine the number of
 * tables in the result pointer.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fbsql_tablename($result, $index) {}

/**
 * fbsql_table_name gets the name of the current table in the given
 * result set.
 * 
 * The fbsql_num_rows function may be used to determine the number of
 * tables in the result pointer.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fbsql_table_name($result, $index) {}

/**
 * Get or set the username used for the connection.
 *
 * @param resource
 * @param string
 * @return string
 **/
function fbsql_username($link_identifier, $username) {}

/**
 * Enables or disables FrontBase warnings.
 *
 * @param bool
 * @return bool
 **/
function fbsql_warnings($OnOff) {}

/**
 * The file pointed to by handle is closed.
 *
 * @param resource
 * @return bool
 **/
function fclose($handle) {}

/**
 * Adds a script to the FDF, which Acrobat then adds to the doc-level
 * scripts of a document, once the FDF is imported into it.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function fdf_add_doc_javascript($fdf_document, $script_name, $script_code) {}

/**
 * @param resource
 * @param int
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function fdf_add_template($fdf_document, $newpage, $filename, $template, $rename) {}

/**
 * Closes the FDF document.
 *
 * @param resource
 * @return void
 **/
function fdf_close($fdf_document) {}

/**
 * Creates a new FDF document.
 * 
 * This function is needed if one would like to populate input fields in
 * a PDF document with data.
 *
 * @return resource
 **/
function fdf_create() {}

/**
 * @param resource
 * @param callback
 * @param mixed
 * @return bool
 **/
function fdf_enum_values($fdf_document, $function, $userdata) {}

/**
 * Gets the error code set by the last FDF function call.
 * 
 * A textual description of the error may be obtained using with
 * fdf_error.
 *
 * @return int
 **/
function fdf_errno() {}

/**
 * Gets a textual description for the FDF error code given in error_code.
 *
 * @param int
 * @return string
 **/
function fdf_error($error_code) {}

/**
 * Gets the appearance of a field (i.e. the value of the /AP key) and
 * stores it in a file.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return bool
 **/
function fdf_get_ap($fdf_document, $field, $face, $filename) {}

/**
 * Extracts a file uploaded by means of the "file selection" field
 * fieldname and stores it under savepath.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function fdf_get_attachment($fdf_document, $fieldname, $savepath) {}

/**
 * Gets the value of the /Encoding key.
 *
 * @param resource
 * @return string
 **/
function fdf_get_encoding($fdf_document) {}

/**
 * Gets the value of the /F key.
 *
 * @param resource
 * @return string
 **/
function fdf_get_file($fdf_document) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function fdf_get_flags($fdf_document, $fieldname, $whichflags) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return mixed
 **/
function fdf_get_opt($fdf_document, $fieldname, $element) {}

/**
 * Gets the value of the /STATUS key.
 *
 * @param resource
 * @return string
 **/
function fdf_get_status($fdf_document) {}

/**
 * Gets the value for the requested field.
 *
 * @param resource
 * @param string
 * @param int
 * @return mixed
 **/
function fdf_get_value($fdf_document, $fieldname, $which) {}

/**
 * Return the FDF version for the given document, or the toolkit API
 * version number if no parameter is given.
 *
 * @param resource
 * @return string
 **/
function fdf_get_version($fdf_document) {}

/**
 * This is a convenience function to set appropriate HTTP headers for FDF
 * output. It sets the Content-type: to application/vnd.fdf.
 *
 * @return void
 **/
function fdf_header() {}

/**
 * Gets the name of the field after the given field. This name can be
 * used with several functions.
 *
 * @param resource
 * @param string
 * @return string
 **/
function fdf_next_field_name($fdf_document, $fieldname) {}

/**
 * Opens a file with form data.
 * 
 * You can also use fdf_open_string to process the results of a PDF form
 * POST request.
 *
 * @param string
 * @return resource
 **/
function fdf_open($filename) {}

/**
 * Reads form data from a string.
 * 
 * You can use fdf_open_string together with $HTTP_FDF_DATA to process
 * FDF form input from a remote client.
 *
 * @param string
 * @return resource
 **/
function fdf_open_string($fdf_data) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function fdf_remove_item($fdf_document, $fieldname, $item) {}

/**
 * Saves a FDF document.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function fdf_save($fdf_document, $filename) {}

/**
 * Returns the FDF document as a string.
 *
 * @param resource
 * @return string
 **/
function fdf_save_string($fdf_document) {}

/**
 * Sets the appearance of a field (i.e. the value of the /AP key).
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function fdf_set_ap($fdf_document, $field_name, $face, $filename, $page_number) {}

/**
 * Sets the character encoding for the FDF document.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function fdf_set_encoding($fdf_document, $encoding) {}

/**
 * Selects a different PDF document to display the form results in then
 * the form it originated from.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function fdf_set_file($fdf_document, $url, $target_frame) {}

/**
 * Sets certain flags of the given field.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function fdf_set_flags($fdf_document, $fieldname, $whichFlags, $newFlags) {}

/**
 * Sets a javascript action for the given field.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return bool
 **/
function fdf_set_javascript_action($fdf_document, $fieldname, $trigger, $script) {}

/**
 * @param resource
 * @param string
 * @param bool
 * @return bool
 **/
function fdf_set_on_import_javascript($fdf_document, $script, $before_data_import) {}

/**
 * Sets options of the given field.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @param string
 * @return bool
 **/
function fdf_set_opt($fdf_document, $fieldname, $element, $str1, $str2) {}

/**
 * Sets the value of the /STATUS key. When a client receives a FDF with a
 * status set it will present the value in an alert box.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function fdf_set_status($fdf_document, $status) {}

/**
 * Sets a submit form action for the given field.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function fdf_set_submit_form_action($fdf_document, $fieldname, $trigger, $script, $flags) {}

/**
 * Sets the target frame to display a result PDF defined with
 * fdf_save_file in.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function fdf_set_target_frame($fdf_document, $frame_name) {}

/**
 * Sets the value for the given field.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function fdf_set_value($fdf_document, $fieldname, $value, $isName) {}

/**
 * Sets the FDF version for the given document.
 * 
 * Some features supported by this extension are only available in newer
 * FDF versions.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function fdf_set_version($fdf_document, $version) {}

/**
 * Tests for end-of-file on a file pointer.
 *
 * @param resource
 * @return bool
 **/
function feof($handle) {}

/**
 * This function forces a write of all buffered output to the resource
 * pointed to by the file handle.
 *
 * @param resource
 * @return bool
 **/
function fflush($handle) {}

/**
 * Gets a character from the given file pointer.
 *
 * @param resource
 * @return string
 **/
function fgetc($handle) {}

/**
 * Similar to fgets except that fgetcsv parses the line it reads for
 * fields in CSV format and returns an array containing the fields read.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function fgetcsv($handle, $length, $delimiter, $enclosure, $escape) {}

/**
 * Gets a line from file pointer.
 *
 * @param resource
 * @param int
 * @return string
 **/
function fgets($handle, $length) {}

/**
 * Identical to fgets, except that fgetss attempts to strip any HTML and
 * PHP tags from the text it reads.
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function fgetss($handle, $length, $allowable_tags) {}

/**
 * Reads an entire file into an array.
 *
 * @param string
 * @param int
 * @param resource
 * @return array
 **/
function file($filename, $flags, $context) {}

/**
 * @param string
 * @return int
 **/
function fileatime($filename) {}

/**
 * Gets the inode change time of a file.
 *
 * @param string
 * @return int
 **/
function filectime($filename) {}

/**
 * Gets the file group. The group ID is returned in numerical format, use
 * posix_getgrgid to resolve it to a group name.
 *
 * @param string
 * @return int
 **/
function filegroup($filename) {}

/**
 * Gets the file inode.
 *
 * @param string
 * @return int
 **/
function fileinode($filename) {}

/**
 * This function returns the time when the data blocks of a file were
 * being written to, that is, the time when the content of the file was
 * changed.
 *
 * @param string
 * @return int
 **/
function filemtime($filename) {}

/**
 * Gets the file owner.
 *
 * @param string
 * @return int
 **/
function fileowner($filename) {}

/**
 * Gets permissions for the given file.
 *
 * @param string
 * @return int
 **/
function fileperms($filename) {}

/**
 * This reads and verifies the map file, storing the field count and
 * info.
 * 
 * No locking is done, so you should avoid modifying your filePro
 * database while it may be opened in PHP.
 *
 * @param string
 * @return bool
 **/
function filepro($directory) {}

/**
 * Returns the number of fields (columns) in the opened filePro database.
 *
 * @return int
 **/
function filepro_fieldcount() {}

/**
 * Returns the name of the field corresponding to field_number.
 *
 * @param int
 * @return string
 **/
function filepro_fieldname($field_number) {}

/**
 * Returns the edit type of the field corresponding to field_number.
 *
 * @param int
 * @return string
 **/
function filepro_fieldtype($field_number) {}

/**
 * Returns the width of the field corresponding to field_number.
 *
 * @param int
 * @return int
 **/
function filepro_fieldwidth($field_number) {}

/**
 * Returns the data from the specified location in the database.
 *
 * @param int
 * @param int
 * @return string
 **/
function filepro_retrieve($row_number, $field_number) {}

/**
 * Returns the number of rows in the opened filePro database.
 *
 * @return int
 **/
function filepro_rowcount() {}

/**
 * Gets the size for the given file.
 *
 * @param string
 * @return int
 **/
function filesize($filename) {}

/**
 * Returns the type of the given file.
 *
 * @param string
 * @return string
 **/
function filetype($filename) {}

/**
 * Checks whether a file or directory exists.
 *
 * @param string
 * @return bool
 **/
function file_exists($filename) {}

/**
 * This function is similar to file, except that file_get_contents
 * returns the file in a string, starting at the specified offset up to
 * maxlen bytes. On failure, file_get_contents will return .
 * 
 * file_get_contents is the preferred way to read the contents of a file
 * into a string. It will use memory mapping techniques if supported by
 * your OS to enhance performance.
 *
 * @param string
 * @param int
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function file_get_contents($filename, $flags, $context, $offset, $maxlen) {}

/**
 * This function is identical to calling fopen, fwrite and fclose
 * successively to write data to a file.
 * 
 * If filename does not exist, the file is created. Otherwise, the
 * existing file is overwritten, unless the FILE_APPEND flags is set.
 *
 * @param string
 * @param mixed
 * @param int
 * @param resource
 * @return int
 **/
function file_put_contents($filename, $data, $flags, $context) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function filter_has_var($type, $variable_name) {}

/**
 * @param string
 * @return int
 **/
function filter_id($filtername) {}

/**
 * @param int
 * @param string
 * @param int
 * @param mixed
 * @return mixed
 **/
function filter_input($type, $variable_name, $filter, $options) {}

/**
 * This function is useful for retrieving many values without
 * repetitively calling filter_input.
 *
 * @param int
 * @param mixed
 * @return mixed
 **/
function filter_input_array($type, $definition) {}

/**
 * @return array
 **/
function filter_list() {}

/**
 * @param mixed
 * @param int
 * @param mixed
 * @return mixed
 **/
function filter_var($variable, $filter, $options) {}

/**
 * This function is useful for retrieving many values without
 * repetitively calling filter_var.
 *
 * @param array
 * @param mixed
 * @return mixed
 **/
function filter_var_array($data, $definition) {}

/**
 * This function is used to get information about binary data in a
 * string.
 *
 * @param resource
 * @param string
 * @param int
 * @param resource
 * @return string
 **/
function finfo_buffer($finfo, $string, $options, $context) {}

/**
 * This function closes the resource opened by finfo_open.
 *
 * @param resource
 * @return bool
 **/
function finfo_close($finfo) {}

/**
 * This function is used to get information about a file.
 *
 * @param resource
 * @param string
 * @param int
 * @param resource
 * @return string
 **/
function finfo_file($finfo, $file_name, $options, $context) {}

/**
 * This function opens a magic database and returns its resource.
 *
 * @param int
 * @param string
 * @return resource
 **/
function finfo_open($options, $magic_file) {}

/**
 * This function sets various Fileinfo options. Options can be set also
 * directly in finfo_open or other Fileinfo functions.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function finfo_set_flags($finfo, $options) {}

/**
 * Gets the float value of var.
 *
 * @param mixed
 * @return float
 **/
function floatval($var) {}

/**
 * flock allows you to perform a simple reader/writer model which can be
 * used on virtually every platform (including most Unix derivatives and
 * even Windows).
 * 
 * The lock is released also by fclose (which is also called
 * automatically when script finished).
 * 
 * PHP supports a portable way of locking complete files in an advisory
 * way (which means all accessing programs have to use the same way of
 * locking or it will not work). By default, this function will block
 * until the requested lock is acquired; this may be controlled (on
 * non-Windows platforms) with the LOCK_NB option documented below.
 *
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function flock($handle, $operation, &$wouldblock) {}

/**
 * @param float
 * @return float
 **/
function floor($value) {}

/**
 * Flushes the write buffers of PHP and whatever backend PHP is using
 * (CGI, a web server, etc). This attempts to push current output all the
 * way to the browser with a few caveats.
 * 
 * flush may not be able to override the buffering scheme of your web
 * server and it has no effect on any client-side buffering in the
 * browser. It also doesn't affect PHP's userspace output buffering
 * mechanism. This means you will have to call both ob_flush and flush to
 * flush the ob output buffers if you are using those.
 * 
 * Several servers, especially on Win32, will still buffer the output
 * from your script until it terminates before transmitting the results
 * to the browser.
 * 
 * Server modules for Apache like mod_gzip may do buffering of their own
 * that will cause flush to not result in data being sent immediately to
 * the client.
 * 
 * Even the browser may buffer its input before displaying it. Netscape,
 * for example, buffers text until it receives an end-of-line or the
 * beginning of a tag, and it won't render tables until the /table tag of
 * the outermost table is seen.
 * 
 * Some versions of Microsoft Internet Explorer will only start to
 * display the page after they have received 256 bytes of output, so you
 * may need to send extra whitespace before flushing to get those
 * browsers to display the page.
 *
 * @return void
 **/
function flush() {}

/**
 * Returns the floating point remainder of dividing the dividend (x) by
 * the divisor (y). The reminder (r) is defined as: x = i * y + r, for
 * some integer i. If y is non-zero, r has the same sign as x and a
 * magnitude less than the magnitude of y.
 *
 * @param float
 * @param float
 * @return float
 **/
function fmod($x, $y) {}

/**
 * fnmatch checks if the passed string would match the given shell
 * wildcard pattern.
 *
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function fnmatch($pattern, $string, $flags) {}

/**
 * fopen binds a named resource, specified by filename, to a stream.
 *
 * @param string
 * @param string
 * @param bool
 * @param resource
 * @return resource
 **/
function fopen($filename, $mode, $use_include_path, $context) {}

/**
 * Calls a user defined function or method given by the function
 * parameter, with the following arguments. This function must be called
 * within a method context, it can't be used outside a class.
 *
 * @param callback
 * @param mixed
 * @return mixed
 **/
function forward_static_call($function, $parameter) {}

/**
 * Calls a user defined function or method given by the function
 * parameter. This function must be called within a method context, it
 * can't be used outside a class. All arguments of the forwarded method
 * are passed as values, and as an array, similarly to
 * call_user_func_array.
 *
 * @param callback
 * @param array
 * @return mixed
 **/
function forward_static_call_array($function, $parameters) {}

/**
 * Reads to EOF on the given file pointer from the current position and
 * writes the results to the output buffer.
 * 
 * You may need to call rewind to reset the file pointer to the beginning
 * of the file if you have already written data to the file.
 * 
 * If you just want to dump the contents of a file to the output buffer,
 * without first modifying it or seeking to a particular offset, you may
 * want to use the readfile, which saves you the fopen call.
 *
 * @param resource
 * @return int
 **/
function fpassthru($handle) {}

/**
 * Write a string produced according to format to the stream resource
 * specified by handle.
 *
 * @param resource
 * @param string
 * @param mixed
 * @return int
 **/
function fprintf($handle, $format, $args) {}

/**
 * fputcsv formats a line (passed as a fields array) as CSV and write it
 * (terminated by a newline) to the specified file handle.
 *
 * @param resource
 * @param array
 * @param string
 * @param string
 * @return int
 **/
function fputcsv($handle, $fields, $delimiter, $enclosure) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function fputs($handle, $string, $length) {}

/**
 * fread reads up to length bytes from the file pointer referenced by
 * handle. Reading stops as soon as one of the following conditions is
 * met:
 * 
 * length bytes have been read
 * 
 * EOF (end of file) is reached
 * 
 * a packet becomes available (for network streams)
 * 
 * 8192 bytes have been read (after opening userspace stream)
 *
 * @param resource
 * @param int
 * @return string
 **/
function fread($handle, $length) {}

/**
 * Converts a date from the French Republican Calendar to a Julian Day
 * Count.
 * 
 * These routines only convert dates in years 1 through 14 (Gregorian
 * dates 22 September 1792 through 22 September 1806). This more than
 * covers the period when the calendar was in use.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function frenchtojd($month, $day, $year) {}

/**
 * Converts a logical string to a visual one.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function fribidi_log2vis($str, $direction, $charset) {}

/**
 * The function fscanf is similar to sscanf, but it takes its input from
 * a file associated with handle and interprets the input according to
 * the specified format, which is described in the documentation for
 * sprintf.
 * 
 * Any whitespace in the format string matches any whitespace in the
 * input stream. This means that even a tab \t in the format string can
 * match a single space character in the input stream.
 * 
 * Each call to fscanf reads one line from the file.
 *
 * @param resource
 * @param string
 * @return mixed
 **/
function fscanf($handle, $format) {}

/**
 * Sets the file position indicator for the file referenced by handle.
 * The new position, measured in bytes from the beginning of the file, is
 * obtained by adding offset to the position specified by whence.
 *
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function fseek($handle, $offset, $whence) {}

/**
 * Initiates a socket connection to the resource specified by hostname.
 * 
 * PHP supports targets in the Internet and Unix domains as described in
 * . A list of supported transports can also be retrieved using
 * stream_get_transports.
 * 
 * The socket will by default be opened in blocking mode. You can switch
 * it to non-blocking mode by using stream_set_blocking.
 *
 * @param string
 * @param int
 * @param int
 * @param string
 * @param float
 * @return resource
 **/
function fsockopen($hostname, $port, &$errno, &$errstr, $timeout) {}

/**
 * Gathers the statistics of the file opened by the file pointer handle.
 * This function is similar to the stat function except that it operates
 * on an open file pointer instead of a filename.
 *
 * @param resource
 * @return array
 **/
function fstat($handle) {}

/**
 * Returns the position of the file pointer referenced by handle.
 *
 * @param resource
 * @return int
 **/
function ftell($handle) {}

/**
 * The function converts the pathname of an existing accessible file and
 * a project identifier into an integer for use with for example
 * shmop_open and other System V IPC keys.
 *
 * @param string
 * @param string
 * @return int
 **/
function ftok($pathname, $proj) {}

/**
 * Sends an ALLO command to the remote FTP server to allocate space for a
 * file to be uploaded.
 * 
 * 
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function ftp_alloc($ftp_stream, $filesize, &$result) {}

/**
 * Changes to the parent directory.
 *
 * @param resource
 * @return bool
 **/
function ftp_cdup($ftp_stream) {}

/**
 * Changes the current directory to the specified one.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ftp_chdir($ftp_stream, $directory) {}

/**
 * Sets the permissions on the specified remote file to mode.
 *
 * @param resource
 * @param int
 * @param string
 * @return int
 **/
function ftp_chmod($ftp_stream, $mode, $filename) {}

/**
 * ftp_close closes the given link identifier and releases the resource.
 *
 * @param resource
 * @return bool
 **/
function ftp_close($ftp_stream) {}

/**
 * ftp_connect opens an FTP connection to the specified host.
 *
 * @param string
 * @param int
 * @param int
 * @return resource
 **/
function ftp_connect($host, $port, $timeout) {}

/**
 * ftp_delete deletes the file specified by path from the FTP server.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ftp_delete($ftp_stream, $path) {}

/**
 * Sends a SITE EXEC command request to the FTP server.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ftp_exec($ftp_stream, $command) {}

/**
 * ftp_fget retrieves remote_file from the FTP server, and writes it to
 * the given file pointer.
 *
 * @param resource
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function ftp_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos) {}

/**
 * ftp_fput uploads the data from a file pointer to a remote file on the
 * FTP server.
 *
 * @param resource
 * @param string
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function ftp_fput($ftp_stream, $remote_file, $handle, $mode, $startpos) {}

/**
 * ftp_get retrieves a remote file from the FTP server, and saves it into
 * a local file.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function ftp_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos) {}

/**
 * This function returns the value for the requested option from the
 * specified FTP connection.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function ftp_get_option($ftp_stream, $option) {}

/**
 * Logs in to the given FTP stream.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ftp_login($ftp_stream, $username, $password) {}

/**
 * ftp_mdtm gets the last modified time for a remote file.
 *
 * @param resource
 * @param string
 * @return int
 **/
function ftp_mdtm($ftp_stream, $remote_file) {}

/**
 * Creates the specified directory on the FTP server.
 *
 * @param resource
 * @param string
 * @return string
 **/
function ftp_mkdir($ftp_stream, $directory) {}

/**
 * Continues retrieving/sending a file non-blocking.
 *
 * @param resource
 * @return int
 **/
function ftp_nb_continue($ftp_stream) {}

/**
 * ftp_nb_fget retrieves a remote file from the FTP server.
 * 
 * The difference between this function and ftp_fget is that this
 * function retrieves the file asynchronously, so your program can
 * perform other operations while the file is being downloaded.
 *
 * @param resource
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function ftp_nb_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos) {}

/**
 * ftp_nb_fput uploads the data from a file pointer to a remote file on
 * the FTP server.
 * 
 * The difference between this function and the ftp_fput is that this
 * function uploads the file asynchronously, so your program can perform
 * other operations while the file is being uploaded.
 *
 * @param resource
 * @param string
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function ftp_nb_fput($ftp_stream, $remote_file, $handle, $mode, $startpos) {}

/**
 * ftp_nb_get retrieves a remote file from the FTP server, and saves it
 * into a local file.
 * 
 * The difference between this function and ftp_get is that this function
 * retrieves the file asynchronously, so your program can perform other
 * operations while the file is being downloaded.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function ftp_nb_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos) {}

/**
 * ftp_nb_put stores a local file on the FTP server.
 * 
 * The difference between this function and the ftp_put is that this
 * function uploads the file asynchronously, so your program can perform
 * other operations while the file is being uploaded.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function ftp_nb_put($ftp_stream, $remote_file, $local_file, $mode, $startpos) {}

/**
 * @param resource
 * @param string
 * @return array
 **/
function ftp_nlist($ftp_stream, $directory) {}

/**
 * ftp_pasv turns on or off passive mode. In passive mode, data
 * connections are initiated by the client, rather than by the server. It
 * may be needed if the client is behind firewall.
 * 
 * Please note that ftp_pasv can only be called after a successfull login
 * or otherwise it will fail.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function ftp_pasv($ftp_stream, $pasv) {}

/**
 * ftp_put stores a local file on the FTP server.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function ftp_put($ftp_stream, $remote_file, $local_file, $mode, $startpos) {}

/**
 * @param resource
 * @return string
 **/
function ftp_pwd($ftp_stream) {}

/**
 * ftp_quit closes the given link identifier and releases the resource.
 *
 * @param resource
 * @return bool
 **/
function ftp_quit($ftp_stream) {}

/**
 * Sends an arbitrary command to the FTP server.
 *
 * @param resource
 * @param string
 * @return array
 **/
function ftp_raw($ftp_stream, $command) {}

/**
 * ftp_rawlist executes the FTP LIST command, and returns the result as
 * an array.
 *
 * @param resource
 * @param string
 * @param bool
 * @return array
 **/
function ftp_rawlist($ftp_stream, $directory, $recursive) {}

/**
 * ftp_rename renames a file or a directory on the FTP server.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ftp_rename($ftp_stream, $oldname, $newname) {}

/**
 * Removes the specified directory on the FTP server.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ftp_rmdir($ftp_stream, $directory) {}

/**
 * This function controls various runtime options for the specified FTP
 * stream.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function ftp_set_option($ftp_stream, $option, $value) {}

/**
 * ftp_site sends the given SITE command to the FTP server.
 * 
 * SITE commands are not standardized, and vary from server to server.
 * They are useful for handling such things as file permissions and group
 * membership.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ftp_site($ftp_stream, $command) {}

/**
 * ftp_size returns the size of the given file in bytes.
 *
 * @param resource
 * @param string
 * @return int
 **/
function ftp_size($ftp_stream, $remote_file) {}

/**
 * ftp_ssl_connect opens a SSL-FTP connection to the specified host.
 *
 * @param string
 * @param int
 * @param int
 * @return resource
 **/
function ftp_ssl_connect($host, $port, $timeout) {}

/**
 * Returns the system type identifier of the remote FTP server.
 *
 * @param resource
 * @return string
 **/
function ftp_systype($ftp_stream) {}

/**
 * Takes the filepointer, handle, and truncates the file to length, size.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ftruncate($handle, $size) {}

/**
 * Checks the list of defined functions, both built-in (internal) and
 * user-defined, for function_name.
 *
 * @param string
 * @return bool
 **/
function function_exists($function_name) {}

/**
 * Gets the specified argument from a user-defined function's argument
 * list.
 * 
 * This function may be used in conjunction with func_get_args and
 * func_num_args to allow user-defined functions to accept
 * variable-length argument lists.
 *
 * @param int
 * @return mixed
 **/
function func_get_arg($arg_num) {}

/**
 * Gets an array of the function's argument list.
 * 
 * This function may be used in conjunction with func_get_arg and
 * func_num_args to allow user-defined functions to accept
 * variable-length argument lists.
 *
 * @return array
 **/
function func_get_args() {}

/**
 * Gets the number of arguments passed to the function.
 * 
 * This function may be used in conjunction with func_get_arg and
 * func_get_args to allow user-defined functions to accept
 * variable-length argument lists.
 *
 * @return int
 **/
function func_num_args() {}

/**
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function fwrite($handle, $string, $length) {}

/**
 * Forces collection of any existing garbage cycles.
 *
 * @return int
 **/
function gc_collect_cycles() {}

/**
 * Deactivates the circular reference collector.
 *
 * @return void
 **/
function gc_disable() {}

/**
 * Activates the circular reference collector.
 *
 * @return void
 **/
function gc_enable() {}

/**
 * Returns status of the circular reference collector.
 *
 * @return bool
 **/
function gc_enabled() {}

/**
 * Gets information about the version and capabilities of the installed
 * GD library.
 *
 * @return array
 **/
function gd_info() {}

/**
 * The geoip_continent_code_by_name function will return the two letter
 * continent code corresponding to a hostname or an IP address.
 *
 * @param string
 * @return string
 **/
function geoip_continent_code_by_name($hostname) {}

/**
 * The geoip_country_code3_by_name function will return the three letter
 * country code corresponding to a hostname or an IP address.
 *
 * @param string
 * @return string
 **/
function geoip_country_code3_by_name($hostname) {}

/**
 * The geoip_country_code_by_name function will return the two letter
 * country code corresponding to a hostname or an IP address.
 *
 * @param string
 * @return string
 **/
function geoip_country_code_by_name($hostname) {}

/**
 * The geoip_country_name_by_name function will return the full country
 * name corresponding to a hostname or an IP address.
 *
 * @param string
 * @return string
 **/
function geoip_country_name_by_name($hostname) {}

/**
 * The geoip_database_info function returns the corresponding GeoIP
 * Database version as it is defined inside the binary file.
 * 
 * If this function is called without arguments, it returns the version
 * of the GeoIP Free Country Edition.
 *
 * @param int
 * @return string
 **/
function geoip_database_info($database) {}

/**
 * The geoip_db_avail function returns if the corresponding GeoIP
 * Database is available and can be opened on disk.
 * 
 * It does not indicate if the file is a proper database, only if it is
 * readable.
 *
 * @param int
 * @return bool
 **/
function geoip_db_avail($database) {}

/**
 * The geoip_db_filename function returns the filename of the
 * corresponding GeoIP Database.
 * 
 * It does not indicate if the file exists or not on disk, only where the
 * library is looking for the database.
 *
 * @param int
 * @return string
 **/
function geoip_db_filename($database) {}

/**
 * The geoip_db_get_all_info function will return detailed information as
 * a multi-dimensional array about all the GeoIP database types.
 * 
 * This function is available even if no databases are installed. It will
 * simply list them as non-available.
 * 
 * The names of the different keys of the returning associative array are
 * as follows:
 * 
 * "available" -- Boolean, indicate if DB is available (see
 * geoip_db_avail)
 * 
 * "description" -- The database description
 * 
 * "filename" -- The database filename on disk (see geoip_db_filename)
 *
 * @return array
 **/
function geoip_db_get_all_info() {}

/**
 * The geoip_id_by_name function will return the country and region
 * corresponding to a hostname or an IP address.
 * 
 * The return value is numeric and can be compared to the following
 * constants:
 * 
 * GEOIP_UNKNOWN_SPEED
 * 
 * GEOIP_DIALUP_SPEED
 * 
 * GEOIP_CABLEDSL_SPEED
 * 
 * GEOIP_CORPORATE_SPEED
 *
 * @param string
 * @return int
 **/
function geoip_id_by_name($hostname) {}

/**
 * The geoip_isp_by_name function will return the name of the Internet
 * Service Provider (ISP) that an IP is assigned to.
 * 
 * This function is currently only available to users who have bought a
 * commercial GeoIP ISP Edition. A warning will be issued if the proper
 * database cannot be located.
 *
 * @param string
 * @return string
 **/
function geoip_isp_by_name($hostname) {}

/**
 * The geoip_org_by_name function will return the name of the
 * organization that an IP is assigned to.
 * 
 * This function is currently only available to users who have bought a
 * commercial GeoIP Organization, ISP or AS Edition. A warning will be
 * issued if the proper database cannot be located.
 *
 * @param string
 * @return string
 **/
function geoip_org_by_name($hostname) {}

/**
 * The geoip_record_by_name function will return the record information
 * corresponding to a hostname or an IP address.
 * 
 * This function is available for both GeoLite City Edition and
 * commercial GeoIP City Edition. A warning will be issued if the proper
 * database cannot be located.
 * 
 * The names of the different keys of the returning associative array are
 * as follows:
 * 
 * "continent_code" -- Two letter continent code (as of version 1.0.4
 * with libgeoip 1.4.3 or newer)
 * 
 * "country_code" -- Two letter country code (see
 * geoip_country_code_by_name)
 * 
 * "country_code3" -- Three letter country code (see
 * geoip_country_code3_by_name)
 * 
 * "country_name" -- The country name (see geoip_country_name_by_name)
 * 
 * "region" -- The region code (ex: CA for California)
 * 
 * "city" -- The city.
 * 
 * "postal_code" -- The Postal Code, FSA or Zip Code.
 * 
 * "latitude" -- The Latitude as signed double.
 * 
 * "longitude" -- The Longitude as signed double.
 * 
 * "dma_code" -- Designated Market Area code (USA and Canada only)
 * 
 * "area_code" -- The PSTN area code (ex: 212)
 *
 * @param string
 * @return array
 **/
function geoip_record_by_name($hostname) {}

/**
 * The geoip_region_by_name function will return the country and region
 * corresponding to a hostname or an IP address.
 * 
 * This function is currently only available to users who have bought a
 * commercial GeoIP Region Edition. A warning will be issued if the
 * proper database cannot be located.
 * 
 * The names of the different keys of the returning associative array are
 * as follows:
 * 
 * "country_code" -- Two letter country code (see
 * geoip_country_code_by_name)
 * 
 * "region" -- The region code (ex: CA for California)
 *
 * @param string
 * @return array
 **/
function geoip_region_by_name($hostname) {}

/**
 * The geoip_region_name_by_code function will return the region name
 * corresponding to a country and region code combo.
 * 
 * In the United States, the region code corresponds to the two-letter
 * abbreviation of each state. In Canada, the region code corresponds to
 * the two-letter province or territory code as attributed by Canada
 * Post.
 * 
 * For the rest of the world, GeoIP uses FIPS 10-4 codes to represent
 * regions. You can check for a detailed list of FIPS 10-4 codes.
 * 
 * This function is always available if using GeoIP Library version 1.4.1
 * or newer. The data is taken directly from the GeoIP Library and not
 * from any database.
 *
 * @param string
 * @param string
 * @return string
 **/
function geoip_region_name_by_code($country_code, $region_code) {}

/**
 * The geoip_time_zone_by_country_and_region function will return the
 * time zone corresponding to a country and region code combo.
 * 
 * In the United States, the region code corresponds to the two-letter
 * abbreviation of each state. In Canada, the region code corresponds to
 * the two-letter province or territory code as attributed by Canada
 * Post.
 * 
 * For the rest of the world, GeoIP uses FIPS 10-4 codes to represent
 * regions. You can check for a detailed list of FIPS 10-4 codes.
 * 
 * This function is always available if using GeoIP Library version 1.4.1
 * or newer. The data is taken directly from the GeoIP Library and not
 * from any database.
 *
 * @param string
 * @param string
 * @return string
 **/
function geoip_time_zone_by_country_and_region($country_code, $region_code) {}

/**
 * Fetches all HTTP headers from the current request.
 * 
 * This function is an alias for apache_request_headers. Please read the
 * apache_request_headers documentation for more information on how this
 * function works.
 *
 * @return array
 **/
function getallheaders() {}

/**
 * Gets the current working directory.
 *
 * @return string
 **/
function getcwd() {}

/**
 * Returns an associative array containing the date information of the
 * timestamp, or the current local time if no timestamp is given.
 *
 * @param int
 * @return array
 **/
function getdate($timestamp) {}

/**
 * Gets the value of an environment variable.
 * 
 * You can see a list of all the environmental variables by using
 * phpinfo. You can find out what many of them mean by taking a look at
 * the CGI specification, specifically the page on environmental
 * variables.
 *
 * @param string
 * @return string
 **/
function getenv($varname) {}

/**
 * Returns the host name of the Internet host specified by ip_address.
 *
 * @param string
 * @return string
 **/
function gethostbyaddr($ip_address) {}

/**
 * Returns the IPv4 address of the Internet host specified by hostname.
 *
 * @param string
 * @return string
 **/
function gethostbyname($hostname) {}

/**
 * Returns a list of IPv4 addresses to which the Internet host specified
 * by hostname resolves.
 *
 * @param string
 * @return array
 **/
function gethostbynamel($hostname) {}

/**
 * gethostname gets the standard host name for the local machine.
 *
 * @return string
 **/
function gethostname() {}

/**
 * The getimagesize function will determine the size of any given image
 * file and return the dimensions along with the file type and a
 * height/width text string to be used inside a normal HTML IMG tag and
 * the correspondant HTTP content type.
 * 
 * getimagesize can also return some more information in imageinfo
 * parameter.
 *
 * @param string
 * @param array
 * @return array
 **/
function getimagesize($filename, &$imageinfo) {}

/**
 * Gets the time of the last modification of the current page.
 * 
 * If you're interested in getting the last modification time of a
 * different file, consider using filemtime.
 *
 * @return int
 **/
function getlastmod() {}

/**
 * Searches DNS for MX records corresponding to hostname.
 *
 * @param string
 * @param array
 * @param array
 * @return bool
 **/
function getmxrr($hostname, &$mxhosts, &$weight) {}

/**
 * @return int
 **/
function getmygid() {}

/**
 * Gets the inode of the current script.
 *
 * @return int
 **/
function getmyinode() {}

/**
 * Gets the current PHP process ID.
 *
 * @return int
 **/
function getmypid() {}

/**
 * @return int
 **/
function getmyuid() {}

/**
 * Parses options passed to the script.
 *
 * @param string
 * @param array
 * @return array
 **/
function getopt($options, $longopts) {}

/**
 * getprotobyname returns the protocol number associated with the
 * protocol name as per /etc/protocols.
 *
 * @param string
 * @return int
 **/
function getprotobyname($name) {}

/**
 * getprotobynumber returns the protocol name associated with protocol
 * number as per /etc/protocols.
 *
 * @param int
 * @return string
 **/
function getprotobynumber($number) {}

/**
 * @return int
 **/
function getrandmax() {}

/**
 * This is an interface to getrusage(2). It gets data returned from the
 * system call.
 *
 * @param int
 * @return array
 **/
function getrusage($who) {}

/**
 * getservbyname returns the Internet port which corresponds to service
 * for the specified protocol as per /etc/services.
 *
 * @param string
 * @param string
 * @return int
 **/
function getservbyname($service, $protocol) {}

/**
 * getservbyport returns the Internet service associated with port for
 * the specified protocol as per /etc/services.
 *
 * @param int
 * @param string
 * @return string
 **/
function getservbyport($port, $protocol) {}

/**
 * Looks up a message in the current domain.
 *
 * @param string
 * @return string
 **/
function gettext($message) {}

/**
 * This is an interface to gettimeofday(2). It returns an associative
 * array containing the data returned from the system call.
 *
 * @param bool
 * @return mixed
 **/
function gettimeofday($return_float) {}

/**
 * Returns the type of the PHP variable var.
 *
 * @param mixed
 * @return string
 **/
function gettype($var) {}

/**
 * Attempts to determine the capabilities of the user's browser, by
 * looking up the browser's information in the browscap.ini file.
 *
 * @param string
 * @param bool
 * @return mixed
 **/
function get_browser($user_agent, $return_array) {}

/**
 * Gets the name of the class the static method is called in.
 *
 * @return string
 **/
function get_called_class() {}

/**
 * Gets the value of a PHP configuration option.
 * 
 * This function will not return configuration information set when the
 * PHP was compiled, or read from an Apache configuration file.
 * 
 * To check whether the system is using a configuration file, try
 * retrieving the value of the cfg_file_path configuration setting. If
 * this is available, a configuration file is being used.
 *
 * @param string
 * @return string
 **/
function get_cfg_var($option) {}

/**
 * Gets the name of the class of the given object.
 *
 * @param object
 * @return string
 **/
function get_class($object) {}

/**
 * Gets the class methods names.
 *
 * @param mixed
 * @return array
 **/
function get_class_methods($class_name) {}

/**
 * Get the default properties of the given class.
 *
 * @param string
 * @return array
 **/
function get_class_vars($class_name) {}

/**
 * @return string
 **/
function get_current_user() {}

/**
 * Gets the declared classes.
 *
 * @return array
 **/
function get_declared_classes() {}

/**
 * Gets the declared interfaces.
 *
 * @return array
 **/
function get_declared_interfaces() {}

/**
 * Returns the names and values of all the constants currently defined.
 * This includes those created by extensions as well as those created
 * with the define function.
 *
 * @param bool
 * @return array
 **/
function get_defined_constants($categorize) {}

/**
 * Gets an array of all defined functions.
 *
 * @return array
 **/
function get_defined_functions() {}

/**
 * This function returns a multidimensional array containing a list of
 * all defined variables, be them environment, server or user-defined
 * variables, within the scope that get_defined_vars is called.
 *
 * @return array
 **/
function get_defined_vars() {}

/**
 * This function returns the names of all the functions defined in the
 * module indicated by module_name.
 *
 * @param string
 * @return array
 **/
function get_extension_funcs($module_name) {}

/**
 * get_headers returns an array with the headers sent by the server in
 * response to a HTTP request.
 *
 * @param string
 * @param int
 * @return array
 **/
function get_headers($url, $format) {}

/**
 * get_html_translation_table will return the translation table that is
 * used internally for htmlspecialchars and htmlentities.
 *
 * @param int
 * @param int
 * @return array
 **/
function get_html_translation_table($table, $quote_style) {}

/**
 * Gets the names of all files that have been included using include,
 * include_once, require or require_once.
 *
 * @return array
 **/
function get_included_files() {}

/**
 * @return string
 **/
function get_include_path() {}

/**
 * This function returns the names of all the modules compiled and loaded
 * in the PHP interpreter.
 *
 * @param bool
 * @return array
 **/
function get_loaded_extensions($zend_extensions) {}

/**
 * Returns the current configuration setting of magic_quotes_gpc
 * 
 * Keep in mind that the setting magic_quotes_gpc will not work at
 * runtime.
 * 
 * For more information about magic_quotes, see this security section.
 *
 * @return int
 **/
function get_magic_quotes_gpc() {}

/**
 * @return int
 **/
function get_magic_quotes_runtime() {}

/**
 * Opens filename and parses it line by line for meta tags in the file.
 * The parsing stops at /head.
 *
 * @param string
 * @param bool
 * @return array
 **/
function get_meta_tags($filename, $use_include_path) {}

/**
 * Gets the accessible non-static properties of the given object
 * according to scope.
 *
 * @param object
 * @return array
 **/
function get_object_vars($object) {}

/**
 * Retrieves the parent class name for object or class.
 *
 * @param mixed
 * @return string
 **/
function get_parent_class($object) {}

/**
 * Gets the names of all files that have been included using include,
 * include_once, require or require_once.
 *
 * @return array
 **/
function get_required_files() {}

/**
 * This function gets the type of the given resource.
 *
 * @param resource
 * @return string
 **/
function get_resource_type($handle) {}

/**
 * The glob function searches for all the pathnames matching pattern
 * according to the rules used by the libc glob() function, which is
 * similar to the rules used by common shells.
 *
 * @param string
 * @param int
 * @return array
 **/
function glob($pattern, $flags) {}

/**
 * Identical to the date function except that the time returned is
 * Greenwich Mean Time (GMT).
 *
 * @param string
 * @param int
 * @return string
 **/
function gmdate($format, $timestamp) {}

/**
 * Identical to mktime except the passed parameters represents a GMT
 * date. gmmktime internally uses mktime so only times valid in derived
 * local time can be used.
 * 
 * Like mktime, arguments may be left out in order from right to left,
 * with any omitted arguments being set to the current corresponding GMT
 * value.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function gmmktime($hour, $minute, $second, $month, $day, $year, $is_dst) {}

/**
 * Get the absolute value of a number.
 *
 * @param resource
 * @return resource
 **/
function gmp_abs($a) {}

/**
 * Add two numbers.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_add($a, $b) {}

/**
 * Calculates bitwise AND of two GMP numbers.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_and($a, $b) {}

/**
 * Clears (sets to 0) bit index in a. The index starts at 0.
 *
 * @param resource
 * @param int
 * @return void
 **/
function gmp_clrbit($a, $index) {}

/**
 * Compares two numbers.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function gmp_cmp($a, $b) {}

/**
 * Returns the one's complement of a.
 *
 * @param resource
 * @return resource
 **/
function gmp_com($a) {}

/**
 * Divides a by b and returns the integer result.
 *
 * @param resource
 * @param resource
 * @param int
 * @return resource
 **/
function gmp_div($a, $b, $round) {}

/**
 * Divides n by d, using fast "exact division" algorithm. This function
 * produces correct results only when it is known in advance that d
 * divides n.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_divexact($n, $d) {}

/**
 * Divides a by b and returns the integer result.
 *
 * @param resource
 * @param resource
 * @param int
 * @return resource
 **/
function gmp_div_q($a, $b, $round) {}

/**
 * The function divides n by d.
 *
 * @param resource
 * @param resource
 * @param int
 * @return array
 **/
function gmp_div_qr($n, $d, $round) {}

/**
 * Calculates remainder of the integer division of n by d. The remainder
 * has the sign of the n argument, if not zero.
 *
 * @param resource
 * @param resource
 * @param int
 * @return resource
 **/
function gmp_div_r($n, $d, $round) {}

/**
 * Calculates factorial (a!) of a.
 *
 * @param mixed
 * @return resource
 **/
function gmp_fact($a) {}

/**
 * Calculate greatest common divisor of a and b. The result is always
 * positive even if either of, or both, input operands are negative.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_gcd($a, $b) {}

/**
 * Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd
 * is the greatest common divisor. Returns an array with respective
 * elements g, s and t.
 * 
 * This function can be used to solve linear Diophantine equations in two
 * variables. These are equations that allow only integer solutions and
 * have the form: a*x + b*y = c. For more information, go to the
 * "Diophantine Equation" page at MathWorld
 *
 * @param resource
 * @param resource
 * @return array
 **/
function gmp_gcdext($a, $b) {}

/**
 * Returns the hamming distance between a and b. Both operands should be
 * non-negative.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function gmp_hamdist($a, $b) {}

/**
 * Creates a GMP number from an integer or string.
 *
 * @param mixed
 * @param int
 * @return resource
 **/
function gmp_init($number, $base) {}

/**
 * This function allows to convert GMP number to integer.
 *
 * @param resource
 * @return int
 **/
function gmp_intval($gmpnumber) {}

/**
 * Computes the inverse of a modulo b.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_invert($a, $b) {}

/**
 * Computes Jacobi symbol of a and p. p should be odd and must be
 * positive.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function gmp_jacobi($a, $p) {}

/**
 * Compute the
 * 
 * Legendre symbol of a and p. p should be odd and must be positive.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function gmp_legendre($a, $p) {}

/**
 * Calculates n modulo d. The result is always non-negative, the sign of
 * d is ignored.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_mod($n, $d) {}

/**
 * Multiplies a by b and returns the result.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_mul($a, $b) {}

/**
 * Returns the negative value of a number.
 *
 * @param resource
 * @return resource
 **/
function gmp_neg($a) {}

/**
 * Find next prime number
 *
 * @param int
 * @return resource
 **/
function gmp_nextprime($a) {}

/**
 * Calculates bitwise inclusive OR of two GMP numbers.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_or($a, $b) {}

/**
 * Check if a number is a perfect square.
 *
 * @param resource
 * @return bool
 **/
function gmp_perfect_square($a) {}

/**
 * Get the population count.
 *
 * @param resource
 * @return int
 **/
function gmp_popcount($a) {}

/**
 * Raise base into power exp.
 *
 * @param resource
 * @param int
 * @return resource
 **/
function gmp_pow($base, $exp) {}

/**
 * Calculate (base raised into power exp) modulo mod. If exp is negative,
 * result is undefined.
 *
 * @param resource
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_powm($base, $exp, $mod) {}

/**
 * The function uses Miller-Rabin's probabilistic test to check if a
 * number is a prime.
 *
 * @param resource
 * @param int
 * @return int
 **/
function gmp_prob_prime($a, $reps) {}

/**
 * Generate a random number. The number will be between zero and the
 * number of bits per limb multiplied by limiter. If limiter is negative,
 * negative numbers are generated.
 * 
 * A limb is an internal GMP mechanism. The number of bits in a limb is
 * not static, and can vary from system to system. Generally, the number
 * of bits in a limb is either 16 or 32, but this is not guaranteed.
 *
 * @param int
 * @return resource
 **/
function gmp_random($limiter) {}

/**
 * Scans a, starting with bit start, towards more significant bits, until
 * the first clear bit is found.
 *
 * @param resource
 * @param int
 * @return int
 **/
function gmp_scan0($a, $start) {}

/**
 * Scans a, starting with bit start, towards more significant bits, until
 * the first set bit is found.
 *
 * @param resource
 * @param int
 * @return int
 **/
function gmp_scan1($a, $start) {}

/**
 * Sets bit index in a.
 *
 * @param resource
 * @param int
 * @param bool
 * @return void
 **/
function gmp_setbit($a, $index, $set_clear) {}

/**
 * Checks the sign of a number.
 *
 * @param resource
 * @return int
 **/
function gmp_sign($a) {}

/**
 * Calculates square root of a.
 *
 * @param resource
 * @return resource
 **/
function gmp_sqrt($a) {}

/**
 * Calculate the square root of a number, with remainder.
 *
 * @param resource
 * @return array
 **/
function gmp_sqrtrem($a) {}

/**
 * Convert GMP number to string representation in base base. The default
 * base is 10.
 *
 * @param resource
 * @param int
 * @return string
 **/
function gmp_strval($gmpnumber, $base) {}

/**
 * Subtracts b from a and returns the result.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_sub($a, $b) {}

/**
 * Tests if the specified bit is set.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function gmp_testbit($a, $index) {}

/**
 * Calculates bitwise exclusive OR (XOR) of two GMP numbers.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function gmp_xor($a, $b) {}

/**
 * Behaves the same as strftime except that the time returned is
 * Greenwich Mean Time (GMT). For example, when run in Eastern Standard
 * Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00",
 * while the second prints "Jan 01 1999 01:00:00".
 *
 * @param string
 * @param int
 * @return string
 **/
function gmstrftime($format, $timestamp) {}

/**
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function gnupg_adddecryptkey($identifier, $fingerprint, $passphrase) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function gnupg_addencryptkey($identifier, $fingerprint) {}

/**
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function gnupg_addsignkey($identifier, $fingerprint, $passphrase) {}

/**
 * @param resource
 * @return bool
 **/
function gnupg_cleardecryptkeys($identifier) {}

/**
 * @param resource
 * @return bool
 **/
function gnupg_clearencryptkeys($identifier) {}

/**
 * @param resource
 * @return bool
 **/
function gnupg_clearsignkeys($identifier) {}

/**
 * Decrypts the given text with the keys, which were set with
 * gnupg_adddecryptkey before.
 *
 * @param resource
 * @param string
 * @return string
 **/
function gnupg_decrypt($identifier, $text) {}

/**
 * Decrypts and verifies a given text and returns information about the
 * signature.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function gnupg_decryptverify($identifier, $text, &$plaintext) {}

/**
 * Encrypts the given plaintext with the keys, which were set with
 * gnupg_addencryptkey before and returns the encrypted text.
 *
 * @param resource
 * @param string
 * @return string
 **/
function gnupg_encrypt($identifier, $plaintext) {}

/**
 * Encrypts and signs the given plaintext with the keys, which were set
 * with gnupg_addsignkey and gnupg_addencryptkey before and returns the
 * encrypted and signed text.
 *
 * @param resource
 * @param string
 * @return string
 **/
function gnupg_encryptsign($identifier, $plaintext) {}

/**
 * Exports the key fingerprint.
 *
 * @param resource
 * @param string
 * @return string
 **/
function gnupg_export($identifier, $fingerprint) {}

/**
 * @param resource
 * @return string
 **/
function gnupg_geterror($identifier) {}

/**
 * @param resource
 * @return int
 **/
function gnupg_getprotocol($identifier) {}

/**
 * Imports the key keydata and returns an array with information about
 * the importprocess.
 *
 * @param resource
 * @param string
 * @return array
 **/
function gnupg_import($identifier, $keydata) {}

/**
 * @return resource
 **/
function gnupg_init() {}

/**
 * @param resource
 * @param string
 * @return array
 **/
function gnupg_keyinfo($identifier, $pattern) {}

/**
 * Toggle the armored output.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function gnupg_setarmor($identifier, $armor) {}

/**
 * Sets the mode for error_reporting.
 *
 * @param resource
 * @param int
 * @return void
 **/
function gnupg_seterrormode($identifier, $errormode) {}

/**
 * Sets the mode for signing.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function gnupg_setsignmode($identifier, $signmode) {}

/**
 * Signs the given plaintext with the keys, which were set with
 * gnupg_addsignkey before and returns the signed text or the signature,
 * depending on what was set with gnupg_setsignmode.
 *
 * @param resource
 * @param string
 * @return string
 **/
function gnupg_sign($identifier, $plaintext) {}

/**
 * Verifies the given signed_text and returns information about the
 * signature.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function gnupg_verify($identifier, $signed_text, $signature, &$plaintext) {}

/**
 * gopher_parsedir parses a gopher formatted directory entry into an
 * associative array.
 * 
 * While gopher returns text/plain documents for actual document
 * requests. A request to a directory (such as /) will return specially
 * encoded series of lines with each line being one directory entry or
 * information line.
 *
 * @param string
 * @return array
 **/
function gopher_parsedir($dirent) {}

/**
 * Function to extract a sequence of default grapheme clusters from a
 * text buffer, which must be encoded in UTF-8.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function grapheme_extract($haystack, $size, $extract_type, $start, &$next) {}

/**
 * Find position (in grapheme units) of first occurrence of a
 * case-insensitive string
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function grapheme_stripos($haystack, $needle, $offset) {}

/**
 * Returns part of haystack string from the first occurrence of
 * case-insensitive needle to the end of haystack.
 *
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function grapheme_stristr($haystack, $needle, $before_needle) {}

/**
 * Get string length in grapheme units (not bytes or characters)
 *
 * @param string
 * @return int
 **/
function grapheme_strlen($input) {}

/**
 * Find position (in grapheme units) of first occurrence of a string
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function grapheme_strpos($haystack, $needle, $offset) {}

/**
 * Find position (in grapheme units) of last occurrence of a
 * case-insensitive string
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function grapheme_strripos($haystack, $needle, $offset) {}

/**
 * Find position (in grapheme units) of last occurrence of a string
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function grapheme_strrpos($haystack, $needle, $offset) {}

/**
 * Returns part of haystack string from the first occurrence of needle to
 * the end of haystack.
 *
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function grapheme_strstr($haystack, $needle, $before_needle) {}

/**
 * Return part of a string
 *
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function grapheme_substr($string, $start, $length) {}

/**
 * Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.
 * 
 * Although this function can handle dates all the way back to 4714 B.C.,
 * such use may not be meaningful. The Gregorian calendar was not
 * instituted until October 15, 1582 (or October 5, 1582 in the Julian
 * calendar). Some countries did not accept it until much later. For
 * example, Britain converted in 1752, The USSR in 1918 and Greece in
 * 1923. Most European countries used the Julian calendar prior to the
 * Gregorian.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function gregoriantojd($month, $day, $year) {}

/**
 * Get the IP address we advertise ourselves as using.
 *
 * @param resource
 * @return string
 **/
function gupnp_context_get_host_ip($context) {}

/**
 * Get the port that the SOAP server is running on.
 *
 * @param resource
 * @return int
 **/
function gupnp_context_get_port($context) {}

/**
 * Get the event subscription timeout (in seconds), or 0 meaning there is
 * no timeout.
 *
 * @param resource
 * @return int
 **/
function gupnp_context_get_subscription_timeout($context) {}

/**
 * Start hosting local_path at server_path. Files with the path
 * local_path.LOCALE (if they exist) will be served up when LOCALE is
 * specified in the request's Accept-Language header.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function gupnp_context_host_path($context, $local_path, $server_path) {}

/**
 * Create a new context with the specified host_ip and port.
 *
 * @param string
 * @param int
 * @return resource
 **/
function gupnp_context_new($host_ip, $port) {}

/**
 * Sets the event subscription timeout (in seconds) to time out. Note
 * that any client side subscriptions will automatically be renewed.
 *
 * @param resource
 * @param int
 * @return void
 **/
function gupnp_context_set_subscription_timeout($context, $timeout) {}

/**
 * Sets a function to be called at regular intervals.
 *
 * @param int
 * @param mixed
 * @param mixed
 * @return bool
 **/
function gupnp_context_timeout_add($timeout, $callback, $arg) {}

/**
 * Stop hosting the file or folder at server_path.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function gupnp_context_unhost_path($context, $server_path) {}

/**
 * Start the search and calls user-defined callback.
 *
 * @param resource
 * @return bool
 **/
function gupnp_control_point_browse_start($cpoint) {}

/**
 * Stop the search and calls user-defined callback.
 *
 * @param resource
 * @return bool
 **/
function gupnp_control_point_browse_stop($cpoint) {}

/**
 * Set control point callback function for signal.
 *
 * @param resource
 * @param int
 * @param mixed
 * @param mixed
 * @return bool
 **/
function gupnp_control_point_callback_set($cpoint, $signal, $callback, $arg) {}

/**
 * Create a new control point with the specified target.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function gupnp_control_point_new($context, $target) {}

/**
 * Set device callback function for signal and action.
 *
 * @param resource
 * @param int
 * @param string
 * @param mixed
 * @param mixed
 * @return bool
 **/
function gupnp_device_action_callback_set($root_device, $signal, $action_name, $callback, $arg) {}

/**
 * Get info of root device.
 *
 * @param resource
 * @return array
 **/
function gupnp_device_info_get($root_device) {}

/**
 * Get the service with type or false if no such device was found.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function gupnp_device_info_get_service($root_device, $type) {}

/**
 * Get whether or not root_device is available (announcing its presence).
 *
 * @param resource
 * @return bool
 **/
function gupnp_root_device_get_available($root_device) {}

/**
 * Get the relative location of root device.
 *
 * @param resource
 * @return string
 **/
function gupnp_root_device_get_relative_location($root_device) {}

/**
 * Create a new root device, automatically downloading and parsing
 * location.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function gupnp_root_device_new($context, $location) {}

/**
 * Controls whether or not root_device is available (announcing its
 * presence).
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function gupnp_root_device_set_available($root_device, $available) {}

/**
 * Start root server's main loop.
 *
 * @param resource
 * @return bool
 **/
function gupnp_root_device_start($root_device) {}

/**
 * Stop root server's main loop.
 *
 * @param resource
 * @return bool
 **/
function gupnp_root_device_stop($root_device) {}

/**
 * Retrieves the specified action arguments.
 *
 * @param resource
 * @param string
 * @param int
 * @return mixed
 **/
function gupnp_service_action_get($action, $name, $type) {}

/**
 * Return succesfully.
 *
 * @param resource
 * @return bool
 **/
function gupnp_service_action_return($action) {}

/**
 * Return error code.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function gupnp_service_action_return_error($action, $error_code, $error_description) {}

/**
 * Sets the specified action return values.
 *
 * @param resource
 * @param string
 * @param int
 * @param mixed
 * @return bool
 **/
function gupnp_service_action_set($action, $name, $type, $value) {}

/**
 * Causes new notifications to be queued up until
 * gupnp_service_thaw_notify is called.
 *
 * @param resource
 * @return bool
 **/
function gupnp_service_freeze_notify($service) {}

/**
 * Get full info of service.
 *
 * @param resource
 * @return array
 **/
function gupnp_service_info_get($proxy) {}

/**
 * Get resource introspection of service or register callback if
 * corresponding parameter was passed.
 *
 * @param resource
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function gupnp_service_info_get_introspection($proxy, $callback, $arg) {}

/**
 * Returns the state variable data by the name variable_name in this
 * service.
 *
 * @param resource
 * @param string
 * @return array
 **/
function gupnp_service_introspection_get_state_variable($introspection, $variable_name) {}

/**
 * Notifies listening clients that the property have changed to the
 * specified values.
 *
 * @param resource
 * @param string
 * @param int
 * @param mixed
 * @return bool
 **/
function gupnp_service_notify($service, $name, $type, $value) {}

/**
 * Send action with parameters to the service exposed by proxy
 * synchronously and get value.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function gupnp_service_proxy_action_get($proxy, $action, $name, $type) {}

/**
 * Send action with parameters to the service exposed by proxy
 * synchronously and set value.
 *
 * @param resource
 * @param string
 * @param string
 * @param mixed
 * @param string
 * @return bool
 **/
function gupnp_service_proxy_action_set($proxy, $action, $name, $value, $type) {}

/**
 * Sets up callback to be called whenever a change notification for
 * variable is recieved.
 *
 * @param resource
 * @param string
 * @param int
 * @param mixed
 * @param mixed
 * @return bool
 **/
function gupnp_service_proxy_add_notify($proxy, $value, $type, $callback, $arg) {}

/**
 * Set service proxy callback for signal.
 *
 * @param resource
 * @param int
 * @param mixed
 * @param mixed
 * @return bool
 **/
function gupnp_service_proxy_callback_set($proxy, $signal, $callback, $arg) {}

/**
 * Check whether subscription is valid to the service.
 *
 * @param resource
 * @return bool
 **/
function gupnp_service_proxy_get_subscribed($proxy) {}

/**
 * Cancels the variable change notification.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function gupnp_service_proxy_remove_notify($proxy, $value) {}

/**
 * Send action action with parameters in_params to the service exposed by
 * proxy synchronously and return out_params with values or on error.
 *
 * @param resource
 * @param string
 * @param array
 * @param array
 * @return bool
 **/
function gupnp_service_proxy_send_action($proxy, $action, $in_params, $out_params) {}

/**
 * (Un)subscribes to the service.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function gupnp_service_proxy_set_subscribed($proxy, $subscribed) {}

/**
 * Sends out any pending notifications and stops queuing of new ones.
 *
 * @param resource
 * @return bool
 **/
function gupnp_service_thaw_notify($service) {}

/**
 * Closes the given gz-file pointer.
 *
 * @param resource
 * @return bool
 **/
function gzclose($zp) {}

/**
 * This function compress the given string using the ZLIB data format.
 * 
 * For details on the ZLIB compression algorithm see the document "ZLIB
 * Compressed Data Format Specification version 3.3" (RFC 1950).
 *
 * @param string
 * @param int
 * @return string
 **/
function gzcompress($data, $level) {}

/**
 * This function returns a decoded version of the input data.
 *
 * @param string
 * @param int
 * @return string
 **/
function gzdecode($data, $length) {}

/**
 * This function compress the given string using the DEFLATE data format.
 * 
 * For details on the DEFLATE compression algorithm see the document
 * "DEFLATE Compressed Data Format Specification version 1.3" (RFC 1951).
 *
 * @param string
 * @param int
 * @return string
 **/
function gzdeflate($data, $level) {}

/**
 * This function returns a compressed version of the input data
 * compatible with the output of the gzip program.
 * 
 * For more information on the GZIP file format, see the document: GZIP
 * file format specification version 4.3 (RFC 1952).
 *
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function gzencode($data, $level, $encoding_mode) {}

/**
 * Tests the given GZ file pointer for EOF.
 *
 * @param resource
 * @return int
 **/
function gzeof($zp) {}

/**
 * This function is identical to readgzfile, except that it returns the
 * file in an array.
 *
 * @param string
 * @param int
 * @return array
 **/
function gzfile($filename, $use_include_path) {}

/**
 * Returns a string containing a single (uncompressed) character read
 * from the given gz-file pointer.
 *
 * @param resource
 * @return string
 **/
function gzgetc($zp) {}

/**
 * Gets a (uncompressed) string of up to length - 1 bytes read from the
 * given file pointer. Reading ends when length - 1 bytes have been read,
 * on a newline, or on EOF (whichever comes first).
 *
 * @param resource
 * @param int
 * @return string
 **/
function gzgets($zp, $length) {}

/**
 * Identical to gzgets, except that gzgetss attempts to strip any HTML
 * and PHP tags from the text it reads.
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function gzgetss($zp, $length, $allowable_tags) {}

/**
 * This function inflate a deflated string.
 *
 * @param string
 * @param int
 * @return string
 **/
function gzinflate($data, $length) {}

/**
 * Opens a gzip (.gz) file for reading or writing.
 * 
 * gzopen can be used to read a file which is not in gzip format; in this
 * case gzread will directly read from the file without decompression.
 *
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function gzopen($filename, $mode, $use_include_path) {}

/**
 * Reads to EOF on the given gz-file pointer from the current position
 * and writes the (uncompressed) results to standard output.
 *
 * @param resource
 * @return int
 **/
function gzpassthru($zp) {}

/**
 * gzputs writes the contents of string to the given gz-file.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function gzputs($zp, $string, $length) {}

/**
 * gzread reads up to length bytes from the given gz-file pointer.
 * Reading stops when length (uncompressed) bytes have been read or EOF
 * is reached, whichever comes first.
 *
 * @param resource
 * @param int
 * @return string
 **/
function gzread($zp, $length) {}

/**
 * Sets the file position indicator of the given gz-file pointer to the
 * beginning of the file stream.
 *
 * @param resource
 * @return bool
 **/
function gzrewind($zp) {}

/**
 * Sets the file position indicator for the given file pointer to the
 * given offset byte into the file stream. Equivalent to calling (in C)
 * gzseek(zp, offset, SEEK_SET).
 * 
 * If the file is opened for reading, this function is emulated but can
 * be extremely slow. If the file is opened for writing, only forward
 * seeks are supported; gzseek then compresses a sequence of zeroes up to
 * the new starting position.
 *
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function gzseek($zp, $offset, $whence) {}

/**
 * Gets the position of the given file pointer; i.e., its offset into the
 * uncompressed file stream.
 *
 * @param resource
 * @return int
 **/
function gztell($zp) {}

/**
 * This function uncompress a compressed string.
 *
 * @param string
 * @param int
 * @return string
 **/
function gzuncompress($data, $length) {}

/**
 * gzwrite writes the contents of string to the given gz-file.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function gzwrite($zp, $string, $length) {}

/**
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function hash($algo, $data, $raw_output) {}

/**
 * @return array
 **/
function hash_algos() {}

/**
 * @param resource
 * @return resource
 **/
function hash_copy($context) {}

/**
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function hash_file($algo, $filename, $raw_output) {}

/**
 * @param resource
 * @param bool
 * @return string
 **/
function hash_final($context, $raw_output) {}

/**
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function hash_hmac($algo, $data, $key, $raw_output) {}

/**
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function hash_hmac_file($algo, $filename, $key, $raw_output) {}

/**
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function hash_init($algo, $options, $key) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function hash_update($context, $data) {}

/**
 * @param resource
 * @param string
 * @param resource
 * @return bool
 **/
function hash_update_file($context, $filename, $context) {}

/**
 * @param resource
 * @param resource
 * @param int
 * @return int
 **/
function hash_update_stream($context, $handle, $length) {}

/**
 * header is used to send a raw HTTP header. See the HTTP/1.1
 * specification for more information on HTTP headers.
 * 
 * Remember that header must be called before any actual output is sent,
 * either by normal HTML tags, blank lines in a file, or from PHP. It is
 * a very common error to read code with include, or require, functions,
 * or another file access function, and have spaces or empty lines that
 * are output before header is called. The same problem exists when using
 * a single PHP/HTML file.
 *
 * @param string
 * @param bool
 * @param int
 * @return void
 **/
function header($string, $replace, $http_response_code) {}

/**
 * headers_list will return a list of headers to be sent to the browser /
 * client. To determine whether or not these headers have been sent yet,
 * use headers_sent.
 *
 * @return array
 **/
function headers_list() {}

/**
 * Checks if or where headers have been sent.
 * 
 * You can't add any more header lines using the header function once the
 * header block has already been sent. Using this function you can at
 * least prevent getting HTTP header related error messages. Another
 * option is to use Output Buffering.
 *
 * @param string
 * @param int
 * @return bool
 **/
function headers_sent(&$file, &$line) {}

/**
 * Removes an HTTP header previously set using header.
 *
 * @param string
 * @return void
 **/
function header_remove($name) {}

/**
 * Converts logical Hebrew text to visual text.
 * 
 * The function tries to avoid breaking words.
 *
 * @param string
 * @param int
 * @return string
 **/
function hebrev($hebrew_text, $max_chars_per_line) {}

/**
 * This function is similar to hebrev with the difference that it
 * converts newlines (\n) to "br\n".
 * 
 * The function tries to avoid breaking words.
 *
 * @param string
 * @param int
 * @return string
 **/
function hebrevc($hebrew_text, $max_chars_per_line) {}

/**
 * Returns the decimal equivalent of the hexadecimal number represented
 * by the hex_string argument. hexdec converts a hexadecimal string to a
 * decimal number.
 * 
 * hexdec will ignore any non-hexadecimal characters it encounters.
 *
 * @param string
 * @return number
 **/
function hexdec($hex_string) {}

/**
 * Prints out or returns a syntax highlighted version of the code
 * contained in filename using the colors defined in the built-in syntax
 * highlighter for PHP.
 * 
 * Many servers are configured to automatically highlight files with a
 * phps extension. For example, example.phps when viewed will show the
 * syntax highlighted source of the file. To enable this, add this line
 * to the :
 *
 * @param string
 * @param bool
 * @return mixed
 **/
function highlight_file($filename, $return) {}

/**
 * @param string
 * @param bool
 * @return mixed
 **/
function highlight_string($str, $return) {}

/**
 * This function is identical to htmlspecialchars in all ways, except
 * with htmlentities, all characters which have HTML character entity
 * equivalents are translated into these entities.
 * 
 * If you're wanting to decode instead (the reverse) you can use
 * html_entity_decode.
 *
 * @param string
 * @param int
 * @param string
 * @param bool
 * @return string
 **/
function htmlentities($string, $quote_style, $charset, $double_encode) {}

/**
 * Certain characters have special significance in HTML, and should be
 * represented by HTML entities if they are to preserve their meanings.
 * This function returns a string with some of these conversions made;
 * the translations made are those most useful for everyday web
 * programming. If you require all HTML character entities to be
 * translated, use htmlentities instead.
 * 
 * The translations performed are:
 * 
 * '' (ampersand) becomes 'amp;'
 * 
 * '' (double quote) becomes 'quot;' when ENT_NOQUOTES is not set.
 * 
 * ''' (single quote) becomes '#039;' only when ENT_QUOTES is set.
 * 
 * '' (less than) becomes 'lt;'
 * 
 * '' (greater than) becomes 'gt;'
 *
 * @param string
 * @param int
 * @param string
 * @param bool
 * @return string
 **/
function htmlspecialchars($string, $quote_style, $charset, $double_encode) {}

/**
 * This function is the opposite of htmlspecialchars. It converts special
 * HTML entities back to characters.
 * 
 * The converted entities are: amp;, quot; (when ENT_NOQUOTES is not
 * set), #039; (when ENT_QUOTES is set), lt; and gt;.
 *
 * @param string
 * @param int
 * @return string
 **/
function htmlspecialchars_decode($string, $quote_style) {}

/**
 * html_entity_decode is the opposite of htmlentities in that it converts
 * all HTML entities to their applicable characters from string.
 *
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function html_entity_decode($string, $quote_style, $charset) {}

/**
 * Build a cookie string from an array/object like returned by
 * http_parse_cookie.
 *
 * @param array
 * @return string
 **/
function http_build_cookie($cookie) {}

/**
 * Generates a URL-encoded query string from the associative (or indexed)
 * array provided.
 *
 * @param array
 * @param string
 * @param string
 * @return string
 **/
function http_build_query($formdata, $numeric_prefix, $arg_separator) {}

/**
 * Opponent to parse_str().
 *
 * @param array
 * @param string
 * @param string
 * @return string
 **/
function http_build_str($query, $prefix, $arg_separator) {}

/**
 * Build an URL.
 * 
 * The parts of the second URL will be merged into the first according to
 * the flags argument.
 *
 * @param mixed
 * @param mixed
 * @param int
 * @param array
 * @return string
 **/
function http_build_url($url, $parts, $flags, &$new_url) {}

/**
 * Attempts to cache the sent entity by its ETag, either supplied or
 * generated by the hash algorithm specified by the http.etag.mode.
 * 
 * If the clients If-None-Match header matches the supplied/calculated
 * ETag, the body is considered cached on the clients side and a 304 Not
 * Modified status code is issued.
 * 
 * A log entry is written to the cache log if the http.log.cache is set
 * and the cache attempt was successful.
 * 
 * If this function is used outside the http_send_*() API, it facilitates
 * the ob_etaghandler.
 *
 * @param string
 * @return bool
 **/
function http_cache_etag($etag) {}

/**
 * Attempts to cache the sent entity by its last modification date.
 * 
 * If the supplied argument is greater than 0, it is handled as timestamp
 * and will be sent as date of last modification. If it is 0 or omitted,
 * the current time will be sent as Last-Modified date. If it's negative,
 * it is handled as expiration time in seconds, which means that if the
 * requested last modification date is not between the calculated
 * timespan, the Last-Modified header is updated and the actual body will
 * be sent.
 * 
 * A log entry will be written to the cache log if the http.log.cache is
 * set and the cache attempt was successful.
 *
 * @param int
 * @return bool
 **/
function http_cache_last_modified($timestamp_or_expires) {}

/**
 * Decodes a string which is HTTP-chunked encoded.
 *
 * @param string
 * @return string
 **/
function http_chunked_decode($encoded) {}

/**
 * Compose a valid HTTP date regarding RFC 1123 looking like: Wed, 22 Dec
 * 2004 11:34:47 GMT.
 *
 * @param int
 * @return string
 **/
function http_date($timestamp) {}

/**
 * Compress data with gzip, zlib AKA deflate or raw deflate encoding.
 * 
 * See the deflate constants table for possible values for the flags
 * parameter.
 *
 * @param string
 * @param int
 * @return string
 **/
function http_deflate($data, $flags) {}

/**
 * Performs an HTTP GET request on the supplied url.
 *
 * @param string
 * @param array
 * @param array
 * @return string
 **/
function http_get($url, $options, &$info) {}

/**
 * Get the raw request body (e.g. POST or PUT data).
 * 
 * This function can not be used after http_get_request_body_stream if
 * the request method was another than POST.
 *
 * @return string
 **/
function http_get_request_body() {}

/**
 * Create a stream to read the raw request body (e.g. POST or PUT data).
 * 
 * This function can only be used once if the request method was another
 * than POST.
 *
 * @return resource
 **/
function http_get_request_body_stream() {}

/**
 * Get a list of incoming HTTP headers.
 *
 * @return array
 **/
function http_get_request_headers() {}

/**
 * Performs an HTTP HEAD request on the supplied url.
 *
 * @param string
 * @param array
 * @param array
 * @return string
 **/
function http_head($url, $options, &$info) {}

/**
 * Decompress data compressed with either gzip, deflate AKA zlib or raw
 * deflate encoding.
 *
 * @param string
 * @return string
 **/
function http_inflate($data) {}

/**
 * Matches the given ETag against the clients If-Match resp.
 * If-None-Match HTTP headers.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function http_match_etag($etag, $for_range) {}

/**
 * Matches the given Unix timestamp against the clients If-Modified-Since
 * resp. If-Unmodified-Since HTTP headers.
 *
 * @param int
 * @param bool
 * @return bool
 **/
function http_match_modified($timestamp, $for_range) {}

/**
 * Match an incoming HTTP header.
 *
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function http_match_request_header($header, $value, $match_case) {}

/**
 * This function negotiates the clients preferred charset based on its
 * Accept-Charset HTTP header. The qualifier is recognized and charsets
 * without qualifier are rated highest.
 *
 * @param array
 * @param array
 * @return string
 **/
function http_negotiate_charset($supported, &$result) {}

/**
 * This function negotiates the clients preferred content type based on
 * its Accept HTTP header. The qualifier is recognized and content types
 * without qualifier are rated highest.
 *
 * @param array
 * @param array
 * @return string
 **/
function http_negotiate_content_type($supported, &$result) {}

/**
 * This function negotiates the clients preferred language based on its
 * Accept-Language HTTP header. The qualifier is recognized and languages
 * without qualifier are rated highest. The qualifier will be decreased
 * by 10% for partial matches (i.e. matching primary language).
 *
 * @param array
 * @param array
 * @return string
 **/
function http_negotiate_language($supported, &$result) {}

/**
 * Parses HTTP cookies like sent in a response into a struct.
 *
 * @param string
 * @param int
 * @param array
 * @return object
 **/
function http_parse_cookie($cookie, $flags, $allowed_extras) {}

/**
 * Parses HTTP headers into an associative array.
 *
 * @param string
 * @return array
 **/
function http_parse_headers($header) {}

/**
 * Parses the HTTP message into a simple recursive object.
 *
 * @param string
 * @return object
 **/
function http_parse_message($message) {}

/**
 * Parse parameter list.
 * 
 * See the params parsing constants table for possible values of the
 * flags argument.
 *
 * @param string
 * @param int
 * @return object
 **/
function http_parse_params($param, $flags) {}

/**
 * Clean up (close) persistent handles, optionally identified with ident.
 *
 * @param string
 * @return string
 **/
function http_persistent_handles_clean($ident) {}

/**
 * List statistics about persistent handles usage.
 *
 * @return object
 **/
function http_persistent_handles_count() {}

/**
 * Query or define the ident of persistent handles.
 *
 * @param string
 * @return string
 **/
function http_persistent_handles_ident($ident) {}

/**
 * Performs an HTTP POST request on the supplied url.
 *
 * @param string
 * @param string
 * @param array
 * @param array
 * @return string
 **/
function http_post_data($url, $data, $options, &$info) {}

/**
 * Performs an HTTP POST request on the supplied url.
 *
 * @param string
 * @param array
 * @param array
 * @param array
 * @param array
 * @return string
 **/
function http_post_fields($url, $data, $files, $options, &$info) {}

/**
 * Performs an HTTP PUT request on the supplied url.
 *
 * @param string
 * @param string
 * @param array
 * @param array
 * @return string
 **/
function http_put_data($url, $data, $options, &$info) {}

/**
 * Performs an HTTP PUT request on the supplied url.
 *
 * @param string
 * @param string
 * @param array
 * @param array
 * @return string
 **/
function http_put_file($url, $file, $options, &$info) {}

/**
 * Performs an HTTP PUT request on the supplied url.
 *
 * @param string
 * @param resource
 * @param array
 * @param array
 * @return string
 **/
function http_put_stream($url, $stream, $options, &$info) {}

/**
 * Redirect to the given url.
 * 
 * The supplied url will be expanded with http_build_url, the params
 * array will be treated with http_build_str and the session
 * identification will be appended if session is true. The HTTP response
 * code will be set according to status. You can use one of the redirect
 * constants for convenience. Please see RFC 2616 for which redirect
 * response code to use in which situation. By default PHP will decide
 * which response status fits best.
 * 
 * To be RFC compliant, Redirecting to aURL/a. will be displayed, if the
 * client doesn't redirect immediately, and the request method was
 * another one than HEAD.
 * 
 * A log entry will be written to the redirect log, if the
 * http.log.redirect is set and the redirect attempt was successful.
 *
 * @param string
 * @param array
 * @param bool
 * @param int
 * @return void
 **/
function http_redirect($url, $params, $session, $status) {}

/**
 * Performs a custom HTTP request on the supplied url.
 *
 * @param int
 * @param string
 * @param string
 * @param array
 * @param array
 * @return string
 **/
function http_request($method, $url, $body, $options, &$info) {}

/**
 * Generate x-www-form-urlencoded resp. form-data encoded request body.
 *
 * @param array
 * @param array
 * @return string
 **/
function http_request_body_encode($fields, $files) {}

/**
 * Check if a request method is registered (or available by default).
 *
 * @param mixed
 * @return int
 **/
function http_request_method_exists($method) {}

/**
 * Get the literal string representation of a standard or registered
 * request method.
 *
 * @param int
 * @return string
 **/
function http_request_method_name($method) {}

/**
 * Register a custom request method.
 *
 * @param string
 * @return int
 **/
function http_request_method_register($method) {}

/**
 * Unregister a previously registered custom request method.
 *
 * @param mixed
 * @return bool
 **/
function http_request_method_unregister($method) {}

/**
 * Send the Content-Disposition.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function http_send_content_disposition($filename, $inline) {}

/**
 * Send the Content-Type of the sent entity.
 *
 * @param string
 * @return bool
 **/
function http_send_content_type($content_type) {}

/**
 * Sends raw data with support for (multiple) range requests.
 *
 * @param string
 * @return bool
 **/
function http_send_data($data) {}

/**
 * Sends a file with support for (multiple) range requests.
 * 
 * This functions behaviour and further action is dependent on the
 * following s: http.send.not_found_404 http.log.not_found.
 * 
 * If the http.send.not_found_404 is enabled and the http.log.not_found
 * points to a writable file, a log message is written when the file was
 * not found.
 *
 * @param string
 * @return bool
 **/
function http_send_file($file) {}

/**
 * Send a Last-Modified header with a valid HTTP date.
 *
 * @param int
 * @return bool
 **/
function http_send_last_modified($timestamp) {}

/**
 * Send HTTP status code.
 *
 * @param int
 * @return bool
 **/
function http_send_status($status) {}

/**
 * Sends an already opened stream with support for (multiple) range
 * requests.
 *
 * @param resource
 * @return bool
 **/
function http_send_stream($stream) {}

/**
 * Check for features that require external libraries.
 * 
 * See the feature support constants table for possible values for the
 * feature argument.
 *
 * @param int
 * @return int
 **/
function http_support($feature) {}

/**
 * Sets the throttle delay and send buffer size.
 *
 * @param float
 * @param int
 * @return void
 **/
function http_throttle($sec, $bytes) {}

/**
 * Opens a connection to the Hyperwave server on host hostname. The
 * protocol used is HGCSP.
 *
 * @param string
 * @param int
 * @return HW_API
 **/
function hwapi_hgcsp($hostname, $port) {}

/**
 * Creates a new instance of hw_api_attribute with the given name and
 * value.
 *
 * @param string
 * @param string
 * @return HW_API_Attribute
 **/
function hw_api_attribute($name, $value) {}

/**
 * Creates a new content object from the string content.
 *
 * @param string
 * @param string
 * @return HW_API_Content
 **/
function hw_api_content($content, $mimetype) {}

/**
 * Creates a new instance of the class hw_api_object.
 *
 * @param array
 * @return hw_api_object
 **/
function hw_api_object($parameter) {}

/**
 * Converts an object_array into an object record. Multiple attributes
 * like 'Title' in different languages are treated properly.
 *
 * @param array
 * @return string
 **/
function hw_array2objrec($object_array) {}

/**
 * @param int
 * @param int
 * @param array
 * @return bool
 **/
function hw_changeobject($link, $objid, $attributes) {}

/**
 * Returns the identifiers of the collection children.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_children($connection, $objectID) {}

/**
 * Returns the object records of the collection children.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_childrenobj($connection, $objectID) {}

/**
 * Closes down the connection to a Hyperwave server.
 *
 * @param int
 * @return bool
 **/
function hw_close($connection) {}

/**
 * Opens a connection to a Hyperwave server. You can have multiple
 * connections open at once.
 *
 * @param string
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function hw_connect($host, $port, $username, $password) {}

/**
 * @param int
 * @return void
 **/
function hw_connection_info($link) {}

/**
 * Copies the objects with object ids as specified in the second
 * parameter to the collection with the id destination id.
 *
 * @param int
 * @param array
 * @param int
 * @return int
 **/
function hw_cp($connection, $object_id_array, $destination_id) {}

/**
 * Deletes the object with the given object id in the second parameter.
 * It will delete all instances of the object.
 *
 * @param int
 * @param int
 * @return bool
 **/
function hw_deleteobject($connection, $object_to_delete) {}

/**
 * Returns an th object id of the document to which anchorID belongs.
 *
 * @param int
 * @param int
 * @return int
 **/
function hw_docbyanchor($connection, $anchorID) {}

/**
 * Returns an th object record of the document to which anchorID belongs.
 *
 * @param int
 * @param int
 * @return string
 **/
function hw_docbyanchorobj($connection, $anchorID) {}

/**
 * Returns the object record of the document.
 * 
 * For backward compatibility, hw_documentattributes is also accepted.
 * This is deprecated, however.
 *
 * @param int
 * @return string
 **/
function hw_document_attributes($hw_document) {}

/**
 * Returns the BODY tag of the document. If the document is an HTML
 * document the BODY tag should be printed before the document.
 * 
 * For backward compatibility, hw_documentbodytag is also accepted. This
 * is deprecated, however.
 *
 * @param int
 * @param string
 * @return string
 **/
function hw_document_bodytag($hw_document, $prefix) {}

/**
 * Gets the content of the document.
 *
 * @param int
 * @return string
 **/
function hw_document_content($hw_document) {}

/**
 * Sets or replaces the content of the document. If the document is an
 * HTML document the content is everything after the BODY tag.
 * Information from the HEAD and BODY tag is in the stored in the object
 * record. If you provide this information in the content of the document
 * too, the Hyperwave server will change the object record accordingly
 * when the document is inserted. Probably not a very good idea. If this
 * functions fails the document will retain its old content.
 *
 * @param int
 * @param string
 * @return bool
 **/
function hw_document_setcontent($hw_document, $content) {}

/**
 * Gets the size of the document.
 * 
 * For backward compatibility, hw_documentsize is also accepted. This is
 * deprecated, however.
 *
 * @param int
 * @return int
 **/
function hw_document_size($hw_document) {}

/**
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function hw_dummy($link, $id, $msgid) {}

/**
 * Uploads the text document to the server. The object record of the
 * document may not be modified while the document is edited.
 * 
 * This function will only works for pure text documents. It will not
 * open a special data connection and therefore blocks the control
 * connection during the transfer.
 *
 * @param int
 * @param int
 * @return bool
 **/
function hw_edittext($connection, $hw_document) {}

/**
 * Returns the last error number, for the last command.
 *
 * @param int
 * @return int
 **/
function hw_error($connection) {}

/**
 * Returns a string containing the last error message related to the last
 * command.
 *
 * @param int
 * @return string
 **/
function hw_errormsg($connection) {}

/**
 * Frees the memory occupied by the Hyperwave document.
 *
 * @param int
 * @return bool
 **/
function hw_free_document($hw_document) {}

/**
 * Returns an array of object ids with anchors of the specified document.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getanchors($connection, $objectID) {}

/**
 * Returns records with anchors of the document with object ID objectID.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getanchorsobj($connection, $objectID) {}

/**
 * Returns the object record for the object with ID objectID. It will
 * also lock the object, so other users cannot access it until it is
 * unlocked.
 *
 * @param int
 * @param int
 * @return string
 **/
function hw_getandlock($connection, $objectID) {}

/**
 * Returns object ids. Each object ID belongs to a child collection of
 * the collection with ID objectID. The function will not return child
 * documents.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getchildcoll($connection, $objectID) {}

/**
 * Returns object records. Each object records belongs to a child
 * collection of the collection with ID objectID. The function will not
 * return child documents.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getchildcollobj($connection, $objectID) {}

/**
 * Returns array of object ids for child documents of a collection.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getchilddoccoll($connection, $objectID) {}

/**
 * Returns an array of object records for child documents of a
 * collection.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getchilddoccollobj($connection, $objectID) {}

/**
 * Gets an object record. If the second parameter is an array of integer
 * the function will
 *
 * @param int
 * @param mixed
 * @param string
 * @return mixed
 **/
function hw_getobject($connection, $objectID, $query) {}

/**
 * Searches for objects on the whole server and returns an array of
 * object ids.
 *
 * @param int
 * @param string
 * @param int
 * @return array
 **/
function hw_getobjectbyquery($connection, $query, $max_hits) {}

/**
 * Searches for objects in collection with ID objectID and returns an
 * array of object ids.
 *
 * @param int
 * @param int
 * @param string
 * @param int
 * @return array
 **/
function hw_getobjectbyquerycoll($connection, $objectID, $query, $max_hits) {}

/**
 * Searches for objects in collection with ID objectID and returns an
 * array of object records.
 *
 * @param int
 * @param int
 * @param string
 * @param int
 * @return array
 **/
function hw_getobjectbyquerycollobj($connection, $objectID, $query, $max_hits) {}

/**
 * Searches for objects on the whole server and returns an array of
 * object records.
 *
 * @param int
 * @param string
 * @param int
 * @return array
 **/
function hw_getobjectbyqueryobj($connection, $query, $max_hits) {}

/**
 * Returns the object identifiers of the parents of an object.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getparents($connection, $objectID) {}

/**
 * Returns object records and statistical information about the object
 * records. Each object record belongs to a parent of the object with ID
 * objectID.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getparentsobj($connection, $objectID) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function hw_getrellink($link, $rootid, $sourceid, $destid) {}

/**
 * Gets a remote document.
 * 
 * Remote documents in Hyperwave notation are documents retrieved from an
 * external source. Common remote documents are for example external web
 * pages or queries in a database.
 * 
 * In order to be able to access external sources through remote
 * documents Hyperwave introduces the HGI (Hyperwave Gateway Interface)
 * which is similar to the CGI. Currently, only ftp, http-servers and
 * some databases can be accessed by the HGI.
 * 
 * Calling hw_getremote returns the document from the external source. If
 * you want to use this function you should be very familiar with HGIs.
 * You should also consider to use PHP instead of Hyperwave to access
 * external sources. Adding database support by a Hyperwave gateway
 * should be more difficult than doing it in PHP.
 *
 * @param int
 * @param int
 * @return int
 **/
function hw_getremote($connection, $objectID) {}

/**
 * Returns the children of a remote document. Children of a remote
 * document are remote documents itself. This makes sense if a database
 * query has to be narrowed and is explained in Hyperwave Programmers'
 * Guide.
 * 
 * If you want to use this function you should be very familiar with
 * HGIs. You should also consider to use PHP instead of Hyperwave to
 * access external sources. Adding database support by a Hyperwave
 * gateway should be more difficult than doing it in PHP.
 *
 * @param int
 * @param string
 * @return mixed
 **/
function hw_getremotechildren($connection, $object_record) {}

/**
 * Gets the object records of all anchors pointing to the object with ID
 * objectID.
 *
 * @param int
 * @param int
 * @return array
 **/
function hw_getsrcbydestobj($connection, $objectID) {}

/**
 * Returns the document with object ID objectID. If the document has
 * anchors which can be inserted, they will be inserted already.
 * 
 * This function will only work for pure text documents. It will not open
 * a special data connection and therefore blocks the control connection
 * during the transfer.
 *
 * @param int
 * @param int
 * @param mixed
 * @return int
 **/
function hw_gettext($connection, $objectID, $rootIDprefix) {}

/**
 * Returns the username of the connection.
 *
 * @param int
 * @return string
 **/
function hw_getusername($connection) {}

/**
 * Identifies as user with username and password. Identification is only
 * valid for the current session. I do not think this function will be
 * needed very often. In most cases it will be easier to identify with
 * the opening of the connection.
 *
 * @param int
 * @param string
 * @param string
 * @return string
 **/
function hw_identify($link, $username, $password) {}

/**
 * Checks whether a set of objects (documents or collections) specified
 * by the object_id_array is part of the collections listed in
 * collection_id_array.
 *
 * @param int
 * @param array
 * @param array
 * @param int
 * @return array
 **/
function hw_incollections($connection, $object_id_array, $collection_id_array, $return_collections) {}

/**
 * Returns information about the current connection.
 *
 * @param int
 * @return string
 **/
function hw_info($connection) {}

/**
 * Inserts a new collection with attributes as in object_array into
 * collection with object ID objectID.
 *
 * @param int
 * @param int
 * @param array
 * @return int
 **/
function hw_inscoll($connection, $objectID, $object_array) {}

/**
 * Inserts a new document with attributes as in object_record into
 * acollection.
 * 
 * If you want to insert a general document of any kind use
 * hw_insertdocument instead.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function hw_insdoc($connection, $parentID, $object_record, $text) {}

/**
 * @param int
 * @param array
 * @param array
 * @param array
 * @return bool
 **/
function hw_insertanchors($hwdoc, $anchorecs, $dest, $urlprefixes) {}

/**
 * Uploads a document into the given collection.
 * 
 * The document has to be created before with hw_new_document. Make sure
 * that the object record of the new document contains at least the
 * attributes: Type, DocumentType, Title and Name. Possibly you also want
 * to set the MimeType.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function hw_insertdocument($connection, $parent_id, $hw_document) {}

/**
 * Inserts an object into the server.
 * 
 * Note: If you want to insert an Anchor, the attribute Position has
 * always been set either to a start/end value or to 'invisible'.
 * Invisible positions are needed if the annotation has no corresponding
 * link in the annotation text.
 *
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function hw_insertobject($connection, $object_rec, $parameter) {}

/**
 * Maps a global object id on any hyperwave server, even those you did
 * not connect to with hw_connect, onto a virtual object id.
 * 
 * This virtual object id can then be used as any other object id, e.g.
 * to obtain the object record with hw_getobject.
 * 
 * Note: In order to use this function you will have to set the
 * F_DISTRIBUTED flag, which can currently only be set at compile time in
 * hg_comm.c. It is not set by default. Read the comment at the beginning
 * of hg_comm.c
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function hw_mapid($connection, $server_id, $object_id) {}

/**
 * This command allows to remove, add, or modify individual attributes of
 * an object record. The object is specified by the Object ID
 * object_to_change. In order to modify an attribute one will have to
 * remove the old one and add a new one. hw_modifyobject will always
 * remove the attributes before it adds attributes unless the value of
 * the attribute to remove is not a string or array.
 * 
 * The keys of both arrays are the attributes name. The value of each
 * array element can either be an array, a string or anything else. If it
 * is an array each attribute value is constructed by the key of each
 * element plus a colon and the value of each element. If it is a string
 * it is taken as the attribute value. An empty string will result in a
 * complete removal of that attribute. If the value is neither a string
 * nor an array but something else, e.g. an integer, no operation at all
 * will be performed on the attribute. This is necessary if you want to
 * add a completely new attribute not just a new value for an existing
 * attribute. If the remove array contained an empty string for that
 * attribute, the attribute would be tried to be removed which would fail
 * since it doesn't exist. The following addition of a new value for that
 * attribute would also fail. Setting the value for that attribute to
 * e.g. 0 would not even try to remove it and the addition will work.
 * 
 * If you would like to change the attribute 'Name' with the current
 * value 'books' into 'articles' you will have to create two arrays and
 * call hw_modifyobject.
 * 
 * modifying an attribute
 * 
 * In order to delete/add a name=value pair from/to the object record
 * just pass the remove/add array and set the last/third parameter to an
 * empty array. If the attribute is the first one with that name to add,
 * set attribute value in the remove array to an integer.
 * 
 * adding a completely new attribute
 * 
 * Multilingual attributes, e.g. 'Title', can be modified in two ways.
 * Either by providing the attributes value in its native form
 * 'language':'title' or by providing an array with elements for each
 * language as described above. The above example would than be:
 * 
 * modifying Title attribute
 * 
 * or
 * 
 * modifying Title attribute
 * 
 * This removes the English title 'Books' and adds the English title
 * 'Articles' and the German title 'Artikel'.
 * 
 * removing attribute
 * 
 * This will remove all attributes with the name 'Title' and adds a new
 * 'Title' attribute. This comes in handy if you want to remove
 * attributes recursively.
 * 
 * If you need to delete all attributes with a certain name you will
 * have to pass an empty string as the attribute value.
 * 
 * Only the attributes 'Title', 'Description' and 'Keyword' will
 * properly handle the language prefix. If those attributes don't carry a
 * language prefix, the prefix 'xx' will be assigned.
 * 
 * The 'Name' attribute is somewhat special. In some cases it cannot be
 * complete removed. You will get an error message 'Change of base
 * attribute' (not clear when this happens). Therefore you will always
 * have to add a new Name first and than remove the old one.
 * 
 * You may not surround this function by calls to hw_getandlock and
 * hw_unlock. hw_modifyobject does this internally.
 *
 * @param int
 * @param int
 * @param array
 * @param array
 * @param int
 * @return bool
 **/
function hw_modifyobject($connection, $object_to_change, $remove, $add, $mode) {}

/**
 * Moves the specified objects from a collection to another.
 *
 * @param int
 * @param array
 * @param int
 * @param int
 * @return int
 **/
function hw_mv($connection, $object_id_array, $source_id, $destination_id) {}

/**
 * Returns a new Hyperwave document with the given document data and
 * object record.
 * 
 * This function does not insert the document into the Hyperwave server.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function hw_new_document($object_record, $document_data, $document_size) {}

/**
 * Converts an object_record into an object array.
 *
 * @param string
 * @param array
 * @return array
 **/
function hw_objrec2array($object_record, $format) {}

/**
 * Prints the document without the BODY tag.
 * 
 * For backward compatibility, hw_outputdocument is also accepted. This
 * is deprecated, however.
 *
 * @param int
 * @return bool
 **/
function hw_output_document($hw_document) {}

/**
 * Opens a persistent connection to a Hyperwave server. You can have
 * multiple persistent connections open at once.
 *
 * @param string
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function hw_pconnect($host, $port, $username, $password) {}

/**
 * Gets the Hyperwave document with the given object ID. If the document
 * has anchors which can be inserted, they will have been inserted
 * already.
 * 
 * The document will be transferred via a special data connection which
 * does not block the control connection.
 *
 * @param int
 * @param int
 * @param array
 * @return int
 **/
function hw_pipedocument($connection, $objectID, $url_prefixes) {}

/**
 * Returns the object ID of the hyperroot collection. Currently this is
 * always 0. The child collection of the hyperroot is the root collection
 * of the connected server.
 *
 * @return int
 **/
function hw_root() {}

/**
 * @param int
 * @param int
 * @return int
 **/
function hw_setlinkroot($link, $rootid) {}

/**
 * @param int
 * @return string
 **/
function hw_stat($link) {}

/**
 * Unlocks a document, so other users regain access.
 *
 * @param int
 * @param int
 * @return bool
 **/
function hw_unlock($connection, $objectID) {}

/**
 * Gets the list of currently logged in users.
 *
 * @param int
 * @return array
 **/
function hw_who($connection) {}

/**
 * hypot returns the length of the hypotenuse of a right-angle triangle
 * with sides of length x and y, or the distance of the point (x, y) from
 * the origin. This is equivalent to sqrt(x*x + y*y).
 *
 * @param float
 * @param float
 * @return float
 **/
function hypot($x, $y) {}

/**
 * PHP 4 uses server, dba_user_name and dba_user_password instead of
 * service_handle parameter.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function ibase_add_user($service_handle, $user_name, $password, $first_name, $middle_name, $last_name) {}

/**
 * This function returns the number of rows that were affected by the
 * previous query (INSERT, UPDATE or DELETE) that was executed from
 * within the specified transaction context.
 *
 * @param resource
 * @return int
 **/
function ibase_affected_rows($link_identifier) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param int
 * @param bool
 * @return mixed
 **/
function ibase_backup($service_handle, $source_db, $dest_file, $options, $verbose) {}

/**
 * ibase_blob_add adds data into a blob created with ibase_blob_create.
 *
 * @param resource
 * @param string
 * @return void
 **/
function ibase_blob_add($blob_handle, $data) {}

/**
 * This function will discard a BLOB if it has not yet been closed by
 * ibase_blob_close.
 *
 * @param resource
 * @return bool
 **/
function ibase_blob_cancel($blob_handle) {}

/**
 * This function closes a BLOB that has either been opened for reading by
 * ibase_blob_open or has been opened for writing by ibase_blob_create.
 *
 * @param resource
 * @return mixed
 **/
function ibase_blob_close($blob_handle) {}

/**
 * ibase_blob_create creates a new BLOB for filling with data.
 *
 * @param resource
 * @return resource
 **/
function ibase_blob_create($link_identifier) {}

/**
 * This function opens a BLOB for reading and sends its contents directly
 * to standard output (the browser, in most cases).
 *
 * @param string
 * @return bool
 **/
function ibase_blob_echo($blob_id) {}

/**
 * This function returns at most len bytes from a BLOB that has been
 * opened for reading by ibase_blob_open.
 *
 * @param resource
 * @param int
 * @return string
 **/
function ibase_blob_get($blob_handle, $len) {}

/**
 * This function creates a BLOB, reads an entire file into it, closes it
 * and returns the assigned BLOB id.
 *
 * @param resource
 * @param resource
 * @return string
 **/
function ibase_blob_import($link_identifier, $file_handle) {}

/**
 * Returns the BLOB length and other useful information.
 *
 * @param resource
 * @param string
 * @return array
 **/
function ibase_blob_info($link_identifier, $blob_id) {}

/**
 * Opens an existing BLOB for reading.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function ibase_blob_open($link_identifier, $blob_id) {}

/**
 * Closes the link to an InterBase database that's associated with a
 * connection id returned from ibase_connect. Default transaction on link
 * is committed, other transactions are rolled back.
 *
 * @param resource
 * @return bool
 **/
function ibase_close($connection_id) {}

/**
 * Commits a transaction.
 *
 * @param resource
 * @return bool
 **/
function ibase_commit($link_or_trans_identifier) {}

/**
 * Commits a transaction without closing it.
 *
 * @param resource
 * @return bool
 **/
function ibase_commit_ret($link_or_trans_identifier) {}

/**
 * Establishes a connection to an InterBase server.
 * 
 * In case a second call is made to ibase_connect with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned. The link to
 * the server will be closed as soon as the execution of the script ends,
 * unless it's closed earlier by explicitly calling ibase_close.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @param string
 * @param int
 * @return resource
 **/
function ibase_connect($database, $username, $password, $charset, $buffers, $dialect, $role, $sync) {}

/**
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function ibase_db_info($service_handle, $db, $action, $argument) {}

/**
 * PHP 4 uses server, dba_user_name and dba_user_password instead of
 * service_handle parameter.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ibase_delete_user($service_handle, $user_name) {}

/**
 * This functions drops a database that was opened by either
 * ibase_connect or ibase_pconnect. The database is closed and deleted
 * from the server.
 *
 * @param resource
 * @return bool
 **/
function ibase_drop_db($connection) {}

/**
 * Returns the error code that resulted from the most recent InterBase
 * function call.
 *
 * @return int
 **/
function ibase_errcode() {}

/**
 * @return string
 **/
function ibase_errmsg() {}

/**
 * Execute a query prepared by ibase_prepare.
 * 
 * This is a lot more effective than using ibase_query if you are
 * repeating a same kind of query several times with only some parameters
 * changing.
 *
 * @param resource
 * @param mixed
 * @return resource
 **/
function ibase_execute($query, $bind_arg) {}

/**
 * Fetch a result row from a query as an associative array.
 * 
 * ibase_fetch_assoc fetches one row of data from the result. If two or
 * more columns of the result have the same field names, the last column
 * will take precedence. To access the other column(s) of the same name,
 * you either need to access the result with numeric indices by using
 * ibase_fetch_row or use alias names in your query.
 *
 * @param resource
 * @param int
 * @return array
 **/
function ibase_fetch_assoc($result, $fetch_flag) {}

/**
 * Fetches a row as a pseudo-object from a given result identifier.
 * 
 * Subsequent calls to ibase_fetch_object return the next row in the
 * result set.
 *
 * @param resource
 * @param int
 * @return object
 **/
function ibase_fetch_object($result_id, $fetch_flag) {}

/**
 * ibase_fetch_row fetches one row of data from the given result set.
 * 
 * Subsequent calls to ibase_fetch_row return the next row in the result
 * set, or if there are no more rows.
 *
 * @param resource
 * @param int
 * @return array
 **/
function ibase_fetch_row($result_identifier, $fetch_flag) {}

/**
 * Returns an array with information about a field after a select query
 * has been run.
 *
 * @param resource
 * @param int
 * @return array
 **/
function ibase_field_info($result, $field_number) {}

/**
 * This function causes the registered event handler specified by event
 * to be cancelled. The callback function will no longer be called for
 * the events it was registered to handle.
 *
 * @param resource
 * @return bool
 **/
function ibase_free_event_handler($event) {}

/**
 * Frees a prepared query.
 *
 * @param resource
 * @return bool
 **/
function ibase_free_query($query) {}

/**
 * Frees a result set.
 *
 * @param resource
 * @return bool
 **/
function ibase_free_result($result_identifier) {}

/**
 * @param string
 * @param int
 * @param resource
 * @return mixed
 **/
function ibase_gen_id($generator, $increment, $link_identifier) {}

/**
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function ibase_maintain_db($service_handle, $db, $action, $argument) {}

/**
 * PHP 4 uses server, dba_user_name and dba_user_password instead of
 * service_handle parameter.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function ibase_modify_user($service_handle, $user_name, $password, $first_name, $middle_name, $last_name) {}

/**
 * This function assigns a name to a result set. This name can be used
 * later in UPDATE|DELETE ... WHERE CURRENT OF name statements.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ibase_name_result($result, $name) {}

/**
 * Get the number of fields in a result set.
 *
 * @param resource
 * @return int
 **/
function ibase_num_fields($result_id) {}

/**
 * This function returns the number of parameters in the prepared query
 * specified by query. This is the number of binding arguments that must
 * be present when calling ibase_execute.
 *
 * @param resource
 * @return int
 **/
function ibase_num_params($query) {}

/**
 * Returns an array with information about a parameter after a query has
 * been prepared.
 *
 * @param resource
 * @param int
 * @return array
 **/
function ibase_param_info($query, $param_number) {}

/**
 * Opens a persistent connection to an InterBase database.
 * 
 * ibase_pconnect acts very much like ibase_connect with two major
 * differences.
 * 
 * First, when connecting, the function will first try to find a
 * (persistent) link that's already opened with the same parameters. If
 * one is found, an identifier for it will be returned instead of opening
 * a new connection.
 * 
 * Second, the connection to the InterBase server will not be closed when
 * the execution of the script ends. Instead, the link will remain open
 * for future use (ibase_close will not close links established by
 * ibase_pconnect). This type of link is therefore called 'persistent'.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @param string
 * @param int
 * @return resource
 **/
function ibase_pconnect($database, $username, $password, $charset, $buffers, $dialect, $role, $sync) {}

/**
 * @param string
 * @return resource
 **/
function ibase_prepare($query) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return resource
 **/
function ibase_query($link_identifier, $query, $bind_args) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param int
 * @param bool
 * @return mixed
 **/
function ibase_restore($service_handle, $source_file, $dest_db, $options, $verbose) {}

/**
 * Rolls back a transaction.
 *
 * @param resource
 * @return bool
 **/
function ibase_rollback($link_or_trans_identifier) {}

/**
 * Rolls back a transaction without closing it.
 *
 * @param resource
 * @return bool
 **/
function ibase_rollback_ret($link_or_trans_identifier) {}

/**
 * @param resource
 * @param int
 * @return string
 **/
function ibase_server_info($service_handle, $action) {}

/**
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function ibase_service_attach($host, $dba_username, $dba_password) {}

/**
 * @param resource
 * @return bool
 **/
function ibase_service_detach($service_handle) {}

/**
 * This function registers a PHP user function as event handler for the
 * specified events.
 *
 * @param callback
 * @param string
 * @param string
 * @return resource
 **/
function ibase_set_event_handler($event_handler, $event_name1, $event_name2) {}

/**
 * Sets the format of timestamp, date or time type columns returned from
 * queries.
 * 
 * You can set defaults for these formats with the PHP configuration
 * directives ibase.timestampformat, ibase.dateformat and
 * ibase.timeformat.
 *
 * @param string
 * @param int
 * @return bool
 **/
function ibase_timefmt($format, $columntype) {}

/**
 * Begins a transaction.
 *
 * @param int
 * @param resource
 * @return resource
 **/
function ibase_trans($trans_args, $link_identifier) {}

/**
 * This function suspends execution of the script until one of the
 * specified events is posted by the database. The name of the event that
 * was posted is returned. This function accepts up to 15 event
 * arguments.
 *
 * @param string
 * @param string
 * @return string
 **/
function ibase_wait_event($event_name1, $event_name2) {}

/**
 * Performs a character set conversion on the string str from in_charset
 * to out_charset.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function iconv($in_charset, $out_charset, $str) {}

/**
 * Retrieve internal configuration variables of iconv extension.
 *
 * @param string
 * @return mixed
 **/
function iconv_get_encoding($type) {}

/**
 * Decodes a MIME header field.
 *
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function iconv_mime_decode($encoded_header, $mode, $charset) {}

/**
 * Decodes multiple MIME header fields at once.
 *
 * @param string
 * @param int
 * @param string
 * @return array
 **/
function iconv_mime_decode_headers($encoded_headers, $mode, $charset) {}

/**
 * Composes and returns a string that represents a valid MIME header
 * field, which looks like the following:
 * 
 * In the above example, "Subject" is the field name and the portion
 * that begins with "=?ISO-8859-1?..." is the field value.
 *
 * @param string
 * @param string
 * @param array
 * @return string
 **/
function iconv_mime_encode($field_name, $field_value, $preferences) {}

/**
 * Changes the value of the internal configuration variable specified by
 * type to charset.
 *
 * @param string
 * @param string
 * @return bool
 **/
function iconv_set_encoding($type, $charset) {}

/**
 * In contrast to strlen, iconv_strlen counts the occurrences of
 * characters in the given byte sequence str on the basis of the
 * specified character set, the result of which is not necessarily
 * identical to the length of the string in byte.
 *
 * @param string
 * @param string
 * @return int
 **/
function iconv_strlen($str, $charset) {}

/**
 * Finds position of first occurrence of a needle within a haystack.
 * 
 * In contrast to strpos, the return value of iconv_strpos is the number
 * of characters that appear before the needle, rather than the offset in
 * bytes to the position where the needle has been found. The characters
 * are counted on the basis of the specified character set charset.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function iconv_strpos($haystack, $needle, $offset, $charset) {}

/**
 * In contrast to strpos, the return value of iconv_strrpos is the number
 * of characters that appear before the needle, rather than the offset in
 * bytes to the position where the needle has been found.
 *
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function iconv_strrpos($haystack, $needle, $charset) {}

/**
 * Cuts a portion of str specified by the offset and length parameters.
 *
 * @param string
 * @param int
 * @param int
 * @param string
 * @return string
 **/
function iconv_substr($str, $offset, $length, $charset) {}

/**
 * id3_get_frame_long_name returns the long name for an ID3v2 frame.
 *
 * @param string
 * @return string
 **/
function id3_get_frame_long_name($frameId) {}

/**
 * id3_get_frame_short_name returns the short name for an ID3v2 frame.
 *
 * @param string
 * @return string
 **/
function id3_get_frame_short_name($frameId) {}

/**
 * id3_get_genre_id returns the id for a genre.
 *
 * @param string
 * @return int
 **/
function id3_get_genre_id($genre) {}

/**
 * id3_get_genre_list returns an array containing all possible genres
 * that may be stored in an ID3 tag. This list has been created by Eric
 * Kemp and later extended by WinAmp.
 * 
 * This function is useful to provide you users a list of genres from
 * which they may choose one. When updating the ID3 tag you will always
 * have to specify the genre as an integer ranging from 0 to 147.
 *
 * @return array
 **/
function id3_get_genre_list() {}

/**
 * id3_get_genre_name returns the name for a genre id.
 *
 * @param int
 * @return string
 **/
function id3_get_genre_name($genre_id) {}

/**
 * id3_get_tag is used to get all information stored in the id3 tag of
 * the specified file.
 *
 * @param string
 * @param int
 * @return array
 **/
function id3_get_tag($filename, $version) {}

/**
 * id3_get_version retrieves the version(s) of the ID3 tag(s) in the MP3
 * file.
 * 
 * If a file contains an ID3 v1.1 tag, it always contains a 1.0 tag, as
 * version 1.1 is just an extension of 1.0.
 *
 * @param string
 * @return int
 **/
function id3_get_version($filename) {}

/**
 * id3_remove_tag is used to remove the information stored of an ID3 tag.
 *
 * @param string
 * @param int
 * @return bool
 **/
function id3_remove_tag($filename, $version) {}

/**
 * id3_set_tag is used to change the information stored of an ID3 tag. If
 * no tag has been present, it will be added to the file.
 *
 * @param string
 * @param array
 * @param int
 * @return bool
 **/
function id3_set_tag($filename, $tag, $version) {}

/**
 * Returns a number formatted according to the given format string using
 * the given integer timestamp or the current local time if no timestamp
 * is given. In other words, timestamp is optional and defaults to the
 * value of time.
 * 
 * Unlike the function date, idate accepts just one char in the format
 * parameter.
 *
 * @param string
 * @param int
 * @return int
 **/
function idate($format, $timestamp) {}

/**
 * This function returns the error message string that corresponds to the
 * given error code.
 *
 * @param int
 * @return string
 **/
function idn_strerror($errorcode) {}

/**
 * This function converts a UTF-8 encoded domain name to ASCII according
 * to the IDNA toUnicode() specification. If the input has non-ASCII
 * characters, the output will be in the "xn--" ACE notation.
 *
 * @param string
 * @param int
 * @return string
 **/
function idn_to_ascii($utf8_domain, &$errorcode) {}

/**
 * This function converts Unicode domain name from IDNA ASCII-compatible
 * format to plain Unicode.
 *
 * @param string
 * @param int
 * @return string
 **/
function idn_to_unicode($domain, $options) {}

/**
 * This function converts a ASCII encoded domain name to its original
 * UTF-8 version.
 *
 * @param string
 * @param int
 * @return string
 **/
function idn_to_utf8($ascii_domain, &$errorcode) {}

/**
 * Deletes the slob object on the given slob object-id bid.
 *
 * @param int
 * @return bool
 **/
function ifxus_close_slob($bid) {}

/**
 * Creates an slob object and opens it.
 *
 * @param int
 * @return int
 **/
function ifxus_create_slob($mode) {}

/**
 * Deletes the slob object.
 *
 * @param int
 * @return bool
 **/
function ifxus_free_slob($bid) {}

/**
 * Opens an slob object. bid should be an existing slob id.
 *
 * @param int
 * @param int
 * @return int
 **/
function ifxus_open_slob($bid, $mode) {}

/**
 * Reads nbytes of the slob object.
 *
 * @param int
 * @param int
 * @return string
 **/
function ifxus_read_slob($bid, $nbytes) {}

/**
 * Sets the current file or seek position of an open slob object.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ifxus_seek_slob($bid, $mode, $offset) {}

/**
 * Returns the current file or seek position of an open slob object
 *
 * @param int
 * @return int
 **/
function ifxus_tell_slob($bid) {}

/**
 * Writes a string into the slob object.
 *
 * @param int
 * @param string
 * @return int
 **/
function ifxus_write_slob($bid, $content) {}

/**
 * Returns the number of rows affected by a query associated with
 * result_id.
 * 
 * For inserts, updates and deletes the number is the real number
 * (sqlerrd[2]) of affected rows. For selects it is an estimate
 * (sqlerrd[0]). Don't rely on it. The database server can never return
 * the actual number of rows that will be returned by a SELECT because it
 * has not even begun fetching them at this stage (just after the
 * "PREPARE" when the optimizer has determined the query plan).
 * 
 * Useful after ifx_prepare to limit queries to reasonable result sets.
 *
 * @param resource
 * @return int
 **/
function ifx_affected_rows($result_id) {}

/**
 * Set the default blob mode for all select queries.
 *
 * @param int
 * @return bool
 **/
function ifx_blobinfile_mode($mode) {}

/**
 * Sets the default byte mode for all select-queries.
 *
 * @param int
 * @return bool
 **/
function ifx_byteasvarchar($mode) {}

/**
 * ifx_close closes the link to an Informix database that's associated
 * with the specified link identifier.
 * 
 * Note that this isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution.
 * 
 * ifx_close will not close persistent links generated by ifx_pconnect.
 *
 * @param resource
 * @return bool
 **/
function ifx_close($link_identifier) {}

/**
 * ifx_connect establishes a connection to an Informix server.
 * 
 * In case a second call is made to ifx_connect with the same arguments,
 * no new link will be established, but instead, the link identifier of
 * the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling
 * ifx_close.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function ifx_connect($database, $userid, $password) {}

/**
 * Duplicates the given blob object.
 *
 * @param int
 * @return int
 **/
function ifx_copy_blob($bid) {}

/**
 * Creates a blob object.
 *
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function ifx_create_blob($type, $mode, $param) {}

/**
 * Creates an char object.
 *
 * @param string
 * @return int
 **/
function ifx_create_char($param) {}

/**
 * Executes a previously prepared query or opens a cursor for it.
 * 
 * Does NOT free result_id on error.
 * 
 * Also sets the real number of ifx_affected_rows for non-select
 * statements for retrieval by ifx_affected_rows.
 *
 * @param resource
 * @return bool
 **/
function ifx_do($result_id) {}

/**
 * Returns in a string one character describing the general results of a
 * statement and both SQLSTATE and SQLCODE associated with the most
 * recent SQL statement executed.
 *
 * @param resource
 * @return string
 **/
function ifx_error($link_identifier) {}

/**
 * Returns the Informix error message associated with the most recent
 * Informix error.
 *
 * @param int
 * @return string
 **/
function ifx_errormsg($errorcode) {}

/**
 * Fetches one row of data from the result associated with the specified
 * result identifier.
 * 
 * Subsequent calls to ifx_fetch_row would return the next row in the
 * result set, or if there are no more rows.
 *
 * @param resource
 * @param mixed
 * @return array
 **/
function ifx_fetch_row($result_id, $position) {}

/**
 * Returns the Informix SQL fieldproperties of every field in the query
 * as an associative array. Properties are encoded as:
 * "SQLTYPE;length;precision;scale;ISNULLABLE" where SQLTYPE = the
 * Informix type like "SQLVCHAR" etc. and ISNULLABLE = "Y" or "N".
 *
 * @param resource
 * @return array
 **/
function ifx_fieldproperties($result_id) {}

/**
 * Returns an associative array with fieldnames as key and the SQL
 * fieldtypes as data for the query associated with result_id.
 *
 * @param resource
 * @return array
 **/
function ifx_fieldtypes($result_id) {}

/**
 * Deletes the blobobject for the given blob object-id.
 *
 * @param int
 * @return bool
 **/
function ifx_free_blob($bid) {}

/**
 * Deletes the charobject for the given char object-id.
 *
 * @param int
 * @return bool
 **/
function ifx_free_char($bid) {}

/**
 * Releases resources for the query associated with result_id.
 *
 * @param resource
 * @return bool
 **/
function ifx_free_result($result_id) {}

/**
 * Returns a pseudo-row with sqlca.sqlerrd[0] ... sqlca.sqlerrd[5] after
 * the query associated with result_id.
 * 
 * For inserts, updates and deletes the values returned are those as set
 * by the server after executing the query. This gives access to the
 * number of affected rows and the serial insert value. For SELECTs the
 * values are those saved after the PREPARE statement. This gives access
 * to the *estimated* number of affected rows. The use of this function
 * saves the overhead of executing a SELECT dbinfo('sqlca.sqlerrdx')
 * query, as it retrieves the values that were saved by the ifx driver at
 * the appropriate moment.
 *
 * @param resource
 * @return array
 **/
function ifx_getsqlca($result_id) {}

/**
 * Returns the content of the blob object.
 *
 * @param int
 * @return string
 **/
function ifx_get_blob($bid) {}

/**
 * Returns the content of the char object.
 *
 * @param int
 * @return string
 **/
function ifx_get_char($bid) {}

/**
 * Formats and prints all rows of the result_id query into a HTML table.
 *
 * @param resource
 * @param string
 * @return int
 **/
function ifx_htmltbl_result($result_id, $html_table_options) {}

/**
 * Sets the default return value of a NULL-value on a fetch row.
 *
 * @param int
 * @return bool
 **/
function ifx_nullformat($mode) {}

/**
 * After preparing or executing a query, this call gives you the number
 * of columns in the query.
 *
 * @param resource
 * @return int
 **/
function ifx_num_fields($result_id) {}

/**
 * Gives the number of rows fetched so far for a query with result_id
 * after a ifx_query or ifx_do query.
 *
 * @param resource
 * @return int
 **/
function ifx_num_rows($result_id) {}

/**
 * ifx_pconnect acts very much like ifx_connect with two major
 * differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use (ifx_close will not close links established by
 * ifx_pconnect).
 * 
 * This type of links is therefore called 'persistent'.
 *
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function ifx_pconnect($database, $userid, $password) {}

/**
 * Prepares a query for later use with ifx_do.
 * 
 * For "select-type" queries a cursor is declared and opened. Non-select
 * queries are "execute immediate".
 * 
 * For either query type the number of (estimated or real) affected rows
 * is saved for retrieval by ifx_affected_rows.
 * 
 * If the contents of the TEXT (or BYTE) column allow it, you can also
 * use ifx_textasvarchar(1) and ifx_byteasvarchar(1). This allows you to
 * treat TEXT (or BYTE) columns just as if they were ordinary (but long)
 * VARCHAR columns for select queries, and you don't need to bother with
 * blob id's.
 * 
 * With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default
 * situation), select queries will return BLOB columns as blob id's
 * (integer value). You can get the value of the blob as a string or file
 * with the blob functions (see below).
 *
 * @param string
 * @param resource
 * @param int
 * @param mixed
 * @return resource
 **/
function ifx_prepare($query, $link_identifier, $cursor_def, $blobidarray) {}

/**
 * Sends a query to the currently active database on the server that's
 * associated with the specified link identifier.
 * 
 * For "select-type" queries a cursor is declared and opened. Non-select
 * queries are "execute immediate".
 * 
 * For either query type the number of (estimated or real) affected rows
 * is saved for retrieval by ifx_affected_rows.
 * 
 * If the contents of the TEXT (or BYTE) column allow it, you can also
 * use ifx_textasvarchar(1) and ifx_byteasvarchar(1). This allows you to
 * treat TEXT (or BYTE) columns just as if they were ordinary (but long)
 * VARCHAR columns for select queries, and you don't need to bother with
 * blob id's.
 * 
 * With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default
 * situation), select queries will return BLOB columns as blob id's
 * (integer value). You can get the value of the blob as a string or file
 * with the blob functions (see below).
 *
 * @param string
 * @param resource
 * @param int
 * @param mixed
 * @return resource
 **/
function ifx_query($query, $link_identifier, $cursor_type, $blobidarray) {}

/**
 * Sets the default text mode for all select-queries.
 *
 * @param int
 * @return bool
 **/
function ifx_textasvarchar($mode) {}

/**
 * Updates the content of the blob object for the given blob object bid.
 *
 * @param int
 * @param string
 * @return bool
 **/
function ifx_update_blob($bid, $content) {}

/**
 * Updates the content of the char object for the given char object bid.
 *
 * @param int
 * @param string
 * @return bool
 **/
function ifx_update_char($bid, $content) {}

/**
 * Sets whether a client disconnect should cause a script to be aborted.
 *
 * @param string
 * @return int
 **/
function ignore_user_abort($value) {}

/**
 * @param string
 * @param string
 * @param string
 * @param int
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function iis_add_server($path, $comment, $server_ip, $port, $host_name, $rights, $start_server) {}

/**
 * @param int
 * @param string
 * @return int
 **/
function iis_get_dir_security($server_instance, $virtual_path) {}

/**
 * @param int
 * @param string
 * @param string
 * @return string
 **/
function iis_get_script_map($server_instance, $virtual_path, $script_extension) {}

/**
 * @param string
 * @return int
 **/
function iis_get_server_by_comment($comment) {}

/**
 * Each virtual server in IIS is associated with an instance number.
 * iis_get_server_by_path finds the instance number from the actual path
 * to the root directory.
 *
 * @param string
 * @return int
 **/
function iis_get_server_by_path($path) {}

/**
 * @param int
 * @param string
 * @return int
 **/
function iis_get_server_rights($server_instance, $virtual_path) {}

/**
 * @param string
 * @return int
 **/
function iis_get_service_state($service_id) {}

/**
 * @param int
 * @return int
 **/
function iis_remove_server($server_instance) {}

/**
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function iis_set_app_settings($server_instance, $virtual_path, $application_scope) {}

/**
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function iis_set_dir_security($server_instance, $virtual_path, $directory_flags) {}

/**
 * @param int
 * @param string
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function iis_set_script_map($server_instance, $virtual_path, $script_extension, $engine_path, $allow_scripting) {}

/**
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function iis_set_server_rights($server_instance, $virtual_path, $directory_flags) {}

/**
 * @param int
 * @return int
 **/
function iis_start_server($server_instance) {}

/**
 * @param string
 * @return int
 **/
function iis_start_service($service_id) {}

/**
 * @param int
 * @return int
 **/
function iis_stop_server($server_instance) {}

/**
 * @param string
 * @return int
 **/
function iis_stop_service($service_id) {}

/**
 * image2wbmp outputs or save a WBMP version of the given image.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function image2wbmp($image, $filename, $threshold) {}

/**
 * imagealphablending allows for two different modes of drawing on
 * truecolor images. In blending mode, the alpha channel component of the
 * color supplied to all drawing function, such as imagesetpixel
 * determines how much of the underlying color should be allowed to shine
 * through. As a result, gd automatically blends the existing color at
 * that point with the drawing color, and stores the result in the image.
 * The resulting pixel is opaque. In non-blending mode, the drawing color
 * is copied literally with its alpha channel information, replacing the
 * destination pixel. Blending mode is not available when drawing on
 * palette images.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function imagealphablending($image, $blendmode) {}

/**
 * Activate the fast drawing antialiased methods for lines and wired
 * polygons. It does not support alpha components. It works using a
 * direct blend operation. It works only with truecolor images.
 * 
 * Thickness and styled are not supported.
 * 
 * Using antialiased primitives with transparent background color can end
 * with some unexpected results. The blend method uses the background
 * color as any other colors. The lack of alpha component support does
 * not allow an alpha based antialiasing method.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function imageantialias($image, $enabled) {}

/**
 * imagearc draws an arc of circle centered at the given coordinates.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagearc($image, $cx, $cy, $width, $height, $start, $end, $color) {}

/**
 * imagechar draws the first character of c in the image identified by
 * image with its upper-left at x,y (top left is 0, 0) with the color
 * color.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function imagechar($image, $font, $x, $y, $c, $color) {}

/**
 * Draws the character c vertically at the specified coordinate on the
 * given image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function imagecharup($image, $font, $x, $y, $c, $color) {}

/**
 * Returns a color identifier representing the color composed of the
 * given RGB components.
 * 
 * imagecolorallocate must be called to create each color that is to be
 * used in the image represented by image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorallocate($image, $red, $green, $blue) {}

/**
 * imagecolorallocatealpha behaves identically to imagecolorallocate with
 * the addition of the transparency parameter alpha.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorallocatealpha($image, $red, $green, $blue, $alpha) {}

/**
 * Returns the index of the color of the pixel at the specified location
 * in the image specified by image.
 * 
 * If PHP is compiled against GD library 2.0 or higher and the image is a
 * truecolor image, this function returns the RGB value of that pixel as
 * integer. Use bitshifting and masking to access the distinct red, green
 * and blue component values:
 *
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function imagecolorat($image, $x, $y) {}

/**
 * Returns the index of the color in the palette of the image which is
 * "closest" to the specified RGB value.
 * 
 * The "distance" between the desired color and each color in the palette
 * is calculated as if the RGB values represented points in
 * three-dimensional space.
 * 
 * If you created the image from a file, only colors used in the image
 * are resolved. Colors present only in the palette are not resolved.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorclosest($image, $red, $green, $blue) {}

/**
 * Returns the index of the color in the palette of the image which is
 * "closest" to the specified RGB value and alpha level.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorclosestalpha($image, $red, $green, $blue, $alpha) {}

/**
 * Get the index of the color which has the hue, white and blackness
 * nearest the given color.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorclosesthwb($image, $red, $green, $blue) {}

/**
 * De-allocates a color previously allocated with imagecolorallocate or
 * imagecolorallocatealpha.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function imagecolordeallocate($image, $color) {}

/**
 * Returns the index of the specified color in the palette of the image.
 * 
 * If you created the image from a file, only colors used in the image
 * are resolved. Colors present only in the palette are not resolved.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorexact($image, $red, $green, $blue) {}

/**
 * Returns the index of the specified color+alpha in the palette of the
 * image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorexactalpha($image, $red, $green, $blue, $alpha) {}

/**
 * Makes the colors of the palette version of an image more closely match
 * the true color version.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function imagecolormatch($image1, $image2) {}

/**
 * This function is guaranteed to return a color index for a requested
 * color, either the exact color or the closest possible alternative.
 * 
 * If you created the image from a file, only colors used in the image
 * are resolved. Colors present only in the palette are not resolved.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorresolve($image, $red, $green, $blue) {}

/**
 * This function is guaranteed to return a color index for a requested
 * color, either the exact color or the closest possible alternative.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function imagecolorresolvealpha($image, $red, $green, $blue, $alpha) {}

/**
 * This sets the specified index in the palette to the specified color.
 * This is useful for creating flood-fill-like effects in palleted images
 * without the overhead of performing the actual flood-fill.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function imagecolorset($image, $index, $red, $green, $blue) {}

/**
 * Gets the color for a specified index.
 *
 * @param resource
 * @param int
 * @return array
 **/
function imagecolorsforindex($image, $index) {}

/**
 * Returns the number of colors in an image palette.
 *
 * @param resource
 * @return int
 **/
function imagecolorstotal($image) {}

/**
 * Sets the transparent color in the given image.
 *
 * @param resource
 * @param int
 * @return int
 **/
function imagecolortransparent($image, $color) {}

/**
 * Applies a convolution matrix on the image, using the given coefficient
 * and offset.
 *
 * @param resource
 * @param array
 * @param float
 * @param float
 * @return bool
 **/
function imageconvolution($image, $matrix, $div, $offset) {}

/**
 * Copy a part of src_im onto dst_im starting at the x,y coordinates
 * src_x, src_y with a width of src_w and a height of src_h. The portion
 * defined will be copied onto the x,y coordinates, dst_x and dst_y.
 *
 * @param resource
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagecopy($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h) {}

/**
 * Copy a part of src_im onto dst_im starting at the x,y coordinates
 * src_x, src_y with a width of src_w and a height of src_h. The portion
 * defined will be copied onto the x,y coordinates, dst_x and dst_y.
 *
 * @param resource
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagecopymerge($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct) {}

/**
 * imagecopymergegray copy a part of src_im onto dst_im starting at the
 * x,y coordinates src_x, src_y with a width of src_w and a height of
 * src_h. The portion defined will be copied onto the x,y coordinates,
 * dst_x and dst_y.
 * 
 * This function is identical to imagecopymerge except that when merging
 * it preserves the hue of the source by converting the destination
 * pixels to gray scale before the copy operation.
 *
 * @param resource
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagecopymergegray($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct) {}

/**
 * imagecopyresampled copies a rectangular portion of one image to
 * another image, smoothly interpolating pixel values so that, in
 * particular, reducing the size of an image still retains a great deal
 * of clarity.
 * 
 * In other words, imagecopyresampled will take an rectangular area from
 * src_image of width src_w and height src_h at position (src_x,src_y)
 * and place it in a rectangular area of dst_image of width dst_w and
 * height dst_h at position (dst_x,dst_y).
 * 
 * If the source and destination coordinates and width and heights
 * differ, appropriate stretching or shrinking of the image fragment will
 * be performed. The coordinates refer to the upper left corner. This
 * function can be used to copy regions within the same image (if
 * dst_image is the same as src_image) but if the regions overlap the
 * results will be unpredictable.
 *
 * @param resource
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagecopyresampled($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h) {}

/**
 * imagecopyresized copies a rectangular portion of one image to another
 * image. dst_image is the destination image, src_image is the source
 * image identifier.
 * 
 * In other words, imagecopyresized will take an rectangular area from
 * src_image of width src_w and height src_h at position (src_x,src_y)
 * and place it in a rectangular area of dst_image of width dst_w and
 * height dst_h at position (dst_x,dst_y).
 * 
 * If the source and destination coordinates and width and heights
 * differ, appropriate stretching or shrinking of the image fragment will
 * be performed. The coordinates refer to the upper left corner. This
 * function can be used to copy regions within the same image (if
 * dst_image is the same as src_image) but if the regions overlap the
 * results will be unpredictable.
 *
 * @param resource
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagecopyresized($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h) {}

/**
 * imagecreate returns an image identifier representing a blank image of
 * specified size.
 * 
 * We recommend the use of imagecreatetruecolor.
 *
 * @param int
 * @param int
 * @return resource
 **/
function imagecreate($width, $height) {}

/**
 * Create a new image from GD file or URL.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromgd($filename) {}

/**
 * Create a new image from GD2 file or URL.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromgd2($filename) {}

/**
 * Create a new image from a given part of GD2 file or URL.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function imagecreatefromgd2part($filename, $srcX, $srcY, $width, $height) {}

/**
 * imagecreatefromgif returns an image identifier representing the image
 * obtained from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromgif($filename) {}

/**
 * imagecreatefromjpeg returns an image identifier representing the image
 * obtained from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromjpeg($filename) {}

/**
 * imagecreatefrompng returns an image identifier representing the image
 * obtained from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagecreatefrompng($filename) {}

/**
 * imagecreatefromstring returns an image identifier representing the
 * image obtained from the given data. These types will be automatically
 * detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and
 * GD2.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromstring($data) {}

/**
 * imagecreatefromwbmp returns an image identifier representing the image
 * obtained from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromwbmp($filename) {}

/**
 * imagecreatefromxbm returns an image identifier representing the image
 * obtained from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromxbm($filename) {}

/**
 * imagecreatefromxpm returns an image identifier representing the image
 * obtained from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagecreatefromxpm($filename) {}

/**
 * imagecreatetruecolor returns an image identifier representing a black
 * image of the specified size.
 * 
 * Depending on your PHP and GD versions this function is defined or not.
 * With PHP 4.0.6 through 4.1.x this function always exists if the GD
 * module is loaded, but calling it without GD2 being installed PHP will
 * issue a fatal error and exit. With PHP 4.2.x this behaviour is
 * different in issuing a warning instead of an error. Other versions
 * only define this function, if the correct GD version is installed.
 *
 * @param int
 * @param int
 * @return resource
 **/
function imagecreatetruecolor($width, $height) {}

/**
 * This function is deprecated. Use combination of imagesetstyle and
 * imageline instead.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagedashedline($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * imagedestroy frees any memory associated with image image.
 *
 * @param resource
 * @return bool
 **/
function imagedestroy($image) {}

/**
 * Draws an ellipse centered at the specified coordinates.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imageellipse($image, $cx, $cy, $width, $height, $color) {}

/**
 * Performs a flood fill starting at the given coordinate (top left is 0,
 * 0) with the given color in the image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagefill($image, $x, $y, $color) {}

/**
 * Draws a partial arc centered at the specified coordinate in the given
 * image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagefilledarc($image, $cx, $cy, $width, $height, $start, $end, $color, $style) {}

/**
 * Draws an ellipse centered at the specified coordinate on the given
 * image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagefilledellipse($image, $cx, $cy, $width, $height, $color) {}

/**
 * imagefilledpolygon creates a filled polygon in the given image.
 *
 * @param resource
 * @param array
 * @param int
 * @param int
 * @return bool
 **/
function imagefilledpolygon($image, $points, $num_points, $color) {}

/**
 * Creates a rectangle filled with color in the given image starting at
 * point 1 and ending at point 2. 0, 0 is the top left corner of the
 * image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * imagefilltoborder performs a flood fill whose border color is defined
 * by border. The starting point for the fill is x, y (top left is 0, 0)
 * and the region is filled with color color.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagefilltoborder($image, $x, $y, $border, $color) {}

/**
 * imagefilter applies the given filter filtertype on the image.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagefilter($image, $filtertype, $arg1, $arg2, $arg3, $arg4) {}

/**
 * Returns the pixel height of a character in the specified font.
 *
 * @param int
 * @return int
 **/
function imagefontheight($font) {}

/**
 * Returns the pixel width of a character in font.
 *
 * @param int
 * @return int
 **/
function imagefontwidth($font) {}

/**
 * This function calculates and returns the bounding box in pixels for a
 * FreeType text.
 *
 * @param float
 * @param float
 * @param string
 * @param string
 * @param array
 * @return array
 **/
function imageftbbox($size, $angle, $fontfile, $text, $extrainfo) {}

/**
 * @param resource
 * @param float
 * @param float
 * @param int
 * @param int
 * @param int
 * @param string
 * @param string
 * @param array
 * @return array
 **/
function imagefttext($image, $size, $angle, $x, $y, $color, $fontfile, $text, $extrainfo) {}

/**
 * Applies gamma correction to the given gd image given an input and an
 * output gamma.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function imagegammacorrect($image, $inputgamma, $outputgamma) {}

/**
 * Outputs a GD image to the given filename.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imagegd($image, $filename) {}

/**
 * Outputs a GD2 image to the given filename.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function imagegd2($image, $filename, $chunk_size, $type) {}

/**
 * imagegif creates the GIF file in filename from the image image. The
 * image argument is the return from the imagecreate or imagecreatefrom*
 * function.
 * 
 * The image format will be GIF87a unless the image has been made
 * transparent with imagecolortransparent, in which case the image format
 * will be GIF89a.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imagegif($image, $filename) {}

/**
 * Grabs a screenshot of the whole screen.
 *
 * @return resource
 **/
function imagegrabscreen() {}

/**
 * Grabs a window or its client area using a windows handle (HWND
 * property in COM instance)
 *
 * @param int
 * @param int
 * @return resource
 **/
function imagegrabwindow($window, $client_area) {}

/**
 * imageinterlace turns the interlace bit on or off.
 * 
 * If the interlace bit is set and the image is used as a JPEG image, the
 * image is created as a progressive JPEG.
 *
 * @param resource
 * @param int
 * @return int
 **/
function imageinterlace($image, $interlace) {}

/**
 * imageistruecolor finds whether the image image is a truecolor image.
 *
 * @param resource
 * @return bool
 **/
function imageistruecolor($image) {}

/**
 * imagejpeg creates a JPEG file from the given image.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function imagejpeg($image, $filename, $quality) {}

/**
 * Set the alpha blending flag to use the bundled libgd layering effects.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function imagelayereffect($image, $effect) {}

/**
 * Draws a line between the two given points.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imageline($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * imageloadfont loads a user-defined bitmap and returns its identifier.
 *
 * @param string
 * @return int
 **/
function imageloadfont($file) {}

/**
 * imagepalettecopy copies the palette from the source image to the
 * destination image.
 *
 * @param resource
 * @param resource
 * @return void
 **/
function imagepalettecopy($destination, $source) {}

/**
 * Outputs or saves a PNG image from the given image.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function imagepng($image, $filename, $quality, $filters) {}

/**
 * imagepolygon creates a polygon in the given image.
 *
 * @param resource
 * @param array
 * @param int
 * @param int
 * @return bool
 **/
function imagepolygon($image, $points, $num_points, $color) {}

/**
 * Gives the bounding box of a text rectangle using PostScript Type1
 * fonts.
 * 
 * The bounding box is calculated using information available from
 * character metrics, and unfortunately tends to differ slightly from the
 * results achieved by actually rasterizing the text. If the angle is 0
 * degrees, you can expect the text to need 1 pixel more to every
 * direction.
 *
 * @param string
 * @param resource
 * @param int
 * @return array
 **/
function imagepsbbox($text, $font, $size) {}

/**
 * Loads a character encoding vector from a file and changes the fonts
 * encoding vector to it. As a PostScript fonts default vector lacks most
 * of the character positions above 127, you'll definitely want to change
 * this if you use an other language than English.
 * 
 * If you find yourself using this function all the time, a much better
 * way to define the encoding is to set ps.default_encoding in the
 * configuration file to point to the right encoding file and all fonts
 * you load will automatically have the right encoding.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imagepsencodefont($font_index, $encodingfile) {}

/**
 * Extend or condense a font (font_index), if the value of the extend
 * parameter is less than one you will be condensing the font.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function imagepsextendfont($font_index, $extend) {}

/**
 * imagepsfreefont frees memory used by a PostScript Type 1 font.
 *
 * @param resource
 * @return bool
 **/
function imagepsfreefont($font_index) {}

/**
 * Load a PostScript Type 1 font from the given filename.
 *
 * @param string
 * @return resource
 **/
function imagepsloadfont($filename) {}

/**
 * Slant a given font given.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function imagepsslantfont($font_index, $slant) {}

/**
 * Draws a text on an image using PostScript Type1 fonts.
 * 
 * Refer to PostScript documentation about fonts and their measuring
 * system if you have trouble understanding how this works.
 *
 * @param resource
 * @param string
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param float
 * @param int
 * @return array
 **/
function imagepstext($image, $text, $font_index, $size, $foreground, $background, $x, $y, $space, $tightness, $angle, $antialias_steps) {}

/**
 * imagerectangle creates a rectangle starting at the specified
 * coordinates.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagerectangle($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * Rotates the image image using the given angle in degrees.
 * 
 * The center of rotation is the center of the image, and the rotated
 * image may have different dimensions than the original image.
 * 
 * 
 *
 * @param resource
 * @param float
 * @param int
 * @param int
 * @return resource
 **/
function imagerotate($image, $angle, $bgd_color, $ignore_transparent) {}

/**
 * imagesavealpha sets the flag to attempt to save full alpha channel
 * information (as opposed to single-color transparency) when saving PNG
 * images.
 * 
 * You have to unset alphablending (imagealphablending($im, false)), to
 * use it.
 * 
 * Alpha channel is not supported by all browsers, if you have problem
 * with your browser, try to load your script with an alpha channel
 * compliant browser, e.g. latest Mozilla.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function imagesavealpha($image, $saveflag) {}

/**
 * imagesetbrush sets the brush image to be used by all line drawing
 * functions (such as imageline and imagepolygon) when drawing with the
 * special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function imagesetbrush($image, $brush) {}

/**
 * imagesetpixel draws a pixel at the specified coordinate.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function imagesetpixel($image, $x, $y, $color) {}

/**
 * imagesetstyle sets the style to be used by all line drawing functions
 * (such as imageline and imagepolygon) when drawing with the special
 * color IMG_COLOR_STYLED or lines of images with color
 * IMG_COLOR_STYLEDBRUSHED.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function imagesetstyle($image, $style) {}

/**
 * imagesetthickness sets the thickness of the lines drawn when drawing
 * rectangles, polygons, ellipses etc. etc. to thickness pixels.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function imagesetthickness($image, $thickness) {}

/**
 * imagesettile sets the tile image to be used by all region filling
 * functions (such as imagefill and imagefilledpolygon) when filling with
 * the special color IMG_COLOR_TILED.
 * 
 * A tile is an image used to fill an area with a repeated pattern. Any
 * GD image can be used as a tile, and by setting the transparent color
 * index of the tile image with imagecolortransparent, a tile allows
 * certain parts of the underlying area to shine through can be created.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function imagesettile($image, $tile) {}

/**
 * Draws a string at the given coordinates.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function imagestring($image, $font, $x, $y, $string, $color) {}

/**
 * Draws a string vertically at the given coordinates.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function imagestringup($image, $font, $x, $y, $string, $color) {}

/**
 * Returns the width of the given image resource.
 *
 * @param resource
 * @return int
 **/
function imagesx($image) {}

/**
 * Returns the height of the given image resource.
 *
 * @param resource
 * @return int
 **/
function imagesy($image) {}

/**
 * imagetruecolortopalette converts a truecolor image to a palette image.
 * The code for this function was originally drawn from the Independent
 * JPEG Group library code, which is excellent. The code has been
 * modified to preserve as much alpha channel information as possible in
 * the resulting palette, in addition to preserving colors as well as
 * possible. This does not work as well as might be hoped. It is usually
 * best to simply produce a truecolor output image instead, which
 * guarantees the highest output quality.
 *
 * @param resource
 * @param bool
 * @param int
 * @return bool
 **/
function imagetruecolortopalette($image, $dither, $ncolors) {}

/**
 * This function calculates and returns the bounding box in pixels for a
 * TrueType text.
 *
 * @param float
 * @param float
 * @param string
 * @param string
 * @return array
 **/
function imagettfbbox($size, $angle, $fontfile, $text) {}

/**
 * Writes the given text into the image using TrueType fonts.
 *
 * @param resource
 * @param float
 * @param float
 * @param int
 * @param int
 * @param int
 * @param string
 * @param string
 * @return array
 **/
function imagettftext($image, $size, $angle, $x, $y, $color, $fontfile, $text) {}

/**
 * Returns the image types supported by the current PHP installation.
 *
 * @return int
 **/
function imagetypes() {}

/**
 * imagewbmp outputs or save a WBMP version of the given image.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function imagewbmp($image, $filename, $foreground) {}

/**
 * Outputs or save an XBM version of the given image.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function imagexbm($image, $filename, $foreground) {}

/**
 * Returns the extension for the given IMAGETYPE_XXX constant.
 *
 * @param int
 * @param bool
 * @return string
 **/
function image_type_to_extension($imagetype, $include_dot) {}

/**
 * The image_type_to_mime_type function will determine the Mime-Type for
 * an IMAGETYPE constant.
 *
 * @param int
 * @return string
 **/
function image_type_to_mime_type($imagetype) {}

/**
 * Convert an 8bit string to a quoted-printable string (according to
 * RFC2045, section 6.7).
 *
 * @param string
 * @return string
 **/
function imap_8bit($string) {}

/**
 * Returns all of the IMAP alert messages generated since the last
 * imap_alerts call, or the beginning of the page.
 * 
 * When imap_alerts is called, the alert stack is subsequently cleared.
 * The IMAP specification requires that these messages be passed to the
 * user.
 *
 * @return array
 **/
function imap_alerts() {}

/**
 * Appends a string message to the specified mailbox.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function imap_append($imap_stream, $mailbox, $message, $options) {}

/**
 * Decodes the given BASE-64 encoded text.
 *
 * @param string
 * @return string
 **/
function imap_base64($text) {}

/**
 * Convert an 8bit string to a base64 string according to RFC2045,
 * Section 6.8.
 *
 * @param string
 * @return string
 **/
function imap_binary($string) {}

/**
 * imap_body returns the body of the message, numbered msg_number in the
 * current mailbox.
 * 
 * imap_body will only return a verbatim copy of the message body. To
 * extract single parts of a multipart MIME-encoded message you have to
 * use imap_fetchstructure to analyze its structure and imap_fetchbody to
 * extract a copy of a single body component.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function imap_body($imap_stream, $msg_number, $options) {}

/**
 * Read the structure of a specified body section of a specific message.
 *
 * @param resource
 * @param int
 * @param string
 * @return object
 **/
function imap_bodystruct($imap_stream, $msg_number, $section) {}

/**
 * Checks information about the current mailbox.
 *
 * @param resource
 * @return object
 **/
function imap_check($imap_stream) {}

/**
 * This function causes a store to delete the specified flag to the flags
 * set for the messages in the specified sequence.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function imap_clearflag_full($imap_stream, $sequence, $flag, $options) {}

/**
 * Closes the imap stream.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function imap_close($imap_stream, $flag) {}

/**
 * Creates a new mailbox specified by mailbox.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imap_createmailbox($imap_stream, $mailbox) {}

/**
 * Marks messages listed in msg_number for deletion. Messages marked for
 * deletion will stay in the mailbox until either imap_expunge is called
 * or imap_close is called with the optional parameter CL_EXPUNGE.
 *
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function imap_delete($imap_stream, $msg_number, $options) {}

/**
 * Deletes the specified mailbox.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imap_deletemailbox($imap_stream, $mailbox) {}

/**
 * Gets all of the IMAP errors (if any) that have occurred during this
 * page request or since the error stack was reset.
 * 
 * When imap_errors is called, the error stack is subsequently cleared.
 *
 * @return array
 **/
function imap_errors() {}

/**
 * Deletes all the messages marked for deletion by imap_delete,
 * imap_mail_move, or imap_setflag_full.
 *
 * @param resource
 * @return bool
 **/
function imap_expunge($imap_stream) {}

/**
 * Fetch of a particular section of the body of the specified messages.
 * Body parts are not decoded by this function.
 *
 * @param resource
 * @param int
 * @param string
 * @param int
 * @return string
 **/
function imap_fetchbody($imap_stream, $msg_number, $section, $options) {}

/**
 * This function causes a fetch of the complete, unfiltered RFC2822
 * format header of the specified message.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function imap_fetchheader($imap_stream, $msg_number, $options) {}

/**
 * Fetches all the structured information for a given message.
 *
 * @param resource
 * @param int
 * @param int
 * @return object
 **/
function imap_fetchstructure($imap_stream, $msg_number, $options) {}

/**
 * This function fetches mail headers for the given sequence and returns
 * an overview of their contents.
 *
 * @param resource
 * @param string
 * @param int
 * @return array
 **/
function imap_fetch_overview($imap_stream, $sequence, $options) {}

/**
 * Purges the cache of entries of a specific type.
 *
 * @param resource
 * @param int
 * @return string
 **/
function imap_gc($imap_stream, $caches) {}

/**
 * Gets the ACL for a given mailbox.
 *
 * @param resource
 * @param string
 * @return array
 **/
function imap_getacl($imap_stream, $mailbox) {}

/**
 * Gets information on the mailboxes.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function imap_getmailboxes($imap_stream, $ref, $pattern) {}

/**
 * Gets information about the subscribed mailboxes.
 * 
 * Identical to imap_getmailboxes, except that it only returns mailboxes
 * that the user is subscribed to.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function imap_getsubscribed($imap_stream, $ref, $pattern) {}

/**
 * Retrieve the quota level settings, and usage statics per mailbox.
 * 
 * For a non-admin user version of this function, please see the
 * imap_get_quotaroot function of PHP.
 *
 * @param resource
 * @param string
 * @return array
 **/
function imap_get_quota($imap_stream, $quota_root) {}

/**
 * Retrieve the quota settings per user. The limit value represents the
 * total amount of space allowed for this user's total mailbox usage. The
 * usage value represents the user's current total mailbox capacity.
 *
 * @param resource
 * @param string
 * @return array
 **/
function imap_get_quotaroot($imap_stream, $quota_root) {}

/**
 * Gets information about the given message number by reading its
 * headers.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @return object
 **/
function imap_header($imap_stream, $msg_number, $fromlength, $subjectlength, $defaulthost) {}

/**
 * Gets information about the given message number by reading its
 * headers.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @return object
 **/
function imap_headerinfo($imap_stream, $msg_number, $fromlength, $subjectlength, $defaulthost) {}

/**
 * Returns headers for all messages in a mailbox.
 *
 * @param resource
 * @return array
 **/
function imap_headers($imap_stream) {}

/**
 * Gets the full text of the last IMAP error message that occurred on the
 * current page. The error stack is untouched; calling imap_last_error
 * subsequently, with no intervening errors, will return the same error.
 *
 * @return string
 **/
function imap_last_error() {}

/**
 * Read the list of mailboxes.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function imap_list($imap_stream, $ref, $pattern) {}

/**
 * Read the list of mailboxes.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function imap_listmailbox($imap_stream, $ref, $pattern) {}

/**
 * Returns an array containing the names of the mailboxes that have
 * content in the text of the mailbox.
 * 
 * This function is similar to imap_listmailbox, but it will additionally
 * check for the presence of the string content inside the mailbox data.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function imap_listscan($imap_stream, $ref, $pattern, $content) {}

/**
 * Gets an array of all the mailboxes that you have subscribed.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function imap_listsubscribed($imap_stream, $ref, $pattern) {}

/**
 * Gets an array of all the mailboxes that you have subscribed.
 *
 * @param resource
 * @param string
 * @param string
 * @return array
 **/
function imap_lsub($imap_stream, $ref, $pattern) {}

/**
 * This function allows sending of emails with correct handling of Cc and
 * Bcc receivers.
 * 
 * The parameters to, cc and bcc are all strings and are all parsed as
 * RFC822 address lists.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function imap_mail($to, $subject, $message, $additional_headers, $cc, $bcc, $rpath) {}

/**
 * Checks the current mailbox status on the server. It is similar to
 * imap_status, but will additionally sum up the size of all messages in
 * the mailbox, which will take some additional time to execute.
 *
 * @param resource
 * @return object
 **/
function imap_mailboxmsginfo($imap_stream) {}

/**
 * Create a MIME message based on the given envelope and body sections.
 *
 * @param array
 * @param array
 * @return string
 **/
function imap_mail_compose($envelope, $body) {}

/**
 * Copies mail messages specified by msglist to specified mailbox.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function imap_mail_copy($imap_stream, $msglist, $mailbox, $options) {}

/**
 * Moves mail messages specified by msglist to the specified mailbox.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function imap_mail_move($imap_stream, $msglist, $mailbox, $options) {}

/**
 * Decodes MIME message header extensions that are non ASCII text (see
 * RFC2047).
 *
 * @param string
 * @return array
 **/
function imap_mime_header_decode($text) {}

/**
 * Returns the message sequence number for the given uid.
 * 
 * This function is the inverse of imap_uid.
 *
 * @param resource
 * @param int
 * @return int
 **/
function imap_msgno($imap_stream, $uid) {}

/**
 * Gets the number of messages in the current mailbox.
 *
 * @param resource
 * @return int
 **/
function imap_num_msg($imap_stream) {}

/**
 * Gets the number of recent messages in the current mailbox.
 *
 * @param resource
 * @return int
 **/
function imap_num_recent($imap_stream) {}

/**
 * Opens an IMAP stream to a mailbox.
 * 
 * This function can also be used to open streams to POP3 and NNTP
 * servers, but some functions and features are only available on IMAP
 * servers.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return resource
 **/
function imap_open($mailbox, $username, $password, $options, $n_retries) {}

/**
 * imap_ping pings the stream to see if it's still active. It may
 * discover new mail; this is the preferred method for a periodic "new
 * mail check" as well as a "keep alive" for servers which have
 * inactivity timeout.
 *
 * @param resource
 * @return bool
 **/
function imap_ping($imap_stream) {}

/**
 * Convert a quoted-printable string to an 8 bit string according to
 * RFC2045, section 6.7.
 *
 * @param string
 * @return string
 **/
function imap_qprint($string) {}

/**
 * This function renames on old mailbox to new mailbox (see imap_open for
 * the format of mbox names).
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function imap_renamemailbox($imap_stream, $old_mbox, $new_mbox) {}

/**
 * Reopens the specified stream to a new mailbox on an IMAP or NNTP
 * server.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function imap_reopen($imap_stream, $mailbox, $options, $n_retries) {}

/**
 * Parses the address string as defined in RFC2822 and for each address.
 *
 * @param string
 * @param string
 * @return array
 **/
function imap_rfc822_parse_adrlist($address, $default_host) {}

/**
 * Gets an object of various header elements, similar to imap_header.
 *
 * @param string
 * @param string
 * @return object
 **/
function imap_rfc822_parse_headers($headers, $defaulthost) {}

/**
 * Returns a properly formatted email address as defined in RFC2822 given
 * the needed information.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function imap_rfc822_write_address($mailbox, $host, $personal) {}

/**
 * Saves a part or the whole body of the specified message.
 *
 * @param resource
 * @param mixed
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function imap_savebody($imap_stream, $file, $msg_number, $part_number, $options) {}

/**
 * Returns an array containing the names of the mailboxes that have
 * content in the text of the mailbox.
 * 
 * This function is similar to imap_listmailbox, but it will additionally
 * check for the presence of the string content inside the mailbox data.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function imap_scanmailbox($imap_stream, $ref, $pattern, $content) {}

/**
 * This function performs a search on the mailbox currently opened in the
 * given IMAP stream.
 * 
 * For example, to match all unanswered messages sent by Mom, you'd use:
 * "UNANSWERED FROM mom". Searches appear to be case insensitive. This
 * list of criteria is from a reading of the UW c-client source code and
 * may be incomplete or inaccurate (see also RFC2060, section 6.4.4).
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return array
 **/
function imap_search($imap_stream, $criteria, $options, $charset) {}

/**
 * Sets the ACL for a giving mailbox.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function imap_setacl($imap_stream, $mailbox, $id, $rights) {}

/**
 * Causes a store to add the specified flag to the flags set for the
 * messages in the specified sequence.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function imap_setflag_full($imap_stream, $sequence, $flag, $options) {}

/**
 * Sets an upper limit quota on a per mailbox basis.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function imap_set_quota($imap_stream, $quota_root, $quota_limit) {}

/**
 * Gets and sorts message numbers by the given parameters.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @param string
 * @return array
 **/
function imap_sort($imap_stream, $criteria, $reverse, $options, $search_criteria, $charset) {}

/**
 * Gets status information about the given mailbox.
 *
 * @param resource
 * @param string
 * @param int
 * @return object
 **/
function imap_status($imap_stream, $mailbox, $options) {}

/**
 * Subscribe to a new mailbox.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imap_subscribe($imap_stream, $mailbox) {}

/**
 * Gets a tree of a threaded message.
 *
 * @param resource
 * @param int
 * @return array
 **/
function imap_thread($imap_stream, $options) {}

/**
 * Sets or fetches the imap timeout.
 *
 * @param int
 * @param int
 * @return mixed
 **/
function imap_timeout($timeout_type, $timeout) {}

/**
 * This function returns the UID for the given message sequence number.
 * An UID is a unique identifier that will not change over time while a
 * message sequence number may change whenever the content of the mailbox
 * changes.
 * 
 * This function is the inverse of imap_msgno.
 *
 * @param resource
 * @param int
 * @return int
 **/
function imap_uid($imap_stream, $msg_number) {}

/**
 * Removes the deletion flag for a specified message, which is set by
 * imap_delete or imap_mail_move.
 *
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function imap_undelete($imap_stream, $msg_number, $flags) {}

/**
 * Unsubscribe from the specified mailbox.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function imap_unsubscribe($imap_stream, $mailbox) {}

/**
 * Decodes modified UTF-7 text into ISO-8859-1 string.
 * 
 * This function is needed to decode mailbox names that contain certain
 * characters which are not in range of printable ASCII characters.
 *
 * @param string
 * @return string
 **/
function imap_utf7_decode($text) {}

/**
 * Converts data to modified UTF-7 text.
 * 
 * This is needed to encode mailbox names that contain certain characters
 * which are not in range of printable ASCII characters.
 *
 * @param string
 * @return string
 **/
function imap_utf7_encode($data) {}

/**
 * Converts the given mime_encoded_text to UTF-8.
 *
 * @param string
 * @return string
 **/
function imap_utf8($mime_encoded_text) {}

/**
 * Join array elements with a glue string.
 *
 * @param string
 * @param array
 * @return string
 **/
function implode($glue, $pieces) {}

/**
 * Imports GET/POST/Cookie variables into the global scope. It is useful
 * if you disabled register_globals, but would like to see some variables
 * in the global scope.
 * 
 * If you're interested in importing other variables into the global
 * scope, such as $_SERVER, consider using extract.
 *
 * @param string
 * @param string
 * @return bool
 **/
function import_request_variables($types, $prefix) {}

/**
 * Get the inclued data.
 *
 * @return array
 **/
function inclued_get_data() {}

/**
 * @param string
 * @return string
 **/
function inet_ntop($in_addr) {}

/**
 * This function converts a human readable IPv4 or IPv6 address (if PHP
 * was built with IPv6 support enabled) into an address family
 * appropriate 32bit or 128bit binary structure.
 *
 * @param string
 * @return string
 **/
function inet_pton($address) {}

/**
 * ingres_autocommit is called before opening a transaction (before the
 * first call to ingres_query or just after a call to ingres_rollback or
 * ingres_commit) to switch the autocommit mode of the server on or off
 * (when the script begins the autocommit mode is off).
 * 
 * When autocommit mode is on, every query is automatically committed by
 * the server, as if ingres_commit was called after every call to
 * ingres_query. To see if autocommit is enabled use,
 * ingres_autocommit_state.
 * 
 * By default Ingres will rollback any uncommitted transactions at the
 * end of a request. Use this function or ingres_commit to ensure your
 * data is committed to the database.
 *
 * @param resource
 * @return bool
 **/
function ingres_autocommit($link) {}

/**
 * ingres_autocommit_state is called to determine whether the current
 * link has autocommit enabled or not.
 *
 * @param resource
 * @return bool
 **/
function ingres_autocommit_state($link) {}

/**
 * ingres_charset is called to determine the character set being used by
 * the Ingres client, from II_CHARSETxx (where xx is the installation
 * code).
 *
 * @param resource
 * @return string
 **/
function ingres_charset($link) {}

/**
 * ingres_close closes the connection to the Ingres server that is
 * associated with the specified link.
 * 
 * ingres_close is usually unnecessary, as it will not close persistent
 * connections and all non-persistent connections are automatically
 * closed at the end of the script.
 *
 * @param resource
 * @return bool
 **/
function ingres_close($link) {}

/**
 * ingres_commit commits the currently open transaction, making all
 * changes made to the database permanent.
 * 
 * This closes the transaction. A new transaction can be opened by
 * sending a query with ingres_query.
 * 
 * You can also have the server commit automatically after every query by
 * calling ingres_autocommit before opening the transaction.
 * 
 * By default Ingres will roll back any uncommitted transactions at the
 * end of a request. Use this function or ingres_autocommit to ensure
 * your that data is committed to the database.
 *
 * @param resource
 * @return bool
 **/
function ingres_commit($link) {}

/**
 * ingres_connect opens a connection with the given Ingres database.
 * 
 * The connection is closed when the script ends or when ingres_close is
 * called on this link.
 *
 * @param string
 * @param string
 * @param string
 * @param array
 * @return resource
 **/
function ingres_connect($database, $username, $password, $options) {}

/**
 * Returns a string with the active cursor name. If no cursor is active
 * then NULL is returned.
 *
 * @param resource
 * @return string
 **/
function ingres_cursor($result) {}

/**
 * Returns an integer containing the last error number. If no error was
 * reported 0 is returned.
 * 
 * If a link resource is passed to ingres_errno it returns the last error
 * recorded for the link. If no link is passed, then ingres_errno returns
 * the last error reported using the default link.
 * 
 * The function, ingres_errno, should always be called after executing a
 * database query. Calling another function before ingres_errno is called
 * will reset or change any error code from the last Ingres function
 * call.
 *
 * @param resource
 * @return int
 **/
function ingres_errno($link) {}

/**
 * Returns a string containing the last error, or NULL if no error has
 * occurred.
 * 
 * If a link resource is passed to ingres_error, it returns the last
 * error recorded for the link. If no link is passed then ingres_error
 * returns the last error reported using the default link.
 * 
 * The function, ingres_error, should always be called after executing
 * any database query. Calling another function before ingres_error is
 * called will reset or change any error message from the last Ingres
 * function call.
 *
 * @param resource
 * @return string
 **/
function ingres_error($link) {}

/**
 * Returns a string containing the last SQLSTATE, or NULL if no error has
 * occurred.
 * 
 * If a link resource is passed to ingres_errsqlstate, it returns the
 * last error recorded for the link. If no link is passed, then
 * ingres_errsqlstate returns the last error reported using the default
 * link.
 * 
 * The function, ingres_errsqlstate, should always be called after
 * executing any database query. Calling another function before
 * ingres_errsqlstate is called will reset or change any error message
 * from the last Ingres function call.
 *
 * @param resource
 * @return string
 **/
function ingres_errsqlstate($link) {}

/**
 * ingres_escape_string is used to escape certain characters within a
 * string before it is sent to the database server.
 *
 * @param resource
 * @param string
 * @return string
 **/
function ingres_escape_string($link, $source_string) {}

/**
 * Execute a query prepared using ingres_prepare.
 *
 * @param resource
 * @param array
 * @param string
 * @return boolean
 **/
function ingres_execute($result, $params, $types) {}

/**
 * This function is an extended version of ingres_fetch_row. In addition
 * to storing the data in the numeric indices of the result array, it
 * also stores the data in associative indices, using the field names as
 * keys.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence. To access the another column or
 * columns of the same name, you must use the numeric index of the column
 * or make an alias for the column. For example:
 * 
 * With regard to speed, the function is identical to
 * ingres_fetch_object, and almost as quick as ingres_fetch_row (the
 * difference is insignificant).
 * 
 * By default, arrays created by ingres_fetch_array start from position 1
 * and not 0 as with other DBMS extensions. The starting position can be
 * adjusted to 0 using the configuration parameter
 * ingres.array_index_start.
 *
 * @param resource
 * @param int
 * @return array
 **/
function ingres_fetch_array($result, $result_type) {}

/**
 * This function is similar to ingres_fetch_array, with one difference -
 * an object is returned instead of an array. Indirectly, this means that
 * you can access the data only by the field names and not by their
 * offsets (numbers are illegal property names).
 * 
 * With regard to speed, the function is identical to ingres_fetch_array,
 * and almost as quick as ingres_fetch_row (the difference is
 * insignificant).
 *
 * @param resource
 * @param int
 * @return object
 **/
function ingres_fetch_object($result, $result_type) {}

/**
 * This function is used to retrieve the return value following the
 * execution of an Ingres database procedure (stored procedure).
 *
 * @param resource
 * @return int
 **/
function ingres_fetch_proc_return($result) {}

/**
 * ingres_fetch_row returns an array that corresponds to the fetched row,
 * or if there are no more rows. Each result column is stored in an array
 * offset, starting at offset 1.
 * 
 * Subsequent calls to ingres_fetch_row return the next row in the result
 * set, or if there are no more rows.
 * 
 * By default, arrays created by ingres_fetch_row start from position 1
 * and not 0 as with other DBMS extensions. The starting position can be
 * adjusted to 0 using the configuration parameter
 * ingres.array_index_start.
 *
 * @param resource
 * @return array
 **/
function ingres_fetch_row($result) {}

/**
 * ingres_field_length returns the length of a field. This is the number
 * of bytes the server uses to store the field. For detailed information,
 * see the Ingres OpenAPI User Guide, Appendix "Data Types" in the Ingres
 * documentation.
 *
 * @param resource
 * @param int
 * @return int
 **/
function ingres_field_length($result, $index) {}

/**
 * ingres_field_name returns the name of a field in a query result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function ingres_field_name($result, $index) {}

/**
 * Test if a field is nullable.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ingres_field_nullable($result, $index) {}

/**
 * ingres_field_precision returns the precision of a field. This value is
 * used only for decimal, float, and money SQL data types. For detailed
 * information, see the Ingres OpenAPI User Guide, Appendix "Data Types"
 * in the Ingres documentation.
 *
 * @param resource
 * @param int
 * @return int
 **/
function ingres_field_precision($result, $index) {}

/**
 * ingres_field_scale returns the scale of a field. This value is used
 * only for the decimal SQL data type. For detailed information, see the
 * Ingres OpenAPI User Guide, Appendix "Data Types" in the Ingres
 * documentation.
 *
 * @param resource
 * @param int
 * @return int
 **/
function ingres_field_scale($result, $index) {}

/**
 * Get the type of a field in a query result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function ingres_field_type($result, $index) {}

/**
 * @param resource
 * @return bool
 **/
function ingres_free_result($result) {}

/**
 * Get the next Ingres error for the last executed query. Each call to
 * ingres_next_error can be followed by a call to ingres_errno,
 * ingres_error or ingres_errsqlstate to get the respective error number,
 * error text, or SQL STATE. While ingres_next_error returns , there are
 * more errors to fetch.
 *
 * @param resource
 * @return bool
 **/
function ingres_next_error($link) {}

/**
 * ingres_num_fields returns the number of fields in the results returned
 * by the Ingres server after a call to ingres_query.
 *
 * @param resource
 * @return int
 **/
function ingres_num_fields($result) {}

/**
 * This function primarily is meant to get the number of rows modified in
 * the database. However, it can be used to retrieve the number of rows
 * to fetch for a SELECT statement.
 *
 * @param resource
 * @return int
 **/
function ingres_num_rows($result) {}

/**
 * Open a persistent connection to an Ingres database.
 * 
 * There are only two differences between this function and
 * ingres_connect: First, when connecting, the function will initially
 * try to find a (persistent) link that is already opened with the same
 * parameters. If one is found, an identifier for it will be returned
 * instead of opening a new connection. Second, the connection to the
 * Ingres server will not be closed when the execution of the script
 * ends. Instead, the link will remain open for future use (ingres_close
 * will not close links established by ingres_pconnect). This type of
 * link is therefore called "persistent".
 *
 * @param string
 * @param string
 * @param string
 * @param array
 * @return resource
 **/
function ingres_pconnect($database, $username, $password, $options) {}

/**
 * Prepares a query for execution by ingres_execute.
 * 
 * The query becomes part of the currently open transaction. If there is
 * no open transaction, ingres_query opens a new transaction. To close
 * the transaction, you can call either ingres_commit to commit the
 * changes made to the database or ingres_rollback to cancel these
 * changes. When the script ends, any open transaction is rolled back (by
 * calling ingres_rollback). You can also use ingres_autocommit before
 * opening a new transaction to have every SQL query immediately
 * committed.
 *
 * @param resource
 * @param string
 * @return mixed
 **/
function ingres_prepare($link, $query) {}

/**
 * ingres_query sends the given query to the Ingres server.
 * 
 * The query becomes part of the currently open transaction. If there is
 * no open transaction, ingres_query opens a new transaction. To close
 * the transaction, you can call either ingres_commit to commit the
 * changes made to the database or ingres_rollback to cancel these
 * changes. When the script ends, any open transaction is rolled back (by
 * calling ingres_rollback). You can also use ingres_autocommit before
 * opening a new transaction to have every SQL query immediately
 * committed.
 *
 * @param resource
 * @param string
 * @param array
 * @param string
 * @return mixed
 **/
function ingres_query($link, $query, $params, $types) {}

/**
 * This function is used to position the cursor associated with the
 * result resource before issuing a fetch. If ingres.array_index_start is
 * set to 0 then the first row is 0 else it is 1. ingres_result_seek can
 * be used only with queries that make use of scrollable cursors. It
 * cannot be used with ingres_unbuffered_query.
 *
 * @param resource
 * @param integer
 * @return boolean
 **/
function ingres_result_seek($result, $position) {}

/**
 * ingres_rollback rolls back the currently open transaction, actually
 * cancelling all changes made to the database during the transaction.
 * 
 * This closes the transaction. A new transaction can be opened by
 * sending a query with ingres_query.
 *
 * @param resource
 * @return bool
 **/
function ingres_rollback($link) {}

/**
 * ingres_set_environment is called to set environmental options that
 * affect the output of certain values from Ingres, such as the timezone,
 * date format, decimal character separator, and float precision.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function ingres_set_environment($link, $options) {}

/**
 * ingres_unbuffered_query sends the given query to the Ingres server.
 * 
 * The query becomes part of the currently open transaction. If there is
 * no open transaction, ingres_unbuffered_query opens a new transaction.
 * To close the transaction, you can call either ingres_commit to commit
 * the changes made to the database or ingres_rollback to cancel these
 * changes. When the script ends, any open transaction is rolled back (by
 * calling ingres_rollback). You can also use ingres_autocommit before
 * opening a new transaction to have every SQL query immediately
 * committed. Ingres allows only a single unbuffered statement to be
 * active at any one time. The extension will close any active unbuffered
 * statements before executing any SQL. In addition you cannot use
 * ingres_result_seek to position the row before fetching.
 *
 * @param resource
 * @param string
 * @param array
 * @param string
 * @return mixed
 **/
function ingres_unbuffered_query($link, $query, $params, $types) {}

/**
 * Sets the value of the given configuration option. The configuration
 * option will keep this new value during the script's execution, and
 * will be restored at the script's ending.
 *
 * @param string
 * @param string
 * @return string
 **/
function ini_alter($varname, $newvalue) {}

/**
 * Returns the value of the configuration option on success.
 *
 * @param string
 * @return string
 **/
function ini_get($varname) {}

/**
 * Returns all the registered configuration options.
 *
 * @param string
 * @param bool
 * @return array
 **/
function ini_get_all($extension, $details) {}

/**
 * Restores a given configuration option to its original value.
 *
 * @param string
 * @return void
 **/
function ini_restore($varname) {}

/**
 * Sets the value of the given configuration option. The configuration
 * option will keep this new value during the script's execution, and
 * will be restored at the script's ending.
 *
 * @param string
 * @param string
 * @return string
 **/
function ini_set($varname, $newvalue) {}

/**
 * inotify_add_watch adds a new watch or modify an existing watch for the
 * file or directory specified in pathname.
 * 
 * Using inotify_add_watch on a watched object replaces the existing
 * watch. Using the IN_MASK_ADD constant adds (OR) events to the existing
 * watch.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function inotify_add_watch($inotify_instance, $pathname, $mask) {}

/**
 * Initialize an inotify instance for use with inotify_add_watch
 *
 * @return resource
 **/
function inotify_init() {}

/**
 * This function allows to know if inotify_read will block or not. If a
 * number upper than zero is returned, there are pending events and
 * inotify_read will not block.
 *
 * @param resource
 * @return int
 **/
function inotify_queue_len($inotify_instance) {}

/**
 * Read inotify events from an inotify instance.
 *
 * @param resource
 * @return array
 **/
function inotify_read($inotify_instance) {}

/**
 * inotify_rm_watch removes the watch watch_descriptor from the inotify
 * instance inotify_instance.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function inotify_rm_watch($inotify_instance, $watch_descriptor) {}

/**
 * Checks if the given interface has been defined.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function interface_exists($interface_name, $autoload) {}

/**
 * Return ICU error code name.
 *
 * @param int
 * @return string
 **/
function intl_error_name($error_code) {}

/**
 * Useful to handle errors occurred in static methods when there's no
 * object to get error code from.
 *
 * @return int
 **/
function intl_get_error_code() {}

/**
 * Get error message from last internationalization function called.
 *
 * @return string
 **/
function intl_get_error_message() {}

/**
 * @param int
 * @return bool
 **/
function intl_is_failure($error_code) {}

/**
 * Returns the integer value of var, using the specified base for the
 * conversion (the default is base 10).
 *
 * @param mixed
 * @param int
 * @return int
 **/
function intval($var, $base) {}

/**
 * Searches haystack for needle.
 *
 * @param mixed
 * @param array
 * @param bool
 * @return bool
 **/
function in_array($needle, $haystack, $strict) {}

/**
 * The function ip2long generates an IPv4 Internet network address from
 * its Internet standard format (dotted string) representation.
 * 
 * ip2long will also work with non-complete IP addresses. Read for more
 * info.
 *
 * @param string
 * @return int
 **/
function ip2long($ip_address) {}

/**
 * Embeds binary IPTC data into a JPEG image.
 *
 * @param string
 * @param string
 * @param int
 * @return mixed
 **/
function iptcembed($iptcdata, $jpeg_file_name, $spool) {}

/**
 * Parses an IPTC block into its single tags.
 *
 * @param string
 * @return array
 **/
function iptcparse($iptcblock) {}

/**
 * Checks if the given object is of this class or has this class as one
 * of its parents.
 *
 * @param object
 * @param string
 * @return bool
 **/
function is_a($object, $class_name) {}

/**
 * Finds whether the given variable is an array.
 *
 * @param mixed
 * @return bool
 **/
function is_array($var) {}

/**
 * Finds whether the given variable is a native binary string.
 *
 * @param mixed
 * @return bool
 **/
function is_binary($var) {}

/**
 * Finds whether the given variable is a boolean.
 *
 * @param mixed
 * @return bool
 **/
function is_bool($var) {}

/**
 * Finds whether the given variable is a native unicode or binary string.
 *
 * @param mixed
 * @return bool
 **/
function is_buffer($var) {}

/**
 * Verify that the contents of a variable can be called as a function.
 * This can check that a simple variable contains the name of a valid
 * function, or that an array contains a properly encoded object and
 * function name.
 *
 * @param callback
 * @param bool
 * @param string
 * @return bool
 **/
function is_callable($name, $syntax_only, &$callable_name) {}

/**
 * Tells whether the given filename is a directory.
 *
 * @param string
 * @return bool
 **/
function is_dir($filename) {}

/**
 * Finds whether the type of the given variable is float.
 *
 * @param mixed
 * @return bool
 **/
function is_double($var) {}

/**
 * Tells whether the filename is executable.
 *
 * @param string
 * @return bool
 **/
function is_executable($filename) {}

/**
 * Tells whether the given file is a regular file.
 *
 * @param string
 * @return bool
 **/
function is_file($filename) {}

/**
 * Checks whether val is a legal finite on this platform.
 *
 * @param float
 * @return bool
 **/
function is_finite($val) {}

/**
 * Finds whether the type of the given variable is float.
 *
 * @param mixed
 * @return bool
 **/
function is_float($var) {}

/**
 * Returns if val is infinite (positive or negative), like the result of
 * log(0) or any value too big to fit into a float on this platform.
 *
 * @param float
 * @return bool
 **/
function is_infinite($val) {}

/**
 * Finds whether the type of the given variable is integer.
 *
 * @param mixed
 * @return bool
 **/
function is_int($var) {}

/**
 * Finds whether the type of the given variable is integer.
 *
 * @param mixed
 * @return bool
 **/
function is_integer($var) {}

/**
 * Tells whether the given file is a symbolic link.
 *
 * @param string
 * @return bool
 **/
function is_link($filename) {}

/**
 * Finds whether the type of the given variable is integer.
 *
 * @param mixed
 * @return bool
 **/
function is_long($var) {}

/**
 * Checks whether val is 'not a number', like the result of acos(1.01).
 *
 * @param float
 * @return bool
 **/
function is_nan($val) {}

/**
 * Finds whether the given variable is .
 *
 * @param mixed
 * @return bool
 **/
function is_null($var) {}

/**
 * Finds whether the given variable is numeric. Numeric strings consist
 * of optional sign, any number of digits, optional decimal part and
 * optional exponential part. Thus +0123.45e6 is a valid numeric value.
 * Hexadecimal notation (0xFF) is allowed too but only without sign,
 * decimal and exponential part.
 *
 * @param mixed
 * @return bool
 **/
function is_numeric($var) {}

/**
 * Finds whether the given variable is an object.
 *
 * @param mixed
 * @return bool
 **/
function is_object($var) {}

/**
 * Tells whether the filename is readable.
 *
 * @param string
 * @return bool
 **/
function is_readable($filename) {}

/**
 * Finds whether the type of the given variable is float.
 *
 * @param mixed
 * @return bool
 **/
function is_real($var) {}

/**
 * Finds whether the given variable is a resource.
 *
 * @param mixed
 * @return bool
 **/
function is_resource($var) {}

/**
 * Finds whether the given variable is a scalar.
 * 
 * Scalar variables are those containing an integer, float, string or
 * boolean. Types array, object and resource are not scalar.
 *
 * @param mixed
 * @return bool
 **/
function is_scalar($var) {}

/**
 * This function is useful to check if the SOAP call failed, but without
 * using exceptions. To use it, create a SoapClient object with the
 * exceptions option set to zero or . In this case, the SOAP method will
 * return a special SoapFault object which encapsulates the fault details
 * (faultcode, faultstring, faultactor and faultdetails).
 * 
 * If exceptions is not set then SOAP call will throw an exception on
 * error. is_soap_fault checks if the given parameter is a SoapFault
 * object.
 *
 * @param mixed
 * @return bool
 **/
function is_soap_fault($object) {}

/**
 * Finds whether the type given variable is string.
 *
 * @param mixed
 * @return bool
 **/
function is_string($var) {}

/**
 * Checks if the given object has the class class_name as one of its
 * parents.
 *
 * @param mixed
 * @param string
 * @return bool
 **/
function is_subclass_of($object, $class_name) {}

/**
 * Finds whether the given variable is a unicode string.
 *
 * @param mixed
 * @return bool
 **/
function is_unicode($var) {}

/**
 * Returns if the file named by filename was uploaded via HTTP POST. This
 * is useful to help ensure that a malicious user hasn't tried to trick
 * the script into working on files upon which it should not be
 * working--for instance, /etc/passwd.
 * 
 * This sort of check is especially important if there is any chance that
 * anything done with uploaded files could reveal their contents to the
 * user, or even to other users on the same system.
 * 
 * For proper working, the function is_uploaded_file needs an argument
 * like $_FILES['userfile']['tmp_name'], - the name of the uploaded file
 * on the clients machine $_FILES['userfile']['name'] does not work.
 *
 * @param string
 * @return bool
 **/
function is_uploaded_file($filename) {}

/**
 * Returns if the filename exists and is writable. The filename argument
 * may be a directory name allowing you to check if a directory is
 * writable.
 * 
 * Keep in mind that PHP may be accessing the file as the user id that
 * the web server runs as (often 'nobody'). Safe mode limitations are not
 * taken into account.
 *
 * @param string
 * @return bool
 **/
function is_writable($filename) {}

/**
 * Returns if the filename exists and is writable. The filename argument
 * may be a directory name allowing you to check if a directory is
 * writable.
 * 
 * Keep in mind that PHP may be accessing the file as the user id that
 * the web server runs as (often 'nobody'). Safe mode limitations are not
 * taken into account.
 *
 * @param string
 * @return bool
 **/
function is_writeable($filename) {}

/**
 * Calls a function for every element in an iterator.
 *
 * @param Traversable
 * @param callback
 * @param array
 * @return int
 **/
function iterator_apply($iterator, $function, $args) {}

/**
 * Count the elements in an iterator.
 *
 * @param Traversable
 * @return int
 **/
function iterator_count($iterator) {}

/**
 * Copy the elements of an iterator into an array.
 *
 * @param Traversable
 * @param bool
 * @return array
 **/
function iterator_to_array($iterator, $use_keys) {}

/**
 * Clears last Java exception.
 *
 * @return void
 **/
function java_last_exception_clear() {}

/**
 * Gets last Java exception.
 *
 * @return object
 **/
function java_last_exception_get() {}

/**
 * Returns the day of the week. Can return a string or an integer
 * depending on the mode.
 *
 * @param int
 * @param int
 * @return mixed
 **/
function jddayofweek($julianday, $mode) {}

/**
 * Returns a string containing a month name. mode tells this function
 * which calendar to convert the Julian Day Count to, and what type of
 * month names are to be returned.
 * 
 * Calendar modes
 * 
 * Mode Meaning Values
 * 
 * 0 Gregorian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug,
 * Sep, Oct, Nov, Dec
 * 
 * 1 Gregorian January, February, March, April, May, June, July, August,
 * September, October, November, December
 * 
 * 2 Julian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
 * Oct, Nov, Dec
 * 
 * 3 Julian January, February, March, April, May, June, July, August,
 * September, October, November, December
 * 
 * 4 Jewish Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII,
 * Nisan, Iyyar, Sivan, Tammuz, Av, Elul
 * 
 * 5 French Republican Vendemiaire, Brumaire, Frimaire, Nivose,
 * Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor,
 * Fructidor, Extra
 *
 * @param int
 * @param int
 * @return string
 **/
function jdmonthname($julianday, $mode) {}

/**
 * Converts a Julian Day Count to the French Republican Calendar.
 *
 * @param int
 * @return string
 **/
function jdtofrench($juliandaycount) {}

/**
 * Converts Julian Day Count to a string containing the Gregorian date in
 * the format of "month/day/year".
 *
 * @param int
 * @return string
 **/
function jdtogregorian($julianday) {}

/**
 * Converts a Julian Day Count to the Jewish Calendar.
 *
 * @param int
 * @param bool
 * @param int
 * @return string
 **/
function jdtojewish($juliandaycount, $hebrew, $fl) {}

/**
 * Converts Julian Day Count to a string containing the Julian Calendar
 * Date in the format of "month/day/year".
 *
 * @param int
 * @return string
 **/
function jdtojulian($julianday) {}

/**
 * This function will return a Unix timestamp corresponding to the Julian
 * Day given in jday or if jday is not inside the Unix epoch (Gregorian
 * years between 1970 and 2037 or 2440588 = jday = 2465342 ). The time
 * returned is localtime (and not GMT).
 *
 * @param int
 * @return int
 **/
function jdtounix($jday) {}

/**
 * Although this function can handle dates all the way back to the year 1
 * (3761 B.C.), such use may not be meaningful. The Jewish calendar has
 * been in use for several thousand years, but in the early days there
 * was no formula to determine the start of a month. A new month was
 * started when the new moon was first observed.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function jewishtojd($month, $day, $year) {}

/**
 * Join array elements with a glue string.
 *
 * @param string
 * @param array
 * @return string
 **/
function join($glue, $pieces) {}

/**
 * Converts a JPEG file into a WBMP file.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function jpeg2wbmp($jpegname, $wbmpname, $dest_height, $dest_width, $threshold) {}

/**
 * Takes a JSON encoded string and converts it into a PHP variable.
 *
 * @param string
 * @param bool
 * @param int
 * @return mixed
 **/
function json_decode($json, $assoc, $depth) {}

/**
 * Returns a string containing the JSON representation of value.
 *
 * @param mixed
 * @param int
 * @return string
 **/
function json_encode($value, $options) {}

/**
 * Returns the last error (if any) occurred by last JSON parsing.
 *
 * @return int
 **/
function json_last_error() {}

/**
 * Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.
 * 
 * Although this function can handle dates all the way back to 4713 B.C.,
 * such use may not be meaningful. The calendar was created in 46 B.C.,
 * but the details did not stabilize until at least 8 A.D., and perhaps
 * as late at the 4th century. Also, the beginning of a year varied from
 * one culture to another - not all accepted January as the first month.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function juliantojd($month, $day, $year) {}

/**
 * kadm5_chpass_principal sets the new password password for the
 * principal.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function kadm5_chpass_principal($handle, $principal, $password) {}

/**
 * Creates a principal with the given password.
 *
 * @param resource
 * @param string
 * @param string
 * @param array
 * @return bool
 **/
function kadm5_create_principal($handle, $principal, $password, $options) {}

/**
 * Removes the principal from the Kerberos database.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function kadm5_delete_principal($handle, $principal) {}

/**
 * Closes the connection to the admin server and releases all related
 * resources.
 *
 * @param resource
 * @return bool
 **/
function kadm5_destroy($handle) {}

/**
 * Flush all changes to the Kerberos database, leaving the connection to
 * the Kerberos admin server open.
 *
 * @param resource
 * @return bool
 **/
function kadm5_flush($handle) {}

/**
 * Gets an array containing the policies's names.
 *
 * @param resource
 * @return array
 **/
function kadm5_get_policies($handle) {}

/**
 * Gets the principal's entries from the Kerberos database.
 *
 * @param resource
 * @param string
 * @return array
 **/
function kadm5_get_principal($handle, $principal) {}

/**
 * kadm5_get_principals returns an array containing the principals's
 * names.
 *
 * @param resource
 * @return array
 **/
function kadm5_get_principals($handle) {}

/**
 * Opens a connection with the KADM5 library using the principal and the
 * given password to obtain initial credentials from the admin_server.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function kadm5_init_with_password($admin_server, $realm, $principal, $password) {}

/**
 * Modifies a principal according to the given options.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function kadm5_modify_principal($handle, $principal, $options) {}

/**
 * key returns the index element of the current array position.
 *
 * @param array
 * @return mixed
 **/
function key(&$array) {}

/**
 * Sorts an array by key in reverse order, maintaining key to data
 * correlations. This is useful mainly for associative arrays.
 *
 * @param array
 * @param int
 * @return bool
 **/
function krsort(&$array, $sort_flags) {}

/**
 * Sorts an array by key, maintaining key to data correlations. This is
 * useful mainly for associative arrays.
 *
 * @param array
 * @param int
 * @return bool
 **/
function ksort(&$array, $sort_flags) {}

/**
 * Returns a string with the first character of str , lowercased if that
 * character is alphabetic.
 * 
 * Note that 'alphabetic' is determined by the current locale. For
 * instance, in the default "C" locale characters such as umlaut-a ()
 * will not be converted.
 *
 * @param string
 * @return string
 **/
function lcfirst($str) {}

/**
 * lcg_value returns a pseudo random number in the range of (0, 1). The
 * function combines two CGs with periods of 2^31 - 85 and 2^31 - 249.
 * The period of this function is equal to the product of both primes.
 *
 * @return float
 **/
function lcg_value() {}

/**
 * Attempts to change the group of the symlink filename to group.
 * 
 * Only the superuser may change the group of a symlink arbitrarily;
 * other users may change the group of a symlink to any group of which
 * that user is a member.
 *
 * @param string
 * @param mixed
 * @return bool
 **/
function lchgrp($filename, $group) {}

/**
 * Attempts to change the owner of the symlink filename to user user.
 * 
 * Only the superuser may change the owner of a symlink.
 *
 * @param string
 * @param mixed
 * @return bool
 **/
function lchown($filename, $user) {}

/**
 * Translate ISO-8859 characters to t61 characters.
 * 
 * This function is useful if you have to talk to a legacy LDAPv2 server.
 *
 * @param string
 * @return string
 **/
function ldap_8859_to_t61($value) {}

/**
 * Add entries in the LDAP directory.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function ldap_add($link_identifier, $dn, $entry) {}

/**
 * Binds to the LDAP directory with specified RDN and password.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ldap_bind($link_identifier, $bind_rdn, $bind_password) {}

/**
 * Unbinds from the LDAP directory.
 *
 * @param resource
 * @return bool
 **/
function ldap_close($link_identifier) {}

/**
 * Compare value of attribute with value of same attribute in an LDAP
 * directory entry.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return mixed
 **/
function ldap_compare($link_identifier, $dn, $attribute, $value) {}

/**
 * Establishes a connection to a LDAP server on a specified hostname and
 * port.
 *
 * @param string
 * @param int
 * @return resource
 **/
function ldap_connect($hostname, $port) {}

/**
 * Returns the number of entries stored in the result of previous search
 * operations.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function ldap_count_entries($link_identifier, $result_identifier) {}

/**
 * Deletes a particular entry in LDAP directory.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ldap_delete($link_identifier, $dn) {}

/**
 * Turns the specified dn, into a more user-friendly form, stripping off
 * type names.
 *
 * @param string
 * @return string
 **/
function ldap_dn2ufn($dn) {}

/**
 * Returns the string error message explaining the error number errno.
 * While LDAP errno numbers are standardized, different libraries return
 * different or even localized textual error messages. Never check for a
 * specific error message text, but always use an error number to check.
 *
 * @param int
 * @return string
 **/
function ldap_err2str($errno) {}

/**
 * Returns the standardized error number returned by the last LDAP
 * command. This number can be converted into a textual error message
 * using ldap_err2str.
 *
 * @param resource
 * @return int
 **/
function ldap_errno($link_identifier) {}

/**
 * Returns the string error message explaining the error generated by the
 * last LDAP command for the given link_identifier. While LDAP errno
 * numbers are standardized, different libraries return different or even
 * localized textual error messages. Never check for a specific error
 * message text, but always use an error number to check.
 * 
 * Unless you lower your warning level in your sufficiently or prefix
 * your LDAP commands with @ (at) characters to suppress warning output,
 * the errors generated will also show up in your HTML output.
 *
 * @param resource
 * @return string
 **/
function ldap_error($link_identifier) {}

/**
 * Splits the DN returned by ldap_get_dn and breaks it up into its
 * component parts. Each part is known as Relative Distinguished Name, or
 * RDN.
 *
 * @param string
 * @param int
 * @return array
 **/
function ldap_explode_dn($dn, $with_attrib) {}

/**
 * Gets the first attribute in the given entry. Remaining attributes are
 * retrieved by calling ldap_next_attribute successively.
 * 
 * Similar to reading entries, attributes are also read one by one from a
 * particular entry.
 *
 * @param resource
 * @param resource
 * @return string
 **/
function ldap_first_attribute($link_identifier, $result_entry_identifier) {}

/**
 * Returns the entry identifier for first entry in the result. This entry
 * identifier is then supplied to ldap_next_entry routine to get
 * successive entries from the result.
 * 
 * Entries in the LDAP result are read sequentially using the
 * ldap_first_entry and ldap_next_entry functions.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function ldap_first_entry($link_identifier, $result_identifier) {}

/**
 * @param resource
 * @param resource
 * @return resource
 **/
function ldap_first_reference($link, $result) {}

/**
 * Frees up the memory allocated internally to store the result. All
 * result memory will be automatically freed when the script terminates.
 * 
 * Typically all the memory allocated for the LDAP result gets freed at
 * the end of the script. In case the script is making successive
 * searches which return large result sets, ldap_free_result could be
 * called to keep the runtime memory usage by the script low.
 *
 * @param resource
 * @return bool
 **/
function ldap_free_result($result_identifier) {}

/**
 * Reads attributes and values from an entry in the search result.
 * 
 * Having located a specific entry in the directory, you can find out
 * what information is held for that entry by using this call. You would
 * use this call for an application which "browses" directory entries
 * and/or where you do not know the structure of the directory entries.
 * In many applications you will be searching for a specific attribute
 * such as an email address or a surname, and won't care what other data
 * is held.
 *
 * @param resource
 * @param resource
 * @return array
 **/
function ldap_get_attributes($link_identifier, $result_entry_identifier) {}

/**
 * Finds out the DN of an entry in the result.
 *
 * @param resource
 * @param resource
 * @return string
 **/
function ldap_get_dn($link_identifier, $result_entry_identifier) {}

/**
 * Reads multiple entries from the given result, and then reading the
 * attributes and multiple values.
 *
 * @param resource
 * @param resource
 * @return array
 **/
function ldap_get_entries($link_identifier, $result_identifier) {}

/**
 * Sets retval to the value of the specified option.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function ldap_get_option($link_identifier, $option, &$retval) {}

/**
 * Reads all the values of the attribute in the entry in the result.
 * 
 * This call needs a result_entry_identifier, so needs to be preceded by
 * one of the ldap search calls and one of the calls to get an individual
 * entry.
 * 
 * You application will either be hard coded to look for certain
 * attributes (such as "surname" or "mail") or you will have to use the
 * ldap_get_attributes call to work out what attributes exist for a given
 * entry.
 *
 * @param resource
 * @param resource
 * @param string
 * @return array
 **/
function ldap_get_values($link_identifier, $result_entry_identifier, $attribute) {}

/**
 * Reads all the values of the attribute in the entry in the result.
 * 
 * This function is used exactly like ldap_get_values except that it
 * handles binary data and not string data.
 *
 * @param resource
 * @param resource
 * @param string
 * @return array
 **/
function ldap_get_values_len($link_identifier, $result_entry_identifier, $attribute) {}

/**
 * Performs the search for a specified filter on the directory with the
 * scope LDAP_SCOPE_ONELEVEL.
 * 
 * LDAP_SCOPE_ONELEVEL means that the search should only return
 * information that is at the level immediately below the base_dn given
 * in the call. (Equivalent to typing "ls" and getting a list of files
 * and folders in the current working directory.)
 *
 * @param resource
 * @param string
 * @param string
 * @param array
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function ldap_list($link_identifier, $base_dn, $filter, $attributes, $attrsonly, $sizelimit, $timelimit, $deref) {}

/**
 * Modify the existing entries in the LDAP directory. The structure of
 * the entry is same as in ldap_add.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function ldap_modify($link_identifier, $dn, $entry) {}

/**
 * Adds one or more attributes to the specified dn. It performs the
 * modification at the attribute level as opposed to the object level.
 * Object-level additions are done by the ldap_add function.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function ldap_mod_add($link_identifier, $dn, $entry) {}

/**
 * Removes one or more attributes from the specified dn. It performs the
 * modification at the attribute level as opposed to the object level.
 * Object-level deletions are done by the ldap_delete function.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function ldap_mod_del($link_identifier, $dn, $entry) {}

/**
 * Replaces one or more attributes from the specified dn. It performs the
 * modification at the attribute level as opposed to the object level.
 * Object-level modifications are done by the ldap_modify function.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function ldap_mod_replace($link_identifier, $dn, $entry) {}

/**
 * Retrieves the attributes in an entry. The first call to
 * ldap_next_attribute is made with the result_entry_identifier returned
 * from ldap_first_attribute.
 *
 * @param resource
 * @param resource
 * @return string
 **/
function ldap_next_attribute($link_identifier, $result_entry_identifier) {}

/**
 * Retrieve the entries stored in the result. Successive calls to the
 * ldap_next_entry return entries one by one till there are no more
 * entries. The first call to ldap_next_entry is made after the call to
 * ldap_first_entry with the result_entry_identifier as returned from the
 * ldap_first_entry.
 *
 * @param resource
 * @param resource
 * @return resource
 **/
function ldap_next_entry($link_identifier, $result_entry_identifier) {}

/**
 * @param resource
 * @param resource
 * @return resource
 **/
function ldap_next_reference($link, $entry) {}

/**
 * @param resource
 * @param resource
 * @param array
 * @return bool
 **/
function ldap_parse_reference($link, $entry, &$referrals) {}

/**
 * @param resource
 * @param resource
 * @param int
 * @param string
 * @param string
 * @param array
 * @return bool
 **/
function ldap_parse_result($link, $result, &$errcode, &$matcheddn, &$errmsg, &$referrals) {}

/**
 * Performs the search for a specified filter on the directory with the
 * scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from
 * the directory.
 *
 * @param resource
 * @param string
 * @param string
 * @param array
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function ldap_read($link_identifier, $base_dn, $filter, $attributes, $attrsonly, $sizelimit, $timelimit, $deref) {}

/**
 * The entry specified by dn is renamed/moved.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function ldap_rename($link_identifier, $dn, $newrdn, $newparent, $deleteoldrdn) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function ldap_sasl_bind($link, $binddn, $password, $sasl_mech, $sasl_realm, $sasl_authc_id, $sasl_authz_id, $props) {}

/**
 * Performs the search for a specified filter on the directory with the
 * scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the
 * entire directory.
 * 
 * From 4.0.5 on it's also possible to do parallel searches. To do this
 * you use an array of link identifiers, rather than a single identifier,
 * as the first argument. If you don't want the same base DN and the same
 * filter for all the searches, you can also use an array of base DNs
 * and/or an array of filters. Those arrays must be of the same size as
 * the link identifier array since the first entries of the arrays are
 * used for one search, the second entries are used for another, and so
 * on. When doing parallel searches an array of search result identifiers
 * is returned, except in case of error, then the entry corresponding to
 * the search will be . This is very much like the value normally
 * returned, except that a result identifier is always returned when a
 * search was made. There are some rare cases where the normal search
 * returns while the parallel search returns an identifier.
 *
 * @param resource
 * @param string
 * @param string
 * @param array
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function ldap_search($link_identifier, $base_dn, $filter, $attributes, $attrsonly, $sizelimit, $timelimit, $deref) {}

/**
 * Sets the value of the specified option to be newval.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function ldap_set_option($link_identifier, $option, $newval) {}

/**
 * @param resource
 * @param callback
 * @return bool
 **/
function ldap_set_rebind_proc($link, $callback) {}

/**
 * @param resource
 * @param resource
 * @param string
 * @return bool
 **/
function ldap_sort($link, $result, $sortfilter) {}

/**
 * @param resource
 * @return bool
 **/
function ldap_start_tls($link) {}

/**
 * @param string
 * @return string
 **/
function ldap_t61_to_8859($value) {}

/**
 * Unbinds from the LDAP directory.
 *
 * @param resource
 * @return bool
 **/
function ldap_unbind($link_identifier) {}

/**
 * The Levenshtein distance is defined as the minimal number of
 * characters you have to replace, insert or delete to transform str1
 * into str2. The complexity of the algorithm is O(m*n), where n and m
 * are the length of str1 and str2 (rather good when compared to
 * similar_text, which is O(max(n,m)**3), but still expensive).
 * 
 * In its simplest form the function will take only the two strings as
 * parameter and will calculate just the number of insert, replace and
 * delete operations needed to transform str1 into str2.
 * 
 * A second variant will take three additional parameters that define the
 * cost of insert, replace and delete operations. This is more general
 * and adaptive than variant one, but not as efficient.
 *
 * @param string
 * @param string
 * @return int
 **/
function levenshtein($str1, $str2) {}

/**
 * libxml_clear_errors clears the libxml error buffer.
 *
 * @return void
 **/
function libxml_clear_errors() {}

/**
 * Disable/enable the ability to load external entities.
 *
 * @param bool
 * @return ReturnType
 **/
function libxml_disable_entity_loader($disable) {}

/**
 * Retrieve array of errors.
 *
 * @return array
 **/
function libxml_get_errors() {}

/**
 * Retrieve last error from libxml.
 *
 * @return LibXMLError
 **/
function libxml_get_last_error() {}

/**
 * Sets the streams context for the next libxml document load or write.
 *
 * @param resource
 * @return void
 **/
function libxml_set_streams_context($streams_context) {}

/**
 * libxml_use_internal_errors allows you to disable standard libxml
 * errors and enable user error handling.
 *
 * @param bool
 * @return bool
 **/
function libxml_use_internal_errors($use_errors) {}

/**
 * link creates a hard link.
 *
 * @param string
 * @param string
 * @return bool
 **/
function link($from_path, $to_path) {}

/**
 * Gets information about a link.
 * 
 * This function is used to verify if a link (pointed to by path) really
 * exists (using the same method as the S_ISLNK macro defined in stat.h).
 *
 * @param string
 * @return int
 **/
function linkinfo($path) {}

/**
 * Returns an associative array containing localized numeric and monetary
 * formatting information.
 *
 * @return array
 **/
function localeconv() {}

/**
 * This function returns the default Locale, which is used by PHP to
 * localize certain features. Please note that this isn't influenced by
 * setlocale or the system settings.
 *
 * @return string
 **/
function locale_get_default() {}

/**
 * Sets the default Locale for PHP programs. Please note that this has
 * nothing to do with setlocale nor with the system locale.
 *
 * @param string
 * @return bool
 **/
function locale_set_default($name) {}

/**
 * The localtime function returns an array identical to that of the
 * structure returned by the C function call.
 *
 * @param int
 * @param bool
 * @return array
 **/
function localtime($timestamp, $is_associative) {}

/**
 * If the optional base parameter is specified, log returns logbase arg,
 * otherwise log returns the natural logarithm of arg.
 *
 * @param float
 * @param float
 * @return float
 **/
function log($arg, $base) {}

/**
 * log1p returns log(1 + number) computed in a way that is accurate even
 * when the value of number is close to zero. log might only return
 * log(1) in this case due to lack of precision.
 *
 * @param float
 * @return float
 **/
function log1p($number) {}

/**
 * Returns the base-10 logarithm of arg.
 *
 * @param float
 * @return float
 **/
function log10($arg) {}

/**
 * The function long2ip generates an Internet address in dotted format
 * (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.
 *
 * @param string
 * @return string
 **/
function long2ip($proper_address) {}

/**
 * Gathers the statistics of the file or symbolic link named by filename.
 *
 * @param string
 * @return array
 **/
function lstat($filename) {}

/**
 * Strip whitespace (or other characters) from the beginning of a string.
 *
 * @param string
 * @param string
 * @return string
 **/
function ltrim($str, $charlist) {}

/**
 * lzf_compress compresses the given data string using LZF encoding.
 *
 * @param string
 * @return string
 **/
function lzf_compress($data) {}

/**
 * lzf_compress decompresses the given data string containing lzf encoded
 * data.
 *
 * @param string
 * @return string
 **/
function lzf_decompress($data) {}

/**
 * Determines what was LZF extension optimized for during compilation.
 *
 * @return int
 **/
function lzf_optimized_for() {}

/**
 * Set the current active configuration setting of magic_quotes_runtime.
 *
 * @param bool
 * @return bool
 **/
function magic_quotes_runtime($new_setting) {}

/**
 * Sends an email.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function mail($to, $subject, $message, $additional_headers, $additional_parameters) {}

/**
 * Figures out the best way of encoding the content read from the given
 * file pointer.
 *
 * @param resource
 * @return string
 **/
function mailparse_determine_best_xfer_encoding($fp) {}

/**
 * Create a MIME mail resource.
 *
 * @return resource
 **/
function mailparse_msg_create() {}

/**
 * @param resource
 * @param string
 * @param callback
 * @return void
 **/
function mailparse_msg_extract_part($mimemail, $msgbody, $callbackfunc) {}

/**
 * Extracts/decodes a message section from the supplied filename.
 * 
 * The contents of the section will be decoded according to their
 * transfer encoding - base64, quoted-printable and uuencoded text are
 * supported.
 *
 * @param resource
 * @param mixed
 * @param callback
 * @return string
 **/
function mailparse_msg_extract_part_file($mimemail, $filename, $callbackfunc) {}

/**
 * @param resource
 * @param string
 * @param callback
 * @return string
 **/
function mailparse_msg_extract_whole_part_file($mimemail, $filename, $callbackfunc) {}

/**
 * Frees a MIME resource.
 *
 * @param resource
 * @return bool
 **/
function mailparse_msg_free($mimemail) {}

/**
 * @param resource
 * @param string
 * @return resource
 **/
function mailparse_msg_get_part($mimemail, $mimesection) {}

/**
 * @param resource
 * @return array
 **/
function mailparse_msg_get_part_data($mimemail) {}

/**
 * @param resource
 * @return array
 **/
function mailparse_msg_get_structure($mimemail) {}

/**
 * Incrementally parse data into the supplied mime mail resource.
 * 
 * This function allow you to stream portions of a file at a time, rather
 * than read and parse the whole thing.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function mailparse_msg_parse($mimemail, $data) {}

/**
 * Parses a file. This is the optimal way of parsing a mail file that you
 * have on disk.
 *
 * @param string
 * @return resource
 **/
function mailparse_msg_parse_file($filename) {}

/**
 * Parses a RFC 822 compliant recipient list, such as that found in the
 * To: header.
 *
 * @param string
 * @return array
 **/
function mailparse_rfc822_parse_addresses($addresses) {}

/**
 * Streams data from the source file pointer, apply encoding and write to
 * the destination file pointer.
 *
 * @param resource
 * @param resource
 * @param string
 * @return bool
 **/
function mailparse_stream_encode($sourcefp, $destfp, $encoding) {}

/**
 * Scans the data from the given file pointer and extract each embedded
 * uuencoded file into a temporary file.
 *
 * @param resource
 * @return array
 **/
function mailparse_uudecode_all($fp) {}

/**
 * If the first and only parameter is an array, max returns the highest
 * value in that array. If at least two parameters are provided, max
 * returns the biggest of these values.
 *
 * @param array
 * @return mixed
 **/
function max($values) {}

/**
 * maxdb_affected_rows returns the number of rows affected by the last
 * INSERT, UPDATE, or DELETE query associated with the provided link
 * parameter. If this number cannot be determined, this function will
 * return -1.
 * 
 * The maxdb_affected_rows function only works with queries which modify
 * a table. In order to return the number of rows from a SELECT query,
 * use the maxdb_num_rows function instead.
 *
 * @param resource
 * @return int
 **/
function maxdb_affected_rows($link) {}

/**
 * maxdb_autocommit is used to turn on or off auto-commit mode on queries
 * for the database connection represented by the link resource.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function maxdb_autocommit($link, $mode) {}

/**
 * maxdb_bind_param is used to bind variables for the parameter
 * markers in the SQL statement that was passed to maxdb_prepare. The
 * string types contains one or more characters which specify the types
 * for the corresponding bind variables.
 * 
 * The extended syntax of maxdb_bind_param allows to give the
 * parameters as an array instead of a variable list of PHP variables to
 * the function. If the array variable has not been used before calling
 * maxdb_bind_param, it has to be initialized as an emtpy array. See
 * the examples how to use maxdb_bind_param with extended syntax.
 * 
 * Variables for SELECT INTO SQL statements can also be bound using
 * maxdb_bind_param. Parameters for database procedures can be bound
 * using maxdb_bind_param. See the examples how to use
 * maxdb_bind_param in this cases.
 * 
 * If a variable bound as INTO variable to a SQL statement was used
 * before, the content of this variable is overwritten by the data of the
 * SELECT INTO statement. A reference to this variable will be invalid
 * after a call to maxdb_bind_param.
 * 
 * For INOUT parameters of database procedures the content of the bound
 * INOUT variable is overwritten by the output value of the database
 * procedure. A reference to this variable will be invalid after a call
 * to maxdb_bind_param.
 * 
 * Type specification chars
 * 
 * Character Description
 * 
 * i corresponding variable has type integer
 * 
 * d corresponding variable has type double
 * 
 * s corresponding variable has type string
 * 
 * b corresponding variable is a blob and will be sent in packages
 *
 * @param resource
 * @param string
 * @param mixed
 * @return bool
 **/
function maxdb_bind_param($stmt, $types, &$var1) {}

/**
 * maxdb_bind_result is used to associate (bind) columns in the
 * result set to variables. When maxdb_stmt_fetch is called to fetch
 * data, the MaxDB client/server protocol places the data for the bound
 * columns into the specified variables var1, ....
 *
 * @param resource
 * @param mixed
 * @return bool
 **/
function maxdb_bind_result($stmt, &$var1) {}

/**
 * maxdb_change_user is used to change the user of the specified database
 * connection as given by the link parameter and to set the current
 * database to that specified by the database parameter.
 * 
 * In order to successfully change users a valid username and password
 * parameters must be provided and that user must have sufficient
 * permissions to access the desired database. If for any reason
 * authorization fails, the current user authentication will remain.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function maxdb_change_user($link, $user, $password, $database) {}

/**
 * Returns the current character set for the database connection
 * specified by the link parameter.
 *
 * @param resource
 * @return string
 **/
function maxdb_character_set_name($link) {}

/**
 * Returns the current character set for the database connection
 * specified by the link parameter.
 *
 * @param resource
 * @return string
 **/
function maxdb_client_encoding($link) {}

/**
 * The maxdb_close function closes a previously opened database
 * connection specified by the link parameter.
 *
 * @param resource
 * @return bool
 **/
function maxdb_close($link) {}

/**
 * This function has to be called after a sequence of
 * maxdb_stmt_send_long_data, that was started after maxdb_execute.
 * 
 * param_nr indicates which parameter to associate the end of data with.
 * Parameters are numbered beginning with 0.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function maxdb_close_long_data($stmt, $param_nr) {}

/**
 * Commits the current transaction for the database connection specified
 * by the link parameter.
 *
 * @param resource
 * @return bool
 **/
function maxdb_commit($link) {}

/**
 * The maxdb_connect function attempts to open a connection to the MaxDB
 * Server running on host which can be either a host name or an IP
 * address. Passing the string "localhost" to this parameter, the local
 * host is assumed. If successful, the maxdb_connect will return an
 * resource representing the connection to the database, or on failure.
 * 
 * The username and password parameters specify the username and password
 * under which to connect to the MaxDB server. If the password is not
 * provided (the value is passed), the MaxDB server will attempt to
 * authenticate the user against the maxdb.default_pw in .
 * 
 * The dbname parameter if provided will specify the default database to
 * be used when performing queries. If not provied, the entry
 * maxdb.default_db in is used.
 * 
 * The port and socket parameters are ignored for the MaxDB server.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function maxdb_connect($host, $username, $passwd, $dbname, $port, $socket) {}

/**
 * The maxdb_connect_errno function will return the last error code
 * number for last call to maxdb_connect. If no errors have occured, this
 * function will return zero.
 *
 * @return int
 **/
function maxdb_connect_errno() {}

/**
 * The maxdb_connect_error function is identical to the corresponding
 * maxdb_connect_errno function in every way, except instead of returning
 * an integer error code the maxdb_connect_error function will return a
 * string representation of the last error to occur for the last
 * maxdb_connect call. If no error has occured, this function will return
 * an empty string.
 *
 * @return string
 **/
function maxdb_connect_error() {}

/**
 * The maxdb_data_seek function seeks to an arbitrary result pointer
 * specified by the offset in the result set represented by result. The
 * offset parameter must be between zero and the total number of rows
 * minus one (0..maxdb_num_rows - 1).
 *
 * @param resource
 * @param int
 * @return bool
 **/
function maxdb_data_seek($result, $offset) {}

/**
 * The maxdb_debug can be used to trace the SQLDBC communication. The
 * following strings can be used as a parameter to maxdb_debug:
 *
 * @param string
 * @return void
 **/
function maxdb_debug($debug) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_disable_reads_from_master($link) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_disable_rpl_parse($link) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_dump_debug_info($link) {}

/**
 * @param string
 * @return resource
 **/
function maxdb_embedded_connect($dbname) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_enable_reads_from_master($link) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_enable_rpl_parse($link) {}

/**
 * The maxdb_errno function will return the last error code for the most
 * recent MaxDB function call that can succeed or fail with respect to
 * the database link defined by the link parameter. If no errors have
 * occured, this function will return zero.
 *
 * @param resource
 * @return int
 **/
function maxdb_errno($link) {}

/**
 * The maxdb_error function is identical to the corresponding maxdb_errno
 * function in every way, except instead of returning an integer error
 * code the maxdb_error function will return a string representation of
 * the last error to occur for the database connection represented by the
 * link parameter. If no error has occured, this function will return an
 * empty string.
 *
 * @param resource
 * @return string
 **/
function maxdb_error($link) {}

/**
 * This function is used to create a legal SQL string that you can use in
 * a SQL statement. The string escapestr is encoded to an escaped SQL
 * string, taking into account the current character set of the
 * connection.
 * 
 * Characters encoded are ', ".
 *
 * @param resource
 * @param string
 * @return string
 **/
function maxdb_escape_string($link, $escapestr) {}

/**
 * The maxdb_execute function executes a query that has been
 * previously prepared using the maxdb_prepare function represented by
 * the stmt resource. When executed any parameter markers which exist
 * will automatically be replaced with the appropiate data.
 * 
 * If the statement is UPDATE, DELETE, or INSERT, the total number of
 * affected rows can be determined by using the maxdb_stmt_affected_rows
 * function. Likewise, if the query yields a result set the maxdb_fetch
 * function is used.
 *
 * @param resource
 * @return bool
 **/
function maxdb_execute($stmt) {}

/**
 * maxdb_fetch returns row data using the variables bound by
 * maxdb_stmt_bind_result.
 *
 * @param resource
 * @return bool
 **/
function maxdb_fetch($stmt) {}

/**
 * Returns an array that corresponds to the fetched row or if there are
 * no more rows for the resultset represented by the result parameter.
 * 
 * maxdb_fetch_array is an extended version of the maxdb_fetch_row
 * function. In addition to storing the data in the numeric indices of
 * the result array, the maxdb_fetch_array function can also store the
 * data in associative indices, using the field names of the result set
 * as keys.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence and overwrite the earlier data. In
 * order to access multiple columns with the same name, the numerically
 * indexed version of the row must be used.
 * 
 * The optional second argument resulttype is a constant indicating what
 * type of array should be produced from the current row data. The
 * possible values for this parameter are the constants MAXDB_ASSOC,
 * MAXDB_ASSOC_UPPER, MAXDB_ASSOC_LOWER, MAXDB_NUM, or MAXDB_BOTH. By
 * default the maxdb_fetch_array function will assume MAXDB_BOTH, which
 * is a combination of MAXDB_NUM and MAXDB_ASSOC for this parameter.
 * 
 * By using the MAXDB_ASSOC constant this function will behave
 * identically to the maxdb_fetch_assoc, while MAXDB_NUM will behave
 * identically to the maxdb_fetch_row function. The final option
 * MAXDB_BOTH will create a single array with the attributes of both.
 * 
 * By using the MAXDB_ASSOC_UPPER constant, the behaviour of this
 * function is identical to the use of MAXDB_ASSOC except the array index
 * of a column is the fieldname in upper case.
 * 
 * By using the MAXDB_ASSOC_LOWER constant, the behaviour of this
 * function is identical to the use of MAXDB_ASSOC except the array index
 * of a column is the fieldname in lower case.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function maxdb_fetch_array($result, $resulttype) {}

/**
 * Returns an associative array that corresponds to the fetched row or if
 * there are no more rows.
 * 
 * The maxdb_fetch_assoc function is used to return an associative array
 * representing the next row in the result set for the result represented
 * by the result parameter, where each key in the array represents the
 * name of one of the result set's columns.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence. To access the other column(s) of the
 * same name, you either need to access the result with numeric indices
 * by using maxdb_fetch_row or add alias names.
 *
 * @param resource
 * @return array
 **/
function maxdb_fetch_assoc($result) {}

/**
 * The maxdb_fetch_field returns the definition of one column of a result
 * set as an resource. Call this function repeatedly to retrieve
 * information about all columns in the result set. maxdb_fetch_field
 * returns when no more fields are left.
 *
 * @param resource
 * @return mixed
 **/
function maxdb_fetch_field($result) {}

/**
 * This function serves an identical purpose to the maxdb_fetch_field
 * function with the single difference that, instead of returning one
 * resource at a time for each field, the columns are returned as an
 * array of resources.
 *
 * @param resource
 * @return mixed
 **/
function maxdb_fetch_fields($result) {}

/**
 * maxdb_fetch_field_direct returns an resource which contains field
 * definition information from specified resultset. The value of fieldnr
 * must be in the range from 0 to number of fields - 1.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function maxdb_fetch_field_direct($result, $fieldnr) {}

/**
 * The maxdb_fetch_lengths function returns an array containing the
 * lengths of every column of the current row within the result set
 * represented by the result parameter. If successful, a numerically
 * indexed array representing the lengths of each column is returned or
 * on failure.
 *
 * @param resource
 * @return array
 **/
function maxdb_fetch_lengths($result) {}

/**
 * The maxdb_fetch_object will return the current row result set as an
 * object where the attributes of the object represent the names of the
 * fields found within the result set. If no more rows exist in the
 * current result set, is returned.
 *
 * @param object
 * @return object
 **/
function maxdb_fetch_object($result) {}

/**
 * Returns an array that corresponds to the fetched row, or if there are
 * no more rows.
 * 
 * maxdb_fetch_row fetches one row of data from the result set
 * represented by result and returns it as an enumerated array, where
 * each column is stored in an array offset starting from 0 (zero). Each
 * subsequent call to the maxdb_fetch_row function will return the next
 * row within the result set, or if there are no more rows.
 *
 * @param resource
 * @return mixed
 **/
function maxdb_fetch_row($result) {}

/**
 * Returns the number of columns for the most recent query on the
 * connection represented by the link parameter. This function can be
 * useful when using the maxdb_store_result function to determine if the
 * query should have produced a non-empty result set or not without
 * knowing the nature of the query.
 *
 * @param resource
 * @return int
 **/
function maxdb_field_count($link) {}

/**
 * Sets the field cursor to the given offset. The next call to
 * maxdb_fetch_field will retrieve the field definition of the column
 * associated with that offset.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function maxdb_field_seek($result, $fieldnr) {}

/**
 * Returns the position of the field cursor used for the last
 * maxdb_fetch_field call. This value can be used as an argument to
 * maxdb_field_seek.
 *
 * @param resource
 * @return int
 **/
function maxdb_field_tell($result) {}

/**
 * The maxdb_free_result function frees the memory associated with the
 * result represented by the result parameter, which was allocated by
 * maxdb_query, maxdb_store_result or maxdb_use_result.
 *
 * @param resource
 * @return void
 **/
function maxdb_free_result($result) {}

/**
 * The maxdb_get_client_info function is used to return a string
 * representing the client version being used in the MaxDB extension.
 *
 * @return string
 **/
function maxdb_get_client_info() {}

/**
 * Returns client version number as an integer.
 *
 * @return int
 **/
function maxdb_get_client_version() {}

/**
 * Procdural style:
 * 
 * The maxdb_get_host_info function returns a string describing the
 * connection represented by the link parameter is using.
 *
 * @param resource
 * @return string
 **/
function maxdb_get_host_info($link) {}

/**
 * If a statement passed to maxdb_prepare is one that produces a result
 * set, maxdb_get_metadata returns the result resource that can
 * be used to process the meta information such as total number of fields
 * and individual field information.
 * 
 * The result set structure should be freed when you are done with it,
 * which you can do by passing it to maxdb_free_result
 *
 * @param resource
 * @return resource
 **/
function maxdb_get_metadata($stmt) {}

/**
 * Returns an integer representing the MaxDB protocol version used by the
 * connection represented by the link parameter.
 *
 * @param resource
 * @return int
 **/
function maxdb_get_proto_info($link) {}

/**
 * Returns a string representing the version of the MaxDB server that the
 * MaxDB extension is connected to (represented by the link parameter).
 *
 * @param resource
 * @return string
 **/
function maxdb_get_server_info($link) {}

/**
 * The maxdb_get_server_version function returns the version of the
 * server connected to (represented by the link parameter) as an integer.
 * 
 * The form of this version number is main_version * 10000 +
 * minor_version * 100 + sub_version (i.e. version 7.5.0 is 70500).
 *
 * @param resource
 * @return int
 **/
function maxdb_get_server_version($link) {}

/**
 * The maxdb_info function returns a string providing information about
 * the last query executed. The nature of this string is provided below:
 * 
 * Possible maxdb_info return values
 * 
 * Query type Example result string
 * 
 * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0
 * 
 * INSERT INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0
 * Warnings: 0
 * 
 * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
 * 
 * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0
 * 
 * UPDATE ... Rows matched: 40 Changed: 40 Warnings: 0
 *
 * @param resource
 * @return string
 **/
function maxdb_info($link) {}

/**
 * Allocates or initializes a MaxDB resource suitable for maxdb_options
 * and maxdb_real_connect.
 *
 * @return resource
 **/
function maxdb_init() {}

/**
 * The maxdb_insert_id function returns the ID generated by a query on a
 * table with a column having the DEFAULT SERIAL attribute. If the last
 * query wasn't an INSERT or UPDATE statement or if the modified table
 * does not have a column with the DEFAULT SERIAL attribute, this
 * function will return zero.
 *
 * @param resource
 * @return mixed
 **/
function maxdb_insert_id($link) {}

/**
 * This function is used to disconnect from a MaxDB server specified by
 * the processid parameter.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function maxdb_kill($link, $processid) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function maxdb_master_query($link, $query) {}

/**
 * maxdb_more_results indicates if one or more result sets are available
 * from a previous call to maxdb_multi_query.
 *
 * @param resource
 * @return bool
 **/
function maxdb_more_results($link) {}

/**
 * The maxdb_multi_query works like the function maxdb_query. Multiple
 * queries are not yet supported.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function maxdb_multi_query($link, $query) {}

/**
 * Since multiple queries are not yet supported, maxdb_next_result
 * returns always .
 *
 * @param resource
 * @return bool
 **/
function maxdb_next_result($link) {}

/**
 * maxdb_num_fields returns the number of fields from specified result
 * set.
 *
 * @param resource
 * @return int
 **/
function maxdb_num_fields($result) {}

/**
 * Returns the number of rows in the result set.
 * 
 * The use of maxdb_num_rows depends on whether you use buffered or
 * unbuffered result sets. In case you use unbuffered resultsets
 * maxdb_num_rows will not correct the correct number of rows until all
 * the rows in the result have been retrieved.
 *
 * @param resource
 * @return int
 **/
function maxdb_num_rows($result) {}

/**
 * maxdb_options can be used to set extra connect options and affect
 * behavior for a connection.
 * 
 * This function may be called multiple times to set several options.
 * 
 * maxdb_options should be called after maxdb_init and before
 * maxdb_real_connect.
 * 
 * The parameter option is the option that you want to set, the value is
 * the value for the option. For detailed description of the options see
 * The parameter option can be one of the following values:
 * 
 * Valid options
 * 
 * Name Description
 * 
 * MAXDB_COMPNAME The component name used to initialise the SQLDBC
 * runtime environment.
 * 
 * MAXDB_APPLICATION The application to be connected to the database.
 * 
 * MAXDB_APPVERSION The version of the application.
 * 
 * MAXDB_SQLMODE
 * 
 * The SQL mode.
 * 
 * MAXDB_UNICODE
 * 
 * TRUE, if the connection is an unicode (UCS2) client or FALSE, if not.
 * 
 * MAXDB_TIMEOUT
 * 
 * The maximum allowed time of inactivity after which the connection to
 * the database is closed by the system.
 * 
 * MAXDB_ISOLATIONLEVEL
 * 
 * Specifies whether and how shared locks and exclusive locks are
 * implicitly requested or released.
 * 
 * MAXDB_PACKETCOUNT
 * 
 * The number of different request packets used for the connection.
 * 
 * MAXDB_STATEMENTCACHESIZE
 * 
 * The number of prepared statements to be cached for the connection for
 * re-use.
 * 
 * MAXDB_CURSORPREFIX
 * 
 * The prefix to use for result tables that are automatically named.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function maxdb_options($link, $option, $value) {}

/**
 * maxdb_param_count returns the number of parameter markers present
 * in the prepared statement.
 *
 * @param resource
 * @return int
 **/
function maxdb_param_count($stmt) {}

/**
 * Checks whether the connection to the server is working. If it has gone
 * down, and global option maxdb.reconnect is enabled an automatic
 * reconnection is attempted.
 * 
 * This function can be used by clients that remain idle for a long
 * while, to check whether the server has closed the connection and
 * reconnect if necessary.
 *
 * @param resource
 * @return bool
 **/
function maxdb_ping($link) {}

/**
 * maxdb_prepare prepares the SQL query pointed to by the null-terminated
 * string query, and returns a statement handle to be used for further
 * operations on the statement. The query must consist of a single SQL
 * statement.
 * 
 * The parameter query can include one or more parameter markers in the
 * SQL statement by embedding question mark (?) characters at the
 * appropriate positions.
 * 
 * The parameter markers must be bound to application variables using
 * maxdb_stmt_bind_param and/or maxdb_stmt_bind_result before executing
 * the statement or fetching rows.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function maxdb_prepare($link, $query) {}

/**
 * The maxdb_query function is used to simplify the act of performing a
 * query against the database represented by the link parameter.
 *
 * @param resource
 * @param string
 * @param int
 * @return mixed
 **/
function maxdb_query($link, $query, $resultmode) {}

/**
 * maxdb_real_connect attempts to establish a connection to a MaxDB
 * database engine running on hostname.
 * 
 * This function differs from maxdb_connect:
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @param string
 * @return bool
 **/
function maxdb_real_connect($link, $hostname, $username, $passwd, $dbname, $port, $socket) {}

/**
 * This function is used to create a legal SQL string that you can use in
 * a SQL statement. The string escapestr is encoded to an escaped SQL
 * string, taking into account the current character set of the
 * connection.
 * 
 * Characters encoded are ', ".
 *
 * @param resource
 * @param string
 * @return string
 **/
function maxdb_real_escape_string($link, $escapestr) {}

/**
 * The maxdb_real_query is functionally identical with the maxdb_query.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function maxdb_real_query($link, $query) {}

/**
 * @param int
 * @return bool
 **/
function maxdb_report($flags) {}

/**
 * Rollbacks the current transaction for the database specified by the
 * link parameter.
 *
 * @param resource
 * @return bool
 **/
function maxdb_rollback($link) {}

/**
 * @param resource
 * @return int
 **/
function maxdb_rpl_parse_enabled($link) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_rpl_probe($link) {}

/**
 * @param resource
 * @return int
 **/
function maxdb_rpl_query_type($link) {}

/**
 * The maxdb_select_db function selects the default database (specified
 * by the dbname parameter) to be used when performing queries against
 * the database connection represented by the link parameter.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function maxdb_select_db($link, $dbname) {}

/**
 * Allows to send parameter data to the server in pieces (or chunks).
 * This function can be called multiple times to send the parts of a
 * character or binary data value for a column, which must be one of the
 * TEXT or BLOB datatypes.
 * 
 * param_nr indicates which parameter to associate the data with.
 * Parameters are numbered beginning with 0. data is a string containing
 * data to be sent.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function maxdb_send_long_data($stmt, $param_nr, $data) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function maxdb_send_query($link, $query) {}

/**
 * @return void
 **/
function maxdb_server_end() {}

/**
 * @param array
 * @param array
 * @return bool
 **/
function maxdb_server_init($server, $groups) {}

/**
 * maxdb_set_opt can be used to set extra connect options and affect
 * behavior for a connection.
 * 
 * This function may be called multiple times to set several options.
 * 
 * maxdb_set_opt should be called after maxdb_init and before
 * maxdb_real_connect.
 * 
 * The parameter option is the option that you want to set, the value is
 * the value for the option. For detailed description of the options see
 * The parameter option can be one of the following values:
 * 
 * Valid options
 * 
 * Name Description
 * 
 * MAXDB_COMPNAME The component name used to initialise the SQLDBC
 * runtime environment.
 * 
 * MAXDB_APPLICATION The application to be connected to the database.
 * 
 * MAXDB_APPVERSION The version of the application.
 * 
 * MAXDB_SQLMODE
 * 
 * The SQL mode.
 * 
 * MAXDB_UNICODE
 * 
 * TRUE, if the connection is an unicode (UCS2) client or FALSE, if not.
 * 
 * MAXDB_TIMEOUT
 * 
 * The maximum allowed time of inactivity after which the connection to
 * the database is closed by the system.
 * 
 * MAXDB_ISOLATIONLEVEL
 * 
 * Specifies whether and how shared locks and exclusive locks are
 * implicitly requested or released.
 * 
 * MAXDB_PACKETCOUNT
 * 
 * The number of different request packets used for the connection.
 * 
 * MAXDB_STATEMENTCACHESIZE
 * 
 * The number of prepared statements to be cached for the connection for
 * re-use.
 * 
 * MAXDB_CURSORPREFIX
 * 
 * The prefix to use for result tables that are automatically named.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function maxdb_set_opt($link, $option, $value) {}

/**
 * Returns a string containing the SQLSTATE error code for the last
 * error. The error code consists of five characters. '00000' means no
 * error. The values are specified by ANSI SQL and ODBC.
 *
 * @param resource
 * @return string
 **/
function maxdb_sqlstate($link) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function maxdb_ssl_set($link, $key, $cert, $ca, $capath, $cipher) {}

/**
 * maxdb_stat returns a string containing several information about the
 * MaxDB server running.
 *
 * @param resource
 * @return string
 **/
function maxdb_stat($link) {}

/**
 * maxdb_stmt_affected_rows returns the number of rows affected by
 * INSERT, UPDATE, or DELETE query. If the last query was invalid or the
 * number of rows can not determined, this function will return -1.
 *
 * @param resource
 * @return int
 **/
function maxdb_stmt_affected_rows($stmt) {}

/**
 * maxdb_stmt_bind_param is used to bind variables for the parameter
 * markers in the SQL statement that was passed to maxdb_prepare. The
 * string types contains one or more characters which specify the types
 * for the corresponding bind variables.
 * 
 * The extended syntax of maxdb_stmt_bind_param allows to give the
 * parameters as an array instead of a variable list of PHP variables to
 * the function. If the array variable has not been used before calling
 * maxdb_stmt_bind_param, it has to be initialized as an emtpy array. See
 * the examples how to use maxdb_stmt_bind_param with extended syntax.
 * 
 * Variables for SELECT INTO SQL statements can also be bound using
 * maxdb_stmt_bind_param. Parameters for database procedures can be bound
 * using maxdb_stmt_bind_param. See the examples how to use
 * maxdb_stmt_bind_param in this cases.
 * 
 * If a variable bound as INTO variable to a SQL statement was used
 * before, the content of this variable is overwritten by the data of the
 * SELECT INTO statement. A reference to this variable will be invalid
 * after a call to maxdb_stmt_bind_param.
 * 
 * For INOUT parameters of database procedures the content of the bound
 * INOUT variable is overwritten by the output value of the database
 * procedure. A reference to this variable will be invalid after a call
 * to maxdb_stmt_bind_param.
 * 
 * Type specification chars
 * 
 * Character Description
 * 
 * i corresponding variable has type integer
 * 
 * d corresponding variable has type double
 * 
 * s corresponding variable has type string
 * 
 * b corresponding variable is a blob and will be sent in packages
 *
 * @param resource
 * @param string
 * @param mixed
 * @return bool
 **/
function maxdb_stmt_bind_param($stmt, $types, &$var1) {}

/**
 * maxdb_stmt_bind_result is used to associate (bind) columns in the
 * result set to variables. When maxdb_stmt_fetch is called to fetch
 * data, the MaxDB client/server protocol places the data for the bound
 * columns into the specified variables var1, ....
 *
 * @param resource
 * @param mixed
 * @return bool
 **/
function maxdb_stmt_bind_result($stmt, &$var1) {}

/**
 * Closes a prepared statement. maxdb_stmt_close also deallocates the
 * statement handle pointed to by stmt. If the current statement has
 * pending or unread results, this function cancels them so that the next
 * query can be executed.
 *
 * @param resource
 * @return bool
 **/
function maxdb_stmt_close($stmt) {}

/**
 * This function has to be called after a sequence of
 * maxdb_stmt_send_long_data, that was started after maxdb_execute.
 * 
 * param_nr indicates which parameter to associate the end of data with.
 * Parameters are numbered beginning with 0.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function maxdb_stmt_close_long_data($stmt, $param_nr) {}

/**
 * The maxdb_stmt_data_seek function seeks to an arbitrary result pointer
 * specified by the offset in the statement result set represented by
 * statement. The offset parameter must be between zero and the total
 * number of rows minus one (0..maxdb_stmt_num_rows - 1).
 *
 * @param resource
 * @param int
 * @return bool
 **/
function maxdb_stmt_data_seek($statement, $offset) {}

/**
 * For the statement specified by stmt, maxdb_stmt_errno returns the
 * error code for the most recently invoked statement function that can
 * succeed or fail.
 *
 * @param resource
 * @return int
 **/
function maxdb_stmt_errno($stmt) {}

/**
 * For the statement specified by stmt, maxdb_stmt_error returns a
 * containing the error message for the most recently invoked statement
 * function that can succeed or fail.
 *
 * @param resource
 * @return string
 **/
function maxdb_stmt_error($stmt) {}

/**
 * The maxdb_stmt_execute function executes a query that has been
 * previously prepared using the maxdb_prepare function represented by
 * the stmt resource. When executed any parameter markers which exist
 * will automatically be replaced with the appropiate data.
 * 
 * If the statement is UPDATE, DELETE, or INSERT, the total number of
 * affected rows can be determined by using the maxdb_stmt_affected_rows
 * function. Likewise, if the query yields a result set the maxdb_fetch
 * function is used.
 *
 * @param resource
 * @return bool
 **/
function maxdb_stmt_execute($stmt) {}

/**
 * maxdb_stmt_fetch returns row data using the variables bound by
 * maxdb_stmt_bind_result.
 *
 * @param resource
 * @return bool
 **/
function maxdb_stmt_fetch($stmt) {}

/**
 * The maxdb_stmt_free_result function frees the result memory associated
 * with the statement represented by the stmt parameter, which was
 * allocated by maxdb_stmt_store_result.
 *
 * @param resource
 * @return void
 **/
function maxdb_stmt_free_result($stmt) {}

/**
 * Allocates and initializes a statement resource suitable for
 * maxdb_stmt_prepare.
 *
 * @param resource
 * @return resource
 **/
function maxdb_stmt_init($link) {}

/**
 * Returns the number of rows in the result set.
 *
 * @param resource
 * @return int
 **/
function maxdb_stmt_num_rows($stmt) {}

/**
 * maxdb_stmt_param_count returns the number of parameter markers present
 * in the prepared statement.
 *
 * @param resource
 * @return int
 **/
function maxdb_stmt_param_count($stmt) {}

/**
 * maxdb_stmt_prepare prepares the SQL query pointed to by the
 * null-terminated string query. The statement resource has to be
 * allocated by maxdb_stmt_init. The query must consist of a single SQL
 * statement.
 * 
 * The parameter query can include one or more parameter markers in the
 * SQL statement by embedding question mark (?) characters at the
 * appropriate positions.
 * 
 * The parameter markers must be bound to application variables using
 * maxdb_stmt_bind_param and/or maxdb_stmt_bind_result before executing
 * the statement or fetching rows.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function maxdb_stmt_prepare($stmt, $query) {}

/**
 * @param resource
 * @return bool
 **/
function maxdb_stmt_reset($stmt) {}

/**
 * If a statement passed to maxdb_prepare is one that produces a result
 * set, maxdb_stmt_result_metadata returns the result resource that can
 * be used to process the meta information such as total number of fields
 * and individual field information.
 * 
 * The result set structure should be freed when you are done with it,
 * which you can do by passing it to maxdb_free_result
 *
 * @param resource
 * @return resource
 **/
function maxdb_stmt_result_metadata($stmt) {}

/**
 * Allows to send parameter data to the server in pieces (or chunks).
 * This function can be called multiple times to send the parts of a
 * character or binary data value for a column, which must be one of the
 * TEXT or BLOB datatypes.
 * 
 * param_nr indicates which parameter to associate the data with.
 * Parameters are numbered beginning with 0. data is a string containing
 * data to be sent.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function maxdb_stmt_send_long_data($stmt, $param_nr, $data) {}

/**
 * Returns a string containing the SQLSTATE error code for the most
 * recently invoked prepared statement function that can succeed or fail.
 * The error code consists of five characters. '00000' means no error.
 * The values are specified by ANSI SQL and ODBC.
 *
 * @param resource
 * @return string
 **/
function maxdb_stmt_sqlstate($stmt) {}

/**
 * maxdb_stmt_store_result has no functionally effect and should not be
 * used for retrieving data from MaxDB server.
 *
 * @param resource
 * @return bool
 **/
function maxdb_stmt_store_result($stmt) {}

/**
 * This function has no functionally effect.
 *
 * @param resource
 * @return resource
 **/
function maxdb_store_result($link) {}

/**
 * The maxdb_thread_id function returns the thread ID for the current
 * connection which can then be killed using the maxdb_kill function. If
 * the connection is lost and you reconnect with maxdb_ping, the thread
 * ID will be other. Therefore you should get the thread ID only when you
 * need it.
 *
 * @param resource
 * @return int
 **/
function maxdb_thread_id($link) {}

/**
 * maxdb_thread_safe indicates whether the client library is compiled as
 * thread-safe.
 *
 * @return bool
 **/
function maxdb_thread_safe() {}

/**
 * maxdb_use_result has no effect.
 *
 * @param resource
 * @return resource
 **/
function maxdb_use_result($link) {}

/**
 * maxdb_warning_count returns the number of warnings from the last query
 * in the connection represented by the link parameter.
 *
 * @param resource
 * @return int
 **/
function maxdb_warning_count($link) {}

/**
 * Checks if the specified byte stream is valid for the specified
 * encoding. It is useful to prevent so-called "Invalid Encoding Attack".
 * 
 * 
 *
 * @param string
 * @param string
 * @return bool
 **/
function mb_check_encoding($var, $encoding) {}

/**
 * Performs case folding on a string, converted in the way specified by
 * mode.
 *
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function mb_convert_case($str, $mode, $encoding) {}

/**
 * Converts the character encoding of string str to to_encoding from
 * optionally from_encoding.
 *
 * @param string
 * @param string
 * @param mixed
 * @return string
 **/
function mb_convert_encoding($str, $to_encoding, $from_encoding) {}

/**
 * Performs a "han-kaku" - "zen-kaku" conversion for string str. This
 * function is only useful for Japanese.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function mb_convert_kana($str, $option, $encoding) {}

/**
 * Converts character encoding of variables vars in encoding
 * from_encoding to encoding to_encoding.
 * 
 * mb_convert_variables join strings in Array or Object to detect
 * encoding, since encoding detection tends to fail for short strings.
 * Therefore, it is impossible to mix encoding in single array or object.
 *
 * @param string
 * @param mixed
 * @param mixed
 * @return string
 **/
function mb_convert_variables($to_encoding, $from_encoding, &$vars) {}

/**
 * Decodes encoded-word string str in MIME header.
 *
 * @param string
 * @return string
 **/
function mb_decode_mimeheader($str) {}

/**
 * Convert numeric string reference of string str in a specified block to
 * character.
 *
 * @param string
 * @param array
 * @param string
 * @return string
 **/
function mb_decode_numericentity($str, $convmap, $encoding) {}

/**
 * Detects character encoding in string str.
 *
 * @param string
 * @param mixed
 * @param bool
 * @return string
 **/
function mb_detect_encoding($str, $encoding_list, $strict) {}

/**
 * Sets the automatic character encoding detection order to
 * encoding_list.
 *
 * @param mixed
 * @return mixed
 **/
function mb_detect_order($encoding_list) {}

/**
 * Encodes a given string str by the MIME header encoding scheme.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function mb_encode_mimeheader($str, $charset, $transfer_encoding, $linefeed, $indent) {}

/**
 * Converts specified character codes in string str from HTML numeric
 * character reference to character code.
 *
 * @param string
 * @param array
 * @param string
 * @return string
 **/
function mb_encode_numericentity($str, $convmap, $encoding) {}

/**
 * @param string
 * @param string
 * @param array
 * @return int
 **/
function mb_ereg($pattern, $string, $regs) {}

/**
 * @param string
 * @param string
 * @param array
 * @return int
 **/
function mb_eregi($pattern, $string, $regs) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function mb_eregi_replace($pattern, $replace, $string, $option) {}

/**
 * A regular expression match for a multibyte string
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function mb_ereg_match($pattern, $string, $option) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function mb_ereg_replace($pattern, $replacement, $string, $option) {}

/**
 * Performs a multibyte regular expression match for a predefined
 * multibyte string.
 *
 * @param string
 * @param string
 * @return bool
 **/
function mb_ereg_search($pattern, $option) {}

/**
 * @return int
 **/
function mb_ereg_search_getpos() {}

/**
 * @return array
 **/
function mb_ereg_search_getregs() {}

/**
 * mb_ereg_search_init sets string and pattern for a multibyte regular
 * expression. These values are used for mb_ereg_search,
 * mb_ereg_search_pos, and mb_ereg_search_regs.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function mb_ereg_search_init($string, $pattern, $option) {}

/**
 * Returns position and length of a matched part of the multibyte regular
 * expression for a predefined multibyte string
 * 
 * The string for match is specified by mb_ereg_search_init. If it is not
 * specified, the previous one will be used.
 *
 * @param string
 * @param string
 * @return array
 **/
function mb_ereg_search_pos($pattern, $option) {}

/**
 * Returns the matched part of a multibyte regular expression.
 *
 * @param string
 * @param string
 * @return array
 **/
function mb_ereg_search_regs($pattern, $option) {}

/**
 * @param int
 * @return bool
 **/
function mb_ereg_search_setpos($position) {}

/**
 * @param string
 * @return mixed
 **/
function mb_get_info($type) {}

/**
 * @param string
 * @return mixed
 **/
function mb_http_input($type) {}

/**
 * Set/Get the HTTP output character encoding. Output after this function
 * is converted to encoding.
 *
 * @param string
 * @return mixed
 **/
function mb_http_output($encoding) {}

/**
 * Set/Get the internal character encoding
 *
 * @param string
 * @return mixed
 **/
function mb_internal_encoding($encoding) {}

/**
 * Set/Get the current language.
 *
 * @param string
 * @return mixed
 **/
function mb_language($language) {}

/**
 * Returns an array containing all supported encodings.
 *
 * @return array
 **/
function mb_list_encodings() {}

/**
 * mb_output_handler is ob_start callback function. mb_output_handler
 * converts characters in the output buffer from internal character
 * encoding to HTTP output character encoding.
 *
 * @param string
 * @param int
 * @return string
 **/
function mb_output_handler($contents, $status) {}

/**
 * Parses GET/POST/COOKIE data and sets global variables. Since PHP does
 * not provide raw POST/COOKIE data, it can only be used for GET data for
 * now. It parses URL encoded data, detects encoding, converts coding to
 * internal encoding and set values to the result array or global
 * variables.
 *
 * @param string
 * @param array
 * @return bool
 **/
function mb_parse_str($encoded_string, &$result) {}

/**
 * Get a MIME charset string for a specific encoding.
 *
 * @param string
 * @return string
 **/
function mb_preferred_mime_name($encoding) {}

/**
 * Returns the current encoding for a multibyte regex as a string.
 *
 * @param string
 * @return mixed
 **/
function mb_regex_encoding($encoding) {}

/**
 * @param string
 * @return string
 **/
function mb_regex_set_options($options) {}

/**
 * Sends email. Headers and messages are converted and encoded according
 * to the mb_language setting. It's a wrapper function for mail, so see
 * also mail for details.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function mb_send_mail($to, $subject, $message, $additional_headers, $additional_parameter) {}

/**
 * @param string
 * @param string
 * @param int
 * @return array
 **/
function mb_split($pattern, $string, $limit) {}

/**
 * mb_strcut performs equivalent operation as mb_substr with different
 * method. If start position is multi-byte character's second byte or
 * larger, it starts from first byte of multi-byte character.
 * 
 * It subtracts string from str that is shorter than length AND character
 * that is not part of multi-byte string or not being middle of shift
 * sequence.
 *
 * @param string
 * @param int
 * @param int
 * @param string
 * @return string
 **/
function mb_strcut($str, $start, $length, $encoding) {}

/**
 * Truncates string str to specified width.
 *
 * @param string
 * @param int
 * @param int
 * @param string
 * @param string
 * @return string
 **/
function mb_strimwidth($str, $start, $width, $trimmarker, $encoding) {}

/**
 * mb_stripos returns the numeric position of the first occurrence of
 * needle in the haystack string. Unlike mb_strpos, mb_stripos is
 * case-insensitive. If needle is not found, it returns .
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function mb_stripos($haystack, $needle, $offset, $encoding) {}

/**
 * mb_stristr finds the first occurrence of needle in haystack and
 * returns the portion of haystack. Unlike mb_strstr, mb_stristr is
 * case-insensitive. If needle is not found, it returns .
 *
 * @param string
 * @param string
 * @param bool
 * @param string
 * @return string
 **/
function mb_stristr($haystack, $needle, $part, $encoding) {}

/**
 * Gets the length of a string.
 *
 * @param string
 * @param string
 * @return int
 **/
function mb_strlen($str, $encoding) {}

/**
 * Finds position of the first occurrence of a string in a string.
 * 
 * Performs a multi-byte safe strpos operation based on number of
 * characters. The first character's position is 0, the second character
 * position is 1, and so on.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function mb_strpos($haystack, $needle, $offset, $encoding) {}

/**
 * mb_strrchr finds the last occurrence of needle in haystack and returns
 * the portion of haystack. If needle is not found, it returns .
 *
 * @param string
 * @param string
 * @param bool
 * @param string
 * @return string
 **/
function mb_strrchr($haystack, $needle, $part, $encoding) {}

/**
 * mb_strrichr finds the last occurrence of needle in haystack and
 * returns the portion of haystack. Unlike mb_strrchr, mb_strrichr is
 * case-insensitive. If needle is not found, it returns .
 *
 * @param string
 * @param string
 * @param bool
 * @param string
 * @return string
 **/
function mb_strrichr($haystack, $needle, $part, $encoding) {}

/**
 * mb_strripos performs multi-byte safe strripos operation based on
 * number of characters. needle position is counted from the beginning of
 * haystack. First character's position is 0. Second character position
 * is 1. Unlike mb_strrpos, mb_strripos is case-insensitive.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function mb_strripos($haystack, $needle, $offset, $encoding) {}

/**
 * Performs a multibyte safe strrpos operation based on the number of
 * characters. needle position is counted from the beginning of haystack.
 * First character's position is 0. Second character position is 1.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function mb_strrpos($haystack, $needle, $offset, $encoding) {}

/**
 * mb_strstr finds the first occurrence of needle in haystack and returns
 * the portion of haystack. If needle is not found, it returns .
 *
 * @param string
 * @param string
 * @param bool
 * @param string
 * @return string
 **/
function mb_strstr($haystack, $needle, $part, $encoding) {}

/**
 * Returns str with all alphabetic characters converted to lowercase.
 *
 * @param string
 * @param string
 * @return string
 **/
function mb_strtolower($str, $encoding) {}

/**
 * Returns str with all alphabetic characters converted to uppercase.
 *
 * @param string
 * @param string
 * @return string
 **/
function mb_strtoupper($str, $encoding) {}

/**
 * Returns the width of string str.
 * 
 * Multi-byte characters are usually twice the width of single byte
 * characters.
 * 
 * Characters width
 * 
 * Chars Width
 * 
 * U+0000 - U+0019 0
 * 
 * U+0020 - U+1FFF 1
 * 
 * U+2000 - U+FF60 2
 * 
 * U+FF61 - U+FF9F 1
 * 
 * U+FFA0 - 2
 *
 * @param string
 * @param string
 * @return int
 **/
function mb_strwidth($str, $encoding) {}

/**
 * Specifies a substitution character when input character encoding is
 * invalid or character code does not exist in output character encoding.
 * Invalid characters may be substituted (no output), string or integer
 * value (Unicode character code value).
 * 
 * This setting affects mb_convert_encoding, mb_convert_variables,
 * mb_output_handler, and mb_send_mail.
 *
 * @param mixed
 * @return mixed
 **/
function mb_substitute_character($substrchar) {}

/**
 * Performs a multi-byte safe substr operation based on number of
 * characters. Position is counted from the beginning of str. First
 * character's position is 0. Second character position is 1, and so on.
 *
 * @param string
 * @param int
 * @param int
 * @param string
 * @return string
 **/
function mb_substr($str, $start, $length, $encoding) {}

/**
 * Counts the number of times the needle substring occurs in the haystack
 * string.
 *
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function mb_substr_count($haystack, $needle, $encoding) {}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The mode should be
 * either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function should not be used anymore, see mcrypt_generic and
 * mdecrypt_generic for replacements.
 *
 * @param int
 * @param string
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function mcrypt_cbc($cipher, $key, $data, $mode, $iv) {}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The mode should be
 * either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function should not be used anymore, see mcrypt_generic and
 * mdecrypt_generic for replacements.
 *
 * @param int
 * @param string
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function mcrypt_cfb($cipher, $key, $data, $mode, $iv) {}

/**
 * Create an initialization vector (IV) from a random source.
 * 
 * The IV is only meant to give an alternative seed to the encryption
 * routines. This IV does not need to be secret at all, though it can be
 * desirable. You even can send it along with your ciphertext without
 * losing security.
 *
 * @param int
 * @param int
 * @return string
 **/
function mcrypt_create_iv($size, $source) {}

/**
 * Decrypts the data and returns the unencrypted data.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function mcrypt_decrypt($cipher, $key, $data, $mode, $iv) {}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The mode should be
 * either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function is deprecated and should not be used anymore, see
 * mcrypt_generic and mdecrypt_generic for replacements.
 *
 * @param int
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function mcrypt_ecb($cipher, $key, $data, $mode) {}

/**
 * Encrypts the data and returns it.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function mcrypt_encrypt($cipher, $key, $data, $mode, $iv) {}

/**
 * This function returns the name of the algorithm.
 *
 * @param resource
 * @return string
 **/
function mcrypt_enc_get_algorithms_name($td) {}

/**
 * Gets the blocksize of the opened algorithm.
 *
 * @param resource
 * @return int
 **/
function mcrypt_enc_get_block_size($td) {}

/**
 * This function returns the size of the IV of the algorithm specified by
 * the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb
 * modes, and in some algorithms in stream mode.
 *
 * @param resource
 * @return int
 **/
function mcrypt_enc_get_iv_size($td) {}

/**
 * Gets the maximum supported key size of the algorithm in bytes.
 *
 * @param resource
 * @return int
 **/
function mcrypt_enc_get_key_size($td) {}

/**
 * This function returns the name of the mode.
 *
 * @param resource
 * @return string
 **/
function mcrypt_enc_get_modes_name($td) {}

/**
 * Gets the supported key sizes of the opened algorithm.
 *
 * @param resource
 * @return array
 **/
function mcrypt_enc_get_supported_key_sizes($td) {}

/**
 * Tells whether the algorithm of the opened mode is a block algorithm.
 *
 * @param resource
 * @return bool
 **/
function mcrypt_enc_is_block_algorithm($td) {}

/**
 * Tells whether the algorithm of the opened mode works on blocks (e.g.
 * for stream, and for cbc, cfb, ofb)..
 *
 * @param resource
 * @return bool
 **/
function mcrypt_enc_is_block_algorithm_mode($td) {}

/**
 * Tells whether the opened mode outputs blocks (e.g. for cbc and ecb,
 * and for cfb and stream).
 *
 * @param resource
 * @return bool
 **/
function mcrypt_enc_is_block_mode($td) {}

/**
 * This function runs the self test on the algorithm specified by the
 * descriptor td.
 *
 * @param resource
 * @return int
 **/
function mcrypt_enc_self_test($td) {}

/**
 * This function encrypts data. The data is padded with "\0" to make sure
 * the length of the data is n * blocksize. This function returns the
 * encrypted data. Note that the length of the returned string can in
 * fact be longer then the input, due to the padding of the data.
 * 
 * If you want to store the encrypted data in a database make sure to
 * store the entire string as returned by mcrypt_generic, or the string
 * will not entirely decrypt properly. If your original string is 10
 * characters long and the block size is 8 (use mcrypt_enc_get_block_size
 * to determine the blocksize), you would need at least 16 characters in
 * your database field. Note the string returned by mdecrypt_generic will
 * be 16 characters as well...use rtrim($str, "\0") to remove the
 * padding.
 * 
 * If you are for example storing the data in a MySQL database remember
 * that varchar fields automatically have trailing spaces removed during
 * insertion. As encrypted data can end in a space (ASCII 32), the data
 * will be damaged by this removal. Store data in a tinyblob/tinytext (or
 * larger) field instead.
 *
 * @param resource
 * @param string
 * @return string
 **/
function mcrypt_generic($td, $data) {}

/**
 * This function terminates encryption specified by the encryption
 * descriptor (td). It clears all buffers, but does not close the module.
 * You need to call mcrypt_module_close yourself. (But PHP does this for
 * you at the end of the script.)
 *
 * @param resource
 * @return bool
 **/
function mcrypt_generic_deinit($td) {}

/**
 * This function is deprecated, use mcrypt_generic_deinit instead. It can
 * cause crashes when used with mcrypt_module_close due to multiple
 * buffer frees.
 * 
 * This function terminates encryption specified by the encryption
 * descriptor (td). Actually it clears all buffers, and closes all the
 * modules used. Returns on error, or on success.
 *
 * @param resource
 * @return bool
 **/
function mcrypt_generic_end($td) {}

/**
 * You need to call this function before every call to mcrypt_generic or
 * mdecrypt_generic.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function mcrypt_generic_init($td, $key, $iv) {}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or 2.5.x.
 * 
 * mcrypt_get_block_size is used to get the size of a block of the
 * specified cipher (in combination with an encryption mode).
 * 
 * It is more useful to use the mcrypt_enc_get_block_size function as
 * this uses the resource returned by mcrypt_module_open.
 *
 * @param int
 * @return int
 **/
function mcrypt_get_block_size($cipher) {}

/**
 * mcrypt_get_cipher_name is used to get the name of the specified
 * cipher.
 * 
 * mcrypt_get_cipher_name takes the cipher number as an argument
 * (libmcrypt 2.2.x) or takes the cipher name as an argument (libmcrypt
 * 2.4.x or higher) and returns the name of the cipher or , if the cipher
 * does not exist.
 *
 * @param int
 * @return string
 **/
function mcrypt_get_cipher_name($cipher) {}

/**
 * Gets the size of the IV belonging to a specific cipher/mode
 * combination.
 * 
 * It is more useful to use the mcrypt_enc_get_iv_size function as this
 * uses the resource returned by mcrypt_module_open.
 *
 * @param string
 * @param string
 * @return int
 **/
function mcrypt_get_iv_size($cipher, $mode) {}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or 2.5.x.
 * 
 * mcrypt_get_key_size is used to get the size of a key of the specified
 * cipher (in combination with an encryption mode).
 * 
 * This example shows how to use this function when linked against
 * libmcrypt 2.4.x and 2.5.x. It is more useful to use the
 * mcrypt_enc_get_key_size function as this uses the resource returned by
 * mcrypt_module_open.
 * 
 * mcrypt_get_key_size example
 * 
 * See also: mcrypt_get_block_size, mcrypt_enc_get_key_size and
 * mcrypt_encrypt.
 *
 * @param int
 * @return int
 **/
function mcrypt_get_key_size($cipher) {}

/**
 * Gets the list of all supported algorithms in the lib_dir parameter.
 *
 * @param string
 * @return array
 **/
function mcrypt_list_algorithms($lib_dir) {}

/**
 * Gets the list of all supported modes in the lib_dir parameter.
 *
 * @param string
 * @return array
 **/
function mcrypt_list_modes($lib_dir) {}

/**
 * Closes the specified encryption handle.
 *
 * @param resource
 * @return bool
 **/
function mcrypt_module_close($td) {}

/**
 * Gets the blocksize of the specified algorithm.
 *
 * @param string
 * @param string
 * @return int
 **/
function mcrypt_module_get_algo_block_size($algorithm, $lib_dir) {}

/**
 * Gets the maximum supported keysize of the opened mode.
 *
 * @param string
 * @param string
 * @return int
 **/
function mcrypt_module_get_algo_key_size($algorithm, $lib_dir) {}

/**
 * Returns an array with the key sizes supported by the specified
 * algorithm. If it returns an empty array then all key sizes between 1
 * and mcrypt_module_get_algo_key_size are supported by the algorithm.
 *
 * @param string
 * @param string
 * @return array
 **/
function mcrypt_module_get_supported_key_sizes($algorithm, $lib_dir) {}

/**
 * This function returns if the specified algorithm is a block algorithm,
 * or is it is a stream algorithm.
 *
 * @param string
 * @param string
 * @return bool
 **/
function mcrypt_module_is_block_algorithm($algorithm, $lib_dir) {}

/**
 * This function returns if the mode is for use with block algorithms,
 * otherwise it returns . (e.g. for stream, and for cbc, cfb, ofb).
 *
 * @param string
 * @param string
 * @return bool
 **/
function mcrypt_module_is_block_algorithm_mode($mode, $lib_dir) {}

/**
 * This function returns if the mode outputs blocks of bytes or if it
 * outputs just bytes. (e.g. for cbc and ecb, and for cfb and stream).
 *
 * @param string
 * @param string
 * @return bool
 **/
function mcrypt_module_is_block_mode($mode, $lib_dir) {}

/**
 * This function opens the module of the algorithm and the mode to be
 * used. The name of the algorithm is specified in algorithm, e.g.
 * "twofish" or is one of the MCRYPT_ciphername constants. The module is
 * closed by calling mcrypt_module_close.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function mcrypt_module_open($algorithm, $algorithm_directory, $mode, $mode_directory) {}

/**
 * This function runs the self test on the algorithm specified.
 *
 * @param string
 * @param string
 * @return bool
 **/
function mcrypt_module_self_test($algorithm, $lib_dir) {}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The mode should be
 * either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function should not be used anymore, see mcrypt_generic and
 * mdecrypt_generic for replacements.
 *
 * @param int
 * @param string
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function mcrypt_ofb($cipher, $key, $data, $mode, $iv) {}

/**
 * Calculates the MD5 hash of str using the RSA Data Security, Inc. MD5
 * Message-Digest Algorithm, and returns that hash.
 *
 * @param string
 * @param bool
 * @return string
 **/
function md5($str, $raw_output) {}

/**
 * Calculates the MD5 hash of the file specified by the filename
 * parameter using the RSA Data Security, Inc. MD5 Message-Digest
 * Algorithm, and returns that hash. The hash is a 32-character
 * hexadecimal number.
 *
 * @param string
 * @param bool
 * @return string
 **/
function md5_file($filename, $raw_output) {}

/**
 * This function decrypts data. Note that the length of the returned
 * string can in fact be longer then the unencrypted string, due to the
 * padding of the data.
 *
 * @param resource
 * @param string
 * @return string
 **/
function mdecrypt_generic($td, $data) {}

/**
 * memcache_debug turns on debug output if parameter on_off is equal to
 * and turns off if it's .
 * 
 * memcache_debug is accessible only if PHP was built with
 * --enable-debug option and always returns in this case. Otherwise, this
 * function has no effect and always returns .
 *
 * @param bool
 * @return bool
 **/
function memcache_debug($on_off) {}

/**
 * Returns the peak of memory, in bytes, that's been allocated to your
 * PHP script.
 *
 * @param bool
 * @return int
 **/
function memory_get_peak_usage($real_usage) {}

/**
 * Returns the amount of memory, in bytes, that's currently being
 * allocated to your PHP script.
 *
 * @param bool
 * @return int
 **/
function memory_get_usage($real_usage) {}

/**
 * Calculates the metaphone key of str.
 * 
 * Similar to soundex metaphone creates the same key for similar sounding
 * words. It's more accurate than soundex as it knows the basic rules of
 * English pronunciation. The metaphone generated keys are of variable
 * length.
 * 
 * Metaphone was developed by Lawrence Philips lphilips at verity dot
 * com&gt;. It is described in ["Practical Algorithms for Programmers",
 * Binstock Rex, Addison Wesley, 1995].
 *
 * @param string
 * @param int
 * @return string
 **/
function metaphone($str, $phones) {}

/**
 * Checks if the class method exists in the given object.
 *
 * @param mixed
 * @param string
 * @return bool
 **/
function method_exists($object, $method_name) {}

/**
 * mhash applies a hash function specified by hash to the data.
 *
 * @param int
 * @param string
 * @param string
 * @return string
 **/
function mhash($hash, $data, $key) {}

/**
 * Gets the highest available hash id.
 *
 * @return int
 **/
function mhash_count() {}

/**
 * Gets the size of a block of the specified hash.
 *
 * @param int
 * @return int
 **/
function mhash_get_block_size($hash) {}

/**
 * Gets the name of the specified hash.
 *
 * @param int
 * @return string
 **/
function mhash_get_hash_name($hash) {}

/**
 * Generates a key according to the hash given a user provided password.
 * 
 * This is the Salted S2K algorithm as specified in the OpenPGP document
 * (RFC 2440).
 * 
 * Keep in mind that user supplied passwords are not really suitable to
 * be used as keys in cryptographic algorithms, since users normally
 * choose keys they can write on keyboard. These passwords use only 6 to
 * 7 bits per character (or less). It is highly recommended to use some
 * kind of transformation (like this function) to the user supplied key.
 *
 * @param int
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function mhash_keygen_s2k($hash, $password, $salt, $bytes) {}

/**
 * microtime returns the current Unix timestamp with microseconds. This
 * function is only available on operating systems that support the
 * gettimeofday() system call.
 *
 * @param bool
 * @return mixed
 **/
function microtime($get_as_float) {}

/**
 * Returns the MIME content type for a file as determined by using
 * information from the magic.mime file.
 *
 * @param string
 * @return string
 **/
function mime_content_type($filename) {}

/**
 * If the first and only parameter is an array, min returns the lowest
 * value in that array. If at least two parameters are provided, min
 * returns the smallest of these values.
 *
 * @param array
 * @return mixed
 **/
function min($values) {}

/**
 * @param string
 * @return int
 **/
function ming_keypress($char) {}

/**
 * Sets the threshold error for drawing cubic beziers.
 *
 * @param int
 * @return void
 **/
function ming_setcubicthreshold($threshold) {}

/**
 * Sets the scale of the output SWF. Inside the SWF file, coordinates are
 * measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel.
 *
 * @param float
 * @return void
 **/
function ming_setscale($scale) {}

/**
 * Sets the SWF output compression level.
 *
 * @param int
 * @return void
 **/
function ming_setswfcompression($level) {}

/**
 * @param int
 * @return void
 **/
function ming_useconstants($use) {}

/**
 * Sets the SWF version to be used in the movie. This affect the
 * bahaviour of Action Script.
 *
 * @param int
 * @return void
 **/
function ming_useswfversion($version) {}

/**
 * Attempts to create the directory specified by pathname.
 *
 * @param string
 * @param int
 * @param bool
 * @param resource
 * @return bool
 **/
function mkdir($pathname, $mode, $recursive, $context) {}

/**
 * Returns the Unix timestamp corresponding to the arguments given. This
 * timestamp is a long integer containing the number of seconds between
 * the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.
 * 
 * Arguments may be left out in order from right to left; any arguments
 * thus omitted will be set to the current value according to the local
 * date and time.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function mktime($hour, $minute, $second, $month, $day, $year, $is_dst) {}

/**
 * money_format returns a formatted version of number. This function
 * wraps the C library function strfmon, with the difference that this
 * implementation converts only one number at a time.
 *
 * @param string
 * @param float
 * @return string
 **/
function money_format($format, $number) {}

/**
 * This function checks to ensure that the file designated by filename is
 * a valid upload file (meaning that it was uploaded via PHP's HTTP POST
 * upload mechanism). If the file is valid, it will be moved to the
 * filename given by destination.
 * 
 * This sort of check is especially important if there is any chance that
 * anything done with uploaded files could reveal their contents to the
 * user, or even to other users on the same system.
 *
 * @param string
 * @param string
 * @return bool
 **/
function move_uploaded_file($filename, $destination) {}

/**
 * The mqseries_back (MQBACK) call indicates to the queue manager that
 * all the message gets and puts that have occurred since the last
 * syncpoint are to be backed out. Messages put as part of a unit of work
 * are deleted; messages retrieved as part of a unit of work are
 * reinstated on the queue.
 * 
 * Using mqseries_back only works in conjunction with mqseries_begin and
 * only function when connecting directly to a Queueu manager. Not via
 * the mqclient interface.
 *
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_back($hconn, &$compCode, &$reason) {}

/**
 * The mqseries_begin (MQBEGIN) call begins a unit of work that is
 * coordinated by the queue manager, and that may involve external
 * resource managers.
 * 
 * Using mqseries_begin starts the unit of work. Either mqseries_back or
 * mqseries_cmit ends the unit of work.
 *
 * @param resource
 * @param array
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_begin($hconn, $beginOptions, &$compCode, &$reason) {}

/**
 * The mqseries_close (MQCLOSE) call relinquishes access to an object,
 * and is the inverse of the mqseries_open (MQOPEN) call.
 *
 * @param resource
 * @param resource
 * @param int
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_close($hconn, $hobj, $options, &$compCode, &$reason) {}

/**
 * The mqseries_cmit (MQCMIT) call indicates to the queue manager that
 * the application has reached a syncpoint, and that all of the message
 * gets and puts that have occurred since the last syncpoint are to be
 * made permanent. Messages put as part of a unit of work are made
 * available to other applications; messages retrieved as part of a unit
 * of work are deleted.
 *
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_cmit($hconn, &$compCode, &$reason) {}

/**
 * The mqseries_conn (MQCONN) call connects an application program to a
 * queue manager. It provides a queue manager connection handle, which is
 * used by the application on subsequent message queuing calls.
 *
 * @param string
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_conn($qManagerName, &$hconn, &$compCode, &$reason) {}

/**
 * The mqseries_connx (MQCONNX) call connects an application program to a
 * queue manager. It provides a queue manager connection handle, which is
 * used by the application on subsequent MQ calls.
 *
 * @param string
 * @param array
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_connx($qManagerName, &$connOptions, &$hconn, &$compCode, &$reason) {}

/**
 * The mqseries_disc (MQDISC) call breaks the connection between the
 * queue manager and the application program, and is the inverse of the
 * mqseries_conn (MQCONN) or mqseries_connx (MQCONNX) call.
 *
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_disc($hconn, &$compCode, &$reason) {}

/**
 * The mqseries_get (MQGET) call retrieves a message from a local queue
 * that has been opened using the mqseries_open (MQOPEN) call
 *
 * @param resource
 * @param resource
 * @param array
 * @param array
 * @param int
 * @param string
 * @param int
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_get($hConn, $hObj, &$md, &$gmo, &$bufferLength, &$msg, &$data_length, &$compCode, &$reason) {}

/**
 * The mqseries_inq (MQINQ) call returns an array of integers and a set
 * of character strings containing the attributes of an object.
 *
 * @param resource
 * @param resource
 * @param int
 * @param array
 * @param int
 * @param resource
 * @param int
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_inq($hconn, $hobj, $selectorCount, $selectors, $intAttrCount, &$intAttr, $charAttrLength, &$charAttr, &$compCode, &$reason) {}

/**
 * The mqseries_open (MQOPEN) call establishes access to an object.
 *
 * @param resource
 * @param array
 * @param int
 * @param resource
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_open($hconn, &$objDesc, $option, &$hobj, &$compCode, &$reason) {}

/**
 * The mqseries_put (MQPUT) call puts a message on a queue or
 * distribution list. The queue or distribution list must already be
 * open.
 *
 * @param resource
 * @param resource
 * @param array
 * @param array
 * @param string
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_put($hConn, $hObj, &$md, &$pmo, $message, &$compCode, &$reason) {}

/**
 * The mqseries_put1 (MQPUT1) call puts one message on a queue. The queue
 * need not be open.
 *
 * @param resource
 * @param resource
 * @param resource
 * @param resource
 * @param string
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_put1($hconn, &$objDesc, &$msgDesc, &$pmo, $buffer, &$compCode, &$reason) {}

/**
 * The mqseries_set (MQSET) call is used to change the attributes of an
 * object represented by a handle. The object must be a queue.
 *
 * @param resource
 * @param resource
 * @param int
 * @param array
 * @param int
 * @param array
 * @param int
 * @param array
 * @param resource
 * @param resource
 * @return void
 **/
function mqseries_set($hconn, $hobj, $selectorcount, $selectors, $intattrcount, $intattrs, $charattrlength, $charattrs, &$compCode, &$reason) {}

/**
 * mqseries_strerror returns the message that correspond to the reason
 * result code.
 *
 * @param int
 * @return string
 **/
function mqseries_strerror($reason) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function msession_connect($host, $port) {}

/**
 * @return int
 **/
function msession_count() {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function msession_create($session, $classname, $data) {}

/**
 * @param string
 * @return bool
 **/
function msession_destroy($name) {}

/**
 * @return void
 **/
function msession_disconnect() {}

/**
 * @param string
 * @param string
 * @return array
 **/
function msession_find($name, $value) {}

/**
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function msession_get($session, $name, $value) {}

/**
 * @param string
 * @return array
 **/
function msession_get_array($session) {}

/**
 * @param string
 * @return string
 **/
function msession_get_data($session) {}

/**
 * @param string
 * @param string
 * @return string
 **/
function msession_inc($session, $name) {}

/**
 * @return array
 **/
function msession_list() {}

/**
 * Used for searching sessions with common attributes.
 *
 * @param string
 * @return array
 **/
function msession_listvar($name) {}

/**
 * @param string
 * @return int
 **/
function msession_lock($name) {}

/**
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function msession_plugin($session, $val, $param) {}

/**
 * @param int
 * @return string
 **/
function msession_randstr($param) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function msession_set($session, $name, $value) {}

/**
 * @param string
 * @param array
 * @return void
 **/
function msession_set_array($session, $tuples) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function msession_set_data($session, $value) {}

/**
 * @param string
 * @param int
 * @return int
 **/
function msession_timeout($session, $param) {}

/**
 * @param int
 * @param string
 * @param string
 * @return string
 **/
function msession_uniq($param, $classname, $data) {}

/**
 * @param string
 * @param int
 * @return int
 **/
function msession_unlock($session, $key) {}

/**
 * msg_get_queue returns an id that can be used to access the System V
 * message queue with the given key. The first call creates the message
 * queue with the optional perms. A second call to msg_get_queue for the
 * same key will return a different message queue identifier, but both
 * identifiers access the same underlying message queue.
 *
 * @param int
 * @param int
 * @return resource
 **/
function msg_get_queue($key, $perms) {}

/**
 * Checks whether the message queue key exists.
 *
 * @param int
 * @return bool
 **/
function msg_queue_exists($key) {}

/**
 * msg_receive will receive the first message from the specified queue of
 * the type specified by desiredmsgtype.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param mixed
 * @param bool
 * @param int
 * @param int
 * @return bool
 **/
function msg_receive($queue, $desiredmsgtype, &$msgtype, $maxsize, &$message, $unserialize, $flags, &$errorcode) {}

/**
 * msg_remove_queue destroys the message queue specified by the queue.
 * Only use this function when all processes have finished working with
 * the message queue and you need to release the system resources held by
 * it.
 *
 * @param resource
 * @return bool
 **/
function msg_remove_queue($queue) {}

/**
 * msg_send sends a message of type msgtype (which MUST be greater than
 * 0) to the message queue specified by queue.
 *
 * @param resource
 * @param int
 * @param mixed
 * @param bool
 * @param bool
 * @param int
 * @return bool
 **/
function msg_send($queue, $msgtype, $message, $serialize, $blocking, &$errorcode) {}

/**
 * msg_set_queue allows you to change the values of the msg_perm.uid,
 * msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying
 * message queue data structure.
 * 
 * Changing the data structure will require that PHP be running as the
 * same user that created the queue, owns the queue (as determined by the
 * existing msg_perm.xxx fields), or be running with root privileges.
 * root privileges are required to raise the msg_qbytes values above the
 * system defined limit.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function msg_set_queue($queue, $data) {}

/**
 * msg_stat_queue returns the message queue meta data for the message
 * queue specified by the queue. This is useful, for example, to
 * determine which process sent the message that was just received.
 *
 * @param resource
 * @return array
 **/
function msg_stat_queue($queue) {}

/**
 * msql selects a database and executes a query on it.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function msql($database, $query, $link_identifier) {}

/**
 * Returns number of affected rows by the last SELECT, UPDATE or DELETE
 * query associated with result.
 *
 * @param resource
 * @return int
 **/
function msql_affected_rows($result) {}

/**
 * msql_close closes the non-persistent connection to the mSQL server
 * that's associated with the specified link identifier.
 * 
 * Using msql_close isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution. See
 * also freeing resources.
 *
 * @param resource
 * @return bool
 **/
function msql_close($link_identifier) {}

/**
 * msql_connect establishes a connection to a mSQL server.
 * 
 * In case a second call is made to msql_connect with the same arguments,
 * no new link will be established, but instead, the link identifier of
 * the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling
 * msql_close.
 *
 * @param string
 * @return resource
 **/
function msql_connect($hostname) {}

/**
 * msql_createdb attempts to create a new database on the mSQL server.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function msql_createdb($database_name, $link_identifier) {}

/**
 * msql_create_db attempts to create a new database on the mSQL server.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function msql_create_db($database_name, $link_identifier) {}

/**
 * msql_data_seek moves the internal row pointer of the mSQL result
 * associated with the specified query identifier to point to the
 * specified row number. The next call to msql_fetch_row would return
 * that row.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function msql_data_seek($result, $row_number) {}

/**
 * msql_dbname returns the contents of one cell from a mSQL result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they are often much quicker than msql_dbname.
 * 
 * Recommended high-performance alternatives: msql_fetch_row,
 * msql_fetch_array, and msql_fetch_object.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function msql_dbname($result, $row, $field) {}

/**
 * msql_db_query selects a database and executes a query on it.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function msql_db_query($database, $query, $link_identifier) {}

/**
 * msql_drop_db attempts to drop (remove) a database from the mSQL
 * server.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function msql_drop_db($database_name, $link_identifier) {}

/**
 * msql_error returns the last issued error by the mSQL server. Note that
 * only the last error message is accessible with msql_error.
 *
 * @return string
 **/
function msql_error() {}

/**
 * msql_fetch_array is an extended version of msql_fetch_row. In addition
 * to storing the data in the numeric indices of the result array, it
 * also stores the data in associative indices, using the field names as
 * keys.
 * 
 * An important thing to note is that using msql_fetch_array is NOT
 * significantly slower than using msql_fetch_row, while it provides a
 * significant added value.
 *
 * @param resource
 * @param int
 * @return array
 **/
function msql_fetch_array($result, $result_type) {}

/**
 * msql_fetch_field can be used in order to obtain information about
 * fields in a certain query result.
 *
 * @param resource
 * @param int
 * @return object
 **/
function msql_fetch_field($result, $field_offset) {}

/**
 * msql_fetch_object is similar to msql_fetch_array, with one difference
 * - an object is returned, instead of an array. Indirectly, that means
 * that you can only access the data by the field names, and not by their
 * offsets (numbers are illegal property names).
 * 
 * Speed-wise, the function is identical to msql_fetch_array, and almost
 * as quick as msql_fetch_row (the difference is insignificant).
 *
 * @param resource
 * @return object
 **/
function msql_fetch_object($result) {}

/**
 * msql_fetch_row fetches one row of data from the result associated with
 * the specified query identifier. The row is returned as an array. Each
 * result column is stored in an array offset, starting at offset 0.
 * 
 * Subsequent call to msql_fetch_row would return the next row in the
 * result set, or if there are no more rows.
 *
 * @param resource
 * @return array
 **/
function msql_fetch_row($result) {}

/**
 * msql_fieldflags returns the field flags of the specified field.
 *
 * @param resource
 * @param int
 * @return string
 **/
function msql_fieldflags($result, $field_offset) {}

/**
 * msql_fieldlen returns the length of the specified field.
 *
 * @param resource
 * @param int
 * @return int
 **/
function msql_fieldlen($result, $field_offset) {}

/**
 * msql_fieldname gets the name of the specified field index.
 *
 * @param resource
 * @param int
 * @return string
 **/
function msql_fieldname($result, $field_offset) {}

/**
 * Returns the name of the table that the specified field is in.
 *
 * @param resource
 * @param int
 * @return int
 **/
function msql_fieldtable($result, $field_offset) {}

/**
 * msql_fieldtype gets the type of the specified field index.
 *
 * @param resource
 * @param int
 * @return string
 **/
function msql_fieldtype($result, $field_offset) {}

/**
 * msql_field_flags returns the field flags of the specified field.
 *
 * @param resource
 * @param int
 * @return string
 **/
function msql_field_flags($result, $field_offset) {}

/**
 * msql_field_len returns the length of the specified field.
 *
 * @param resource
 * @param int
 * @return int
 **/
function msql_field_len($result, $field_offset) {}

/**
 * msql_field_name gets the name of the specified field index.
 *
 * @param resource
 * @param int
 * @return string
 **/
function msql_field_name($result, $field_offset) {}

/**
 * Seeks to the specified field offset. If the next call to
 * msql_fetch_field won't include a field offset, this field would be
 * returned.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function msql_field_seek($result, $field_offset) {}

/**
 * Returns the name of the table that the specified field is in.
 *
 * @param resource
 * @param int
 * @return int
 **/
function msql_field_table($result, $field_offset) {}

/**
 * msql_field_type gets the type of the specified field index.
 *
 * @param resource
 * @param int
 * @return string
 **/
function msql_field_type($result, $field_offset) {}

/**
 * msql_free_result frees the memory associated with query_identifier.
 * When PHP completes a request, this memory is freed automatically, so
 * you only need to call this function when you want to make sure you
 * don't use too much memory while the script is running.
 *
 * @param resource
 * @return bool
 **/
function msql_free_result($result) {}

/**
 * msql_list_tables lists the databases available on the specified
 * link_identifier.
 *
 * @param resource
 * @return resource
 **/
function msql_list_dbs($link_identifier) {}

/**
 * msql_list_fields returns information about the given table.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function msql_list_fields($database, $tablename, $link_identifier) {}

/**
 * msql_list_tables lists the tables on the specified database.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function msql_list_tables($database, $link_identifier) {}

/**
 * msql_numfields returns the number of fields in a result set.
 *
 * @param resource
 * @return int
 **/
function msql_numfields($result) {}

/**
 * msql_numrows returns the number of rows in a result set.
 *
 * @param resource
 * @return int
 **/
function msql_numrows($query_identifier) {}

/**
 * msql_num_fields returns the number of fields in a result set.
 *
 * @param resource
 * @return int
 **/
function msql_num_fields($result) {}

/**
 * msql_num_rows returns the number of rows in a result set.
 *
 * @param resource
 * @return int
 **/
function msql_num_rows($query_identifier) {}

/**
 * msql_pconnect acts very much like msql_connect with two major
 * differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host. If one is
 * found, an identifier for it will be returned instead of opening a new
 * connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use (msql_close will not close links established by this
 * function).
 *
 * @param string
 * @return resource
 **/
function msql_pconnect($hostname) {}

/**
 * msql_query sends a query to the currently active database on the
 * server that's associated with the specified link identifier.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function msql_query($query, $link_identifier) {}

/**
 * msql_result returns the contents of one cell from a mSQL result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they are often much quicker than msql_result.
 * 
 * Recommended high-performance alternatives: msql_fetch_row,
 * msql_fetch_array, and msql_fetch_object.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function msql_result($result, $row, $field) {}

/**
 * msql_select_db sets the current active database on the server that's
 * associated with the specified link_identifier.
 * 
 * Subsequent calls to msql_query will be made on the active database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function msql_select_db($database_name, $link_identifier) {}

/**
 * msql_tablename returns the contents of one cell from a mSQL result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they are often much quicker than msql_tablename.
 * 
 * Recommended high-performance alternatives: msql_fetch_row,
 * msql_fetch_array, and msql_fetch_object.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function msql_tablename($result, $row, $field) {}

/**
 * Binds a parameter to a stored procedure or a remote stored procedure.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @param bool
 * @param bool
 * @param int
 * @return bool
 **/
function mssql_bind($stmt, $param_name, &$var, $type, $is_output, $is_null, $maxlen) {}

/**
 * Closes the link to a MS SQL Server database that's associated with the
 * specified link identifier. If the link identifier isn't specified, the
 * last opened link is assumed.
 * 
 * Note that this isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution.
 *
 * @param resource
 * @return bool
 **/
function mssql_close($link_identifier) {}

/**
 * mssql_connect establishes a connection to a MS SQL server.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling
 * mssql_close.
 *
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return resource
 **/
function mssql_connect($servername, $username, $password, $new_link) {}

/**
 * mssql_data_seek moves the internal row pointer of the MS SQL result
 * associated with the specified result identifier to point to the
 * specified row number, first row being number 0. The next call to
 * mssql_fetch_row would return that row.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function mssql_data_seek($result_identifier, $row_number) {}

/**
 * Executes a stored procedure on a MS SQL server database
 *
 * @param resource
 * @param bool
 * @return mixed
 **/
function mssql_execute($stmt, $skip_results) {}

/**
 * mssql_fetch_array is an extended version of mssql_fetch_row. In
 * addition to storing the data in the numeric indices of the result
 * array, it also stores the data in associative indices, using the field
 * names as keys.
 * 
 * An important thing to note is that using mssql_fetch_array is NOT
 * significantly slower than using mssql_fetch_row, while it provides a
 * significant added value.
 *
 * @param resource
 * @param int
 * @return array
 **/
function mssql_fetch_array($result, $result_type) {}

/**
 * Returns an associative array that corresponds to the fetched row and
 * moves the internal data pointer ahead. mssql_fetch_assoc is equivalent
 * to calling mssql_fetch_array with MSSQL_ASSOC for the optional second
 * parameter.
 *
 * @param resource
 * @return array
 **/
function mssql_fetch_assoc($result_id) {}

/**
 * Returns the next batch of records
 *
 * @param resource
 * @return int
 **/
function mssql_fetch_batch($result) {}

/**
 * mssql_fetch_field can be used in order to obtain information about
 * fields in a certain query result.
 *
 * @param resource
 * @param int
 * @return object
 **/
function mssql_fetch_field($result, $field_offset) {}

/**
 * mssql_fetch_object is similar to mssql_fetch_array, with one
 * difference - an object is returned, instead of an array. Indirectly,
 * that means that you can only access the data by the field names, and
 * not by their offsets (numbers are illegal property names).
 * 
 * Speed-wise, the function is identical to mssql_fetch_array, and almost
 * as quick as mssql_fetch_row (the difference is insignificant).
 *
 * @param resource
 * @return object
 **/
function mssql_fetch_object($result) {}

/**
 * mssql_fetch_row fetches one row of data from the result associated
 * with the specified result identifier. The row is returned as an array.
 * Each result column is stored in an array offset, starting at offset 0.
 * 
 * Subsequent call to mssql_fetch_row would return the next row in the
 * result set, or if there are no more rows.
 *
 * @param resource
 * @return array
 **/
function mssql_fetch_row($result) {}

/**
 * Returns the length of field no. offset in result.
 *
 * @param resource
 * @param int
 * @return int
 **/
function mssql_field_length($result, $offset) {}

/**
 * Returns the name of field no. offset in result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mssql_field_name($result, $offset) {}

/**
 * Seeks to the specified field offset. If the next call to
 * mssql_fetch_field won't include a field offset, this field would be
 * returned.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function mssql_field_seek($result, $field_offset) {}

/**
 * Returns the type of field no. offset in result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mssql_field_type($result, $offset) {}

/**
 * mssql_free_result only needs to be called if you are worried about
 * using too much memory while your script is running. All result memory
 * will automatically be freed when the script ends. You may call
 * mssql_free_result with the result identifier as an argument and the
 * associated result memory will be freed.
 *
 * @param resource
 * @return bool
 **/
function mssql_free_result($result) {}

/**
 * mssql_free_statement only needs to be called if you are worried about
 * using too much memory while your script is running. All statement
 * memory will automatically be freed when the script ends. You may call
 * mssql_free_statement with the statement identifier as an argument and
 * the associated statement memory will be freed.
 *
 * @param resource
 * @return bool
 **/
function mssql_free_statement($stmt) {}

/**
 * Gets the last message from the MS-SQL server
 *
 * @return string
 **/
function mssql_get_last_message() {}

/**
 * Converts a 16 byte binary GUID to a string.
 *
 * @param string
 * @param bool
 * @return string
 **/
function mssql_guid_string($binary, $short_format) {}

/**
 * Initializes a stored procedure or a remote stored procedure.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function mssql_init($sp_name, $link_identifier) {}

/**
 * Sets the minimum error severity.
 *
 * @param int
 * @return void
 **/
function mssql_min_error_severity($severity) {}

/**
 * Sets the minimum message severity.
 *
 * @param int
 * @return void
 **/
function mssql_min_message_severity($severity) {}

/**
 * When sending more than one SQL statement to the server or executing a
 * stored procedure with multiple results, it will cause the server to
 * return multiple result sets. This function will test for additional
 * results available form the server. If an additional result set exists
 * it will free the existing result set and prepare to fetch the rows
 * from the new result set.
 *
 * @param resource
 * @return bool
 **/
function mssql_next_result($result_id) {}

/**
 * mssql_num_fields returns the number of fields in a result set.
 *
 * @param resource
 * @return int
 **/
function mssql_num_fields($result) {}

/**
 * mssql_num_rows returns the number of rows in a result set.
 *
 * @param resource
 * @return int
 **/
function mssql_num_rows($result) {}

/**
 * mssql_pconnect acts very much like mssql_connect with two major
 * differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use (mssql_close will not close links established by
 * mssql_pconnect).
 * 
 * This type of links is therefore called 'persistent'.
 *
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return resource
 **/
function mssql_pconnect($servername, $username, $password, $new_link) {}

/**
 * mssql_query sends a query to the currently active database on the
 * server that's associated with the specified link identifier.
 *
 * @param string
 * @param resource
 * @param int
 * @return mixed
 **/
function mssql_query($query, $link_identifier, $batch_size) {}

/**
 * mssql_result returns the contents of one cell from a MS SQL result
 * set.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function mssql_result($result, $row, $field) {}

/**
 * Returns the number of records affected by the last write query.
 *
 * @param resource
 * @return int
 **/
function mssql_rows_affected($link_identifier) {}

/**
 * mssql_select_db sets the current active database on the server that's
 * associated with the specified link identifier.
 * 
 * Every subsequent call to mssql_query will be made on the active
 * database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function mssql_select_db($database_name, $link_identifier) {}

/**
 * @return int
 **/
function mt_getrandmax() {}

/**
 * @return int
 **/
function mt_rand() {}

/**
 * Seeds the random number generator with seed or with a random value if
 * no seed is given.
 *
 * @param int
 * @return void
 **/
function mt_srand($seed) {}

/**
 * Returns the number of rows affected by the last INSERT, UPDATE,
 * REPLACE or DELETE query.
 * 
 * For SELECT statements mysqli_affected_rows works like mysqli_num_rows.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_affected_rows($link) {}

/**
 * Opens a connection to the MySQL Server running on.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @param string
 * @return mysqli
 **/
function mysqli_connect($host, $username, $passwd, $dbname, $port, $socket) {}

/**
 * Returns the last error code number from the last call to
 * mysqli_connect.
 *
 * @return int
 **/
function mysqli_connect_errno() {}

/**
 * Returns the last error message string from the last call to
 * mysqli_connect.
 *
 * @return string
 **/
function mysqli_connect_error() {}

/**
 * @param mysqli
 * @return bool
 **/
function mysqli_disable_reads_from_master($link) {}

/**
 * @param mysqli
 * @return bool
 **/
function mysqli_disable_rpl_parse($link) {}

/**
 * @param mysqli
 * @return bool
 **/
function mysqli_enable_reads_from_master($link) {}

/**
 * @param mysqli
 * @return bool
 **/
function mysqli_enable_rpl_parse($link) {}

/**
 * Returns the last error code for the most recent MySQLi function call
 * that can succeed or fail.
 * 
 * Client error message numbers are listed in the MySQL errmsg.h header
 * file, server error message numbers are listed in mysqld_error.h. In
 * the MySQL source distribution you can find a complete list of error
 * messages and error numbers in the file Docs/mysqld_error.txt.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_errno($link) {}

/**
 * Returns the last error message for the most recent MySQLi function
 * call that can succeed or fail.
 *
 * @param mysqli
 * @return string
 **/
function mysqli_error($link) {}

/**
 * The mysqli_fetch_lengths function returns an array containing the
 * lengths of every column of the current row within the result set.
 *
 * @param mysqli_result
 * @return array
 **/
function mysqli_fetch_lengths($result) {}

/**
 * Returns the number of columns for the most recent query on the
 * connection represented by the link parameter. This function can be
 * useful when using the mysqli_store_result function to determine if the
 * query should have produced a non-empty result set or not without
 * knowing the nature of the query.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_field_count($link) {}

/**
 * Returns the position of the field cursor used for the last
 * mysqli_fetch_field call. This value can be used as an argument to
 * mysqli_field_seek.
 *
 * @param mysqli_result
 * @return int
 **/
function mysqli_field_tell($result) {}

/**
 * Returns a string that represents the MySQL client library version.
 *
 * @param mysqli
 * @return string
 **/
function mysqli_get_client_info($link) {}

/**
 * Returns client version number as an integer.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_get_client_version($link) {}

/**
 * Returns a string describing the connection represented by the link
 * parameter (including the server host name).
 *
 * @param mysqli
 * @return string
 **/
function mysqli_get_host_info($link) {}

/**
 * Returns an integer representing the MySQL protocol version used by the
 * connection represented by the link parameter.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_get_proto_info($link) {}

/**
 * Returns a string representing the version of the MySQL server that the
 * MySQLi extension is connected to.
 *
 * @param mysqli
 * @return string
 **/
function mysqli_get_server_info($link) {}

/**
 * The mysqli_get_server_version function returns the version of the
 * server connected to (represented by the link parameter) as an integer.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_get_server_version($link) {}

/**
 * The mysqli_info function returns a string providing information about
 * the last query executed. The nature of this string is provided below:
 * 
 * Possible mysqli_info return values
 * 
 * Query type Example result string
 * 
 * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0
 * 
 * INSERT INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0
 * Warnings: 0
 * 
 * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
 * 
 * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0
 * 
 * UPDATE ... Rows matched: 40 Changed: 40 Warnings: 0
 *
 * @param mysqli
 * @return string
 **/
function mysqli_info($link) {}

/**
 * The mysqli_insert_id function returns the ID generated by a query on a
 * table with a column having the AUTO_INCREMENT attribute. If the last
 * query wasn't an INSERT or UPDATE statement or if the modified table
 * does not have a column with the AUTO_INCREMENT attribute, this
 * function will return zero.
 *
 * @param mysqli
 * @return mixed
 **/
function mysqli_insert_id($link) {}

/**
 * @param mysqli
 * @param string
 * @return bool
 **/
function mysqli_master_query($link, $query) {}

/**
 * Returns the number of fields from specified result set.
 *
 * @param mysqli_result
 * @return int
 **/
function mysqli_num_fields($result) {}

/**
 * Returns the number of rows in the result set.
 * 
 * The use of mysqli_num_rows depends on whether you use buffered or
 * unbuffered result sets. In case you use unbuffered resultsets
 * mysqli_num_rows will not return the correct number of rows until all
 * the rows in the result have been retrieved.
 *
 * @param mysqli_result
 * @return int
 **/
function mysqli_num_rows($result) {}

/**
 * mysqli_report is a powerful function to improve your queries and code
 * during development and testing phase. Depending on the flags it
 * reports errors from mysqli function calls or queries which don't use
 * an index (or use a bad index).
 *
 * @param int
 * @return bool
 **/
function mysqli_report($flags) {}

/**
 * @param mysqli
 * @return int
 **/
function mysqli_rpl_parse_enabled($link) {}

/**
 * @param mysqli
 * @return bool
 **/
function mysqli_rpl_probe($link) {}

/**
 * Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN
 * depending on a query type. INSERT, UPDATE and similar are master
 * queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.
 *
 * @param mysqli
 * @param string
 * @return int
 **/
function mysqli_rpl_query_type($link, $query) {}

/**
 * @param mysqli
 * @param string
 * @return bool
 **/
function mysqli_send_query($link, $query) {}

/**
 * Deactivates a LOAD DATA INFILE LOCAL handler previously set with
 * mysqli_set_local_infile_handler.
 *
 * @param mysqli
 * @return void
 **/
function mysqli_set_local_infile_default($link) {}

/**
 * Set callback function for LOAD DATA LOCAL INFILE command
 * 
 * The callbacks task is to read input from the file specified in the
 * LOAD DATA LOCAL INFILE and to reformat it into the format understood
 * by LOAD DATA INFILE.
 * 
 * The returned data needs to match the format specified in the LOAD DATA
 *
 * @param mysqli
 * @param callback
 * @return bool
 **/
function mysqli_set_local_infile_handler($link, $read_func) {}

/**
 * @param mysqli
 * @param string
 * @return bool
 **/
function mysqli_slave_query($link, $query) {}

/**
 * Returns a string containing the SQLSTATE error code for the last
 * error. The error code consists of five characters. '00000' means no
 * error. The values are specified by ANSI SQL and ODBC. For a list of
 * possible values, see .
 *
 * @param mysqli
 * @return string
 **/
function mysqli_sqlstate($link) {}

/**
 * Returns the number of rows affected by INSERT, UPDATE, or DELETE
 * query.
 * 
 * This function only works with queries which update a table. In order
 * to get the number of rows from a SELECT query, use
 * mysqli_stmt_num_rows instead.
 *
 * @param mysqli_stmt
 * @return int
 **/
function mysqli_stmt_affected_rows($stmt) {}

/**
 * Returns the error code for the most recently invoked statement
 * function that can succeed or fail.
 * 
 * Client error message numbers are listed in the MySQL errmsg.h header
 * file, server error message numbers are listed in mysqld_error.h. In
 * the MySQL source distribution you can find a complete list of error
 * messages and error numbers in the file Docs/mysqld_error.txt.
 *
 * @param mysqli_stmt
 * @return int
 **/
function mysqli_stmt_errno($stmt) {}

/**
 * Returns a containing the error message for the most recently invoked
 * statement function that can succeed or fail.
 *
 * @param mysqli_stmt
 * @return string
 **/
function mysqli_stmt_error($stmt) {}

/**
 * @param mysqli_stmt
 * @return int
 **/
function mysqli_stmt_field_count($stmt) {}

/**
 * Allocates and initializes a statement object suitable for
 * mysqli_stmt_prepare.
 *
 * @param mysqli
 * @return mysqli_stmt
 **/
function mysqli_stmt_init($link) {}

/**
 * @param mysqli_stmt
 * @return mixed
 **/
function mysqli_stmt_insert_id($stmt) {}

/**
 * Returns the number of rows in the result set. The use of
 * mysqli_stmt_num_rows depends on whether or not you used
 * mysqli_stmt_store_result to buffer the entire result set in the
 * statement handle.
 * 
 * If you use mysqli_stmt_store_result, mysqli_stmt_num_rows may be
 * called immediately.
 *
 * @param mysqli_stmt
 * @return int
 **/
function mysqli_stmt_num_rows($stmt) {}

/**
 * Returns the number of parameter markers present in the prepared
 * statement.
 *
 * @param mysqli_stmt
 * @return int
 **/
function mysqli_stmt_param_count($stmt) {}

/**
 * Returns a string containing the SQLSTATE error code for the most
 * recently invoked prepared statement function that can succeed or fail.
 * The error code consists of five characters. '00000' means no error.
 * The values are specified by ANSI SQL and ODBC. For a list of possible
 * values, see .
 *
 * @param mysqli_stmt
 * @return string
 **/
function mysqli_stmt_sqlstate($stmt) {}

/**
 * The mysqli_thread_id function returns the thread ID for the current
 * connection which can then be killed using the mysqli_kill function. If
 * the connection is lost and you reconnect with mysqli_ping, the thread
 * ID will be other. Therefore you should get the thread ID only when you
 * need it.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_thread_id($link) {}

/**
 * Tells whether the client library is compiled as thread-safe.
 *
 * @return bool
 **/
function mysqli_thread_safe() {}

/**
 * Returns the number of warnings from the last query in the connection.
 *
 * @param mysqli
 * @return int
 **/
function mysqli_warning_count($link) {}

/**
 * Get the number of affected rows by the last INSERT, UPDATE, REPLACE or
 * DELETE query associated with link_identifier.
 *
 * @param resource
 * @return int
 **/
function mysql_affected_rows($link_identifier) {}

/**
 * mysql_change_user changes the logged in user of the current active
 * connection, or the connection given by the optional link_identifier
 * parameter. If a database is specified, this will be the current
 * database after the user has been changed. If the new user and password
 * authorization fails, the current connected user stays active.
 * 
 * This function is deprecated and no longer exists in PHP.
 *
 * @param string
 * @param string
 * @param string
 * @param resource
 * @return int
 **/
function mysql_change_user($user, $password, $database, $link_identifier) {}

/**
 * Retrieves the character_set variable from MySQL.
 *
 * @param resource
 * @return string
 **/
function mysql_client_encoding($link_identifier) {}

/**
 * mysql_close closes the non-persistent connection to the MySQL server
 * that's associated with the specified link identifier. If
 * link_identifier isn't specified, the last opened link is used.
 * 
 * Using mysql_close isn't usually necessary, as non-persistent open
 * links are automatically closed at the end of the script's execution.
 * See also freeing resources.
 *
 * @param resource
 * @return bool
 **/
function mysql_close($link_identifier) {}

/**
 * Opens or reuses a connection to a MySQL server.
 *
 * @param string
 * @param string
 * @param string
 * @param bool
 * @param int
 * @return resource
 **/
function mysql_connect($server, $username, $password, $new_link, $client_flags) {}

/**
 * mysql_create_db attempts to create a new database on the server
 * associated with the specified link identifier.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function mysql_create_db($database_name, $link_identifier) {}

/**
 * mysql_data_seek moves the internal row pointer of the MySQL result
 * associated with the specified result identifier to point to the
 * specified row number. The next call to a MySQL fetch function, such as
 * mysql_fetch_assoc, would return that row.
 * 
 * row_number starts at 0. The row_number should be a value in the range
 * from 0 to mysql_num_rows - 1. However if the result set is empty
 * (mysql_num_rows == 0), a seek to 0 will fail with a E_WARNING and
 * mysql_data_seek will return .
 *
 * @param resource
 * @param int
 * @return bool
 **/
function mysql_data_seek($result, $row_number) {}

/**
 * Retrieve the database name from a call to mysql_list_dbs.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function mysql_db_name($result, $row, $field) {}

/**
 * mysql_db_query selects a database, and executes a query on it.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function mysql_db_query($database, $query, $link_identifier) {}

/**
 * mysql_drop_db attempts to drop (remove) an entire database from the
 * server associated with the specified link identifier. This function is
 * deprecated, it is preferable to use mysql_query to issue a sql DROP
 * DATABASE statement instead.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function mysql_drop_db($database_name, $link_identifier) {}

/**
 * Returns the error number from the last MySQL function.
 * 
 * Errors coming back from the MySQL database backend no longer issue
 * warnings. Instead, use mysql_errno to retrieve the error code. Note
 * that this function only returns the error code from the most recently
 * executed MySQL function (not including mysql_error and mysql_errno),
 * so if you want to use it, make sure you check the value before calling
 * another MySQL function.
 *
 * @param resource
 * @return int
 **/
function mysql_errno($link_identifier) {}

/**
 * Returns the error text from the last MySQL function. Errors coming
 * back from the MySQL database backend no longer issue warnings.
 * Instead, use mysql_error to retrieve the error text. Note that this
 * function only returns the error text from the most recently executed
 * MySQL function (not including mysql_error and mysql_errno), so if you
 * want to use it, make sure you check the value before calling another
 * MySQL function.
 *
 * @param resource
 * @return string
 **/
function mysql_error($link_identifier) {}

/**
 * This function will escape the unescaped_string, so that it is safe to
 * place it in a mysql_query. This function is deprecated.
 * 
 * This function is identical to mysql_real_escape_string except that
 * mysql_real_escape_string takes a connection handler and escapes the
 * string according to the current character set. mysql_escape_string
 * does not take a connection argument and does not respect the current
 * charset setting.
 *
 * @param string
 * @return string
 **/
function mysql_escape_string($unescaped_string) {}

/**
 * Returns an array that corresponds to the fetched row and moves the
 * internal data pointer ahead.
 *
 * @param resource
 * @param int
 * @return array
 **/
function mysql_fetch_array($result, $result_type) {}

/**
 * Returns an associative array that corresponds to the fetched row and
 * moves the internal data pointer ahead. mysql_fetch_assoc is equivalent
 * to calling mysql_fetch_array with MYSQL_ASSOC for the optional second
 * parameter. It only returns an associative array.
 *
 * @param resource
 * @return array
 **/
function mysql_fetch_assoc($result) {}

/**
 * Returns an object containing field information. This function can be
 * used to obtain information about fields in the provided query result.
 *
 * @param resource
 * @param int
 * @return object
 **/
function mysql_fetch_field($result, $field_offset) {}

/**
 * Returns an array that corresponds to the lengths of each field in the
 * last row fetched by MySQL.
 * 
 * mysql_fetch_lengths stores the lengths of each result column in the
 * last row returned by mysql_fetch_row, mysql_fetch_assoc,
 * mysql_fetch_array, and mysql_fetch_object in an array, starting at
 * offset 0.
 *
 * @param resource
 * @return array
 **/
function mysql_fetch_lengths($result) {}

/**
 * Returns an object with properties that correspond to the fetched row
 * and moves the internal data pointer ahead.
 *
 * @param resource
 * @param string
 * @param array
 * @return object
 **/
function mysql_fetch_object($result, $class_name, $params) {}

/**
 * Returns a numerical array that corresponds to the fetched row and
 * moves the internal data pointer ahead.
 *
 * @param resource
 * @return array
 **/
function mysql_fetch_row($result) {}

/**
 * mysql_field_flags returns the field flags of the specified field. The
 * flags are reported as a single word per flag separated by a single
 * space, so that you can split the returned value using explode.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mysql_field_flags($result, $field_offset) {}

/**
 * mysql_field_len returns the length of the specified field.
 *
 * @param resource
 * @param int
 * @return int
 **/
function mysql_field_len($result, $field_offset) {}

/**
 * mysql_field_name returns the name of the specified field index.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mysql_field_name($result, $field_offset) {}

/**
 * Seeks to the specified field offset. If the next call to
 * mysql_fetch_field doesn't include a field offset, the field offset
 * specified in mysql_field_seek will be returned.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function mysql_field_seek($result, $field_offset) {}

/**
 * Returns the name of the table that the specified field is in.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mysql_field_table($result, $field_offset) {}

/**
 * mysql_field_type is similar to the mysql_field_name function. The
 * arguments are identical, but the field type is returned instead.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mysql_field_type($result, $field_offset) {}

/**
 * mysql_free_result will free all memory associated with the result
 * identifier result.
 * 
 * mysql_free_result only needs to be called if you are concerned about
 * how much memory is being used for queries that return large result
 * sets. All associated result memory is automatically freed at the end
 * of the script's execution.
 *
 * @param resource
 * @return bool
 **/
function mysql_free_result($result) {}

/**
 * mysql_get_client_info returns a string that represents the client
 * library version.
 *
 * @return string
 **/
function mysql_get_client_info() {}

/**
 * Describes the type of connection in use for the connection, including
 * the server host name.
 *
 * @param resource
 * @return string
 **/
function mysql_get_host_info($link_identifier) {}

/**
 * Retrieves the MySQL protocol.
 *
 * @param resource
 * @return int
 **/
function mysql_get_proto_info($link_identifier) {}

/**
 * Retrieves the MySQL server version.
 *
 * @param resource
 * @return string
 **/
function mysql_get_server_info($link_identifier) {}

/**
 * Returns detailed information about the last query.
 *
 * @param resource
 * @return string
 **/
function mysql_info($link_identifier) {}

/**
 * Retrieves the ID generated for an AUTO_INCREMENT column by the
 * previous INSERT query.
 *
 * @param resource
 * @return int
 **/
function mysql_insert_id($link_identifier) {}

/**
 * Returns a result pointer containing the databases available from the
 * current mysql daemon.
 *
 * @param resource
 * @return resource
 **/
function mysql_list_dbs($link_identifier) {}

/**
 * Retrieves information about the given table name.
 * 
 * This function is deprecated. It is preferable to use mysql_query to
 * issue a SQL SHOW COLUMNS FROM table [LIKE 'name'] statement instead.
 *
 * @param string
 * @param string
 * @param resource
 * @return resource
 **/
function mysql_list_fields($database_name, $table_name, $link_identifier) {}

/**
 * Retrieves the current MySQL server threads.
 *
 * @param resource
 * @return resource
 **/
function mysql_list_processes($link_identifier) {}

/**
 * Retrieves a list of table names from a MySQL database.
 * 
 * This function is deprecated. It is preferable to use mysql_query to
 * issue a SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement
 * instead.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function mysql_list_tables($database, $link_identifier) {}

/**
 * Retrieves the number of fields from a query.
 *
 * @param resource
 * @return int
 **/
function mysql_num_fields($result) {}

/**
 * Retrieves the number of rows from a result set. This command is only
 * valid for statements like SELECT or SHOW that return an actual result
 * set. To retrieve the number of rows affected by a INSERT, UPDATE,
 * REPLACE or DELETE query, use mysql_affected_rows.
 *
 * @param resource
 * @return int
 **/
function mysql_num_rows($result) {}

/**
 * Establishes a persistent connection to a MySQL server.
 * 
 * mysql_pconnect acts very much like mysql_connect with two major
 * differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use (mysql_close will not close links established by
 * mysql_pconnect).
 * 
 * This type of link is therefore called 'persistent'.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function mysql_pconnect($server, $username, $password, $client_flags) {}

/**
 * Checks whether or not the connection to the server is working. If it
 * has gone down, an automatic reconnection is attempted. This function
 * can be used by scripts that remain idle for a long while, to check
 * whether or not the server has closed the connection and reconnect if
 * necessary.
 *
 * @param resource
 * @return bool
 **/
function mysql_ping($link_identifier) {}

/**
 * mysql_query sends a unique query (multiple queries are not supported)
 * to the currently active database on the server that's associated with
 * the specified link_identifier.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function mysql_query($query, $link_identifier) {}

/**
 * Escapes special characters in the unescaped_string, taking into
 * account the current character set of the connection so that it is safe
 * to place it in a mysql_query. If binary data is to be inserted, this
 * function must be used.
 * 
 * mysql_real_escape_string calls MySQL's library function
 * mysql_real_escape_string, which prepends backslashes to the following
 * characters: \x00, \n, \r, \, ', " and \x1a.
 * 
 * This function must always (with few exceptions) be used to make data
 * safe before sending a query to MySQL.
 *
 * @param string
 * @param resource
 * @return string
 **/
function mysql_real_escape_string($unescaped_string, $link_identifier) {}

/**
 * Retrieves the contents of one cell from a MySQL result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they're MUCH quicker than mysql_result. Also, note that specifying a
 * numeric offset for the field argument is much quicker than specifying
 * a fieldname or tablename.fieldname argument.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function mysql_result($result, $row, $field) {}

/**
 * Sets the current active database on the server that's associated with
 * the specified link identifier. Every subsequent call to mysql_query
 * will be made on the active database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function mysql_select_db($database_name, $link_identifier) {}

/**
 * Sets the default character set for the current connection.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function mysql_set_charset($charset, $link_identifier) {}

/**
 * mysql_stat returns the current server status.
 *
 * @param resource
 * @return string
 **/
function mysql_stat($link_identifier) {}

/**
 * Retrieves the table name from a result.
 * 
 * This function deprecated. It is preferable to use mysql_query to issue
 * a SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement instead.
 *
 * @param resource
 * @param int
 * @return string
 **/
function mysql_tablename($result, $i) {}

/**
 * Retrieves the current thread ID. If the connection is lost, and a
 * reconnect with mysql_ping is executed, the thread ID will change. This
 * means only retrieve the thread ID when needed.
 *
 * @param resource
 * @return int
 **/
function mysql_thread_id($link_identifier) {}

/**
 * mysql_unbuffered_query sends the SQL query query to MySQL without
 * automatically fetching and buffering the result rows as mysql_query
 * does. This saves a considerable amount of memory with SQL queries that
 * produce large result sets, and you can start working on the result set
 * immediately after the first row has been retrieved as you don't have
 * to wait until the complete SQL query has been performed. To use
 * mysql_unbuffered_query while multiple database connections are open,
 * you must specify the optional parameter link_identifier to identify
 * which connection you want to use.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function mysql_unbuffered_query($query, $link_identifier) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_checkstatus($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_completeauthorizations($conn, &$array) {}

/**
 * @param resource
 * @return int
 **/
function m_connect($conn) {}

/**
 * @param resource
 * @return string
 **/
function m_connectionerror($conn) {}

/**
 * @param resource
 * @param int
 * @return bool
 **/
function m_deletetrans($conn, $identifier) {}

/**
 * @param resource
 * @return bool
 **/
function m_destroyconn($conn) {}

/**
 * @return void
 **/
function m_destroyengine() {}

/**
 * @param resource
 * @param int
 * @param string
 * @param int
 * @return string
 **/
function m_getcell($conn, $identifier, $column, $row) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function m_getcellbynum($conn, $identifier, $column, $row) {}

/**
 * @param resource
 * @param int
 * @return string
 **/
function m_getcommadelimited($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function m_getheader($conn, $identifier, $column_num) {}

/**
 * @return resource
 **/
function m_initconn() {}

/**
 * @param string
 * @return int
 **/
function m_initengine($location) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_iscommadelimited($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @return bool
 **/
function m_maxconntimeout($conn, $secs) {}

/**
 * @param resource
 * @return int
 **/
function m_monitor($conn) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_numcolumns($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_numrows($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_parsecommadelimited($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @return array
 **/
function m_responsekeys($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function m_responseparam($conn, $identifier, $key) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_returnstatus($conn, $identifier) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_setblocking($conn, $tf) {}

/**
 * @param resource
 * @param string
 * @return int
 **/
function m_setdropfile($conn, $directory) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function m_setip($conn, $host, $port) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function m_setssl($conn, $host, $port) {}

/**
 * @param resource
 * @param string
 * @return int
 **/
function m_setssl_cafile($conn, $cafile) {}

/**
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function m_setssl_files($conn, $sslkeyfile, $sslcertfile) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_settimeout($conn, $seconds) {}

/**
 * @param string
 * @return string
 **/
function m_sslcert_gen_hash($filename) {}

/**
 * @param resource
 * @return int
 **/
function m_transactionssent($conn) {}

/**
 * @param resource
 * @return int
 **/
function m_transinqueue($conn) {}

/**
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function m_transkeyval($conn, $identifier, $key, $value) {}

/**
 * @param resource
 * @return int
 **/
function m_transnew($conn) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_transsend($conn, $identifier) {}

/**
 * @param int
 * @return int
 **/
function m_uwait($microsecs) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function m_validateidentifier($conn, $tf) {}

/**
 * @param resource
 * @param int
 * @return bool
 **/
function m_verifyconnection($conn, $tf) {}

/**
 * @param resource
 * @param int
 * @return bool
 **/
function m_verifysslcert($conn, $tf) {}

/**
 * natcasesort is a case insensitive version of natsort.
 * 
 * This function implements a sort algorithm that orders alphanumeric
 * strings in the way a human being would while maintaining key/value
 * associations. This is described as a "natural ordering".
 *
 * @param array
 * @return bool
 **/
function natcasesort(&$array) {}

/**
 * This function implements a sort algorithm that orders alphanumeric
 * strings in the way a human being would while maintaining key/value
 * associations. This is described as a "natural ordering". An example of
 * the difference between this algorithm and the regular computer string
 * sorting algorithms (used in sort) can be seen in the example below.
 *
 * @param array
 * @return bool
 **/
function natsort(&$array) {}

/**
 * @param int
 * @return int
 **/
function ncurses_addch($ch) {}

/**
 * @param string
 * @param int
 * @return int
 **/
function ncurses_addchnstr($s, $n) {}

/**
 * @param string
 * @return int
 **/
function ncurses_addchstr($s) {}

/**
 * @param string
 * @param int
 * @return int
 **/
function ncurses_addnstr($s, $n) {}

/**
 * @param string
 * @return int
 **/
function ncurses_addstr($text) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_assume_default_colors($fg, $bg) {}

/**
 * @param int
 * @return int
 **/
function ncurses_attroff($attributes) {}

/**
 * @param int
 * @return int
 **/
function ncurses_attron($attributes) {}

/**
 * @param int
 * @return int
 **/
function ncurses_attrset($attributes) {}

/**
 * @return int
 **/
function ncurses_baudrate() {}

/**
 * ncurses_beep sends an audible alert (bell) and if its not possible
 * flashes the screen.
 *
 * @return int
 **/
function ncurses_beep() {}

/**
 * @param int
 * @return int
 **/
function ncurses_bkgd($attrchar) {}

/**
 * @param int
 * @return void
 **/
function ncurses_bkgdset($attrchar) {}

/**
 * Draws the specified lines and corners around the main window.
 * 
 * Use ncurses_wborder for borders around subwindows!
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_border($left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_bottom_panel($panel) {}

/**
 * Checks whether the terminal has color capabilities and whether the
 * programmer can change color definitions using ncurses_init_color.
 * ncurses must be initialized using ncurses_init before calling this
 * function.
 *
 * @return bool
 **/
function ncurses_can_change_color() {}

/**
 * Disables line buffering and character processing (interrupt and flow
 * control characters are unaffected), making characters typed by the
 * user immediately available to the program.
 *
 * @return bool
 **/
function ncurses_cbreak() {}

/**
 * Clears the screen completely without setting blanks.
 * 
 * Note: ncurses_clear clears the screen without setting blanks, which
 * have the current background rendition. To clear screen with blanks,
 * use ncurses_erase.
 *
 * @return bool
 **/
function ncurses_clear() {}

/**
 * Erases all lines from cursor to end of screen and creates blanks.
 * Blanks created by ncurses_clrtobot have the current background
 * rendition.
 *
 * @return bool
 **/
function ncurses_clrtobot() {}

/**
 * Erases the current line from cursor position to the end. Blanks
 * created by ncurses_clrtoeol have the current background rendition.
 *
 * @return bool
 **/
function ncurses_clrtoeol() {}

/**
 * Retrieves the red, green, and blue components for the given color
 * definition. Terminal color capabilities must be initialized with
 * ncurses_start_color prior to calling this function.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_color_content($color, &$r, &$g, &$b) {}

/**
 * Sets the active foreground and background colors. Any characters
 * written after this function is invoked will have these colors. This
 * function requires terminal colors to be supported and initialized
 * using ncurses_start_color beforehand.
 * 
 * ncurses uses color pairs to specify both foreground and background
 * colors. Use ncurses_init_pair to define a color pair.
 *
 * @param int
 * @return int
 **/
function ncurses_color_set($pair) {}

/**
 * @param int
 * @return int
 **/
function ncurses_curs_set($visibility) {}

/**
 * @param string
 * @param int
 * @return int
 **/
function ncurses_define_key($definition, $keycode) {}

/**
 * Saves the current terminal modes for program (in curses) for use by
 * ncurses_reset_prog_mode.
 *
 * @return bool
 **/
function ncurses_def_prog_mode() {}

/**
 * Saves the current terminal modes for shell (not in curses) for use by
 * ncurses_reset_shell_mode.
 *
 * @return bool
 **/
function ncurses_def_shell_mode() {}

/**
 * @param int
 * @return int
 **/
function ncurses_delay_output($milliseconds) {}

/**
 * Deletes the character under the cursor. All characters to the right of
 * the cursor on the same line are moved to the left one position and the
 * last character on the line is filled with a blank. The cursor position
 * does not change.
 *
 * @return bool
 **/
function ncurses_delch() {}

/**
 * Deletes the current line under cursorposition. All lines below the
 * current line are moved up one line. The bottom line of window is
 * cleared. Cursor position does not change.
 *
 * @return bool
 **/
function ncurses_deleteln() {}

/**
 * @param resource
 * @return bool
 **/
function ncurses_delwin($window) {}

/**
 * @param resource
 * @return bool
 **/
function ncurses_del_panel($panel) {}

/**
 * Compares the virtual screen to the physical screen and updates the
 * physical screen. This way is more effective than using multiple
 * refresh calls.
 *
 * @return bool
 **/
function ncurses_doupdate() {}

/**
 * Enables echo mode. All characters typed by user are echoed by
 * ncurses_getch.
 *
 * @return bool
 **/
function ncurses_echo() {}

/**
 * @param int
 * @return int
 **/
function ncurses_echochar($character) {}

/**
 * @return int
 **/
function ncurses_end() {}

/**
 * Fills the terminal screen with blanks.
 * 
 * Created blanks have the current background rendition, set by
 * ncurses_bkgd.
 *
 * @return bool
 **/
function ncurses_erase() {}

/**
 * Returns the current erase character.
 *
 * @return string
 **/
function ncurses_erasechar() {}

/**
 * @return void
 **/
function ncurses_filter() {}

/**
 * Flashes the screen, and if its not possible, sends an audible alert
 * (bell).
 *
 * @return bool
 **/
function ncurses_flash() {}

/**
 * Throws away any typeahead that has been typed and has not yet been
 * read by your program.
 *
 * @return bool
 **/
function ncurses_flushinp() {}

/**
 * @return int
 **/
function ncurses_getch() {}

/**
 * Gets the horizontal and vertical size of the given window into the
 * given variables.
 * 
 * Variables must be passed as reference, so they are updated when the
 * user changes the terminal size.
 *
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function ncurses_getmaxyx($window, &$y, &$x) {}

/**
 * ncurses_getmouse reads mouse event out of queue.
 *
 * @param array
 * @return bool
 **/
function ncurses_getmouse(&$mevent) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function ncurses_getyx($window, &$y, &$x) {}

/**
 * @param int
 * @return int
 **/
function ncurses_halfdelay($tenth) {}

/**
 * Checks whether the terminal has color capabilities. This function can
 * be used to write terminal-independent programs. ncurses must be
 * initialized using ncurses_init before calling this function.
 *
 * @return bool
 **/
function ncurses_has_colors() {}

/**
 * Checks whether the terminal has insert and delete capabilities.
 *
 * @return bool
 **/
function ncurses_has_ic() {}

/**
 * Checks whether the terminal has insert- and delete-line-capabilities.
 *
 * @return bool
 **/
function ncurses_has_il() {}

/**
 * @param int
 * @return int
 **/
function ncurses_has_key($keycode) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_hide_panel($panel) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_hline($charattr, $n) {}

/**
 * Returns the character from the current position.
 *
 * @return string
 **/
function ncurses_inch() {}

/**
 * Initializes the ncurses interface. This function must be used before
 * any other ncurses function call.
 * 
 * Note that ncurses_end must be called before exiting from the program,
 * or the terminal will not be restored to its proper non-visual mode.
 *
 * @return void
 **/
function ncurses_init() {}

/**
 * Defines or redefines the given color. When this function is called,
 * all occurrences of the given color on the screen, if any, immediately
 * change to the new definition.
 * 
 * Color capabilities must be supported by the terminal and initialized
 * using ncurses_start_color prior to calling this function. In addition,
 * the terminal must have color changing capabilities; use
 * ncurses_can_change_color to check for this.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_init_color($color, $r, $g, $b) {}

/**
 * Defines or redefines the given color pair to have the given foreground
 * and background colors. If the color pair was previously initialized,
 * the screen is refreshed and all occurrences of it are changed to
 * reflect the new definition.
 * 
 * Color capabilities must be initialized using ncurses_start_color
 * before calling this function. The first color pair (color pair 0) is
 * assumed to be white on black by default, but can be changed using
 * ncurses_assume_default_colors.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_init_pair($pair, $fg, $bg) {}

/**
 * @param int
 * @return int
 **/
function ncurses_insch($character) {}

/**
 * @param int
 * @return int
 **/
function ncurses_insdelln($count) {}

/**
 * Inserts a new line above the current line. The bottom line will be
 * lost.
 *
 * @return int
 **/
function ncurses_insertln() {}

/**
 * @param string
 * @return int
 **/
function ncurses_insstr($text) {}

/**
 * Reads a string from the terminal screen and returns the number of
 * characters read from the current character position until end of line.
 *
 * @param string
 * @return int
 **/
function ncurses_instr(&$buffer) {}

/**
 * Checks if ncurses is in endwin mode.
 *
 * @return bool
 **/
function ncurses_isendwin() {}

/**
 * @param int
 * @param bool
 * @return int
 **/
function ncurses_keyok($keycode, $enable) {}

/**
 * @param resource
 * @param bool
 * @return int
 **/
function ncurses_keypad($window, $bf) {}

/**
 * Returns the current line kill character.
 *
 * @return string
 **/
function ncurses_killchar() {}

/**
 * Returns a verbose description of the terminal.
 *
 * @return string
 **/
function ncurses_longname() {}

/**
 * @param resource
 * @param bool
 * @return int
 **/
function ncurses_meta($window, $_8bit) {}

/**
 * @param int
 * @return int
 **/
function ncurses_mouseinterval($milliseconds) {}

/**
 * Sets mouse events to be reported. By default no mouse events will be
 * reported.
 * 
 * Mouse events are represented by NCURSES_KEY_MOUSE in the
 * ncurses_wgetch input stream. To read the event data and pop the event
 * of queue, call ncurses_getmouse.
 *
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mousemask($newmask, &$oldmask) {}

/**
 * @param int
 * @param int
 * @param bool
 * @return bool
 **/
function ncurses_mouse_trafo(&$y, &$x, $toscreen) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_move($y, $x) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function ncurses_move_panel($panel, $startx, $starty) {}

/**
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvaddch($y, $x, $c) {}

/**
 * @param int
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function ncurses_mvaddchnstr($y, $x, $s, $n) {}

/**
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function ncurses_mvaddchstr($y, $x, $s) {}

/**
 * @param int
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function ncurses_mvaddnstr($y, $x, $s, $n) {}

/**
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function ncurses_mvaddstr($y, $x, $s) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvcur($old_y, $old_x, $new_y, $new_x) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvdelch($y, $x) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvgetch($y, $x) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvhline($y, $x, $attrchar, $n) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvinch($y, $x) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_mvvline($y, $x, $attrchar, $n) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function ncurses_mvwaddstr($window, $y, $x, $text) {}

/**
 * @param int
 * @return int
 **/
function ncurses_napms($milliseconds) {}

/**
 * @param int
 * @param int
 * @return resource
 **/
function ncurses_newpad($rows, $cols) {}

/**
 * Creates a new window to draw elements in.
 * 
 * When creating additional windows, remember to use ncurses_getmaxyx to
 * check for available space, as terminal size is individual and may
 * vary.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function ncurses_newwin($rows, $cols, $y, $x) {}

/**
 * @param resource
 * @return resource
 **/
function ncurses_new_panel($window) {}

/**
 * @return bool
 **/
function ncurses_nl() {}

/**
 * Returns terminal to normal (cooked) mode. Initially the terminal may
 * or may not in cbreak mode as the mode is inherited. Therefore a
 * program should call ncurses_cbreak and ncurses_nocbreak explicitly.
 *
 * @return bool
 **/
function ncurses_nocbreak() {}

/**
 * Prevents echoing of user typed characters.
 *
 * @return bool
 **/
function ncurses_noecho() {}

/**
 * @return bool
 **/
function ncurses_nonl() {}

/**
 * @return void
 **/
function ncurses_noqiflush() {}

/**
 * Switches the terminal out of raw mode. Raw mode is similar to cbreak
 * mode, in that characters typed are immediately passed through to the
 * user program. The differences that are that in raw mode, the
 * interrupt, quit, suspend and flow control characters are all passed
 * through uninterpreted, instead of generating a signal.
 *
 * @return bool
 **/
function ncurses_noraw() {}

/**
 * Retrieves the foreground and background colors that constitute the
 * given color pair. Terminal color capabilities must be initialized with
 * ncurses_start_color prior to calling this function.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_pair_content($pair, &$f, &$b) {}

/**
 * @param resource
 * @return resource
 **/
function ncurses_panel_above($panel) {}

/**
 * @param resource
 * @return resource
 **/
function ncurses_panel_below($panel) {}

/**
 * @param resource
 * @return resource
 **/
function ncurses_panel_window($panel) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_pnoutrefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_prefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol) {}

/**
 * @param string
 * @return int
 **/
function ncurses_putp($text) {}

/**
 * @return void
 **/
function ncurses_qiflush() {}

/**
 * Places the terminal in raw mode. Raw mode is similar to cbreak mode,
 * in that characters typed are immediately passed through to the user
 * program. The differences that are that in raw mode, the interrupt,
 * quit, suspend and flow control characters are all passed through
 * uninterpreted, instead of generating a signal.
 *
 * @return bool
 **/
function ncurses_raw() {}

/**
 * @param int
 * @return int
 **/
function ncurses_refresh($ch) {}

/**
 * @param resource
 * @param resource
 * @return int
 **/
function ncurses_replace_panel($panel, $window) {}

/**
 * Restores the terminal state, which was previously saved by calling
 * ncurses_savetty.
 *
 * @return bool
 **/
function ncurses_resetty() {}

/**
 * @return int
 **/
function ncurses_reset_prog_mode() {}

/**
 * @return int
 **/
function ncurses_reset_shell_mode() {}

/**
 * Saves the current terminal state. The saved terminal state can be
 * restored with ncurses_resetty.
 *
 * @return bool
 **/
function ncurses_savetty() {}

/**
 * @param int
 * @return int
 **/
function ncurses_scrl($count) {}

/**
 * @param string
 * @return int
 **/
function ncurses_scr_dump($filename) {}

/**
 * @param string
 * @return int
 **/
function ncurses_scr_init($filename) {}

/**
 * @param string
 * @return int
 **/
function ncurses_scr_restore($filename) {}

/**
 * @param string
 * @return int
 **/
function ncurses_scr_set($filename) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_show_panel($panel) {}

/**
 * Returns the current soft label key attribute.
 *
 * @return int
 **/
function ncurses_slk_attr() {}

/**
 * @param int
 * @return int
 **/
function ncurses_slk_attroff($intarg) {}

/**
 * @param int
 * @return int
 **/
function ncurses_slk_attron($intarg) {}

/**
 * @param int
 * @return int
 **/
function ncurses_slk_attrset($intarg) {}

/**
 * The function ncurses_slk_clear clears soft label keys from screen.
 *
 * @return bool
 **/
function ncurses_slk_clear() {}

/**
 * @param int
 * @return int
 **/
function ncurses_slk_color($intarg) {}

/**
 * Initializes soft label key functions
 * 
 * This function must be called before ncurses_init or ncurses_newwin is
 * called.
 *
 * @param int
 * @return bool
 **/
function ncurses_slk_init($format) {}

/**
 * @return bool
 **/
function ncurses_slk_noutrefresh() {}

/**
 * Copies soft label keys from virtual screen to physical screen.
 *
 * @return int
 **/
function ncurses_slk_refresh() {}

/**
 * Restores the soft label keys after ncurses_slk_clear has been
 * performed.
 *
 * @return int
 **/
function ncurses_slk_restore() {}

/**
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function ncurses_slk_set($labelnr, $label, $format) {}

/**
 * Forces all the soft labels to be output the next time a
 * ncurses_slk_noutrefresh is performed.
 *
 * @return int
 **/
function ncurses_slk_touch() {}

/**
 * @return int
 **/
function ncurses_standend() {}

/**
 * @return int
 **/
function ncurses_standout() {}

/**
 * Initializes color functionality in ncurses. This function must be
 * called before any color manipulation functions are called and after
 * ncurses_init is called. It is good practice to call this function
 * right after ncurses_init.
 *
 * @return int
 **/
function ncurses_start_color() {}

/**
 * @return bool
 **/
function ncurses_termattrs() {}

/**
 * Returns terminals shortname.
 *
 * @return string
 **/
function ncurses_termname() {}

/**
 * @param int
 * @return void
 **/
function ncurses_timeout($millisec) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_top_panel($panel) {}

/**
 * @param int
 * @return int
 **/
function ncurses_typeahead($fd) {}

/**
 * @param int
 * @return int
 **/
function ncurses_ungetch($keycode) {}

/**
 * Pushes a KEY_MOUSE event onto the unput queue and associates with this
 * event the given state sata and screen-relative character cell
 * coordinates, specified in mevent.
 *
 * @param array
 * @return bool
 **/
function ncurses_ungetmouse($mevent) {}

/**
 * @return void
 **/
function ncurses_update_panels() {}

/**
 * @return bool
 **/
function ncurses_use_default_colors() {}

/**
 * @param bool
 * @return void
 **/
function ncurses_use_env($flag) {}

/**
 * @param bool
 * @return int
 **/
function ncurses_use_extended_names($flag) {}

/**
 * @param int
 * @return int
 **/
function ncurses_vidattr($intarg) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function ncurses_vline($charattr, $n) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function ncurses_waddch($window, $ch) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function ncurses_waddstr($window, $str, $n) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function ncurses_wattroff($window, $attrs) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function ncurses_wattron($window, $attrs) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function ncurses_wattrset($window, $attrs) {}

/**
 * Draws the specified lines and corners around the passed window.
 * 
 * Use ncurses_border for borders around the main window.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ncurses_wborder($window, $left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_wclear($window) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function ncurses_wcolor_set($window, $color_pair) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_werase($window) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_wgetch($window) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function ncurses_whline($window, $charattr, $n) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param bool
 * @return bool
 **/
function ncurses_wmouse_trafo($window, &$y, &$x, $toscreen) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function ncurses_wmove($window, $y, $x) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_wnoutrefresh($window) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_wrefresh($window) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_wstandend($window) {}

/**
 * @param resource
 * @return int
 **/
function ncurses_wstandout($window) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function ncurses_wvline($window, $charattr, $n) {}

/**
 * This function sends a beep to the terminal.
 *
 * @return void
 **/
function newt_bell() {}

/**
 * Creates a new button.
 *
 * @param int
 * @param int
 * @param string
 * @return resource
 **/
function newt_button($left, $top, $text) {}

/**
 * This function returns a grid containing the buttons created.
 *
 * @param array
 * @return resource
 **/
function newt_button_bar(&$buttons) {}

/**
 * Open a centered window of the specified size.
 *
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function newt_centered_window($width, $height, $title) {}

/**
 * @param int
 * @param int
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function newt_checkbox($left, $top, $text, $def_value, $seq) {}

/**
 * This function returns the character in the sequence which indicates
 * the current value of the checkbox.
 *
 * @param resource
 * @return string
 **/
function newt_checkbox_get_value($checkbox) {}

/**
 * This function allows to set various flags on checkbox resource.
 *
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function newt_checkbox_set_flags($checkbox, $flags, $sense) {}

/**
 * This function allows to set the current value of the checkbox
 * resource.
 *
 * @param resource
 * @param string
 * @return void
 **/
function newt_checkbox_set_value($checkbox, $value) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function newt_checkbox_tree($left, $top, $height, $flags) {}

/**
 * This function allows to add new item to the checkbox tree.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @param int
 * @return void
 **/
function newt_checkbox_tree_add_item($checkboxtree, $text, $data, $flags, $index) {}

/**
 * Finds an item in the checkbox tree by item's data.
 *
 * @param resource
 * @param mixed
 * @return array
 **/
function newt_checkbox_tree_find_item($checkboxtree, $data) {}

/**
 * This method returns checkbox tree selected tem.
 *
 * @param resource
 * @return mixed
 **/
function newt_checkbox_tree_get_current($checkboxtree) {}

/**
 * @param resource
 * @param mixed
 * @return string
 **/
function newt_checkbox_tree_get_entry_value($checkboxtree, $data) {}

/**
 * @param resource
 * @param string
 * @return array
 **/
function newt_checkbox_tree_get_multi_selection($checkboxtree, $seqnum) {}

/**
 * @param resource
 * @return array
 **/
function newt_checkbox_tree_get_selection($checkboxtree) {}

/**
 * @param int
 * @param int
 * @param int
 * @param string
 * @param int
 * @return resource
 **/
function newt_checkbox_tree_multi($left, $top, $height, $seq, $flags) {}

/**
 * @param resource
 * @param mixed
 * @return void
 **/
function newt_checkbox_tree_set_current($checkboxtree, $data) {}

/**
 * @param resource
 * @param mixed
 * @param string
 * @return void
 **/
function newt_checkbox_tree_set_entry($checkboxtree, $data, $text) {}

/**
 * @param resource
 * @param mixed
 * @param string
 * @return void
 **/
function newt_checkbox_tree_set_entry_value($checkboxtree, $data, $value) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_checkbox_tree_set_width($checkbox_tree, $width) {}

/**
 * Discards the contents of the terminal's input buffer without waiting
 * for additional input.
 *
 * @return void
 **/
function newt_clear_key_buffer() {}

/**
 * @return void
 **/
function newt_cls() {}

/**
 * @param int
 * @param int
 * @param string
 * @return resource
 **/
function newt_compact_button($left, $top, $text) {}

/**
 * @param resource
 * @param mixed
 * @param mixed
 * @return void
 **/
function newt_component_add_callback($component, $func_name, $data) {}

/**
 * @param resource
 * @param bool
 * @return void
 **/
function newt_component_takes_focus($component, $takes_focus) {}

/**
 * @param int
 * @param int
 * @return resource
 **/
function newt_create_grid($cols, $rows) {}

/**
 * @return void
 **/
function newt_cursor_off() {}

/**
 * @return void
 **/
function newt_cursor_on() {}

/**
 * @param int
 * @return void
 **/
function newt_delay($microseconds) {}

/**
 * @param resource
 * @return void
 **/
function newt_draw_form($form) {}

/**
 * Displays the string text at the position indicated.
 *
 * @param int
 * @param int
 * @param string
 * @return void
 **/
function newt_draw_root_text($left, $top, $text) {}

/**
 * @param int
 * @param int
 * @param int
 * @param string
 * @param int
 * @return resource
 **/
function newt_entry($left, $top, $width, $init_value, $flags) {}

/**
 * @param resource
 * @return string
 **/
function newt_entry_get_value($entry) {}

/**
 * @param resource
 * @param string
 * @param bool
 * @return void
 **/
function newt_entry_set($entry, $value, $cursor_at_end) {}

/**
 * @param resource
 * @param callback
 * @param mixed
 * @return void
 **/
function newt_entry_set_filter($entry, $filter, $data) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function newt_entry_set_flags($entry, $flags, $sense) {}

/**
 * Uninitializes newt interface. This function be called, when program is
 * ready to exit.
 *
 * @return int
 **/
function newt_finished() {}

/**
 * Create a new form.
 *
 * @param resource
 * @param string
 * @param int
 * @return resource
 **/
function newt_form($vert_bar, $help, $flags) {}

/**
 * Adds a single component to the form.
 *
 * @param resource
 * @param resource
 * @return void
 **/
function newt_form_add_component($form, $component) {}

/**
 * Adds several components to the form.
 *
 * @param resource
 * @param array
 * @return void
 **/
function newt_form_add_components($form, $components) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_form_add_hot_key($form, $key) {}

/**
 * This function frees the memory resources used by the form and all of
 * the components which have been added to the form (including those
 * components which are on subforms). Once a form has been destroyed,
 * none of the form's components can be used.
 *
 * @param resource
 * @return void
 **/
function newt_form_destroy($form) {}

/**
 * @param resource
 * @return resource
 **/
function newt_form_get_current($form) {}

/**
 * This function runs the form passed to it.
 *
 * @param resource
 * @param array
 * @return void
 **/
function newt_form_run($form, &$exit_struct) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_form_set_background($from, $background) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_form_set_height($form, $height) {}

/**
 * @param resource
 * @return void
 **/
function newt_form_set_size($form) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_form_set_timer($form, $milliseconds) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_form_set_width($form, $width) {}

/**
 * @param resource
 * @param resource
 * @param int
 * @return void
 **/
function newt_form_watch_fd($form, $stream, $flags) {}

/**
 * Fills in the passed references with the current size of the terminal.
 *
 * @param int
 * @param int
 * @return void
 **/
function newt_get_screen_size(&$cols, &$rows) {}

/**
 * @param resource
 * @param resource
 * @param bool
 * @return void
 **/
function newt_grid_add_components_to_form($grid, $form, $recurse) {}

/**
 * @param resource
 * @param resource
 * @param resource
 * @return resource
 **/
function newt_grid_basic_window($text, $middle, $buttons) {}

/**
 * @param resource
 * @param bool
 * @return void
 **/
function newt_grid_free($grid, $recurse) {}

/**
 * @param resouce
 * @param int
 * @param int
 * @return void
 **/
function newt_grid_get_size($grid, &$width, &$height) {}

/**
 * @param int
 * @param resource
 * @return resource
 **/
function newt_grid_h_close_stacked($element1_type, $element1) {}

/**
 * @param int
 * @param resource
 * @return resource
 **/
function newt_grid_h_stacked($element1_type, $element1) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function newt_grid_place($grid, $left, $top) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function newt_grid_set_field($grid, $col, $row, $type, $val, $pad_left, $pad_top, $pad_right, $pad_bottom, $anchor, $flags) {}

/**
 * @param resource
 * @param resource
 * @param resource
 * @return resource
 **/
function newt_grid_simple_window($text, $middle, $buttons) {}

/**
 * @param int
 * @param resource
 * @return resource
 **/
function newt_grid_v_close_stacked($element1_type, $element1) {}

/**
 * @param int
 * @param resource
 * @return resource
 **/
function newt_grid_v_stacked($element1_type, $element1) {}

/**
 * @param resource
 * @param string
 * @return void
 **/
function newt_grid_wrapped_window($grid, $title) {}

/**
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return void
 **/
function newt_grid_wrapped_window_at($grid, $title, $left, $top) {}

/**
 * Initializes the newt interface. This function must be called before
 * any other newt function.
 *
 * @return int
 **/
function newt_init() {}

/**
 * @param int
 * @param int
 * @param string
 * @return resource
 **/
function newt_label($left, $top, $text) {}

/**
 * @param resource
 * @param string
 * @return void
 **/
function newt_label_set_text($label, $text) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function newt_listbox($left, $top, $height, $flags) {}

/**
 * @param resource
 * @param string
 * @param mixed
 * @return void
 **/
function newt_listbox_append_entry($listbox, $text, $data) {}

/**
 * @param resource
 * @return void
 **/
function newt_listbox_clear($listobx) {}

/**
 * @param resource
 * @return void
 **/
function newt_listbox_clear_selection($listbox) {}

/**
 * @param resource
 * @param mixed
 * @return void
 **/
function newt_listbox_delete_entry($listbox, $key) {}

/**
 * @param resource
 * @return string
 **/
function newt_listbox_get_current($listbox) {}

/**
 * @param resource
 * @return array
 **/
function newt_listbox_get_selection($listbox) {}

/**
 * @param resource
 * @param string
 * @param mixed
 * @param mixed
 * @return void
 **/
function newt_listbox_insert_entry($listbox, $text, $data, $key) {}

/**
 * @param resource
 * @return int
 **/
function newt_listbox_item_count($listbox) {}

/**
 * @param resource
 * @param mixed
 * @param int
 * @return void
 **/
function newt_listbox_select_item($listbox, $key, $sense) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_listbox_set_current($listbox, $num) {}

/**
 * @param resource
 * @param mixed
 * @return void
 **/
function newt_listbox_set_current_by_key($listbox, $key) {}

/**
 * @param resource
 * @param int
 * @param mixed
 * @return void
 **/
function newt_listbox_set_data($listbox, $num, $data) {}

/**
 * @param resource
 * @param int
 * @param string
 * @return void
 **/
function newt_listbox_set_entry($listbox, $num, $text) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_listbox_set_width($listbox, $width) {}

/**
 * @param int
 * @param int
 * @param string
 * @param bool
 * @param resouce
 * @param mixed
 * @param int
 * @return resource
 **/
function newt_listitem($left, $top, $text, $is_default, $prev_item, $data, $flags) {}

/**
 * @param resource
 * @return mixed
 **/
function newt_listitem_get_data($item) {}

/**
 * @param resource
 * @param string
 * @return void
 **/
function newt_listitem_set($item, $text) {}

/**
 * Open a window of the specified size and position.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function newt_open_window($left, $top, $width, $height, $title) {}

/**
 * Replaces the current help line with the one from the stack.
 *
 * @return void
 **/
function newt_pop_help_line() {}

/**
 * Removes the top window from the display, and redraws the display areas
 * which the window overwrote.
 *
 * @return void
 **/
function newt_pop_window() {}

/**
 * Saves the current help line on a stack, and displays the new line.
 *
 * @param string
 * @return void
 **/
function newt_push_help_line($text) {}

/**
 * @param int
 * @param int
 * @param string
 * @param bool
 * @param resource
 * @return resource
 **/
function newt_radiobutton($left, $top, $text, $is_default, $prev_button) {}

/**
 * @param resource
 * @return resource
 **/
function newt_radio_get_current($set_member) {}

/**
 * @return void
 **/
function newt_redraw_help_line() {}

/**
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function newt_reflow_text($text, $width, $flex_down, $flex_up, &$actual_width, &$actual_height) {}

/**
 * To increase performance, newt only updates the display when it needs
 * to, not when the program tells it to write to the terminal.
 * Applications can force newt to immediately update modified portions of
 * the screen by calling this function.
 *
 * @return void
 **/
function newt_refresh() {}

/**
 * @param bool
 * @return void
 **/
function newt_resize_screen($redraw) {}

/**
 * Resume using the newt interface after calling newt_suspend.
 *
 * @return void
 **/
function newt_resume() {}

/**
 * This function runs the form passed to it.
 *
 * @param resource
 * @return resource
 **/
function newt_run_form($form) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function newt_scale($left, $top, $width, $full_value) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_scale_set($scale, $amount) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function newt_scrollbar_set($scrollbar, $where, $total) {}

/**
 * @param mixed
 * @return void
 **/
function newt_set_help_callback($function) {}

/**
 * Set a callback function which gets invoked when user presses the
 * suspend key (normally ^Z). If no suspend callback is registered, the
 * suspend keystroke is ignored.
 *
 * @param callback
 * @param mixed
 * @return void
 **/
function newt_set_suspend_callback($function, $data) {}

/**
 * Tells newt to return the terminal to its initial state. Once this is
 * done, the application can suspend itself (by sending itself a SIGTSTP,
 * fork a child program, or do whatever else it likes).
 *
 * @return void
 **/
function newt_suspend() {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function newt_textbox($left, $top, $width, $height, $flags) {}

/**
 * @param resource
 * @return int
 **/
function newt_textbox_get_num_lines($textbox) {}

/**
 * @param int
 * @param int
 * @param char
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function newt_textbox_reflowed($left, $top, $text, $width, $flex_down, $flex_up, $flags) {}

/**
 * @param resource
 * @param int
 * @return void
 **/
function newt_textbox_set_height($textbox, $height) {}

/**
 * @param resource
 * @param string
 * @return void
 **/
function newt_textbox_set_text($textbox, $text) {}

/**
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function newt_vertical_scrollbar($left, $top, $height, $normal_colorset, $thumb_colorset) {}

/**
 * This function doesn't return until a key has been pressed. The
 * keystroke is then ignored. If a key is already in the terminal's
 * buffer, this function discards a keystroke and returns immediately.
 *
 * @return void
 **/
function newt_wait_for_key() {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param mixed
 * @return int
 **/
function newt_win_choice($title, $button1_text, $button2_text, $format, $args) {}

/**
 * @param string
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @param array
 * @param string
 * @return int
 **/
function newt_win_entries($title, $text, $suggested_width, $flex_down, $flex_up, $data_width, &$items, $button1) {}

/**
 * @param string
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @param array
 * @param int
 * @param string
 * @return int
 **/
function newt_win_menu($title, $text, $suggestedWidth, $flexDown, $flexUp, $maxListHeight, $items, &$listItem, $button1) {}

/**
 * @param string
 * @param string
 * @param string
 * @param mixed
 * @return void
 **/
function newt_win_message($title, $button_text, $format, $args) {}

/**
 * @param string
 * @param string
 * @param string
 * @param array
 * @return void
 **/
function newt_win_messagev($title, $button_text, $format, $args) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param mixed
 * @return int
 **/
function newt_win_ternary($title, $button1_text, $button2_text, $button3_text, $format, $args) {}

/**
 * next behaves like current, with one difference. It advances the
 * internal array pointer one place forward before returning the element
 * value. That means it returns the next array value and advances the
 * internal array pointer by one.
 *
 * @param array
 * @return mixed
 **/
function next(&$array) {}

/**
 * The plural version of gettext. Some languages have more than one form
 * for plural messages dependent on the count.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function ngettext($msgid1, $msgid2, $n) {}

/**
 * Returns string with 'br /' or 'br' inserted before all newlines.
 *
 * @param string
 * @param bool
 * @return string
 **/
function nl2br($string, $is_xhtml) {}

/**
 * nl_langinfo is used to access individual elements of the locale
 * categories. Unlike localeconv, which returns all of the elements,
 * nl_langinfo allows you to select any specific element.
 *
 * @param int
 * @return string
 **/
function nl_langinfo($item) {}

/**
 * @param string
 * @param string
 * @param int
 * @return array
 **/
function notes_body($server, $mailbox, $msg_number) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function notes_copy_db($from_database_name, $to_database_name) {}

/**
 * @param string
 * @return bool
 **/
function notes_create_db($database_name) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function notes_create_note($database_name, $form_name) {}

/**
 * @param string
 * @return bool
 **/
function notes_drop_db($database_name) {}

/**
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function notes_find_note($database_name, $name, $type) {}

/**
 * @param string
 * @param string
 * @param int
 * @return object
 **/
function notes_header_info($server, $mailbox, $msg_number) {}

/**
 * @param string
 * @return bool
 **/
function notes_list_msgs($db) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function notes_mark_read($database_name, $user_name, $note_id) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function notes_mark_unread($database_name, $user_name, $note_id) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function notes_nav_create($database_name, $name) {}

/**
 * @param string
 * @param string
 * @return array
 **/
function notes_search($database_name, $keywords) {}

/**
 * @param string
 * @param string
 * @return array
 **/
function notes_unread($database_name, $user_name) {}

/**
 * @param string
 * @return float
 **/
function notes_version($database_name) {}

/**
 * nsapi_request_headers gets all the HTTP headers in the current
 * request. This is only supported when PHP runs as a NSAPI module.
 *
 * @return array
 **/
function nsapi_request_headers() {}

/**
 * Gets all the NSAPI response headers.
 *
 * @return array
 **/
function nsapi_response_headers() {}

/**
 * nsapi_virtual is an NSAPI-specific function which is equivalent to
 * !--#include virtual...-- in SSI (.shtml files). It does an NSAPI
 * sub-request. It is useful for including CGI scripts or .shtml files,
 * or anything else that you'd parse through webserver.
 * 
 * To run the sub-request, all buffers are terminated and flushed to the
 * browser, pending headers are sent too.
 * 
 * You cannot make recursive requests with this function to other PHP
 * scripts. If you want to include PHP scripts, use include or require.
 *
 * @param string
 * @return bool
 **/
function nsapi_virtual($uri) {}

/**
 * @param string
 * @param string
 * @return string
 **/
function nthmac($clent, $data) {}

/**
 * This function accepts either one, two, or four parameters (not three):
 * 
 * If only one parameter is given, number will be formatted without
 * decimals, but with a comma (",") between every group of thousands.
 * 
 * If two parameters are given, number will be formatted with decimals
 * decimals with a dot (".") in front, and a comma (",") between every
 * group of thousands.
 * 
 * If all four parameters are given, number will be formatted with
 * decimals decimals, dec_point instead of a dot (".") before the
 * decimals and thousands_sep instead of a comma (",") between every
 * group of thousands.
 *
 * @param float
 * @param int
 * @return string
 **/
function number_format($number, $decimals) {}

/**
 * Generates a Signature Base String according to pecl/oauth.
 *
 * @param string
 * @param string
 * @param array
 * @return string
 **/
function oauth_get_sbs($http_method, $uri, $request_parameters) {}

/**
 * Encodes a URI to RFC3686.
 *
 * @param string
 * @return string
 **/
function oauth_urlencode($uri) {}

/**
 * This function discards the contents of the output buffer.
 * 
 * This function does not destroy the output buffer like ob_end_clean
 * does.
 *
 * @return void
 **/
function ob_clean() {}

/**
 * 
 * 
 * The deflate output buffer handler can only be used once.
 * 
 * It conflicts with ob_gzhandler and zlib.output_compression as well and
 * should not be used after mbstring extension's mb_output_handler and
 * session extension's URL-Rewriter (AKA session.use_trans_sid).
 *
 * @param string
 * @param int
 * @return string
 **/
function ob_deflatehandler($data, $mode) {}

/**
 * This function discards the contents of the topmost output buffer and
 * turns off this output buffering. If you want to further process the
 * buffer's contents you have to call ob_get_contents before ob_end_clean
 * as the buffer contents are discarded when ob_end_clean is called.
 *
 * @return bool
 **/
function ob_end_clean() {}

/**
 * This function will send the contents of the topmost output buffer (if
 * any) and turn this output buffer off. If you want to further process
 * the buffer's contents you have to call ob_get_contents before
 * ob_end_flush as the buffer contents are discarded after ob_end_flush
 * is called.
 *
 * @return bool
 **/
function ob_end_flush() {}

/**
 * 
 * 
 * Output buffer handler generating an ETag with the hash algorithm
 * specified with the http.etag.mode.
 * 
 * This output handler is used by http_cache_etag.
 *
 * @param string
 * @param int
 * @return string
 **/
function ob_etaghandler($data, $mode) {}

/**
 * This function will send the contents of the output buffer (if any). If
 * you want to further process the buffer's contents you have to call
 * ob_get_contents before ob_flush as the buffer contents are discarded
 * after ob_flush is called.
 * 
 * This function does not destroy the output buffer like ob_end_flush
 * does.
 *
 * @return void
 **/
function ob_flush() {}

/**
 * Gets the current buffer contents and delete current output buffer.
 * 
 * ob_get_clean essentially executes both ob_get_contents and
 * ob_end_clean.
 *
 * @return string
 **/
function ob_get_clean() {}

/**
 * Gets the contents of the output buffer without clearing it.
 *
 * @return string
 **/
function ob_get_contents() {}

/**
 * ob_get_flush flushes the output buffer, return it as a string and
 * turns off output buffering.
 *
 * @return string
 **/
function ob_get_flush() {}

/**
 * This will return the length of the contents in the output buffer.
 *
 * @return int
 **/
function ob_get_length() {}

/**
 * Returns the nesting level of the output buffering mechanism.
 *
 * @return int
 **/
function ob_get_level() {}

/**
 * ob_get_status returns status information on either the top level
 * output buffer or all active output buffer levels if full_status is set
 * to .
 *
 * @param bool
 * @return array
 **/
function ob_get_status($full_status) {}

/**
 * ob_gzhandler is intended to be used as a callback function for
 * ob_start to help facilitate sending gz-encoded data to web browsers
 * that support compressed web pages. Before ob_gzhandler actually sends
 * compressed data, it determines what type of content encoding the
 * browser will accept ("gzip", "deflate" or none at all) and will return
 * its output accordingly. All browsers are supported since it's up to
 * the browser to send the correct header saying that it accepts
 * compressed web pages. If a browser doesn't support compressed pages
 * this function returns .
 *
 * @param string
 * @param int
 * @return string
 **/
function ob_gzhandler($buffer, $mode) {}

/**
 * Converts the string encoded in internal_encoding to output_encoding.
 * 
 * internal_encoding and output_encoding should be defined in the file or
 * in iconv_set_encoding.
 *
 * @param string
 * @param int
 * @return string
 **/
function ob_iconv_handler($contents, $status) {}

/**
 * ob_implicit_flush will turn implicit flushing on or off. Implicit
 * flushing will result in a flush operation after every output call, so
 * that explicit calls to flush will no longer be needed.
 *
 * @param int
 * @return void
 **/
function ob_implicit_flush($flag) {}

/**
 * 
 * 
 * Same restrictions as with ob_deflatehandler apply.
 *
 * @param string
 * @param int
 * @return string
 **/
function ob_inflatehandler($data, $mode) {}

/**
 * Lists all output handlers in use.
 *
 * @return array
 **/
function ob_list_handlers() {}

/**
 * This function will turn output buffering on. While output buffering is
 * active no output is sent from the script (other than headers), instead
 * the output is stored in an internal buffer.
 * 
 * The contents of this internal buffer may be copied into a string
 * variable using ob_get_contents. To output what is stored in the
 * internal buffer, use ob_end_flush. Alternatively, ob_end_clean will
 * silently discard the buffer contents.
 * 
 * Output buffers are stackable, that is, you may call ob_start while
 * another ob_start is active. Just make sure that you call ob_end_flush
 * the appropriate number of times. If multiple output callback functions
 * are active, output is being filtered sequentially through each of them
 * in nesting order.
 *
 * @param callback
 * @param int
 * @param bool
 * @return bool
 **/
function ob_start($output_callback, $chunk_size, $erase) {}

/**
 * Callback function for ob_start to repair the buffer.
 *
 * @param string
 * @param int
 * @return string
 **/
function ob_tidyhandler($input, $mode) {}

/**
 * Binds the PHP variable variable to the Oracle placeholder ph_name.
 * Whether it will be used for input or output will be determined at
 * run-time and the necessary storage space will be allocated.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @param int
 * @return bool
 **/
function ocibindbyname($statement, $ph_name, &$variable, $maxlength, $type) {}

/**
 * Invalidates a cursor, freeing all associated resources and cancels the
 * ability to read from it.
 *
 * @param resource
 * @return bool
 **/
function ocicancel($statement) {}

/**
 * Checks if the given field from the statement is .
 *
 * @param resource
 * @param mixed
 * @return bool
 **/
function ocicolumnisnull($statement, $field) {}

/**
 * Returns the name of the field.
 *
 * @param resource
 * @param int
 * @return string
 **/
function ocicolumnname($statement, $field) {}

/**
 * Returns precision of the field.
 * 
 * For FLOAT columns, precision is nonzero and scale is -127. If
 * precision is 0, then column is NUMBER. Else it's NUMBER(precision,
 * scale).
 *
 * @param resource
 * @param int
 * @return int
 **/
function ocicolumnprecision($statement, $field) {}

/**
 * Returns the scale of the column with field index.
 * 
 * For FLOAT columns, precision is nonzero and scale is -127. If
 * precision is 0, then column is NUMBER. Else it's NUMBER(precision,
 * scale).
 *
 * @param resource
 * @param int
 * @return int
 **/
function ocicolumnscale($statement, $field) {}

/**
 * Returns the size of a field.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function ocicolumnsize($statement, $field) {}

/**
 * Returns a field's data type.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function ocicolumntype($statement, $field) {}

/**
 * Returns Oracle's raw data type of the field.
 * 
 * However, if you want to get field's type, then oci_field_type will
 * suit you better.
 *
 * @param resource
 * @param int
 * @return int
 **/
function ocicolumntyperaw($statement, $field) {}

/**
 * Commits all outstanding statements for the active transaction on the
 * Oracle connection.
 *
 * @param resource
 * @return bool
 **/
function ocicommit($connection) {}

/**
 * Defines PHP variables for fetches of SQL-Columns.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function ocidefinebyname($statement, $column_name, &$variable, $type) {}

/**
 * Returns the last error found.
 *
 * @param resource
 * @return array
 **/
function ocierror($source) {}

/**
 * Executes a previously parsed statement.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ociexecute($statement, $mode) {}

/**
 * Fetches the next row (for SELECT statements) into the internal
 * result-buffer.
 *
 * @param resource
 * @return bool
 **/
function ocifetch($statement) {}

/**
 * This function is deprecated. Recommended alternatives:
 * oci_fetch_array, oci_fetch_object, oci_fetch_assoc and oci_fetch_row.
 *
 * @param resource
 * @param array
 * @param int
 * @return int
 **/
function ocifetchinto($statement, &$result, $mode) {}

/**
 * Fetches all the rows from a result into a user-defined array.
 *
 * @param resource
 * @param array
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function ocifetchstatement($statement, &$output, $skip, $maxrows, $flags) {}

/**
 * Frees resources associated with Oracle's cursor or statement, which
 * was received from as a result of oci_parse or obtained from Oracle.
 *
 * @param resource
 * @return bool
 **/
function ocifreecursor($statement) {}

/**
 * Frees resources associated with Oracle's cursor or statement, which
 * was received from as a result of oci_parse or obtained from Oracle.
 *
 * @param resource
 * @return bool
 **/
function ocifreestatement($statement) {}

/**
 * Enables or disables internal debug output.
 *
 * @param bool
 * @return void
 **/
function ociinternaldebug($onoff) {}

/**
 * Closes the Oracle connection.
 *
 * @param resource
 * @return bool
 **/
function ocilogoff($connection) {}

/**
 * Returns a connection identifier needed for most other OCI calls.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function ocilogon($username, $password, $db, $charset, $session_mode) {}

/**
 * Allocates a new collection object.
 *
 * @param resource
 * @param string
 * @param string
 * @return OCI-Collection
 **/
function ocinewcollection($connection, $tdo, $schema) {}

/**
 * Allocates a new statement handle on the specified connection.
 *
 * @param resource
 * @return resource
 **/
function ocinewcursor($connection) {}

/**
 * Allocates resources to hold descriptor or LOB locator.
 *
 * @param resource
 * @param int
 * @return OCI-Lob
 **/
function ocinewdescriptor($connection, $type) {}

/**
 * Establishes a new connection to an Oracle server and logs on.
 * 
 * Unlike oci_connect and oci_pconnect, ocinlogon does not cache
 * connections and will always return a brand-new freshly opened
 * connection handle. This is useful if your application needs
 * transactional isolation between two sets of queries.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function ocinlogon($username, $password, $db, $charset, $session_mode) {}

/**
 * Gets the number of columns in the given statement.
 *
 * @param resource
 * @return int
 **/
function ocinumcols($statement) {}

/**
 * Prepares the queryusing connection and returns the statement
 * identifier, which can be used with oci_bind_by_name, oci_execute and
 * other functions.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function ociparse($connection, $query) {}

/**
 * Creates a persistent connection to an Oracle server and logs on.
 * 
 * Persistent connections are cached and re-used between requests,
 * resulting in reduced overhead on each page load; a typical PHP
 * application will have a single persistent connection open against an
 * Oracle server per Apache child process (or PHP FastCGI/CGI process).
 * See the Persistent Database Connections section for more information.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function ociplogon($username, $password, $db, $charset, $session_mode) {}

/**
 * Returns the data from field in the current row, fetched by oci_fetch.
 *
 * @param resource
 * @param mixed
 * @return mixed
 **/
function ociresult($statement, $field) {}

/**
 * Rolls back all outstanding statements for the Oracle connection.
 *
 * @param resource
 * @return bool
 **/
function ocirollback($connection) {}

/**
 * Gets the number of rows affected during statement execution.
 *
 * @param resource
 * @return int
 **/
function ocirowcount($statement) {}

/**
 * Returns a string with version information of the Oracle server, which
 * uses the provided connection.
 *
 * @param resource
 * @return string
 **/
function ociserverversion($connection) {}

/**
 * Sets the number of rows to be prefetched after successful call to
 * oci_execute.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ocisetprefetch($statement, $rows) {}

/**
 * Returns the type of the provided OCI statement.
 *
 * @param resource
 * @return string
 **/
function ocistatementtype($statement) {}

/**
 * Binds the PHP array var_array to the Oracle placeholder name, which
 * points to Oracle PL/SQL array. Whether it will be used for input or
 * output will be determined at run-time.
 *
 * @param resource
 * @param string
 * @param array
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function oci_bind_array_by_name($statement, $name, &$var_array, $max_table_length, $max_item_length, $type) {}

/**
 * Binds the PHP variable variable to the Oracle placeholder ph_name.
 * Whether it will be used for input or output will be determined at
 * run-time and the necessary storage space will be allocated.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @param int
 * @return bool
 **/
function oci_bind_by_name($statement, $ph_name, &$variable, $maxlength, $type) {}

/**
 * Invalidates a cursor, freeing all associated resources and cancels the
 * ability to read from it.
 *
 * @param resource
 * @return bool
 **/
function oci_cancel($statement) {}

/**
 * Closes the Oracle connection.
 *
 * @param resource
 * @return bool
 **/
function oci_close($connection) {}

/**
 * Commits all outstanding statements for the active transaction on the
 * Oracle connection.
 *
 * @param resource
 * @return bool
 **/
function oci_commit($connection) {}

/**
 * Returns a connection identifier needed for most other OCI calls.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function oci_connect($username, $password, $db, $charset, $session_mode) {}

/**
 * Defines PHP variables for fetches of SQL-Columns.
 *
 * @param resource
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function oci_define_by_name($statement, $column_name, &$variable, $type) {}

/**
 * Returns the last error found.
 *
 * @param resource
 * @return array
 **/
function oci_error($source) {}

/**
 * Executes a previously parsed statement.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function oci_execute($statement, $mode) {}

/**
 * Fetches the next row (for SELECT statements) into the internal
 * result-buffer.
 *
 * @param resource
 * @return bool
 **/
function oci_fetch($statement) {}

/**
 * Fetches all the rows from a result into a user-defined array.
 *
 * @param resource
 * @param array
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function oci_fetch_all($statement, &$output, $skip, $maxrows, $flags) {}

/**
 * Returns an array, which corresponds to the next result row.
 * 
 * It should be mentioned here, that oci_fetch_array is insignificantly
 * slower, than oci_fetch_row, but much more handy.
 *
 * @param resource
 * @param int
 * @return array
 **/
function oci_fetch_array($statement, $mode) {}

/**
 * Returns the next row from the result data as an associative array.
 * 
 * Calling oci_fetch_assoc is identical to calling oci_fetch_array with
 * OCI_ASSOC.
 * 
 * A subsequent call to oci_fetch_assoc will return the next row or if
 * there are no more rows.
 *
 * @param resource
 * @return array
 **/
function oci_fetch_assoc($statement) {}

/**
 * Returns the next row from the result data as an object.
 * 
 * Subsequent calls to oci_fetch_object will return the next row from the
 * result or if there are no more rows.
 *
 * @param resource
 * @return object
 **/
function oci_fetch_object($statement) {}

/**
 * Returns the next row from the result data as an indexed array.
 * 
 * Calling oci_fetch_row is identical to calling oci_fetch_array with
 * OCI_NUM.
 * 
 * Subsequent calls to oci_fetch_row will return the next row from the
 * result data or if there are no more rows.
 *
 * @param resource
 * @return array
 **/
function oci_fetch_row($statement) {}

/**
 * Checks if the given field from the statement is .
 *
 * @param resource
 * @param mixed
 * @return bool
 **/
function oci_field_is_null($statement, $field) {}

/**
 * Returns the name of the field.
 *
 * @param resource
 * @param int
 * @return string
 **/
function oci_field_name($statement, $field) {}

/**
 * Returns precision of the field.
 * 
 * For FLOAT columns, precision is nonzero and scale is -127. If
 * precision is 0, then column is NUMBER. Else it's NUMBER(precision,
 * scale).
 *
 * @param resource
 * @param int
 * @return int
 **/
function oci_field_precision($statement, $field) {}

/**
 * Returns the scale of the column with field index.
 * 
 * For FLOAT columns, precision is nonzero and scale is -127. If
 * precision is 0, then column is NUMBER. Else it's NUMBER(precision,
 * scale).
 *
 * @param resource
 * @param int
 * @return int
 **/
function oci_field_scale($statement, $field) {}

/**
 * Returns the size of a field.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function oci_field_size($statement, $field) {}

/**
 * Returns a field's data type.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function oci_field_type($statement, $field) {}

/**
 * Returns Oracle's raw data type of the field.
 * 
 * However, if you want to get field's type, then oci_field_type will
 * suit you better.
 *
 * @param resource
 * @param int
 * @return int
 **/
function oci_field_type_raw($statement, $field) {}

/**
 * Frees resources associated with Oracle's cursor or statement, which
 * was received from as a result of oci_parse or obtained from Oracle.
 *
 * @param resource
 * @return bool
 **/
function oci_free_statement($statement) {}

/**
 * Enables or disables internal debug output.
 *
 * @param bool
 * @return void
 **/
function oci_internal_debug($onoff) {}

/**
 * Copies a large object or a part of a large object to another large
 * object. Old LOB-recipient data will be overwritten.
 * 
 * If you need to copy a particular part of a LOB to a particular
 * position of a LOB, use oci_lob_seek to move LOB internal pointers.
 *
 * @param OCI-Lob
 * @param OCI-Lob
 * @param int
 * @return bool
 **/
function oci_lob_copy($lob_to, $lob_from, $length) {}

/**
 * Compares two LOB/FILE locators.
 *
 * @param OCI-Lob
 * @param OCI-Lob
 * @return bool
 **/
function oci_lob_is_equal($lob1, $lob2) {}

/**
 * Allocates a new collection object.
 *
 * @param resource
 * @param string
 * @param string
 * @return OCI-Collection
 **/
function oci_new_collection($connection, $tdo, $schema) {}

/**
 * Establishes a new connection to an Oracle server and logs on.
 * 
 * Unlike oci_connect and oci_pconnect, oci_new_connect does not cache
 * connections and will always return a brand-new freshly opened
 * connection handle. This is useful if your application needs
 * transactional isolation between two sets of queries.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function oci_new_connect($username, $password, $db, $charset, $session_mode) {}

/**
 * Allocates a new statement handle on the specified connection.
 *
 * @param resource
 * @return resource
 **/
function oci_new_cursor($connection) {}

/**
 * Allocates resources to hold descriptor or LOB locator.
 *
 * @param resource
 * @param int
 * @return OCI-Lob
 **/
function oci_new_descriptor($connection, $type) {}

/**
 * Gets the number of columns in the given statement.
 *
 * @param resource
 * @return int
 **/
function oci_num_fields($statement) {}

/**
 * Gets the number of rows affected during statement execution.
 *
 * @param resource
 * @return int
 **/
function oci_num_rows($statement) {}

/**
 * Prepares the queryusing connection and returns the statement
 * identifier, which can be used with oci_bind_by_name, oci_execute and
 * other functions.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function oci_parse($connection, $query) {}

/**
 * Changes password for user with username.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function oci_password_change($connection, $username, $old_password, $new_password) {}

/**
 * Creates a persistent connection to an Oracle server and logs on.
 * 
 * Persistent connections are cached and re-used between requests,
 * resulting in reduced overhead on each page load; a typical PHP
 * application will have a single persistent connection open against an
 * Oracle server per Apache child process (or PHP FastCGI/CGI process).
 * See the Persistent Database Connections section for more information.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function oci_pconnect($username, $password, $db, $charset, $session_mode) {}

/**
 * Returns the data from field in the current row, fetched by oci_fetch.
 *
 * @param resource
 * @param mixed
 * @return mixed
 **/
function oci_result($statement, $field) {}

/**
 * Rolls back all outstanding statements for the Oracle connection.
 *
 * @param resource
 * @return bool
 **/
function oci_rollback($connection) {}

/**
 * Returns a string with version information of the Oracle server, which
 * uses the provided connection.
 *
 * @param resource
 * @return string
 **/
function oci_server_version($connection) {}

/**
 * Sets the action name for Oracle tracing.
 * 
 * The action name is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when a SQL
 * statement is executed.
 * 
 * The action name can subsequently be queried from database
 * administration views such as V$SESSION. It can be used for tracing and
 * monitoring such as with V$SQLAREA and
 * DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE.
 * 
 * The value may be retained across persistent connections.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function oci_set_action($connection, $action_name) {}

/**
 * Sets the client identifier used by various database components to
 * identify lightweight application users who authenticate as the same
 * database user.
 * 
 * The client identifier is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when a SQL
 * statement is executed.
 * 
 * The identifier can subsequently be queried from database
 * administration views such as V$SESSION. It can be used with
 * DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE for tracing. It can be used for
 * auditing.
 * 
 * The value may be retained across persistent connections.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function oci_set_client_identifier($connection, $client_identifier) {}

/**
 * Sets the client information for Oracle tracing.
 * 
 * The client information is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when a SQL
 * statement is executed.
 * 
 * The client information can subsequently be queried from database
 * administration views such as V$SESSION.
 * 
 * The value may be retained across persistent connections.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function oci_set_client_info($connection, $client_info) {}

/**
 * Sets the database "edition" of objects to be used by a subsequent
 * connections.
 * 
 * Oracle Editions allow concurrent versions of applications to run using
 * the same schema and object names. This is useful for upgrading live
 * systems.
 * 
 * Call oci_set_edition before calling oci_connect, oci_pconnect or
 * oci_new_connect.
 * 
 * If an edition is set that is not valid in the database, connection
 * will fail even if oci_set_edition returns success.
 * 
 * When using persistent connections, if a connection with the requested
 * edition setting already exists, it is reused. Otherwise, a different
 * persistent connection is created
 *
 * @param string
 * @return bool
 **/
function oci_set_edition($edition) {}

/**
 * Sets the module name for Oracle tracing.
 * 
 * The module name is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when a SQL
 * statement is executed.
 * 
 * The name can subsequently be queried from database administration
 * views such as V$SESSION. It can be used for tracing and monitoring
 * such as with V$SQLAREA and DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE.
 * 
 * The value may be retained across persistent connections.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function oci_set_module_name($connection, $module_name) {}

/**
 * Sets the number of rows to be prefetched after successful call to
 * oci_execute.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function oci_set_prefetch($statement, $rows) {}

/**
 * Returns the type of the provided OCI statement.
 *
 * @param resource
 * @return string
 **/
function oci_statement_type($statement) {}

/**
 * Returns the decimal equivalent of the octal number represented by the
 * octal_string argument.
 *
 * @param string
 * @return number
 **/
function octdec($octal_string) {}

/**
 * Toggles autocommit behaviour.
 * 
 * By default, auto-commit is on for a connection. Disabling auto-commit
 * is equivalent with starting a transaction.
 *
 * @param resource
 * @param bool
 * @return mixed
 **/
function odbc_autocommit($connection_id, $OnOff) {}

/**
 * Enables handling of binary column data. ODBC SQL types affected are
 * BINARY, VARBINARY, and LONGVARBINARY.
 * 
 * When binary SQL data is converted to character C data, each byte (8
 * bits) of source data is represented as two ASCII characters. These
 * characters are the ASCII character representation of the number in its
 * hexadecimal form. For example, a binary 00000001 is converted to "01"
 * and a binary 11111111 is converted to "FF".
 * 
 * LONGVARBINARY handling
 * 
 * binmode longreadlen result
 * 
 * ODBC_BINMODE_PASSTHRU 0 passthru
 * 
 * ODBC_BINMODE_RETURN 0 passthru
 * 
 * ODBC_BINMODE_CONVERT 0 passthru
 * 
 * ODBC_BINMODE_PASSTHRU 0 passthru
 * 
 * ODBC_BINMODE_PASSTHRU &gt;0 passthru
 * 
 * ODBC_BINMODE_RETURN &gt;0 return as is
 * 
 * ODBC_BINMODE_CONVERT &gt;0 return as char
 * 
 * If odbc_fetch_into is used, passthru means that an empty string is
 * returned for these columns.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function odbc_binmode($result_id, $mode) {}

/**
 * Closes down the connection to the database server.
 *
 * @param resource
 * @return void
 **/
function odbc_close($connection_id) {}

/**
 * odbc_close_all will close down all connections to database server(s).
 *
 * @return void
 **/
function odbc_close_all() {}

/**
 * Lists columns and associated privileges for the given table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function odbc_columnprivileges($connection_id, $qualifier, $owner, $table_name, $column_name) {}

/**
 * Lists all columns in the requested range.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function odbc_columns($connection_id, $qualifier, $schema, $table_name, $column_name) {}

/**
 * Commits all pending transactions on the connection.
 *
 * @param resource
 * @return bool
 **/
function odbc_commit($connection_id) {}

/**
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function odbc_connect($dsn, $user, $password, $cursor_type) {}

/**
 * Gets the cursorname for the given result_id.
 *
 * @param resource
 * @return string
 **/
function odbc_cursor($result_id) {}

/**
 * This function will return the list of available DNS (after calling it
 * several times).
 *
 * @param resource
 * @param int
 * @return array
 **/
function odbc_data_source($connection_id, $fetch_type) {}

/**
 * Sends an SQL statement to the database server.
 *
 * @param resource
 * @param string
 * @param int
 * @return resource
 **/
function odbc_do($connection_id, $query_string, $flags) {}

/**
 * @param resource
 * @return string
 **/
function odbc_error($connection_id) {}

/**
 * @param resource
 * @return string
 **/
function odbc_errormsg($connection_id) {}

/**
 * Sends an SQL statement to the database server.
 *
 * @param resource
 * @param string
 * @param int
 * @return resource
 **/
function odbc_exec($connection_id, $query_string, $flags) {}

/**
 * Executes a statement prepared with odbc_prepare.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function odbc_execute($result_id, $parameters_array) {}

/**
 * Fetch an associative array from an ODBC query. See the changelog below
 * for when this function is available.
 *
 * @param resource
 * @param int
 * @return array
 **/
function odbc_fetch_array($result, $rownumber) {}

/**
 * Fetch one result row into array.
 *
 * @param resource
 * @param array
 * @param int
 * @return int
 **/
function odbc_fetch_into($result_id, &$result_array, $rownumber) {}

/**
 * Fetch an object from an ODBC query. See the changelog below for when
 * this function is available.
 *
 * @param resource
 * @param int
 * @return object
 **/
function odbc_fetch_object($result, $rownumber) {}

/**
 * Fetches a row of the data that was returned by odbc_do or odbc_exec.
 * After odbc_fetch_row is called, the fields of that row can be accessed
 * with odbc_result.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function odbc_fetch_row($result_id, $row_number) {}

/**
 * Gets the length of the field referenced by number in the given result
 * identifier.
 *
 * @param resource
 * @param int
 * @return int
 **/
function odbc_field_len($result_id, $field_number) {}

/**
 * Gets the name of the field occupying the given column number in the
 * given result identifier.
 *
 * @param resource
 * @param int
 * @return string
 **/
function odbc_field_name($result_id, $field_number) {}

/**
 * Gets the number of the column slot that corresponds to the named field
 * in the given result identifier.
 *
 * @param resource
 * @param string
 * @return int
 **/
function odbc_field_num($result_id, $field_name) {}

/**
 * Gets the length of the field referenced by number in the given result
 * identifier.
 *
 * @param resource
 * @param int
 * @return int
 **/
function odbc_field_precision($result_id, $field_number) {}

/**
 * Gets the scale of the field referenced by number in the given result
 * identifier.
 *
 * @param resource
 * @param int
 * @return int
 **/
function odbc_field_scale($result_id, $field_number) {}

/**
 * Gets the SQL type of the field referenced by number in the given
 * result identifier.
 *
 * @param resource
 * @param int
 * @return string
 **/
function odbc_field_type($result_id, $field_number) {}

/**
 * Retrieves a list of foreign keys in the specified table or a list of
 * foreign keys in other tables that refer to the primary key in the
 * specified table
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function odbc_foreignkeys($connection_id, $pk_qualifier, $pk_owner, $pk_table, $fk_qualifier, $fk_owner, $fk_table) {}

/**
 * Free resources associated with a result.
 * 
 * odbc_free_result only needs to be called if you are worried about
 * using too much memory while your script is running. All result memory
 * will automatically be freed when the script is finished.
 *
 * @param resource
 * @return bool
 **/
function odbc_free_result($result_id) {}

/**
 * Retrieves information about data types supported by the data source.
 *
 * @param resource
 * @param int
 * @return resource
 **/
function odbc_gettypeinfo($connection_id, $data_type) {}

/**
 * Enables handling of LONG and LONGVARBINARY columns.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function odbc_longreadlen($result_id, $length) {}

/**
 * Checks if there are more result sets available as well as allowing
 * access to the next result set via odbc_fetch_array, odbc_fetch_row,
 * odbc_result, etc.
 *
 * @param resource
 * @return bool
 **/
function odbc_next_result($result_id) {}

/**
 * Gets the number of fields (columns) in an ODBC result.
 *
 * @param resource
 * @return int
 **/
function odbc_num_fields($result_id) {}

/**
 * Gets the number of rows in a result. For INSERT, UPDATE and DELETE
 * statements odbc_num_rows returns the number of rows affected. For a
 * SELECT clause this can be the number of rows available.
 *
 * @param resource
 * @return int
 **/
function odbc_num_rows($result_id) {}

/**
 * Opens a persistent database connection.
 * 
 * This function is much like odbc_connect, except that the connection is
 * not really closed when the script has finished. Future requests for a
 * connection with the same dsn, user, password combination (via
 * odbc_connect and odbc_pconnect) can reuse the persistent connection.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @return resource
 **/
function odbc_pconnect($dsn, $user, $password, $cursor_type) {}

/**
 * Prepares a statement for execution. The result identifier can be used
 * later to execute the statement with odbc_execute.
 * 
 * Some databases (such as IBM DB2, MS SQL Server, and Oracle) support
 * stored procedures that accept parameters of type IN, INOUT, and OUT as
 * defined by the ODBC specification. However, the Unified ODBC driver
 * currently only supports parameters of type IN to stored procedures.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function odbc_prepare($connection_id, $query_string) {}

/**
 * Returns a result identifier that can be used to fetch the column names
 * that comprise the primary key for a table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function odbc_primarykeys($connection_id, $qualifier, $owner, $table) {}

/**
 * Retrieve information about parameters to procedures.
 *
 * @param resource
 * @return resource
 **/
function odbc_procedurecolumns($connection_id) {}

/**
 * Lists all procedures in the requested range.
 *
 * @param resource
 * @return resource
 **/
function odbc_procedures($connection_id) {}

/**
 * Get result data
 *
 * @param resource
 * @param mixed
 * @return mixed
 **/
function odbc_result($result_id, $field) {}

/**
 * Prints all rows from a result identifier produced by odbc_exec. The
 * result is printed in HTML table format.
 *
 * @param resource
 * @param string
 * @return int
 **/
function odbc_result_all($result_id, $format) {}

/**
 * Rolls back all pending statements on the connection.
 *
 * @param resource
 * @return bool
 **/
function odbc_rollback($connection_id) {}

/**
 * This function allows fiddling with the ODBC options for a particular
 * connection or query result. It was written to help find work around to
 * problems in quirky ODBC drivers. You should probably only use this
 * function if you are an ODBC programmer and understand the effects the
 * various options will have. You will certainly need a good ODBC
 * reference to explain all the different options and values that can be
 * used. Different driver versions support different options.
 * 
 * Because the effects may vary depending on the ODBC driver, use of this
 * function in scripts to be made publicly available is strongly
 * discouraged. Also, some ODBC options are not available to this
 * function because they must be set before the connection is established
 * or the query is prepared. However, if on a particular job it can make
 * PHP work so your boss doesn't tell you to use a commercial product,
 * that's all that really matters.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function odbc_setoption($id, $function, $option, $param) {}

/**
 * Retrieves either the optimal set of columns that uniquely identifies a
 * row in the table, or columns that are automatically updated when any
 * value in the row is updated by a transaction.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return resource
 **/
function odbc_specialcolumns($connection_id, $type, $qualifier, $owner, $table, $scope, $nullable) {}

/**
 * Get statistics about a table and its indexes.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return resource
 **/
function odbc_statistics($connection_id, $qualifier, $owner, $table_name, $unique, $accuracy) {}

/**
 * Lists tables in the requested range and the privileges associated with
 * each table.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function odbc_tableprivileges($connection_id, $qualifier, $owner, $name) {}

/**
 * Lists all tables in the requested range.
 * 
 * To support enumeration of qualifiers, owners, and table types, the
 * following special semantics for the qualifier, owner, name, and
 * table_type are available:
 * 
 * If qualifier is a single percent character (%) and owner and name are
 * empty strings, then the result set contains a list of valid qualifiers
 * for the data source. (All columns except the TABLE_QUALIFIER column
 * contain NULLs.)
 * 
 * If owner is a single percent character (%) and qualifier and name are
 * empty strings, then the result set contains a list of valid owners for
 * the data source. (All columns except the TABLE_OWNER column contain
 * NULLs.)
 * 
 * If table_type is a single percent character (%) and qualifier, owner
 * and name are empty strings, then the result set contains a list of
 * valid table types for the data source. (All columns except the
 * TABLE_TYPE column contain NULLs.)
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function odbc_tables($connection_id, $qualifier, $owner, $name, $types) {}

/**
 * @return resource
 **/
function openal_buffer_create() {}

/**
 * @param resource
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function openal_buffer_data($buffer, $format, $data, $freq) {}

/**
 * @param resource
 * @return bool
 **/
function openal_buffer_destroy($buffer) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function openal_buffer_get($buffer, $property) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function openal_buffer_loadwav($buffer, $wavfile) {}

/**
 * @param resource
 * @return resource
 **/
function openal_context_create($device) {}

/**
 * @param resource
 * @return bool
 **/
function openal_context_current($context) {}

/**
 * @param resource
 * @return bool
 **/
function openal_context_destroy($context) {}

/**
 * @param resource
 * @return bool
 **/
function openal_context_process($context) {}

/**
 * @param resource
 * @return bool
 **/
function openal_context_suspend($context) {}

/**
 * @param resource
 * @return bool
 **/
function openal_device_close($device) {}

/**
 * @param string
 * @return resource
 **/
function openal_device_open($device_desc) {}

/**
 * @param int
 * @return mixed
 **/
function openal_listener_get($property) {}

/**
 * @param int
 * @param mixed
 * @return bool
 **/
function openal_listener_set($property, $setting) {}

/**
 * @return resource
 **/
function openal_source_create() {}

/**
 * @param resource
 * @return bool
 **/
function openal_source_destroy($source) {}

/**
 * @param resource
 * @param int
 * @return mixed
 **/
function openal_source_get($source, $property) {}

/**
 * @param resource
 * @return bool
 **/
function openal_source_pause($source) {}

/**
 * @param resource
 * @return bool
 **/
function openal_source_play($source) {}

/**
 * @param resource
 * @return bool
 **/
function openal_source_rewind($source) {}

/**
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function openal_source_set($source, $property, $setting) {}

/**
 * @param resource
 * @return bool
 **/
function openal_source_stop($source) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return resource
 **/
function openal_stream($source, $format, $rate) {}

/**
 * Opens up a directory handle to be used in subsequent closedir,
 * readdir, and rewinddir calls.
 *
 * @param string
 * @param resource
 * @return resource
 **/
function opendir($path, $context) {}

/**
 * openlog opens a connection to the system logger for a program.
 * 
 * The use of openlog is optional. It will automatically be called by
 * syslog if necessary, in which case ident will default to .
 *
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function openlog($ident, $option, $facility) {}

/**
 * openssl_csr_export takes the Certificate Signing Request represented
 * by csr and stores it as ascii-armoured text into out, which is passed
 * by reference.
 *
 * @param resource
 * @param string
 * @param bool
 * @return bool
 **/
function openssl_csr_export($csr, &$out, $notext) {}

/**
 * openssl_csr_export_to_file takes the Certificate Signing Request
 * represented by csr and saves it as ascii-armoured text into the file
 * named by outfilename.
 *
 * @param resource
 * @param string
 * @param bool
 * @return bool
 **/
function openssl_csr_export_to_file($csr, $outfilename, $notext) {}

/**
 * @param mixed
 * @param bool
 * @return resource
 **/
function openssl_csr_get_public_key($csr, $use_shortnames) {}

/**
 * @param mixed
 * @param bool
 * @return array
 **/
function openssl_csr_get_subject($csr, $use_shortnames) {}

/**
 * openssl_csr_new generates a new CSR (Certificate Signing Request)
 * based on the information provided by dn, which represents the
 * Distinguished Name to be used in the certificate.
 *
 * @param array
 * @param resource
 * @param array
 * @param array
 * @return mixed
 **/
function openssl_csr_new($dn, &$privkey, $configargs, $extraattribs) {}

/**
 * openssl_csr_sign generates an x509 certificate resource from the given
 * CSR.
 *
 * @param mixed
 * @param mixed
 * @param mixed
 * @param int
 * @param array
 * @param int
 * @return resource
 **/
function openssl_csr_sign($csr, $cacert, $priv_key, $days, $configargs, $serial) {}

/**
 * Takes a raw or base64 encoded string and decrypts it using a given
 * method and key.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function openssl_decrypt($data, $method, $password, $raw_input) {}

/**
 * @param string
 * @param resource
 * @return string
 **/
function openssl_dh_compute_key($pub_key, $dh_key) {}

/**
 * Computes a digest hash value for the given data using a given method,
 * and returns a raw or binhex encoded string.
 *
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function openssl_digest($data, $method, $raw_output) {}

/**
 * Encrypts given data with given method and key, returns a raw or base64
 * encoded string
 *
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return string
 **/
function openssl_encrypt($data, $method, $password, $raw_output) {}

/**
 * openssl_error_string returns the last error from the openSSL library.
 * Error messages are stacked, so this function should be called multiple
 * times to collect all of the information.
 *
 * @return string
 **/
function openssl_error_string() {}

/**
 * openssl_free_key frees the key associated with the specified
 * key_identifier from memory.
 *
 * @param resource
 * @return void
 **/
function openssl_free_key($key_identifier) {}

/**
 * Gets a list of available cipher methods.
 *
 * @param bool
 * @return array
 **/
function openssl_get_cipher_methods($aliases) {}

/**
 * Gets a list of available digest methods.
 *
 * @param bool
 * @return array
 **/
function openssl_get_md_methods($aliases) {}

/**
 * openssl_get_privatekey parses key and prepares it for use by other
 * functions.
 *
 * @param mixed
 * @param string
 * @return resource
 **/
function openssl_get_privatekey($key, $passphrase) {}

/**
 * openssl_get_publickey extracts the public key from certificate and
 * prepares it for use by other functions.
 *
 * @param mixed
 * @return resource
 **/
function openssl_get_publickey($certificate) {}

/**
 * openssl_open opens (decrypts) sealed_data using the private key
 * associated with the key identifier priv_key_id and the envelope key
 * env_key, and fills open_data with the decrypted data. The envelope key
 * is generated when the data are sealed and can only be used by one
 * specific private key. See openssl_seal for more information.
 *
 * @param string
 * @param string
 * @param string
 * @param mixed
 * @return bool
 **/
function openssl_open($sealed_data, &$open_data, $env_key, $priv_key_id) {}

/**
 * Decrypts the S/MIME encrypted message contained in the file specified
 * by infilename using the certificate and its associated private key
 * specified by recipcert and recipkey.
 *
 * @param string
 * @param string
 * @param mixed
 * @param mixed
 * @return bool
 **/
function openssl_pkcs7_decrypt($infilename, $outfilename, $recipcert, $recipkey) {}

/**
 * openssl_pkcs7_encrypt takes the contents of the file named infile and
 * encrypts them using an RC2 40-bit cipher so that they can only be read
 * by the intended recipients specified by recipcerts.
 *
 * @param string
 * @param string
 * @param mixed
 * @param array
 * @param int
 * @param int
 * @return bool
 **/
function openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers, $flags, $cipherid) {}

/**
 * openssl_pkcs7_sign takes the contents of the file named infilename and
 * signs them using the certificate and its matching private key
 * specified by signcert and privkey parameters.
 *
 * @param string
 * @param string
 * @param mixed
 * @param mixed
 * @param array
 * @param int
 * @param string
 * @return bool
 **/
function openssl_pkcs7_sign($infilename, $outfilename, $signcert, $privkey, $headers, $flags, $extracerts) {}

/**
 * openssl_pkcs7_verify reads the S/MIME message contained in the given
 * file and examines the digital signature.
 *
 * @param string
 * @param int
 * @param string
 * @param array
 * @param string
 * @param string
 * @return mixed
 **/
function openssl_pkcs7_verify($filename, $flags, $outfilename, $cainfo, $extracerts, $content) {}

/**
 * openssl_pkcs12_export stores x509 into a string named by out in a
 * PKCS#12 file format.
 *
 * @param mixed
 * @param string
 * @param mixed
 * @param string
 * @param array
 * @return bool
 **/
function openssl_pkcs12_export($x509, &$out, $priv_key, $pass, $args) {}

/**
 * openssl_pkcs12_export_to_file stores x509 into a file named by
 * filename in a PKCS#12 file format.
 *
 * @param mixed
 * @param string
 * @param mixed
 * @param string
 * @param array
 * @return bool
 **/
function openssl_pkcs12_export_to_file($x509, $filename, $priv_key, $pass, $args) {}

/**
 * openssl_pkcs12_read parses the PKCS#12 certificate store supplied by
 * pkcs12 into a array named certs.
 *
 * @param string
 * @param array
 * @param string
 * @return bool
 **/
function openssl_pkcs12_read($pkcs12, &$certs, $pass) {}

/**
 * openssl_pkey_export exports key as a PEM encoded string and stores it
 * into out (which is passed by reference).
 *
 * @param mixed
 * @param string
 * @param string
 * @param array
 * @return bool
 **/
function openssl_pkey_export($key, &$out, $passphrase, $configargs) {}

/**
 * openssl_pkey_export_to_file saves an ascii-armoured (PEM encoded)
 * rendition of key into the file named by outfilename.
 *
 * @param mixed
 * @param string
 * @param string
 * @param array
 * @return bool
 **/
function openssl_pkey_export_to_file($key, $outfilename, $passphrase, $configargs) {}

/**
 * This function frees a private key created by openssl_pkey_new.
 *
 * @param resource
 * @return void
 **/
function openssl_pkey_free($key) {}

/**
 * This function returns the key details (bits, key, type).
 *
 * @param resource
 * @return array
 **/
function openssl_pkey_get_details($key) {}

/**
 * openssl_get_privatekey parses key and prepares it for use by other
 * functions.
 *
 * @param mixed
 * @param string
 * @return resource
 **/
function openssl_pkey_get_private($key, $passphrase) {}

/**
 * openssl_get_publickey extracts the public key from certificate and
 * prepares it for use by other functions.
 *
 * @param mixed
 * @return resource
 **/
function openssl_pkey_get_public($certificate) {}

/**
 * openssl_pkey_new generates a new private and public key pair. The
 * public component of the key can be obtained using
 * openssl_pkey_get_public.
 *
 * @param array
 * @return resource
 **/
function openssl_pkey_new($configargs) {}

/**
 * openssl_private_decrypt decrypts data that was previous encrypted via
 * openssl_public_encrypt and stores the result into decrypted.
 * 
 * You can use this function e.g. to decrypt data which were supposed
 * only to you.
 *
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function openssl_private_decrypt($data, &$decrypted, $key, $padding) {}

/**
 * openssl_private_encrypt encrypts data with private key and stores the
 * result into crypted. Encrypted data can be decrypted via
 * openssl_public_decrypt.
 * 
 * This function can be used e.g. to sign data (or its hash) to prove
 * that it is not written by someone else.
 *
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function openssl_private_encrypt($data, &$crypted, $key, $padding) {}

/**
 * openssl_public_decrypt decrypts data that was previous encrypted via
 * openssl_private_encrypt and stores the result into decrypted.
 * 
 * You can use this function e.g. to check if the message was written by
 * the owner of the private key.
 *
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function openssl_public_decrypt($data, &$decrypted, $key, $padding) {}

/**
 * openssl_public_encrypt encrypts data with public key and stores the
 * result into crypted. Encrypted data can be decrypted via
 * openssl_private_decrypt.
 * 
 * This function can be used e.g. to encrypt message which can be then
 * read only by owner of the private key. It can be also used to store
 * secure data in database.
 *
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function openssl_public_encrypt($data, &$crypted, $key, $padding) {}

/**
 * openssl_random_pseudo_bytes returns a with length caracters. It also
 * indicates if it has used a strong algorithm to produce those
 * pseudo-random bytes in the second argument.
 *
 * @param string
 * @param string
 * @return bool
 **/
function openssl_random_pseudo_bytes($length, $strong) {}

/**
 * openssl_seal seals (encrypts) data by using RC4 with a randomly
 * generated secret key. The key is encrypted with each of the public
 * keys associated with the identifiers in pub_key_ids and each encrypted
 * key is returned in env_keys. This means that one can send sealed data
 * to multiple recipients (provided one has obtained their public keys).
 * Each recipient must receive both the sealed data and the envelope key
 * that was encrypted with the recipient's public key.
 *
 * @param string
 * @param string
 * @param array
 * @param array
 * @return int
 **/
function openssl_seal($data, &$sealed_data, &$env_keys, $pub_key_ids) {}

/**
 * openssl_sign computes a signature for the specified data by using SHA1
 * for hashing followed by encryption using the private key associated
 * with priv_key_id. Note that the data itself is not encrypted.
 *
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @return bool
 **/
function openssl_sign($data, &$signature, $priv_key_id, $signature_alg) {}

/**
 * openssl_verify verifies that the signature is correct for the
 * specified data using the public key associated with pub_key_id. This
 * must be the public key corresponding to the private key used for
 * signing.
 *
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @return int
 **/
function openssl_verify($data, $signature, $pub_key_id, $signature_alg) {}

/**
 * openssl_x509_checkpurpose examines a certificate to see if it can be
 * used for the specified purpose.
 *
 * @param mixed
 * @param int
 * @param array
 * @param string
 * @return int
 **/
function openssl_x509_checkpurpose($x509cert, $purpose, $cainfo, $untrustedfile) {}

/**
 * Checks whether the given key is the private key that corresponds to
 * cert.
 *
 * @param mixed
 * @param mixed
 * @return bool
 **/
function openssl_x509_check_private_key($cert, $key) {}

/**
 * openssl_x509_export stores x509 into a string named by output in a PEM
 * encoded format.
 *
 * @param mixed
 * @param string
 * @param bool
 * @return bool
 **/
function openssl_x509_export($x509, &$output, $notext) {}

/**
 * openssl_x509_export_to_file stores x509 into a file named by
 * outfilename in a PEM encoded format.
 *
 * @param mixed
 * @param string
 * @param bool
 * @return bool
 **/
function openssl_x509_export_to_file($x509, $outfilename, $notext) {}

/**
 * openssl_x509_free frees the certificate associated with the specified
 * x509cert resource from memory.
 *
 * @param resource
 * @return void
 **/
function openssl_x509_free($x509cert) {}

/**
 * openssl_x509_parse returns information about the supplied x509cert,
 * including fields such as subject name, issuer name, purposes, valid
 * from and valid to dates etc.
 *
 * @param mixed
 * @param bool
 * @return array
 **/
function openssl_x509_parse($x509cert, $shortnames) {}

/**
 * openssl_x509_read parses the certificate supplied by x509certdata and
 * returns a resource identifier for it.
 *
 * @param mixed
 * @return resource
 **/
function openssl_x509_read($x509certdata) {}

/**
 * Returns the ASCII value of the first character of string.
 * 
 * This function complements chr.
 *
 * @param string
 * @return int
 **/
function ord($string) {}

/**
 * This function adds another name/value pair to the URL rewrite
 * mechanism. The name and value will be added to URLs (as GET parameter)
 * and forms (as hidden input fields) the same way as the session ID when
 * transparent URL rewriting is enabled with session.use_trans_sid.
 * Please note that absolute URLs (http://example.com/..) aren't
 * rewritten.
 * 
 * This function's behavior is controlled by the url_rewriter.tags
 * parameter.
 *
 * @param string
 * @param string
 * @return bool
 **/
function output_add_rewrite_var($name, $value) {}

/**
 * This function resets the URL rewriter and removes all rewrite
 * variables previously set by the output_add_rewrite_var function or the
 * session mechanism (if session.use_trans_sid was set on session_start).
 *
 * @return bool
 **/
function output_reset_rewrite_vars() {}

/**
 * The overload function will enable property and method call overloading
 * for a class identified by class_name.
 *
 * @param string
 * @return void
 **/
function overload($class_name) {}

/**
 * Overrides built-in functions by replacing them in the symbol table.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function override_function($function_name, $function_args, $function_code) {}

/**
 * Closes the specified connection to Ovrimos. This has the effect of
 * rolling back uncommitted transactions.
 *
 * @param int
 * @return void
 **/
function ovrimos_close($connection) {}

/**
 * Commits the transaction.
 *
 * @param int
 * @return bool
 **/
function ovrimos_commit($connection_id) {}

/**
 * Connects to the specified database.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function ovrimos_connect($host, $dborport, $user, $password) {}

/**
 * Gets the name of the cursor. Useful when wishing to perform positioned
 * updates or deletes.
 *
 * @param int
 * @return string
 **/
function ovrimos_cursor($result_id) {}

/**
 * Executes an SQL statement (query or update) and returns a result
 * identifier.
 *
 * @param int
 * @param string
 * @return int
 **/
function ovrimos_exec($connection_id, $query) {}

/**
 * Executes a prepared statement.
 *
 * @param int
 * @param array
 * @return bool
 **/
function ovrimos_execute($result_id, $parameters_array) {}

/**
 * Fetches a row from the given result set, into result_array.
 *
 * @param int
 * @param array
 * @param string
 * @param int
 * @return bool
 **/
function ovrimos_fetch_into($result_id, &$result_array, $how, $rownumber) {}

/**
 * Fetches a row from the result set. Column values should be retrieved
 * with other calls.
 *
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function ovrimos_fetch_row($result_id, $how, $row_number) {}

/**
 * Gets the length of the specified output column.
 *
 * @param int
 * @param int
 * @return int
 **/
function ovrimos_field_len($result_id, $field_number) {}

/**
 * Returns the output column name at the index specified.
 *
 * @param int
 * @param int
 * @return string
 **/
function ovrimos_field_name($result_id, $field_number) {}

/**
 * Returns the 1-based index of the specified output column.
 *
 * @param int
 * @param string
 * @return int
 **/
function ovrimos_field_num($result_id, $field_name) {}

/**
 * Returns the type of the output column
 *
 * @param int
 * @param int
 * @return int
 **/
function ovrimos_field_type($result_id, $field_number) {}

/**
 * Frees the specified result identifier.
 *
 * @param int
 * @return bool
 **/
function ovrimos_free_result($result_id) {}

/**
 * Specifies how many bytes are to be retrieved from long datatypes (long
 * varchar and long varbinary).
 *
 * @param int
 * @param int
 * @return bool
 **/
function ovrimos_longreadlen($result_id, $length) {}

/**
 * Returns the number of columns in the specified result identifier.
 *
 * @param int
 * @return int
 **/
function ovrimos_num_fields($result_id) {}

/**
 * Gets the number of rows affected by update operations.
 *
 * @param int
 * @return int
 **/
function ovrimos_num_rows($result_id) {}

/**
 * Prepares an SQL statement.
 *
 * @param int
 * @param string
 * @return int
 **/
function ovrimos_prepare($connection_id, $query) {}

/**
 * Retrieves the output column specified by field.
 *
 * @param int
 * @param mixed
 * @return string
 **/
function ovrimos_result($result_id, $field) {}

/**
 * Prints the whole result set as an HTML table.
 *
 * @param int
 * @param string
 * @return int
 **/
function ovrimos_result_all($result_id, $format) {}

/**
 * Rolls back the transaction.
 *
 * @param int
 * @return bool
 **/
function ovrimos_rollback($connection_id) {}

/**
 * Pack given arguments into binary string according to format.
 * 
 * The idea for this function was taken from Perl and all formatting
 * codes work the same as in Perl. However, there are some formatting
 * codes that are missing such as Perl's "u" format code.
 * 
 * Note that the distinction between signed and unsigned values only
 * affects the function unpack, where as function pack gives the same
 * result for signed and unsigned format codes.
 * 
 * Also note that PHP internally stores integer values as signed values
 * of a machine-dependent size. If you give it an unsigned integer value
 * too large to be stored that way it is converted to a float which often
 * yields an undesired result.
 *
 * @param string
 * @param mixed
 * @return string
 **/
function pack($format, $args) {}

/**
 * @param string
 * @param array
 * @param int
 * @return array
 **/
function parsekit_compile_file($filename, &$errors, $options) {}

/**
 * @param string
 * @param array
 * @param int
 * @return array
 **/
function parsekit_compile_string($phpcode, &$errors, $options) {}

/**
 * @param mixed
 * @return array
 **/
function parsekit_func_arginfo($function) {}

/**
 * parse_ini_file loads in the ini file specified in filename, and
 * returns the settings in it in an associative array.
 * 
 * The structure of the ini file is the same as the 's.
 *
 * @param string
 * @param bool
 * @param int
 * @return array
 **/
function parse_ini_file($filename, $process_sections, $scanner_mode) {}

/**
 * parse_ini_string returns the settings in string ini in an associative
 * array.
 * 
 * The structure of the ini string is the same as the 's.
 *
 * @param string
 * @param bool
 * @param int
 * @return array
 **/
function parse_ini_string($ini, $process_sections, $scanner_mode) {}

/**
 * Parses str as if it were the query string passed via a URL and sets
 * variables in the current scope.
 *
 * @param string
 * @param array
 * @return void
 **/
function parse_str($str, &$arr) {}

/**
 * This function parses a URL and returns an associative array containing
 * any of the various components of the URL that are present.
 * 
 * This function is not meant to validate the given URL, it only breaks
 * it up into the above listed parts. Partial URLs are also accepted,
 * parse_url tries its best to parse them correctly.
 *
 * @param string
 * @param int
 * @return mixed
 **/
function parse_url($url, $component) {}

/**
 * The passthru function is similar to the exec function in that it
 * executes a command. This function should be used in place of exec or
 * system when the output from the Unix command is binary data which
 * needs to be passed directly back to the browser. A common use for this
 * is to execute something like the pbmplus utilities that can output an
 * image stream directly. By setting the Content-type to image/gif and
 * then calling a pbmplus program to output a gif, you can create PHP
 * scripts that output images directly.
 *
 * @param string
 * @param int
 * @return void
 **/
function passthru($command, &$return_var) {}

/**
 * pathinfo returns an associative array containing information about
 * path.
 *
 * @param string
 * @param int
 * @return mixed
 **/
function pathinfo($path, $options) {}

/**
 * Closes a file pointer to a pipe opened by popen.
 *
 * @param resource
 * @return int
 **/
function pclose($handle) {}

/**
 * Creates a timer that will send a SIGALRM signal to the process after
 * the given number of seconds. Any call to pcntl_alarm will cancel any
 * previously set alarm.
 *
 * @param int
 * @return int
 **/
function pcntl_alarm($seconds) {}

/**
 * Executes the program with the given arguments.
 *
 * @param string
 * @param array
 * @param array
 * @return void
 **/
function pcntl_exec($path, $args, $envs) {}

/**
 * The pcntl_fork function creates a child process that differs from the
 * parent process only in its PID and PPID. Please see your system's
 * fork(2) man page for specific details as to how fork works on your
 * system.
 *
 * @return int
 **/
function pcntl_fork() {}

/**
 * pcntl_getpriority gets the priority of pid. Because priority levels
 * can differ between system types and kernel versions, please see your
 * system's getpriority(2) man page for specific details.
 *
 * @param int
 * @param int
 * @return int
 **/
function pcntl_getpriority($pid, $process_identifier) {}

/**
 * pcntl_setpriority sets the priority of pid.
 *
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function pcntl_setpriority($priority, $pid, $process_identifier) {}

/**
 * The pcntl_signal function installs a new signal handler for the signal
 * indicated by signo.
 *
 * @param int
 * @param callback
 * @param bool
 * @return bool
 **/
function pcntl_signal($signo, $handler, $restart_syscalls) {}

/**
 * The pcntl_signal_dispatch function calls the signal handlers installed
 * by pcntl_signal for each pending signal.
 *
 * @return bool
 **/
function pcntl_signal_dispatch() {}

/**
 * The pcntl_sigprocmask function adds, removes or sets blocked signals,
 * depending on the how parameter.
 *
 * @param int
 * @param array
 * @param array
 * @return bool
 **/
function pcntl_sigprocmask($how, $set, &$oldset) {}

/**
 * The pcntl_sigtimedwait function operates in exactly the same way as
 * pcntl_sigwaitinfo except that it takes two additional parameters,
 * seconds and nanoseconds, which enable an upper bound to be placed on
 * the time for which the script is suspended.
 *
 * @param array
 * @param array
 * @param int
 * @param int
 * @return int
 **/
function pcntl_sigtimedwait($set, &$siginfo, $seconds, $nanoseconds) {}

/**
 * The pcntl_sigwaitinfo function suspends execution of the calling
 * script until one of the signals given in set are delivered. If one of
 * the signal is already pending (e.g. blocked by pcntl_sigprocmask),
 * pcntl_sigwaitinfo will return immediately.
 *
 * @param array
 * @param array
 * @return int
 **/
function pcntl_sigwaitinfo($set, &$siginfo) {}

/**
 * The wait function suspends execution of the current process until a
 * child has exited, or until a signal is delivered whose action is to
 * terminate the current process or to call a signal handling function.
 * If a child has already exited by the time of the call (a so-called
 * "zombie" process), the function returns immediately. Any system
 * resources used by the child are freed. Please see your system's
 * wait(2) man page for specific details as to how wait works on your
 * system.
 *
 * @param int
 * @param int
 * @return int
 **/
function pcntl_wait(&$status, $options) {}

/**
 * Suspends execution of the current process until a child as specified
 * by the pid argument has exited, or until a signal is delivered whose
 * action is to terminate the current process or to call a signal
 * handling function.
 * 
 * If a child as requested by pid has already exited by the time of the
 * call (a so-called "zombie" process), the function returns immediately.
 * Any system resources used by the child are freed. Please see your
 * system's waitpid(2) man page for specific details as to how waitpid
 * works on your system.
 *
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function pcntl_waitpid($pid, &$status, $options) {}

/**
 * Returns the return code of a terminated child. This function is only
 * useful if pcntl_wifexited returned .
 *
 * @param int
 * @return int
 **/
function pcntl_wexitstatus($status) {}

/**
 * Checks whether the child status code represents a normal exit.
 *
 * @param int
 * @return bool
 **/
function pcntl_wifexited($status) {}

/**
 * Checks whether the child process exited because of a signal which was
 * not caught.
 *
 * @param int
 * @return bool
 **/
function pcntl_wifsignaled($status) {}

/**
 * Checks whether the child process which caused the return is currently
 * stopped; this is only possible if the call to pcntl_waitpid was done
 * using the option WUNTRACED.
 *
 * @param int
 * @return bool
 **/
function pcntl_wifstopped($status) {}

/**
 * Returns the number of the signal which caused the child to stop. This
 * function is only useful if pcntl_wifstopped returned .
 *
 * @param int
 * @return int
 **/
function pcntl_wstopsig($status) {}

/**
 * Returns the number of the signal that caused the child process to
 * terminate. This function is only useful if pcntl_wifsignaled returned
 * .
 *
 * @param int
 * @return int
 **/
function pcntl_wtermsig($status) {}

/**
 * Activates a previously created structure element or other content
 * item.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_activate_item($pdfdoc, $id) {}

/**
 * Adds a link to a web resource.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_create_action with type=Launch and PDF_create_annotation with
 * type=Link instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_add_launchlink($pdfdoc, $llx, $lly, $urx, $ury, $filename) {}

/**
 * Add a link annotation to a target within the current PDF file.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_create_action with type=GoTo and PDF_create_annotation with
 * type=Link instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param int
 * @param string
 * @return bool
 **/
function PDF_add_locallink($pdfdoc, $lowerleftx, $lowerlefty, $upperrightx, $upperrighty, $page, $dest) {}

/**
 * Creates a named destination on an arbitrary page in the current
 * document.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function PDF_add_nameddest($pdfdoc, $name, $optlist) {}

/**
 * Sets an annotation for the current page.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_create_annotation with type=Text instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function PDF_add_note($pdfdoc, $llx, $lly, $urx, $ury, $contents, $title, $icon, $open) {}

/**
 * Add a file link annotation to a PDF target.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_create_action with type=GoToR and PDF_create_annotation with
 * type=Link instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param int
 * @param string
 * @return bool
 **/
function PDF_add_pdflink($pdfdoc, $bottom_left_x, $bottom_left_y, $up_right_x, $up_right_y, $filename, $page, $dest) {}

/**
 * Adds a cell to a new or existing table.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function PDF_add_table_cell($pdfdoc, $table, $column, $row, $text, $optlist) {}

/**
 * Creates a Textflow object, or adds text and explicit options to an
 * existing Textflow.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return int
 **/
function PDF_add_textflow($pdfdoc, $textflow, $text, $optlist) {}

/**
 * Adds an existing image as thumbnail for the current page.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_add_thumbnail($pdfdoc, $image) {}

/**
 * Adds a weblink annotation to a target url on the Web.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_create_action with type=URI and PDF_create_annotation with
 * type=Link instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_add_weblink($pdfdoc, $lowerleftx, $lowerlefty, $upperrightx, $upperrighty, $url) {}

/**
 * Adds a counterclockwise circular arc.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_arc($p, $x, $y, $r, $alpha, $beta) {}

/**
 * Except for the drawing direction, this function behaves exactly like
 * PDF_arc.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_arcn($p, $x, $y, $r, $alpha, $beta) {}

/**
 * Adds a file attachment annotation.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_create_annotation with type=FileAttachment instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function PDF_attach_file($pdfdoc, $llx, $lly, $urx, $ury, $filename, $description, $author, $mimetype, $icon) {}

/**
 * Creates a new PDF file subject to various options.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_begin_document($pdfdoc, $filename, $optlist) {}

/**
 * Starts a Type 3 font definition.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_begin_font($pdfdoc, $filename, $a, $b, $c, $d, $e, $f, $optlist) {}

/**
 * Starts a glyph definition for a Type 3 font.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_begin_glyph($pdfdoc, $glyphname, $wx, $llx, $lly, $urx, $ury) {}

/**
 * Opens a structure element or other content item with attributes
 * supplied as options.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_begin_item($pdfdoc, $tag, $optlist) {}

/**
 * Starts a layer for subsequent output on the page.
 * 
 * This function requires PDF 1.5.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_begin_layer($pdfdoc, $layer) {}

/**
 * Adds a new page to the document.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_begin_page_ext instead.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_begin_page($pdfdoc, $width, $height) {}

/**
 * Adds a new page to the document, and specifies various options. The
 * parameters width and height are the dimensions of the new page in
 * points.
 * 
 * Common Page Sizes in Points
 * 
 * name size
 * 
 * A0 2380 x 3368
 * 
 * A1 1684 x 2380
 * 
 * A2 1190 x 1684
 * 
 * A3 842 x 1190
 * 
 * A4 595 x 842
 * 
 * A5 421 x 595
 * 
 * A6 297 x 421
 * 
 * B5 501 x 709
 * 
 * letter (8.5" x 11") 612 x 792
 * 
 * legal (8.5" x 14") 612 x 1008
 * 
 * ledger (17" x 11") 1224 x 792
 * 
 * 11" x 17" 792 x 1224
 *
 * @param resource
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_begin_page_ext($pdfdoc, $width, $height, $optlist) {}

/**
 * Starts a new pattern definition.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param int
 * @return int
 **/
function PDF_begin_pattern($pdfdoc, $width, $height, $xstep, $ystep, $painttype) {}

/**
 * Starts a new template definition.
 * 
 * This function is deprecated since PDFlib version 7, use
 * PDF_begin_template_ext instead.
 *
 * @param resource
 * @param float
 * @param float
 * @return int
 **/
function PDF_begin_template($pdfdoc, $width, $height) {}

/**
 * Starts a new template definition.
 *
 * @param resource
 * @param float
 * @param float
 * @param string
 * @return int
 **/
function PDF_begin_template_ext($pdfdoc, $width, $height, $optlist) {}

/**
 * Adds a circle.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_circle($pdfdoc, $x, $y, $r) {}

/**
 * Uses the current path as clipping path, and terminate the path.
 *
 * @param resource
 * @return bool
 **/
function PDF_clip($p) {}

/**
 * Closes the generated PDF file, and frees all document-related
 * resources.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_end_document instead.
 *
 * @param resource
 * @return bool
 **/
function PDF_close($p) {}

/**
 * Closes the current path.
 *
 * @param resource
 * @return bool
 **/
function PDF_closepath($p) {}

/**
 * Closes the path, fills, and strokes it.
 *
 * @param resource
 * @return bool
 **/
function PDF_closepath_fill_stroke($p) {}

/**
 * Closes the path, and strokes it.
 *
 * @param resource
 * @return bool
 **/
function PDF_closepath_stroke($p) {}

/**
 * Closes an image retrieved with the PDF_open_image function.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_close_image($p, $image) {}

/**
 * Closes all open page handles, and closes the input PDF document.
 * 
 * This function is deprecated since PDFlib version 7, use
 * PDF_close_pdi_document instead.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_close_pdi($p, $doc) {}

/**
 * Closes the page handle, and frees all page-related resources.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_close_pdi_page($p, $page) {}

/**
 * Concatenates a matrix to the current transformation matrix (CTM).
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_concat($p, $a, $b, $c, $d, $e, $f) {}

/**
 * Prints text at the next line.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_continue_text($p, $text) {}

/**
 * Creates a 3D view.
 * 
 * This function requires PDF 1.6.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_create_3dview($pdfdoc, $username, $optlist) {}

/**
 * Creates an action which can be applied to various objects and events.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_create_action($pdfdoc, $type, $optlist) {}

/**
 * Creates a rectangular annotation on the current page.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @return bool
 **/
function PDF_create_annotation($pdfdoc, $llx, $lly, $urx, $ury, $type, $optlist) {}

/**
 * Creates a bookmark subject to various options.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_create_bookmark($pdfdoc, $text, $optlist) {}

/**
 * Creates a form field on the current page subject to various options.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function PDF_create_field($pdfdoc, $llx, $lly, $urx, $ury, $name, $type, $optlist) {}

/**
 * Creates a form field group subject to various options.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function PDF_create_fieldgroup($pdfdoc, $name, $optlist) {}

/**
 * Creates a graphics state object subject to various options.
 *
 * @param resource
 * @param string
 * @return int
 **/
function PDF_create_gstate($pdfdoc, $optlist) {}

/**
 * Creates a named virtual read-only file from data provided in memory.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function PDF_create_pvf($pdfdoc, $filename, $data, $optlist) {}

/**
 * Preprocesses text for later formatting and creates a textflow object.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_create_textflow($pdfdoc, $text, $optlist) {}

/**
 * Draws a Bezier curve from the current point, using 3 more control
 * points.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_curveto($p, $x1, $y1, $x2, $y2, $x3, $y3) {}

/**
 * Creates a new layer definition.
 * 
 * This function requires PDF 1.5.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_define_layer($pdfdoc, $name, $optlist) {}

/**
 * Deletes a PDFlib object, and frees all internal resources.
 *
 * @param resource
 * @return bool
 **/
function PDF_delete($pdfdoc) {}

/**
 * Deletes a named virtual file and frees its data structures (but not
 * the contents).
 *
 * @param resource
 * @param string
 * @return int
 **/
function PDF_delete_pvf($pdfdoc, $filename) {}

/**
 * Deletes a table and all associated data structures.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function PDF_delete_table($pdfdoc, $table, $optlist) {}

/**
 * Deletes a textflow and the associated data structures.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_delete_textflow($pdfdoc, $textflow) {}

/**
 * Adds a glyph name and/or Unicode value to a custom encoding.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @param int
 * @return bool
 **/
function PDF_encoding_set_char($pdfdoc, $encoding, $slot, $glyphname, $uv) {}

/**
 * Ends the current path without filling or stroking it.
 *
 * @param resource
 * @return bool
 **/
function PDF_endpath($p) {}

/**
 * Closes the generated PDF file and applies various options.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_end_document($pdfdoc, $optlist) {}

/**
 * Terminates a Type 3 font definition.
 *
 * @param resource
 * @return bool
 **/
function PDF_end_font($pdfdoc) {}

/**
 * Terminates a glyph definition for a Type 3 font.
 *
 * @param resource
 * @return bool
 **/
function PDF_end_glyph($pdfdoc) {}

/**
 * Closes a structure element or other content item.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_end_item($pdfdoc, $id) {}

/**
 * Deactivates all active layers.
 * 
 * This function requires PDF 1.5.
 *
 * @param resource
 * @return bool
 **/
function PDF_end_layer($pdfdoc) {}

/**
 * Finishes the page.
 *
 * @param resource
 * @return bool
 **/
function PDF_end_page($p) {}

/**
 * Finishes a page, and applies various options.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_end_page_ext($pdfdoc, $optlist) {}

/**
 * Finishes the pattern definition.
 *
 * @param resource
 * @return bool
 **/
function PDF_end_pattern($p) {}

/**
 * Finishes a template definition.
 *
 * @param resource
 * @return bool
 **/
function PDF_end_template($p) {}

/**
 * Fills the interior of the current path with the current fill color.
 *
 * @param resource
 * @return bool
 **/
function PDF_fill($p) {}

/**
 * Fills an image block with variable data according to its properties.
 * 
 * This function is only available in the PDFlib Personalization Server
 * (PPS).
 *
 * @param resource
 * @param int
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function PDF_fill_imageblock($pdfdoc, $page, $blockname, $image, $optlist) {}

/**
 * Fills a PDF block with variable data according to its properties.
 * 
 * This function is only available in the PDFlib Personalization Server
 * (PPS).
 *
 * @param resource
 * @param int
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function PDF_fill_pdfblock($pdfdoc, $page, $blockname, $contents, $optlist) {}

/**
 * Fills and strokes the current path with the current fill and stroke
 * color.
 *
 * @param resource
 * @return bool
 **/
function PDF_fill_stroke($p) {}

/**
 * Fills a text block with variable data according to its properties.
 * 
 * This function is only available in the PDFlib Personalization Server
 * (PPS).
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function PDF_fill_textblock($pdfdoc, $page, $blockname, $text, $optlist) {}

/**
 * Search for a font and prepare it for later use with PDF_setfont. The
 * metrics will be loaded, and if embed is nonzero, the font file will be
 * checked, but not yet used. encoding is one of builtin, macroman,
 * winansi, host, a user-defined encoding name or the name of a CMap.
 * Parameter embed is optional before PHP 4.3.5 or with PDFlib less than
 * 5.
 * 
 * This function is deprecated since PDFlib version 5, use PDF_load_font
 * instead.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function PDF_findfont($p, $fontname, $encoding, $embed) {}

/**
 * Places an image or template on the page, subject to various options.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_fit_image($pdfdoc, $image, $x, $y, $optlist) {}

/**
 * Places an imported PDF page on the page, subject to various options.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_fit_pdi_page($pdfdoc, $page, $x, $y, $optlist) {}

/**
 * Places a table on the page fully or partially.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return string
 **/
function PDF_fit_table($pdfdoc, $table, $llx, $lly, $urx, $ury, $optlist) {}

/**
 * Formats the next portion of a textflow into a rectangular area.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return string
 **/
function PDF_fit_textflow($pdfdoc, $textflow, $llx, $lly, $urx, $ury, $optlist) {}

/**
 * Places a single line of text on the page, subject to various options.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function PDF_fit_textline($pdfdoc, $text, $x, $y, $optlist) {}

/**
 * Gets the name of the API function which threw the last exception or
 * failed.
 *
 * @param resource
 * @return string
 **/
function PDF_get_apiname($pdfdoc) {}

/**
 * Fetches the buffer containing the generated PDF data.
 *
 * @param resource
 * @return string
 **/
function PDF_get_buffer($p) {}

/**
 * Gets the text of the last thrown exception or the reason for a failed
 * function call.
 *
 * @param resource
 * @return string
 **/
function PDF_get_errmsg($pdfdoc) {}

/**
 * Gets the number of the last thrown exception or the reason for a
 * failed function call.
 *
 * @param resource
 * @return int
 **/
function PDF_get_errnum($pdfdoc) {}

/**
 * This function is deprecated since PDFlib version 5, use PDF_get_value
 * with the parameter major instead.
 *
 * @return int
 **/
function PDF_get_majorversion() {}

/**
 * Returns the minor version number of the PDFlib version.
 * 
 * This function is deprecated since PDFlib version 5, use PDF_get_value
 * with the parameter minor instead.
 *
 * @return int
 **/
function PDF_get_minorversion() {}

/**
 * Gets the contents of some PDFlib parameter with string type.
 *
 * @param resource
 * @param string
 * @param float
 * @return string
 **/
function PDF_get_parameter($p, $key, $modifier) {}

/**
 * Gets the contents of a PDI document parameter with string type.
 * 
 * This function is deprecated since PDFlib version 7, use
 * PDF_pcos_get_string instead.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function PDF_get_pdi_parameter($p, $key, $doc, $page, $reserved) {}

/**
 * Gets the contents of a PDI document parameter with numerical type.
 * 
 * This function is deprecated since PDFlib version 7, use
 * PDF_pcos_get_number instead.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @param int
 * @return float
 **/
function PDF_get_pdi_value($p, $key, $doc, $page, $reserved) {}

/**
 * Gets the value of some PDFlib parameter with numerical type.
 *
 * @param resource
 * @param string
 * @param float
 * @return float
 **/
function PDF_get_value($p, $key, $modifier) {}

/**
 * Queries detailed information about a loaded font.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return float
 **/
function PDF_info_font($pdfdoc, $font, $keyword, $optlist) {}

/**
 * Queries information about a matchbox on the current page.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return float
 **/
function PDF_info_matchbox($pdfdoc, $boxname, $num, $keyword) {}

/**
 * Retrieves table information related to the most recently placed table
 * instance.
 *
 * @param resource
 * @param int
 * @param string
 * @return float
 **/
function PDF_info_table($pdfdoc, $table, $keyword) {}

/**
 * Queries the current state of a textflow.
 *
 * @param resource
 * @param int
 * @param string
 * @return float
 **/
function PDF_info_textflow($pdfdoc, $textflow, $keyword) {}

/**
 * Performs textline formatting and queries the resulting metrics.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return float
 **/
function PDF_info_textline($pdfdoc, $text, $keyword, $optlist) {}

/**
 * Reset all color and graphics state parameters to their defaults.
 *
 * @param resource
 * @return bool
 **/
function PDF_initgraphics($p) {}

/**
 * Draws a line from the current point to another point.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_lineto($p, $x, $y) {}

/**
 * Loads a 3D model from a disk-based or virtual file.
 * 
 * This function requires PDF 1.6.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_load_3ddata($pdfdoc, $filename, $optlist) {}

/**
 * Searches for a font and prepares it for later use.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function PDF_load_font($pdfdoc, $fontname, $encoding, $optlist) {}

/**
 * Searches for an ICC profile, and prepares it for later use.
 *
 * @param resource
 * @param string
 * @param string
 * @return int
 **/
function PDF_load_iccprofile($pdfdoc, $profilename, $optlist) {}

/**
 * Opens a disk-based or virtual image file subject to various options.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function PDF_load_image($pdfdoc, $imagetype, $filename, $optlist) {}

/**
 * Finds a built-in spot color name, or makes a named spot color from the
 * current fill color.
 *
 * @param resource
 * @param string
 * @return int
 **/
function PDF_makespotcolor($p, $spotname) {}

/**
 * Sets the current point for graphics output.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_moveto($p, $x, $y) {}

/**
 * Creates a new PDFlib object with default settings.
 *
 * @return resource
 **/
function PDF_new() {}

/**
 * Opens a raw CCITT image.
 * 
 * This function is deprecated since PDFlib version 5, use PDF_load_image
 * instead.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return int
 **/
function PDF_open_ccitt($pdfdoc, $filename, $width, $height, $BitReverse, $k, $Blackls1) {}

/**
 * Creates a new PDF file using the supplied file name.
 * 
 * This function is deprecated since PDFlib version 6, use
 * PDF_begin_document instead.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_open_file($p, $filename) {}

/**
 * Uses image data from a variety of data sources.
 * 
 * This function is deprecated since PDFlib version 5, use virtual files
 * and PDF_load_image instead.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function PDF_open_image($p, $imagetype, $source, $data, $length, $width, $height, $components, $bpc, $params) {}

/**
 * Opens an image file.
 * 
 * This function is deprecated since PDFlib version 5, use PDF_load_image
 * with the colorize, ignoremask, invert, mask, masked, and page options
 * instead.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function PDF_open_image_file($p, $imagetype, $filename, $stringparam, $intparam) {}

/**
 * This function is not supported by PDFlib GmbH.
 *
 * @param resource
 * @param resource
 * @return int
 **/
function PDF_open_memory_image($p, $image) {}

/**
 * Opens a disk-based or virtual PDF document and prepares it for later
 * use.
 * 
 * This function is deprecated since PDFlib version 7, use
 * PDF_open_pdi_document instead.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function PDF_open_pdi($pdfdoc, $filename, $optlist, $len) {}

/**
 * Prepares a page for later use with PDF_fit_pdi_page.
 *
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function PDF_open_pdi_page($p, $doc, $pagenumber, $optlist) {}

/**
 * Gets the value of a pCOS path with type number or boolean.
 *
 * @param resource
 * @param int
 * @param string
 * @return float
 **/
function PDF_pcos_get_number($p, $doc, $path) {}

/**
 * Gets the contents of a pCOS path with type stream, fstream, or string.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return string
 **/
function PDF_pcos_get_stream($p, $doc, $optlist, $path) {}

/**
 * Gets the value of a pCOS path with type name, string, or boolean.
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function PDF_pcos_get_string($p, $doc, $path) {}

/**
 * Places an image and scales it.
 * 
 * This function is deprecated since PDFlib version 5, use PDF_fit_image
 * instead.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_place_image($pdfdoc, $image, $x, $y, $scale) {}

/**
 * Places a PDF page and scales it.
 * 
 * This function is deprecated since PDFlib version 5, use
 * PDF_fit_pdi_page instead.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_place_pdi_page($pdfdoc, $page, $x, $y, $sx, $sy) {}

/**
 * Processes certain elements of an imported PDF document.
 *
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function PDF_process_pdi($pdfdoc, $doc, $page, $optlist) {}

/**
 * Draws a rectangle.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_rect($p, $x, $y, $width, $height) {}

/**
 * Restores the most recently saved graphics state.
 *
 * @param resource
 * @return bool
 **/
function PDF_restore($p) {}

/**
 * Resumes a page to add more content to it.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_resume_page($pdfdoc, $optlist) {}

/**
 * Rotates the coordinate system.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_rotate($p, $phi) {}

/**
 * Saves the current graphics state.
 *
 * @param resource
 * @return bool
 **/
function PDF_save($p) {}

/**
 * Scales the coordinate system.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_scale($p, $sx, $sy) {}

/**
 * Sets the current color space and color.
 *
 * @param resource
 * @param string
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_setcolor($p, $fstype, $colorspace, $c1, $c2, $c3, $c4) {}

/**
 * Sets the current dash pattern to b black and w white units.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_setdash($pdfdoc, $b, $w) {}

/**
 * Sets a dash pattern defined by an option list.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_setdashpattern($pdfdoc, $optlist) {}

/**
 * Sets the flatness parameter.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_setflat($pdfdoc, $flatness) {}

/**
 * Sets the current font in the specified size, using a font handle
 * returned by PDF_load_font.
 *
 * @param resource
 * @param int
 * @param float
 * @return bool
 **/
function PDF_setfont($pdfdoc, $font, $fontsize) {}

/**
 * Sets the current fill and stroke color to a gray value between 0 and 1
 * inclusive.
 * 
 * This function is deprecated since PDFlib version 4, use PDF_setcolor
 * instead.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_setgray($p, $g) {}

/**
 * Sets the current fill color to a gray value between 0 and 1 inclusive.
 * 
 * This function is deprecated since PDFlib version 4, use PDF_setcolor
 * instead.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_setgray_fill($p, $g) {}

/**
 * Sets the current stroke color to a gray value between 0 and 1
 * inclusive.
 * 
 * This function is deprecated since PDFlib version 4, use PDF_setcolor
 * instead.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_setgray_stroke($p, $g) {}

/**
 * Sets the linecap parameter to control the shape at the end of a path
 * with respect to stroking.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_setlinecap($p, $linecap) {}

/**
 * Sets the linejoin parameter to specify the shape at the corners of
 * paths that are stroked.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_setlinejoin($p, $value) {}

/**
 * Sets the current line width.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_setlinewidth($p, $width) {}

/**
 * Explicitly sets the current transformation matrix.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_setmatrix($p, $a, $b, $c, $d, $e, $f) {}

/**
 * Sets the miter limit.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function PDF_setmiterlimit($pdfdoc, $miter) {}

/**
 * Sets the current fill and stroke color to the supplied RGB values.
 * 
 * This function is deprecated since PDFlib version 4, use PDF_setcolor
 * instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_setrgbcolor($p, $red, $green, $blue) {}

/**
 * Sets the current fill color to the supplied RGB values.
 * 
 * This function is deprecated since PDFlib version 4, use PDF_setcolor
 * instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_setrgbcolor_fill($p, $red, $green, $blue) {}

/**
 * Sets the current stroke color to the supplied RGB values.
 * 
 * This function is deprecated since PDFlib version 4, use PDF_setcolor
 * instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_setrgbcolor_stroke($p, $red, $green, $blue) {}

/**
 * Sets the border color for all kinds of annotations.
 * 
 * This function is deprecated since PDFlib version 6, use the option
 * annotcolor in PDF_create_annotation instead.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function PDF_set_border_color($p, $red, $green, $blue) {}

/**
 * Sets the border dash style for all kinds of annotations.
 * 
 * This function is deprecated since PDFlib version 6, use the option
 * dasharray in PDF_create_annotation instead.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_set_border_dash($pdfdoc, $black, $white) {}

/**
 * Sets the border style for all kinds of annotations.
 * 
 * This function is deprecated since PDFlib version 6, use the options
 * borderstyle and linewidth in PDF_create_annotation instead.
 *
 * @param resource
 * @param string
 * @param float
 * @return bool
 **/
function PDF_set_border_style($pdfdoc, $style, $width) {}

/**
 * Activates a graphics state object.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_set_gstate($pdfdoc, $gstate) {}

/**
 * Fill document information field key with value.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function PDF_set_info($p, $key, $value) {}

/**
 * Defines hierarchical and group relationships among layers.
 * 
 * This function requires PDF 1.5.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function PDF_set_layer_dependency($pdfdoc, $type, $optlist) {}

/**
 * Sets some PDFlib parameter with string type.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function PDF_set_parameter($p, $key, $value) {}

/**
 * Sets the position for text output on the page.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_set_text_pos($p, $x, $y) {}

/**
 * Sets the value of some PDFlib parameter with numerical type.
 *
 * @param resource
 * @param string
 * @param float
 * @return bool
 **/
function PDF_set_value($p, $key, $value) {}

/**
 * Defines a blend from the current fill color to another color.
 * 
 * This function requires PDF 1.4 or above.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return int
 **/
function PDF_shading($pdfdoc, $shtype, $x0, $y0, $x1, $y1, $c1, $c2, $c3, $c4, $optlist) {}

/**
 * Defines a shading pattern using a shading object.
 * 
 * This function requires PDF 1.4 or above.
 *
 * @param resource
 * @param int
 * @param string
 * @return int
 **/
function PDF_shading_pattern($pdfdoc, $shading, $optlist) {}

/**
 * Fills an area with a shading, based on a shading object.
 * 
 * This function requires PDF 1.4 or above.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function PDF_shfill($pdfdoc, $shading) {}

/**
 * Prints text in the current font and size at the current position.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_show($pdfdoc, $text) {}

/**
 * This function is deprecated since PDFlib version 6, use
 * PDF_fit_textline for single lines, or the PDF_*_textflow functions for
 * multi-line formatting instead.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @return int
 **/
function PDF_show_boxed($p, $text, $left, $top, $width, $height, $mode, $feature) {}

/**
 * Prints text in the current font.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @return bool
 **/
function PDF_show_xy($p, $text, $x, $y) {}

/**
 * Skews the coordinate system in x and y direction by alpha and beta
 * degrees.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_skew($p, $alpha, $beta) {}

/**
 * Returns the width of text in an arbitrary font.
 *
 * @param resource
 * @param string
 * @param int
 * @param float
 * @return float
 **/
function PDF_stringwidth($p, $text, $font, $fontsize) {}

/**
 * Strokes the path with the current color and line width, and clear it.
 *
 * @param resource
 * @return bool
 **/
function PDF_stroke($p) {}

/**
 * Suspends the current page so that it can later be resumed with
 * PDF_resume_page.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function PDF_suspend_page($pdfdoc, $optlist) {}

/**
 * Translates the origin of the coordinate system.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function PDF_translate($p, $tx, $ty) {}

/**
 * Converts a string from UTF-8 format to UTF-16.
 *
 * @param resource
 * @param string
 * @param string
 * @return string
 **/
function PDF_utf8_to_utf16($pdfdoc, $utf8string, $ordering) {}

/**
 * Converts a string from UTF-16 format to UTF-8.
 *
 * @param resource
 * @param string
 * @return string
 **/
function PDF_utf16_to_utf8($pdfdoc, $utf16string) {}

/**
 * Converts a string from UTF-32 format to UTF-16.
 *
 * @param resource
 * @param string
 * @param string
 * @return string
 **/
function PDF_utf32_to_utf16($pdfdoc, $utf32string, $ordering) {}

/**
 * This function behaves exactly as fsockopen with the difference that
 * the connection is not closed after the script finishes. It is the
 * persistent version of fsockopen.
 *
 * @param string
 * @param int
 * @param int
 * @param string
 * @param float
 * @return resource
 **/
function pfsockopen($hostname, $port, &$errno, &$errstr, $timeout) {}

/**
 * pg_affected_rows returns the number of tuples (instances/records/rows)
 * affected by INSERT, UPDATE, and DELETE queries.
 *
 * @param resource
 * @return int
 **/
function pg_affected_rows($result) {}

/**
 * pg_cancel_query cancels an asynchronous query sent with pg_send_query,
 * pg_send_query_params or pg_send_execute. You cannot cancel a query
 * executed using pg_query.
 *
 * @param resource
 * @return bool
 **/
function pg_cancel_query($connection) {}

/**
 * PostgreSQL supports automatic character set conversion between server
 * and client for certain character sets. pg_client_encoding returns the
 * client encoding as a string. The returned string will be one of the
 * standard PostgreSQL encoding identifiers.
 *
 * @param resource
 * @return string
 **/
function pg_client_encoding($connection) {}

/**
 * pg_close closes the non-persistent connection to a PostgreSQL database
 * associated with the given connection resource.
 * 
 * If there is open large object resource on the connection, do not close
 * the connection before closing all large object resources.
 *
 * @param resource
 * @return bool
 **/
function pg_close($connection) {}

/**
 * pg_connect opens a connection to a PostgreSQL database specified by
 * the connection_string.
 * 
 * If a second call is made to pg_connect with the same connection_string
 * as an existing connection, the existing connection will be returned
 * unless you pass PGSQL_CONNECT_FORCE_NEW as connect_type.
 * 
 * The old syntax with multiple parameters $conn = pg_connect("host",
 * "port", "options", "tty", "dbname") has been deprecated.
 *
 * @param string
 * @param int
 * @return resource
 **/
function pg_connect($connection_string, $connect_type) {}

/**
 * pg_connection_busy determines whether or not a connection is busy. If
 * it is busy, a previous query is still executing. If pg_get_result is
 * used on the connection, it will be blocked.
 *
 * @param resource
 * @return bool
 **/
function pg_connection_busy($connection) {}

/**
 * pg_connection_reset resets the connection. It is useful for error
 * recovery.
 *
 * @param resource
 * @return bool
 **/
function pg_connection_reset($connection) {}

/**
 * pg_connection_status returns the status of the specified connection.
 *
 * @param resource
 * @return int
 **/
function pg_connection_status($connection) {}

/**
 * pg_convert checks and converts the values in assoc_array into suitable
 * values for use in a SQL statement. Precondition for pg_convert is the
 * existence of a table table_name which has at least as many columns as
 * assoc_array has elements. The fieldnames in table_name must match the
 * indices in assoc_array and the corresponding datatypes must be
 * compatible. Returns an array with the converted values on success,
 * otherwise.
 *
 * @param resource
 * @param string
 * @param array
 * @param int
 * @return array
 **/
function pg_convert($connection, $table_name, $assoc_array, $options) {}

/**
 * pg_copy_from inserts records into a table from rows. It issues a COPY
 * FROM SQL command internally to insert records.
 *
 * @param resource
 * @param string
 * @param array
 * @param string
 * @param string
 * @return bool
 **/
function pg_copy_from($connection, $table_name, $rows, $delimiter, $null_as) {}

/**
 * pg_copy_to copies a table to an array. It issues COPY TO SQL command
 * internally to retrieve records.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function pg_copy_to($connection, $table_name, $delimiter, $null_as) {}

/**
 * pg_dbname returns the name of the database that the given PostgreSQL
 * connection resource.
 *
 * @param resource
 * @return string
 **/
function pg_dbname($connection) {}

/**
 * pg_delete deletes records from a table specified by the keys and
 * values in assoc_array. If options is specified, pg_convert is applied
 * to assoc_array with the specified options.
 *
 * @param resource
 * @param string
 * @param array
 * @param int
 * @return mixed
 **/
function pg_delete($connection, $table_name, $assoc_array, $options) {}

/**
 * pg_end_copy syncs the PostgreSQL frontend (usually a web server
 * process) with the PostgreSQL server after doing a copy operation
 * performed by pg_put_line. pg_end_copy must be issued, otherwise the
 * PostgreSQL server may get out of sync with the frontend and will
 * report an error.
 *
 * @param resource
 * @return bool
 **/
function pg_end_copy($connection) {}

/**
 * pg_escape_bytea escapes string for bytea datatype. It returns escaped
 * string.
 *
 * @param resource
 * @param string
 * @return string
 **/
function pg_escape_bytea($connection, $data) {}

/**
 * pg_escape_string escapes a string for insertion into the database. It
 * returns an escaped string in the PostgreSQL format. Use of this
 * function is recommended instead of addslashes. If the type of the
 * column is bytea, pg_escape_bytea must be used instead.
 *
 * @param resource
 * @param string
 * @return string
 **/
function pg_escape_string($connection, $data) {}

/**
 * Sends a request to execute a prepared statement with given parameters,
 * and waits for the result.
 * 
 * pg_execute is like pg_query_params, but the command to be executed is
 * specified by naming a previously-prepared statement, instead of giving
 * a query string. This feature allows commands that will be used
 * repeatedly to be parsed and planned just once, rather than each time
 * they are executed. The statement must have been prepared previously in
 * the current session. pg_execute is supported only against PostgreSQL
 * 7.4 or higher connections; it will fail when using earlier versions.
 * 
 * The parameters are identical to pg_query_params, except that the name
 * of a prepared statement is given instead of a query string.
 *
 * @param resource
 * @param string
 * @param array
 * @return resource
 **/
function pg_execute($connection, $stmtname, $params) {}

/**
 * pg_fetch_all returns an array that contains all rows (records) in the
 * result resource.
 *
 * @param resource
 * @return array
 **/
function pg_fetch_all($result) {}

/**
 * pg_fetch_all_columns returns an array that contains all rows (records)
 * in a particular column of the result resource.
 *
 * @param resource
 * @param int
 * @return array
 **/
function pg_fetch_all_columns($result, $column) {}

/**
 * pg_fetch_array returns an array that corresponds to the fetched row
 * (record).
 * 
 * pg_fetch_array is an extended version of pg_fetch_row. In addition to
 * storing the data in the numeric indices (field number) to the result
 * array, it can also store the data using associative indices (field
 * name). It stores both indicies by default.
 * 
 * pg_fetch_array is NOT significantly slower than using pg_fetch_row,
 * and is significantly easier to use.
 *
 * @param resource
 * @param int
 * @param int
 * @return array
 **/
function pg_fetch_array($result, $row, $result_type) {}

/**
 * pg_fetch_assoc returns an associative array that corresponds to the
 * fetched row (records).
 * 
 * pg_fetch_assoc is equivalent to calling pg_fetch_array with
 * PGSQL_ASSOC as the optional third parameter. It only returns an
 * associative array. If you need the numeric indices, use pg_fetch_row.
 * 
 * pg_fetch_assoc is NOT significantly slower than using pg_fetch_row,
 * and is significantly easier to use.
 *
 * @param resource
 * @param int
 * @return array
 **/
function pg_fetch_assoc($result, $row) {}

/**
 * pg_fetch_object returns an object with properties that correspond to
 * the fetched row's field names. It can optionally instantiate an object
 * of a specific class, and pass parameters to that class's constructor.
 * 
 * Speed-wise, the function is identical to pg_fetch_array, and almost as
 * fast as pg_fetch_row (the difference is insignificant).
 *
 * @param resource
 * @param int
 * @param int
 * @return object
 **/
function pg_fetch_object($result, $row, $result_type) {}

/**
 * pg_fetch_result returns the value of a particular row and field
 * (column) in a PostgreSQL result resource.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function pg_fetch_result($result, $row, $field) {}

/**
 * pg_fetch_row fetches one row of data from the result associated with
 * the specified result resource.
 *
 * @param resource
 * @param int
 * @return array
 **/
function pg_fetch_row($result, $row) {}

/**
 * pg_field_is_null tests if a field in a PostgreSQL result resource is
 * SQL NULL or not.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return int
 **/
function pg_field_is_null($result, $row, $field) {}

/**
 * pg_field_name returns the name of the field occupying the given
 * field_number in the given PostgreSQL result resource. Field numbering
 * starts from 0.
 *
 * @param resource
 * @param int
 * @return string
 **/
function pg_field_name($result, $field_number) {}

/**
 * pg_field_num will return the number of the field number that
 * corresponds to the field_name in the given PostgreSQL result resource.
 *
 * @param resource
 * @param string
 * @return int
 **/
function pg_field_num($result, $field_name) {}

/**
 * pg_field_prtlen returns the actual printed length (number of
 * characters) of a specific value in a PostgreSQL result. Row numbering
 * starts at 0. This function will return -1 on an error.
 * 
 * field_name_or_number can be passed either as an integer or as a
 * string. If it is passed as an integer, PHP recognises it as the field
 * number, otherwise as field name.
 * 
 * See the example given at the pg_field_name page.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return int
 **/
function pg_field_prtlen($result, $row_number, $field_name_or_number) {}

/**
 * pg_field_size returns the internal storage size (in bytes) of the
 * field number in the given PostgreSQL result.
 *
 * @param resource
 * @param int
 * @return int
 **/
function pg_field_size($result, $field_number) {}

/**
 * pg_field_table returns the name of the table that field belongs to, or
 * the table's oid if oid_only is .
 *
 * @param resource
 * @param int
 * @param bool
 * @return mixed
 **/
function pg_field_table($result, $field_number, $oid_only) {}

/**
 * pg_field_type returns a string containing the base type name of the
 * given field_number in the given PostgreSQL result resource.
 *
 * @param resource
 * @param int
 * @return string
 **/
function pg_field_type($result, $field_number) {}

/**
 * pg_field_type_oid returns an integer containing the OID of the base
 * type of the given field_number in the given PostgreSQL result
 * resource.
 * 
 * You can get more information about the field type by querying
 * PostgreSQL's pg_type system table using the OID obtained with this
 * function. The PostgreSQL format_type function will convert a type OID
 * into an SQL standard type name.
 *
 * @param resource
 * @param int
 * @return int
 **/
function pg_field_type_oid($result, $field_number) {}

/**
 * pg_free_result frees the memory and data associated with the specified
 * PostgreSQL query result resource.
 * 
 * This function need only be called if memory consumption during script
 * execution is a problem. Otherwise, all result memory will be
 * automatically freed when the script ends.
 *
 * @param resource
 * @return bool
 **/
function pg_free_result($result) {}

/**
 * pg_get_notify gets notifications generated by a NOTIFY SQL command. To
 * receive notifications, the LISTEN SQL command must be issued.
 *
 * @param resource
 * @param int
 * @return array
 **/
function pg_get_notify($connection, $result_type) {}

/**
 * pg_get_pid gets the backend's (database server process) PID. The PID
 * is useful to determine whether or not a NOTIFY message received via
 * pg_get_notify is sent from another process or not.
 *
 * @param resource
 * @return int
 **/
function pg_get_pid($connection) {}

/**
 * pg_get_result gets the result resource from an asynchronous query
 * executed by pg_send_query, pg_send_query_params or pg_send_execute.
 * 
 * pg_send_query and the other asynchronous query functions can send
 * multiple queries to a PostgreSQL server and pg_get_result is used to
 * get each query's results, one by one.
 *
 * @param resource
 * @return resource
 **/
function pg_get_result($connection) {}

/**
 * pg_host returns the host name of the given PostgreSQL connection
 * resource is connected to.
 *
 * @param resource
 * @return string
 **/
function pg_host($connection) {}

/**
 * pg_insert inserts the values of assoc_array into the table specified
 * by table_name. If options is specified, pg_convert is applied to
 * assoc_array with the specified options.
 *
 * @param resource
 * @param string
 * @param array
 * @param int
 * @return mixed
 **/
function pg_insert($connection, $table_name, $assoc_array, $options) {}

/**
 * pg_last_error returns the last error message for a given connection.
 * 
 * Error messages may be overwritten by internal PostgreSQL (libpq)
 * function calls. It may not return an appropriate error message if
 * multiple errors occur inside a PostgreSQL module function.
 * 
 * Use pg_result_error, pg_result_error_field, pg_result_status and
 * pg_connection_status for better error handling.
 *
 * @param resource
 * @return string
 **/
function pg_last_error($connection) {}

/**
 * pg_last_notice returns the last notice message from the PostgreSQL
 * server on the specified connection. The PostgreSQL server sends notice
 * messages in several cases, for instance when creating a SERIAL column
 * in a table.
 * 
 * With pg_last_notice, you can avoid issuing useless queries by checking
 * whether or not the notice is related to your transaction.
 * 
 * Notice message tracking can be set to optional by setting 1 for
 * pgsql.ignore_notice in .
 * 
 * Notice message logging can be set to optional by setting 0 for
 * pgsql.log_notice in . Unless pgsql.ignore_notice is set to 0, notice
 * message cannot be logged.
 *
 * @param resource
 * @return string
 **/
function pg_last_notice($connection) {}

/**
 * pg_last_oid is used to retrieve the OID assigned to an inserted row.
 * 
 * OID field became an optional field from PostgreSQL 7.2 and will not be
 * present by default in PostgreSQL 8.1. When the OID field is not
 * present in a table, the programmer must use pg_result_status to check
 * for successful insertion.
 * 
 * To get the value of a SERIAL field in an inserted row, it is necessary
 * to use the PostgreSQL CURRVAL function, naming the sequence whose last
 * value is required. If the name of the sequence is unknown, the
 * pg_get_serial_sequence PostgreSQL 8.0 function is necessary.
 * 
 * PostgreSQL 8.1 has a function LASTVAL that returns the value of the
 * most recently used sequence in the session. This avoids the need for
 * naming the sequence, table or column altogether.
 *
 * @param resource
 * @return string
 **/
function pg_last_oid($result) {}

/**
 * pg_lo_close closes a large object. large_object is a resource for the
 * large object from pg_lo_open.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @return bool
 **/
function pg_lo_close($large_object) {}

/**
 * pg_lo_create creates a large object and returns the OID of the large
 * object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE
 * are not supported, the object is created always with both read and
 * write access. INV_ARCHIVE has been removed from PostgreSQL itself
 * (version 6.3 and above).
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * Instead of using the large object interface (which has no access
 * controls and is cumbersome to use), try PostgreSQL's bytea column type
 * and pg_escape_bytea.
 *
 * @param resource
 * @param mixed
 * @return int
 **/
function pg_lo_create($connection, $object_id) {}

/**
 * pg_lo_export takes a large object in a PostgreSQL database and saves
 * its contents to a file on the local filesystem.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function pg_lo_export($connection, $oid, $pathname) {}

/**
 * pg_lo_import creates a new large object in the database using a file
 * on the filesystem as its data source.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param string
 * @param mixed
 * @return int
 **/
function pg_lo_import($connection, $pathname, $object_id) {}

/**
 * pg_lo_open opens a large object in the database and returns large
 * object resource so that it can be manipulated.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param int
 * @param string
 * @return resource
 **/
function pg_lo_open($connection, $oid, $mode) {}

/**
 * pg_lo_read reads at most len bytes from a large object and returns it
 * as a string.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param int
 * @return string
 **/
function pg_lo_read($large_object, $len) {}

/**
 * pg_lo_read_all reads a large object and passes it straight through to
 * the browser after sending all pending headers. Mainly intended for
 * sending binary data like images or sound.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @return int
 **/
function pg_lo_read_all($large_object) {}

/**
 * pg_lo_seek seeks a position within a large object resource.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function pg_lo_seek($large_object, $offset, $whence) {}

/**
 * pg_lo_tell returns the current position (offset from the beginning) of
 * a large object.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @return int
 **/
function pg_lo_tell($large_object) {}

/**
 * pg_lo_unlink deletes a large object with the oid.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function pg_lo_unlink($connection, $oid) {}

/**
 * pg_lo_write writes data into a large object at the current seek
 * position.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function pg_lo_write($large_object, $data, $len) {}

/**
 * pg_meta_data returns table definition for table_name as an array.
 *
 * @param resource
 * @param string
 * @return array
 **/
function pg_meta_data($connection, $table_name) {}

/**
 * pg_num_fields returns the number of fields (columns) in a PostgreSQL
 * result resource.
 *
 * @param resource
 * @return int
 **/
function pg_num_fields($result) {}

/**
 * pg_num_rows will return the number of rows in a PostgreSQL result
 * resource.
 *
 * @param resource
 * @return int
 **/
function pg_num_rows($result) {}

/**
 * pg_options will return a string containing the options specified on
 * the given PostgreSQL connection resource.
 *
 * @param resource
 * @return string
 **/
function pg_options($connection) {}

/**
 * Looks up a current parameter setting of the server.
 * 
 * Certain parameter values are reported by the server automatically at
 * connection startup or whenever their values change.
 * pg_parameter_status can be used to interrogate these settings. It
 * returns the current value of a parameter if known, or if the parameter
 * is not known.
 * 
 * Parameters reported as of PostgreSQL 8.0 include server_version,
 * server_encoding, client_encoding, is_superuser, session_authorization,
 * DateStyle, TimeZone, and integer_datetimes. (server_encoding,
 * TimeZone, and integer_datetimes were not reported by releases before
 * 8.0.) Note that server_version, server_encoding and integer_datetimes
 * cannot change after PostgreSQL startup.
 * 
 * PostgreSQL 7.3 or lower servers do not report parameter settings,
 * pg_parameter_status includes logic to obtain values for server_version
 * and client_encoding anyway. Applications are encouraged to use
 * pg_parameter_status rather than ad hoc code to determine these values.
 *
 * @param resource
 * @param string
 * @return string
 **/
function pg_parameter_status($connection, $param_name) {}

/**
 * pg_pconnect opens a connection to a PostgreSQL database. It returns a
 * connection resource that is needed by other PostgreSQL functions.
 * 
 * If a second call is made to pg_pconnect with the same
 * connection_string as an existing connection, the existing connection
 * will be returned unless you pass PGSQL_CONNECT_FORCE_NEW as
 * connect_type.
 * 
 * To enable persistent connection, the pgsql.allow_persistent directive
 * must be set to On (which is the default). The maximum number of
 * persistent connection can be defined with the pgsql.max_persistent
 * directive (defaults to -1 for no limit). The total number of
 * connections can be set with the pgsql.max_links directive.
 * 
 * pg_close will not close persistent links generated by pg_pconnect.
 *
 * @param string
 * @param int
 * @return resource
 **/
function pg_pconnect($connection_string, $connect_type) {}

/**
 * pg_ping pings a database connection and tries to reconnect it if it is
 * broken.
 *
 * @param resource
 * @return bool
 **/
function pg_ping($connection) {}

/**
 * pg_port returns the port number that the given PostgreSQL connection
 * resource is connected to.
 *
 * @param resource
 * @return int
 **/
function pg_port($connection) {}

/**
 * pg_prepare creates a prepared statement for later execution with
 * pg_execute or pg_send_execute. This feature allows commands that will
 * be used repeatedly to be parsed and planned just once, rather than
 * each time they are executed. pg_prepare is supported only against
 * PostgreSQL 7.4 or higher connections; it will fail when using earlier
 * versions.
 * 
 * The function creates a prepared statement named stmtname from the
 * query string, which must contain a single SQL command. stmtname may be
 * "" to create an unnamed statement, in which case any pre-existing
 * unnamed statement is automatically replaced; otherwise it is an error
 * if the statement name is already defined in the current session. If
 * any parameters are used, they are referred to in the query as $1, $2,
 * etc.
 * 
 * Prepared statements for use with pg_prepare can also be created by
 * executing SQL PREPARE statements. (But pg_prepare is more flexible
 * since it does not require parameter types to be pre-specified.) Also,
 * although there is no PHP function for deleting a prepared statement,
 * the SQL DEALLOCATE statement can be used for that purpose.
 *
 * @param resource
 * @param string
 * @param string
 * @return resource
 **/
function pg_prepare($connection, $stmtname, $query) {}

/**
 * pg_put_line sends a NULL-terminated string to the PostgreSQL backend
 * server. This is needed in conjunction with PostgreSQL's COPY FROM
 * command.
 * 
 * COPY is a high-speed data loading interface supported by PostgreSQL.
 * Data is passed in without being parsed, and in a single transaction.
 * 
 * An alternative to using raw pg_put_line commands is to use
 * pg_copy_from. This is a far simpler interface.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function pg_put_line($connection, $data) {}

/**
 * pg_query executes the query on the specified database connection.
 * 
 * If an error occurs, and is returned, details of the error can be
 * retrieved using the pg_last_error function if the connection is valid.
 * 
 * Although connection can be omitted, it is not recommended, since it
 * can be the cause of hard to find bugs in scripts.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function pg_query($connection, $query) {}

/**
 * Submits a command to the server and waits for the result, with the
 * ability to pass parameters separately from the SQL command text.
 * 
 * pg_query_params is like pg_query, but offers additional functionality:
 * parameter values can be specified separately from the command string
 * proper. pg_query_params is supported only against PostgreSQL 7.4 or
 * higher connections; it will fail when using earlier versions.
 * 
 * If parameters are used, they are referred to in the query string as
 * $1, $2, etc. params specifies the actual values of the parameters. A
 * value in this array means the corresponding parameter is SQL NULL.
 * 
 * The primary advantage of pg_query_params over pg_query is that
 * parameter values may be separated from the query string, thus avoiding
 * the need for tedious and error-prone quoting and escaping. Unlike
 * pg_query, pg_query_params allows at most one SQL command in the given
 * string. (There can be semicolons in it, but not more than one nonempty
 * command.)
 *
 * @param resource
 * @param string
 * @param array
 * @return resource
 **/
function pg_query_params($connection, $query, $params) {}

/**
 * pg_result_error returns any error message associated with the result
 * resource. Therefore, the user has a better chance of getting the
 * correct error message than with pg_last_error.
 * 
 * The function pg_result_error_field can give much greater detail on
 * result errors than pg_result_error.
 * 
 * Because pg_query returns if the query fails, you must use
 * pg_send_query and pg_get_result to get the result handle.
 *
 * @param resource
 * @return string
 **/
function pg_result_error($result) {}

/**
 * pg_result_error_field returns one of the detailed error message fields
 * associated with result resource. It is only available against a
 * PostgreSQL 7.4 or above server. The error field is specified by the
 * fieldcode.
 * 
 * Because pg_query and pg_query_params return if the query fails, you
 * must use pg_send_query and pg_get_result to get the result handle.
 * 
 * If you need to get additional error information from failed pg_query
 * queries, use pg_set_error_verbosity and pg_last_error and then parse
 * the result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function pg_result_error_field($result, $fieldcode) {}

/**
 * pg_result_seek sets the internal row offset in a result resource.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function pg_result_seek($result, $offset) {}

/**
 * pg_result_status returns the status of a result resource, or the
 * PostgreSQL command completion tag associated with the result
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function pg_result_status($result, $type) {}

/**
 * pg_select selects records specified by assoc_array which has
 * field=&gt;value. For a successful query, it returns an array
 * containing all records and fields that match the condition specified
 * by assoc_array.
 * 
 * If options is specified, pg_convert is applied to assoc_array with the
 * specified flags.
 *
 * @param resource
 * @param string
 * @param array
 * @param int
 * @return mixed
 **/
function pg_select($connection, $table_name, $assoc_array, $options) {}

/**
 * Sends a request to execute a prepared statement with given parameters,
 * without waiting for the result(s).
 * 
 * This is similar to pg_send_query_params, but the command to be
 * executed is specified by naming a previously-prepared statement,
 * instead of giving a query string. The function's parameters are
 * handled identically to pg_execute. Like pg_execute, it will not work
 * on pre-7.4 versions of PostgreSQL.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function pg_send_execute($connection, $stmtname, $params) {}

/**
 * Sends a request to create a prepared statement with the given
 * parameters, without waiting for completion.
 * 
 * This is an asynchronous version of pg_prepare: it returns if it was
 * able to dispatch the request, and if not. After a successful call,
 * call pg_get_result to determine whether the server successfully
 * created the prepared statement. The function's parameters are handled
 * identically to pg_prepare. Like pg_prepare, it will not work on
 * pre-7.4 versions of PostgreSQL.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function pg_send_prepare($connection, $stmtname, $query) {}

/**
 * pg_send_query sends a query or queries asynchronously to the
 * connection. Unlike pg_query, it can send multiple queries at once to
 * PostgreSQL and get the results one by one using pg_get_result.
 * 
 * Script execution is not blocked while the queries are executing. Use
 * pg_connection_busy to check if the connection is busy (i.e. the query
 * is executing). Queries may be cancelled using pg_cancel_query.
 * 
 * Although the user can send multiple queries at once, multiple queries
 * cannot be sent over a busy connection. If a query is sent while the
 * connection is busy, it waits until the last query is finished and
 * discards all its results.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function pg_send_query($connection, $query) {}

/**
 * Submits a command and separate parameters to the server without
 * waiting for the result(s).
 * 
 * This is equivalent to pg_send_query except that query parameters can
 * be specified separately from the query string. The function's
 * parameters are handled identically to pg_query_params. Like
 * pg_query_params, it will not work on pre-7.4 PostgreSQL connections,
 * and it allows only one command in the query string.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function pg_send_query_params($connection, $query, $params) {}

/**
 * pg_set_client_encoding sets the client encoding and returns 0 if
 * success or -1 if error.
 * 
 * PostgreSQL will automatically convert data in the backend database
 * encoding into the frontend encoding.
 *
 * @param resource
 * @param string
 * @return int
 **/
function pg_set_client_encoding($connection, $encoding) {}

/**
 * Determines the verbosity of messages returned by pg_last_error and
 * pg_result_error.
 * 
 * pg_set_error_verbosity sets the verbosity mode, returning the
 * connection's previous setting. In PGSQL_ERRORS_TERSE mode, returned
 * messages include severity, primary text, and position only; this will
 * normally fit on a single line. The default mode (PGSQL_ERRORS_DEFAULT)
 * produces messages that include the above plus any detail, hint, or
 * context fields (these may span multiple lines). The
 * PGSQL_ERRORS_VERBOSE mode includes all available fields. Changing the
 * verbosity does not affect the messages available from already-existing
 * result objects, only subsequently-created ones.
 *
 * @param resource
 * @param int
 * @return int
 **/
function pg_set_error_verbosity($connection, $verbosity) {}

/**
 * pg_trace enables tracing of the PostgreSQL frontend/backend
 * communication to a file. To fully understand the results, one needs to
 * be familiar with the internals of PostgreSQL communication protocol.
 * 
 * For those who are not, it can still be useful for tracing errors in
 * queries sent to the server, you could do for example grep '^To
 * backend' trace.log and see what queries actually were sent to the
 * PostgreSQL server. For more information, refer to the PostgreSQL
 * Documentation.
 *
 * @param string
 * @param string
 * @param resource
 * @return bool
 **/
function pg_trace($pathname, $mode, $connection) {}

/**
 * Returns the current in-transaction status of the server.
 *
 * @param resource
 * @return int
 **/
function pg_transaction_status($connection) {}

/**
 * pg_tty returns the TTY name that server side debugging output is sent
 * to on the given PostgreSQL connection resource.
 *
 * @param resource
 * @return string
 **/
function pg_tty($connection) {}

/**
 * pg_unescape_bytea unescapes PostgreSQL bytea data values. It returns
 * the unescaped string, possibly containing binary data.
 *
 * @param string
 * @return string
 **/
function pg_unescape_bytea($data) {}

/**
 * Stop tracing started by pg_trace.
 *
 * @param resource
 * @return bool
 **/
function pg_untrace($connection) {}

/**
 * pg_update updates records that matches condition with data. If options
 * is specified, pg_convert is applied to data with specified options.
 *
 * @param resource
 * @param string
 * @param array
 * @param array
 * @param int
 * @return mixed
 **/
function pg_update($connection, $table_name, $data, $condition, $options) {}

/**
 * pg_version returns an array with the client, protocol and server
 * version. Protocol and server versions are only available if PHP was
 * compiled with PostgreSQL 7.4 or later.
 * 
 * For more detailed server information, use pg_parameter_status.
 *
 * @param resource
 * @return array
 **/
function pg_version($connection) {}

/**
 * This function prints out the credits listing the PHP developers,
 * modules, etc. It generates the appropriate HTML codes to insert the
 * information in a page.
 *
 * @param int
 * @return bool
 **/
function phpcredits($flag) {}

/**
 * Outputs a large amount of information about the current state of PHP.
 * This includes information about PHP compilation options and
 * extensions, the PHP version, server information and environment (if
 * compiled as a module), the PHP environment, OS version information,
 * paths, master and local values of configuration options, HTTP headers,
 * and the PHP License.
 * 
 * Because every system is setup differently, phpinfo is commonly used to
 * check configuration settings and for available predefined variables on
 * a given system.
 * 
 * phpinfo is also a valuable debugging tool as it contains all EGPCS
 * (Environment, GET, POST, Cookie, Server) data.
 *
 * @param int
 * @return bool
 **/
function phpinfo($what) {}

/**
 * Returns a string containing the version of the currently running PHP
 * parser or extension.
 *
 * @param string
 * @return string
 **/
function phpversion($extension) {}

/**
 * Performs a syntax (lint) check on the specified filename testing for
 * scripting errors.
 * 
 * This is similar to using php -l from the commandline except that this
 * function will execute (but not output) the checked filename.
 * 
 * For example, if a function is defined in filename, this defined
 * function will be available to the file that executed php_check_syntax,
 * but output from filename will be suppressed.
 *
 * @param string
 * @param string
 * @return bool
 **/
function php_check_syntax($filename, &$error_message) {}

/**
 * Check if a file is loaded, and retrieve its path.
 *
 * @return string
 **/
function php_ini_loaded_file() {}

/**
 * php_ini_scanned_files returns a comma-separated list of configuration
 * files parsed after . These files are found in a directory defined by
 * the --with-config-file-scan-dir option which is set during
 * compilation.
 * 
 * The returned configuration files also include the path as declared in
 * the --with-config-file-scan-dir option.
 *
 * @return string
 **/
function php_ini_scanned_files() {}

/**
 * This function returns the ID which can be used to display the PHP logo
 * using the built-in image. Logo is displayed only if expose_php is On.
 *
 * @return string
 **/
function php_logo_guid() {}

/**
 * @return string
 **/
function php_sapi_name() {}

/**
 * Returns the PHP source code in filename with PHP comments and
 * whitespace removed. This may be useful for determining the amount of
 * actual code in your scripts compared with the amount of comments. This
 * is similar to using php -w from the commandline.
 *
 * @param string
 * @return string
 **/
function php_strip_whitespace($filename) {}

/**
 * php_uname returns a description of the operating system PHP is running
 * on. This is the same string you see at the very top of the phpinfo
 * output. For the name of just the operating system, consider using the
 * PHP_OS constant, but keep in mind this constant will contain the
 * operating system PHP was built on.
 * 
 * On some older UNIX platforms, it may not be able to determine the
 * current OS information in which case it will revert to displaying the
 * OS PHP was built on. This will only happen if your uname() library
 * call either doesn't exist or doesn't work.
 *
 * @param string
 * @return string
 **/
function php_uname($mode) {}

/**
 * @return float
 **/
function pi() {}

/**
 * Converts a PNG file into a WBMP file.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function png2wbmp($pngname, $wbmpname, $dest_height, $dest_width, $threshold) {}

/**
 * Opens a pipe to a process executed by forking the command given by
 * command.
 *
 * @param string
 * @param string
 * @return resource
 **/
function popen($command, $mode) {}

/**
 * Every array has an internal pointer to its "pos" element, which is
 * initialized to the first element inserted into the array.
 *
 * @param array
 * @return mixed
 **/
function pos(&$array) {}

/**
 * posix_access checks the user's permission of a file.
 *
 * @param string
 * @param int
 * @return bool
 **/
function posix_access($file, $mode) {}

/**
 * Generates a string which is the pathname for the current controlling
 * terminal for the process. On error this will set errno, which can be
 * checked using posix_get_last_error
 *
 * @return string
 **/
function posix_ctermid() {}

/**
 * Gets the absolute pathname of the script's current working directory.
 * On error, it sets errno which can be checked using
 * posix_get_last_error
 *
 * @return string
 **/
function posix_getcwd() {}

/**
 * Return the numeric effective group ID of the current process.
 *
 * @return int
 **/
function posix_getegid() {}

/**
 * Return the numeric effective user ID of the current process. See also
 * posix_getpwuid for information on how to convert this into a useable
 * username.
 *
 * @return int
 **/
function posix_geteuid() {}

/**
 * Return the numeric real group ID of the current process.
 *
 * @return int
 **/
function posix_getgid() {}

/**
 * Gets information about a group provided its id.
 *
 * @param int
 * @return array
 **/
function posix_getgrgid($gid) {}

/**
 * Gets information about a group provided its name.
 *
 * @param string
 * @return array
 **/
function posix_getgrnam($name) {}

/**
 * Gets the group set of the current process.
 *
 * @return array
 **/
function posix_getgroups() {}

/**
 * Returns the login name of the user owning the current process.
 *
 * @return string
 **/
function posix_getlogin() {}

/**
 * Returns the process group identifier of the process pid.
 *
 * @param int
 * @return int
 **/
function posix_getpgid($pid) {}

/**
 * Return the process group identifier of the current process.
 *
 * @return int
 **/
function posix_getpgrp() {}

/**
 * Return the process identifier of the current process.
 *
 * @return int
 **/
function posix_getpid() {}

/**
 * Return the process identifier of the parent process of the current
 * process.
 *
 * @return int
 **/
function posix_getppid() {}

/**
 * Returns an array of information about the given user.
 *
 * @param string
 * @return array
 **/
function posix_getpwnam($username) {}

/**
 * Returns an array of information about the user referenced by the given
 * user ID.
 *
 * @param int
 * @return array
 **/
function posix_getpwuid($uid) {}

/**
 * posix_getrlimit returns an array of information about the current
 * resource's soft and hard limits.
 * 
 * Each resource has an associated soft and hard limit. The soft limit is
 * the value that the kernel enforces for the corresponding resource. The
 * hard limit acts as a ceiling for the soft limit. An unprivileged
 * process may only set its soft limit to a value from 0 to the hard
 * limit, and irreversibly lower its hard limit.
 *
 * @return array
 **/
function posix_getrlimit() {}

/**
 * Return the session id of the process pid. The session id of a process
 * is the process group id of the session leader.
 *
 * @param int
 * @return int
 **/
function posix_getsid($pid) {}

/**
 * Return the numeric real user ID of the current process.
 *
 * @return int
 **/
function posix_getuid() {}

/**
 * Retrieve the error number set by the last posix function that failed.
 * The system error message associated with the errno may be checked with
 * posix_strerror.
 *
 * @return int
 **/
function posix_get_last_error() {}

/**
 * Calculates the group access list for the user specified in name.
 *
 * @param string
 * @param int
 * @return bool
 **/
function posix_initgroups($name, $base_group_id) {}

/**
 * Determines if the file descriptor fd refers to a valid terminal type
 * device.
 *
 * @param int
 * @return bool
 **/
function posix_isatty($fd) {}

/**
 * Send the signal sig to the process with the process identifier pid.
 *
 * @param int
 * @param int
 * @return bool
 **/
function posix_kill($pid, $sig) {}

/**
 * posix_mkfifo creates a special FIFO file which exists in the file
 * system and acts as a bidirectional communication endpoint for
 * processes.
 *
 * @param string
 * @param int
 * @return bool
 **/
function posix_mkfifo($pathname, $mode) {}

/**
 * Creates a special or ordinary file.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function posix_mknod($pathname, $mode, $major, $minor) {}

/**
 * Set the effective group ID of the current process. This is a
 * privileged function and needs appropriate privileges (usually root) on
 * the system to be able to perform this function.
 *
 * @param int
 * @return bool
 **/
function posix_setegid($gid) {}

/**
 * Set the real user ID of the current process. This is a privileged
 * function and needs appropriate privileges (usually root) on the system
 * to be able to perform this function.
 *
 * @param int
 * @return bool
 **/
function posix_seteuid($uid) {}

/**
 * Set the real group ID of the current process. This is a privileged
 * function and needs appropriate privileges (usually root) on the system
 * to be able to perform this function. The appropriate order of function
 * calls is posix_setgid first, posix_setuid last.
 *
 * @param int
 * @return bool
 **/
function posix_setgid($gid) {}

/**
 * Let the process pid join the process group pgid.
 *
 * @param int
 * @param int
 * @return bool
 **/
function posix_setpgid($pid, $pgid) {}

/**
 * Make the current process a session leader.
 *
 * @return int
 **/
function posix_setsid() {}

/**
 * Set the real user ID of the current process. This is a privileged
 * function that needs appropriate privileges (usually root) on the
 * system to be able to perform this function.
 *
 * @param int
 * @return bool
 **/
function posix_setuid($uid) {}

/**
 * Returns the POSIX system error message associated with the given
 * errno. You may get the errno parameter by calling
 * posix_get_last_error.
 *
 * @param int
 * @return string
 **/
function posix_strerror($errno) {}

/**
 * Gets information about the current CPU usage.
 *
 * @return array
 **/
function posix_times() {}

/**
 * Returns a string for the absolute path to the current terminal device
 * that is open on the file descriptor fd.
 *
 * @param int
 * @return string
 **/
function posix_ttyname($fd) {}

/**
 * Gets information about the system.
 * 
 * Posix requires that assumptions must not be made about the format of
 * the values, e.g. the assumption that a release may contain three
 * digits or anything else returned by this function.
 *
 * @return array
 **/
function posix_uname() {}

/**
 * Returns base raised to the power of exp.
 *
 * @param number
 * @param number
 * @return number
 **/
function pow($base, $exp) {}

/**
 * preg_filter is identical to preg_replace except it only returns the
 * matches. For details about how this function works, read the
 * preg_replace documentation.
 *
 * @param mixed
 * @param mixed
 * @param mixed
 * @param int
 * @param int
 * @return mixed
 **/
function preg_filter($pattern, $replacement, $subject, $limit, &$count) {}

/**
 * Returns the array consisting of the elements of the input array that
 * match the given pattern.
 *
 * @param string
 * @param array
 * @param int
 * @return array
 **/
function preg_grep($pattern, $input, $flags) {}

/**
 * Returns the error code of the last PCRE regex execution.
 * 
 * preg_last_error example
 *
 * @return int
 **/
function preg_last_error() {}

/**
 * Searches subject for a match to the regular expression given in
 * pattern.
 *
 * @param string
 * @param string
 * @param array
 * @param int
 * @param int
 * @return int
 **/
function preg_match($pattern, $subject, &$matches, $flags, $offset) {}

/**
 * Searches subject for all matches to the regular expression given in
 * pattern and puts them in matches in the order specified by flags.
 * 
 * After the first match is found, the subsequent searches are continued
 * on from end of the last match.
 *
 * @param string
 * @param string
 * @param array
 * @param int
 * @param int
 * @return int
 **/
function preg_match_all($pattern, $subject, &$matches, $flags, $offset) {}

/**
 * preg_quote takes str and puts a backslash in front of every character
 * that is part of the regular expression syntax. This is useful if you
 * have a run-time string that you need to match in some text and the
 * string may contain special regex characters.
 * 
 * The special regular expression characters are: . \ + * ? [ ^ ] $ ( ) {
 * } = ! | : -
 *
 * @param string
 * @param string
 * @return string
 **/
function preg_quote($str, $delimiter) {}

/**
 * Searches subject for matches to pattern and replaces them with
 * replacement.
 *
 * @param mixed
 * @param mixed
 * @param mixed
 * @param int
 * @param int
 * @return mixed
 **/
function preg_replace($pattern, $replacement, $subject, $limit, &$count) {}

/**
 * The behavior of this function is almost identical to preg_replace,
 * except for the fact that instead of replacement parameter, one should
 * specify a callback.
 *
 * @param mixed
 * @param callback
 * @param mixed
 * @param int
 * @param int
 * @return mixed
 **/
function preg_replace_callback($pattern, $callback, $subject, $limit, &$count) {}

/**
 * Split the given string by a regular expression.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @return array
 **/
function preg_split($pattern, $subject, $limit, $flags) {}

/**
 * Rewind the internal array pointer.
 * 
 * prev behaves just like next, except it rewinds the internal array
 * pointer one place instead of advancing it.
 *
 * @param array
 * @return mixed
 **/
function prev(&$array) {}

/**
 * This function deletes the printers spool file.
 *
 * @param resource
 * @return void
 **/
function printer_abort($printer_handle) {}

/**
 * This function closes the printer connection. printer_close also closes
 * the active device context.
 *
 * @param resource
 * @return void
 **/
function printer_close($printer_handle) {}

/**
 * The function creates a new brush and returns a handle to it. A brush
 * is used to fill shapes. For an example see printer_select_brush.
 *
 * @param int
 * @param string
 * @return resource
 **/
function printer_create_brush($style, $color) {}

/**
 * The function creates a new device context. A device context is used to
 * customize the graphic objects of the document.
 *
 * @param resource
 * @return void
 **/
function printer_create_dc($printer_handle) {}

/**
 * The function creates a new font and returns a handle to it. A font is
 * used to draw text. For an example see printer_select_font.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @param bool
 * @param bool
 * @param bool
 * @param int
 * @return resource
 **/
function printer_create_font($face, $height, $width, $font_weight, $italic, $underline, $strikeout, $orientation) {}

/**
 * The function creates a new pen and returns a handle to it. A pen is
 * used to draw lines and curves. For an example see printer_select_pen.
 *
 * @param int
 * @param int
 * @param string
 * @return resource
 **/
function printer_create_pen($style, $width, $color) {}

/**
 * The function deletes the selected brush. For an example see
 * printer_select_brush.
 *
 * @param resource
 * @return void
 **/
function printer_delete_brush($brush_handle) {}

/**
 * The function deletes the device context. For an example see
 * printer_create_dc.
 *
 * @param resource
 * @return bool
 **/
function printer_delete_dc($printer_handle) {}

/**
 * The function deletes the selected font. For an example see
 * printer_select_font.
 *
 * @param resource
 * @return void
 **/
function printer_delete_font($font_handle) {}

/**
 * The function deletes the selected pen. For an example see
 * printer_select_pen.
 *
 * @param resource
 * @return void
 **/
function printer_delete_pen($pen_handle) {}

/**
 * The function draws an bmp.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function printer_draw_bmp($printer_handle, $filename, $x, $y, $width, $height) {}

/**
 * The function simply draws an chord.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_chord($printer_handle, $rec_x, $rec_y, $rec_x1, $rec_y1, $rad_x, $rad_y, $rad_x1, $rad_y1) {}

/**
 * The function draws an ellipse.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_elipse($printer_handle, $ul_x, $ul_y, $lr_x, $lr_y) {}

/**
 * The function draws a line using the selected pen.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_line($printer_handle, $from_x, $from_y, $to_x, $to_y) {}

/**
 * The function draws an pie.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_pie($printer_handle, $rec_x, $rec_y, $rec_x1, $rec_y1, $rad1_x, $rad1_y, $rad2_x, $rad2_y) {}

/**
 * The function draws a rectangle.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_rectangle($printer_handle, $ul_x, $ul_y, $lr_x, $lr_y) {}

/**
 * The function draws a rectangle with rounded corners.
 *
 * @param resource
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_roundrect($printer_handle, $ul_x, $ul_y, $lr_x, $lr_y, $width, $height) {}

/**
 * The function draws text at position x, y using the selected font.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return void
 **/
function printer_draw_text($printer_handle, $text, $x, $y) {}

/**
 * Closes a new document in the printer spooler. The document is now
 * ready for printing. For an example see printer_start_doc.
 *
 * @param resource
 * @return bool
 **/
function printer_end_doc($printer_handle) {}

/**
 * The function closes the active page in the active document. For an
 * example see printer_start_doc.
 *
 * @param resource
 * @return bool
 **/
function printer_end_page($printer_handle) {}

/**
 * The function retrieves the configuration setting of option.
 *
 * @param resource
 * @param string
 * @return mixed
 **/
function printer_get_option($printer_handle, $option) {}

/**
 * The function enumerates available printers and their capabilities.
 *
 * @param int
 * @param string
 * @param int
 * @return array
 **/
function printer_list($enumtype, $name, $level) {}

/**
 * The function calculates the logical font height of height.
 *
 * @param resource
 * @param int
 * @return int
 **/
function printer_logical_fontheight($printer_handle, $height) {}

/**
 * This function tries to open a connection to the given printer.
 * 
 * printer_open also starts a device context.
 *
 * @param string
 * @return resource
 **/
function printer_open($printername) {}

/**
 * The function selects a brush as the active drawing object of the
 * actual device context. A brush is used to fill shapes. If you draw an
 * rectangle the brush is used to draw the shapes, while the pen is used
 * to draw the border.
 * 
 * If you haven't selected a brush before drawing shapes, the shape won't
 * be filled.
 *
 * @param resource
 * @param resource
 * @return void
 **/
function printer_select_brush($printer_handle, $brush_handle) {}

/**
 * The function selects a font to draw text.
 *
 * @param resource
 * @param resource
 * @return void
 **/
function printer_select_font($printer_handle, $font_handle) {}

/**
 * The function selects a pen as the active drawing object of the actual
 * device context. A pen is used to draw lines and curves. I.e. if you
 * draw a single line the pen is used. If you draw an rectangle the pen
 * is used to draw the borders, while the brush is used to fill the
 * shape. If you haven't selected a pen before drawing shapes, the shape
 * won't be outlined.
 *
 * @param resource
 * @param resource
 * @return void
 **/
function printer_select_pen($printer_handle, $pen_handle) {}

/**
 * The function sets options for the current connection.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function printer_set_option($printer_handle, $option, $value) {}

/**
 * The function creates a new document in the printer spooler. A document
 * can contain multiple pages, it's used to schedule the print job in the
 * spooler.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function printer_start_doc($printer_handle, $document) {}

/**
 * The function creates a new page in the active document. For an example
 * see printer_start_doc.
 *
 * @param resource
 * @return bool
 **/
function printer_start_page($printer_handle) {}

/**
 * Writes content directly to the printer.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function printer_write($printer_handle, $content) {}

/**
 * @param string
 * @param mixed
 * @return int
 **/
function printf($format, $args) {}

/**
 * print_r displays information about a variable in a way that's readable
 * by humans.
 * 
 * print_r, var_dump and var_export will also show protected and private
 * properties of objects with PHP 5. Static class members will not be
 * shown.
 * 
 * Remember that print_r will move the array pointer to the end. Use
 * reset to bring it back to beginning.
 *
 * @param mixed
 * @param bool
 * @return mixed
 **/
function print_r($expression, $return) {}

/**
 * proc_close is similar to pclose except that it only works on processes
 * opened by proc_open. proc_close waits for the process to terminate,
 * and returns its exit code. If you have open pipes to that process, you
 * should fclose them prior to calling this function in order to avoid a
 * deadlock - the child process may not be able to exit while the pipes
 * are open.
 *
 * @param resource
 * @return int
 **/
function proc_close($process) {}

/**
 * proc_get_status fetches data about a process opened using proc_open.
 *
 * @param resource
 * @return array
 **/
function proc_get_status($process) {}

/**
 * proc_nice changes the priority of the current process by the amount
 * specified in increment. A positive increment will lower the priority
 * of the current process, whereas a negative increment will raise the
 * priority.
 * 
 * proc_nice is not related to proc_open and its associated functions in
 * any way.
 *
 * @param int
 * @return bool
 **/
function proc_nice($increment) {}

/**
 * proc_open is similar to popen but provides a much greater degree of
 * control over the program execution.
 *
 * @param string
 * @param array
 * @param array
 * @param string
 * @param array
 * @param array
 * @return resource
 **/
function proc_open($cmd, $descriptorspec, &$pipes, $cwd, $env, $other_options) {}

/**
 * Signals a process (created using proc_open) that it should terminate.
 * proc_terminate returns immediately and does not wait for the process
 * to terminate.
 * 
 * proc_terminate allows you terminate the process and continue with
 * other tasks. You may poll the process (to see if it has stopped yet)
 * by using the proc_get_status function.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function proc_terminate($process, $signal) {}

/**
 * This function checks if the given property exists in the specified
 * class.
 *
 * @param mixed
 * @param string
 * @return bool
 **/
function property_exists($class, $property) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function pspell_add_to_personal($dictionary_link, $word) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function pspell_add_to_session($dictionary_link, $word) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function pspell_check($dictionary_link, $word) {}

/**
 * @param int
 * @return bool
 **/
function pspell_clear_session($dictionary_link) {}

/**
 * Create a config used to open a dictionary.
 * 
 * pspell_config_create has a very similar syntax to pspell_new. In fact,
 * using pspell_config_create immediately followed by pspell_new_config
 * will produce the exact same result. However, after creating a new
 * config, you can also use pspell_config_* functions before calling
 * pspell_new_config to take advantage of some advanced functionality.
 * 
 * For more information and examples, check out inline manual pspell
 * website:.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return int
 **/
function pspell_config_create($language, $spelling, $jargon, $encoding) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function pspell_config_data_dir($conf, $directory) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function pspell_config_dict_dir($conf, $directory) {}

/**
 * @param int
 * @param int
 * @return bool
 **/
function pspell_config_ignore($dictionary_link, $n) {}

/**
 * @param int
 * @param int
 * @return bool
 **/
function pspell_config_mode($dictionary_link, $mode) {}

/**
 * Set a file that contains personal wordlist. The personal wordlist will
 * be loaded and used in addition to the standard one after you call
 * pspell_new_config. The file is also the file where
 * pspell_save_wordlist will save personal wordlist to.
 * 
 * pspell_config_personal should be used on a config before calling
 * pspell_new_config.
 *
 * @param int
 * @param string
 * @return bool
 **/
function pspell_config_personal($dictionary_link, $file) {}

/**
 * Set a file that contains replacement pairs.
 * 
 * The replacement pairs improve the quality of the spellchecker. When a
 * word is misspelled, and a proper suggestion was not found in the list,
 * pspell_store_replacement can be used to store a replacement pair and
 * then pspell_save_wordlist to save the wordlist along with the
 * replacement pairs.
 * 
 * pspell_config_repl should be used on a config before calling
 * pspell_new_config.
 *
 * @param int
 * @param string
 * @return bool
 **/
function pspell_config_repl($dictionary_link, $file) {}

/**
 * This function determines whether run-together words will be treated as
 * legal compounds. That is, "thecat" will be a legal compound, although
 * there should be a space between the two words. Changing this setting
 * only affects the results returned by pspell_check; pspell_suggest will
 * still return suggestions.
 * 
 * pspell_config_runtogether should be used on a config before calling
 * pspell_new_config.
 *
 * @param int
 * @param bool
 * @return bool
 **/
function pspell_config_runtogether($dictionary_link, $flag) {}

/**
 * pspell_config_save_repl determines whether pspell_save_wordlist will
 * save the replacement pairs along with the wordlist. Usually there is
 * no need to use this function because if pspell_config_repl is used,
 * the replacement pairs will be saved by pspell_save_wordlist anyway,
 * and if it is not, the replacement pairs will not be saved.
 * 
 * pspell_config_save_repl should be used on a config before calling
 * pspell_new_config.
 *
 * @param int
 * @param bool
 * @return bool
 **/
function pspell_config_save_repl($dictionary_link, $flag) {}

/**
 * pspell_new opens up a new dictionary and returns the dictionary link
 * identifier for use in other pspell functions.
 * 
 * For more information and examples, check out inline manual pspell
 * website:.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function pspell_new($language, $spelling, $jargon, $encoding, $mode) {}

/**
 * @param int
 * @return int
 **/
function pspell_new_config($config) {}

/**
 * For more information and examples, check out inline manual pspell
 * website:.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function pspell_new_personal($personal, $language, $spelling, $jargon, $encoding, $mode) {}

/**
 * @param int
 * @return bool
 **/
function pspell_save_wordlist($dictionary_link) {}

/**
 * @param int
 * @param string
 * @param string
 * @return bool
 **/
function pspell_store_replacement($dictionary_link, $misspelled, $correct) {}

/**
 * @param int
 * @param string
 * @return array
 **/
function pspell_suggest($dictionary_link, $word) {}

/**
 * Adds a bookmark for the current page. Bookmarks usually appear in
 * PDF-Viewers left of the page in a hierarchical tree. Clicking on a
 * bookmark will jump to the given page.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function ps_add_bookmark($psdoc, $text, $parent, $open) {}

/**
 * Places a hyperlink at the given position pointing to a file program
 * which is being started when clicked on. The hyperlink's source
 * position is a rectangle with its lower left corner at (llx, lly) and
 * its upper right corner at (urx, ury). The rectangle has by default a
 * thin blue border.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function ps_add_launchlink($psdoc, $llx, $lly, $urx, $ury, $filename) {}

/**
 * Places a hyperlink at the given position pointing to a page in the
 * same document. Clicking on the link will jump to the given page. The
 * first page in a document has number 1.
 * 
 * The hyperlink's source position is a rectangle with its lower left
 * corner at (llx, lly) and its upper right corner at (urx, ury). The
 * rectangle has by default a thin blue border.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param int
 * @param string
 * @return bool
 **/
function ps_add_locallink($psdoc, $llx, $lly, $urx, $ury, $page, $dest) {}

/**
 * Adds a note at a certain position on the page. Notes are like little
 * rectangular sheets with text on it, which can be placed anywhere on a
 * page. They are shown either folded or unfolded. If unfolded, the
 * specified icon is used as a placeholder.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function ps_add_note($psdoc, $llx, $lly, $urx, $ury, $contents, $title, $icon, $open) {}

/**
 * Places a hyperlink at the given position pointing to a second pdf
 * document. Clicking on the link will branch to the document at the
 * given page. The first page in a document has number 1.
 * 
 * The hyperlink's source position is a rectangle with its lower left
 * corner at (llx, lly) and its upper right corner at (urx, ury). The
 * rectangle has by default a thin blue border.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param int
 * @param string
 * @return bool
 **/
function ps_add_pdflink($psdoc, $llx, $lly, $urx, $ury, $filename, $page, $dest) {}

/**
 * Places a hyperlink at the given position pointing to a web page. The
 * hyperlink's source position is a rectangle with its lower left corner
 * at (llx, lly) and its upper right corner at (urx, ury). The rectangle
 * has by default a thin blue border.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return bool
 **/
function ps_add_weblink($psdoc, $llx, $lly, $urx, $ury, $url) {}

/**
 * Draws a portion of a circle with at middle point at (x, y). The arc
 * starts at an angle of alpha and ends at an angle of beta. It is drawn
 * counterclockwise (use ps_arcn to draw clockwise). The subpath added to
 * the current path starts on the arc at angle alpha and ends on the arc
 * at angle beta.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_arc($psdoc, $x, $y, $radius, $alpha, $beta) {}

/**
 * Draws a portion of a circle with at middle point at (x, y). The arc
 * starts at an angle of alpha and ends at an angle of beta. It is drawn
 * clockwise (use ps_arc to draw counterclockwise). The subpath added to
 * the current path starts on the arc at angle beta and ends on the arc
 * at angle alpha.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_arcn($psdoc, $x, $y, $radius, $alpha, $beta) {}

/**
 * Starts a new page. Although the parameters width and height imply a
 * different page size for each page, this is not possible in PostScript.
 * The first call of ps_begin_page will set the page size for the whole
 * document. Consecutive calls will have no effect, except for creating a
 * new page. The situation is different if you intent to convert the
 * PostScript document into PDF. This function places pdfmarks into the
 * document which can set the size for each page indiviually. The
 * resulting PDF document will have different page sizes.
 * 
 * Though PostScript does not know different page sizes, pslib places a
 * bounding box for each page into the document. This size is evaluated
 * by some PostScript viewers and will have precedence over the
 * BoundingBox in the Header of the document. This can lead to unexpected
 * results when you set a BoundingBox whose lower left corner is not (0,
 * 0), because the bounding box of the page will always have a lower left
 * corner (0, 0) and overwrites the global setting.
 * 
 * Each page is encapsulated into save/restore. This means, that most of
 * the settings made on one page will not be retained on the next page.
 * 
 * If there is up to the first call of ps_begin_page no call of
 * ps_findfont, then the header of the PostScript document will be output
 * and the bounding box will be set to the size of the first page. The
 * lower left corner of the bounding box is set to (0, 0). If ps_findfont
 * was called before, then the header has been output already, and the
 * document will not have a valid bounding box. In order to prevent this,
 * one should call ps_set_info to set the info field BoundingBox and
 * possibly Orientation before any ps_findfont or ps_begin_page calls.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_begin_page($psdoc, $width, $height) {}

/**
 * Starts a new pattern. A pattern is like a page containing e.g. a
 * drawing which can be used for filling areas. It is used like a color
 * by calling ps_setcolor and setting the color space to pattern.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param int
 * @return int
 **/
function ps_begin_pattern($psdoc, $width, $height, $xstep, $ystep, $painttype) {}

/**
 * Starts a new template. A template is called a form in the postscript
 * language. It is created similar to a pattern but used like an image.
 * Templates are often used for drawings which are placed several times
 * through out the document, e.g. like a company logo. All drawing
 * functions may be used within a template. The template will not be
 * drawn until it is placed by ps_place_image.
 *
 * @param resource
 * @param float
 * @param float
 * @return int
 **/
function ps_begin_template($psdoc, $width, $height) {}

/**
 * Draws a circle with its middle point at (x, y). The circle starts and
 * ends at position (x+radius, y). If this function is called outside a
 * path it will start a new path. If it is called within a path it will
 * add the circle as a subpath. If the last drawing operation does not
 * end in point (x+radius, y) then there will be a gap in the path.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_circle($psdoc, $x, $y, $radius) {}

/**
 * Takes the current path and uses it to define the border of a clipping
 * area. Everything drawn outside of that area will not be visible.
 *
 * @param resource
 * @return bool
 **/
function ps_clip($psdoc) {}

/**
 * Closes the PostScript document.
 * 
 * This function writes the trailer of the PostScript document. It also
 * writes the bookmark tree. ps_close does not free any resources, which
 * is done by ps_delete.
 * 
 * This function is also called by ps_delete if it has not been called
 * before.
 *
 * @param resource
 * @return bool
 **/
function ps_close($psdoc) {}

/**
 * Connects the last point with the first point of a path. The resulting
 * path can be used for stroking, filling, clipping, etc..
 *
 * @param resource
 * @return bool
 **/
function ps_closepath($psdoc) {}

/**
 * Connects the last point with first point of a path and draws the
 * resulting closed line.
 *
 * @param resource
 * @return bool
 **/
function ps_closepath_stroke($psdoc) {}

/**
 * Closes an image and frees its resources. Once an image is closed it
 * cannot be used anymore.
 *
 * @param resource
 * @param int
 * @return void
 **/
function ps_close_image($psdoc, $imageid) {}

/**
 * Output a text one line below the last line. The line spacing is taken
 * from the value "leading" which must be set with ps_set_value. The
 * actual position of the text is determined by the values "textx" and
 * "texty" which can be requested with ps_get_value
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ps_continue_text($psdoc, $text) {}

/**
 * Add a section of a cubic Bézier curve described by the three given
 * control points to the current path.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_curveto($psdoc, $x1, $y1, $x2, $y2, $x3, $y3) {}

/**
 * Mainly frees memory used by the document. Also closes a file, if it
 * was not closed before with ps_close. You should in any case close the
 * file with ps_close before, because ps_close not just closes the file
 * but also outputs a trailor containing PostScript comments like the
 * number of pages in the document and adding the bookmark hierarchy.
 *
 * @param resource
 * @return bool
 **/
function ps_delete($psdoc) {}

/**
 * Ends a page which was started with ps_begin_page. Ending a page will
 * leave the current drawing context, which e.g. requires to reload fonts
 * if they were loading within the page, and to set many other drawing
 * parameters like the line width, or color..
 *
 * @param resource
 * @return bool
 **/
function ps_end_page($psdoc) {}

/**
 * Ends a pattern which was started with ps_begin_pattern. Once a pattern
 * has been ended, it can be used like a color to fill areas.
 *
 * @param resource
 * @return bool
 **/
function ps_end_pattern($psdoc) {}

/**
 * Ends a template which was started with ps_begin_template. Once a
 * template has been ended, it can be used like an image.
 *
 * @param resource
 * @return bool
 **/
function ps_end_template($psdoc) {}

/**
 * Fills the path constructed with previously called drawing functions
 * like ps_lineto.
 *
 * @param resource
 * @return bool
 **/
function ps_fill($psdoc) {}

/**
 * Fills and draws the path constructed with previously called drawing
 * functions like ps_lineto.
 *
 * @param resource
 * @return bool
 **/
function ps_fill_stroke($psdoc) {}

/**
 * Loads a font for later use. Before text is output with a loaded font
 * it must be set with ps_setfont. This function needs the adobe font
 * metric file in order to calculate the space used up by the characters.
 * A font which is loaded within a page will only be available on that
 * page. Fonts which are to be used in the complete document have to be
 * loaded before the first call of ps_begin_page. Calling ps_findfont
 * between pages will make that font available for all following pages.
 * 
 * The name of the afm file must be fontname.afm. If the font shall be
 * embedded the file fontname.pfb containing the font outline must be
 * present as well.
 * 
 * Calling ps_findfont before the first page requires to output the
 * postscript header which includes the BoundingBox for the whole
 * document. Usually the BoundingBox is set with the first call of
 * ps_begin_page which now comes after ps_findfont. Consequently the
 * BoundingBox has not been set and a warning will be issued when
 * ps_findfont is called. In order to prevent this situation, one should
 * call ps_set_parameter to set the BoundingBox before ps_findfont is
 * called.
 *
 * @param resource
 * @param string
 * @param string
 * @param bool
 * @return int
 **/
function ps_findfont($psdoc, $fontname, $encoding, $embed) {}

/**
 * This function is not implemented yet. It will always return an empty
 * string. The idea for a later implementation is to write the contents
 * of the postscript file into an internal buffer if in memory creation
 * is requested, and retrieve the buffer content with this function.
 * Currently, documents created in memory are send to the browser without
 * buffering.
 *
 * @param resource
 * @return string
 **/
function ps_get_buffer($psdoc) {}

/**
 * Gets several parameters which were directly set by ps_set_parameter or
 * indirectly by one of the other functions. Parameters are by definition
 * string values. This function cannot be used to retrieve resources
 * which were also set by ps_set_parameter.
 * 
 * The parameter name can have the following values.
 * 
 * fontname
 * 
 * The name of the currently active font or the font whose identifier is
 * passed in parameter modifier.
 * 
 * fontencoding
 * 
 * The encoding of the currently active font.
 * 
 * dottedversion
 * 
 * The version of the underlying pslib library in the format
 * major.minor.subminor
 * 
 * scope
 * 
 * The current drawing scope. Can be object, document, null, page,
 * pattern, path, template, prolog, font, glyph.
 * 
 * ligaturedisolvechar
 * 
 * The character which dissolves a ligature. If your are using a font
 * which contains the ligature `ff' and `|' is the char to dissolve the
 * ligature, then `f|f' will result in two `f' instead of the ligature
 * `ff'.
 * 
 * imageencoding
 * 
 * The encoding used for encoding images. Can be either hex or 85. hex
 * encoding uses two bytes in the postscript file each byte in the image.
 * 85 stand for Ascii85 encoding.
 * 
 * linenumbermode
 * 
 * Set to paragraph if lines are numbered within a paragraph or box if
 * they are numbered within the surrounding box.
 * 
 * linebreak
 * 
 * Only used if text is output with ps_show_boxed. If set to true a
 * carriage return will add a line break.
 * 
 * parbreak
 * 
 * Only used if text is output with ps_show_boxed. If set to true a
 * carriage return will start a new paragraph.
 * 
 * hyphenation
 * 
 * Only used if text is output with ps_show_boxed. If set to true the
 * paragraph will be hyphenated if a hypen dictionary is set and exists.
 * 
 * hyphendict
 * 
 * Filename of the dictionary used for hyphenation pattern.
 *
 * @param resource
 * @param string
 * @param float
 * @return string
 **/
function ps_get_parameter($psdoc, $name, $modifier) {}

/**
 * Gets several values which were set by ps_set_value. Values are by
 * definition float values.
 * 
 * The parameter name can have the following values.
 * 
 * fontsize
 * 
 * The size of the currently active font or the font whose identifier is
 * passed in parameter modifier.
 * 
 * font
 * 
 * The currently active font itself.
 * 
 * imagewidth
 * 
 * The width of the image whose id is passed in the parameter modifier.
 * 
 * imageheight
 * 
 * The height of the image whose id is passed in the parameter modifier.
 * 
 * capheight
 * 
 * The height of a capital M in the currently active font or the font
 * whose identifier is passed in parameter modifier.
 * 
 * ascender
 * 
 * The ascender of the currently active font or the font whose
 * identifier is passed in parameter modifier.
 * 
 * descender
 * 
 * The descender of the currently active font or the font whose
 * identifier is passed in parameter modifier.
 * 
 * italicangle
 * 
 * The italicangle of the currently active font or the font whose
 * identifier is passed in parameter modifier.
 * 
 * underlineposition
 * 
 * The underlineposition of the currently active font or the font whose
 * identifier is passed in parameter modifier.
 * 
 * underlinethickness
 * 
 * The underlinethickness of the currently active font or the font whose
 * identifier is passed in parameter modifier.
 * 
 * textx
 * 
 * The current x-position for text output.
 * 
 * texty
 * 
 * The current y-position for text output.
 * 
 * textrendering
 * 
 * The current mode for text rendering.
 * 
 * textrise
 * 
 * The space by which text is risen above the base line.
 * 
 * leading
 * 
 * The distance between text lines in points.
 * 
 * wordspacing
 * 
 * The space between words as a multiple of the width of a space char.
 * 
 * charspacing
 * 
 * The space between chars. If charspacing is != 0.0 ligatures will
 * always be dissolved.
 * 
 * hyphenminchars
 * 
 * Minimum number of chars hyphenated at the end of a word.
 * 
 * parindent
 * 
 * Indention of the first n line in a paragraph.
 * 
 * numindentlines
 * 
 * Number of line in a paragraph to indent if parindent != 0.0.
 * 
 * parskip
 * 
 * Distance between paragraphs.
 * 
 * linenumberspace
 * 
 * Overall space in front of each line for the line number.
 * 
 * linenumbersep
 * 
 * Space between the line and the line number.
 * 
 * major
 * 
 * The major version number of pslib.
 * 
 * minor
 * 
 * The minor version number of pslib.
 * 
 * subminor, revision
 * 
 * The subminor version number of pslib.
 *
 * @param resource
 * @param string
 * @param float
 * @return float
 **/
function ps_get_value($psdoc, $name, $modifier) {}

/**
 * Hyphenates the passed word. ps_hyphenate evaluates the value
 * hyphenminchars (set by ps_set_value) and the parameter hyphendict (set
 * by ps_set_parameter). hyphendict must be set before calling this
 * function.
 * 
 * This function requires the locale category LC_CTYPE to be set
 * properly. This is done when the extension is initialized by using the
 * environment variables. On Unix systems read the man page of locale for
 * more information.
 *
 * @param resource
 * @param string
 * @return array
 **/
function ps_hyphenate($psdoc, $text) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function ps_include_file($psdoc, $file) {}

/**
 * Adds a straight line from the current point to the given coordinates
 * to the current path. Use ps_moveto to set the starting point of the
 * line.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_lineto($psdoc, $x, $y) {}

/**
 * Creates a spot color from the current fill color. The fill color must
 * be defined in rgb, cmyk or gray colorspace. The spot color name can be
 * an arbitrary name. A spot color can be set as any color with
 * ps_setcolor. When the document is not printed but displayed by an
 * postscript viewer the given color in the specified color space is use.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function ps_makespotcolor($psdoc, $name, $reserved) {}

/**
 * Sets the current point to new coordinates. If this is the first call
 * of ps_moveto after a previous path has been ended then it will start a
 * new path. If this function is called in the middle of a path it will
 * just set the current point and start a subpath.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_moveto($psdoc, $x, $y) {}

/**
 * Creates a new document instance. It does not create the file on disk
 * or in memory, it just sets up everything. ps_new is usually followed
 * by a call of ps_open_file to actually create the postscript document.
 *
 * @return resource
 **/
function ps_new() {}

/**
 * Creates a new file on disk and writes the PostScript document into it.
 * The file will be closed when ps_close is called.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ps_open_file($psdoc, $filename) {}

/**
 * Reads an image which is already available in memory. The parameter
 * source is currently not evaluated and assumed to be memory. The image
 * data is a sequence of pixels starting in th upper left corner and
 * ending in the lower right corner. Each pixel consists of components
 * color components, and each component has bpc bits.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @param int
 * @param string
 * @return int
 **/
function ps_open_image($psdoc, $type, $source, $data, $lenght, $width, $height, $components, $bpc, $params) {}

/**
 * Loads an image for later use.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function ps_open_image_file($psdoc, $type, $filename, $stringparam, $intparam) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function ps_open_memory_image($psdoc, $gd) {}

/**
 * Places a formerly loaded image on the page. The image can be scaled.
 * If the image shall be rotated as well, you will have to rotate the
 * coordinate system before with ps_rotate.
 *
 * @param resource
 * @param int
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_place_image($psdoc, $imageid, $x, $y, $scale) {}

/**
 * Draws a rectangle with its lower left corner at (x, y). The rectangle
 * starts and ends in its lower left corner. If this function is called
 * outside a path it will start a new path. If it is called within a path
 * it will add the rectangle as a subpath. If the last drawing operation
 * does not end in the lower left corner then there will be a gap in the
 * path.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_rect($psdoc, $x, $y, $width, $height) {}

/**
 * Restores a previously saved graphics context. Any call of ps_save must
 * be accompanied by a call to ps_restore. All coordinate
 * transformations, line style settings, color settings, etc. are being
 * restored to the state before the call of ps_save.
 *
 * @param resource
 * @return bool
 **/
function ps_restore($psdoc) {}

/**
 * Sets the rotation of the coordinate system.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function ps_rotate($psdoc, $rot) {}

/**
 * Saves the current graphics context, containing colors, translation and
 * rotation settings and some more. A saved context can be restored with
 * ps_restore.
 *
 * @param resource
 * @return bool
 **/
function ps_save($psdoc) {}

/**
 * Sets horizontal and vertical scaling of the coordinate system.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_scale($psdoc, $x, $y) {}

/**
 * Sets the color for drawing, filling, or both.
 *
 * @param resource
 * @param string
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_setcolor($psdoc, $type, $colorspace, $c1, $c2, $c3, $c4) {}

/**
 * Sets the length of the black and white portions of a dashed line.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_setdash($psdoc, $on, $off) {}

/**
 * @param resource
 * @param float
 * @return bool
 **/
function ps_setflat($psdoc, $value) {}

/**
 * Sets a font, which has to be loaded before with ps_findfont.
 * Outputting text without setting a font results in an error.
 *
 * @param resource
 * @param int
 * @param float
 * @return bool
 **/
function ps_setfont($psdoc, $fontid, $size) {}

/**
 * Sets the gray value for all following drawing operations.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function ps_setgray($psdoc, $gray) {}

/**
 * Sets how line ends look like.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ps_setlinecap($psdoc, $type) {}

/**
 * Sets how lines are joined.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ps_setlinejoin($psdoc, $type) {}

/**
 * Sets the line width for all following drawing operations.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function ps_setlinewidth($psdoc, $width) {}

/**
 * If two lines join in a small angle and the line join is set to
 * PS_LINEJOIN_MITER, then the resulting spike will be very long. The
 * miter limit is the maximum ratio of the miter length (the length of
 * the spike) and the line width.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function ps_setmiterlimit($psdoc, $value) {}

/**
 * @param resource
 * @param int
 * @return bool
 **/
function ps_setoverprintmode($psdoc, $mode) {}

/**
 * Sets the length of the black and white portions of a dashed line.
 * ps_setpolydash is used to set more complicated dash patterns.
 *
 * @param resource
 * @param float
 * @return bool
 **/
function ps_setpolydash($psdoc, $arr) {}

/**
 * Links added with one of the functions ps_add_weblink, ps_add_pdflink,
 * etc. will be displayed with a surounded rectangle when the postscript
 * document is converted to pdf and viewed in a pdf viewer. This
 * rectangle is not visible in the postscript document. This function
 * sets the color of the rectangle's border line.
 *
 * @param resource
 * @param float
 * @param float
 * @param float
 * @return bool
 **/
function ps_set_border_color($psdoc, $red, $green, $blue) {}

/**
 * Links added with one of the functions ps_add_weblink, ps_add_pdflink,
 * etc. will be displayed with a surounded rectangle when the postscript
 * document is converted to pdf and viewed in a pdf viewer. This
 * rectangle is not visible in the postscript document. This function
 * sets the length of the black and white portion of a dashed border
 * line.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_set_border_dash($psdoc, $black, $white) {}

/**
 * Links added with one of the functions ps_add_weblink, ps_add_pdflink,
 * etc. will be displayed with a surounded rectangle when the postscript
 * document is converted to pdf and viewed in a pdf viewer. This
 * rectangle is not visible in the postscript document. This function
 * sets the appearance and width of the border line.
 *
 * @param resource
 * @param string
 * @param float
 * @return bool
 **/
function ps_set_border_style($psdoc, $style, $width) {}

/**
 * Sets certain information fields of the document. This fields will be
 * shown as a comment in the header of the PostScript file. If the
 * document is converted to pdf this fields will also be used for the
 * document information.
 * 
 * The BoundingBox is usually set to the value given to the first page.
 * This only works if ps_findfont has not been called before. In such
 * cases the BoundingBox would be left unset unless you set it explicitly
 * with this function.
 * 
 * This function will have no effect anymore when the header of the
 * postscript file has been already written. It must be called before the
 * first page or the first call of ps_findfont.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ps_set_info($p, $key, $val) {}

/**
 * Sets several parameters which are used by many functions. Parameters
 * are by definition string values.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ps_set_parameter($psdoc, $name, $value) {}

/**
 * Set the position for the next text output. You may alternatively set
 * the x and y value separately by calling ps_set_value and choosing
 * textx respectively texty as the value name.
 * 
 * If you want to output text at a certain position it is more convenient
 * to use ps_show_xy instead of setting the text position and calling
 * ps_show.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_set_text_pos($psdoc, $x, $y) {}

/**
 * Sets several values which are used by many functions. Parameters are
 * by definition float values.
 *
 * @param resource
 * @param string
 * @param float
 * @return bool
 **/
function ps_set_value($psdoc, $name, $value) {}

/**
 * Creates a shading, which can be used by ps_shfill or
 * ps_shading_pattern.
 * 
 * The color of the shading can be in any color space except for pattern.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @return int
 **/
function ps_shading($psdoc, $type, $x0, $y0, $x1, $y1, $c1, $c2, $c3, $c4, $optlist) {}

/**
 * Creates a pattern based on a shading, which has to be created before
 * with ps_shading. Shading patterns can be used like regular patterns.
 *
 * @param resource
 * @param int
 * @param string
 * @return int
 **/
function ps_shading_pattern($psdoc, $shadingid, $optlist) {}

/**
 * Fills an area with a shading, which has to be created before with
 * ps_shading. This is an alternative way to creating a pattern from a
 * shading ps_shading_pattern and using the pattern as the filling color.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ps_shfill($psdoc, $shadingid) {}

/**
 * Output a text at the current text position. The text position can be
 * set by storing the x and y coordinates into the values textx and texty
 * with the function ps_set_value. The function will issue an error if a
 * font was not set before with ps_setfont.
 * 
 * ps_show evaluates the following parameters and values as set by
 * ps_set_parameter and ps_set_value.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ps_show($psdoc, $text) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function ps_show2($psdoc, $text, $len) {}

/**
 * Outputs a text in a given box. The lower left corner of the box is at
 * (left, bottom). Line breaks will be inserted where needed. Multiple
 * spaces are treated as one. Tabulators are treated as spaces.
 * 
 * The text will be hyphenated if the parameter hyphenation is set to
 * true and the parameter hyphendict contains a valid filename for a
 * hyphenation file. The line spacing is taken from the value leading.
 * Paragraphs can be separated by an empty line just like in TeX. If the
 * value parindent is set to value 0.0 then the first n lines will be
 * indented. The number n of lines is set by the parameter
 * numindentlines. In order to prevent indenting of the first m
 * paragraphs set the value parindentskip to a positive number.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param string
 * @param string
 * @return int
 **/
function ps_show_boxed($psdoc, $text, $left, $bottom, $width, $height, $hmode, $feature) {}

/**
 * Output a text at the given text position.
 *
 * @param resource
 * @param string
 * @param float
 * @param float
 * @return bool
 **/
function ps_show_xy($psdoc, $text, $x, $y) {}

/**
 * @param resource
 * @param string
 * @param int
 * @param float
 * @param float
 * @return bool
 **/
function ps_show_xy2($psdoc, $text, $len, $xcoor, $ycoor) {}

/**
 * Calculates the width of a string in points if it was output in the
 * given font and font size. This function needs an Adobe font metrics
 * file to calculate the precise width. If kerning is turned on, it will
 * be taken into account.
 *
 * @param resource
 * @param string
 * @param int
 * @param float
 * @return float
 **/
function ps_stringwidth($psdoc, $text, $fontid, $size) {}

/**
 * This function is similar to ps_stringwidth but returns an array of
 * dimensions containing the width, ascender, and descender of the text.
 *
 * @param resource
 * @param string
 * @param int
 * @param float
 * @return array
 **/
function ps_string_geometry($psdoc, $text, $fontid, $size) {}

/**
 * Draws the path constructed with previously called drawing functions
 * like ps_lineto.
 *
 * @param resource
 * @return bool
 **/
function ps_stroke($psdoc) {}

/**
 * Output the glyph at position ord in the font encoding vector of the
 * current font. The font encoding for a font can be set when loading the
 * font with ps_findfont.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function ps_symbol($psdoc, $ord) {}

/**
 * This function needs an Adobe font metrics file to know which glyphs
 * are available.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function ps_symbol_name($psdoc, $ord, $fontid) {}

/**
 * Calculates the width of a glyph in points if it was output in the
 * given font and font size. This function needs an Adobe font metrics
 * file to calculate the precise width.
 *
 * @param resource
 * @param int
 * @param int
 * @param float
 * @return float
 **/
function ps_symbol_width($psdoc, $ord, $fontid, $size) {}

/**
 * Sets a new initial point of the coordinate system.
 *
 * @param resource
 * @param float
 * @param float
 * @return bool
 **/
function ps_translate($psdoc, $x, $y) {}

/**
 * Adds setting to the server environment. The environment variable will
 * only exist for the duration of the current request. At the end of the
 * request the environment is restored to its original state.
 * 
 * Setting certain environment variables may be a potential security
 * breach. The safe_mode_allowed_env_vars directive contains a
 * comma-delimited list of prefixes. In Safe Mode, the user may only
 * alter environment variables whose names begin with the prefixes
 * supplied by this directive. By default, users will only be able to set
 * environment variables that begin with PHP_ (e.g. PHP_FOO=BAR). Note:
 * if this directive is empty, PHP will let the user modify ANY
 * environment variable!
 * 
 * The safe_mode_protected_env_vars directive contains a comma-delimited
 * list of environment variables, that the end user won't be able to
 * change using putenv. These variables will be protected even if
 * safe_mode_allowed_env_vars is set to allow to change them.
 *
 * @param string
 * @return bool
 **/
function putenv($setting) {}

/**
 * Closes the paradox database. This function will not close the file.
 * You will have to call fclose afterwards.
 *
 * @param resource
 * @return bool
 **/
function px_close($pxdoc) {}

/**
 * Create a new paradox database file. The actual file has to be opened
 * before with fopen. Make sure the file is writable.
 *
 * @param resource
 * @param resource
 * @param array
 * @return bool
 **/
function px_create_fp($pxdoc, $file, $fielddesc) {}

/**
 * Turns a date as it stored in the paradox file into human readable
 * format. Paradox dates are the number of days since 1.1.0000. This
 * function is just for convenience. It can be easily replaced by some
 * math and the calendar functions as demonstrated in the example below.
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function px_date2string($pxdoc, $value, $format) {}

/**
 * Deletes the resource of the paradox file and frees all memory.
 *
 * @param resource
 * @return bool
 **/
function px_delete($pxdoc) {}

/**
 * This function deletes a record from the database. It does not free the
 * space in the database file but just marks it as deleted. Inserting a
 * new record afterwards will reuse the space.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function px_delete_record($pxdoc, $num) {}

/**
 * @param resource
 * @param int
 * @return array
 **/
function px_get_field($pxdoc, $fieldno) {}

/**
 * @param resource
 * @return array
 **/
function px_get_info($pxdoc) {}

/**
 * Gets various parameters.
 *
 * @param resource
 * @param string
 * @return string
 **/
function px_get_parameter($pxdoc, $name) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return array
 **/
function px_get_record($pxdoc, $num, $mode) {}

/**
 * px_get_schema returns the database schema.
 *
 * @param resource
 * @param int
 * @return array
 **/
function px_get_schema($pxdoc, $mode) {}

/**
 * Gets various values.
 *
 * @param resource
 * @param string
 * @return float
 **/
function px_get_value($pxdoc, $name) {}

/**
 * Inserts a new record into the database. The record is not necessarily
 * inserted at the end of the database, but may be inserted at any
 * position depending on where the first free slot is found.
 * 
 * The record data is passed as an array of field values. The elements in
 * the array must correspond to the fields in the database. If the array
 * has less elements than fields in the database, the remaining fields
 * will be set to null.
 * 
 * Most field values can be passed as its equivalent php type e.g. a long
 * value is used for fields of type PX_FIELD_LONG, PX_FIELD_SHORT and
 * PX_FIELD_AUTOINC, a double values is used for fields of type
 * PX_FIELD_CURRENCY and PX_FIELD_NUMBER. Field values for blob and alpha
 * fields are passed as strings.
 * 
 * Fields of type PX_FIELD_TIME and PX_FIELD_DATE both require a long
 * value. In the first case this is the number of milliseconds since
 * midnight. In the second case this is the number of days since
 * 1.1.0000. Below there are two examples to convert the current date or
 * timestamp into a value suitable for one of paradox's date/time fields.
 *
 * @param resource
 * @param array
 * @return int
 **/
function px_insert_record($pxdoc, $data) {}

/**
 * Create a new paradox object. You will have to call this function
 * before any further functions. px_new does not create any file on the
 * disk, it just creates an instance of a paradox object. This function
 * must not be called if the object oriented interface is used. Use new
 * paradox_db() instead.
 *
 * @return resource
 **/
function px_new() {}

/**
 * Get the number of fields in a database file.
 *
 * @param resource
 * @return int
 **/
function px_numfields($pxdoc) {}

/**
 * Get the number of records in a database file.
 *
 * @param resource
 * @return int
 **/
function px_numrecords($pxdoc) {}

/**
 * Open an existing paradox database file. The actual file has to be
 * opened before with fopen. This function can also be used to open
 * primary index files and tread them like a paradox database. This is
 * supported for those who would like to investigate a primary index. It
 * cannot be used to accelerate access to a database file.
 *
 * @param resource
 * @param resource
 * @return bool
 **/
function px_open_fp($pxdoc, $file) {}

/**
 * Stores a record into a paradox database. The record is always added at
 * the end of the database, regardless of any free slots. Use
 * px_insert_record to add a new record into the first free slot found in
 * the database.
 *
 * @param resource
 * @param array
 * @param int
 * @return bool
 **/
function px_put_record($pxdoc, $record, $recpos) {}

/**
 * This function is very similar to px_get_record but uses internally a
 * different approach to retrieve the data. It relies on pxlib for
 * reading each single field value, which usually results in support for
 * more field types.
 *
 * @param resource
 * @param int
 * @param int
 * @return array
 **/
function px_retrieve_record($pxdoc, $num, $mode) {}

/**
 * Sets the name of the file where blobs are going to be read from or
 * written into. Without calling this function, px_get_record or
 * px_retrieve_record will only return data in blob fields if the data is
 * part of the record and not stored in the blob file. Blob data is
 * stored in the record if it is small enough to fit in the size of the
 * blob field.
 * 
 * Calling px_put_record, px_insert_record, or px_update_record without
 * calling px_set_blob_file will result in truncated blob fields unless
 * the data fits into the database file.
 * 
 * Calling this function twice will close the first blob file and open
 * the new one.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function px_set_blob_file($pxdoc, $filename) {}

/**
 * Sets various parameters.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function px_set_parameter($pxdoc, $name, $value) {}

/**
 * Sets the table name of a paradox database, which was created with
 * px_create_fp. This function is deprecated use px_set_parameter
 * instead.
 *
 * @param resource
 * @param string
 * @return void
 **/
function px_set_tablename($pxdoc, $name) {}

/**
 * Set the encoding for data retrieved from a character field. All
 * character fields will be recoded to the encoding set by this function.
 * If the encoding is not set, the character data will be returned in the
 * DOS code page encoding as specified in the database file. The encoding
 * can be any string identifier known to iconv or recode. On Unix systems
 * run iconv -l for a list of available encodings.
 * 
 * This function is deprecated and should be replaced by calling
 * px_set_parameter.
 * 
 * See also px_get_info to determine the DOS code page as stored in the
 * database file.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function px_set_targetencoding($pxdoc, $encoding) {}

/**
 * Sets various values.
 *
 * @param resource
 * @param string
 * @param float
 * @return bool
 **/
function px_set_value($pxdoc, $name, $value) {}

/**
 * Turns a timestamp as it stored in the paradox file into human readable
 * format. Paradox timestamps are the number of milliseconds since
 * 1.1.0000. This function is just for convenience. It can be easily
 * replaced by some math and the calendar functions as demonstrated in
 * the following example.
 *
 * @param resource
 * @param float
 * @param string
 * @return string
 **/
function px_timestamp2string($pxdoc, $value, $format) {}

/**
 * Updates an exiting record in the database. The record starts at 0.
 * 
 * The record data is passed as an array of field values. The elements in
 * the array must correspond to the fields in the database. If the array
 * has less elements than fields in the database, the remaining fields
 * will be set to null.
 *
 * @param resource
 * @param array
 * @param int
 * @return bool
 **/
function px_update_record($pxdoc, $data, $num) {}

/**
 * @return string
 **/
function qdom_error() {}

/**
 * @param string
 * @return QDomDocument
 **/
function qdom_tree($doc) {}

/**
 * This function returns an 8-bit binary string corresponding to the
 * decoded quoted printable string (according to RFC2045, section 6.7,
 * not RFC2821, section 4.5.2, so additional periods are not stripped
 * from the beginning of line).
 * 
 * This function is similar to imap_qprint, except this one does not
 * require the IMAP module to work.
 *
 * @param string
 * @return string
 **/
function quoted_printable_decode($str) {}

/**
 * Returns a quoted printable string created according to RFC2045,
 * section 6.7.
 * 
 * This function is similar to imap_8bit, except this one does not
 * require the IMAP module to work.
 *
 * @param string
 * @return string
 **/
function quoted_printable_encode($str) {}

/**
 * Returns a version of str with a backslash character (\) before every
 * character that is among these: . \ + * ? [ ^ ] ( $ )
 *
 * @param string
 * @return string
 **/
function quotemeta($str) {}

/**
 * This function converts number from radian to degrees.
 *
 * @param float
 * @return float
 **/
function rad2deg($number) {}

/**
 * @return resource
 **/
function radius_acct_open() {}

/**
 * radius_add_server may be called multiple times, and it may be used
 * together with radius_config. At most 10 servers may be specified. When
 * multiple servers are given, they are tried in round-robin fashion
 * until a valid response is received, or until each server's max_tries
 * limit has been reached.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function radius_add_server($radius_handle, $hostname, $port, $secret, $timeout, $max_tries) {}

/**
 * @return resource
 **/
function radius_auth_open() {}

/**
 * It is not needed to call this function because php frees all resources
 * at the end of each request.
 *
 * @param resource
 * @return bool
 **/
function radius_close($radius_handle) {}

/**
 * Before issuing any Radius requests, the library must be made aware of
 * the servers it can contact. The easiest way to configure the library
 * is to call radius_config. radius_config causes the library to read a
 * configuration file whose format is described in radius.conf.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function radius_config($radius_handle, $file) {}

/**
 * A Radius request consists of a code specifying the kind of request,
 * and zero or more attributes which provide additional information. To
 * begin constructing a new request, call radius_create_request.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function radius_create_request($radius_handle, $type) {}

/**
 * @param string
 * @return string
 **/
function radius_cvt_addr($data) {}

/**
 * @param string
 * @return int
 **/
function radius_cvt_int($data) {}

/**
 * @param string
 * @return string
 **/
function radius_cvt_string($data) {}

/**
 * Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for security
 * reasons, and must be demangled before you can use them.
 *
 * @param resource
 * @param string
 * @return string
 **/
function radius_demangle($radius_handle, $mangled) {}

/**
 * When using MPPE with MS-CHAPv2, the send- and recv-keys are mangled
 * (see RFC 2548), however this function is useless, because I don't
 * think that there is or will be a PPTP-MPPE implementation in PHP.
 *
 * @param resource
 * @param string
 * @return string
 **/
function radius_demangle_mppe_key($radius_handle, $mangled) {}

/**
 * Like Radius requests, each response may contain zero or more
 * attributes. After a response has been received successfully by
 * radius_send_request, its attributes can be extracted one by one using
 * radius_get_attr. Each time radius_get_attr is called, it gets the next
 * attribute from the current response.
 *
 * @param resource
 * @return mixed
 **/
function radius_get_attr($radius_handle) {}

/**
 * If radius_get_attr returns RADIUS_VENDOR_SPECIFIC,
 * radius_get_vendor_attr may be called to determine the vendor.
 *
 * @param string
 * @return array
 **/
function radius_get_vendor_attr($data) {}

/**
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function radius_put_addr($radius_handle, $type, $addr) {}

/**
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function radius_put_attr($radius_handle, $type, $value) {}

/**
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function radius_put_int($radius_handle, $type, $value) {}

/**
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function radius_put_string($radius_handle, $type, $value) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return bool
 **/
function radius_put_vendor_addr($radius_handle, $vendor, $type, $addr) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return bool
 **/
function radius_put_vendor_attr($radius_handle, $vendor, $type, $value) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param int
 * @return bool
 **/
function radius_put_vendor_int($radius_handle, $vendor, $type, $value) {}

/**
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return bool
 **/
function radius_put_vendor_string($radius_handle, $vendor, $type, $value) {}

/**
 * The request authenticator is needed for demangling mangled data like
 * passwords and encryption-keys.
 *
 * @param resource
 * @return string
 **/
function radius_request_authenticator($radius_handle) {}

/**
 * After the Radius request has been constructed, it is sent by
 * radius_send_request.
 * 
 * The radius_send_request function sends the request and waits for a
 * valid reply, retrying the defined servers in round-robin fashion as
 * necessary.
 *
 * @param resource
 * @return int
 **/
function radius_send_request($radius_handle) {}

/**
 * The shared secret is needed as salt for demangling mangled data like
 * passwords and encryption-keys.
 *
 * @param resource
 * @return string
 **/
function radius_server_secret($radius_handle) {}

/**
 * If Radius-functions fail then they record an error message. This error
 * message can be retrieved with this function.
 *
 * @param resource
 * @return string
 **/
function radius_strerror($radius_handle) {}

/**
 * @return int
 **/
function rand() {}

/**
 * Create an array containing a range of elements.
 *
 * @param mixed
 * @param mixed
 * @param number
 * @return array
 **/
function range($low, $high, $step) {}

/**
 * Close Rar archive and free all allocated resources.
 *
 * @param resource
 * @return bool
 **/
function rar_close($rar_file) {}

/**
 * Get entry object from the Rar archive.
 *
 * @param resource
 * @param string
 * @return RarEntry
 **/
function rar_entry_get($rar_file, $entry_name) {}

/**
 * Get entries list from the Rar archive.
 *
 * @param resource
 * @return array
 **/
function rar_list($rar_file) {}

/**
 * Open specified Rar archive and return Rar file resource.
 *
 * @param string
 * @param string
 * @return resource
 **/
function rar_open($filename, $password) {}

/**
 * Returns a string in which the sequences with percent (%) signs
 * followed by two hex digits have been replaced with literal characters.
 *
 * @param string
 * @return string
 **/
function rawurldecode($str) {}

/**
 * Encodes the given string according to RFC 1738.
 *
 * @param string
 * @return string
 **/
function rawurlencode($str) {}

/**
 * Returns the filename of the next file from the directory. The
 * filenames are returned in the order in which they are stored by the
 * filesystem.
 *
 * @param resource
 * @return string
 **/
function readdir($dir_handle) {}

/**
 * Reads a file and writes it to the output buffer.
 *
 * @param string
 * @param bool
 * @param resource
 * @return int
 **/
function readfile($filename, $use_include_path, $context) {}

/**
 * Reads a file, decompresses it and writes it to standard output.
 * 
 * readgzfile can be used to read a file which is not in gzip format; in
 * this case readgzfile will directly read from the file without
 * decompression.
 *
 * @param string
 * @param int
 * @return int
 **/
function readgzfile($filename, $use_include_path) {}

/**
 * Reads a single line from the user. You must add this line to the
 * history yourself using readline_add_history.
 *
 * @param string
 * @return string
 **/
function readline($prompt) {}

/**
 * This function adds a line to the command line history.
 *
 * @param string
 * @return bool
 **/
function readline_add_history($line) {}

/**
 * Sets up a readline callback interface then prints prompt and
 * immediately returns. Calling this function twice without removing the
 * previous callback interface will automatically and conveniently
 * overwrite the old interface.
 * 
 * The callback feature is useful when combined with stream_select as it
 * allows interleaving of IO and user input, unlike readline.
 *
 * @param string
 * @param callback
 * @return bool
 **/
function readline_callback_handler_install($prompt, $callback) {}

/**
 * Removes a previously installed callback handler and restores terminal
 * settings.
 *
 * @return bool
 **/
function readline_callback_handler_remove() {}

/**
 * Reads a character of user input. When a line is received, this
 * function informs the readline callback interface installed using
 * readline_callback_handler_install that a line is ready for input.
 *
 * @return void
 **/
function readline_callback_read_char() {}

/**
 * This function clears the entire command line history.
 *
 * @return bool
 **/
function readline_clear_history() {}

/**
 * This function registers a completion function. This is the same kind
 * of functionality you'd get if you hit your tab key while using Bash.
 *
 * @param callback
 * @return bool
 **/
function readline_completion_function($function) {}

/**
 * Gets or sets various internal readline variables.
 *
 * @param string
 * @param string
 * @return mixed
 **/
function readline_info($varname, $newvalue) {}

/**
 * Gets the entire command line history.
 *
 * @return array
 **/
function readline_list_history() {}

/**
 * Tells readline that the cursor has moved to a new line.
 *
 * @return void
 **/
function readline_on_new_line() {}

/**
 * This function reads a command history from a file.
 *
 * @param string
 * @return bool
 **/
function readline_read_history($filename) {}

/**
 * Redraws readline to redraw the display.
 *
 * @return void
 **/
function readline_redisplay() {}

/**
 * This function writes the command history to a file.
 *
 * @param string
 * @return bool
 **/
function readline_write_history($filename) {}

/**
 * readlink does the same as the readlink C function.
 *
 * @param string
 * @return string
 **/
function readlink($path) {}

/**
 * read_exif_data reads the EXIF headers from a JPEG or TIFF image file.
 * This way you can read meta data generated by digital cameras.
 * 
 * EXIF headers tend to be present in JPEG/TIFF images generated by
 * digital cameras, but unfortunately each digital camera maker has a
 * different idea of how to actually tag their images, so you can't
 * always rely on a specific Exif header being present.
 * 
 * Height and Width are computed the same way getimagesize does so their
 * values must not be part of any header returned. Also, html is a
 * height/width text string to be used inside normal HTML.
 * 
 * When an Exif header contains a Copyright note, this itself can contain
 * two values. As the solution is inconsistent in the Exif 2.10 standard,
 * the COMPUTED section will return both entries Copyright.Photographer
 * and Copyright.Editor while the IFD0 sections contains the byte array
 * with the NULL character that splits both entries. Or just the first
 * entry if the datatype was wrong (normal behaviour of Exif). The
 * COMPUTED will also contain the entry Copyright which is either the
 * original copyright string, or a comma separated list of the photo and
 * editor copyright.
 * 
 * The tag UserComment has the same problem as the Copyright tag. It can
 * store two values. First the encoding used, and second the value
 * itself. If so the IFD section only contains the encoding or a byte
 * array. The COMPUTED section will store both in the entries
 * UserCommentEncoding and UserComment. The entry UserComment is
 * available in both cases so it should be used in preference to the
 * value in IFD0 section.
 * 
 * read_exif_data also validates EXIF data tags according to the EXIF
 * specification (, page 20).
 *
 * @param string
 * @param string
 * @param bool
 * @param bool
 * @return array
 **/
function read_exif_data($filename, $sections, $arrays, $thumbnail) {}

/**
 * realpath expands all symbolic links and resolves references to '/./',
 * '/../' and extra '/' characters in the input path. and return the
 * canonicalized absolute pathname.
 *
 * @param string
 * @return string
 **/
function realpath($path) {}

/**
 * Recode the string string according to the recode request request.
 *
 * @param string
 * @param string
 * @return string
 **/
function recode($request, $string) {}

/**
 * Recode the file referenced by file handle input into the file
 * referenced by file handle output according to the recode request.
 *
 * @param string
 * @param resource
 * @param resource
 * @return bool
 **/
function recode_file($request, $input, $output) {}

/**
 * Recode the string string according to the recode request request.
 *
 * @param string
 * @param string
 * @return string
 **/
function recode_string($request, $string) {}

/**
 * Registers the function named by function to be executed when script
 * processing is complete.
 * 
 * Multiple calls to register_shutdown_function can be made, and each
 * will be called in the same order as they were registered. If you call
 * exit within one registered shutdown function, processing will stop
 * completely and no other registered shutdown functions will be called.
 *
 * @param callback
 * @param mixed
 * @return void
 **/
function register_shutdown_function($function, $parameter) {}

/**
 * @param callback
 * @param mixed
 * @return bool
 **/
function register_tick_function($function, $arg) {}

/**
 * Attempts to rename oldname to newname.
 *
 * @param string
 * @param string
 * @param resource
 * @return bool
 **/
function rename($oldname, $newname, $context) {}

/**
 * Renames a orig_name to new_name in the global function table. Useful
 * for temporarily overriding built-in functions.
 *
 * @param string
 * @param string
 * @return bool
 **/
function rename_function($original_name, $new_name) {}

/**
 * reset rewinds array's internal pointer to the first element and
 * returns the value of the first array element.
 *
 * @param array
 * @return mixed
 **/
function reset(&$array) {}

/**
 * Used after changing the error handler function using
 * set_error_handler, to revert to the previous error handler (which
 * could be the built-in or a user defined function).
 *
 * @return bool
 **/
function restore_error_handler() {}

/**
 * Used after changing the exception handler function using
 * set_exception_handler, to revert to the previous exception handler
 * (which could be the built-in or a user defined function).
 *
 * @return bool
 **/
function restore_exception_handler() {}

/**
 * @return void
 **/
function restore_include_path() {}

/**
 * Sets the file position indicator for handle to the beginning of the
 * file stream.
 *
 * @param resource
 * @return bool
 **/
function rewind($handle) {}

/**
 * Resets the directory stream indicated by dir_handle to the beginning
 * of the directory.
 *
 * @param resource
 * @return void
 **/
function rewinddir($dir_handle) {}

/**
 * Attempts to remove the directory named by dirname. The directory must
 * be empty, and the relevant permissions must permit this.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function rmdir($dirname, $context) {}

/**
 * Returns the rounded value of val to specified precision (number of
 * digits after the decimal point). precision can also be negative or
 * zero (default).
 * 
 * PHP doesn't handle strings like "12,300.2" correctly by default. See
 * converting from strings.
 * 
 * The precision parameter was introduced in PHP 4.
 *
 * @param float
 * @param int
 * @param int
 * @return float
 **/
function round($val, $precision, $mode) {}

/**
 * rpm_close will close an RPM file pointer.
 *
 * @param resource
 * @return bool
 **/
function rpm_close($rpmr) {}

/**
 * rpm_get_tag will retrieve a given tag from the RPM file's header and
 * return it.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function rpm_get_tag($rpmr, $tagnum) {}

/**
 * rpm_is_valid will test an RPM file for validity as an RPM file. This
 * is not the same as rpm_open as it only checks the file for validity
 * but does not return a file pointer to be used by further functions.
 *
 * @param string
 * @return bool
 **/
function rpm_is_valid($filename) {}

/**
 * rpm_open will open an RPM file and will determine if the file is a
 * valid RPM file.
 *
 * @param string
 * @return resource
 **/
function rpm_open($filename) {}

/**
 * rpm_version will return the current version of the rpmreader
 * extension.
 *
 * @return string
 **/
function rpm_version() {}

/**
 * This function sorts an array in reverse order (highest to lowest).
 *
 * @param array
 * @param int
 * @return bool
 **/
function rsort(&$array, $sort_flags) {}

/**
 * This function returns a string with whitespace stripped from the end
 * of str.
 * 
 * Without the second parameter, rtrim will strip these characters:
 * 
 * " " (ASCII 32 (0x20)), an ordinary space.
 * 
 * "\t" (ASCII 9 (0x09)), a tab.
 * 
 * "\n" (ASCII 10 (0x0A)), a new line (line feed).
 * 
 * "\r" (ASCII 13 (0x0D)), a carriage return.
 * 
 * "\0" (ASCII 0 (0x00)), the NUL-byte.
 * 
 * "\x0B" (ASCII 11 (0x0B)), a vertical tab.
 *
 * @param string
 * @param string
 * @return string
 **/
function rtrim($str, $charlist) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function runkit_class_adopt($classname, $parentname) {}

/**
 * @param string
 * @return bool
 **/
function runkit_class_emancipate($classname) {}

/**
 * @param string
 * @param mixed
 * @return bool
 **/
function runkit_constant_add($constname, $value) {}

/**
 * @param string
 * @param mixed
 * @return bool
 **/
function runkit_constant_redefine($constname, $newvalue) {}

/**
 * @param string
 * @return bool
 **/
function runkit_constant_remove($constname) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function runkit_function_add($funcname, $arglist, $code) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function runkit_function_copy($funcname, $targetname) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function runkit_function_redefine($funcname, $arglist, $code) {}

/**
 * @param string
 * @return bool
 **/
function runkit_function_remove($funcname) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function runkit_function_rename($funcname, $newname) {}

/**
 * Similar to include however any code residing outside of a function or
 * class is simply ignored. Additionally, depending on the value of
 * flags, any functions or classes which already exist in the currently
 * running environment will be automatically overwritten by their new
 * definitions.
 *
 * @param string
 * @param int
 * @return bool
 **/
function runkit_import($filename, $flags) {}

/**
 * The runkit_lint function performs a syntax (lint) check on the
 * specified php code testing for scripting errors. This is similar to
 * using php -l from the command line except runkit_lint accepts actual
 * code rather than a filename.
 *
 * @param string
 * @return bool
 **/
function runkit_lint($code) {}

/**
 * The runkit_lint_file function performs a syntax (lint) check on the
 * specified filename testing for scripting errors. This is similar to
 * using php -l from the commandline.
 *
 * @param string
 * @return bool
 **/
function runkit_lint_file($filename) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function runkit_method_add($classname, $methodname, $args, $code, $flags) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function runkit_method_copy($dClass, $dMethod, $sClass, $sMethod) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function runkit_method_redefine($classname, $methodname, $args, $code, $flags) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function runkit_method_remove($classname, $methodname) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function runkit_method_rename($classname, $methodname, $newname) {}

/**
 * @return bool
 **/
function runkit_return_value_used() {}

/**
 * Ordinarily, anything output (such as with echo or print) will be
 * output as though it were printed from the parent's scope. Using
 * runkit_sandbox_output_handler however, output generated by the sandbox
 * (including errors), can be captured by a function outside of the
 * sandbox.
 *
 * @param object
 * @param mixed
 * @return mixed
 **/
function runkit_sandbox_output_handler($sandbox, $callback) {}

/**
 * @return array
 **/
function runkit_superglobals() {}

/**
 * Returns an array of files and directories from the directory.
 *
 * @param string
 * @param int
 * @param resource
 * @return array
 **/
function scandir($directory, $sorting_order, $context) {}

/**
 * sem_acquire blocks (if necessary) until the semaphore can be acquired.
 * A process attempting to acquire a semaphore which it has already
 * acquired will block forever if acquiring the semaphore would cause its
 * maximum number of semaphore to be exceeded.
 * 
 * After processing a request, any semaphores acquired by the process but
 * not explicitly released will be released automatically and a warning
 * will be generated.
 *
 * @param resource
 * @return bool
 **/
function sem_acquire($sem_identifier) {}

/**
 * sem_get returns an id that can be used to access the System V
 * semaphore with the given key.
 * 
 * A second call to sem_get for the same key will return a different
 * semaphore identifier, but both identifiers access the same underlying
 * semaphore.
 *
 * @param int
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function sem_get($key, $max_acquire, $perm, $auto_release) {}

/**
 * sem_release releases the semaphore if it is currently acquired by the
 * calling process, otherwise a warning is generated.
 * 
 * After releasing the semaphore, sem_acquire may be called to re-acquire
 * it.
 *
 * @param resource
 * @return bool
 **/
function sem_release($sem_identifier) {}

/**
 * sem_remove removes the given semaphore.
 * 
 * After removing the semaphore, it is no more accessible.
 *
 * @param resource
 * @return bool
 **/
function sem_remove($sem_identifier) {}

/**
 * Generates a storable representation of a value
 * 
 * This is useful for storing or passing PHP values around without losing
 * their type and structure.
 * 
 * To make the serialized string into a PHP value again, use unserialize.
 *
 * @param mixed
 * @return string
 **/
function serialize($value) {}

/**
 * session_cache_expire returns the current setting of
 * session.cache_expire.
 * 
 * The cache expire is reset to the default value of 180 stored in
 * session.cache_limiter at request startup time. Thus, you need to call
 * session_cache_expire for every request (and before session_start is
 * called).
 *
 * @param string
 * @return int
 **/
function session_cache_expire($new_cache_expire) {}

/**
 * session_cache_limiter returns the name of the current cache limiter.
 * 
 * The cache limiter defines which cache control HTTP headers are sent to
 * the client. These headers determine the rules by which the page
 * content may be cached by the client and intermediate proxies. Setting
 * the cache limiter to nocache disallows any client/proxy caching. A
 * value of public permits caching by proxies and the client, whereas
 * private disallows caching by proxies and permits the client to cache
 * the contents.
 * 
 * In private mode, the Expire header sent to the client may cause
 * confusion for some browsers, including Mozilla. You can avoid this
 * problem by using private_no_expire mode. The Expire header is never
 * sent to the client in this mode.
 * 
 * The cache limiter is reset to the default value stored in
 * session.cache_limiter at request startup time. Thus, you need to call
 * session_cache_limiter for every request (and before session_start is
 * called).
 *
 * @param string
 * @return string
 **/
function session_cache_limiter($cache_limiter) {}

/**
 * End the current session and store session data.
 * 
 * Session data is usually stored after your script terminated without
 * the need to call session_commit, but as session data is locked to
 * prevent concurrent writes only one script may operate on a session at
 * any time. When using framesets together with sessions you will
 * experience the frames loading one by one due to this locking. You can
 * reduce the time needed to load all the frames by ending the session as
 * soon as all changes to session variables are done.
 *
 * @return void
 **/
function session_commit() {}

/**
 * session_decode decodes the session data in data, setting variables
 * stored in the session.
 *
 * @param string
 * @return bool
 **/
function session_decode($data) {}

/**
 * In order to kill the session altogether, like to log the user out, the
 * session id must also be unset. If a cookie is used to propagate the
 * session id (default behavior), then the session cookie must be
 * deleted. setcookie may be used for that.
 *
 * @return bool
 **/
function session_destroy() {}

/**
 * session_encode returns a string with the contents of the current
 * session encoded within.
 *
 * @return string
 **/
function session_encode() {}

/**
 * Gets the session cookie parameters.
 *
 * @return array
 **/
function session_get_cookie_params() {}

/**
 * session_id is used to get or set the session id for the current
 * session.
 * 
 * The constant SID can also be used to retrieve the current name and
 * session id as a string suitable for adding to URLs. See also Session
 * handling.
 *
 * @param string
 * @return string
 **/
function session_id($id) {}

/**
 * Finds out whether a global variable is registered in a session.
 *
 * @param string
 * @return bool
 **/
function session_is_registered($name) {}

/**
 * session_module_name gets the name of the current session module.
 *
 * @param string
 * @return string
 **/
function session_module_name($module) {}

/**
 * session_name returns the name of the current session.
 * 
 * The session name is reset to the default value stored in session.name
 * at request startup time. Thus, you need to call session_name for every
 * request (and before session_start or session_register are called).
 *
 * @param string
 * @return string
 **/
function session_name($name) {}

/**
 * @param int
 * @param string
 * @return bool
 **/
function session_pgsql_add_error($error_level, $error_message) {}

/**
 * Get the number of errors and optional the error messages.
 *
 * @param bool
 * @return array
 **/
function session_pgsql_get_error($with_error_message) {}

/**
 * @return string
 **/
function session_pgsql_get_field() {}

/**
 * Reset the connection to the session database servers.
 *
 * @return bool
 **/
function session_pgsql_reset() {}

/**
 * @param string
 * @return bool
 **/
function session_pgsql_set_field($value) {}

/**
 * @return array
 **/
function session_pgsql_status() {}

/**
 * session_regenerate_id will replace the current session id with a new
 * one, and keep the current session information.
 *
 * @param bool
 * @return bool
 **/
function session_regenerate_id($delete_old_session) {}

/**
 * session_register accepts a variable number of arguments, any of which
 * can be either a string holding the name of a variable or an array
 * consisting of variable names or other arrays. For each name,
 * session_register registers the global variable with that name in the
 * current session.
 * 
 * You can also create a session variable by simply setting the
 * appropriate member of the $_SESSION or $HTTP_SESSION_VARS (PHP 4.1.0)
 * array.
 * 
 * If session_start was not called before this function is called, an
 * implicit call to session_start with no parameters will be made.
 * $_SESSION does not mimic this behavior and requires session_start
 * before use.
 *
 * @param mixed
 * @return bool
 **/
function session_register($name) {}

/**
 * session_save_path returns the path of the current directory used to
 * save session data.
 *
 * @param string
 * @return string
 **/
function session_save_path($path) {}

/**
 * Set cookie parameters defined in the file. The effect of this function
 * only lasts for the duration of the script. Thus, you need to call
 * session_set_cookie_params for every request and before session_start
 * is called.
 *
 * @param int
 * @param string
 * @param string
 * @param bool
 * @param bool
 * @return void
 **/
function session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly) {}

/**
 * session_set_save_handler sets the user-level session storage functions
 * which are used for storing and retrieving data associated with a
 * session. This is most useful when a storage method other than those
 * supplied by PHP sessions is preferred. i.e. Storing the session data
 * in a local database.
 *
 * @param callback
 * @param callback
 * @param callback
 * @param callback
 * @param callback
 * @param callback
 * @return bool
 **/
function session_set_save_handler($open, $close, $read, $write, $destroy, $gc) {}

/**
 * session_start creates a session or resumes the current one based on
 * the current session id that's being passed via a request, such as GET,
 * POST, or a cookie.
 * 
 * If you want to use a named session, you must call session_name before
 * calling session_start.
 * 
 * session_start will register internal output handler for URL rewriting
 * when trans-sid is enabled. If a user uses ob_gzhandler or like with
 * ob_start, the order of output handler is important for proper output.
 * For example, user must register ob_gzhandler before session start.
 *
 * @return bool
 **/
function session_start() {}

/**
 * session_unregister unregisters the global variable named name from the
 * current session.
 *
 * @param string
 * @return bool
 **/
function session_unregister($name) {}

/**
 * The session_unset function frees all session variables currently
 * registered.
 *
 * @return void
 **/
function session_unset() {}

/**
 * End the current session and store session data.
 * 
 * Session data is usually stored after your script terminated without
 * the need to call session_write_close, but as session data is locked to
 * prevent concurrent writes only one script may operate on a session at
 * any time. When using framesets together with sessions you will
 * experience the frames loading one by one due to this locking. You can
 * reduce the time needed to load all the frames by ending the session as
 * soon as all changes to session variables are done.
 *
 * @return void
 **/
function session_write_close() {}

/**
 * setcookie defines a cookie to be sent along with the rest of the HTTP
 * headers. Like other headers, cookies must be sent before any output
 * from your script (this is a protocol restriction). This requires that
 * you place calls to this function prior to any output, including html
 * and head tags as well as any whitespace.
 * 
 * Once the cookies have been set, they can be accessed on the next page
 * load with the $_COOKIE or $HTTP_COOKIE_VARS arrays. Note, superglobals
 * such as $_COOKIE became available in PHP 4.1.0. Cookie values also
 * exist in $_REQUEST.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @param string
 * @param bool
 * @param bool
 * @return bool
 **/
function setcookie($name, $value, $expire, $path, $domain, $secure, $httponly) {}

/**
 * Sets locale information.
 *
 * @param int
 * @param string
 * @return string
 **/
function setlocale($category, $locale) {}

/**
 * setrawcookie is exactly the same as setcookie except that the cookie
 * value will not be automatically urlencoded when sent to the browser.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @param string
 * @param bool
 * @param bool
 * @return bool
 **/
function setrawcookie($name, $value, $expire, $path, $domain, $secure, $httponly) {}

/**
 * Set the type of variable var to type.
 *
 * @param mixed
 * @param string
 * @return bool
 **/
function settype(&$var, $type) {}

/**
 * Sets a user function (error_handler) to handle errors in a script.
 * 
 * This function can be used for defining your own way of handling errors
 * during runtime, for example in applications in which you need to do
 * cleanup of data/files when a critical error happens, or when you need
 * to trigger an error under certain conditions (using trigger_error).
 * 
 * It is important to remember that the standard PHP error handler is
 * completely bypassed. error_reporting settings will have no effect and
 * your error handler will be called regardless - however you are still
 * able to read the current value of error_reporting and act
 * appropriately. Of particular note is that this value will be 0 if the
 * statement that caused the error was prepended by the @ error-control
 * operator.
 * 
 * Also note that it is your responsibility to die if necessary. If the
 * error-handler function returns, script execution will continue with
 * the next statement after the one that caused an error.
 * 
 * The following error types cannot be handled with a user defined
 * function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING,
 * E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the
 * file where set_error_handler is called.
 * 
 * If errors occur before the script is executed (e.g. on file uploads)
 * the custom error handler cannot be called since it is not registered
 * at that time.
 *
 * @param callback
 * @param int
 * @return mixed
 **/
function set_error_handler($error_handler, $error_types) {}

/**
 * Sets the default exception handler if an exception is not caught
 * within a try/catch block. Execution will stop after the
 * exception_handler is called.
 *
 * @param callback
 * @return callback
 **/
function set_exception_handler($exception_handler) {}

/**
 * Sets the include_path configuration option for the duration of the
 * script.
 *
 * @param string
 * @return string
 **/
function set_include_path($new_include_path) {}

/**
 * Set the current active configuration setting of magic_quotes_runtime.
 *
 * @param bool
 * @return bool
 **/
function set_magic_quotes_runtime($new_setting) {}

/**
 * Sets blocking or non-blocking mode on a stream.
 * 
 * This function works for any stream that supports non-blocking mode
 * (currently, regular files and socket streams).
 *
 * @param resource
 * @param int
 * @return bool
 **/
function set_socket_blocking($stream, $mode) {}

/**
 * Set the number of seconds a script is allowed to run. If this is
 * reached, the script returns a fatal error. The default limit is 30
 * seconds or, if it exists, the max_execution_time value defined in the
 * .
 * 
 * When called, set_time_limit restarts the timeout counter from zero. In
 * other words, if the timeout is the default 30 seconds, and 25 seconds
 * into script execution a call such as set_time_limit(20) is made, the
 * script will run for a total of 45 seconds before timing out.
 *
 * @param int
 * @return void
 **/
function set_time_limit($seconds) {}

/**
 * @param string
 * @param bool
 * @return string
 **/
function sha1($str, $raw_output) {}

/**
 * @param string
 * @param bool
 * @return string
 **/
function sha1_file($filename, $raw_output) {}

/**
 * This function is identical to the backtick operator.
 *
 * @param string
 * @return string
 **/
function shell_exec($cmd) {}

/**
 * shmop_close is used to close a shared memory block.
 *
 * @param int
 * @return void
 **/
function shmop_close($shmid) {}

/**
 * shmop_delete is used to delete a shared memory block.
 *
 * @param int
 * @return bool
 **/
function shmop_delete($shmid) {}

/**
 * shmop_open can create or open a shared memory block.
 *
 * @param int
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function shmop_open($key, $flags, $mode, $size) {}

/**
 * shmop_read will read a string from shared memory block.
 *
 * @param int
 * @param int
 * @param int
 * @return string
 **/
function shmop_read($shmid, $start, $count) {}

/**
 * shmop_size is used to get the size, in bytes of the shared memory
 * block.
 *
 * @param int
 * @return int
 **/
function shmop_size($shmid) {}

/**
 * shmop_write will write a string into shared memory block.
 *
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function shmop_write($shmid, $data, $offset) {}

/**
 * shm_attach returns an id that can be used to access the System V
 * shared memory with the given key, the first call creates the shared
 * memory segment with memsize and the optional perm-bits perm.
 * 
 * A second call to shm_attach for the same key will return a different
 * shared memory identifier, but both identifiers access the same
 * underlying shared memory. memsize and perm will be ignored.
 *
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function shm_attach($key, $memsize, $perm) {}

/**
 * shm_detach disconnects from the shared memory given by the
 * shm_identifier created by shm_attach. Remember, that shared memory
 * still exist in the Unix system and the data is still present.
 *
 * @param resource
 * @return bool
 **/
function shm_detach($shm_identifier) {}

/**
 * shm_get_var returns the variable with a given variable_key, in the
 * given shared memory segment. The variable is still present in the
 * shared memory.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function shm_get_var($shm_identifier, $variable_key) {}

/**
 * Checks whether a specific key exists inside a shared memory segment.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function shm_has_var($shm_identifier, $variable_key) {}

/**
 * shm_put_var inserts or updates the variable with the given
 * variable_key.
 * 
 * Warnings (E_WARNING level) will be issued if shm_identifier is not a
 * valid SysV shared memory index or if there was not enough shared
 * memory remaining to complete your request.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function shm_put_var($shm_identifier, $variable_key, $variable) {}

/**
 * shm_remove removes the shared memory shm_identifier. All data will be
 * destroyed.
 *
 * @param resource
 * @return bool
 **/
function shm_remove($shm_identifier) {}

/**
 * Removes a variable with a given variable_key and frees the occupied
 * memory.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function shm_remove_var($shm_identifier, $variable_key) {}

/**
 * Prints out or returns a syntax highlighted version of the code
 * contained in filename using the colors defined in the built-in syntax
 * highlighter for PHP.
 * 
 * Many servers are configured to automatically highlight files with a
 * phps extension. For example, example.phps when viewed will show the
 * syntax highlighted source of the file. To enable this, add this line
 * to the :
 *
 * @param string
 * @param bool
 * @return mixed
 **/
function show_source($filename, $return) {}

/**
 * This function shuffles (randomizes the order of the elements in) an
 * array.
 *
 * @param array
 * @return bool
 **/
function shuffle(&$array) {}

/**
 * This calculates the similarity between two strings as described in
 * Oliver [1993]. Note that this implementation does not use a stack as
 * in Oliver's pseudo code, but recursive calls which may or may not
 * speed up the whole process. Note also that the complexity of this
 * algorithm is O(N**3) where N is the length of the longest string.
 *
 * @param string
 * @param string
 * @param float
 * @return int
 **/
function similar_text($first, $second, &$percent) {}

/**
 * This function takes a node of a DOM document and makes it into a
 * SimpleXML node. This new object can then be used as a native SimpleXML
 * element.
 *
 * @param DOMNode
 * @param string
 * @return SimpleXMLElement
 **/
function simplexml_import_dom($node, $class_name) {}

/**
 * Convert the well-formed XML document in the given file to an object.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @param bool
 * @return object
 **/
function simplexml_load_file($filename, $class_name, $options, $ns, $is_prefix) {}

/**
 * Takes a well-formed XML string and returns it as an object.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @param bool
 * @return object
 **/
function simplexml_load_string($data, $class_name, $options, $ns, $is_prefix) {}

/**
 * sin returns the sine of the arg parameter. The arg parameter is in
 * radians.
 *
 * @param float
 * @return float
 **/
function sin($arg) {}

/**
 * Returns the hyperbolic sine of arg, defined as (exp(arg) -
 * exp(-arg))/2.
 *
 * @param float
 * @return float
 **/
function sinh($arg) {}

/**
 * Counts all elements in an array, or properties in an object.
 * 
 * For objects, if you have SPL installed, you can hook into sizeof by
 * implementing interface Countable. The interface has exactly one
 * method, sizeof, which returns the return value for the sizeof function.
 * 
 * Please see the Array section of the manual for a detailed explanation
 * of how arrays are implemented and used in PHP.
 *
 * @param mixed
 * @param int
 * @return int
 **/
function sizeof($var, $mode) {}

/**
 * @param int
 * @return int
 **/
function sleep($seconds) {}

/**
 * The snmpget function is used to read the value of an SNMP object
 * specified by the object_id.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function snmpget($hostname, $community, $object_id, $timeout, $retries) {}

/**
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function snmpgetnext($host, $community, $object_id, $timeout, $retries) {}

/**
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return array
 **/
function snmprealwalk($host, $community, $object_id, $timeout, $retries) {}

/**
 * snmpset is used to set the value of an SNMP object specified by the
 * object_id.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param mixed
 * @param int
 * @param int
 * @return bool
 **/
function snmpset($hostname, $community, $object_id, $type, $value, $timeout, $retries) {}

/**
 * snmpwalk function is used to read all the values from an SNMP agent
 * specified by the hostname.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return array
 **/
function snmpwalk($hostname, $community, $object_id, $timeout, $retries) {}

/**
 * snmpwalkoid function is used to read all object ids and their
 * respective values from an SNMP agent specified by hostname.
 * 
 * The existence of snmpwalkoid and snmpwalk has historical reasons. Both
 * functions are provided for backward compatibility. Use snmprealwalk
 * instead.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @param int
 * @return array
 **/
function snmpwalkoid($hostname, $community, $object_id, $timeout, $retries) {}

/**
 * Returns the current value stored in the UCD Library for quick_print.
 * quick_print is off by default.
 *
 * @return bool
 **/
function snmp_get_quick_print() {}

/**
 * @return int
 **/
function snmp_get_valueretrieval() {}

/**
 * @param string
 * @return bool
 **/
function snmp_read_mib($filename) {}

/**
 * @param int
 * @return void
 **/
function snmp_set_enum_print($enum_print) {}

/**
 * @param int
 * @return void
 **/
function snmp_set_oid_numeric_print($oid_numeric_print) {}

/**
 * snmp_set_oid_output_format sets the output format to be full or
 * numeric.
 *
 * @param int
 * @return void
 **/
function snmp_set_oid_output_format($oid_format) {}

/**
 * Sets the value of quick_print within the UCD SNMP library. When this
 * is set (1), the SNMP library will return 'quick printed' values. This
 * means that just the value will be printed. When quick_print is not
 * enabled (default) the UCD SNMP library prints extra information
 * including the type of the value (i.e. IpAddress or OID). Additionally,
 * if quick_print is not enabled, the library prints additional hex
 * values for all strings of three characters or less.
 * 
 * By default the UCD SNMP library returns verbose values, quick_print is
 * used to return only the value.
 * 
 * Currently strings are still returned with extra quotes, this will be
 * corrected in a later release.
 *
 * @param bool
 * @return void
 **/
function snmp_set_quick_print($quick_print) {}

/**
 * @param int
 * @return void
 **/
function snmp_set_valueretrieval($method) {}

/**
 * After the socket socket has been created using socket_create, bound to
 * a name with socket_bind, and told to listen for connections with
 * socket_listen, this function will accept incoming connections on that
 * socket. Once a successful connection is made, a new socket resource is
 * returned, which may be used for communication. If there are multiple
 * connections queued on the socket, the first will be used. If there are
 * no pending connections, socket_accept will block until a connection
 * becomes present. If socket has been made non-blocking using
 * socket_set_blocking or socket_set_nonblock, will be returned.
 * 
 * The socket resource returned by socket_accept may not be used to
 * accept new connections. The original listening socket socket, however,
 * remains open and may be reused.
 *
 * @param resource
 * @return resource
 **/
function socket_accept($socket) {}

/**
 * Binds the name given in address to the socket described by socket.
 * This has to be done before a connection is be established using
 * socket_connect or socket_listen.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function socket_bind($socket, $address, $port) {}

/**
 * This function clears the error code on the given socket or the global
 * last socket error if no socket is specified.
 * 
 * This function allows explicitly resetting the error code value either
 * of a socket or of the extension global last error code. This may be
 * useful to detect within a part of the application if an error occurred
 * or not.
 *
 * @param resource
 * @return void
 **/
function socket_clear_error($socket) {}

/**
 * socket_close closes the socket resource given by socket. This function
 * is specific to sockets and cannot be used on any other type of
 * resources.
 *
 * @param resource
 * @return void
 **/
function socket_close($socket) {}

/**
 * Initiate a connection to address using the socket resource socket,
 * which must be a valid socket resource created with socket_create.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function socket_connect($socket, $address, $port) {}

/**
 * Creates and returns a socket resource, also referred to as an endpoint
 * of communication. A typical network connection is made up of 2
 * sockets, one performing the role of the client, and another performing
 * the role of the server.
 *
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function socket_create($domain, $type, $protocol) {}

/**
 * socket_create_listen creates a new socket resource of type AF_INET
 * listening on all local interfaces on the given port waiting for new
 * connections.
 * 
 * This function is meant to ease the task of creating a new socket which
 * only listens to accept new connections.
 *
 * @param int
 * @param int
 * @return resource
 **/
function socket_create_listen($port, $backlog) {}

/**
 * socket_create_pair creates two connected and indistinguishable
 * sockets, and stores them in fd. This function is commonly used in IPC
 * (InterProcess Communication).
 *
 * @param int
 * @param int
 * @param int
 * @param array
 * @return bool
 **/
function socket_create_pair($domain, $type, $protocol, &$fd) {}

/**
 * Queries the remote side of the given socket which may either result in
 * host/port or in a Unix filesystem path, dependent on its type.
 *
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function socket_getpeername($socket, &$address, &$port) {}

/**
 * @param resource
 * @param string
 * @param int
 * @return bool
 **/
function socket_getsockname($socket, &$addr, &$port) {}

/**
 * The socket_get_option function retrieves the value for the option
 * specified by the optname parameter for the specified socket.
 *
 * @param resource
 * @param int
 * @param int
 * @return mixed
 **/
function socket_get_option($socket, $level, $optname) {}

/**
 * If a socket resource is passed to this function, the last error which
 * occurred on this particular socket is returned. If the socket resource
 * is omitted, the error code of the last failed socket function is
 * returned. The latter is particularly helpful for functions like
 * socket_create which don't return a socket on failure and socket_select
 * which can fail for reasons not directly tied to a particular socket.
 * The error code is suitable to be fed to socket_strerror which returns
 * a string describing the given error code.
 *
 * @param resource
 * @return int
 **/
function socket_last_error($socket) {}

/**
 * After the socket socket has been created using socket_create and bound
 * to a name with socket_bind, it may be told to listen for incoming
 * connections on socket.
 * 
 * socket_listen is applicable only to sockets of type SOCK_STREAM or
 * SOCK_SEQPACKET.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function socket_listen($socket, $backlog) {}

/**
 * The function socket_read reads from the socket resource socket created
 * by the socket_create or socket_accept functions.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function socket_read($socket, $length, $type) {}

/**
 * The socket_recv function receives len bytes of data in buf from
 * socket. socket_recv can be used to gather data from connected sockets.
 * Additionally, one or more flags can be specified to modify the
 * behaviour of the function.
 * 
 * buf is passed by reference, so it must be specified as a variable in
 * the argument list. Data read from socket by socket_recv will be
 * returned in buf.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function socket_recv($socket, &$buf, $len, $flags) {}

/**
 * The socket_recvfrom function receives len bytes of data in buf from
 * name on port port (if the socket is not of type AF_UNIX) using socket.
 * socket_recvfrom can be used to gather data from both connected and
 * unconnected sockets. Additionally, one or more flags can be specified
 * to modify the behaviour of the function.
 * 
 * The name and port must be passed by reference. If the socket is not
 * connection-oriented, name will be set to the internet protocol address
 * of the remote host or the path to the UNIX socket. If the socket is
 * connection-oriented, name is . Additionally, the port will contain the
 * port of the remote host in the case of an unconnected AF_INET or
 * AF_INET6 socket.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function socket_recvfrom($socket, &$buf, $len, $flags, &$name, &$port) {}

/**
 * socket_select accepts arrays of sockets and waits for them to change
 * status. Those coming with BSD sockets background will recognize that
 * those socket resource arrays are in fact the so-called file descriptor
 * sets. Three independent arrays of socket resources are watched.
 *
 * @param array
 * @param array
 * @param array
 * @param int
 * @param int
 * @return int
 **/
function socket_select(&$read, &$write, &$except, $tv_sec, $tv_usec) {}

/**
 * The function socket_send sends len bytes to the socket socket from
 * buf.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function socket_send($socket, $buf, $len, $flags) {}

/**
 * The function socket_sendto sends len bytes from buf through the socket
 * socket to the port at the address addr.
 *
 * @param resource
 * @param string
 * @param int
 * @param int
 * @param string
 * @param int
 * @return int
 **/
function socket_sendto($socket, $buf, $len, $flags, $addr, $port) {}

/**
 * The socket_set_block function removes the O_NONBLOCK flag on the
 * socket specified by the socket parameter.
 * 
 * When an operation (e.g. receive, send, connect, accept, ...) is
 * performed on a blocking socket, the script will pause its execution
 * until it receives a signal or it can perform the operation.
 *
 * @param resource
 * @return bool
 **/
function socket_set_block($socket) {}

/**
 * The socket_set_nonblock function sets the O_NONBLOCK flag on the
 * socket specified by the socket parameter.
 * 
 * When an operation (e.g. receive, send, connect, accept, ...) is
 * performed on a non-blocking socket, the script not pause its execution
 * until it receives a signal or it can perform the operation. Rather, if
 * the operation would result in a block, the called function will fail.
 *
 * @param resource
 * @return bool
 **/
function socket_set_nonblock($socket) {}

/**
 * The socket_set_option function sets the option specified by the
 * optname parameter, at the specified protocol level, to the value
 * pointed to by the optval parameter for the socket.
 *
 * @param resource
 * @param int
 * @param int
 * @param mixed
 * @return bool
 **/
function socket_set_option($socket, $level, $optname, $optval) {}

/**
 * The socket_shutdown function allows you to stop incoming, outgoing or
 * all data (the default) from being sent through the socket
 *
 * @param resource
 * @param int
 * @return bool
 **/
function socket_shutdown($socket, $how) {}

/**
 * socket_strerror takes as its errno parameter a socket error code as
 * returned by socket_last_error and returns the corresponding
 * explanatory text.
 *
 * @param int
 * @return string
 **/
function socket_strerror($errno) {}

/**
 * The function socket_write writes to the socket from the given buffer.
 *
 * @param resource
 * @param string
 * @param int
 * @return int
 **/
function socket_write($socket, $buffer, $length) {}

/**
 * This function returns the current version of the extension as a
 * string.
 *
 * @return string
 **/
function solr_get_version() {}

/**
 * This function sorts an array. Elements will be arranged from lowest to
 * highest when this function has completed.
 *
 * @param array
 * @param int
 * @return bool
 **/
function sort(&$array, $sort_flags) {}

/**
 * Calculates the soundex key of str.
 * 
 * Soundex keys have the property that words pronounced similarly produce
 * the same soundex key, and can thus be used to simplify searches in
 * databases where you know the pronunciation but not the spelling. This
 * soundex function returns a string 4 characters long, starting with a
 * letter.
 * 
 * This particular soundex function is one described by Donald Knuth in
 * "The Art Of Computer Programming, vol. 3: Sorting And Searching",
 * Addison-Wesley (1973), pp. 391-392.
 *
 * @param string
 * @return string
 **/
function soundex($str) {}

/**
 * Splits a string into array by regular expression.
 *
 * @param string
 * @param string
 * @param int
 * @return array
 **/
function split($pattern, $string, $limit) {}

/**
 * Splits a string into array by regular expression.
 * 
 * This function is identical to split except that this ignores case
 * distinction when matching alphabetic characters.
 *
 * @param string
 * @param string
 * @param int
 * @return array
 **/
function spliti($pattern, $string, $limit) {}

/**
 * This function is intended to be used as a default implementation for
 * __autoload(). If nothing else is specified and autoload_register() is
 * called without any parameters then this functions will be used for any
 * later call to __autoload().
 *
 * @param string
 * @param string
 * @return void
 **/
function spl_autoload($class_name, $file_extensions) {}

/**
 * This function can be used to manually search for a class or interface
 * using the registered __autoload functions.
 *
 * @param string
 * @return void
 **/
function spl_autoload_call($class_name) {}

/**
 * This function can modify and check the file extensions that the built
 * in __autoload fallback function spl_autoload will be using.
 *
 * @param string
 * @return string
 **/
function spl_autoload_extensions($file_extensions) {}

/**
 * Get all registered __autoload() functions.
 *
 * @return array
 **/
function spl_autoload_functions() {}

/**
 * Register a function with the spl provided __autoload stack. If the
 * stack is not yet activated it will be activated.
 * 
 * If your code has an existing __autoload function then this function
 * must be explicitly registered on the __autoload stack. This is because
 * spl_autoload_register() will effectively replace the engine cache for
 * the __autoload function by either spl_autoload() or
 * spl_autoload_call().
 * 
 * If there must be multiple autoload functions, spl_autoload_register
 * allows for this. It effectively creates a queue of autoload functions,
 * and runs through each of them in the order they are defined. By
 * contrast, __autoload may only be defined once.
 *
 * @param callback
 * @return bool
 **/
function spl_autoload_register($autoload_function) {}

/**
 * Unregister a function from the spl provided __autoload stack. If the
 * stack is activated and empty after unregistering the given function
 * then it will be deactivated.
 * 
 * When this function results in the autoload stack being activated an
 * existing __autoload function will not be reactivated.
 *
 * @param mixed
 * @return bool
 **/
function spl_autoload_unregister($autoload_function) {}

/**
 * This function returns an array with the current available SPL classes.
 *
 * @return array
 **/
function spl_classes() {}

/**
 * This function returns a unique identifier for the object. This id can
 * be used as a hash key for storing objects or for identifying an
 * object.
 *
 * @param object
 * @return string
 **/
function spl_object_hash($obj) {}

/**
 * Returns a string produced according to the formatting string format.
 *
 * @param string
 * @param mixed
 * @return string
 **/
function sprintf($format, $args) {}

/**
 * sqlite_array_query executes the given query and returns an array of
 * the entire result set. It is similar to calling sqlite_query and then
 * sqlite_fetch_array for each row in the result set. sqlite_array_query
 * is significantly faster than the aforementioned.
 *
 * @param resource
 * @param string
 * @param int
 * @param bool
 * @return array
 **/
function sqlite_array_query($dbhandle, $query, $result_type, $decode_binary) {}

/**
 * Set the maximum time, in milliseconds, that SQLite will wait for a
 * dbhandle to become ready for use.
 *
 * @param resource
 * @param int
 * @return void
 **/
function sqlite_busy_timeout($dbhandle, $milliseconds) {}

/**
 * Returns the numbers of rows that were changed by the most recent SQL
 * statement executed against the dbhandle database handle.
 *
 * @param resource
 * @return int
 **/
function sqlite_changes($dbhandle) {}

/**
 * Closes the given database handle. If the database was persistent, it
 * will be closed and removed from the persistent list.
 *
 * @param resource
 * @return void
 **/
function sqlite_close($dbhandle) {}

/**
 * Fetches the value of a column named index_or_name (if it is a string),
 * or of the ordinal column numbered index_or_name (if it is an integer)
 * from the current row of the query result handle result.
 *
 * @param resource
 * @param mixed
 * @param bool
 * @return mixed
 **/
function sqlite_column($result, $index_or_name, $decode_binary) {}

/**
 * sqlite_create_aggregate is similar to sqlite_create_function except
 * that it registers functions that can be used to calculate a result
 * aggregated across all the rows of a query.
 * 
 * The key difference between this function and sqlite_create_function is
 * that two functions are required to manage the aggregate; step_func is
 * called for each row of the result set. Your PHP function should
 * accumulate the result and store it into the aggregation context. Once
 * all the rows have been processed, finalize_func will be called and it
 * should then take the data from the aggregation context and return the
 * result. Callback functions should return a type understood by SQLite
 * (i.e. scalar type).
 *
 * @param resource
 * @param string
 * @param callback
 * @param callback
 * @param int
 * @return void
 **/
function sqlite_create_aggregate($dbhandle, $function_name, $step_func, $finalize_func, $num_args) {}

/**
 * sqlite_create_function allows you to register a PHP function with
 * SQLite as an UDF (User Defined Function), so that it can be called
 * from within your SQL statements.
 * 
 * The UDF can be used in any SQL statement that can call functions, such
 * as SELECT and UPDATE statements and also in triggers.
 *
 * @param resource
 * @param string
 * @param callback
 * @param int
 * @return void
 **/
function sqlite_create_function($dbhandle, $function_name, $callback, $num_args) {}

/**
 * sqlite_current is identical to sqlite_fetch_array except that it does
 * not advance to the next row prior to returning the data; it returns
 * the data from the current position only.
 *
 * @param resource
 * @param int
 * @param bool
 * @return array
 **/
function sqlite_current($result, $result_type, $decode_binary) {}

/**
 * Returns a human readable description of the error_code returned from
 * sqlite_last_error.
 *
 * @param int
 * @return string
 **/
function sqlite_error_string($error_code) {}

/**
 * sqlite_escape_string will correctly quote the string specified by item
 * for use in an SQLite SQL statement. This includes doubling up
 * single-quote characters (') and checking for binary-unsafe characters
 * in the query string.
 * 
 * Although the encoding makes it safe to insert the data, it will render
 * simple text comparisons and LIKE clauses in your queries unusable for
 * the columns that contain the binary data. In practice, this shouldn't
 * be a problem, as your schema should be such that you don't use such
 * things on binary columns (in fact, it might be better to store binary
 * data using other means, such as in files).
 *
 * @param string
 * @return string
 **/
function sqlite_escape_string($item) {}

/**
 * Executes an SQL statement given by the query against a given database
 * handle (specified by the dbhandle parameter).
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function sqlite_exec($dbhandle, $query, &$error_msg) {}

/**
 * sqlite_factory behaves similarly to sqlite_open in that it opens an
 * SQLite database or attempts to create it if it does not exist.
 * However, a SQLiteDatabase object is returned rather than a resource.
 * Please see the sqlite_open reference page for further usage and
 * caveats.
 *
 * @param string
 * @param int
 * @param string
 * @return SQLiteDatabase
 **/
function sqlite_factory($filename, $mode, &$error_message) {}

/**
 * sqlite_fetch_all returns an array of the entire result set from the
 * result resource. It is similar to calling sqlite_query (or
 * sqlite_unbuffered_query) and then sqlite_fetch_array for each row in
 * the result set.
 *
 * @param resource
 * @param int
 * @param bool
 * @return array
 **/
function sqlite_fetch_all($result, $result_type, $decode_binary) {}

/**
 * Fetches the next row from the given result handle. If there are no
 * more rows, returns , otherwise returns an associative array
 * representing the row data.
 *
 * @param resource
 * @param int
 * @param bool
 * @return array
 **/
function sqlite_fetch_array($result, $result_type, $decode_binary) {}

/**
 * sqlite_fetch_column_types returns an array of column data types from
 * the specified table_name table.
 *
 * @param string
 * @param resource
 * @param int
 * @return array
 **/
function sqlite_fetch_column_types($table_name, $dbhandle, $result_type) {}

/**
 * @param resource
 * @param string
 * @param array
 * @param bool
 * @return object
 **/
function sqlite_fetch_object($result, $class_name, $ctor_params, $decode_binary) {}

/**
 * sqlite_fetch_single is identical to sqlite_fetch_array except that it
 * returns the value of the first column of the rowset.
 * 
 * This is the most optimal way to retrieve data when you are only
 * interested in the values from a single column of data.
 *
 * @param resource
 * @param bool
 * @return string
 **/
function sqlite_fetch_single($result, $decode_binary) {}

/**
 * sqlite_fetch_string is identical to sqlite_fetch_array except that it
 * returns the value of the first column of the rowset.
 * 
 * This is the most optimal way to retrieve data when you are only
 * interested in the values from a single column of data.
 *
 * @param resource
 * @param bool
 * @return string
 **/
function sqlite_fetch_string($result, $decode_binary) {}

/**
 * Given the ordinal column number, field_index, sqlite_field_name
 * returns the name of that field in the result set result.
 *
 * @param resource
 * @param int
 * @return string
 **/
function sqlite_field_name($result, $field_index) {}

/**
 * Finds whether more rows are available from the given result set.
 *
 * @param resource
 * @return bool
 **/
function sqlite_has_more($result) {}

/**
 * Find whether there are more previous rows from the given result
 * handle.
 *
 * @param resource
 * @return bool
 **/
function sqlite_has_prev($result) {}

/**
 * sqlite_key returns the current row index of the buffered result set
 * result.
 *
 * @param resource
 * @return int
 **/
function sqlite_key($result) {}

/**
 * Returns the error code from the last operation performed on dbhandle
 * (the database handle), or 0 when no error occurred. A human readable
 * description of the error code can be retrieved using
 * sqlite_error_string.
 *
 * @param resource
 * @return int
 **/
function sqlite_last_error($dbhandle) {}

/**
 * Returns the rowid of the row that was most recently inserted into the
 * database dbhandle, if it was created as an auto-increment field.
 *
 * @param resource
 * @return int
 **/
function sqlite_last_insert_rowid($dbhandle) {}

/**
 * The SQLite library may be compiled in either ISO-8859-1 or UTF-8
 * compatible modes. This function allows you to determine which encoding
 * scheme is used by your version of the library.
 * 
 * When compiled with UTF-8 support, sqlite handles encoding and decoding
 * of UTF-8 multi-byte character sequences, but does not yet do a
 * complete job when working with the data (no normalization is performed
 * for example), and some comparison operations may still not be carried
 * out correctly.
 *
 * @return string
 **/
function sqlite_libencoding() {}

/**
 * Returns the version of the linked SQLite library.
 *
 * @return string
 **/
function sqlite_libversion() {}

/**
 * sqlite_next advances the result handle result to the next row.
 *
 * @param resource
 * @return bool
 **/
function sqlite_next($result) {}

/**
 * Returns the number of fields in the result set.
 *
 * @param resource
 * @return int
 **/
function sqlite_num_fields($result) {}

/**
 * Returns the number of rows in the buffered result set.
 *
 * @param resource
 * @return int
 **/
function sqlite_num_rows($result) {}

/**
 * Opens a SQLite database or creates the database if it does not exist.
 *
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function sqlite_open($filename, $mode, &$error_message) {}

/**
 * sqlite_popen will first check to see if a persistent handle has
 * already been opened for the given filename. If it finds one, it
 * returns that handle to your script, otherwise it opens a fresh handle
 * to the database.
 * 
 * The benefit of this approach is that you don't incur the performance
 * cost of re-reading the database and index schema on each page hit
 * served by persistent web server SAPI's (any SAPI except for regular
 * CGI or CLI).
 *
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function sqlite_popen($filename, $mode, &$error_message) {}

/**
 * sqlite_prev seeks back the result handle to the previous row.
 *
 * @param resource
 * @return bool
 **/
function sqlite_prev($result) {}

/**
 * Executes an SQL statement given by the query against a given database
 * handle.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function sqlite_query($dbhandle, $query, $result_type, &$error_msg) {}

/**
 * sqlite_rewind seeks back to the first row in the given result set.
 *
 * @param resource
 * @return bool
 **/
function sqlite_rewind($result) {}

/**
 * sqlite_seek seeks to the row given by the parameter rownum.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function sqlite_seek($result, $rownum) {}

/**
 * @param resource
 * @param string
 * @param bool
 * @param bool
 * @return array
 **/
function sqlite_single_query($db, $query, $first_row_only, $decode_binary) {}

/**
 * Decodes binary data passed as parameters to a UDF.
 * 
 * You must call this function on parameters passed to your UDF if you
 * need them to handle binary data, as the binary encoding employed by
 * PHP will obscure the content and of the parameter in its natural,
 * non-coded form.
 * 
 * PHP does not perform this encode/decode operation automatically as it
 * would severely impact performance if it did.
 *
 * @param string
 * @return string
 **/
function sqlite_udf_decode_binary($data) {}

/**
 * sqlite_udf_encode_binary applies a binary encoding to the data so that
 * it can be safely returned from queries (since the underlying libsqlite
 * API is not binary safe).
 * 
 * If there is a chance that your data might be binary unsafe (e.g.: it
 * contains a NUL byte in the middle rather than at the end, or if it has
 * and 0x01 byte as the first character) then you must call this function
 * to encode the return value from your UDF.
 * 
 * PHP does not perform this encode/decode operation automatically as it
 * would severely impact performance if it did.
 *
 * @param string
 * @return string
 **/
function sqlite_udf_encode_binary($data) {}

/**
 * sqlite_unbuffered_query is identical to sqlite_query except that the
 * result that is returned is a sequential forward-only result set that
 * can only be used to read each row, one after the other.
 * 
 * This function is ideal for generating things such as HTML tables where
 * you only need to process one row at a time and don't need to randomly
 * access the row data.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return resource
 **/
function sqlite_unbuffered_query($dbhandle, $query, $result_type, &$error_msg) {}

/**
 * Finds whether more rows are available from the given result handle.
 *
 * @param resource
 * @return bool
 **/
function sqlite_valid($result) {}

/**
 * Creates a regular expression for a case insensitive match.
 *
 * @param string
 * @return string
 **/
function sql_regcase($string) {}

/**
 * Returns the square root of arg.
 *
 * @param float
 * @return float
 **/
function sqrt($arg) {}

/**
 * Seeds the random number generator with seed or with a random value if
 * no seed is given.
 *
 * @param int
 * @return void
 **/
function srand($seed) {}

/**
 * The function sscanf is the input analog of printf. sscanf reads from
 * the string str and interprets it according to the specified format,
 * which is described in the documentation for sprintf.
 * 
 * Any whitespace in the format string matches any whitespace in the
 * input string. This means that even a tab \t in the format string can
 * match a single space character in the input string.
 *
 * @param string
 * @param string
 * @return mixed
 **/
function sscanf($str, $format) {}

/**
 * Authenticate using a public hostkey read from a file.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_auth_hostbased_file($session, $username, $hostname, $pubkeyfile, $privkeyfile, $passphrase, $local_username) {}

/**
 * Attempt "none" authentication which usually will (and should) fail. As
 * part of the failure, this function will return an array of accepted
 * authentication methods.
 *
 * @param resource
 * @param string
 * @return mixed
 **/
function ssh2_auth_none($session, $username) {}

/**
 * Authenticate over SSH using a plain password
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_auth_password($session, $username, $password) {}

/**
 * Authenticate using a public key read from a file.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_auth_pubkey_file($session, $username, $pubkeyfile, $privkeyfile, $passphrase) {}

/**
 * Establish a connection to a remote SSH server.
 * 
 * Once connected, the client should verify the server's hostkey using
 * ssh2_fingerprint, then authenticate using either password or public
 * key.
 *
 * @param string
 * @param int
 * @param array
 * @param array
 * @return resource
 **/
function ssh2_connect($host, $port, $methods, $callbacks) {}

/**
 * Execute a command at the remote end and allocate a channel for it.
 *
 * @param resource
 * @param string
 * @param string
 * @param array
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function ssh2_exec($session, $command, $pty, $env, $width, $height, $width_height_type) {}

/**
 * Fetches an alternate substream associated with an SSH2 channel stream.
 * The SSH2 protocol currently defines only one substream, STDERR, which
 * has a substream ID of SSH2_STREAM_STDERR (defined as 1).
 *
 * @param resource
 * @param int
 * @return resource
 **/
function ssh2_fetch_stream($channel, $streamid) {}

/**
 * Returns a server hostkey hash from an active session.
 *
 * @param resource
 * @param int
 * @return string
 **/
function ssh2_fingerprint($session, $flags) {}

/**
 * Returns list of negotiated methods.
 *
 * @param resource
 * @return array
 **/
function ssh2_methods_negotiated($session) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param bool
 * @param array
 * @return bool
 **/
function ssh2_publickey_add($pkey, $algoname, $blob, $overwrite, $attributes) {}

/**
 * Request the Publickey subsystem from an already connected SSH2 server.
 * 
 * The publickey subsystem allows an already connected and authenticated
 * client to manage the list of authorized public keys stored on the
 * target server in an implementation agnostic manner. If the remote
 * server does not support the publickey subsystem, the
 * ssh2_publickey_init function will return .
 *
 * @param resource
 * @return resource
 **/
function ssh2_publickey_init($session) {}

/**
 * List currently authorized publickeys.
 *
 * @param resource
 * @return array
 **/
function ssh2_publickey_list($pkey) {}

/**
 * Removes an authorized publickey.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_publickey_remove($pkey, $algoname, $blob) {}

/**
 * Copy a file from the remote server to the local filesystem using the
 * SCP protocol.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_scp_recv($session, $remote_file, $local_file) {}

/**
 * Copy a file from the local filesystem to the remote server using the
 * SCP protocol.
 *
 * @param resource
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function ssh2_scp_send($session, $local_file, $remote_file, $create_mode) {}

/**
 * Request the SFTP subsystem from an already connected SSH2 server.
 *
 * @param resource
 * @return resource
 **/
function ssh2_sftp($session) {}

/**
 * Stats a symbolic link on the remote filesystem without following the
 * link.
 * 
 * This function is similar to using the lstat function with the
 * ssh2.sftp:// wrapper in PHP5 and returns the same values.
 *
 * @param resource
 * @param string
 * @return array
 **/
function ssh2_sftp_lstat($sftp, $path) {}

/**
 * Creates a directory on the remote file server with permissions set to
 * mode.
 * 
 * This function is similar to using mkdir with the ssh2.sftp:// wrapper.
 *
 * @param resource
 * @param string
 * @param int
 * @param bool
 * @return bool
 **/
function ssh2_sftp_mkdir($sftp, $dirname, $mode, $recursive) {}

/**
 * Returns the target of a symbolic link.
 *
 * @param resource
 * @param string
 * @return string
 **/
function ssh2_sftp_readlink($sftp, $link) {}

/**
 * Translates filename into the effective real path on the remote
 * filesystem.
 *
 * @param resource
 * @param string
 * @return string
 **/
function ssh2_sftp_realpath($sftp, $filename) {}

/**
 * Renames a file on the remote filesystem.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_sftp_rename($sftp, $from, $to) {}

/**
 * Removes a directory from the remote file server.
 * 
 * This function is similar to using rmdir with the ssh2.sftp:// wrapper.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ssh2_sftp_rmdir($sftp, $dirname) {}

/**
 * Stats a file on the remote filesystem following any symbolic links.
 * 
 * This function is similar to using the stat function with the
 * ssh2.sftp:// wrapper in PHP5 and returns the same values.
 *
 * @param resource
 * @param string
 * @return array
 **/
function ssh2_sftp_stat($sftp, $path) {}

/**
 * Creates a symbolic link named link on the remote filesystem pointing
 * to target.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function ssh2_sftp_symlink($sftp, $target, $link) {}

/**
 * Deletes a file on the remote filesystem.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function ssh2_sftp_unlink($sftp, $filename) {}

/**
 * Open a shell at the remote end and allocate a stream for it.
 *
 * @param resource
 * @param string
 * @param array
 * @param int
 * @param int
 * @param int
 * @return resource
 **/
function ssh2_shell($session, $term_type, $env, $width, $height, $width_height_type) {}

/**
 * Open a socket stream to an arbitrary host/port by way of the currently
 * connected SSH server.
 *
 * @param resource
 * @param string
 * @param int
 * @return resource
 **/
function ssh2_tunnel($session, $host, $port) {}

/**
 * Gathers the statistics of the file named by filename. If filename is a
 * symbolic link, statistics are from the file itself, not the symlink.
 * 
 * lstat is identical to stat except it would instead be based off the
 * symlinks status.
 *
 * @param string
 * @return array
 **/
function stat($filename) {}

/**
 * @param array
 * @return float
 **/
function stats_absolute_deviation($a) {}

/**
 * Method
 * 
 * Cumulative distribution function (P) is calculated directly by code
 * associated with the following reference.
 * 
 * DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit
 * Computation of the Incomplete Beta Function Ratios. ACM Trans. Math.
 * Softw. 18 (1993), 360-373.
 * 
 * Computation of other parameters involve a search for a value that
 * produces the desired value of P. The search relies on the monotonicity
 * of P with the other parameter.
 * 
 * Note
 * 
 * The beta density is proportional to t^(A-1) * (1-t)^(B-1)
 * 
 * Arguments
 * 
 * P -- The integral from 0 to X of the chi-square distribution. Input
 * range: [0, 1].
 * 
 * Q -- 1-P. Input range: [0, 1]. P + Q = 1.0.
 * 
 * X -- Upper limit of integration of beta density. Input range: [0,1].
 * Search range: [0,1]
 * 
 * Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0.
 * 
 * A -- The first parameter of the beta density. Input range: (0,
 * +infinity). Search range: [1D-100,1D100]
 * 
 * B -- The second parameter of the beta density. Input range: (0,
 * +infinity). Search range: [1D-100,1D100]
 * 
 * STATUS -- 0 if calculation completed correctly -I if input parameter
 * number I is out of range 1 if answer appears to be lower than lowest
 * search bound 2 if answer appears to be higher than greatest search
 * bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1
 * 
 * BOUND -- Undefined if STATUS is 0
 * 
 * Bound exceeded by parameter number I if STATUS is negative.
 * 
 * Lower search bound if STATUS is 1.
 * 
 * Upper search bound if STATUS is 2.
 *
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_beta($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_binomial($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_cauchy($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_chisquare($par1, $par2, $which) {}

/**
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_exponential($par1, $par2, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_f($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_gamma($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_laplace($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_logistic($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_negative_binomial($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_noncentral_chisquare($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_noncentral_f($par1, $par2, $par3, $par4, $which) {}

/**
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_poisson($par1, $par2, $which) {}

/**
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_t($par1, $par2, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_uniform($par1, $par2, $par3, $which) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_cdf_weibull($par1, $par2, $par3, $which) {}

/**
 * @param array
 * @param array
 * @return float
 **/
function stats_covariance($a, $b) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_beta($x, $a, $b) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_cauchy($x, $ave, $stdev) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_chisquare($x, $dfr) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_exponential($x, $scale) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_f($x, $dfr1, $dfr2) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_gamma($x, $shape, $scale) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_laplace($x, $ave, $stdev) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_logistic($x, $ave, $stdev) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_negative_binomial($x, $n, $pi) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_normal($x, $ave, $stdev) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_pmf_binomial($x, $n, $pi) {}

/**
 * @param float
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_pmf_hypergeometric($n1, $n2, $N1, $N2) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_pmf_poisson($x, $lb) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_t($x, $dfr) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_dens_weibull($x, $a, $b) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_den_uniform($x, $a, $b) {}

/**
 * @param array
 * @return number
 **/
function stats_harmonic_mean($a) {}

/**
 * @param array
 * @return float
 **/
function stats_kurtosis($a) {}

/**
 * Returns a random deviate from the beta distribution with parameters A
 * and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0
 * x . Method R. C. H. Cheng.
 *
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_beta($a, $b) {}

/**
 * @param float
 * @return float
 **/
function stats_rand_gen_chisquare($df) {}

/**
 * @param float
 * @return float
 **/
function stats_rand_gen_exponential($av) {}

/**
 * Generates a random deviate from the F (variance ratio) distribution
 * with "dfn" degrees of freedom in the numerator and "dfd" degrees of
 * freedom in the denominator. Method : directly generates ratio of
 * chisquare variates.
 *
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_f($dfn, $dfd) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_funiform($low, $high) {}

/**
 * Generates random deviates from the gamma distribution whose density is
 * (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).
 *
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_gamma($a, $r) {}

/**
 * @param int
 * @param float
 * @return int
 **/
function stats_rand_gen_ibinomial($n, $pp) {}

/**
 * @param int
 * @param float
 * @return int
 **/
function stats_rand_gen_ibinomial_negative($n, $p) {}

/**
 * @return int
 **/
function stats_rand_gen_int() {}

/**
 * @param float
 * @return int
 **/
function stats_rand_gen_ipoisson($mu) {}

/**
 * @param int
 * @param int
 * @return int
 **/
function stats_rand_gen_iuniform($low, $high) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_noncenral_chisquare($df, $xnonc) {}

/**
 * @param float
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_noncentral_f($dfn, $dfd, $xnonc) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_noncentral_t($df, $xnonc) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_rand_gen_normal($av, $sd) {}

/**
 * @param float
 * @return float
 **/
function stats_rand_gen_t($df) {}

/**
 * @return array
 **/
function stats_rand_get_seeds() {}

/**
 * @param string
 * @return array
 **/
function stats_rand_phrase_to_seeds($phrase) {}

/**
 * @return float
 **/
function stats_rand_ranf() {}

/**
 * @param int
 * @param int
 * @return void
 **/
function stats_rand_setall($iseed1, $iseed2) {}

/**
 * @param array
 * @return float
 **/
function stats_skew($a) {}

/**
 * @param array
 * @param bool
 * @return float
 **/
function stats_standard_deviation($a, $sample) {}

/**
 * @param int
 * @param int
 * @return float
 **/
function stats_stat_binomial_coef($x, $n) {}

/**
 * @param array
 * @param array
 * @return float
 **/
function stats_stat_correlation($arr1, $arr2) {}

/**
 * @param int
 * @return float
 **/
function stats_stat_gennch($n) {}

/**
 * @param array
 * @param array
 * @return float
 **/
function stats_stat_independent_t($arr1, $arr2) {}

/**
 * @param array
 * @param array
 * @return float
 **/
function stats_stat_innerproduct($arr1, $arr2) {}

/**
 * @param float
 * @param float
 * @param float
 * @param int
 * @return float
 **/
function stats_stat_noncentral_t($par1, $par2, $par3, $which) {}

/**
 * @param array
 * @param array
 * @return float
 **/
function stats_stat_paired_t($arr1, $arr2) {}

/**
 * @param float
 * @param float
 * @return float
 **/
function stats_stat_percentile($df, $xnonc) {}

/**
 * @param array
 * @param float
 * @return float
 **/
function stats_stat_powersum($arr, $power) {}

/**
 * @param array
 * @param bool
 * @return float
 **/
function stats_variance($a, $sample) {}

/**
 * Binary safe case-insensitive string comparison.
 *
 * @param string
 * @param string
 * @return int
 **/
function strcasecmp($str1, $str2) {}

/**
 * Returns part of haystack string from the first occurrence of needle to
 * the end of haystack.
 *
 * @param string
 * @param mixed
 * @param bool
 * @return string
 **/
function strchr($haystack, $needle, $before_needle) {}

/**
 * @param string
 * @param string
 * @return int
 **/
function strcmp($str1, $str2) {}

/**
 * Note that this comparison is case sensitive, and unlike strcmp this
 * function is not binary safe.
 * 
 * strcoll uses the current locale for doing the comparisons. If the
 * current locale is C or POSIX, this function is equivalent to strcmp.
 *
 * @param string
 * @param string
 * @return int
 **/
function strcoll($str1, $str2) {}

/**
 * Returns the length of the initial segment of str1 which does not
 * contain any of the characters in str2.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function strcspn($str1, $str2, $start, $length) {}

/**
 * @param resource
 * @param resource
 * @return void
 **/
function stream_bucket_append($brigade, $bucket) {}

/**
 * @param resource
 * @return object
 **/
function stream_bucket_make_writeable($brigade) {}

/**
 * @param resource
 * @param string
 * @return object
 **/
function stream_bucket_new($stream, $buffer) {}

/**
 * @param resource
 * @param resource
 * @return void
 **/
function stream_bucket_prepend($brigade, $bucket) {}

/**
 * Creates and returns a stream context with any options supplied in
 * options preset.
 *
 * @param array
 * @param array
 * @return resource
 **/
function stream_context_create($options, $params) {}

/**
 * @param array
 * @return resource
 **/
function stream_context_get_default($options) {}

/**
 * @param resource
 * @return array
 **/
function stream_context_get_options($stream_or_context) {}

/**
 * Retrieves parameter and options information from the stream or
 * context.
 *
 * @param resource
 * @return array
 **/
function stream_context_get_params($stream_or_context) {}

/**
 * @param array
 * @return resource
 **/
function stream_context_set_default($options) {}

/**
 * @param resource
 * @param string
 * @param string
 * @param mixed
 * @return bool
 **/
function stream_context_set_option($stream_or_context, $wrapper, $option, $value) {}

/**
 * Sets parameters on the specified context.
 *
 * @param resource
 * @param array
 * @return bool
 **/
function stream_context_set_params($stream_or_context, $params) {}

/**
 * Makes a copy of up to maxlength bytes of data from the current
 * position (or from the offset position, if specified) in source to
 * dest. If maxlength is not specified, all remaining content in source
 * will be copied.
 *
 * @param resource
 * @param resource
 * @param int
 * @param int
 * @return int
 **/
function stream_copy_to_stream($source, $dest, $maxlength, $offset) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function stream_encoding($stream, $encoding) {}

/**
 * Adds filtername to the list of filters attached to stream.
 *
 * @param resource
 * @param string
 * @param int
 * @param mixed
 * @return resource
 **/
function stream_filter_append($stream, $filtername, $read_write, $params) {}

/**
 * Adds filtername to the list of filters attached to stream.
 *
 * @param resource
 * @param string
 * @param int
 * @param mixed
 * @return resource
 **/
function stream_filter_prepend($stream, $filtername, $read_write, $params) {}

/**
 * stream_filter_register allows you to implement your own filter on any
 * registered stream used with all the other filesystem functions (such
 * as fopen, fread etc.).
 *
 * @param string
 * @param string
 * @return bool
 **/
function stream_filter_register($filtername, $classname) {}

/**
 * Removes a stream filter previously added to a stream with
 * stream_filter_prepend or stream_filter_append. Any data remaining in
 * the filter's internal buffer will be flushed through to the next
 * filter before removing it.
 *
 * @param resource
 * @return bool
 **/
function stream_filter_remove($stream_filter) {}

/**
 * Identical to file_get_contents, except that stream_get_contents
 * operates on an already open stream resource and returns the remaining
 * contents in a string, up to maxlength bytes and starting at the
 * specified offset.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function stream_get_contents($handle, $maxlength, $offset) {}

/**
 * @return array
 **/
function stream_get_filters() {}

/**
 * Gets a line from the given handle.
 * 
 * Reading ends when length bytes have been read, when the string
 * specified by ending is found (which is not included in the return
 * value), or on EOF (whichever comes first).
 * 
 * This function is nearly identical to fgets except in that it allows
 * end of line delimiters other than the standard \n, \r, and \r\n, and
 * does not return the delimiter itself.
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function stream_get_line($handle, $length, $ending) {}

/**
 * Returns information about an existing stream.
 *
 * @param resource
 * @return array
 **/
function stream_get_meta_data($stream) {}

/**
 * @return array
 **/
function stream_get_transports() {}

/**
 * Retrieve list of registered streams available on the running system.
 *
 * @return array
 **/
function stream_get_wrappers() {}

/**
 * Checks if a stream, or a URL, is a local one or not.
 *
 * @param mixed
 * @return bool
 **/
function stream_is_local($stream_or_url) {}

/**
 * A callback function, used by the notification context parameter,
 * called during an event.
 *
 * @param int
 * @param int
 * @param string
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max) {}

/**
 * Allows you to implement your own protocol handlers and streams for use
 * with all the other filesystem functions (such as fopen, fread etc.).
 *
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function stream_register_wrapper($protocol, $classname, $flags) {}

/**
 * @param string
 * @param resource
 * @return string
 **/
function stream_resolve_include_path($filename, $context) {}

/**
 * The stream_select function accepts arrays of streams and waits for
 * them to change status. Its operation is equivalent to that of the
 * socket_select function except in that it acts on streams.
 *
 * @param array
 * @param array
 * @param array
 * @param int
 * @param int
 * @return int
 **/
function stream_select(&$read, &$write, &$except, $tv_sec, $tv_usec) {}

/**
 * Sets blocking or non-blocking mode on a stream.
 * 
 * This function works for any stream that supports non-blocking mode
 * (currently, regular files and socket streams).
 *
 * @param resource
 * @param int
 * @return bool
 **/
function stream_set_blocking($stream, $mode) {}

/**
 * Sets the timeout value on stream, expressed in the sum of seconds and
 * microseconds.
 * 
 * When the stream times out, the 'timed_out' key of the array returned
 * by stream_get_meta_data is set to , although no error/warning is
 * generated.
 *
 * @param resource
 * @param int
 * @param int
 * @return bool
 **/
function stream_set_timeout($stream, $seconds, $microseconds) {}

/**
 * Sets the buffering for write operations on the given stream to buffer
 * bytes.
 *
 * @param resource
 * @param int
 * @return int
 **/
function stream_set_write_buffer($stream, $buffer) {}

/**
 * Accept a connection on a socket previously created by
 * stream_socket_server.
 *
 * @param resource
 * @param float
 * @param string
 * @return resource
 **/
function stream_socket_accept($server_socket, $timeout, &$peername) {}

/**
 * Initiates a stream or datagram connection to the destination specified
 * by remote_socket. The type of socket created is determined by the
 * transport specified using standard URL formatting: transport://target.
 * For Internet Domain sockets (AF_INET) such as TCP and UDP, the target
 * portion of the remote_socket parameter should consist of a hostname or
 * IP address followed by a colon and a port number. For Unix domain
 * sockets, the target portion should point to the socket file on the
 * filesystem.
 *
 * @param string
 * @param int
 * @param string
 * @param float
 * @param int
 * @param resource
 * @return resource
 **/
function stream_socket_client($remote_socket, &$errno, &$errstr, $timeout, $flags, $context) {}

/**
 * @param resource
 * @param bool
 * @param int
 * @param resource
 * @return mixed
 **/
function stream_socket_enable_crypto($stream, $enable, $crypto_type, $session_stream) {}

/**
 * Returns the local or remote name of a given socket connection.
 *
 * @param resource
 * @param bool
 * @return string
 **/
function stream_socket_get_name($handle, $want_peer) {}

/**
 * stream_socket_pair creates a pair of connected, indistinguishable
 * socket streams. This function is commonly used in IPC (Inter-Process
 * Communication).
 *
 * @param int
 * @param int
 * @param int
 * @return array
 **/
function stream_socket_pair($domain, $type, $protocol) {}

/**
 * stream_socket_recvfrom accepts data from a remote socket up to length
 * bytes.
 *
 * @param resource
 * @param int
 * @param int
 * @param string
 * @return string
 **/
function stream_socket_recvfrom($socket, $length, $flags, &$address) {}

/**
 * Sends the specified data through the socket.
 *
 * @param resource
 * @param string
 * @param int
 * @param string
 * @return int
 **/
function stream_socket_sendto($socket, $data, $flags, $address) {}

/**
 * Creates a stream or datagram socket on the specified local_socket.
 * 
 * This function only creates a socket, to begin accepting connections
 * use stream_socket_accept.
 *
 * @param string
 * @param int
 * @param string
 * @param int
 * @param resource
 * @return resource
 **/
function stream_socket_server($local_socket, &$errno, &$errstr, $flags, $context) {}

/**
 * Shutdowns (partially or not) a full-duplex connection.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function stream_socket_shutdown($stream, $how) {}

/**
 * Tells whether the stream supports locking through flock.
 *
 * @param resource
 * @return bool
 **/
function stream_supports_lock($stream) {}

/**
 * Allows you to implement your own protocol handlers and streams for use
 * with all the other filesystem functions (such as fopen, fread etc.).
 *
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function stream_wrapper_register($protocol, $classname, $flags) {}

/**
 * Restores a built-in wrapper previously unregistered with
 * stream_wrapper_unregister.
 *
 * @param string
 * @return bool
 **/
function stream_wrapper_restore($protocol) {}

/**
 * Allows you to disable an already defined stream wrapper. Once the
 * wrapper has been disabled you may override it with a user-defined
 * wrapper using stream_wrapper_register or reenable it later on with
 * stream_wrapper_restore.
 *
 * @param string
 * @return bool
 **/
function stream_wrapper_unregister($protocol) {}

/**
 * Format the time and/or date according to locale settings. Month and
 * weekday names and other language-dependent strings respect the current
 * locale set with setlocale.
 * 
 * Not all conversion specifiers may be supported by your C library, in
 * which case they will not be supported by PHP's strftime. Additionally,
 * not all platforms support negative timestamps, so your date range may
 * be limited to no earlier than the Unix epoch. This means that %e, %T,
 * %R and, %D (and possibly others) - as well as dates prior to Jan 1,
 * 1970 - will not work on Windows, some Linux distributions, and a few
 * other operating systems. For Windows systems, a complete overview of
 * supported conversion specifiers can be found at MSDN.
 *
 * @param string
 * @param int
 * @return string
 **/
function strftime($format, $timestamp) {}

/**
 * Returns a string with backslashes stripped off. Recognizes C-like \n,
 * \r ..., octal and hexadecimal representation.
 *
 * @param string
 * @return string
 **/
function stripcslashes($str) {}

/**
 * Returns the numeric position of the first occurrence of needle in the
 * haystack string.
 * 
 * Unlike strpos, stripos is case-insensitive.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function stripos($haystack, $needle, $offset) {}

/**
 * Un-quotes a quoted string.
 * 
 * An example use of stripslashes is when the PHP directive
 * magic_quotes_gpc is on (it's on by default), and you aren't inserting
 * this data into a place (such as a database) that requires escaping.
 * For example, if you're simply outputting data straight from an HTML
 * form.
 *
 * @param string
 * @return string
 **/
function stripslashes($str) {}

/**
 * This function tries to return a string with all HTML and PHP tags
 * stripped from a given str. It uses the same tag stripping state
 * machine as the fgetss function.
 *
 * @param string
 * @param string
 * @return string
 **/
function strip_tags($str, $allowable_tags) {}

/**
 * Returns all of haystack from the first occurrence of needle to the
 * end.
 *
 * @param string
 * @param mixed
 * @param bool
 * @return string
 **/
function stristr($haystack, $needle, $before_needle) {}

/**
 * Returns the length of the given string.
 *
 * @param string
 * @return int
 **/
function strlen($string) {}

/**
 * This function implements a comparison algorithm that orders
 * alphanumeric strings in the way a human being would. The behaviour of
 * this function is similar to strnatcmp, except that the comparison is
 * not case sensitive. For more information see: Martin Pool's Natural
 * Order String Comparison page.
 *
 * @param string
 * @param string
 * @return int
 **/
function strnatcasecmp($str1, $str2) {}

/**
 * This function implements a comparison algorithm that orders
 * alphanumeric strings in the way a human being would, this is described
 * as a "natural ordering". Note that this comparison is case sensitive.
 *
 * @param string
 * @param string
 * @return int
 **/
function strnatcmp($str1, $str2) {}

/**
 * This function is similar to strcasecmp, with the difference that you
 * can specify the (upper limit of the) number of characters from each
 * string to be used in the comparison.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function strncasecmp($str1, $str2, $len) {}

/**
 * This function is similar to strcmp, with the difference that you can
 * specify the (upper limit of the) number of characters from each string
 * to be used in the comparison.
 * 
 * Note that this comparison is case sensitive.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function strncmp($str1, $str2, $len) {}

/**
 * strpbrk searches the haystack string for a char_list.
 *
 * @param string
 * @param string
 * @return string
 **/
function strpbrk($haystack, $char_list) {}

/**
 * Returns the numeric position of the first occurrence of needle in the
 * haystack string. Unlike the strrpos before PHP 5, this function can
 * take a full string as the needle parameter and the entire string will
 * be used.
 *
 * @param string
 * @param mixed
 * @param int
 * @return int
 **/
function strpos($haystack, $needle, $offset) {}

/**
 * strptime returns an array with the date parsed, or on error.
 * 
 * Month and weekday names and other language dependent strings respect
 * the current locale set with setlocale (LC_TIME).
 *
 * @param string
 * @param string
 * @return array
 **/
function strptime($date, $format) {}

/**
 * This function returns the portion of haystack which starts at the last
 * occurrence of needle and goes until the end of haystack.
 *
 * @param string
 * @param mixed
 * @return string
 **/
function strrchr($haystack, $needle) {}

/**
 * Returns string, reversed.
 *
 * @param string
 * @return string
 **/
function strrev($string) {}

/**
 * Find position of last occurrence of a case-insensitive string in a
 * string. Unlike strrpos, strripos is case-insensitive.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function strripos($haystack, $needle, $offset) {}

/**
 * Returns the numeric position of the last occurrence of needle in the
 * haystack string. Note that the needle in this case can only be a
 * single character in PHP 4. If a string is passed as the needle, then
 * only the first character of that string will be used.
 * 
 * If needle is not found, returns .
 * 
 * It is easy to mistake the return values for "character found at
 * position 0" and "character not found". Here's how to detect the
 * difference:
 * 
 * If needle is not a string, it is converted to an integer and applied
 * as the ordinal value of a character.
 *
 * @param string
 * @param string
 * @param int
 * @return int
 **/
function strrpos($haystack, $needle, $offset) {}

/**
 * Returns the length of the first group of consecutive characters from
 * mask found in subject.
 * 
 * If start and length are omitted, then all of subject will be examined.
 * If they are included, then the effect will be the same as calling
 * strspn(substr($subject, $start, $length), $mask) (see for more
 * information).
 * 
 * The line of code:
 * 
 * will assign 2 to $var, because the string "42" is the first segment
 * from subject to consist only of characters contained within
 * "1234567890".
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function strspn($subject, $mask, $start, $length) {}

/**
 * Returns part of haystack string from the first occurrence of needle to
 * the end of haystack.
 *
 * @param string
 * @param mixed
 * @param bool
 * @return string
 **/
function strstr($haystack, $needle, $before_needle) {}

/**
 * strtok splits a string (str) into smaller strings (tokens), with each
 * token being delimited by any character from token. That is, if you
 * have a string like "This is an example string" you could tokenize this
 * string into its individual words by using the space character as the
 * token.
 * 
 * Note that only the first call to strtok uses the string argument.
 * Every subsequent call to strtok only needs the token to use, as it
 * keeps track of where it is in the current string. To start over, or to
 * tokenize a new string you simply call strtok with the string argument
 * again to initialize it. Note that you may put multiple tokens in the
 * token parameter. The string will be tokenized when any one of the
 * characters in the argument are found.
 *
 * @param string
 * @param string
 * @return string
 **/
function strtok($str, $token) {}

/**
 * Returns string with all alphabetic characters converted to lowercase.
 * 
 * Note that 'alphabetic' is determined by the current locale. This means
 * that in i.e. the default "C" locale, characters such as umlaut-A ()
 * will not be converted.
 *
 * @param string
 * @return string
 **/
function strtolower($str) {}

/**
 * This function will use the TZ environment variable (if available) to
 * calculate the timestamp. Since PHP 5.1.0 there are easier ways to
 * define the timezone that is used across all date/time functions. That
 * process is explained in the date_default_timezone_get function page.
 *
 * @param string
 * @param int
 * @return int
 **/
function strtotime($time, $now) {}

/**
 * Returns string with all alphabetic characters converted to uppercase.
 * 
 * Note that 'alphabetic' is determined by the current locale. For
 * instance, in the default "C" locale characters such as umlaut-a (ä)
 * will not be converted.
 *
 * @param string
 * @return string
 **/
function strtoupper($string) {}

/**
 * This function returns a copy of str, translating all occurrences of
 * each character in from to the corresponding character in to.
 * 
 * If from and to are different lengths, the extra characters in the
 * longer of the two are ignored.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function strtr($str, $from, $to) {}

/**
 * @param mixed
 * @return string
 **/
function strval($var) {}

/**
 * Similar to fgetcsv this functions parses a string as its input unlike
 * fgetcsv which takes a file as its input.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function str_getcsv($input, $delimiter, $enclosure, $escape) {}

/**
 * This function returns a string or an array with all occurrences of
 * search in subject (ignoring case) replaced with the given replace
 * value. If you don't need fancy replacing rules, you should generally
 * use this function instead of preg_replace with the i modifier.
 *
 * @param mixed
 * @param mixed
 * @param mixed
 * @param int
 * @return mixed
 **/
function str_ireplace($search, $replace, $subject, &$count) {}

/**
 * This functions returns the input string padded on the left, the right,
 * or both sides to the specified padding length. If the optional
 * argument pad_string is not supplied, the input is padded with spaces,
 * otherwise it is padded with characters from pad_string up to the
 * limit.
 *
 * @param string
 * @param int
 * @param string
 * @param int
 * @return string
 **/
function str_pad($input, $pad_length, $pad_string, $pad_type) {}

/**
 * Returns input repeated multiplier times.
 *
 * @param string
 * @param int
 * @return string
 **/
function str_repeat($input, $multiplier) {}

/**
 * This function returns a string or an array with all occurrences of
 * search in subject replaced with the given replace value.
 * 
 * If you don't need fancy replacing rules (like regular expressions),
 * you should always use this function instead of ereg_replace or
 * preg_replace.
 *
 * @param mixed
 * @param mixed
 * @param mixed
 * @param int
 * @return mixed
 **/
function str_replace($search, $replace, $subject, &$count) {}

/**
 * Performs the ROT13 encoding on the str argument and returns the
 * resulting string.
 * 
 * The ROT13 encoding simply shifts every letter by 13 places in the
 * alphabet while leaving non-alpha characters untouched. Encoding and
 * decoding are done by the same function, passing an encoded string as
 * argument will return the original version.
 *
 * @param string
 * @return string
 **/
function str_rot13($str) {}

/**
 * @param string
 * @return string
 **/
function str_shuffle($str) {}

/**
 * Converts a string to an array.
 *
 * @param string
 * @param int
 * @return array
 **/
function str_split($string, $split_length) {}

/**
 * Counts the number of words inside string. If the optional format is
 * not specified, then the return value will be an integer representing
 * the number of words found. In the event the format is specified, the
 * return value will be an array, content of which is dependent on the
 * format. The possible value for the format and the resultant outputs
 * are listed below.
 * 
 * For the purpose of this function, 'word' is defined as a locale
 * dependent string containing alphabetic characters, which also may
 * contain, but not start with ' and - characters.
 *
 * @param string
 * @param int
 * @param string
 * @return mixed
 **/
function str_word_count($string, $format, $charlist) {}

/**
 * Returns the portion of string specified by the start and length
 * parameters.
 *
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function substr($string, $start, $length) {}

/**
 * substr_compare compares main_str from position offset with str up to
 * length characters.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @param bool
 * @return int
 **/
function substr_compare($main_str, $str, $offset, $length, $case_insensitivity) {}

/**
 * substr_count returns the number of times the needle substring occurs
 * in the haystack string. Please note that needle is case sensitive.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @return int
 **/
function substr_count($haystack, $needle, $offset, $length) {}

/**
 * substr_replace replaces a copy of string delimited by the start and
 * (optionally) length parameters with the string given in replacement.
 *
 * @param mixed
 * @param string
 * @param int
 * @param int
 * @return mixed
 **/
function substr_replace($string, $replacement, $start, $length) {}

/**
 * Adds the file, directory or symbolic link at path to the working
 * directory. The item will be added to the repository the next time you
 * call svn_commit on the working copy.
 *
 * @param string
 * @param bool
 * @param bool
 * @return bool
 **/
function svn_add($path, $recursive, $force) {}

/**
 * Retrieves authentication parameter at key. For a list of valid keys
 * and their meanings, consult the authentication constants list.
 *
 * @param string
 * @return string
 **/
function svn_auth_get_parameter($key) {}

/**
 * Sets authentication parameter at key to value. For a list of valid
 * keys and their meanings, consult the authentication constants list.
 *
 * @param string
 * @param string
 * @return void
 **/
function svn_auth_set_parameter($key, $value) {}

/**
 * Get the SVN blame of a file from a repository URL.
 *
 * @param string
 * @param int
 * @return array
 **/
function svn_blame($repository_url, $revision_no) {}

/**
 * Returns the contents of the URL repos_url to a file in the repository,
 * optionally at revision number revision_no.
 *
 * @param string
 * @param int
 * @return string
 **/
function svn_cat($repos_url, $revision_no) {}

/**
 * Checks out a working copy from the repository at repos to targetpath
 * at revision revision.
 *
 * @param string
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function svn_checkout($repos, $targetpath, $revision, $flags) {}

/**
 * Recursively cleanup working copy directory workingdir, finishing any
 * incomplete operations and removing working copy locks. Use when a
 * working copy is in limbo and needs to be usable again.
 *
 * @param string
 * @return bool
 **/
function svn_cleanup($workingdir) {}

/**
 * Returns the version of the SVN client libraries
 *
 * @return string
 **/
function svn_client_version() {}

/**
 * Commits changes made in the local working copy files enumerated in the
 * targets array to the repository, with the log message log. Directories
 * in the targets array will be recursively committed unless dontrecurse
 * is set to true.
 *
 * @param string
 * @param array
 * @param bool
 * @return array
 **/
function svn_commit($log, $targets, $dontrecurse) {}

/**
 * Recursively diffs two paths, path1 and path2.
 *
 * @param string
 * @param int
 * @param string
 * @param int
 * @return array
 **/
function svn_diff($path1, $rev1, $path2, $rev2) {}

/**
 * Export the contents of either a working copy or repository into a
 * 'clean' directory.
 *
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function svn_export($frompath, $topath, $working_copy) {}

/**
 * Abort a transaction, returns true if everything is okay, false
 * otherwise
 *
 * @param resource
 * @return bool
 **/
function svn_fs_abort_txn($txn) {}

/**
 * Creates and returns a stream that will be used to replace
 *
 * @param resource
 * @param string
 * @return resource
 **/
function svn_fs_apply_text($root, $path) {}

/**
 * Create a new transaction
 *
 * @param resource
 * @param int
 * @return resource
 **/
function svn_fs_begin_txn2($repos, $rev) {}

/**
 * Return true if everything is ok, false otherwise
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function svn_fs_change_node_prop($root, $path, $name, $value) {}

/**
 * Determines what kind of item lives at path in a given repository
 * fsroot
 *
 * @param resource
 * @param string
 * @return int
 **/
function svn_fs_check_path($fsroot, $path) {}

/**
 * Return true if content is different, false otherwise
 *
 * @param resource
 * @param string
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_contents_changed($root1, $path1, $root2, $path2) {}

/**
 * Copies a file or a directory, returns true if all is ok, false
 * otherwise
 *
 * @param resource
 * @param string
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_copy($from_root, $from_path, $to_root, $to_path) {}

/**
 * Deletes a file or a directory, return true if all is ok, false
 * otherwise
 *
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_delete($root, $path) {}

/**
 * Enumerates the directory entries under path; returns a hash of dir
 * names to file type
 *
 * @param resource
 * @param string
 * @return array
 **/
function svn_fs_dir_entries($fsroot, $path) {}

/**
 * Returns a stream to access the contents of a file from a given version
 * of the fs
 *
 * @param resource
 * @param string
 * @return resource
 **/
function svn_fs_file_contents($fsroot, $path) {}

/**
 * Returns the length of a file from a given version of the fs
 *
 * @param resource
 * @param string
 * @return int
 **/
function svn_fs_file_length($fsroot, $path) {}

/**
 * Return true if the path points to a directory, false otherwise
 *
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_is_dir($root, $path) {}

/**
 * Return true if the path points to a file, false otherwise
 *
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_is_file($root, $path) {}

/**
 * Creates a new empty directory, returns true if all is ok, false
 * otherwise
 *
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_make_dir($root, $path) {}

/**
 * Creates a new empty file, returns true if all is ok, false otherwise
 *
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_make_file($root, $path) {}

/**
 * Returns the revision in which path under fsroot was created
 *
 * @param resource
 * @param string
 * @return int
 **/
function svn_fs_node_created_rev($fsroot, $path) {}

/**
 * Returns the value of a property for a node
 *
 * @param resource
 * @param string
 * @param string
 * @return string
 **/
function svn_fs_node_prop($fsroot, $path, $propname) {}

/**
 * Return true if props are different, false otherwise
 *
 * @param resource
 * @param string
 * @param resource
 * @param string
 * @return bool
 **/
function svn_fs_props_changed($root1, $path1, $root2, $path2) {}

/**
 * Fetches the value of a named property
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function svn_fs_revision_prop($fs, $revnum, $propname) {}

/**
 * Get a handle on a specific version of the repository root
 *
 * @param resource
 * @param int
 * @return resource
 **/
function svn_fs_revision_root($fs, $revnum) {}

/**
 * Creates and returns a transaction root
 *
 * @param resource
 * @return resource
 **/
function svn_fs_txn_root($txn) {}

/**
 * Returns the number of the youngest revision in the filesystem
 *
 * @param resource
 * @return int
 **/
function svn_fs_youngest_rev($fs) {}

/**
 * Commits unversioned path into repository at url. If path is a
 * directory and nonrecursive is , the directory will be imported
 * recursively.
 *
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function svn_import($path, $url, $nonrecursive) {}

/**
 * svn_log returns the complete history of the item at the repository URL
 * repos_url, or the history of a specific revision if start_revision is
 * set. This function is equivalent to svn log --verbose -r
 * $start_revision $repos_url.
 *
 * @param string
 * @param int
 * @param int
 * @param int
 * @param int
 * @return array
 **/
function svn_log($repos_url, $start_revision, $end_revision, $limit, $flags) {}

/**
 * This function queries the repository URL and returns a list of files
 * and directories, optionally from a specific revision. This is
 * equivalent to svn list $repos_url[@$revision_no]
 *
 * @param string
 * @param int
 * @param bool
 * @return array
 **/
function svn_ls($repos_url, $revision_no, $recurse) {}

/**
 * Creates a directory in a working copy or repository.
 *
 * @param string
 * @return bool
 **/
function svn_mkdir($path) {}

/**
 * Create a new subversion repository at path
 *
 * @param string
 * @param array
 * @param array
 * @return resource
 **/
function svn_repos_create($path, $config, $fsconfig) {}

/**
 * Gets a handle on the filesystem for a repository
 *
 * @param resource
 * @return resource
 **/
function svn_repos_fs($repos) {}

/**
 * Create a new transaction
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @return resource
 **/
function svn_repos_fs_begin_txn_for_commit($repos, $rev, $author, $log_msg) {}

/**
 * Commits a transaction and returns the new revision
 *
 * @param resource
 * @return int
 **/
function svn_repos_fs_commit_txn($txn) {}

/**
 * Make a hot-copy of the repos at repospath; copy it to destpath
 *
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function svn_repos_hotcopy($repospath, $destpath, $cleanlogs) {}

/**
 * Open a shared lock on a repository.
 *
 * @param string
 * @return resource
 **/
function svn_repos_open($path) {}

/**
 * Run recovery procedures on the repository located at path.
 *
 * @param string
 * @return bool
 **/
function svn_repos_recover($path) {}

/**
 * Revert any local changes to the path in a working copy.
 *
 * @param string
 * @param bool
 * @return bool
 **/
function svn_revert($path, $recursive) {}

/**
 * Returns the status of working copy files and directories, giving
 * modifications, additions, deletions and other changes to items in the
 * working copy.
 *
 * @param string
 * @param int
 * @return array
 **/
function svn_status($path, $flags) {}

/**
 * Update working copy at path to revision revno. If recurse is true,
 * directories will be recursively updated.
 *
 * @param string
 * @param int
 * @param bool
 * @return int
 **/
function svn_update($path, $revno, $recurse) {}

/**
 * Gets the URL specified by the parameter url with the given target.
 *
 * @param string
 * @param string
 * @return void
 **/
function swf_actiongeturl($url, $target) {}

/**
 * The swf_actiongotoframe function will go to the frame specified by
 * framenumber, play it, and then stop.
 *
 * @param int
 * @return void
 **/
function swf_actiongotoframe($framenumber) {}

/**
 * The swf_actiongotolabel function displays the frame with the label
 * given by the label parameter and then stops.
 *
 * @param string
 * @return void
 **/
function swf_actiongotolabel($label) {}

/**
 * Go forward one frame.
 *
 * @return void
 **/
function swf_actionnextframe() {}

/**
 * Start playing the flash movie from the current frame.
 *
 * @return void
 **/
function swf_actionplay() {}

/**
 * Go backwards one frame.
 *
 * @return void
 **/
function swf_actionprevframe() {}

/**
 * Sets the context for all actions. You can use this to control other
 * flash movies that are currently playing.
 *
 * @param string
 * @return void
 **/
function swf_actionsettarget($target) {}

/**
 * Stop playing the flash movie at the current frame.
 *
 * @return void
 **/
function swf_actionstop() {}

/**
 * Toggle the flash movie between high and low quality.
 *
 * @return void
 **/
function swf_actiontogglequality() {}

/**
 * The swf_actionwaitforframe function will check to see if the frame,
 * specified by the framenumber parameter has been loaded, if not it will
 * skip the number of actions specified by the skipcount parameter. This
 * can be useful for "Loading..." type animations.
 *
 * @param int
 * @param int
 * @return void
 **/
function swf_actionwaitforframe($framenumber, $skipcount) {}

/**
 * Allow you to define the specifics of using a button.
 *
 * @param int
 * @param int
 * @param int
 * @return void
 **/
function swf_addbuttonrecord($states, $shapeid, $depth) {}

/**
 * Sets the global add color to the specified color. This color is then
 * implicitly used by the swf_placeobject, swf_modifyobject and
 * swf_addbuttonrecord functions.
 * 
 * The color of the object will be add by the given values when the
 * object is written to the screen.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_addcolor($r, $g, $b, $a) {}

/**
 * Close a file that was opened by the swf_openfile function.
 *
 * @param int
 * @return void
 **/
function swf_closefile($return_file) {}

/**
 * The swf_definebitmap function defines a bitmap given an image.
 *
 * @param int
 * @param string
 * @return void
 **/
function swf_definebitmap($objid, $image_name) {}

/**
 * The swf_definefont function defines a font parameter and gives it the
 * specified id. It then sets the font given by fontname to the current
 * font.
 *
 * @param int
 * @param string
 * @return void
 **/
function swf_definefont($fontid, $fontname) {}

/**
 * Defines a line.
 *
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_defineline($objid, $x1, $y1, $x2, $y2, $width) {}

/**
 * Defines a polygon given an array of x, y coordinates.
 *
 * @param int
 * @param array
 * @param int
 * @param float
 * @return void
 **/
function swf_definepoly($objid, $coords, $npoints, $width) {}

/**
 * Defines a rectangle with an upper left hand coordinate and a lower
 * right hand coordinate.
 *
 * @param int
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_definerect($objid, $x1, $y1, $x2, $y2, $width) {}

/**
 * Defines a text string using the current font and font size.
 *
 * @param int
 * @param string
 * @param int
 * @return void
 **/
function swf_definetext($objid, $str, $docenter) {}

/**
 * The swf_endbutton function ends the definition of the current button.
 *
 * @return void
 **/
function swf_endbutton() {}

/**
 * Ends the current action started by the swf_startdoaction function.
 *
 * @return void
 **/
function swf_enddoaction() {}

/**
 * The swf_endshape completes the definition of the current shape.
 *
 * @return void
 **/
function swf_endshape() {}

/**
 * Ends the definition of a symbol that was started by the
 * swf_startsymbol function.
 *
 * @return void
 **/
function swf_endsymbol() {}

/**
 * Changes the font size to the value given by the size parameter.
 *
 * @param float
 * @return void
 **/
function swf_fontsize($size) {}

/**
 * Set the current font slant to the angle indicated by the slant
 * parameter.
 *
 * @param float
 * @return void
 **/
function swf_fontslant($slant) {}

/**
 * Set the font tracking to the value specified by the tracking
 * parameter. This function is used to increase the spacing between
 * letters and text, positive values increase the space and negative
 * values decrease the space between letters.
 *
 * @param float
 * @return void
 **/
function swf_fonttracking($tracking) {}

/**
 * Returns information about a bitmap.
 *
 * @param int
 * @return array
 **/
function swf_getbitmapinfo($bitmapid) {}

/**
 * Gets information about the font by giving the height in pixels of a
 * capital A and a lowercase x.
 *
 * @return array
 **/
function swf_getfontinfo() {}

/**
 * The swf_getframe function gets the number of the current frame.
 *
 * @return int
 **/
function swf_getframe() {}

/**
 * Labels the current frame with the given name.
 *
 * @param string
 * @return void
 **/
function swf_labelframe($name) {}

/**
 * Defines a viewing transformation by giving the viewing position and
 * the coordinates of a reference point in the scene.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_lookat($view_x, $view_y, $view_z, $reference_x, $reference_y, $reference_z, $twist) {}

/**
 * Updates the position and/or color of the object at the specified
 * depth.
 *
 * @param int
 * @param int
 * @return void
 **/
function swf_modifyobject($depth, $how) {}

/**
 * Sets the global multiply color to the given one. This color is then
 * implicitly used by the swf_placeobject, swf_modifyobject and
 * swf_addbuttonrecord functions.
 * 
 * The color of the object will be multiplied by the given color values
 * when the object is written to the screen.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_mulcolor($r, $g, $b, $a) {}

/**
 * The swf_nextid function returns the next available object id.
 *
 * @return int
 **/
function swf_nextid() {}

/**
 * The swf_oncondition function describes a transition that will trigger
 * an action list.
 *
 * @param int
 * @return void
 **/
function swf_oncondition($transition) {}

/**
 * Opens a new file. This must be the first function you call, otherwise
 * your script will not work.
 *
 * @param string
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_openfile($filename, $width, $height, $framerate, $r, $g, $b) {}

/**
 * Defines an 3D orthographic mapping of user coordinates onto the
 * current viewport.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_ortho($xmin, $xmax, $ymin, $ymax, $zmin, $zmax) {}

/**
 * Defines a two dimensional orthographic mapping of user coordinates
 * onto the current viewport, this defaults to one to one mapping of the
 * area of the Flash movie.
 * 
 * If a perspective transformation is desired, swf_perspective can be
 * used.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_ortho2($xmin, $xmax, $ymin, $ymax) {}

/**
 * Defines a perspective projection transformation.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_perspective($fovy, $aspect, $near, $far) {}

/**
 * Places the object in the current frame at a specified depth.
 * 
 * This uses the current mulcolor (specified by swf_mulcolor) and the
 * current addcolor (specified by swf_addcolor) to color the object and
 * it uses the current matrix to position the object.
 *
 * @param int
 * @param int
 * @return void
 **/
function swf_placeobject($objid, $depth) {}

/**
 * The swf_polarview function defines the viewer's position in polar
 * coordinates.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_polarview($dist, $azimuth, $incidence, $twist) {}

/**
 * Pushes the current transformation matrix back onto the stack.
 *
 * @return void
 **/
function swf_popmatrix() {}

/**
 * Enables or disables the rounding of the translation when objects are
 * placed or moved, there are times when text becomes more readable
 * because rounding has been enabled.
 *
 * @param int
 * @return void
 **/
function swf_posround($round) {}

/**
 * Pushes the current transformation matrix back onto the stack.
 *
 * @return void
 **/
function swf_pushmatrix() {}

/**
 * Removes the last object drawn at the depth specified by depth.
 *
 * @param int
 * @return void
 **/
function swf_removeobject($depth) {}

/**
 * Rotates the current transformation by a given angle around the given
 * axis.
 *
 * @param float
 * @param string
 * @return void
 **/
function swf_rotate($angle, $axis) {}

/**
 * The swf_scale scales curve coordinates by the given value.
 *
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_scale($x, $y, $z) {}

/**
 * The swf_setfont sets the current font to the value given by the fontid
 * parameter.
 *
 * @param int
 * @return void
 **/
function swf_setfont($fontid) {}

/**
 * Changes the active frame to the specified on.
 *
 * @param int
 * @return void
 **/
function swf_setframe($framenumber) {}

/**
 * Draws a circular arc.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_shapearc($x, $y, $r, $ang1, $ang2) {}

/**
 * Draws a quadratic bezier curve from the current location, though the
 * two given points.
 * 
 * The current position is then set to the point defined by the x2 and y2
 * parameters.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_shapecurveto($x1, $y1, $x2, $y2) {}

/**
 * Draw a cubic bezier curve using the given coordinates.
 * 
 * The current position is then set to the x3,y3 coordinate.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_shapecurveto3($x1, $y1, $x2, $y2, $x3, $y3) {}

/**
 * Sets the fill to bitmap clipped, empty spaces will be filled by the
 * bitmap.
 *
 * @param int
 * @return void
 **/
function swf_shapefillbitmapclip($bitmapid) {}

/**
 * Sets the fill to bitmap tile, empty spaces will be filled by the
 * bitmap.
 *
 * @param int
 * @return void
 **/
function swf_shapefillbitmaptile($bitmapid) {}

/**
 * Turns off filling for the current shape.
 *
 * @return void
 **/
function swf_shapefilloff() {}

/**
 * Sets the current fill style to solid, and then sets the fill color to
 * the given color.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_shapefillsolid($r, $g, $b, $a) {}

/**
 * Sets the current line style to the given color and width.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_shapelinesolid($r, $g, $b, $a, $width) {}

/**
 * Draws a line to the x and y coordinates. The current position is then
 * set to that point.
 *
 * @param float
 * @param float
 * @return void
 **/
function swf_shapelineto($x, $y) {}

/**
 * Moves the current position to the given point.
 *
 * @param float
 * @param float
 * @return void
 **/
function swf_shapemoveto($x, $y) {}

/**
 * Outputs the current frame.
 *
 * @return void
 **/
function swf_showframe() {}

/**
 * Starts the definition of a button.
 *
 * @param int
 * @param int
 * @return void
 **/
function swf_startbutton($objid, $type) {}

/**
 * Starts the description of an action list for the current frame. This
 * must be called before actions are defined for the current frame.
 *
 * @return void
 **/
function swf_startdoaction() {}

/**
 * Starts a complex shape.
 *
 * @param int
 * @return void
 **/
function swf_startshape($objid) {}

/**
 * Defines an object id as a symbol. Symbols are tiny flash movies that
 * can be played simultaneously.
 *
 * @param int
 * @return void
 **/
function swf_startsymbol($objid) {}

/**
 * Gives the width of the string in pixels, using the current font and
 * font size.
 *
 * @param string
 * @return float
 **/
function swf_textwidth($str) {}

/**
 * Translates the current transformation by the given values.
 *
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_translate($x, $y, $z) {}

/**
 * Selects an area for future drawing for xmin to xmax and ymin to ymax,
 * if this function is not called the area defaults to the size of the
 * screen.
 *
 * @param float
 * @param float
 * @param float
 * @param float
 * @return void
 **/
function swf_viewport($xmin, $xmax, $ymin, $ymax) {}

/**
 * sybase_affected_rows returns the number of rows affected by the last
 * INSERT, UPDATE or DELETE query on the server associated with the
 * specified link identifier.
 * 
 * This command is not effective for SELECT statements, only on
 * statements which modify records. To retrieve the number of rows
 * returned from a SELECT, use sybase_num_rows.
 *
 * @param resource
 * @return int
 **/
function sybase_affected_rows($link_identifier) {}

/**
 * sybase_close closes the link to a Sybase database that's associated
 * with the specified link link_identifier.
 * 
 * Note that this isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution.
 * 
 * sybase_close will not close persistent links generated by
 * sybase_pconnect.
 *
 * @param resource
 * @return bool
 **/
function sybase_close($link_identifier) {}

/**
 * sybase_connect establishes a connection to a Sybase server.
 * 
 * In case a second call is made to sybase_connect with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling
 * sybase_close.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return resource
 **/
function sybase_connect($servername, $username, $password, $charset, $appname, $new) {}

/**
 * sybase_data_seek moves the internal row pointer of the Sybase result
 * associated with the specified result identifier to pointer to the
 * specified row number. The next call to sybase_fetch_row would return
 * that row.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function sybase_data_seek($result_identifier, $row_number) {}

/**
 * Using sybase_deadlock_retry_count, the number of retries can be
 * defined in cases of deadlocks. By default, every deadlock is retried
 * an infinite number of times or until the process is killed by Sybase,
 * the executing script is killed (for instance, by set_time_limit) or
 * the query succeeds.
 *
 * @param int
 * @return void
 **/
function sybase_deadlock_retry_count($retry_count) {}

/**
 * sybase_fetch_array is an extended version of sybase_fetch_row. In
 * addition to storing the data in the numeric indices of the result
 * array, it also stores the data in associative indices, using the field
 * names as keys.
 * 
 * An important thing to note is that using sybase_fetch_array is NOT
 * significantly slower than using sybase_fetch_row, while it provides a
 * significant added value.
 *
 * @param resource
 * @return array
 **/
function sybase_fetch_array($result) {}

/**
 * sybase_fetch_assoc is a version of sybase_fetch_row that uses column
 * names instead of integers for indices in the result array. Columns
 * from different tables with the same names are returned as name, name1,
 * name2, ..., nameN.
 * 
 * An important thing to note is that using sybase_fetch_assoc is NOT
 * significantly slower than using sybase_fetch_row, while it provides a
 * significant added value.
 *
 * @param resource
 * @return array
 **/
function sybase_fetch_assoc($result) {}

/**
 * sybase_fetch_field can be used in order to obtain information about
 * fields in a certain query result.
 *
 * @param resource
 * @param int
 * @return object
 **/
function sybase_fetch_field($result, $field_offset) {}

/**
 * sybase_fetch_object is similar to sybase_fetch_assoc, with one
 * difference - an object is returned, instead of an array.
 * 
 * Speed-wise, the function is identical to sybase_fetch_array, and
 * almost as quick as sybase_fetch_row (the difference is insignificant).
 *
 * @param resource
 * @param mixed
 * @return object
 **/
function sybase_fetch_object($result, $object) {}

/**
 * sybase_fetch_row fetches one row of data from the result associated
 * with the specified result identifier.
 * 
 * Subsequent call to sybase_fetch_row would return the next row in the
 * result set, or if there are no more rows.
 *
 * @param resource
 * @return array
 **/
function sybase_fetch_row($result) {}

/**
 * Seeks to the specified field offset. If the next call to
 * sybase_fetch_field won't include a field offset, this field would be
 * returned.
 *
 * @param resource
 * @param int
 * @return bool
 **/
function sybase_field_seek($result, $field_offset) {}

/**
 * sybase_free_result only needs to be called if you are worried about
 * using too much memory while your script is running. All result memory
 * will automatically be freed when the script ends. You may call
 * sybase_free_result with the result identifier as an argument and the
 * associated result memory will be freed.
 *
 * @param resource
 * @return bool
 **/
function sybase_free_result($result) {}

/**
 * sybase_get_last_message returns the last message reported by the
 * server.
 *
 * @return string
 **/
function sybase_get_last_message() {}

/**
 * sybase_min_client_severity sets the minimum client severity level.
 *
 * @param int
 * @return void
 **/
function sybase_min_client_severity($severity) {}

/**
 * sybase_min_error_severity sets the minimum error severity level.
 *
 * @param int
 * @return void
 **/
function sybase_min_error_severity($severity) {}

/**
 * sybase_min_message_severity sets the minimum message severity level.
 *
 * @param int
 * @return void
 **/
function sybase_min_message_severity($severity) {}

/**
 * sybase_min_server_severity sets the minimum server severity level.
 *
 * @param int
 * @return void
 **/
function sybase_min_server_severity($severity) {}

/**
 * sybase_num_fields returns the number of fields in a result set.
 *
 * @param resource
 * @return int
 **/
function sybase_num_fields($result) {}

/**
 * sybase_num_rows returns the number of rows in a result set.
 *
 * @param resource
 * @return int
 **/
function sybase_num_rows($result) {}

/**
 * sybase_pconnect acts very much like sybase_connect with two major
 * differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use (sybase_close will not close links established by
 * sybase_pconnect).
 * 
 * This type of links is therefore called 'persistent'.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @param string
 * @return resource
 **/
function sybase_pconnect($servername, $username, $password, $charset, $appname) {}

/**
 * sybase_query sends a query to the currently active database on the
 * server that's associated with the specified link identifier.
 *
 * @param string
 * @param resource
 * @return mixed
 **/
function sybase_query($query, $link_identifier) {}

/**
 * Returns the contents of the cell at the row and offset in the
 * specified Sybase result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they're MUCH quicker than sybase_result(). Also, note that specifying
 * a numeric offset for the field argument is much quicker than
 * specifying a fieldname or tablename.fieldname argument.
 * 
 * Recommended high-performance alternatives: sybase_fetch_row,
 * sybase_fetch_array and sybase_fetch_object.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return string
 **/
function sybase_result($result, $row, $field) {}

/**
 * sybase_select_db sets the current active database on the server that's
 * associated with the specified link identifier.
 * 
 * Every subsequent call to sybase_query will be made on the active
 * database.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function sybase_select_db($database_name, $link_identifier) {}

/**
 * sybase_set_message_handler sets a user function to handle messages
 * generated by the server. You may specify the name of a global
 * function, or use an array to specify an object reference and a method
 * name.
 *
 * @param callback
 * @param resource
 * @return bool
 **/
function sybase_set_message_handler($handler, $connection) {}

/**
 * sybase_unbuffered_query sends a query to the currently active database
 * on the server that's associated with the specified link identifier. If
 * the link identifier isn't specified, the last opened link is assumed.
 * If no link is open, the function tries to establish a link as if
 * sybase_connect was called, and use it.
 * 
 * Unlike sybase_query, sybase_unbuffered_query reads only the first row
 * of the result set. sybase_fetch_array and similar function read more
 * rows as needed. sybase_data_seek reads up to the target row. The
 * behavior may produce better performance for large result sets.
 * 
 * sybase_num_rows will only return the correct number of rows if all
 * result sets have been read. To Sybase, the number of rows is not known
 * and is therefore computed by the client implementation.
 *
 * @param string
 * @param resource
 * @param bool
 * @return resource
 **/
function sybase_unbuffered_query($query, $link_identifier, $store_result) {}

/**
 * symlink creates a symbolic link to the existing target with the
 * specified name link.
 *
 * @param string
 * @param string
 * @return bool
 **/
function symlink($target, $link) {}

/**
 * syslog generates a log message that will be distributed by the system
 * logger.
 * 
 * For information on setting up a user defined log handler, see the
 * syslog.conf 5 Unix manual page. More information on the syslog
 * facilities and option can be found in the man pages for syslog 3 on
 * Unix machines.
 *
 * @param int
 * @param string
 * @return bool
 **/
function syslog($priority, $message) {}

/**
 * system is just like the C version of the function in that it executes
 * the given command and outputs the result.
 * 
 * The system call also tries to automatically flush the web server's
 * output buffer after each line of output if PHP is running as a server
 * module.
 * 
 * If you need to execute a command and have all the data from the
 * command passed directly back without any interference, use the
 * passthru function.
 *
 * @param string
 * @param int
 * @return string
 **/
function system($command, &$return_var) {}

/**
 * Returns three samples representing the average system load (the number
 * of processes in the system run queue) over the last 1, 5 and 15
 * minutes, respectively.
 *
 * @return array
 **/
function sys_getloadavg() {}

/**
 * Returns the path of the directory PHP stores temporary files in by
 * default.
 *
 * @return string
 **/
function sys_get_temp_dir() {}

/**
 * tan returns the tangent of the arg parameter. The arg parameter is in
 * radians.
 *
 * @param float
 * @return float
 **/
function tan($arg) {}

/**
 * Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).
 *
 * @param float
 * @return float
 **/
function tanh($arg) {}

/**
 * This function consults the /etc/hosts.allow and /etc/hosts.deny files
 * to check if access to service daemon should be granted or denied for a
 * client.
 *
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function tcpwrap_check($daemon, $address, $user, $nodns) {}

/**
 * Creates a file with a unique filename, with access permission set to
 * 0600, in the specified directory. If the directory does not exist,
 * tempnam may generate a file in the system's temporary directory, and
 * return the name of that.
 *
 * @param string
 * @param string
 * @return string
 **/
function tempnam($dir, $prefix) {}

/**
 * This function sets the domain to search within when calls are made to
 * gettext, usually the named after an application.
 *
 * @param string
 * @return string
 **/
function textdomain($text_domain) {}

/**
 * tidy_access_count returns the number of accessibility warnings found
 * for the specified document.
 *
 * @param tidy
 * @return int
 **/
function tidy_access_count($object) {}

/**
 * This function cleans and repairs the given tidy object.
 *
 * @param tidy
 * @return bool
 **/
function tidy_clean_repair($object) {}

/**
 * Returns the number of errors encountered in the configuration of the
 * specified tidy object.
 *
 * @param tidy
 * @return int
 **/
function tidy_config_count($object) {}

/**
 * Runs diagnostic tests on the given tidy object, adding some more
 * information about the document in the error buffer.
 *
 * @param tidy
 * @return bool
 **/
function tidy_diagnose($object) {}

/**
 * Returns the number of Tidy errors encountered for the specified
 * document.
 *
 * @param tidy
 * @return int
 **/
function tidy_error_count($object) {}

/**
 * Returns the value of the specified option for the specified tidy
 * object.
 *
 * @param tidy
 * @param string
 * @return mixed
 **/
function tidy_getopt($object, $option) {}

/**
 * Returns a tidyNode object starting from the body tag of the tidy parse
 * tree.
 *
 * @param tidy
 * @return tidyNode
 **/
function tidy_get_body($object) {}

/**
 * Gets the list of the configuration options in use by the given tidy
 * object.
 *
 * @param tidy
 * @return array
 **/
function tidy_get_config($object) {}

/**
 * Returns warnings and errors which occurred parsing the specified
 * document.
 *
 * @param tidy
 * @return string
 **/
function tidy_get_error_buffer($object) {}

/**
 * Returns a tidyNode object starting from the head tag of the tidy parse
 * tree.
 *
 * @param tidy
 * @return tidyNode
 **/
function tidy_get_head($object) {}

/**
 * Returns a tidyNode object starting from the html tag of the tidy parse
 * tree.
 *
 * @param tidy
 * @return tidyNode
 **/
function tidy_get_html($object) {}

/**
 * Returns the detected HTML version for the specified tidy object.
 *
 * @param tidy
 * @return int
 **/
function tidy_get_html_ver($object) {}

/**
 * tidy_get_opt_doc returns the documentation for the given option name.
 *
 * @param tidy
 * @param string
 * @return string
 **/
function tidy_get_opt_doc($object, $optname) {}

/**
 * Gets a string with the repaired html.
 *
 * @param tidy
 * @return string
 **/
function tidy_get_output($object) {}

/**
 * Gets the release date of the Tidy library.
 *
 * @return string
 **/
function tidy_get_release() {}

/**
 * Returns a tidyNode object representing the root of the tidy parse
 * tree.
 *
 * @param tidy
 * @return tidyNode
 **/
function tidy_get_root($object) {}

/**
 * Returns the status for the specified tidy object.
 *
 * @param tidy
 * @return int
 **/
function tidy_get_status($object) {}

/**
 * Tells if the document is a XHTML document.
 *
 * @param tidy
 * @return bool
 **/
function tidy_is_xhtml($object) {}

/**
 * Tells if the document is a generic (non HTML/XHTML) XML document.
 *
 * @param tidy
 * @return bool
 **/
function tidy_is_xml($object) {}

/**
 * Loads a Tidy configuration file, with the specified encoding.
 *
 * @param string
 * @param string
 * @return void
 **/
function tidy_load_config($filename, $encoding) {}

/**
 * Parses the given file.
 *
 * @param string
 * @param mixed
 * @param string
 * @param bool
 * @return tidy
 **/
function tidy_parse_file($filename, $config, $encoding, $use_include_path) {}

/**
 * Parses a document stored in a string.
 *
 * @param string
 * @param mixed
 * @param string
 * @return tidy
 **/
function tidy_parse_string($input, $config, $encoding) {}

/**
 * Repairs the given file and returns it as a string.
 *
 * @param string
 * @param mixed
 * @param string
 * @param bool
 * @return string
 **/
function tidy_repair_file($filename, $config, $encoding, $use_include_path) {}

/**
 * Repairs the given string.
 *
 * @param string
 * @param mixed
 * @param string
 * @return string
 **/
function tidy_repair_string($data, $config, $encoding) {}

/**
 * This function restores the Tidy configuration to the default values.
 *
 * @return bool
 **/
function tidy_reset_config() {}

/**
 * Saves current settings to the specified file. Only non-default values
 * are written.
 *
 * @param string
 * @return bool
 **/
function tidy_save_config($filename) {}

/**
 * tidy_setopt updates the specified option with a new value.
 *
 * @param string
 * @param mixed
 * @return bool
 **/
function tidy_setopt($option, $value) {}

/**
 * Sets the encoding for input/output documents.
 *
 * @param string
 * @return bool
 **/
function tidy_set_encoding($encoding) {}

/**
 * Returns the number of Tidy warnings encountered for the specified
 * document.
 *
 * @param tidy
 * @return int
 **/
function tidy_warning_count($object) {}

/**
 * Returns the current time measured in the number of seconds since the
 * Unix Epoch (January 1 1970 00:00:00 GMT).
 *
 * @return int
 **/
function time() {}

/**
 * @param string
 * @param int
 * @param int
 * @return string
 **/
function timezone_name_from_abbr($abbr, $gmtOffset, $isdst) {}

/**
 * @param string
 * @return DateTimeZone
 **/
function timezone_open($timezone) {}

/**
 * Returns the current version of the timezonedb.
 *
 * @return string
 **/
function timezone_version_get() {}

/**
 * Delays program execution for the given number of seconds and
 * nanoseconds.
 *
 * @param int
 * @param int
 * @return mixed
 **/
function time_nanosleep($seconds, $nanoseconds) {}

/**
 * Makes the script sleep until the specified timestamp.
 *
 * @param float
 * @return bool
 **/
function time_sleep_until($timestamp) {}

/**
 * Creates a temporary file with a unique name in read-write (w+) mode
 * and returns a file handle .
 * 
 * The file is automatically removed when closed (using fclose), or when
 * the script ends.
 * 
 * For details, consult your system documentation on the tmpfile(3)
 * function, as well as the stdio.h header file.
 *
 * @return resource
 **/
function tmpfile() {}

/**
 * token_get_all parses the given source string into PHP language tokens
 * using the Zend engines lexical scanner.
 * 
 * For a list of parser tokens, see , or use token_name to translate a
 * token value into its string representation.
 *
 * @param string
 * @return array
 **/
function token_get_all($source) {}

/**
 * token_name gets the symbolic name for a PHP token value.
 *
 * @param int
 * @return string
 **/
function token_name($token) {}

/**
 * Attempts to set the access and modification times of the file named in
 * the filename parameter to the value given in time. Note that the
 * access time is always modified, regardless of the number of
 * parameters.
 * 
 * If the file does not exist, it will be created.
 *
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function touch($filename, $time, $atime) {}

/**
 * Used to trigger a user error condition, it can be used by in
 * conjunction with the built-in error handler, or with a user defined
 * function that has been set as the new error handler
 * (set_error_handler).
 * 
 * This function is useful when you need to generate a particular
 * response to an exception at runtime.
 *
 * @param string
 * @param int
 * @return bool
 **/
function trigger_error($error_msg, $error_type) {}

/**
 * This function returns a string with whitespace stripped from the
 * beginning and end of str. Without the second parameter, trim will
 * strip these characters:
 * 
 * " " (ASCII 32 (0x20)), an ordinary space.
 * 
 * "\t" (ASCII 9 (0x09)), a tab.
 * 
 * "\n" (ASCII 10 (0x0A)), a new line (line feed).
 * 
 * "\r" (ASCII 13 (0x0D)), a carriage return.
 * 
 * "\0" (ASCII 0 (0x00)), the NUL-byte.
 * 
 * "\x0B" (ASCII 11 (0x0B)), a vertical tab.
 *
 * @param string
 * @param string
 * @return string
 **/
function trim($str, $charlist) {}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with, using a
 * user-defined comparison function.
 * 
 * This is used mainly when sorting associative arrays where the actual
 * element order is significant.
 *
 * @param array
 * @param callback
 * @return bool
 **/
function uasort(&$array, $cmp_function) {}

/**
 * Returns a string with the first character of str capitalized, if that
 * character is alphabetic.
 * 
 * Note that 'alphabetic' is determined by the current locale. For
 * instance, in the default "C" locale characters such as umlaut-a ()
 * will not be converted.
 *
 * @param string
 * @return string
 **/
function ucfirst($str) {}

/**
 * Returns a string with the first character of each word in str
 * capitalized, if that character is alphabetic.
 * 
 * The definition of a word is any string of characters that is
 * immediately after a whitespace (These are: space, form-feed, newline,
 * carriage return, horizontal tab, and vertical tab).
 *
 * @param string
 * @return string
 **/
function ucwords($str) {}

/**
 * udm_add_search_limit adds search restrictions.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function udm_add_search_limit($agent, $var, $val) {}

/**
 * Allocate a mnoGoSearch session.
 *
 * @param string
 * @param string
 * @return resource
 **/
function udm_alloc_agent($dbaddr, $dbmode) {}

/**
 * udm_alloc_agent_array will create an agent with multiple database
 * connections.
 *
 * @param array
 * @return resource
 **/
function udm_alloc_agent_array($databases) {}

/**
 * Gets the mnoGoSearch API version.
 * 
 * This function allows the user to identify which API functions are
 * available, e.g. udm_get_doc_count function is only available in
 * mnoGoSearch 3.1.11 or later.
 *
 * @return int
 **/
function udm_api_version() {}

/**
 * Gets all the categories on the same level with the current one.
 * 
 * The function can be useful for developing categories tree browser.
 *
 * @param resource
 * @param string
 * @return array
 **/
function udm_cat_list($agent, $category) {}

/**
 * Returns an array describing the path in the categories tree from the
 * tree root to the current one, specified by category.
 *
 * @param resource
 * @param string
 * @return array
 **/
function udm_cat_path($agent, $category) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function udm_check_charset($agent, $charset) {}

/**
 * @param resource
 * @param int
 * @param string
 * @return int
 **/
function udm_check_stored($agent, $link, $doc_id) {}

/**
 * udm_clear_search_limits resets defined search limitations.
 *
 * @param resource
 * @return bool
 **/
function udm_clear_search_limits($agent) {}

/**
 * @param resource
 * @param int
 * @return int
 **/
function udm_close_stored($agent, $link) {}

/**
 * @param resource
 * @param string
 * @return int
 **/
function udm_crc32($agent, $str) {}

/**
 * Receiving numeric agent error code.
 *
 * @param resource
 * @return int
 **/
function udm_errno($agent) {}

/**
 * Gets the agent error message.
 *
 * @param resource
 * @return string
 **/
function udm_error($agent) {}

/**
 * Performs a search.
 * 
 * The search itself. The first argument - session, the next one - query
 * itself. To find something just type words you want to find and press
 * SUBMIT button. For example, "mysql odbc". You should not use quotes "
 * in query, they are written here only to divide a query from other
 * text. mnoGoSearch will find all documents that contain word "mysql"
 * and/or word "odbc". Best documents having bigger weights will be
 * displayed first. If you use search mode ALL, search will return
 * documents that contain both (or more) words you entered. In case you
 * use mode ANY, the search will return list of documents that contain
 * any of the words you entered. If you want more advanced results you
 * may use query language. You should select "bool" match mode in the
 * search from.
 *
 * @param resource
 * @param string
 * @return resource
 **/
function udm_find($agent, $query) {}

/**
 * Freeing up memory allocated for agent session.
 *
 * @param resource
 * @return int
 **/
function udm_free_agent($agent) {}

/**
 * Frees the memory allocated for ispell data.
 *
 * @param int
 * @return bool
 **/
function udm_free_ispell_data($agent) {}

/**
 * Freeing up memory allocated for results.
 *
 * @param resource
 * @return bool
 **/
function udm_free_res($res) {}

/**
 * udm_get_doc_count returns the number of documents in the database.
 *
 * @param resource
 * @return int
 **/
function udm_get_doc_count($agent) {}

/**
 * Fetch a mnoGoSearch result field.
 *
 * @param resource
 * @param int
 * @param int
 * @return string
 **/
function udm_get_res_field($res, $row, $field) {}

/**
 * Gets the mnoGoSearch result parameters.
 *
 * @param resource
 * @param int
 * @return string
 **/
function udm_get_res_param($res, $param) {}

/**
 * udm_hash32 will take a string str and return a quite unique 32-bit
 * hash number from it.
 *
 * @param resource
 * @param string
 * @return int
 **/
function udm_hash32($agent, $str) {}

/**
 * udm_load_ispell_data loads ispell data.
 * 
 * After using this function to free memory allocated for ispell data,
 * please use udm_free_ispell_data, even if you use
 * UDM_ISPELL_TYPE_SERVER mode.
 *
 * @param resource
 * @param int
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function udm_load_ispell_data($agent, $var, $val1, $val2, $flag) {}

/**
 * @param resource
 * @param string
 * @return int
 **/
function udm_open_stored($agent, $storedaddr) {}

/**
 * Defines mnoGoSearch session parameters.
 *
 * @param resource
 * @param int
 * @param string
 * @return bool
 **/
function udm_set_agent_param($agent, $var, $val) {}

/**
 * uksort will sort the keys of an array using a user-supplied comparison
 * function. If the array you wish to sort needs to be sorted by some
 * non-trivial criteria, you should use this function.
 *
 * @param array
 * @param callback
 * @return bool
 **/
function uksort(&$array, $cmp_function) {}

/**
 * umask sets PHP's umask to mask 0777 and returns the old umask. When
 * PHP is being used as a server module, the umask is restored when each
 * request is finished.
 *
 * @param int
 * @return int
 **/
function umask($mask) {}

/**
 * Convert a binary string encoded in encoding to a unicode string.
 *
 * @param string
 * @param string
 * @param int
 * @return unicode
 **/
function unicode_decode($input, $encoding, $errmode) {}

/**
 * Takes a unicode string and converts it to a string in the specified
 * encoding.
 *
 * @param unicode
 * @param string
 * @param int
 * @return string
 **/
function unicode_encode($input, $encoding, $errmode) {}

/**
 * Return the current error mode for string conversions in direction.
 *
 * @param int
 * @return int
 **/
function unicode_get_error_mode($direction) {}

/**
 * Return the substitution character for string conversion errors set by
 * unicode_set_subst_char.
 *
 * @return unicode
 **/
function unicode_get_subst_char() {}

/**
 * This function sets the error mode for string conversions between
 * different encodings. An error can occur during conversion when an
 * illegal character is encountered or if a character cannot be
 * represented into the new encoding. By default, when an error is
 * encountered, the conversion stops.
 *
 * @param int
 * @param int
 * @return bool
 **/
function unicode_set_error_mode($direction, $mode) {}

/**
 * When converting a string from or to unicode, an invalid or
 * unconvertible character may be encountered. When the conversion error
 * mode is set to U_CONV_ERROR_SUBST, the character that caused the error
 * is substituted by a character set by this function. The default
 * substitution character is ?.
 *
 * @param unicode
 * @return bool
 **/
function unicode_set_subst_char($character) {}

/**
 * Gets a prefixed unique identifier based on the current time in
 * microseconds.
 *
 * @param string
 * @param bool
 * @return string
 **/
function uniqid($prefix, $more_entropy) {}

/**
 * Return the Julian Day for a Unix timestamp (seconds since 1.1.1970),
 * or for the current day if no timestamp is given.
 *
 * @param int
 * @return int
 **/
function unixtojd($timestamp) {}

/**
 * Deletes filename. Similar to the Unix C unlink() function.
 *
 * @param string
 * @param resource
 * @return bool
 **/
function unlink($filename, $context) {}

/**
 * Unpacks from a binary string into an array according to the given
 * format.
 * 
 * unpack works slightly different from Perl as the unpacked data is
 * stored in an associative array. To accomplish this you have to name
 * the different format codes and separate them by a slash /.
 *
 * @param string
 * @param string
 * @return array
 **/
function unpack($format, $data) {}

/**
 * @param string
 * @return void
 **/
function unregister_tick_function($function_name) {}

/**
 * @param string
 * @return mixed
 **/
function unserialize($str) {}

/**
 * Decodes any %## encoding in the given string.
 *
 * @param string
 * @return string
 **/
function urldecode($str) {}

/**
 * This function is convenient when encoding a string to be used in a
 * query part of a URL, as a convenient way to pass variables to the next
 * page.
 *
 * @param string
 * @return string
 **/
function urlencode($str) {}

/**
 * Used to trigger a user error condition, it can be used by in
 * conjunction with the built-in error handler, or with a user defined
 * function that has been set as the new error handler
 * (set_error_handler).
 * 
 * This function is useful when you need to generate a particular
 * response to an exception at runtime.
 *
 * @param string
 * @param int
 * @return bool
 **/
function user_error($error_msg, $error_type) {}

/**
 * This function sets whether or not to use the SOAP error handler in the
 * SOAP server. It will return the previous value. If set to , details of
 * errors in a SoapServer application will be sent to the clients. If ,
 * no information will be sent.
 *
 * @param bool
 * @return bool
 **/
function use_soap_error_handler($handler) {}

/**
 * Delays program execution for the given number of micro seconds.
 *
 * @param int
 * @return void
 **/
function usleep($micro_seconds) {}

/**
 * This function will sort an array by its values using a user-supplied
 * comparison function. If the array you wish to sort needs to be sorted
 * by some non-trivial criteria, you should use this function.
 *
 * @param array
 * @param callback
 * @return bool
 **/
function usort(&$array, $cmp_function) {}

/**
 * This function decodes data, assumed to be UTF-8 encoded, to
 * ISO-8859-1.
 *
 * @param string
 * @return string
 **/
function utf8_decode($data) {}

/**
 * This function encodes the string data to UTF-8, and returns the
 * encoded version. UTF-8 is a standard mechanism used by Unicode for
 * encoding wide character values into a byte stream. UTF-8 is
 * transparent to plain ASCII characters, is self-synchronized (meaning
 * it is possible for a program to figure out where in the bytestream
 * characters start) and can be used with normal string comparison
 * functions for sorting and such. PHP encodes UTF-8 characters in up to
 * four bytes, like this:
 * 
 * UTF-8 encoding
 * 
 * bytes bits representation
 * 
 * 1 7 0bbbbbbb
 * 
 * 2 11 110bbbbb 10bbbbbb
 * 
 * 3 16 1110bbbb 10bbbbbb 10bbbbbb
 * 
 * 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb
 * 
 * Each b represents a bit that can be used to store character data.
 *
 * @param string
 * @return string
 **/
function utf8_encode($data) {}

/**
 * Returns the absolute value of a variant.
 *
 * @param mixed
 * @return mixed
 **/
function variant_abs($val) {}

/**
 * Adds left to right using the following rules (taken from the MSDN
 * library), which correspond to those of Visual Basic:
 * 
 * Variant Addition Rules
 * 
 * If Then
 * 
 * Both expressions are of the string type Concatenation
 * 
 * One expression is a string type and the other a character Addition
 * 
 * One expression is numeric and the other is a string Addition
 * 
 * Both expressions are numeric Addition
 * 
 * Either expression is NULL NULL is returned
 * 
 * Both expressions are empty Integer subtype is returned
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_add($left, $right) {}

/**
 * Performs a bitwise AND operation. Note that this is slightly different
 * from a regular AND operation.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_and($left, $right) {}

/**
 * This function makes a copy of variant and then performs a variant cast
 * operation to force the copy to have the type given by type.
 * 
 * This function wraps VariantChangeType() in the COM library; consult
 * MSDN for more information.
 *
 * @param variant
 * @param int
 * @return variant
 **/
function variant_cast($variant, $type) {}

/**
 * Concatenates left with right and returns the result.
 * 
 * This function is notionally equivalent to $left . $right.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_cat($left, $right) {}

/**
 * Compares left with right.
 * 
 * This function will only compare scalar values, not arrays or variant
 * records.
 *
 * @param mixed
 * @param mixed
 * @param int
 * @param int
 * @return int
 **/
function variant_cmp($left, $right, $lcid, $flags) {}

/**
 * Converts timestamp from a unix timestamp value into a variant of type
 * VT_DATE. This allows easier interopability between the unix-ish parts
 * of PHP and COM.
 *
 * @param int
 * @return variant
 **/
function variant_date_from_timestamp($timestamp) {}

/**
 * Converts variant from a VT_DATE (or similar) value into a Unix
 * timestamp. This allows easier interopability between the Unix-ish
 * parts of PHP and COM.
 *
 * @param variant
 * @return int
 **/
function variant_date_to_timestamp($variant) {}

/**
 * Divides left by right and returns the result.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_div($left, $right) {}

/**
 * Performs a bitwise equivalence on two variants.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_eqv($left, $right) {}

/**
 * Gets the integer portion of a variant.
 *
 * @param mixed
 * @return mixed
 **/
function variant_fix($variant) {}

/**
 * Returns the type of a variant object.
 *
 * @param variant
 * @return int
 **/
function variant_get_type($variant) {}

/**
 * Converts left and right to integer values, and then performs integer
 * division.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_idiv($left, $right) {}

/**
 * Performs a bitwise implication operation.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_imp($left, $right) {}

/**
 * Gets the integer portion of a variant.
 *
 * @param mixed
 * @return mixed
 **/
function variant_int($variant) {}

/**
 * Divides left by right and returns the remainder.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_mod($left, $right) {}

/**
 * Multiplies left by right.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_mul($left, $right) {}

/**
 * Performs logical negation of variant.
 *
 * @param mixed
 * @return mixed
 **/
function variant_neg($variant) {}

/**
 * Performs bitwise not negation on variant and returns the result.
 *
 * @param mixed
 * @return mixed
 **/
function variant_not($variant) {}

/**
 * Performs a bitwise OR operation. Note that this is slightly different
 * from a regular OR operation.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_or($left, $right) {}

/**
 * Returns the result of left to the power of right.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_pow($left, $right) {}

/**
 * Returns the value of variant rounded to decimals decimal places.
 *
 * @param mixed
 * @param int
 * @return mixed
 **/
function variant_round($variant, $decimals) {}

/**
 * Converts value to a variant and assigns it to the variant object; no
 * new variant object is created, and the old value of variant is
 * freed/released.
 *
 * @param variant
 * @param mixed
 * @return void
 **/
function variant_set($variant, $value) {}

/**
 * This function is similar to variant_cast except that the variant is
 * modified "in-place"; no new variant is created. The parameters for
 * this function have identical meaning to those of variant_cast.
 *
 * @param variant
 * @param int
 * @return void
 **/
function variant_set_type($variant, $type) {}

/**
 * Subtracts right from left.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_sub($left, $right) {}

/**
 * Performs a logical exclusion.
 *
 * @param mixed
 * @param mixed
 * @return mixed
 **/
function variant_xor($left, $right) {}

/**
 * @param mixed
 * @param mixed
 * @return void
 **/
function var_dump($expression, $expression) {}

/**
 * @param mixed
 * @param bool
 * @return mixed
 **/
function var_export($expression, $return) {}

/**
 * version_compare compares two "PHP-standardized" version number
 * strings. This is useful if you would like to write programs working
 * only on some versions of PHP.
 * 
 * The function first replaces _, - and + with a dot . in the version
 * strings and also inserts dots . before and after any non number so
 * that for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it splits the
 * results like if you were using explode('.', $ver). Then it compares
 * the parts starting from left to right. If a part contains special
 * version strings these are handled in the following order: any string
 * not found in this list dev alpha = a beta = b RC = rc # pl = p. This
 * way not only versions with different levels like '4.1' and '4.1.2' can
 * be compared but also any PHP specific version containing development
 * state.
 *
 * @param string
 * @param string
 * @param string
 * @return mixed
 **/
function version_compare($version1, $version2, $operator) {}

/**
 * Write a string produced according to format to the stream resource
 * specified by handle.
 * 
 * Operates as fprintf but accepts an array of arguments, rather than a
 * variable number of arguments.
 *
 * @param resource
 * @param string
 * @param array
 * @return int
 **/
function vfprintf($handle, $format, $args) {}

/**
 * virtual is an Apache-specific function which is similar to !--#include
 * virtual...-- in mod_include. It performs an Apache sub-request. It is
 * useful for including CGI scripts or .shtml files, or anything else
 * that you would parse through Apache. Note that for a CGI script, the
 * script must generate valid CGI headers. At the minimum that means it
 * must generate a Content-Type header.
 * 
 * To run the sub-request, all buffers are terminated and flushed to the
 * browser, pending headers are sent too.
 *
 * @param string
 * @return bool
 **/
function virtual($filename) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_add_alias_domain($domain, $aliasdomain) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_add_alias_domain_ex($olddomain, $newdomain) {}

/**
 * @param string
 * @param string
 * @param int
 * @param int
 * @return bool
 **/
function vpopmail_add_domain($domain, $dir, $uid, $gid) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function vpopmail_add_domain_ex($domain, $passwd, $quota, $bounce, $apop) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function vpopmail_add_user($user, $domain, $password, $gecos, $apop) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_alias_add($user, $domain, $alias) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_alias_del($user, $domain) {}

/**
 * @param string
 * @return bool
 **/
function vpopmail_alias_del_domain($domain) {}

/**
 * @param string
 * @param string
 * @return array
 **/
function vpopmail_alias_get($alias, $domain) {}

/**
 * @param string
 * @return array
 **/
function vpopmail_alias_get_all($domain) {}

/**
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_auth_user($user, $domain, $password, $apop) {}

/**
 * @param string
 * @return bool
 **/
function vpopmail_del_domain($domain) {}

/**
 * @param string
 * @return bool
 **/
function vpopmail_del_domain_ex($domain) {}

/**
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_del_user($user, $domain) {}

/**
 * @return string
 **/
function vpopmail_error() {}

/**
 * @param string
 * @param string
 * @param string
 * @param bool
 * @return bool
 **/
function vpopmail_passwd($user, $domain, $password, $apop) {}

/**
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function vpopmail_set_user_quota($user, $domain, $quota) {}

/**
 * Display array values as a formatted string according to format (which
 * is described in the documentation for sprintf).
 * 
 * Operates as printf but accepts an array of arguments, rather than a
 * variable number of arguments.
 *
 * @param string
 * @param array
 * @return int
 **/
function vprintf($format, $args) {}

/**
 * Operates as sprintf but accepts an array of arguments, rather than a
 * variable number of arguments.
 *
 * @param string
 * @param array
 * @return string
 **/
function vsprintf($format, $args) {}

/**
 * You need to call this function if you would like to define a type for
 * a w32api call.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function w32api_deftype($typename, $member1_type, $member1_name) {}

/**
 * This function creates an instance of the data type named typename,
 * filling in the values of the data type.
 *
 * @param string
 * @param mixed
 * @return resource
 **/
function w32api_init_dtype($typename, $value) {}

/**
 * w32api_invoke_function tries to find the previously registered
 * function, passing the parameters you provided.
 *
 * @param string
 * @param mixed
 * @return mixed
 **/
function w32api_invoke_function($funcname, $argument) {}

/**
 * This function tries to find the function_name function in libary, and
 * tries to import it into PHP.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function w32api_register_function($library, $function_name, $return_type) {}

/**
 * This function sets the method call type.
 *
 * @param int
 * @return void
 **/
function w32api_set_call_method($method) {}

/**
 * Serializes the passed variables and add the result to the given
 * packet.
 *
 * @param resource
 * @param mixed
 * @return bool
 **/
function wddx_add_vars($packet_id, $var_name) {}

/**
 * Unserializes a WDDX packet.
 *
 * @param string
 * @return mixed
 **/
function wddx_deserialize($packet) {}

/**
 * Ends and returns the given WDDX packet.
 *
 * @param resource
 * @return string
 **/
function wddx_packet_end($packet_id) {}

/**
 * Start a new WDDX packet for incremental addition of variables. It
 * automatically creates a structure definition inside the packet to
 * contain the variables.
 *
 * @param string
 * @return resource
 **/
function wddx_packet_start($comment) {}

/**
 * Creates a WDDX packet from a single given value.
 *
 * @param mixed
 * @param string
 * @return string
 **/
function wddx_serialize_value($var, $comment) {}

/**
 * Creates a WDDX packet with a structure that contains the serialized
 * representation of the passed variables.
 *
 * @param mixed
 * @return string
 **/
function wddx_serialize_vars($var_name) {}

/**
 * Unserializes a WDDX packet.
 *
 * @param string
 * @return mixed
 **/
function wddx_unserialize($packet) {}

/**
 * @param array
 * @param string
 * @return mixed
 **/
function win32_create_service($details, $machine) {}

/**
 * Attempts to delete a service from the SCM database. Administrative
 * privileges are required for this to succeed.
 * 
 * This function really just marks the service for deletion. If other
 * processes (such as the Services Applet) are open, then the deletion
 * will be deferred until those applications are closed. If a service is
 * marked for deletion, further attempts to delete it will fail, and
 * attempts to create a new service with that name will also fail.
 *
 * @param string
 * @param string
 * @return int
 **/
function win32_delete_service($servicename, $machine) {}

/**
 * Returns the control code that was last sent to this service process.
 * When running as a service you should periodically check this to
 * determine if your service needs to stop running.
 *
 * @return int
 **/
function win32_get_last_control_message() {}

/**
 * Retrieves statistics about all running processes.
 *
 * @return array
 **/
function win32_ps_list_procs() {}

/**
 * Retrieves statistics about the global memory utilization.
 *
 * @return array
 **/
function win32_ps_stat_mem() {}

/**
 * Retrieves statistics about the process with the process id pid.
 *
 * @param int
 * @return array
 **/
function win32_ps_stat_proc($pid) {}

/**
 * Queries the current status for a service, returning an array of
 * information.
 *
 * @param string
 * @param string
 * @return mixed
 **/
function win32_query_service_status($servicename, $machine) {}

/**
 * Informs the SCM of the current status of a running service. This call
 * is only valid for a running service process.
 *
 * @param int
 * @return bool
 **/
function win32_set_service_status($status) {}

/**
 * Attempts to start the named service. Usually requires administrative
 * privileges.
 *
 * @param string
 * @param string
 * @return int
 **/
function win32_start_service($servicename, $machine) {}

/**
 * When launched via the Service Control Manager, a service process is
 * required to "check-in" with it to establish service monitoring and
 * communication facilities. This function performs the check-in by
 * spawning a thread to handle the lower-level communication with the
 * service control manager.
 * 
 * Once started, the service process should continue to check-in with the
 * service control manager so that it can determine if it should
 * terminate. This is achieved by periodically calling
 * win32_get_last_control_message and handling the return code
 * appropriately.
 *
 * @param string
 * @return mixed
 **/
function win32_start_service_ctrl_dispatcher($name) {}

/**
 * Stops a named service. Requires administrative privileges.
 *
 * @param string
 * @param string
 * @return int
 **/
function win32_stop_service($servicename, $machine) {}

/**
 * Wraps a string to a given number of characters using a string break
 * character.
 *
 * @param string
 * @param int
 * @param string
 * @param bool
 * @return string
 **/
function wordwrap($str, $width, $break, $cut) {}

/**
 * This function gets the value of an extended attribute of a file.
 *
 * @param string
 * @param string
 * @param int
 * @return string
 **/
function xattr_get($filename, $name, $flags) {}

/**
 * This functions gets a list of names of extended attributes of a file.
 *
 * @param string
 * @param int
 * @return array
 **/
function xattr_list($filename, $flags) {}

/**
 * This function removes an extended attribute of a file.
 *
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function xattr_remove($filename, $name, $flags) {}

/**
 * This function sets the value of an extended attribute of a file.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @return bool
 **/
function xattr_set($filename, $name, $value, $flags) {}

/**
 * This functions checks if the filesystem holding the given file
 * supports extended attributes. Read access to the file is required.
 *
 * @param string
 * @param int
 * @return bool
 **/
function xattr_supported($filename, $flags) {}

/**
 * Makes a binary diff of two files and stores the result in a patch
 * file. This function works with both text and binary files. Resulting
 * patch file can be later applied using
 * xdiff_file_bpatch/xdiff_string_bpatch.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xdiff_file_bdiff($old_file, $new_file, $dest) {}

/**
 * Returns a size of a result file that would be created after applying
 * binary patch from file file to the original file.
 *
 * @param string
 * @return int
 **/
function xdiff_file_bdiff_size($file) {}

/**
 * Patches a file with a binary patch and stores the result in a file
 * dest. This function accepts patches created both via xdiff_file_bdiff
 * and xdiff_file_rabdiff functions or their string counterparts.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xdiff_file_bpatch($file, $patch, $dest) {}

/**
 * Makes an unified diff containing differences between old_file and
 * new_file and stores it in dest file. The resulting file is
 * human-readable. An optional context parameter specifies how many lines
 * of context should be added around each change (with default value of
 * 3). Setting minimal parameter to true will result in outputting the
 * shortest patch file possible (can take a long time).
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @param bool
 * @return bool
 **/
function xdiff_file_diff($old_file, $new_file, $dest, $context, $minimal) {}

/**
 * Makes a binary diff of two files and stores the result in a patch
 * file. This function works with both text and binary files. Resulting
 * patch file can be later applied using xdiff_file_bpatch.
 * 
 * Starting with version 1.5.0 this function is an alias of
 * xdiff_file_bdiff.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xdiff_file_diff_binary($old_file, $new_file, $dest) {}

/**
 * Merges three files into one and stores the result in a file dest. The
 * old_file is an original version while new_file1 and new_file2 are
 * modified versions of an original.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return mixed
 **/
function xdiff_file_merge3($old_file, $new_file1, $new_file2, $dest) {}

/**
 * Patches a file with a patch and stores the result in a file. patch has
 * to be an unified diff created by xdiff_file_diff/xdiff_string_diff
 * function. An optional flags parameter specifies mode of operation.
 *
 * @param string
 * @param string
 * @param string
 * @param int
 * @return mixed
 **/
function xdiff_file_patch($file, $patch, $dest, $flags) {}

/**
 * Patches a file with a binary patch and stores the result in a file
 * dest. This function accepts patches created both via xdiff_file_bdiff
 * or xdiff_file_rabdiff functions or their string counterparts.
 * 
 * Starting with version 1.5.0 this function is an alias of
 * xdiff_file_bpatch.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xdiff_file_patch_binary($file, $patch, $dest) {}

/**
 * Makes a binary diff of two files and stores the result in a patch
 * file. The difference between this function and xdiff_file_bdiff is
 * different algorithm used which should result in faster execution and
 * smaller diff produced. This function works with both text and binary
 * files. Resulting patch file can be later applied using
 * xdiff_file_bpatch/xdiff_string_bpatch.
 * 
 * For more details about differences between algorithm used please check
 * libxdiff website.
 *
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xdiff_file_rabdiff($old_file, $new_file, $dest) {}

/**
 * Makes a binary diff of two strings and returns the result. This
 * function works with both text and binary data. Resulting patch can be
 * later applied using xdiff_string_bpatch/xdiff_file_bpatch.
 *
 * @param string
 * @param string
 * @return string
 **/
function xdiff_string_bdiff($old_data, $new_data) {}

/**
 * Returns a size of a result file that would be created after applying
 * binary patch to the original file.
 *
 * @param string
 * @return int
 **/
function xdiff_string_bdiff_size($patch) {}

/**
 * Patches a string str with a binary patch. This function accepts
 * patches created both via xdiff_string_bdiff and xdiff_string_rabdiff
 * functions or their file counterparts.
 *
 * @param string
 * @param string
 * @return string
 **/
function xdiff_string_bpatch($str, $patch) {}

/**
 * Makes an unified diff containing differences between old_data string
 * and new_data string and returns it. The resulting diff is
 * human-readable. An optional context parameter specifies how many lines
 * of context should be added around each change (with default value of
 * 3). Setting minimal parameter to true will result in outputting the
 * shortest patch file possible (can take a long time).
 *
 * @param string
 * @param string
 * @param int
 * @param bool
 * @return string
 **/
function xdiff_string_diff($old_data, $new_data, $context, $minimal) {}

/**
 * Merges three strings into one and returns the result. The old_data is
 * an original version of data while new_file1 and new_file2 are modified
 * versions of an original. An optional error is used to pass any
 * rejected parts during merging process.
 *
 * @param string
 * @param string
 * @param string
 * @param string
 * @return mixed
 **/
function xdiff_string_merge3($old_data, $new_data1, $new_data2, &$error) {}

/**
 * Patches a str string with an unified patch in patch parameter and
 * returns the result. patch has to be an unified diff created by
 * xdiff_file_diff/xdiff_string_diff function. An optional flags
 * parameter specifies mode of operation. Any rejected parts of the patch
 * will be stored inside error variable if it is provided.
 *
 * @param string
 * @param string
 * @param int
 * @param string
 * @return string
 **/
function xdiff_string_patch($str, $patch, $flags, &$error) {}

/**
 * Patches a string str with a binary patch. This function accepts
 * patches created both via xdiff_string_bdiff and xdiff_string_rabdiff
 * functions or their file counterparts.
 * 
 * Starting with version 1.5.0 this function is an alias of
 * xdiff_string_bpatch.
 *
 * @param string
 * @param string
 * @return string
 **/
function xdiff_string_patch_binary($str, $patch) {}

/**
 * @param string
 * @param string
 * @return mixed
 **/
function xmlrpc_decode($xml, $encoding) {}

/**
 * @param string
 * @param string
 * @param string
 * @return mixed
 **/
function xmlrpc_decode_request($xml, &$method, $encoding) {}

/**
 * @param mixed
 * @return string
 **/
function xmlrpc_encode($value) {}

/**
 * @param string
 * @param mixed
 * @param array
 * @return string
 **/
function xmlrpc_encode_request($method, $params, $output_options) {}

/**
 * This function is especially useful for base64 and datetime strings.
 *
 * @param mixed
 * @return string
 **/
function xmlrpc_get_type($value) {}

/**
 * @param array
 * @return bool
 **/
function xmlrpc_is_fault($arg) {}

/**
 * @param string
 * @return array
 **/
function xmlrpc_parse_method_descriptions($xml) {}

/**
 * @param resource
 * @param array
 * @return int
 **/
function xmlrpc_server_add_introspection_data($server, $desc) {}

/**
 * @param resource
 * @param string
 * @param mixed
 * @param array
 * @return string
 **/
function xmlrpc_server_call_method($server, $xml, $user_data, $output_options) {}

/**
 * @return resource
 **/
function xmlrpc_server_create() {}

/**
 * @param resource
 * @return int
 **/
function xmlrpc_server_destroy($server) {}

/**
 * @param resource
 * @param string
 * @return bool
 **/
function xmlrpc_server_register_introspection_callback($server, $function) {}

/**
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function xmlrpc_server_register_method($server, $method_name, $function) {}

/**
 * Sets xmlrpc type, base64 or datetime, for a PHP string value.
 *
 * @param string
 * @param string
 * @return bool
 **/
function xmlrpc_set_type(&$value, $type) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current attribute.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_attribute($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current CDATA section.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_cdata($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current comment.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_comment($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current document.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_document($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the DTD of the document.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_dtd($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current DTD attribute list.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_dtd_attlist($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current DTD element.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_dtd_element($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current DTD entity.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_dtd_entity($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current element.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_element($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Ends the current processing instruction.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_end_pi($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Flushes the current buffer.
 *
 * @param resource
 * @param bool
 * @return mixed
 **/
function xmlwriter_flush($xmlwriter, $empty) {}

/**
 * 
 * 
 * 
 * 
 * End the current xml element. Writes an end tag even if the element is
 * empty.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_full_end_element($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Creates a new XMLWriter using memory for string output.
 *
 * @return resource
 **/
function xmlwriter_open_memory() {}

/**
 * 
 * 
 * 
 * 
 * Creates a new XMLWriter using uri for the output.
 *
 * @param string
 * @return resource
 **/
function xmlwriter_open_uri($uri) {}

/**
 * 
 * 
 * 
 * 
 * Returns the current buffer.
 *
 * @param resource
 * @param bool
 * @return string
 **/
function xmlwriter_output_memory($xmlwriter, $flush) {}

/**
 * 
 * 
 * 
 * 
 * Toggles indentation on or off.
 *
 * @param resource
 * @param bool
 * @return bool
 **/
function xmlwriter_set_indent($xmlwriter, $indent) {}

/**
 * 
 * 
 * 
 * 
 * Sets the string which will be used to indent each element/attribute of
 * the resulting xml.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_set_indent_string($xmlwriter, $indentString) {}

/**
 * 
 * 
 * 
 * 
 * Starts an attribute.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_start_attribute($xmlwriter, $name) {}

/**
 * 
 * 
 * 
 * 
 * Starts a namespaced attribute.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_start_attribute_ns($xmlwriter, $prefix, $name, $uri) {}

/**
 * 
 * 
 * 
 * 
 * Starts a CDATA.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_start_cdata($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Starts a comment.
 *
 * @param resource
 * @return bool
 **/
function xmlwriter_start_comment($xmlwriter) {}

/**
 * 
 * 
 * 
 * 
 * Starts a document.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_start_document($xmlwriter, $version, $encoding, $standalone) {}

/**
 * 
 * 
 * 
 * 
 * Starts a DTD.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_start_dtd($xmlwriter, $qualifiedName, $publicId, $systemId) {}

/**
 * 
 * 
 * 
 * 
 * Starts a DTD attribute list.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_start_dtd_attlist($xmlwriter, $name) {}

/**
 * 
 * 
 * 
 * 
 * Starts a DTD element.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_start_dtd_element($xmlwriter, $qualifiedName) {}

/**
 * 
 * 
 * 
 * 
 * Starts a DTD entity.
 *
 * @param resource
 * @param string
 * @param bool
 * @return bool
 **/
function xmlwriter_start_dtd_entity($xmlwriter, $name, $isparam) {}

/**
 * 
 * 
 * 
 * 
 * Starts an element.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_start_element($xmlwriter, $name) {}

/**
 * 
 * 
 * 
 * 
 * Starts a namespaced element.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_start_element_ns($xmlwriter, $prefix, $name, $uri) {}

/**
 * 
 * 
 * 
 * 
 * Starts a processing instruction tag.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_start_pi($xmlwriter, $target) {}

/**
 * 
 * 
 * 
 * 
 * Writes a text.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_text($xmlwriter, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full attribute.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_attribute($xmlwriter, $name, $value) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full namespaced attribute.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_attribute_ns($xmlwriter, $prefix, $name, $uri, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full CDATA.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_write_cdata($xmlwriter, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full comment.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_write_comment($xmlwriter, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full DTD.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_dtd($xmlwriter, $name, $publicId, $systemId, $subset) {}

/**
 * 
 * 
 * 
 * 
 * Writes a DTD attribute list.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_dtd_attlist($xmlwriter, $name, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full DTD element.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_dtd_element($xmlwriter, $name, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full DTD entity.
 *
 * @param resource
 * @param string
 * @param string
 * @param bool
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_dtd_entity($xmlwriter, $name, $content, $pe, $pubid, $sysid, $ndataid) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full element tag.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_element($xmlwriter, $name, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a full namespaced element tag.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_element_ns($xmlwriter, $prefix, $name, $uri, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a processing instruction.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function xmlwriter_write_pi($xmlwriter, $target, $content) {}

/**
 * 
 * 
 * 
 * 
 * Writes a raw xml text.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function xmlwriter_write_raw($xmlwriter, $content) {}

/**
 * Gets the XML parser error string associated with the given code.
 *
 * @param int
 * @return string
 **/
function xml_error_string($code) {}

/**
 * Gets the current byte index of the given XML parser.
 *
 * @param resource
 * @return int
 **/
function xml_get_current_byte_index($parser) {}

/**
 * Gets the current column number of the given XML parser.
 *
 * @param resource
 * @return int
 **/
function xml_get_current_column_number($parser) {}

/**
 * Gets the current line number for the given XML parser.
 *
 * @param resource
 * @return int
 **/
function xml_get_current_line_number($parser) {}

/**
 * Gets the XML parser error code.
 *
 * @param resource
 * @return int
 **/
function xml_get_error_code($parser) {}

/**
 * xml_parse parses an XML document. The handlers for the configured
 * events are called as many times as necessary.
 *
 * @param resource
 * @param string
 * @param bool
 * @return int
 **/
function xml_parse($parser, $data, $is_final) {}

/**
 * xml_parser_create creates a new XML parser and returns a resource
 * handle referencing it to be used by the other XML functions.
 *
 * @param string
 * @return resource
 **/
function xml_parser_create($encoding) {}

/**
 * xml_parser_create_ns creates a new XML parser with XML namespace
 * support and returns a resource handle referencing it to be used by the
 * other XML functions.
 *
 * @param string
 * @param string
 * @return resource
 **/
function xml_parser_create_ns($encoding, $separator) {}

/**
 * Frees the given XML parser.
 *
 * @param resource
 * @return bool
 **/
function xml_parser_free($parser) {}

/**
 * Gets an option value from an XML parser.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function xml_parser_get_option($parser, $option) {}

/**
 * Sets an option in an XML parser.
 *
 * @param resource
 * @param int
 * @param mixed
 * @return bool
 **/
function xml_parser_set_option($parser, $option, $value) {}

/**
 * This function parses an XML file into 2 parallel array structures, one
 * (index) containing pointers to the location of the appropriate values
 * in the values array. These last two parameters must be passed by
 * reference.
 *
 * @param resource
 * @param string
 * @param array
 * @param array
 * @return int
 **/
function xml_parse_into_struct($parser, $data, &$values, &$index) {}

/**
 * Sets the character data handler function for the XML parser parser.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_character_data_handler($parser, $handler) {}

/**
 * Sets the default handler function for the XML parser parser.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_default_handler($parser, $handler) {}

/**
 * Sets the element handler functions for the XML parser.
 * start_element_handler and end_element_handler are strings containing
 * the names of functions that must exist when xml_parse is called for
 * parser.
 *
 * @param resource
 * @param callback
 * @param callback
 * @return bool
 **/
function xml_set_element_handler($parser, $start_element_handler, $end_element_handler) {}

/**
 * Set a handler to be called when leaving the scope of a namespace
 * declaration. This will be called, for each namespace declaration,
 * after the handler for the end tag of the element in which the
 * namespace was declared.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_end_namespace_decl_handler($parser, $handler) {}

/**
 * Sets the external entity reference handler function for the XML parser
 * parser.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_external_entity_ref_handler($parser, $handler) {}

/**
 * Sets the notation declaration handler function for the XML parser
 * parser.
 * 
 * A notation declaration is part of the document's DTD and has the
 * following format:
 * 
 * See section 4.7 of the XML 1.0 spec for the definition of notation
 * declarations.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_notation_decl_handler($parser, $handler) {}

/**
 * This function allows to use parser inside object. All callback
 * functions could be set with xml_set_element_handler etc and assumed to
 * be methods of object.
 *
 * @param resource
 * @param object
 * @return bool
 **/
function xml_set_object($parser, &$object) {}

/**
 * Sets the processing instruction (PI) handler function for the XML
 * parser parser.
 * 
 * A processing instruction has the following format:
 * 
 * ?target data?&gt;
 * 
 * You can put PHP code into such a tag, but be aware of one limitation:
 * in an XML PI, the PI end tag (?) can not be quoted, so this character
 * sequence should not appear in the PHP code you embed with PIs in XML
 * documents.If it does, the rest of the PHP code, as well as the "real"
 * PI end tag, will be treated as character data.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_processing_instruction_handler($parser, $handler) {}

/**
 * Set a handler to be called when a namespace is declared. Namespace
 * declarations occur inside start tags. But the namespace declaration
 * start handler is called before the start tag handler for each
 * namespace declared in that start tag.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_start_namespace_decl_handler($parser, $handler) {}

/**
 * Sets the unparsed entity declaration handler function for the XML
 * parser parser.
 * 
 * The handler will be called if the XML parser encounters an external
 * entity declaration with an NDATA declaration, like the following:
 * 
 * See section 4.2.2 of the XML 1.0 spec for the definition of notation
 * declared external entities.
 *
 * @param resource
 * @param callback
 * @return bool
 **/
function xml_set_unparsed_entity_decl_handler($parser, $handler) {}

/**
 * The optional contextnode can be specified for doing relative XPath
 * queries.
 * 
 * See also xpath_new_context.
 *
 * @param XPathContext
 * @param string
 * @param domnode
 * @return XPathObject
 **/
function xpath_eval($xpath_context, $xpath_expression, $contextnode) {}

/**
 * xpath_eval_expression Example
 * 
 * See also xpath_eval.
 *
 * @param XPathContext
 * @param string
 * @param domnode
 * @return XPathObject
 **/
function xpath_eval_expression($xpath_context, $expression, $contextnode) {}

/**
 * Creates a new xpath context.
 *
 * @param domdocument
 * @return XPathContext
 **/
function xpath_new_context($dom_document) {}

/**
 * @param XPathContext
 * @param string
 * @param string
 * @return bool
 **/
function xpath_register_ns($xpath_context, $prefix, $uri) {}

/**
 * @param XPathContext
 * @param object
 * @return bool
 **/
function xpath_register_ns_auto($xpath_context, $context_node) {}

/**
 * @param XPathContext
 * @param string
 * @param domnode
 * @return int
 **/
function xptr_eval($xpath_context, $eval_str, $contextnode) {}

/**
 * @return XPathContext
 **/
function xptr_new_context() {}

/**
 * xslt_backend_info gets information about the compilation settings of
 * the backend.
 *
 * @return string
 **/
function xslt_backend_info() {}

/**
 * xslt_backend_name gets the name of the backend.
 *
 * @return string
 **/
function xslt_backend_name() {}

/**
 * xslt_backend_version gets the version number of Sablotron.
 *
 * @return string
 **/
function xslt_backend_version() {}

/**
 * Create and return a new XSLT processor resource for manipulation by
 * the other XSLT functions.
 *
 * @return resource
 **/
function xslt_create() {}

/**
 * Returns an error code describing the last error that occurred on the
 * passed XSLT processor.
 *
 * @param resource
 * @return int
 **/
function xslt_errno($xh) {}

/**
 * Returns a string describing the last error that occurred on the passed
 * XSLT processor.
 *
 * @param resource
 * @return string
 **/
function xslt_error($xh) {}

/**
 * Free the XSLT processor identified by the given handle.
 *
 * @param resource
 * @return void
 **/
function xslt_free($xh) {}

/**
 * xslt_getopt returns the options on the given processor.
 *
 * @param resource
 * @return int
 **/
function xslt_getopt($processor) {}

/**
 * The xslt_process function is the crux of the XSLT extension. It allows
 * you to perform an XSLT transformation using almost any type of input
 * source - the containers. This is accomplished through the use of
 * argument buffers -- a concept taken from the Sablotron XSLT processor
 * (currently the only XSLT processor this extension supports). The input
 * containers default to a filename 'containing' the document to be
 * processed.
 *
 * @param resource
 * @param string
 * @param string
 * @param string
 * @param array
 * @param array
 * @return mixed
 **/
function xslt_process($xh, $xmlcontainer, $xslcontainer, $resultcontainer, $arguments, $parameters) {}

/**
 * xslt_setopt sets the options specified by newmask on the given
 * processor.
 *
 * @param resource
 * @param int
 * @return mixed
 **/
function xslt_setopt($processor, $newmask) {}

/**
 * Sets the base URI for all XSLT transformations, the base URI is used
 * with Xpath instructions to resolve document() and other commands which
 * access external resources. It is also used to resolve URIs for the
 * xsl:include and xsl:import elements.
 *
 * @param resource
 * @param string
 * @return void
 **/
function xslt_set_base($xh, $uri) {}

/**
 * Set the output encoding for the XSLT transformations. When using the
 * Sablotron backend, this option is only available when you compile
 * Sablotron with encoding support.
 *
 * @param resource
 * @param string
 * @return void
 **/
function xslt_set_encoding($xh, $encoding) {}

/**
 * Set an error handler function for the XSLT processor given by xh, this
 * function will be called whenever an error occurs in the XSLT
 * transformation (this function is also called for notices).
 *
 * @param resource
 * @param mixed
 * @return void
 **/
function xslt_set_error_handler($xh, $handler) {}

/**
 * This function allows you to set the file in which you want XSLT log
 * messages to, XSLT log messages are different than error messages, in
 * that log messages are not actually error messages but rather messages
 * related to the state of the XSLT processor. They are useful for
 * debugging XSLT, when something goes wrong.
 * 
 * By default logging is disabled, in order to enable logging you must
 * first call xslt_set_log with a boolean parameter which enables
 * logging, then if you want to set the log file to debug to, you must
 * then pass it a string containing the filename.
 *
 * @param resource
 * @param mixed
 * @return void
 **/
function xslt_set_log($xh, $log) {}

/**
 * This function allows to use the processor inside an object and to
 * resolve all callback functions in it.
 * 
 * The callback functions can be declared with xslt_set_sax_handlers,
 * xslt_set_scheme_handlers or xslt_set_error_handler and are assumed to
 * be methods of object.
 *
 * @param resource
 * @param object
 * @return bool
 **/
function xslt_set_object($processor, &$obj) {}

/**
 * Set SAX handlers on the resource handle given by xh.
 *
 * @param resource
 * @param array
 * @return void
 **/
function xslt_set_sax_handler($xh, $handlers) {}

/**
 * xslt_set_sax_handlers registers the SAX handlers for the document,
 * given a XSLT processor resource.
 * 
 * Using xslt_set_sax_handlers doesn't look very different than running a
 * SAX parser like xml_parse on the result of an xslt_process
 * transformation.
 *
 * @param resource
 * @param array
 * @return void
 **/
function xslt_set_sax_handlers($processor, $handlers) {}

/**
 * Set Scheme handlers on the resource handle given by xh.
 *
 * @param resource
 * @param array
 * @return void
 **/
function xslt_set_scheme_handler($xh, $handlers) {}

/**
 * Registers the scheme handlers (XPath handlers) for the document.
 *
 * @param resource
 * @param array
 * @return void
 **/
function xslt_set_scheme_handlers($xh, $handlers) {}

/**
 * Returns additional error information for the last request on the
 * server.
 * 
 * With some servers, this function may return the same string as
 * yaz_error.
 *
 * @param resource
 * @return string
 **/
function yaz_addinfo($id) {}

/**
 * This function configures the CCL query parser for a server with
 * definitions of access points (CCL qualifiers) and their mapping to
 * RPN.
 * 
 * To map a specific CCL query to RPN afterwards call the yaz_ccl_parse
 * function.
 *
 * @param resource
 * @param array
 * @return void
 **/
function yaz_ccl_conf($id, $config) {}

/**
 * This function invokes a CCL parser. It converts a given CCL FIND query
 * to an RPN query which may be passed to the yaz_search function to
 * perform a search.
 * 
 * To define a set of valid CCL fields call yaz_ccl_conf prior to this
 * function.
 *
 * @param resource
 * @param string
 * @param array
 * @return bool
 **/
function yaz_ccl_parse($id, $query, &$result) {}

/**
 * Closes the connection given by parameter id.
 *
 * @param resource
 * @return bool
 **/
function yaz_close($id) {}

/**
 * This function returns a connection resource on success, zero on
 * failure.
 * 
 * yaz_connect prepares for a connection to a Z39.50 server. This
 * function is non-blocking and does not attempt to establish a
 * connection - it merely prepares a connect to be performed later when
 * yaz_wait is called.
 *
 * @param string
 * @param mixed
 * @return mixed
 **/
function yaz_connect($zurl, $options) {}

/**
 * This function allows you to change databases within a session by
 * specifying one or more databases to be used in search, retrieval, etc.
 * - overriding databases specified in call to yaz_connect.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function yaz_database($id, $databases) {}

/**
 * This function sets the element set name for retrieval.
 * 
 * Call this function before yaz_search or yaz_present to specify the
 * element set name for records to be retrieved.
 *
 * @param resource
 * @param string
 * @return bool
 **/
function yaz_element($id, $elementset) {}

/**
 * Returns an error number for the server (last request) identified by
 * id.
 * 
 * yaz_errno should be called after network activity for each server -
 * (after yaz_wait returns) to determine the success or failure of the
 * last operation (e.g. search).
 *
 * @param resource
 * @return int
 **/
function yaz_errno($id) {}

/**
 * yaz_error returns an English text message corresponding to the last
 * error number as returned by yaz_errno.
 *
 * @param resource
 * @return string
 **/
function yaz_error($id) {}

/**
 * This function prepares for an Extended Service Request. Extended
 * Services is family of various Z39.50 facilities, such as Record
 * Update, Item Order, Database administration etc.
 * 
 * The yaz_es creates an Extended Service Request packages and puts it
 * into a queue of operations. Use yaz_wait to send the request(s) to the
 * server. After completion of yaz_wait the result of the Extended
 * Service operation should be expected with a call to yaz_es_result.
 *
 * @param resource
 * @param string
 * @param array
 * @return void
 **/
function yaz_es($id, $type, $args) {}

/**
 * This function inspects the last returned Extended Service result from
 * a server. An Extended Service is initiated by either yaz_item_order or
 * yaz_es.
 *
 * @param resource
 * @return array
 **/
function yaz_es_result($id) {}

/**
 * Returns the value of the option specified with name.
 *
 * @param resource
 * @param string
 * @return string
 **/
function yaz_get_option($id, $name) {}

/**
 * yaz_hits returns the number of hits for the last search.
 *
 * @param resource
 * @param array
 * @return int
 **/
function yaz_hits($id, &$searchresult) {}

/**
 * This function prepares for an Extended Services request using the
 * Profile for the Use of Z39.50 Item Order Extended Service to Transport
 * ILL (Profile/1). See this and the specification.
 *
 * @param resource
 * @param array
 * @return void
 **/
function yaz_itemorder($id, $args) {}

/**
 * This function prepares for retrieval of records after a successful
 * search.
 * 
 * The yaz_range function should be called prior to this function to
 * specify the range of records to be retrieved.
 *
 * @param resource
 * @return bool
 **/
function yaz_present($id) {}

/**
 * Specifies a range of records to retrieve.
 * 
 * This function should be called before yaz_search or yaz_present.
 *
 * @param resource
 * @param int
 * @param int
 * @return void
 **/
function yaz_range($id, $start, $number) {}

/**
 * The yaz_record function inspects a record in the current result set at
 * the position specified by parameter pos.
 *
 * @param resource
 * @param int
 * @param string
 * @return string
 **/
function yaz_record($id, $pos, $type) {}

/**
 * This function prepares for a Z39.50 Scan Request on the specified
 * connection.
 * 
 * To actually transfer the Scan Request to the server and receive the
 * Scan Response, yaz_wait must be called. Upon completion of yaz_wait
 * call yaz_error and yaz_scan_result to handle the response.
 *
 * @param resource
 * @param string
 * @param string
 * @param array
 * @return void
 **/
function yaz_scan($id, $type, $startterm, $flags) {}

/**
 * yaz_scan_result returns terms and associated information as received
 * from the server in the last performed yaz_scan.
 *
 * @param resource
 * @param array
 * @return array
 **/
function yaz_scan_result($id, &$result) {}

/**
 * yaz_schema specifies the schema for retrieval.
 * 
 * This function should be called before yaz_search or yaz_present.
 *
 * @param resource
 * @param string
 * @return void
 **/
function yaz_schema($id, $schema) {}

/**
 * yaz_search prepares for a search on the given connection.
 * 
 * Like yaz_connect this function is non-blocking and only prepares for a
 * search to be executed later when yaz_wait is called.
 *
 * @param resource
 * @param string
 * @param string
 * @return bool
 **/
function yaz_search($id, $type, $query) {}

/**
 * Sets one or more options on the given connection.
 *
 * @param resource
 * @param string
 * @param string
 * @return void
 **/
function yaz_set_option($id, $name, $value) {}

/**
 * This function sets sorting criteria and enables Z39.50 Sort.
 * 
 * Call this function before yaz_search. Using this function alone does
 * not have any effect. When used in conjunction with yaz_search, a
 * Z39.50 Sort will be sent after a search response has been received and
 * before any records are retrieved with Z39.50 Present (yaz_present.
 *
 * @param resource
 * @param string
 * @return void
 **/
function yaz_sort($id, $criteria) {}

/**
 * yaz_syntax specifies the preferred record syntax for retrieval
 * 
 * This function should be called before yaz_search or yaz_present.
 *
 * @param resource
 * @param string
 * @return void
 **/
function yaz_syntax($id, $syntax) {}

/**
 * This function carries out networked (blocked) activity for outstanding
 * requests which have been prepared by the functions yaz_connect,
 * yaz_search, yaz_present, yaz_scan and yaz_itemorder.
 * 
 * yaz_wait returns when all servers have either completed all requests
 * or aborted (in case of errors).
 *
 * @param array
 * @return mixed
 **/
function yaz_wait(&$options) {}

/**
 * @param string
 * @param string
 * @param string
 * @return void
 **/
function yp_all($domain, $map, $callback) {}

/**
 * Returns all map entries.
 *
 * @param string
 * @param string
 * @return array
 **/
function yp_cat($domain, $map) {}

/**
 * Returns the error code of the previous operation.
 *
 * @return int
 **/
function yp_errno() {}

/**
 * Returns the error message associated with the given error code. Useful
 * to indicate what exactly went wrong.
 *
 * @param int
 * @return string
 **/
function yp_err_string($errorcode) {}

/**
 * Gets the first key-value pair from the named map in the named domain.
 *
 * @param string
 * @param string
 * @return array
 **/
function yp_first($domain, $map) {}

/**
 * Returns the default domain of the node. Can be used as the domain
 * parameter for successive NIS calls.
 * 
 * A NIS domain can be described a group of NIS maps. Every host that
 * needs to look up information binds itself to a certain domain. Refer
 * to the documents mentioned at the beginning for more detailed
 * information.
 *
 * @return string
 **/
function yp_get_default_domain() {}

/**
 * Returns the machine name of the master NIS server for a map.
 *
 * @param string
 * @param string
 * @return string
 **/
function yp_master($domain, $map) {}

/**
 * Returns the value associated with the passed key out of the specified
 * map.
 *
 * @param string
 * @param string
 * @param string
 * @return string
 **/
function yp_match($domain, $map, $key) {}

/**
 * Returns the next key-value pair in the named map after the specified
 * key.
 *
 * @param string
 * @param string
 * @param string
 * @return array
 **/
function yp_next($domain, $map, $key) {}

/**
 * Gets the order number for a map.
 *
 * @param string
 * @param string
 * @return int
 **/
function yp_order($domain, $map) {}

/**
 * This function returns the ID which can be used to display the Zend
 * logo using the built-in image.
 *
 * @return string
 **/
function zend_logo_guid() {}

/**
 * This function returns a unique identifier for the current thread.
 *
 * @return int
 **/
function zend_thread_id() {}

/**
 * Returns a string containing the version of the currently running Zend
 * Engine.
 *
 * @return string
 **/
function zend_version() {}

/**
 * Closes the given ZIP file archive.
 *
 * @param resource
 * @return void
 **/
function zip_close($zip) {}

/**
 * Closes the specified directory entry.
 *
 * @param resource
 * @return bool
 **/
function zip_entry_close($zip_entry) {}

/**
 * Returns the compressed size of the specified directory entry.
 *
 * @param resource
 * @return int
 **/
function zip_entry_compressedsize($zip_entry) {}

/**
 * Returns the compression method of the directory entry specified by
 * zip_entry.
 *
 * @param resource
 * @return string
 **/
function zip_entry_compressionmethod($zip_entry) {}

/**
 * Returns the actual size of the specified directory entry.
 *
 * @param resource
 * @return int
 **/
function zip_entry_filesize($zip_entry) {}

/**
 * Returns the name of the specified directory entry.
 *
 * @param resource
 * @return string
 **/
function zip_entry_name($zip_entry) {}

/**
 * Opens a directory entry in a zip file for reading.
 *
 * @param resource
 * @param resource
 * @param string
 * @return bool
 **/
function zip_entry_open($zip, $zip_entry, $mode) {}

/**
 * Reads from an open directory entry.
 *
 * @param resource
 * @param int
 * @return string
 **/
function zip_entry_read($zip_entry, $length) {}

/**
 * Opens a new zip archive for reading.
 *
 * @param string
 * @return mixed
 **/
function zip_open($filename) {}

/**
 * Reads the next entry in a zip file archive.
 *
 * @param resource
 * @return mixed
 **/
function zip_read($zip) {}

/**
 * Returns the coding type used for output compression.
 *
 * @return string
 **/
function zlib_get_coding_type() {}

class GlobIterator extends FilesystemIterator implements Iterator, Traversable, SeekableIterator, Countable {
    /**
     * Gets the number of directories and files found by the glob expression.
     *
     * @return integer
     **/
    function count() {}

    /**
     * Constructs a new directory iterator from a glob expression.
     *
     * @param string
     * @param integer
     **/
    function __construct($path, $flags) {}

}
class Gmagick {
    const COLOR_ALPHA = 0;
    const COLOR_BLACK = 0;
    const COLOR_BLUE = 0;
    const COLOR_CYAN = 0;
    const COLOR_FUZZ = 0;
    const COLOR_GREEN = 0;
    const COLOR_MAGENTA = 0;
    const COLOR_OPACITY = 0;
    const COLOR_RED = 0;
    const COLOR_YELLOW = 0;
    /**
     * Adds new image to Gmagick object from the current position of the
     * source object. After the operation iterator position is moved at the
     * end of the list.
     *
     * @param Gmagick
     * @return void
     **/
    function addimage($Gmagick) {}

    /**
     * Adds random noise to the image.
     *
     * @param int
     * @return void
     **/
    function addnoiseimage($NOISE) {}

    /**
     * Annotates an image with text.
     *
     * @param GmagickDraw
     * @param int
     * @param int
     * @param float
     * @param string
     * @return void
     **/
    function annotateimage($GmagickDraw, $x, $y, $angle, $text) {}

    /**
     * Adds blur filter to image.
     *
     * @param float
     * @param float
     * @return void
     **/
    function blurimage($radius, $sigma) {}

    /**
     * Surrounds the image with a border of the color defined by the
     * bordercolor GmagickPixel object or a color string.
     *
     * @param GmagickPixel
     * @param int
     * @param int
     * @return void
     **/
    function borderimage($color, $width, $height) {}

    /**
     * Simulates a charcoal drawing.
     *
     * @param float
     * @param float
     * @return void
     **/
    function charcoalimage($radius, $sigma) {}

    /**
     * Removes a region of an image and collapses the image to occupy the
     * removed portion.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function chopimage($width, $height, $x, $y) {}

    /**
     * Clears all resources associated to Gmagick object
     *
     * @return void
     **/
    function clear() {}

    /**
     * Adds a comment to your image.
     *
     * @param string
     * @return void
     **/
    function commentimage($comment) {}

    /**
     * Composite one image onto another at the specified offset.
     *
     * @param Gmagick
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function compositeimage($source, $COMPOSE, $x, $y) {}

    /**
     * Extracts a region of the image.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function cropimage($width, $height, $x, $y) {}

    /**
     * Creates a fixed size thumbnail by first scaling the image down and
     * cropping a specified area from the center.
     *
     * @param int
     * @param int
     * @return void
     **/
    function cropthumbnailimage($width, $height) {}

    /**
     * Returns reference to the current gmagick object with image pointer at
     * the correct sequence.
     *
     * @return void
     **/
    function current() {}

    /**
     * Displaces an image's colormap by a given number of positions. If you
     * cycle the colormap a number of times you can produce a psychedelic
     * effect.
     *
     * @param float
     * @return void
     **/
    function cyclecolormapimage($displace) {}

    /**
     * Compares each image with the next in a sequence and returns the
     * maximum bounding region of any pixel differences it discovers.
     *
     * @return void
     **/
    function deconstructimages() {}

    /**
     * Reduces the speckle noise in an image while preserving the edges of
     * the original image.
     *
     * @return void
     **/
    function despeckleimage() {}

    /**
     * Destroys the Gmagick object and frees all resources associated with it
     *
     * @return void
     **/
    function destroy() {}

    /**
     * Renders the GmagickDraw object on the current image
     *
     * @param GmagickDraw
     * @return void
     **/
    function drawimage($GmagickDraw) {}

    /**
     * Enhance edges within the image with a convolution filter of the given
     * radius. Use radius 0 and it will be auto-selected.
     *
     * @param float
     * @return void
     **/
    function edgeimage($radius) {}

    /**
     * Returns a grayscale image with a three-dimensional effect. We convolve
     * the image with a Gaussian operator of the given radius and standard
     * deviation (sigma). For reasonable results, radius should be larger
     * than sigma. Use a radius of 0 and it will choose a suitable radius for
     * you.
     *
     * @param float
     * @param float
     * @return void
     **/
    function embossimage($radius, $sigma) {}

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     *
     * @return void
     **/
    function enhanceimage() {}

    /**
     * Equalizes the image histogram.
     *
     * @return void
     **/
    function equalizeimage() {}

    /**
     * Creates a vertical mirror image by reflecting the pixels around the
     * central x-axis.
     *
     * @return void
     **/
    function flipimage() {}

    /**
     * Creates a horizontal mirror image by reflecting the pixels around the
     * central y-axis.
     *
     * @return void
     **/
    function flopimage() {}

    /**
     * Adds a simulated three-dimensional border around the image. The width
     * and height specify the border width of the vertical and horizontal
     * sides of the frame. The inner and outer bevels indicate the width of
     * the inner and outer shadows of the frame.
     *
     * @param GmagickPixel
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function frameimage($color, $width, $height, $inner_bevel, $outer_bevel) {}

    /**
     * Gamma-corrects an image. The same image viewed on different devices
     * will have perceptual differences in the way the image's intensities
     * are represented on the screen. Specify individual gamma levels for the
     * red, green, and blue channels, or adjust all three with the gamma
     * parameter. Values typically range from 0.8 to 2.3.
     *
     * @param float
     * @return void
     **/
    function gammaimage($gamma) {}

    /**
     * Returns the GraphicsMagick API copyright as a string.
     *
     * @return void
     **/
    function getcopyright() {}

    /**
     * Returns the filename associated with an image sequence.
     *
     * @return void
     **/
    function getfilename() {}

    /**
     * Returns the image background color.
     *
     * @return void
     **/
    function getimagebackgroundcolor() {}

    /**
     * Returns the chromaticity blue primary point for the image.
     *
     * @return void
     **/
    function getimageblueprimary() {}

    /**
     * Returns the image border color.
     *
     * @return void
     **/
    function getimagebordercolor() {}

    /**
     * Gets the depth for a particular image channel.
     *
     * @return void
     **/
    function getimagechanneldepth() {}

    /**
     * Returns the color of the specified colormap index.
     *
     * @return void
     **/
    function getimagecolors() {}

    /**
     * Gets the image colorspace.
     *
     * @return void
     **/
    function getimagecolorspace() {}

    /**
     * Returns the composite operator associated with the image.
     *
     * @return void
     **/
    function getimagecompose() {}

    /**
     * Gets the image delay
     *
     * @return void
     **/
    function getimagedelay() {}

    /**
     * Gets the depth of the image.
     *
     * @return void
     **/
    function getimagedepth() {}

    /**
     * Gets the image disposal method
     *
     * @return void
     **/
    function getimagedispose() {}

    /**
     * Returns an associative array with the keys "min" and "max".
     *
     * @return void
     **/
    function getimageextrema() {}

    /**
     * Returns the filename of a particular image in a sequence
     *
     * @return void
     **/
    function getimagefilename() {}

    /**
     * Returns the format of a particular image in a sequence.
     *
     * @return void
     **/
    function getimageformat() {}

    /**
     * Gets the image gamma
     *
     * @return void
     **/
    function getimagegamma() {}

    /**
     * Returns the chromaticity green primary point. Returns an array with
     * the keys "x" and "y".
     *
     * @return void
     **/
    function getimagegreenprimary() {}

    /**
     * Returns the image height
     *
     * @return void
     **/
    function getimageheight() {}

    /**
     * Returns the image histogram as an array of GmagickPixel objects. Throw
     * an GmagickException on error.
     *
     * @return void
     **/
    function getimagehistogram() {}

    /**
     * Returns the index of the current active image within the Gmagick
     * object.
     *
     * @return void
     **/
    function getimageindex() {}

    /**
     * Gets the image interlace scheme.
     *
     * @return void
     **/
    function getimageinterlacescheme() {}

    /**
     * Gets the image iterations.
     *
     * @return void
     **/
    function getimageiterations() {}

    /**
     * Returns TRUE if the image has a matte channel otherwise false.
     *
     * @return void
     **/
    function getimagematte() {}

    /**
     * Returns GmagickPixel object on success. Throw an GmagickException on
     * error.
     *
     * @return void
     **/
    function getimagemattecolor() {}

    /**
     * Returns the named image profile.
     *
     * @return void
     **/
    function getimageprofile() {}

    /**
     * Returns the chromaticity red primary point as an array with the keys
     * "x" and "y".
     *
     * @return void
     **/
    function getimageredprimary() {}

    /**
     * Gets the image rendering intent
     *
     * @return void
     **/
    function getimagerenderingintent() {}

    /**
     * Returns the resolution as an array.
     *
     * @return void
     **/
    function getimageresolution() {}

    /**
     * Gets the image scene.
     *
     * @return void
     **/
    function getimagescene() {}

    /**
     * Generates an SHA-256 message digest for the image pixel stream.
     *
     * @return void
     **/
    function getimagesignature() {}

    /**
     * Gets the potential image type.
     *
     * @return void
     **/
    function getimagetype() {}

    /**
     * Gets the image units of resolution.
     *
     * @return void
     **/
    function getimageunits() {}

    /**
     * Returns the chromaticity white point as an associative array with the
     * keys "x" and "y".
     *
     * @return void
     **/
    function getimagewhitepoint() {}

    /**
     * Returns the width of the image.
     *
     * @return void
     **/
    function getimagewidth() {}

    /**
     * Returns the GraphicsMagick package name.
     *
     * @return void
     **/
    function getpackagename() {}

    /**
     * Returns the Gmagick quantum depth as a string.
     *
     * @return void
     **/
    function getquantumdepth() {}

    /**
     * Returns the GraphicsMagick release date as a string.
     *
     * @return void
     **/
    function getreleasedate() {}

    /**
     * Gets the horizontal and vertical sampling factor.
     *
     * @return void
     **/
    function getsamplingfactors() {}

    /**
     * Returns the size associated with the Gmagick object as an array with
     * the keys "columns" and "rows".
     *
     * @return void
     **/
    function getsize() {}

    /**
     * Returns the GraphicsMagick API version as a string and as a number.
     *
     * @return void
     **/
    function getversion() {}

    /**
     * Returns TRUE if the object has more images when traversing the list in
     * the forward direction.
     *
     * @return void
     **/
    function hasnextimage() {}

    /**
     * Returns TRUE if the object has more images when traversing the list in
     * the reverse direction
     *
     * @return void
     **/
    function haspreviousimage() {}

    /**
     * Creates a new image that is a copy of an existing one with the image
     * pixels "imploded" by the specified percentage.
     *
     * @param float
     * @return void
     **/
    function implodeimage($radius) {}

    /**
     * Adds a label to an image.
     *
     * @param string
     * @return void
     **/
    function labelimage($label) {}

    /**
     * Adjusts the levels of an image by scaling the colors falling between
     * specified white and black points to the full available quantum range.
     * The parameters provided represent the black, mid, and white points.
     * The black point specifies the darkest color in the image. Colors
     * darker than the black point are set to zero. Mid point specifies a
     * gamma correction to apply to the image. White point specifies the
     * lightest color in the image. Colors brighter than the white point are
     * set to the maximum quantum value.
     *
     * @param float
     * @param float
     * @param float
     * @param int
     * @return void
     **/
    function levelimage($blackPoint, $gamma, $whitePoint, $channel) {}

    /**
     * Conveniently scales an image proportionally to twice its original
     * size.
     *
     * @return void
     **/
    function magnifyimage() {}

    /**
     * Replaces the colors of an image with the closest color from a
     * reference image.
     *
     * @param gmagick
     * @param int
     * @return void
     **/
    function mapimage($gmagick, $dither) {}

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     * Each pixel is replaced by the median in a set of neighboring pixels as
     * defined by radius.
     *
     * @param float
     * @return void
     **/
    function medianfilterimage($radius) {}

    /**
     * A convenient method that scales an image proportionally to one-half
     * its original size
     *
     * @return void
     **/
    function minifyimage() {}

    /**
     * Lets you control the brightness, saturation, and hue of an image. Hue
     * is the percentage of absolute rotation from the current position. For
     * example 50 results in a counter-clockwise rotation of 90 degrees, 150
     * results in a clockwise rotation of 90 degrees, with 0 and 200 both
     * resulting in a rotation of 180 degrees.
     *
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function modulateimage($brightness, $saturation, $hue) {}

    /**
     * Simulates motion blur. We convolve the image with a Gaussian operator
     * of the given radius and standard deviation (sigma). For reasonable
     * results, radius should be larger than sigma. Use a radius of 0 and
     * MotionBlurImage() selects a suitable radius for you. Angle gives the
     * angle of the blurring motion.
     *
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function motionblurimage($radius, $sigma, $angle) {}

    /**
     * Creates a new image with the specified background color
     *
     * @param int
     * @param int
     * @param mixed
     * @param string
     * @return void
     **/
    function newimage($width, $height, $background, $format) {}

    /**
     * Associates the next image in the image list with an Gmagick object.
     *
     * @return void
     **/
    function nextimage() {}

    /**
     * Enhances the contrast of a color image by adjusting the pixels color
     * to span the entire range of colors available.
     *
     * @param int
     * @return void
     **/
    function normalizeimage($channel) {}

    /**
     * Applies a special effect filter that simulates an oil painting. Each
     * pixel is replaced by the most frequent color occurring in a circular
     * region defined by radius.
     *
     * @param float
     * @return void
     **/
    function oilpaintimage($radius) {}

    /**
     * Assocates the previous image in an image list with the Gmagick object.
     *
     * @return void
     **/
    function previousimage() {}

    /**
     * Adds or removes a ICC, IPTC, or generic profile from an image. If the
     * profile is NULL, it is removed from the image otherwise added. Use a
     * name of '*' and a profile of NULL to remove all profiles from the
     * image.
     *
     * @param string
     * @param string
     * @return void
     **/
    function profileimage($name, $profile) {}

    /**
     * Analyzes the colors within a reference image and chooses a fixed
     * number of colors to represent the image. The goal of the algorithm is
     * to minimize the color difference between the input and output image
     * while minimizing the processing time.
     *
     * @param int
     * @param int
     * @param int
     * @param bool
     * @param bool
     * @return void
     **/
    function quantizeimage($numColors, $colorspace, $treeDepth, $dither, $measureError) {}

    /**
     * Analyzes the colors within a sequence of images and chooses a fixed
     * number of colors to represent the image. The goal of the algorithm is
     * to minimize the color difference between the input and output image
     * while minimizing the processing time.
     *
     * @param int
     * @param int
     * @param int
     * @param bool
     * @param bool
     * @return void
     **/
    function quantizeimages($numColors, $colorspace, $treeDepth, $dither, $measureError) {}

    /**
     * MagickQueryFontMetrics() returns an array representing the font
     * metrics.
     *
     * @return void
     **/
    function queryfontmetrics() {}

    /**
     * Returns fonts supported by Gmagick.
     *
     * @return void
     **/
    function queryfonts() {}

    /**
     * Returns formats supported by Gmagick.
     *
     * @param string
     * @return void
     **/
    function queryformats($pattern) {}

    /**
     * Radial blurs an image.
     *
     * @param float
     * @param int
     * @return void
     **/
    function radialblurimage($angle, $channel) {}

    /**
     * Creates a simulated three-dimensional button-like effect by lightening
     * and darkening the edges of the image. Members width and height of
     * raise_info define the width of the vertical and horizontal edge of the
     * effect.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @param bool
     * @return void
     **/
    function raiseimage($width, $height, $x, $y, $raise) {}

    /**
     * Reads image from filename.
     *
     * @param string
     * @return void
     **/
    function read($filename) {}

    /**
     * Reads image from filename.
     *
     * @param string
     * @return void
     **/
    function readimage($filename) {}

    /**
     * Reads image from a binary string.
     *
     * @param string
     * @param string
     * @return void
     **/
    function readimageblob($imageContents, $filename) {}

    /**
     * Reads an image or image sequence from an open file descriptor.
     *
     * @param string
     * @return void
     **/
    function readimagefile($fp) {}

    /**
     * Smooths the contours of an image while still preserving edge
     * information. The algorithm works by replacing each pixel with its
     * neighbor closest in value. A neighbor is defined by radius. Use a
     * radius of 0 and Gmagick::reduceNoiseImage() selects a suitable radius
     * for you.
     *
     * @param float
     * @return void
     **/
    function reducenoiseimage($radius) {}

    /**
     * Removes an image from the image list.
     *
     * @return void
     **/
    function removeimage() {}

    /**
     * Removes the named image profile and returns it.
     *
     * @param string
     * @return void
     **/
    function removeimageprofile($name) {}

    /**
     * Resample image to desired resolution.
     *
     * @param float
     * @param float
     * @param int
     * @param float
     * @return void
     **/
    function resampleimage($xResolution, $yResolution, $filter, $blur) {}

    /**
     * Scales an image to the desired dimensions with a filter.
     *
     * @param int
     * @param int
     * @param int
     * @param float
     * @param bool
     * @return void
     **/
    function resizeimage($width, $height, $filter, $blur, $fit) {}

    /**
     * Offsets an image as defined by x and y.
     *
     * @param int
     * @param int
     * @return void
     **/
    function rollimage($x, $y) {}

    /**
     * Rotates an image the specified number of degrees. Empty triangles left
     * over from rotating the image are filled with the background color.
     *
     * @param mixed
     * @param float
     * @return void
     **/
    function rotateimage($color, $degrees) {}

    /**
     * Scales the size of an image to the given dimensions. The other
     * parameter will be calculated if 0 is passed as either param.
     *
     * @param int
     * @param int
     * @return void
     **/
    function scaleimage($width, $height) {}

    /**
     * Separates a channel from the image and returns a grayscale image. A
     * channel is a particular color component of each pixel in the image.
     *
     * @param int
     * @return void
     **/
    function separateimagechannel($channel) {}

    /**
     * Sets the filename before you read or write an image file.
     *
     * @param string
     * @return void
     **/
    function setfilename($filename) {}

    /**
     * Sets the image background color.
     *
     * @param GmagickPixel
     * @return void
     **/
    function setimagebackgroundcolor($color) {}

    /**
     * Sets the image chromaticity blue primary point.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setimageblueprimary($x, $y) {}

    /**
     * Sets the image border color.
     *
     * @param GmagickPixel
     * @return void
     **/
    function setimagebordercolor($color) {}

    /**
     * Sets the depth of a particular image channel.
     *
     * @param int
     * @param int
     * @return void
     **/
    function setimagechanneldepth($channel, $depth) {}

    /**
     * Sets the image colorspace.
     *
     * @param int
     * @return void
     **/
    function setimagecolorspace($colorspace) {}

    /**
     * Sets the image composite operator.
     *
     * @param int
     * @return void
     **/
    function setimagecompose($composite) {}

    /**
     * Sets the image delay
     *
     * @param int
     * @return void
     **/
    function setimagedelay($delay) {}

    /**
     * Sets the image depth
     *
     * @param float
     * @return void
     **/
    function setimagedepth($depth) {}

    /**
     * Sets the image disposal method.
     *
     * @param int
     * @return void
     **/
    function setimagedispose($disposeType) {}

    /**
     * Sets the filename of a particular image in a sequence.
     *
     * @param string
     * @return void
     **/
    function setimagefilename($filename) {}

    /**
     * Sets the format of a particular image in a sequence.
     *
     * @param string
     * @return void
     **/
    function setimageformat($imageFormat) {}

    /**
     * Sets the image gamma.
     *
     * @param float
     * @return void
     **/
    function setimagegamma($gamma) {}

    /**
     * Sets the image chromaticity green primary point.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setimagegreenprimary($x, $y) {}

    /**
     * Set the iterator to the position in the image list specified with the
     * index parameter.
     *
     * @param int
     * @return void
     **/
    function setimageindex($index) {}

    /**
     * Sets the interlace scheme of the image.
     *
     * @param int
     * @return void
     **/
    function setimageinterlacescheme($interlace) {}

    /**
     * Sets the image iterations.
     *
     * @param int
     * @return void
     **/
    function setimageiterations($iterations) {}

    /**
     * Adds a named profile to the Gmagick object. If a profile with the same
     * name already exists, it is replaced. This method differs from the
     * Gmagick::ProfileImage() method in that it does not apply any CMS color
     * profiles.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setimageprofile($name, $profile) {}

    /**
     * Sets the image chromaticity red primary point.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setimageredprimary($x, $y) {}

    /**
     * Sets the image rendering intent.
     *
     * @param int
     * @return void
     **/
    function setimagerenderingintent($rendering_intent) {}

    /**
     * Sets the image resolution.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setimageresolution($xResolution, $yResolution) {}

    /**
     * Sets the image scene.
     *
     * @param string
     * @return void
     **/
    function setimagescene($scene) {}

    /**
     * Sets the image type.
     *
     * @param string
     * @return void
     **/
    function setimagetype($imgType) {}

    /**
     * Sets the image units of resolution.
     *
     * @param int
     * @return void
     **/
    function setimageunits($resolution) {}

    /**
     * Sets the image chromaticity white point.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setimagewhitepoint($x, $y) {}

    /**
     * Sets the image sampling factors.
     *
     * @param array
     * @return void
     **/
    function setsamplingfactors($factors) {}

    /**
     * Sets the size of the Gmagick object. Set it before you read a raw
     * image format such as RGB, GRAY, or CMYK.
     *
     * @param int
     * @param int
     * @return void
     **/
    function setsize($columns, $rows) {}

    /**
     * Slides one edge of an image along the X or Y axis, creating a
     * parallelogram. An X direction shear slides an edge along the X axis,
     * while a Y direction shear slides an edge along the Y axis. The amount
     * of the shear is controlled by a shear angle. For X direction shears,
     * x_shear is measured relative to the Y axis, and similarly, for Y
     * direction shears y_shear is measured relative to the X axis. Empty
     * triangles left over from shearing the image are filled with the
     * background color.
     *
     * @param mixed
     * @param float
     * @param float
     * @return void
     **/
    function shearimage($color, $xShear, $yShear) {}

    /**
     * Applies a special effect to the image, similar to the effect achieved
     * in a photo darkroom by selectively exposing areas of photo sensitive
     * paper to light. Threshold ranges from 0 to QuantumRange and is a
     * measure of the extent of the solarization.
     *
     * @param float
     * @return void
     **/
    function solarizeimage($threshold) {}

    /**
     * Special effects method that randomly displaces each pixel in a block
     * defined by the radius parameter.
     *
     * @param float
     * @return void
     **/
    function spreadimage($radius) {}

    /**
     * Strips an image of all profiles and comments.
     *
     * @return void
     **/
    function stripimage() {}

    /**
     * Swirls the pixels about the center of the image, where degrees
     * indicates the sweep of the arc through which each pixel is moved. You
     * get a more dramatic effect as the degrees move from 1 to 360.
     *
     * @param float
     * @return void
     **/
    function swirlimage($degrees) {}

    /**
     * Changes the size of an image to the given dimensions and removes any
     * associated profiles. The goal is to produce small low cost thumbnail
     * images suited for display on the Web. If TRUE is given as a third
     * parameter then columns and rows parameters are used as maximums for
     * each side. Both sides will be scaled down until the match or are
     * smaller than the parameter given for the side.
     *
     * @param int
     * @param int
     * @return void
     **/
    function thumbnailimage($width, $height) {}

    /**
     * Remove edges that are the background color from the image.
     *
     * @param float
     * @return void
     **/
    function trimimage($fuzz) {}

    /**
     * Writes an image to the specified filename. If the filename parameter
     * is NULL, the image is written to the filename set by
     * Gmagick::ReadImage() or Gmagick::SetImageFilename().
     *
     * @param string
     * @return void
     **/
    function write($filename) {}

    /**
     * Writes an image to the specified filename. If the filename parameter
     * is NULL, the image is written to the filename set by
     * Gmagick::ReadImage() or Gmagick::SetImageFilename().
     *
     * @param string
     * @return void
     **/
    function writeimage($filename) {}

    /**
     * The Gmagick constructor.
     *
     * @param string
     **/
    function __construct($filename) {}

}
class GmagickDraw {
    /**
     * Draws text on the image.
     *
     * @param float
     * @param float
     * @param string
     * @return void
     **/
    function annotate($x, $y, $text) {}

    /**
     * Draws an arc falling within a specified bounding rectangle on the
     * image.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function arc($sx, $sy, $ex, $ey, $sd, $ed) {}

    /**
     * Draws a bezier curve through a set of points on the image.
     *
     * @param array
     * @return void
     **/
    function bezier($coordinate_array) {}

    /**
     * Draws an ellipse on the image.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function ellipse($ox, $oy, $rx, $ry, $start, $end) {}

    /**
     * Returns the fill color used for drawing filled objects.
     *
     * @return void
     **/
    function getfillcolor() {}

    /**
     * Returns the opacity used when drawing
     *
     * @return void
     **/
    function getfillopacity() {}

    /**
     * Returns a string specifying the font used when annotating with text.
     *
     * @return void
     **/
    function getfont() {}

    /**
     * Returns the font pointsize used when annotating with text.
     *
     * @return void
     **/
    function getfontsize() {}

    /**
     * Returns the font style used when annotating with text.
     *
     * @return void
     **/
    function getfontstyle() {}

    /**
     * Returns the font weight used when annotating with text.
     *
     * @return void
     **/
    function getfontweight() {}

    /**
     * Returns the color used for stroking object outlines.
     *
     * @return void
     **/
    function getstrokecolor() {}

    /**
     * Returns the opacity of stroked object outlines.
     *
     * @return void
     **/
    function getstrokeopacity() {}

    /**
     * Returns the width of the stroke used to draw object outlines.
     *
     * @return void
     **/
    function getstrokewidth() {}

    /**
     * Returns the decoration applied when annotating with text.
     *
     * @return void
     **/
    function gettextdecoration() {}

    /**
     * Returns a string which specifies the code set used for text
     * annotations.
     *
     * @return void
     **/
    function gettextencoding() {}

    /**
     * Draws a line on the image using the current stroke color, stroke
     * opacity, and stroke width.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function line($sx, $sy, $ex, $ey) {}

    /**
     * Draws a point using the current stroke color and stroke thickness at
     * the specified coordinates.
     *
     * @param float
     * @param float
     * @return void
     **/
    function point($x, $y) {}

    /**
     * Draws a polygon using the current stroke, stroke width, and fill color
     * or texture, using the specified array of coordinates.
     *
     * @param array
     * @return void
     **/
    function polygon($coordinates) {}

    /**
     * Draws a polyline using the current stroke, stroke width, and fill
     * color or texture, using the specified array of coordinates.
     *
     * @param array
     * @return void
     **/
    function polyline($coordinate_array) {}

    /**
     * Draws a rectangle given two coordinates and using the current stroke,
     * stroke width, and fill settings.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function rectangle($x1, $y1, $x2, $y2) {}

    /**
     * Applies the specified rotation to the current coordinate space.
     *
     * @param float
     * @return void
     **/
    function rotate($degrees) {}

    /**
     * Draws a rounded rectangle given two coordinates, x and y corner
     * radiuses and using the current stroke, stroke width, and fill
     * settings.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function roundrectangle($x1, $y1, $x2, $y2, $rx, $ry) {}

    /**
     * Adjusts the scaling factor to apply in the horizontal and vertical
     * directions to the current coordinate space.
     *
     * @param float
     * @param float
     * @return void
     **/
    function scale($x, $y) {}

    /**
     * Sets the fill color to be used for drawing filled objects.
     *
     * @param string
     * @return void
     **/
    function setfillcolor($color) {}

    /**
     * Sets the opacity to use when drawing using the fill color or fill
     * texture. Setting it to 1.0 will make fill full opaque.
     *
     * @param float
     * @return void
     **/
    function setfillopacity($fill_opacity) {}

    /**
     * Sets the fully-specified font to use when annotating with text
     *
     * @param string
     * @return void
     **/
    function setfont($font) {}

    /**
     * Sets the font pointsize to use when annotating with text.
     *
     * @param float
     * @return void
     **/
    function setfontsize($pointsize) {}

    /**
     * Sets the font style to use when annotating with text. The AnyStyle
     * enumeration acts as a wild-card "don't care" option.
     *
     * @param string
     * @return void
     **/
    function setfontstyle($style) {}

    /**
     * Sets the font weight to use when annotating with text.
     *
     * @param int
     * @return void
     **/
    function setfontweight($weight) {}

    /**
     * Sets the color used for stroking object outlines.
     *
     * @param GmagickPixel
     * @return void
     **/
    function setstrokecolor($color) {}

    /**
     * Specifies the opacity of stroked object outlines.
     *
     * @param float
     * @return void
     **/
    function setstrokeopacity($stroke_opacity) {}

    /**
     * Sets the width of the stroke used to draw object outlines
     *
     * @param float
     * @return void
     **/
    function setstrokewidth($width) {}

    /**
     * Specifies a decoration to be applied when annotating with text.
     *
     * @param int
     * @return void
     **/
    function settextdecoration($decoration) {}

    /**
     * Specifies specifies the code set to use for text annotations. The only
     * character encoding which may be specified at this time is "UTF-8" for
     * representing Unicode as a sequence of bytes. Specify an empty string
     * to set text encoding to the system's default. Successful text
     * annotation using Unicode may require fonts designed to support
     * Unicode.
     *
     * @param string
     * @return void
     **/
    function settextencoding($encoding) {}

}
class GmagickException extends Exception {
}
class GmagickPixel {
    /**
     * Returns the color described by the GmagickPixel object, as an array.
     * If the color has an opacity channel set, this is provided as a fourth
     * value in the list.
     *
     * @param bool
     * @param bool
     * @return void
     **/
    function getcolor($as_array, $normalize_array) {}

    /**
     * Returns the color count associated with this color
     *
     * @param bool
     * @param bool
     * @return void
     **/
    function getcolorcount($as_array, $normalize_array) {}

    /**
     * Retrieves the value of the color channel specified, as a
     * floating-point number between 0 and 1.
     *
     * @param int
     * @return void
     **/
    function getcolorvalue($color) {}

    /**
     * Sets the color described by the GmagickPixel object, with a string
     * (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)",
     * etc.).
     *
     * @param string
     * @return void
     **/
    function setcolor($color) {}

    /**
     * Sets the value of the specified channel of this object to the provided
     * value, which should be between 0 and 1. This function can be used to
     * provide an opacity channel to a GmagickPixel object.
     *
     * @param int
     * @param float
     * @return void
     **/
    function setcolorvalue($color, $value) {}

    /**
     * Constructs an GmagickPixel object. If a color is specified, the object
     * is constructed and then initialised with that color before being
     * returned.
     *
     * @param string
     **/
    function __construct($color) {}

}
class GmagickPixelException extends Exception {
}
class HaruAnnotation {
    /**
     * Defines the style of the border of the annotation. This function may
     * be used with link annotations only.
     *
     * @param float
     * @param int
     * @param int
     * @return bool
     **/
    function setBorderStyle($width, $dash_on, $dash_off) {}

    /**
     * Defines the appearance of the annotation when clicked. This function
     * may be used with link annotations only.
     *
     * @param int
     * @return bool
     **/
    function setHighlightMode($mode) {}

    /**
     * Defines the style of the annotation icon. This function may be used
     * with text annotations only.
     *
     * @param int
     * @return bool
     **/
    function setIcon($icon) {}

    /**
     * Defines whether the annotation is initially displayed open. This
     * function may be used with text annotations only.
     *
     * @param bool
     * @return bool
     **/
    function setOpened($opened) {}

}
class HaruDestination {
    /**
     * Defines the appearance of the page to fit the window.
     *
     * @return bool
     **/
    function setFit() {}

    /**
     * Defines the appearance of the page to fit the bounding box of the page
     * within the window.
     *
     * @return bool
     **/
    function setFitB() {}

    /**
     * Defines the appearance of the page to magnifying to fit the width of
     * the bounding box and setting the top position of the page to the value
     * of top.
     *
     * @param float
     * @return bool
     **/
    function setFitBH($top) {}

    /**
     * Defines the appearance of the page to magnifying to fit the height of
     * the bounding box and setting the left position of the page to the
     * value of left.
     *
     * @param float
     * @return bool
     **/
    function setFitBV($left) {}

    /**
     * Defines the appearance of the page to fit the window width and sets
     * the top position of the page to the value of top.
     *
     * @param float
     * @return bool
     **/
    function setFitH($top) {}

    /**
     * Defines the appearance of the page to fit the rectangle by the
     * parameters.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setFitR($left, $bottom, $right, $top) {}

    /**
     * Defines the appearance of the page to fit the window height.
     *
     * @param float
     * @return bool
     **/
    function setFitV($left) {}

    /**
     * Defines the appearance of the page using three parameters: left, top
     * and zoom.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setXYZ($left, $top, $zoom) {}

}
class HaruDoc {
    /**
     * Adds a new page to the document.
     *
     * @return object
     **/
    function addPage() {}

    /**
     * Set the numbering style for the specified range of pages.
     *
     * @param int
     * @param int
     * @param int
     * @param string
     * @return bool
     **/
    function addPageLabel($first_page, $style, $first_num, $prefix) {}

    /**
     * Create a HaruOutline instance.
     *
     * @param string
     * @param object
     * @param object
     * @return object
     **/
    function createOutline($title, $parent_outline, $encoder) {}

    /**
     * Get the HaruEncoder currently used in the document.
     *
     * @return object
     **/
    function getCurrentEncoder() {}

    /**
     * Get current page of the document.
     *
     * @return object
     **/
    function getCurrentPage() {}

    /**
     * Get the HaruEncoder instance for the specified encoding.
     *
     * @param string
     * @return object
     **/
    function getEncoder($encoding) {}

    /**
     * Get a HaruFont instance.
     *
     * @param string
     * @param string
     * @return object
     **/
    function getFont($fontname, $encoding) {}

    /**
     * Get the current value of the specified document attribute.
     *
     * @param int
     * @return string
     **/
    function getInfoAttr($type) {}

    /**
     * Get the current page layout. See HaruDoc::setPageLayout for the list
     * of possible values.
     *
     * @return int
     **/
    function getPageLayout() {}

    /**
     * Get the current page mode. See HaruDoc::setPageMode for the list of
     * possible values.
     *
     * @return int
     **/
    function getPageMode() {}

    /**
     * Get the size of the temporary stream.
     *
     * @return int
     **/
    function getStreamSize() {}

    /**
     * Creates a new page and inserts just before the specified page.
     *
     * @param object
     * @return object
     **/
    function insertPage($page) {}

    /**
     * Loads the specified JPEG image.
     *
     * @param string
     * @return object
     **/
    function loadJPEG($filename) {}

    /**
     * Loads a PNG image.
     * 
     * Libharu might be built without libpng support, in this case each call
     * to this function would result in exception.
     *
     * @param string
     * @param bool
     * @return object
     **/
    function loadPNG($filename, $deferred) {}

    /**
     * Loads a RAW image.
     *
     * @param string
     * @param int
     * @param int
     * @param int
     * @return object
     **/
    function loadRaw($filename, $width, $height, $color_space) {}

    /**
     * Loads the TrueType font with the specified index from a TrueType
     * collection file.
     *
     * @param string
     * @param int
     * @param bool
     * @return string
     **/
    function loadTTC($fontfile, $index, $embed) {}

    /**
     * Loads the given TTF file and (optionally) embed its data into the
     * document.
     *
     * @param string
     * @param bool
     * @return string
     **/
    function loadTTF($fontfile, $embed) {}

    /**
     * Loads Type1 font from the given file and registers it in the PDF
     * document.
     *
     * @param string
     * @param string
     * @return string
     **/
    function loadType1($afmfile, $pfmfile) {}

    /**
     * Writes the document data into standard output.
     *
     * @return bool
     **/
    function output() {}

    /**
     * Read data from the temporary stream.
     *
     * @param int
     * @return string
     **/
    function readFromStream($bytes) {}

    /**
     * Once an error code is set, most of the operations, including I/O
     * processing functions cannot be performed. In case if you want to
     * continue after the cause of the error has been fixed, you have to
     * invoke this function in order to reset the document error state.
     *
     * @return bool
     **/
    function resetError() {}

    /**
     * Rewinds the temporary stream of the document.
     *
     * @return bool
     **/
    function resetStream() {}

    /**
     * Saves the document into the specified file.
     *
     * @param string
     * @return bool
     **/
    function save($file) {}

    /**
     * Saves the document data into a temporary stream.
     *
     * @return bool
     **/
    function saveToStream() {}

    /**
     * Defines compression mode for the document. In case when libharu was
     * compiled without Zlib support this function will always throw
     * HaruException.
     *
     * @param int
     * @return bool
     **/
    function setCompressionMode($mode) {}

    /**
     * Defines the encoder currently used in the document.
     *
     * @param string
     * @return bool
     **/
    function setCurrentEncoder($encoding) {}

    /**
     * Defines encryption mode for the document. The encryption mode cannot
     * be set before setting the password.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setEncryptionMode($mode, $key_len) {}

    /**
     * Defines an info attribute. Uses the current encoding of the document.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function setInfoAttr($type, $info) {}

    /**
     * Sets the datetime info attributes of the document.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @param int
     * @param int
     * @param int
     * @param string
     * @param int
     * @param int
     * @return bool
     **/
    function setInfoDateAttr($type, $year, $month, $day, $hour, $min, $sec, $ind, $off_hour, $off_min) {}

    /**
     * Defines which page should be shown when the document is opened.
     *
     * @param object
     * @return bool
     **/
    function setOpenAction($destination) {}

    /**
     * Defines how pages should be displayed.
     *
     * @param int
     * @return bool
     **/
    function setPageLayout($layout) {}

    /**
     * Defines how the document should be displayed.
     *
     * @param int
     * @return bool
     **/
    function setPageMode($mode) {}

    /**
     * By default the document has one pages object as a root for all pages.
     * All page objects are create as branches of this object. One pages
     * object can contain only 8191, therefore the maximum number of pages
     * per document is 8191. But you can change that fact by setting
     * page_per_pages parameter, so that the root pages object contains 8191
     * more pages (not page) objects, which in turn contain 8191 pages each.
     * So the maximum number of pages in the document becomes
     * 8191*page_per_pages.
     *
     * @param int
     * @return bool
     **/
    function setPagesConfiguration($page_per_pages) {}

    /**
     * Defines owner and user passwords for the document. Setting the
     * passwords makes the document contents encrypted.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function setPassword($owner_password, $user_password) {}

    /**
     * Defines permissions for the document.
     *
     * @param int
     * @return bool
     **/
    function setPermission($permission) {}

    /**
     * Enables Chinese simplified encodings.
     *
     * @return bool
     **/
    function useCNSEncodings() {}

    /**
     * Enables builtin Chinese simplified fonts.
     *
     * @return bool
     **/
    function useCNSFonts() {}

    /**
     * Enables Chinese traditional encodings.
     *
     * @return bool
     **/
    function useCNTEncodings() {}

    /**
     * Enables builtin Chinese traditional fonts.
     *
     * @return bool
     **/
    function useCNTFonts() {}

    /**
     * Enables Japanese encodings.
     *
     * @return bool
     **/
    function useJPEncodings() {}

    /**
     * Enables builtin Japanese fonts.
     *
     * @return bool
     **/
    function useJPFonts() {}

    /**
     * Enables Korean encodings.
     *
     * @return bool
     **/
    function useKREncodings() {}

    /**
     * Enables builtin Korean fonts.
     *
     * @return bool
     **/
    function useKRFonts() {}

    /**
     * Constructs new HaruDoc instance.
     *
     * @return void
     **/
    function __construct() {}

}
class HaruEncoder {
    /**
     * Get the type of the byte in the text.
     *
     * @param string
     * @param int
     * @return int
     **/
    function getByteType($text, $index) {}

    /**
     * Get the type of the encoder.
     *
     * @return int
     **/
    function getType() {}

    /**
     * Converts the specified character to unicode.
     *
     * @param int
     * @return int
     **/
    function getUnicode($character) {}

    /**
     * Get the writing mode of the encoder.
     *
     * @return int
     **/
    function getWritingMode() {}

}
class HaruException extends Exception {
}
class HaruFont {
    /**
     * Get the vertical ascent of the font.
     *
     * @return int
     **/
    function getAscent() {}

    /**
     * Get the distance from the baseline of uppercase letters.
     *
     * @return int
     **/
    function getCapHeight() {}

    /**
     * Get the vertical descent of the font.
     *
     * @return int
     **/
    function getDescent() {}

    /**
     * Get the name of the font encoding.
     *
     * @return string
     **/
    function getEncodingName() {}

    /**
     * Get the name of the font.
     *
     * @return string
     **/
    function getFontName() {}

    /**
     * Get the total width of the text, number of characters, number of words
     * and number of spaces.
     *
     * @param string
     * @return array
     **/
    function getTextWidth($text) {}

    /**
     * Get the width of the character in the font.
     *
     * @param int
     * @return int
     **/
    function getUnicodeWidth($character) {}

    /**
     * Gets the distance from the baseline of lowercase letters.
     *
     * @return int
     **/
    function getXHeight() {}

    /**
     * Calculate the number of characters which can be included within the
     * specified width.
     *
     * @param string
     * @param float
     * @param float
     * @param float
     * @param float
     * @param bool
     * @return int
     **/
    function measureText($text, $width, $font_size, $char_space, $word_space, $word_wrap) {}

}
class HaruImage {
    /**
     * Gets the number of bits used to describe each color component of the
     * image.
     *
     * @return int
     **/
    function getBitsPerComponent() {}

    /**
     * Get the name of the color space.
     *
     * @return string
     **/
    function getColorSpace() {}

    /**
     * Get the height of the image.
     *
     * @return int
     **/
    function getHeight() {}

    /**
     * Get the size of the image.
     *
     * @return array
     **/
    function getSize() {}

    /**
     * Get the width of the image.
     *
     * @return int
     **/
    function getWidth() {}

    /**
     * Defines the transparent color of the image using the RGB range values.
     * The color within the range is displayed as a transparent color. The
     * color space of the image must be RGB.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function setColorMask($rmin, $rmax, $gmin, $gmax, $bmin, $bmax) {}

    /**
     * Sets the image used as image-mask. It must be 1bit gray-scale color
     * image.
     *
     * @param object
     * @return bool
     **/
    function setMaskImage($mask_image) {}

}
class HaruOutline {
    /**
     * Sets a destination object which becomes a target to jump to when the
     * outline is clicked.
     *
     * @param object
     * @return bool
     **/
    function setDestination($destination) {}

    /**
     * Defines whether this node is opened or not when the outline is
     * displayed for the first time.
     *
     * @param bool
     * @return bool
     **/
    function setOpened($opened) {}

}
class HaruPage {
    /**
     * Appends an arc to the current path.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function arc($x, $y, $ray, $ang1, $ang2) {}

    /**
     * Begins new text object and sets the current text position to (0,0).
     *
     * @return bool
     **/
    function beginText() {}

    /**
     * Appends a circle to the current path.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function circle($x, $y, $ray) {}

    /**
     * Appends a straight line from the current point to the start point of
     * the path.
     *
     * @return bool
     **/
    function closePath() {}

    /**
     * Concatenates current transformation matrix of the page and the
     * specified matrix.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function concat($a, $b, $c, $d, $x, $y) {}

    /**
     * Create a new HaruDestination instance.
     *
     * @return object
     **/
    function createDestination() {}

    /**
     * Creates a new HaruAnnotation instance.
     *
     * @param array
     * @param object
     * @return object
     **/
    function createLinkAnnotation($rectangle, $destination) {}

    /**
     * Creates a new HaruAnnotation instance.
     *
     * @param array
     * @param string
     * @param object
     * @return object
     **/
    function createTextAnnotation($rectangle, $text, $encoder) {}

    /**
     * Creates a new HaruAnnotation instance.
     *
     * @param array
     * @param string
     * @return object
     **/
    function createURLAnnotation($rectangle, $url) {}

    /**
     * Append a Bezier curve to the current path. The point (x1, y1) and the
     * point (x2, y2) are used as the control points for a Bezier curve and
     * current point is moved to the point (x3, y3).
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function curveTo($x1, $y1, $x2, $y2, $x3, $y3) {}

    /**
     * Appends a Bezier curve to the current path. The current point and the
     * point (x2, y2) are used as the control points for the Bezier curve and
     * current point is moved to the point (x3, y3).
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function curveTo2($x2, $y2, $x3, $y3) {}

    /**
     * Appends a Bezier curve to the current path. The point (x1, y1) and the
     * point (x3, y3) are used as the control points for a Bezier curve and
     * current point is moved to the point (x3, y3).
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function curveTo3($x1, $y1, $x3, $y3) {}

    /**
     * Show image at the page.
     *
     * @param object
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function drawImage($image, $x, $y, $width, $height) {}

    /**
     * Appends an ellipse to the current path.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function ellipse($x, $y, $xray, $yray) {}

    /**
     * Ends current path object without performing filling and painting
     * operations.
     *
     * @return bool
     **/
    function endPath() {}

    /**
     * Finalizes current text object.
     *
     * @return bool
     **/
    function endText() {}

    /**
     * Fills current path using even-odd rule.
     *
     * @return bool
     **/
    function eofill() {}

    /**
     * Fills current path using even-odd rule, then paints the path.
     *
     * @param bool
     * @return bool
     **/
    function eoFillStroke($close_path) {}

    /**
     * Fills current path using nonzero winding number rule.
     *
     * @return bool
     **/
    function fill() {}

    /**
     * Fills current path using nonzero winding number rule, then paints the
     * path.
     *
     * @param bool
     * @return bool
     **/
    function fillStroke($close_path) {}

    /**
     * Get the current value of character spacing.
     *
     * @return float
     **/
    function getCharSpace() {}

    /**
     * Returns the current filling color.
     *
     * @return array
     **/
    function getCMYKFill() {}

    /**
     * Get the current stroking color.
     *
     * @return array
     **/
    function getCMYKStroke() {}

    /**
     * Get the currently used font.
     *
     * @return object
     **/
    function getCurrentFont() {}

    /**
     * Get the current font size.
     *
     * @return float
     **/
    function getCurrentFontSize() {}

    /**
     * Get the current position for path painting.
     *
     * @return array
     **/
    function getCurrentPos() {}

    /**
     * Get the current position for text printing.
     *
     * @return array
     **/
    function getCurrentTextPos() {}

    /**
     * Get the current dash pattern. See HaruPage::setDash for more
     * information on dash patterns.
     *
     * @return array
     **/
    function getDash() {}

    /**
     * Get the current filling color space.
     *
     * @return int
     **/
    function getFillingColorSpace() {}

    /**
     * Get the flatness of the page.
     *
     * @return float
     **/
    function getFlatness() {}

    /**
     * Get the current graphics mode.
     *
     * @return int
     **/
    function getGMode() {}

    /**
     * Get the current filling color.
     *
     * @return float
     **/
    function getGrayFill() {}

    /**
     * Get the current stroking color.
     *
     * @return float
     **/
    function getGrayStroke() {}

    /**
     * Get the height of the page.
     *
     * @return float
     **/
    function getHeight() {}

    /**
     * Get the current value of the horizontal scaling.
     *
     * @return float
     **/
    function getHorizontalScaling() {}

    /**
     * Get the current line cap style.
     *
     * @return int
     **/
    function getLineCap() {}

    /**
     * Get the current line join style.
     *
     * @return int
     **/
    function getLineJoin() {}

    /**
     * Get the current line width.
     *
     * @return float
     **/
    function getLineWidth() {}

    /**
     * Get the value of the miter limit.
     *
     * @return float
     **/
    function getMiterLimit() {}

    /**
     * Get the current filling color.
     *
     * @return array
     **/
    function getRGBFill() {}

    /**
     * Get the current stroking color.
     *
     * @return array
     **/
    function getRGBStroke() {}

    /**
     * Get the current stroking color space.
     *
     * @return int
     **/
    function getStrokingColorSpace() {}

    /**
     * Get the current value of line spacing.
     *
     * @return float
     **/
    function getTextLeading() {}

    /**
     * Get the current text transformation matrix of the page.
     *
     * @return array
     **/
    function getTextMatrix() {}

    /**
     * Get the current text rendering mode.
     *
     * @return int
     **/
    function getTextRenderingMode() {}

    /**
     * Get the current value of text rising.
     *
     * @return float
     **/
    function getTextRise() {}

    /**
     * Get the width of the text using current fontsize, character spacing
     * and word spacing
     *
     * @param string
     * @return float
     **/
    function getTextWidth($text) {}

    /**
     * Get the current transformation matrix of the page.
     *
     * @return array
     **/
    function getTransMatrix() {}

    /**
     * Get the width of the page.
     *
     * @return float
     **/
    function getWidth() {}

    /**
     * Get the current value of word spacing.
     *
     * @return float
     **/
    function getWordSpace() {}

    /**
     * Draws a line from the current point to the specified point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function lineTo($x, $y) {}

    /**
     * Get the number of characters which can be included within the
     * specified width.
     *
     * @param string
     * @param float
     * @param bool
     * @return int
     **/
    function measureText($text, $width, $wordwrap) {}

    /**
     * Moves text position to the specified offset. If the start position of
     * the current line is (x1, y1), the start of the next line is (x1 + x,
     * y1 + y).
     *
     * @param float
     * @param float
     * @param bool
     * @return bool
     **/
    function moveTextPos($x, $y, $set_leading) {}

    /**
     * Defines starting point for new drawing path.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function moveTo($x, $y) {}

    /**
     * Moves text position to the start of the next line.
     *
     * @return bool
     **/
    function moveToNextLine() {}

    /**
     * Appends a rectangle to the current drawing path.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function rectangle($x, $y, $width, $height) {}

    /**
     * Defines character spacing for the page.
     *
     * @param float
     * @return bool
     **/
    function setCharSpace($char_space) {}

    /**
     * Defines filling color for the page.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setCMYKFill($c, $m, $y, $k) {}

    /**
     * Defines stroking color for the page.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setCMYKStroke($c, $m, $y, $k) {}

    /**
     * Defines the dash pattern for the page.
     *
     * @param array
     * @param int
     * @return bool
     **/
    function setDash($pattern, $phase) {}

    /**
     * Defines flatness for the page.
     *
     * @param float
     * @return bool
     **/
    function setFlatness($flatness) {}

    /**
     * Defines current font and its size for the page.
     *
     * @param object
     * @param float
     * @return bool
     **/
    function setFontAndSize($font, $size) {}

    /**
     * Defines filling color for the page.
     *
     * @param float
     * @return bool
     **/
    function setGrayFill($value) {}

    /**
     * Defines stroking color for the page.
     *
     * @param float
     * @return bool
     **/
    function setGrayStroke($value) {}

    /**
     * Defines height of the page.
     *
     * @param float
     * @return bool
     **/
    function setHeight($height) {}

    /**
     * Set the horizontal scaling for the page.
     *
     * @param float
     * @return bool
     **/
    function setHorizontalScaling($scaling) {}

    /**
     * Defines the shape to be used at the ends of lines.
     *
     * @param int
     * @return bool
     **/
    function setLineCap($cap) {}

    /**
     * Defines line join style for the page.
     *
     * @param int
     * @return bool
     **/
    function setLineJoin($join) {}

    /**
     * Defines line width for the page.
     *
     * @param float
     * @return bool
     **/
    function setLineWidth($width) {}

    /**
     * Set the current value of the miter limit of the page.
     *
     * @param float
     * @return bool
     **/
    function setMiterLimit($limit) {}

    /**
     * Defines filling color for the page. All values must be between 0 and
     * 1.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setRGBFill($r, $g, $b) {}

    /**
     * Defines stroking color for the page. All values must be between 0 and
     * 1.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setRGBStroke($r, $g, $b) {}

    /**
     * Defines rotation angle of the page.
     *
     * @param int
     * @return bool
     **/
    function setRotate($angle) {}

    /**
     * Changes size and direction of the page to a predefined format.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setSize($size, $direction) {}

    /**
     * Defines transition style for the page.
     *
     * @param int
     * @param float
     * @param float
     * @return bool
     **/
    function setSlideShow($type, $disp_time, $trans_time) {}

    /**
     * Set the text leading (line spacing) for the page.
     *
     * @param float
     * @return bool
     **/
    function setTextLeading($text_leading) {}

    /**
     * Defines the text transformation matrix of the page.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setTextMatrix($a, $b, $c, $d, $x, $y) {}

    /**
     * Defines text rendering mode for the page.
     *
     * @param int
     * @return bool
     **/
    function setTextRenderingMode($mode) {}

    /**
     * Set the current value of text rising.
     *
     * @param float
     * @return bool
     **/
    function setTextRise($rise) {}

    /**
     * Set the width of the page.
     *
     * @param float
     * @return bool
     **/
    function setWidth($width) {}

    /**
     * Set the word spacing for the page.
     *
     * @param float
     * @return bool
     **/
    function setWordSpace($word_space) {}

    /**
     * Prints out the text at the current position of the page.
     *
     * @param string
     * @return bool
     **/
    function showText($text) {}

    /**
     * Moves the current position to the start of the next line and print out
     * the text.
     *
     * @param string
     * @param float
     * @param float
     * @return bool
     **/
    function showTextNextLine($text, $word_space, $char_space) {}

    /**
     * Paints the current path.
     *
     * @param bool
     * @return bool
     **/
    function stroke($close_path) {}

    /**
     * Prints the text on the specified position.
     *
     * @param float
     * @param float
     * @param string
     * @return bool
     **/
    function textOut($x, $y, $text) {}

    /**
     * Prints the text inside the specified region.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param string
     * @param int
     * @return bool
     **/
    function textRect($left, $top, $right, $bottom, $text, $align) {}

}
class HttpDeflateStream {
    /**
     * Creates a new HttpDeflateStream object instance.
     * 
     * See the deflate stream constants table for possible flags.
     *
     * @param int
     * @param string
     * @return HttpDeflateStream
     **/
    function factory($flags, $class_name) {}

    /**
     * Finalizes the deflate stream. The deflate stream can be reused after
     * finalizing.
     *
     * @param string
     * @return string
     **/
    function finish($data) {}

    /**
     * Flushes the deflate stream.
     *
     * @param string
     * @return string
     **/
    function flush($data) {}

    /**
     * Passes more data through the deflate stream.
     *
     * @param string
     * @return string
     **/
    function update($data) {}

    /**
     * Creates a new HttpDeflateStream object instance.
     * 
     * See the deflate stream constants table for possible flags.
     *
     * @param int
     * @return void
     **/
    function __construct($flags) {}

}
class HttpInflateStream {
    /**
     * Creates a new HttpInflateStream object instance.
     * 
     * See the inflate constants table for possible flags.
     *
     * @param int
     * @param string
     * @return HttpInflateStream
     **/
    function factory($flags, $class_name) {}

    /**
     * Finalizes the inflate stream. The inflate stream can be reused after
     * finalizing.
     *
     * @param string
     * @return string
     **/
    function finish($data) {}

    /**
     * Flushes the inflate stream.
     *
     * @param string
     * @return string
     **/
    function flush($data) {}

    /**
     * Passes more data through the inflate stream.
     *
     * @param string
     * @return string
     **/
    function update($data) {}

    /**
     * Creates a new HttpInflateStream object instance.
     * 
     * See the inflate constants table for possible flags.
     *
     * @param int
     * @return void
     **/
    function __construct($flags) {}

}
class HttpMessage implements Iterator, Countable, Serializable {
    /**
     * Add headers. If append is true, headers with the same name will be
     * separated, else overwritten.
     *
     * @param array
     * @param bool
     * @return void
     **/
    function addHeaders($headers, $append) {}

    /**
     * Returns a clone of an HttpMessage object detached from any parent
     * messages.
     *
     * @return HttpMessage
     **/
    function detach() {}

    /**
     * Create an HttpMessage object from a string.
     *
     * @param string
     * @param string
     * @return HttpMessage
     **/
    function factory($raw_message, $class_name) {}

    /**
     * Create an HttpMessage object from script environment.
     *
     * @param int
     * @param string
     * @return HttpMessage
     **/
    function fromEnv($message_type, $class_name) {}

    /**
     * Create an HttpMessage object from a string.
     *
     * @param string
     * @param string
     * @return HttpMessage
     **/
    function fromString($raw_message, $class_name) {}

    /**
     * Get the body of the parsed HttpMessage.
     *
     * @return string
     **/
    function getBody() {}

    /**
     * Get message header.
     *
     * @param string
     * @return string
     **/
    function getHeader($header) {}

    /**
     * Get message headers.
     *
     * @return array
     **/
    function getHeaders() {}

    /**
     * Get the HTTP Protocol Version of the Message.
     *
     * @return string
     **/
    function getHttpVersion() {}

    /**
     * Get parent Message.
     *
     * @return HttpMessage
     **/
    function getParentMessage() {}

    /**
     * Get the Request Method of the Message.
     *
     * @return string
     **/
    function getRequestMethod() {}

    /**
     * Get the Request URL of the Message.
     *
     * @return string
     **/
    function getRequestUrl() {}

    /**
     * Get the Response Code of the Message.
     *
     * @return int
     **/
    function getResponseCode() {}

    /**
     * Get the Response Status of the message (i.e. the string following the
     * response code).
     *
     * @return string
     **/
    function getResponseStatus() {}

    /**
     * Get Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or
     * HTTP_MSG_RESPONSE.
     *
     * @return int
     **/
    function getType() {}

    /**
     * Attempts to guess the content type of the message body through
     * libmagic.
     *
     * @param string
     * @param int
     * @return string
     **/
    function guessContentType($magic_file, $magic_mode) {}

    /**
     * Prepends message(s) to the HTTP message.
     *
     * @param HttpMessage
     * @param bool
     * @return void
     **/
    function prepend($message, $top) {}

    /**
     * Reorders the message chain in reverse order.
     *
     * @return HttpMessage
     **/
    function reverse() {}

    /**
     * Send the Message according to its type as Response or Request.
     * 
     * This provides limited functionality compared to HttpRequest and
     * HttpResponse.
     *
     * @return bool
     **/
    function send() {}

    /**
     * Set the body of the HttpMessage.
     *
     * @param string
     * @return void
     **/
    function setBody($body) {}

    /**
     * Sets new headers.
     *
     * @param array
     * @return void
     **/
    function setHeaders($headers) {}

    /**
     * Set the HTTP Protocol version of the Message.
     *
     * @param string
     * @return bool
     **/
    function setHttpVersion($version) {}

    /**
     * Set the Request Method of the HTTP Message.
     *
     * @param string
     * @return bool
     **/
    function setRequestMethod($method) {}

    /**
     * Set the Request URL of the HTTP Message.
     *
     * @param string
     * @return bool
     **/
    function setRequestUrl($url) {}

    /**
     * Set the response code of an HTTP Response Message.
     *
     * @param int
     * @return bool
     **/
    function setResponseCode($code) {}

    /**
     * Set the Response Status of the HTTP message (i.e. the string following
     * the response code).
     *
     * @param string
     * @return bool
     **/
    function setResponseStatus($status) {}

    /**
     * Set Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or
     * HTTP_MSG_RESPONSE.
     *
     * @param int
     * @return void
     **/
    function setType($type) {}

    /**
     * Creates an object regarding to the type of the message.
     *
     * @return HttpRequest|HttpResponse
     **/
    function toMessageTypeObject() {}

    /**
     * Get the string representation of the Message.
     *
     * @param bool
     * @return string
     **/
    function toString($include_parent) {}

    /**
     * Instantiate a new HttpMessage object.
     * 
     * The constructed object will actually represent the last message of the
     * passed string. If there were prior messages, those can be accessed by
     * HttpMessage::getParentMessage.
     *
     * @param string
     * @return void
     **/
    function __construct($message) {}

}
class HttpQueryString implements ArrayAccess, Serializable {
    /**
     * Get (part of) the query string.
     * 
     * The type parameter is either one of the HttpQueryString::TYPE_*
     * constants or a type abbreviation like b for bool, i for int, f for
     * float, s for string, a for array and o for a stdClass object.
     *
     * @param string
     * @param mixed
     * @param mixed
     * @param bool
     * @return mixed
     **/
    function get($key, $type, $defval, $delete) {}

    /**
     * Copies the query string object and sets provided params at the clone.
     *
     * @param mixed
     * @return HttpQueryString
     **/
    function mod($params) {}

    /**
     * Set query string entry/entries. NULL values will unset the variable.
     *
     * @param mixed
     * @return string
     **/
    function set($params) {}

    /**
     * Get a single instance (differentiates between the global setting).
     *
     * @param bool
     * @return HttpQueryString
     **/
    function singleton($global) {}

    /**
     * Get the query string represented as associative array.
     *
     * @return array
     **/
    function toArray() {}

    /**
     * Get the query string.
     *
     * @return string
     **/
    function toString() {}

    /**
     * Converts the query string from the source encoding ie to the target
     * encoding oe.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function xlate($ie, $oe) {}

    /**
     * Creates a new HttpQueryString object instance.
     * 
     * Operates on and modifies $_GET and $_SERVER['QUERY_STRING'] if global
     * is TRUE.
     *
     * @param bool
     * @param mixed
     * @return void
     **/
    function __construct($global, $add) {}

}
class HttpRequest {
    /**
     * Add custom cookies.
     *
     * @param array
     * @return bool
     **/
    function addCookies($cookies) {}

    /**
     * Add request header name/value pairs.
     *
     * @param array
     * @return bool
     **/
    function addHeaders($headers) {}

    /**
     * Adds POST data entries, leaving previously set unchanged, unless a
     * post entry with the same name already exists.
     * 
     * Affects only POST and custom requests.
     *
     * @param array
     * @return bool
     **/
    function addPostFields($post_data) {}

    /**
     * Add a file to the POST request, leaving previously set files
     * unchanged.
     * 
     * Affects only POST and custom requests. Cannot be used with raw post
     * data.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function addPostFile($name, $file, $content_type) {}

    /**
     * Add PUT data, leaving previously set PUT data unchanged.
     * 
     * Affects only PUT requests.
     *
     * @param string
     * @return bool
     **/
    function addPutData($put_data) {}

    /**
     * Add parameters to the query parameter list, leaving previously set
     * unchanged.
     * 
     * Affects any request type.
     *
     * @param array
     * @return bool
     **/
    function addQueryData($query_params) {}

    /**
     * Add raw post data, leaving previously set raw post data unchanged.
     * 
     * Affects only POST and custom requests.
     *
     * @param string
     * @return bool
     **/
    function addRawPostData($raw_post_data) {}

    /**
     * Set additional SSL options.
     *
     * @param array
     * @return bool
     **/
    function addSslOptions($options) {}

    /**
     * Clears all history messages.
     *
     * @return void
     **/
    function clearHistory() {}

    /**
     * Enable automatic sending of received cookies.
     *
     * @return bool
     **/
    function enableCookies() {}

    /**
     * Get the previously set content type.
     *
     * @return string
     **/
    function getContentType() {}

    /**
     * Get previously set cookies.
     *
     * @return array
     **/
    function getCookies() {}

    /**
     * Get previously set request headers.
     *
     * @return array
     **/
    function getHeaders() {}

    /**
     * Get all sent requests and received responses as an HttpMessage object.
     * 
     * If you want to record history, set the instance variable
     * HttpRequest::recordHistory to TRUE.
     * 
     * The returned object references the last received response, use
     * HttpMessage::getParentMessage to access the data of previously sent
     * requests and received responses.
     *
     * @return HttpMessage
     **/
    function getHistory() {}

    /**
     * Get the previously set request method.
     *
     * @return int
     **/
    function getMethod() {}

    /**
     * Get currently set options.
     *
     * @return array
     **/
    function getOptions() {}

    /**
     * Get previously set POST data.
     *
     * @return array
     **/
    function getPostFields() {}

    /**
     * Get all previously added POST files.
     *
     * @return array
     **/
    function getPostFiles() {}

    /**
     * Get previously set PUT data.
     *
     * @return string
     **/
    function getPutData() {}

    /**
     * Get previously set put file.
     *
     * @return string
     **/
    function getPutFile() {}

    /**
     * Get the current query data in form of an urlencoded query string.
     *
     * @return string
     **/
    function getQueryData() {}

    /**
     * Get previously set raw post data.
     *
     * @return string
     **/
    function getRawPostData() {}

    /**
     * Get sent HTTP message.
     *
     * @return string
     **/
    function getRawRequestMessage() {}

    /**
     * Get the entire HTTP response.
     *
     * @return string
     **/
    function getRawResponseMessage() {}

    /**
     * Get sent HTTP message.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response. Use
     * HttpMessage::getParentMessage to access the data of previously sent
     * requests within this request cycle.
     *
     * @return HttpMessage
     **/
    function getRequestMessage() {}

    /**
     * Get the response body after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     *
     * @return string
     **/
    function getResponseBody() {}

    /**
     * Get the response code after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     *
     * @return int
     **/
    function getResponseCode() {}

    /**
     * Get response cookie(s) after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     *
     * @param int
     * @param array
     * @return array
     **/
    function getResponseCookies($flags, $allowed_extras) {}

    /**
     * * Get all response data after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     *
     * @return array
     **/
    function getResponseData() {}

    /**
     * Get response header(s) after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     *
     * @param string
     * @return mixed
     **/
    function getResponseHeader($name) {}

    /**
     * Get response info after the request has been sent.
     * 
     * See http_get for a full list of returned info.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     *
     * @param string
     * @return mixed
     **/
    function getResponseInfo($name) {}

    /**
     * Get the full response as HttpMessage object after the request has been
     * sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response. Use
     * HttpMessage::getParentMessage to access the data of previously
     * received responses within this request cycle.
     *
     * @return HttpMessage
     **/
    function getResponseMessage() {}

    /**
     * Get the response status (i.e. the string after the response code)
     * after the message has been sent.
     *
     * @return string
     **/
    function getResponseStatus() {}

    /**
     * Get previously set SSL options.
     *
     * @return array
     **/
    function getSslOptions() {}

    /**
     * Get the previously set request URL.
     *
     * @return string
     **/
    function getUrl() {}

    /**
     * Reset all automatically received/sent cookies.
     *
     * @param bool
     * @return bool
     **/
    function resetCookies($session_only) {}

    /**
     * Send the HTTP request.
     *
     * @return HttpMessage
     **/
    function send() {}

    /**
     * Set the content type the post request should have.
     *
     * @param string
     * @return bool
     **/
    function setContentType($content_type) {}

    /**
     * Set custom cookies.
     *
     * @param array
     * @return bool
     **/
    function setCookies($cookies) {}

    /**
     * Set request header name/value pairs.
     *
     * @param array
     * @return bool
     **/
    function setHeaders($headers) {}

    /**
     * Set the request method.
     *
     * @param int
     * @return bool
     **/
    function setMethod($request_method) {}

    /**
     * Set the request options to use.
     *
     * @param array
     * @return bool
     **/
    function setOptions($options) {}

    /**
     * Set the POST data entries, overwriting previously set POST data.
     * 
     * Affects only POST and custom requests.
     *
     * @param array
     * @return bool
     **/
    function setPostFields($post_data) {}

    /**
     * Set files to post, overwriting previously set post files.
     * 
     * Affects only POST and requests. Cannot be used with raw post data.
     *
     * @param array
     * @return bool
     **/
    function setPostFiles($post_files) {}

    /**
     * Set PUT data to send, overwriting previously set PUT data.
     * 
     * Affects only PUT requests.
     * 
     * Only either PUT data or PUT file can be used for each request. PUT
     * data has higher precedence and will be used even if a PUT file is set.
     *
     * @param string
     * @return bool
     **/
    function setPutData($put_data) {}

    /**
     * Set file to put. Affects only PUT requests.
     *
     * @param string
     * @return bool
     **/
    function setPutFile($file) {}

    /**
     * Set the URL query parameters to use, overwriting previously set query
     * parameters.
     * 
     * Affects any request types.
     *
     * @param mixed
     * @return bool
     **/
    function setQueryData($query_data) {}

    /**
     * Set raw post data to send, overwriting previously set raw post data.
     * Don't forget to specify a content type. Affects only POST and custom
     * requests.
     * 
     * Only either post fields or raw post data can be used for each request.
     * Raw post data has higher precedence and will be used even if post
     * fields are set.
     *
     * @param string
     * @return bool
     **/
    function setRawPostData($raw_post_data) {}

    /**
     * Set SSL options.
     *
     * @param array
     * @return bool
     **/
    function setSslOptions($options) {}

    /**
     * Set the request URL.
     *
     * @param string
     * @return bool
     **/
    function setUrl($url) {}

    /**
     * Instantiate a new HttpRequest object.
     *
     * @param string
     * @param int
     * @param array
     * @return void
     **/
    function __construct($url, $request_method, $options) {}

}
class HttpRequestPool implements Iterator, Countable {
    /**
     * Attach an HttpRequest object to this HttpRequestPool.
     *
     * @param HttpRequest
     * @return bool
     **/
    function attach($request) {}

    /**
     * Detach an HttpRequest object from this HttpRequestPool.
     *
     * @param HttpRequest
     * @return bool
     **/
    function detach($request) {}

    /**
     * Get attached HttpRequest objects.
     *
     * @return array
     **/
    function getAttachedRequests() {}

    /**
     * Get attached HttpRequest objects that already have finished their
     * work.
     *
     * @return array
     **/
    function getFinishedRequests() {}

    /**
     * Detach all attached HttpRequest objects.
     *
     * @return void
     **/
    function reset() {}

    /**
     * Send all attached HttpRequest objects in parallel.
     *
     * @return bool
     **/
    function send() {}

    /**
     * Returns TRUE until each request has finished its transaction.
     *
     * @return bool
     **/
    function socketPerform() {}

    /**
     * @return bool
     **/
    function socketSelect() {}

    /**
     * Instantiate a new HttpRequestPool object. An HttpRequestPool is able
     * to send several HttpRequests in parallel.
     * 
     * Accepts virtually infinite optional parameters each referencing an
     * HttpRequest object.
     *
     * @param HttpRequest
     * @return void
     **/
    function __construct($request) {}

    /**
     * Clean up HttpRequestPool object.
     *
     * @return void
     **/
    function __destruct() {}

}
class HttpResponse {
    /**
     * Capture script output.
     *
     * @return void
     **/
    function capture() {}

    /**
     * Get current buffer size.
     *
     * @return int
     **/
    function getBufferSize() {}

    /**
     * Get current caching setting.
     *
     * @return bool
     **/
    function getCache() {}

    /**
     * Get current Cache-Control header setting.
     *
     * @return string
     **/
    function getCacheControl() {}

    /**
     * Get current Content-Disposition setting.
     *
     * @return string
     **/
    function getContentDisposition() {}

    /**
     * Get current Content-Type header setting.
     *
     * @return string
     **/
    function getContentType() {}

    /**
     * Get the previously set data to be sent.
     *
     * @return string
     **/
    function getData() {}

    /**
     * Get calculated or previously set custom ETag.
     *
     * @return string
     **/
    function getETag() {}

    /**
     * Get the previously set file to be sent.
     *
     * @return string
     **/
    function getFile() {}

    /**
     * Get current gzip'ing setting.
     *
     * @return bool
     **/
    function getGzip() {}

    /**
     * Get header(s) about to be sent.
     *
     * @param string
     * @return mixed
     **/
    function getHeader($name) {}

    /**
     * Get calculated or previously set custom Last-Modified date.
     *
     * @return int
     **/
    function getLastModified() {}

    /**
     * http_get_request_body.
     *
     * @return string
     **/
    function getRequestBody() {}

    /**
     * http_get_request_body_stream.
     *
     * @return resource
     **/
    function getRequestBodyStream() {}

    /**
     * http_get_request_headers.
     *
     * @return array
     **/
    function getRequestHeaders() {}

    /**
     * Get the previously set resource to be sent.
     *
     * @return resource
     **/
    function getStream() {}

    /**
     * Get the current throttle delay.
     *
     * @return double
     **/
    function getThrottleDelay() {}

    /**
     * Attempts to guess the content type of supplied payload through
     * libmagic.
     * 
     * If the attempt is successful, the guessed Content-Type will
     * automatically be set as response Content-Type.
     *
     * @param string
     * @param int
     * @return string
     **/
    function guessContentType($magic_file, $magic_mode) {}

    /**
     * http_redirect.
     *
     * @param string
     * @param array
     * @param bool
     * @param int
     * @return void
     **/
    function redirect($url, $params, $session, $status) {}

    /**
     * Finally send the entity.
     * 
     * A successful caching attempt will exit PHP, and write a log entry if
     * the http.log.cache is set.
     *
     * @param bool
     * @return bool
     **/
    function send($clean_ob) {}

    /**
     * Sets the send buffer size of the throttling mechanism.
     *
     * @param int
     * @return bool
     **/
    function setBufferSize($bytes) {}

    /**
     * Whether it should be attempted to cache the entity.
     * 
     * This will result in necessary caching headers and checks of clients
     * If-Modified-Since and If-None-Match headers. If one of those headers
     * matches a 304 Not Modified status code will be issued.
     *
     * @param bool
     * @return bool
     **/
    function setCache($cache) {}

    /**
     * Define a custom Cache-Control header, usually being private or public;
     *
     * @param string
     * @param int
     * @param bool
     * @return bool
     **/
    function setCacheControl($control, $max_age, $must_revalidate) {}

    /**
     * Set the Content-Disposition.
     *
     * @param string
     * @param bool
     * @return bool
     **/
    function setContentDisposition($filename, $inline) {}

    /**
     * Set the Content-Type of the sent entity.
     *
     * @param string
     * @return bool
     **/
    function setContentType($content_type) {}

    /**
     * Set the data to be sent.
     *
     * @param mixed
     * @return bool
     **/
    function setData($data) {}

    /**
     * Set a custom ETag. Use this only if you know what you're doing.
     *
     * @param string
     * @return bool
     **/
    function setETag($etag) {}

    /**
     * Set the file to be sent.
     *
     * @param string
     * @return bool
     **/
    function setFile($file) {}

    /**
     * Enable on-thy-fly gzip'ing of the sent entity.
     *
     * @param bool
     * @return bool
     **/
    function setGzip($gzip) {}

    /**
     * Send an HTTP header.
     *
     * @param string
     * @param mixed
     * @param bool
     * @return bool
     **/
    function setHeader($name, $value, $replace) {}

    /**
     * Set a custom Last-Modified date.
     *
     * @param int
     * @return bool
     **/
    function setLastModified($timestamp) {}

    /**
     * Set the resource to be sent.
     *
     * @param resource
     * @return bool
     **/
    function setStream($stream) {}

    /**
     * Sets the throttle delay.
     *
     * @param float
     * @return bool
     **/
    function setThrottleDelay($seconds) {}

    /**
     * http_send_status.
     *
     * @param int
     * @return bool
     **/
    function status($status) {}

}
class hw_api {
    /**
     * This function checks in an object or a whole hierarchy of objects. The
     * parameters array contains the required element 'objectIdentifier' and
     * the optional element 'version', 'comment', 'mode' and 'objectQuery'.
     * 'version' sets the version of the object. It consists of the major and
     * minor version separated by a period. If the version is not set, the
     * minor version is incremented. 'mode' can be one of the following
     * values:
     * 
     * HW_API_CHECKIN_NORMAL
     * 
     * Checks in and commits the object. The object must be a document.
     * 
     * HW_API_CHECKIN_RECURSIVE
     * 
     * If the object to check in is a collection, all children will be
     * checked in recursively if they are documents. Trying to check in a
     * collection would result in an error.
     * 
     * HW_API_CHECKIN_FORCE_VERSION_CONTROL
     * 
     * Checks in an object even if it is not under version control.
     * 
     * HW_API_CHECKIN_REVERT_IF_NOT_CHANGED
     * 
     * Check if the new version is different from the last version. Unless
     * this is the case the object will be checked in.
     * 
     * HW_API_CHECKIN_KEEP_TIME_MODIFIED
     * 
     * Keeps the time modified from the most recent object.
     * 
     * HW_API_CHECKIN_NO_AUTO_COMMIT
     * 
     * The object is not automatically committed on check-in.
     *
     * @param array
     * @return bool
     **/
    function checkin($parameter) {}

    /**
     * This function checks out an object or a whole hierarchy of objects.
     *
     * @param array
     * @return bool
     **/
    function checkout($parameter) {}

    /**
     * Retrieves the children of a collection or the attributes of a
     * document. The children can be further filtered by specifying an object
     * query.
     *
     * @param array
     * @return array
     **/
    function children($parameter) {}

    /**
     * This function returns the content of a document as an object of type
     * hw_api_content.
     *
     * @param array
     * @return HW_API_Content
     **/
    function content($parameter) {}

    /**
     * This function will make a physical copy including the content if it
     * exists and returns the new object or an error object.
     *
     * @param array
     * @return hw_api_content
     **/
    function copy($parameter) {}

    /**
     * Returns statistics about database server.
     *
     * @param array
     * @return hw_api_object
     **/
    function dbstat($parameter) {}

    /**
     * Returns statistics about document cache server.
     *
     * @param array
     * @return hw_api_object
     **/
    function dcstat($parameter) {}

    /**
     * Retrieves all destination anchors of an object.
     *
     * @param array
     * @return array
     **/
    function dstanchors($parameter) {}

    /**
     * Retrieves the destination object pointed by the specified source
     * anchors. The destination object can either be a destination anchor or
     * a whole document.
     *
     * @param array
     * @return hw_api_object
     **/
    function dstofsrcanchor($parameter) {}

    /**
     * This functions searches for objects either by executing a key or/and
     * full text query. The found objects can further be filtered by an
     * optional object query. They are sorted by their importance. The second
     * search operation is relatively slow and its result can be limited to a
     * certain number of hits. This allows to perform an incremental search,
     * each returning just a subset of all found documents, starting at a
     * given index.
     *
     * @param array
     * @return array
     **/
    function find($parameter) {}

    /**
     * Returns statistics about fulltext server.
     *
     * @param array
     * @return hw_api_object
     **/
    function ftstat($parameter) {}

    /**
     * Returns statistics about Hyperwave server.
     *
     * @param array
     * @return hw_api_object
     **/
    function hwstat($parameter) {}

    /**
     * Logs into the Hyperwave Server.
     *
     * @param array
     * @return bool
     **/
    function identify($parameter) {}

    /**
     * Returns information about server configuration.
     *
     * @param array
     * @return array
     **/
    function info($parameter) {}

    /**
     * Insert a new object. The object type can be user, group, document or
     * anchor. Depending on the type other object attributes has to be set.
     *
     * @param array
     * @return hw_api_object
     **/
    function insert($parameter) {}

    /**
     * This function is a shortcut for hwapi_insert. It inserts an object of
     * type anchor and sets some of the attributes required for an anchor.
     *
     * @param array
     * @return hw_api_object
     **/
    function insertanchor($parameter) {}

    /**
     * This function is a shortcut for hwapi_insert. It inserts an object of
     * type collection and sets some of the attributes required for a
     * collection.
     *
     * @param array
     * @return hw_api_object
     **/
    function insertcollection($parameter) {}

    /**
     * This function is a shortcut for hwapi_insert. It inserts an object
     * with content and sets some of the attributes required for a document.
     *
     * @param array
     * @return hw_api_object
     **/
    function insertdocument($parameter) {}

    /**
     * Creates a link to an object. Accessing this link is like accessing the
     * object to links points to.
     *
     * @param array
     * @return bool
     **/
    function link($parameter) {}

    /**
     * Locks an object for exclusive editing by the user calling this
     * function. The object can be only unlocked by this user or the system
     * user.
     *
     * @param array
     * @return bool
     **/
    function lock($parameter) {}

    /**
     * Moves object between collections.
     *
     * @param array
     * @return bool
     **/
    function move($parameter) {}

    /**
     * This function retrieves the attribute information of an object of any
     * version. It will not return the document content.
     *
     * @param array
     * @return hw_api_object
     **/
    function object($parameter) {}

    /**
     * This function retrieves an object the specified anchor belongs to.
     *
     * @param array
     * @return hw_api_object
     **/
    function objectbyanchor($parameter) {}

    /**
     * Retrieves the parents of an object. The parents can be further
     * filtered by specifying an object query.
     *
     * @param array
     * @return array
     **/
    function parents($parameter) {}

    /**
     * Removes an object from the specified parent. Collections will be
     * removed recursively.
     *
     * @param array
     * @return bool
     **/
    function remove($parameter) {}

    /**
     * Replaces the attributes and the content of an object.
     *
     * @param array
     * @return hw_api_object
     **/
    function replace($parameter) {}

    /**
     * Commits a version of a document. The committed version is the one
     * which is visible to users with read access. By default the last
     * version is the committed version.
     *
     * @param array
     * @return hw_api_object
     **/
    function setcommittedversion($parameter) {}

    /**
     * Retrieves all source anchors of an object.
     *
     * @param array
     * @return array
     **/
    function srcanchors($parameter) {}

    /**
     * Retrieves all the source anchors pointing to the specified
     * destination. The destination object can either be a destination anchor
     * or a whole document.
     *
     * @param array
     * @return array
     **/
    function srcsofdst($parameter) {}

    /**
     * Unlocks a locked object. Only the user who has locked the object and
     * the system user may unlock an object.
     *
     * @param array
     * @return bool
     **/
    function unlock($parameter) {}

    /**
     * Returns the own user object.
     *
     * @param array
     * @return hw_api_object
     **/
    function user($parameter) {}

    /**
     * Returns a list of all logged in users.
     *
     * @param array
     * @return array
     **/
    function userlist($parameter) {}

}
class hw_api_attribute {
    /**
     * Returns the name of the attribute.
     *
     * @return string
     **/
    function key() {}

    /**
     * Returns the value in the given language of the attribute.
     *
     * @param string
     * @return string
     **/
    function langdepvalue($language) {}

    /**
     * Gets the value of the attribute.
     *
     * @return string
     **/
    function value() {}

    /**
     * Gets all values of the attribute.
     *
     * @return array
     **/
    function values() {}

}
class hw_api_content {
    /**
     * Returns the mimetype of the content.
     *
     * @return string
     **/
    function mimetype() {}

    /**
     * Reads len bytes from the content into the given buffer.
     *
     * @param string
     * @param int
     * @return string
     **/
    function read($buffer, $len) {}

}
class hw_api_error {
    /**
     * Returns the number of error reasons.
     *
     * @return int
     **/
    function count() {}

    /**
     * Returns the first error reason.
     *
     * @return HW_API_Reason
     **/
    function reason() {}

}
class hw_api_object {
    /**
     * Clones the attributes of an object.
     *
     * @param array
     * @return bool
     **/
    function assign($parameter) {}

    /**
     * Checks whether an attribute is editable.
     *
     * @param array
     * @return bool
     **/
    function attreditable($parameter) {}

    /**
     * Returns the number of attributes.
     *
     * @param array
     * @return int
     **/
    function count($parameter) {}

    /**
     * Adds an attribute to the object.
     *
     * @param HW_API_Attribute
     * @return bool
     **/
    function insert($attribute) {}

    /**
     * Removes the attribute with the given name.
     *
     * @param string
     * @return bool
     **/
    function remove($name) {}

    /**
     * Returns the title attribute.
     *
     * @param array
     * @return string
     **/
    function title($parameter) {}

    /**
     * Returns value of an attribute.
     *
     * @param string
     * @return string
     **/
    function value($name) {}

}
class hw_api_reason {
    /**
     * Returns the description of a reason
     *
     * @return string
     **/
    function description() {}

    /**
     * Returns the type of a reason.
     *
     * @return HW_API_Reason
     **/
    function type() {}

}
class Imagick implements Iterator, Traversable {
    /**
     * Adds an adaptive blur filter to image. The intensity of an adaptive
     * blur depends is dramatically decreased at edge of the image, whereas a
     * standard blur is uniform across the image.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function adaptiveBlurImage($radius, $sigma, $channel) {}

    /**
     * Adaptively resize image with data-dependent triangulation. Avoids
     * blurring across sharp color changes. Most useful when used to shrink
     * images slightly to a slightly smaller "web size"; may not look good
     * when a full-sized image is adaptively resized to a thumbnail.
     *
     * @param int
     * @param int
     * @param bool
     * @return bool
     **/
    function adaptiveResizeImage($columns, $rows, $fit) {}

    /**
     * Adaptively sharpen the image by sharpening more intensely near image
     * edges and less intensely far from edges.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function adaptiveSharpenImage($radius, $sigma, $channel) {}

    /**
     * Selects an individual threshold for each pixel based on the range of
     * intensity values in its local neighborhood. This allows for
     * thresholding of an image whose global intensity histogram doesn't
     * contain distinctive peaks.
     *
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function adaptiveThresholdImage($width, $height, $offset) {}

    /**
     * Adds new image to Imagick object from the current position of the
     * source object. After the operation iterator position is moved at the
     * end of the list.
     *
     * @param Imagick
     * @return bool
     **/
    function addImage($source) {}

    /**
     * Adds random noise to the image.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function addNoiseImage($noise_type, $channel) {}

    /**
     * Transforms an image as dictated by the affine matrix.
     *
     * @param ImagickDraw
     * @return bool
     **/
    function affineTransformImage($matrix) {}

    /**
     * This method animates the image onto a local or remote X server. This
     * method is not available on Windows.
     *
     * @param string
     * @return bool
     **/
    function animateImages($x_server) {}

    /**
     * Annotates an image with text.
     *
     * @param ImagickDraw
     * @param float
     * @param float
     * @param float
     * @param string
     * @return bool
     **/
    function annotateImage($draw_settings, $x, $y, $angle, $text) {}

    /**
     * Append a set of images into one larger image.
     *
     * @param bool
     * @return Imagick
     **/
    function appendImages($stack) {}

    /**
     * Average a set of images.
     *
     * @return Imagick
     **/
    function averageImages() {}

    /**
     * Is like Imagick::thresholdImage() but forces all pixels below the
     * threshold into black while leaving all pixels above the threshold
     * unchanged.
     *
     * @param mixed
     * @return bool
     **/
    function blackThresholdImage($threshold) {}

    /**
     * Adds blur filter to image. Optional third parameter to blur a specific
     * channel.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function blurImage($radius, $sigma, $channel) {}

    /**
     * Surrounds the image with a border of the color defined by the
     * bordercolor ImagickPixel object.
     *
     * @param mixed
     * @param int
     * @param int
     * @return bool
     **/
    function borderImage($bordercolor, $width, $height) {}

    /**
     * Simulates a charcoal drawing.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function charcoalImage($radius, $sigma) {}

    /**
     * Removes a region of an image and collapses the image to occupy the
     * removed portion.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function chopImage($width, $height, $x, $y) {}

    /**
     * Clears all resources associated to Imagick object
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Clips along the first path from the 8BIM profile, if present.
     *
     * @return bool
     **/
    function clipImage() {}

    /**
     * Clips along the named paths from the 8BIM profile, if present. Later
     * operations take effect inside the path. It may be a number if preceded
     * with #, to work on a numbered path, e.g., "#1" to use the first path.
     *
     * @param string
     * @param bool
     * @return bool
     **/
    function clipPathImage($pathname, $inside) {}

    /**
     * Replaces colors in the image from a color lookup table. Optional
     * second parameter to replace colors in a specific channel.
     *
     * @param Imagick
     * @param float
     * @return bool
     **/
    function clutImage($lookup_table, $channel) {}

    /**
     * Composites a set of images while respecting any page offsets and
     * disposal methods. GIF, MIFF, and MNG animation sequences typically
     * start with an image background and each subsequent image varies in
     * size and offset. Returns a new Imagick object where each image in the
     * sequence is the same size as the first and composited with the next
     * image in the sequence.
     *
     * @return Imagick
     **/
    function coalesceImages() {}

    /**
     * Changes the color value of any pixel that matches target and is an
     * immediate neighbor.
     *
     * @param mixed
     * @param float
     * @param mixed
     * @param int
     * @param int
     * @return bool
     **/
    function colorFloodfillImage($fill, $fuzz, $bordercolor, $x, $y) {}

    /**
     * Blends the fill color with each pixel in the image.
     *
     * @param mixed
     * @param mixed
     * @return bool
     **/
    function colorizeImage($colorize, $opacity) {}

    /**
     * Combines one or more images into a single image. The grayscale value
     * of the pixels of each image in the sequence is assigned in order to
     * the specified channels of the combined image. The typical ordering
     * would be image 1 = Red, 2 = Green, 3 = Blue, etc.
     *
     * @param int
     * @return Imagick
     **/
    function combineImages($channelType) {}

    /**
     * Adds a comment to your image.
     *
     * @param string
     * @return bool
     **/
    function commentImage($comment) {}

    /**
     * Compares one or more images and returns the difference image.
     *
     * @param Imagick
     * @param int
     * @param int
     * @return array
     **/
    function compareImageChannels($image, $channelType, $metricType) {}

    /**
     * Compares each image with the next in a sequence and returns the
     * maximum bounding region of any pixel differences it discovers.
     *
     * @param int
     * @return Imagick
     **/
    function compareImageLayers($method) {}

    /**
     * Returns an array containing a reconstructed image and the difference
     * between images.
     *
     * @param Imagick
     * @param int
     * @return array
     **/
    function compareImages($compare, $metric) {}

    /**
     * Composite one image onto another at the specified offset.
     *
     * @param Imagick
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function compositeImage($composite_object, $composite, $x, $y, $channel) {}

    /**
     * Enhances the intensity differences between the lighter and darker
     * elements of the image. Set sharpen to a value other than 0 to increase
     * the image contrast otherwise the contrast is reduced.
     *
     * @param bool
     * @return bool
     **/
    function contrastImage($sharpen) {}

    /**
     * Enhances the contrast of a color image by adjusting the pixels color
     * to span the entire range of colors available.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function contrastStretchImage($black_point, $white_point, $channel) {}

    /**
     * Applies a custom convolution kernel to the image.
     *
     * @param array
     * @param int
     * @return bool
     **/
    function convolveImage($kernel, $channel) {}

    /**
     * Extracts a region of the image.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function cropImage($width, $height, $x, $y) {}

    /**
     * Creates a fixed size thumbnail by first scaling the image down and
     * cropping a specified area from the center.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function cropThumbnailImage($width, $height) {}

    /**
     * Returns reference to the current imagick object with image pointer at
     * the correct sequence.
     *
     * @return Imagick
     **/
    function current() {}

    /**
     * Displaces an image's colormap by a given number of positions. If you
     * cycle the colormap a number of times you can produce a psychedelic
     * effect.
     *
     * @param int
     * @return bool
     **/
    function cycleColormapImage($displace) {}

    /**
     * Deciphers image that has been enciphered before. The image must be
     * enciphered using Imagick::encipherImage.
     *
     * @param string
     * @return bool
     **/
    function decipherImage($passphrase) {}

    /**
     * Compares each image with the next in a sequence and returns the
     * maximum bounding region of any pixel differences it discovers.
     *
     * @return bool
     **/
    function deconstructImages() {}

    /**
     * This method can be used to remove skew from for example scanned images
     * where the paper was not properly placed on the scanning surface.
     *
     * @param float
     * @return void
     **/
    function deskewImage($threshold) {}

    /**
     * Reduces the speckle noise in an image while preserving the edges of
     * the original image.
     *
     * @return bool
     **/
    function despeckleImage() {}

    /**
     * Destroys the Imagick object and frees all resources associated with
     * it.
     *
     * @return bool
     **/
    function destroy() {}

    /**
     * This method displays an image on a X server.
     *
     * @param string
     * @return bool
     **/
    function displayImage($servername) {}

    /**
     * Displays an image or image sequence on a X server.
     *
     * @param string
     * @return bool
     **/
    function displayImages($servername) {}

    /**
     * Distorts an image using various distortion methods, by mapping color
     * lookups of the source image to a new destination image usually of the
     * same size as the source image, unless 'bestfit' is set to .
     * 
     * If 'bestfit' is enabled, and distortion allows it, the destination
     * image is adjusted to ensure the whole source 'image' will just fit
     * within the final destination image, which will be sized and offset
     * accordingly. Also in many cases the virtual offset of the source image
     * will be taken into account in the mapping.
     * 
     * 
     *
     * @param int
     * @param array
     * @param bool
     * @return bool
     **/
    function distortImage($method, $arguments, $bestfit) {}

    /**
     * Renders the ImagickDraw object on the current image.
     *
     * @param ImagickDraw
     * @return bool
     **/
    function drawImage($draw) {}

    /**
     * Enhance edges within the image with a convolution filter of the given
     * radius. Use radius 0 and it will be auto-selected.
     *
     * @param float
     * @return bool
     **/
    function edgeImage($radius) {}

    /**
     * Returns a grayscale image with a three-dimensional effect. We convolve
     * the image with a Gaussian operator of the given radius and standard
     * deviation (sigma). For reasonable results, radius should be larger
     * than sigma. Use a radius of 0 and it will choose a suitable radius for
     * you.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function embossImage($radius, $sigma) {}

    /**
     * Converts plain pixels to enciphered pixels. The image is not readable
     * until it has been deciphered using Imagick::decipherImage
     *
     * @param string
     * @return bool
     **/
    function encipherImage($passphrase) {}

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     *
     * @return bool
     **/
    function enhanceImage() {}

    /**
     * Equalizes the image histogram.
     *
     * @return bool
     **/
    function equalizeImage() {}

    /**
     * Applys an arithmetic, relational, or logical expression to an image.
     * Use these operators to lighten or darken an image, to increase or
     * decrease contrast in an image, or to produce the "negative" of an
     * image.
     *
     * @param int
     * @param float
     * @param int
     * @return bool
     **/
    function evaluateImage($op, $constant, $channel) {}

    /**
     * Comfortability method for setting image size. The method sets the
     * image size and allows setting x,y coordinates where the new area
     * begins.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function extentImage($width, $height, $x, $y) {}

    /**
     * Merges a sequence of images. This is useful for combining Photoshop
     * layers into a single image.
     *
     * @return Imagick
     **/
    function flattenImages() {}

    /**
     * Creates a vertical mirror image by reflecting the pixels around the
     * central x-axis.
     *
     * @return bool
     **/
    function flipImage() {}

    /**
     * Changes the color value of any pixel that matches target and is an
     * immediate neighbor. This method is a replacement for deprecated
     * Imagick::paintFloodFillImage.
     *
     * @param mixed
     * @param float
     * @param mixed
     * @param int
     * @param int
     * @param bool
     * @param int
     * @return bool
     **/
    function floodFillPaintImage($fill, $fuzz, $target, $x, $y, $invert, $channel) {}

    /**
     * Creates a horizontal mirror image by reflecting the pixels around the
     * central y-axis.
     *
     * @return bool
     **/
    function flopImage() {}

    /**
     * Adds a simulated three-dimensional border around the image. The width
     * and height specify the border width of the vertical and horizontal
     * sides of the frame. The inner and outer bevels indicate the width of
     * the inner and outer shadows of the frame.
     *
     * @param mixed
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function frameImage($matte_color, $width, $height, $inner_bevel, $outer_bevel) {}

    /**
     * Evaluate expression for each pixel in the image. Consult The Fx
     * Special Effects Image Operator for more information.
     *
     * @param string
     * @param int
     * @return Imagick
     **/
    function fxImage($expression, $channel) {}

    /**
     * Gamma-corrects an image. The same image viewed on different devices
     * will have perceptual differences in the way the image's intensities
     * are represented on the screen. Specify individual gamma levels for the
     * red, green, and blue channels, or adjust all three with the gamma
     * parameter. Values typically range from 0.8 to 2.3.
     *
     * @param float
     * @param int
     * @return bool
     **/
    function gammaImage($gamma, $channel) {}

    /**
     * Blurs an image. We convolve the image with a Gaussian operator of the
     * given radius and standard deviation (sigma). For reasonable results,
     * the radius should be larger than sigma. Use a radius of 0 and selects
     * a suitable radius for you.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function gaussianBlurImage($radius, $sigma, $channel) {}

    /**
     * Gets the object compression type.
     *
     * @return int
     **/
    function getCompression() {}

    /**
     * Gets the object compression quality.
     *
     * @return int
     **/
    function getCompressionQuality() {}

    /**
     * Returns the ImageMagick API copyright as a string.
     *
     * @return string
     **/
    function getCopyright() {}

    /**
     * Returns the filename associated with an image sequence.
     *
     * @return string
     **/
    function getFilename() {}

    /**
     * Returns the objects font property.
     *
     * @return string
     **/
    function getFont() {}

    /**
     * Returns the format of the Imagick object.
     *
     * @return string
     **/
    function getFormat() {}

    /**
     * Gets the global gravity property for the Imagick object.
     *
     * @return bool
     **/
    function getGravity() {}

    /**
     * Returns the ImageMagick home URL.
     *
     * @return string
     **/
    function getHomeURL() {}

    /**
     * Returns a new Imagick object with the current image sequence.
     *
     * @return Imagick
     **/
    function getImage() {}

    /**
     * Gets the image alpha channel value. The returned value is one of the
     * alpha channel constants.
     *
     * @return int
     **/
    function getImageAlphaChannel() {}

    /**
     * Returns the image background color.
     *
     * @return ImagickPixel
     **/
    function getImageBackgroundColor() {}

    /**
     * Implements direct to memory image formats. It returns the image
     * sequence as a string. The format of the image determines the format of
     * the returned blob (GIF, JPEG, PNG, etc.). To return a different image
     * format, use Imagick::setImageFormat().
     *
     * @return string
     **/
    function getImageBlob() {}

    /**
     * Returns the chromaticity blue primary point for the image.
     *
     * @param float
     * @param float
     * @return array
     **/
    function getImageBluePrimary($x, $y) {}

    /**
     * Returns the image border color.
     *
     * @return ImagickPixel
     **/
    function getImageBorderColor() {}

    /**
     * Gets the depth for a particular image channel.
     *
     * @param int
     * @return int
     **/
    function getImageChannelDepth($channel) {}

    /**
     * Compares one or more image channels of an image to a reconstructed
     * image and returns the specified distortion metric.
     *
     * @param Imagick
     * @param int
     * @param int
     * @return float
     **/
    function getImageChannelDistortion($reference, $channel, $metric) {}

    /**
     * Compares one or more image channels of an image to a reconstructed
     * image and returns the specified distortion metrics
     *
     * @param Imagick
     * @param int
     * @param int
     * @return double
     **/
    function getImageChannelDistortions($reference, $metric, $channel) {}

    /**
     * Gets the extrema for one or more image channels. Return value is an
     * associative array with the keys "minima" and "maxima".
     *
     * @param int
     * @return array
     **/
    function getImageChannelExtrema($channel) {}

    /**
     * Gets the mean and standard deviation of one or more image channels.
     * Return value is an associative array with the keys "mean" and
     * "standardDeviation".
     *
     * @param int
     * @return array
     **/
    function getImageChannelMean($channel) {}

    /**
     * Gets the range for one or more image channels.
     *
     * @param int
     * @return bool
     **/
    function getImageChannelRange($channel) {}

    /**
     * Returns statistics for each channel in the image. The statistics
     * include the channel depth, its minima and maxima, the mean, and the
     * standard deviation. You can access the red channel mean, for example,
     * like this:
     *
     * @return array
     **/
    function getImageChannelStatistics() {}

    /**
     * Returns the image clip mask. The clip mask is an Imagick object
     * containing the clip mask.
     *
     * @return Imagick
     **/
    function getImageClipMask() {}

    /**
     * Returns the color of the specified colormap index.
     *
     * @param int
     * @return ImagickPixel
     **/
    function getImageColormapColor($index) {}

    /**
     * Gets the number of unique colors in the image.
     *
     * @return int
     **/
    function getImageColors() {}

    /**
     * Gets the image colorspace.
     *
     * @return int
     **/
    function getImageColorspace() {}

    /**
     * Returns the composite operator associated with the image.
     *
     * @return int
     **/
    function getImageCompose() {}

    /**
     * Gets the current image's compression type.
     *
     * @return int
     **/
    function getImageCompression() {}

    /**
     * Gets the image delay.
     *
     * @return int
     **/
    function getImageDelay() {}

    /**
     * Gets the image depth.
     *
     * @return int
     **/
    function getImageDepth() {}

    /**
     * Gets the image disposal method.
     *
     * @return int
     **/
    function getImageDispose() {}

    /**
     * Compares an image to a reconstructed image and returns the specified
     * distortion metric.
     *
     * @param MagickWand
     * @param int
     * @return float
     **/
    function getImageDistortion($reference, $metric) {}

    /**
     * Gets the extrema for the image. Returns an associative array with the
     * keys "min" and "max".
     *
     * @return array
     **/
    function getImageExtrema() {}

    /**
     * Returns the filename of a particular image in a sequence.
     *
     * @return string
     **/
    function getImageFilename() {}

    /**
     * Returns the format of a particular image in a sequence.
     *
     * @return string
     **/
    function getImageFormat() {}

    /**
     * Gets the image gamma.
     *
     * @return float
     **/
    function getImageGamma() {}

    /**
     * Returns the width and height as an associative array.
     *
     * @return array
     **/
    function getImageGeometry() {}

    /**
     * Gets the current gravity value of the image. Unlike
     * Imagick::getGravity, this method returns the gravity defined for the
     * current image sequence.
     *
     * @return bool
     **/
    function getImageGravity() {}

    /**
     * Returns the chromaticity green primary point. Returns an array with
     * the keys "x" and "y".
     *
     * @return array
     **/
    function getImageGreenPrimary() {}

    /**
     * Returns the image height.
     *
     * @return int
     **/
    function getImageHeight() {}

    /**
     * Returns the image histogram as an array of ImagickPixel objects.
     *
     * @return array
     **/
    function getImageHistogram() {}

    /**
     * Returns the index of the current active image within the Imagick
     * object. This method has been deprecated. See Imagick::getIteratorIndex
     *
     * @return int
     **/
    function getImageIndex() {}

    /**
     * Gets the image interlace scheme.
     *
     * @return int
     **/
    function getImageInterlaceScheme() {}

    /**
     * Returns the interpolation method for the specified image. The method
     * is one of the Imagick::INTERPOLATE_* constants.
     *
     * @return int
     **/
    function getImageInterpolateMethod() {}

    /**
     * Gets the image iterations.
     *
     * @return int
     **/
    function getImageIterations() {}

    /**
     * Returns the image length in bytes
     *
     * @return int
     **/
    function getImageLength() {}

    /**
     * Returns a string containing the ImageMagick license
     *
     * @return string
     **/
    function getImageMagickLicense() {}

    /**
     * Returns if the image has a matte channel otherwise false.
     *
     * @return int
     **/
    function getImageMatte() {}

    /**
     * Returns the image matte color.
     *
     * @return ImagickPixel
     **/
    function getImageMatteColor() {}

    /**
     * Gets the image orientation. The return value is one of the orientation
     * constants.
     *
     * @return int
     **/
    function getImageOrientation() {}

    /**
     * Returns the page geometry associated with the image in an array with
     * the keys "width", "height", "x", and "y".
     *
     * @return array
     **/
    function getImagePage() {}

    /**
     * Returns the color of the specified pixel.
     *
     * @param int
     * @param int
     * @return ImagickPixel
     **/
    function getImagePixelColor($x, $y) {}

    /**
     * Returns the named image profile.
     *
     * @param string
     * @return string
     **/
    function getImageProfile($name) {}

    /**
     * Returns all associated profiles that match the pattern. If is passed
     * as second parameter only the profile names are returned.
     *
     * @param string
     * @param bool
     * @return array
     **/
    function getImageProfiles($pattern, $only_names) {}

    /**
     * Returns all associated properties that match the pattern. If is passed
     * as second parameter only the property names are returned.
     *
     * @param string
     * @param bool
     * @return array
     **/
    function getImageProperties($pattern, $only_names) {}

    /**
     * Returns the named image profile.
     *
     * @param string
     * @return string
     **/
    function getImageProperty($name) {}

    /**
     * Returns the chromaticity red primary point as an array with the keys
     * "x" and "y".
     *
     * @return array
     **/
    function getImageRedPrimary() {}

    /**
     * Extracts a region of the image and returns it as a a new Imagick
     * object.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return Imagick
     **/
    function getImageRegion($width, $height, $x, $y) {}

    /**
     * Gets the image rendering intent.
     *
     * @return int
     **/
    function getImageRenderingIntent() {}

    /**
     * Gets the image X and Y resolution.
     *
     * @return array
     **/
    function getImageResolution() {}

    /**
     * Implements direct to memory image formats. It returns all image
     * sequences as a string. The format of the image determines the format
     * of the returned blob (GIF, JPEG, PNG, etc.). To return a different
     * image format, use Imagick::setImageFormat().
     *
     * @return string
     **/
    function getImagesBlob() {}

    /**
     * Gets the image scene.
     *
     * @return int
     **/
    function getImageScene() {}

    /**
     * Generates an SHA-256 message digest for the image pixel stream.
     *
     * @return string
     **/
    function getImageSignature() {}

    /**
     * Returns the image length in bytes
     *
     * @return int
     **/
    function getImageSize() {}

    /**
     * Gets the image ticks-per-second.
     *
     * @return int
     **/
    function getImageTicksPerSecond() {}

    /**
     * Gets the image total ink density.
     *
     * @return float
     **/
    function getImageTotalInkDensity() {}

    /**
     * Gets the potential image type.
     *
     * @return int
     **/
    function getImageType() {}

    /**
     * Gets the image units of resolution.
     *
     * @return int
     **/
    function getImageUnits() {}

    /**
     * Returns the virtual pixel method for the specified image.
     *
     * @return int
     **/
    function getImageVirtualPixelMethod() {}

    /**
     * Returns the chromaticity white point as an associative array with the
     * keys "x" and "y".
     *
     * @return array
     **/
    function getImageWhitePoint() {}

    /**
     * Returns the image width.
     *
     * @return int
     **/
    function getImageWidth() {}

    /**
     * Gets the object interlace scheme.
     *
     * @return int
     **/
    function getInterlaceScheme() {}

    /**
     * Returns the index of the current active image within the Imagick
     * object.
     *
     * @return int
     **/
    function getIteratorIndex() {}

    /**
     * Returns the number of images associated with Imagick object.
     *
     * @return int
     **/
    function getNumberImages() {}

    /**
     * Returns a value associated within the object for the specified key.
     *
     * @param string
     * @return string
     **/
    function getOption($key) {}

    /**
     * Returns the ImageMagick package name.
     *
     * @return string
     **/
    function getPackageName() {}

    /**
     * Returns the page geometry associated with the Imagick object in an
     * associative array with the keys "width", "height", "x", and "y".
     *
     * @return array
     **/
    function getPage() {}

    /**
     * Returns a MagickPixelIterator.
     *
     * @return ImagickPixelIterator
     **/
    function getPixelIterator() {}

    /**
     * Get an ImagickPixelIterator for an image section.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return ImagickPixelIterator
     **/
    function getPixelRegionIterator($x, $y, $columns, $rows) {}

    /**
     * Returns the objects point size property.
     *
     * @return string
     **/
    function getPointSize() {}

    /**
     * Returns the Imagick quantum depth as a string.
     *
     * @return array
     **/
    function getQuantumDepth() {}

    /**
     * Returns the Imagick quantum range as a string.
     *
     * @return array
     **/
    function getQuantumRange() {}

    /**
     * Returns the ImageMagick release date as a string.
     *
     * @return string
     **/
    function getReleaseDate() {}

    /**
     * Returns the specified resource's memory usage in megabytes.
     *
     * @param int
     * @return int
     **/
    function getResource($type) {}

    /**
     * Returns the specified resource limit in megabytes.
     *
     * @param int
     * @return int
     **/
    function getResourceLimit($type) {}

    /**
     * Gets the horizontal and vertical sampling factor.
     *
     * @return array
     **/
    function getSamplingFactors() {}

    /**
     * Returns the size associated with the Imagick object as an array with
     * the keys "columns" and "rows".
     *
     * @return array
     **/
    function getSize() {}

    /**
     * Returns the size offset associated with the Imagick object.
     *
     * @return int
     **/
    function getSizeOffset() {}

    /**
     * Returns the ImageMagick API version as a string and as a number.
     *
     * @return array
     **/
    function getVersion() {}

    /**
     * Returns if the object has more images when traversing the list in the
     * forward direction.
     *
     * @return bool
     **/
    function hasNextImage() {}

    /**
     * Returns if the object has more images when traversing the list in the
     * reverse direction
     *
     * @return bool
     **/
    function hasPreviousImage() {}

    /**
     * Identifies an image and returns the attributes. Attributes include the
     * image width, height, size, and others.
     *
     * @param bool
     * @return array
     **/
    function identifyImage($appendRawOutput) {}

    /**
     * Creates a new image that is a copy of an existing one with the image
     * pixels "imploded" by the specified percentage.
     *
     * @param float
     * @return bool
     **/
    function implodeImage($radius) {}

    /**
     * Imports pixels from an array into an image. The map is usually 'RGB'.
     * This method imposes the following constraints for the parameters:
     * amount of pixels in the array must match width x height x length of
     * the map.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @param string
     * @param int
     * @param array
     * @return bool
     **/
    function importImagePixels($x, $y, $width, $height, $map, $storage, $pixels) {}

    /**
     * Adds a label to an image.
     *
     * @param string
     * @return bool
     **/
    function labelImage($label) {}

    /**
     * Adjusts the levels of an image by scaling the colors falling between
     * specified white and black points to the full available quantum range.
     * The parameters provided represent the black, mid, and white points.
     * The black point specifies the darkest color in the image. Colors
     * darker than the black point are set to zero. Mid point specifies a
     * gamma correction to apply to the image. White point specifies the
     * lightest color in the image. Colors brighter than the white point are
     * set to the maximum quantum value.
     *
     * @param float
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function levelImage($blackPoint, $gamma, $whitePoint, $channel) {}

    /**
     * Stretches with saturation the image intensity.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function linearStretchImage($blackPoint, $whitePoint) {}

    /**
     * This method scales the images using liquid rescaling method. This
     * method is an implementation of a technique called seam carving. In
     * order for this method to work as expected ImageMagick must be compiled
     * with liblqr support.
     *
     * @param int
     * @param int
     * @param float
     * @param float
     * @return bool
     **/
    function liquidRescaleImage($width, $height, $delta_x, $rigidity) {}

    /**
     * Is a convenience method that scales an image proportionally to twice
     * its original size.
     *
     * @return bool
     **/
    function magnifyImage() {}

    /**
     * @param Imagick
     * @param bool
     * @return bool
     **/
    function mapImage($map, $dither) {}

    /**
     * Changes the transparency value of any pixel that matches target and is
     * an immediate neighbor. If the method FillToBorderMethod is specified,
     * the transparency value is changed for any neighbor pixel that does not
     * match the bordercolor member of image.
     *
     * @param float
     * @param float
     * @param mixed
     * @param int
     * @param int
     * @return bool
     **/
    function matteFloodfillImage($alpha, $fuzz, $bordercolor, $x, $y) {}

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     * Each pixel is replaced by the median in a set of neighboring pixels as
     * defined by radius.
     *
     * @param float
     * @return bool
     **/
    function medianFilterImage($radius) {}

    /**
     * Merges image layers into one. This method is useful when working with
     * image formats that use multiple layers such as PSD. The merging is
     * controlled using the layer_method which defines how the layers are
     * merged.
     *
     * @param int
     * @return bool
     **/
    function mergeImageLayers($layer_method) {}

    /**
     * Is a convenience method that scales an image proportionally to
     * one-half its original size
     *
     * @return bool
     **/
    function minifyImage() {}

    /**
     * Lets you control the brightness, saturation, and hue of an image. Hue
     * is the percentage of absolute rotation from the current position. For
     * example 50 results in a counter-clockwise rotation of 90 degrees, 150
     * results in a clockwise rotation of 90 degrees, with 0 and 200 both
     * resulting in a rotation of 180 degrees.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function modulateImage($brightness, $saturation, $hue) {}

    /**
     * Creates a composite image by combining several separate images. he
     * images are tiled on the composite image with the name of the image
     * optionally appearing just below the individual tile.
     *
     * @param ImagickDraw
     * @param string
     * @param string
     * @param int
     * @param string
     * @return Imagick
     **/
    function montageImage($draw, $tile_geometry, $thumbnail_geometry, $mode, $frame) {}

    /**
     * Method morphs a set of images. Both the image pixels and size are
     * linearly interpolated to give the appearance of a meta-morphosis from
     * one image to the next.
     *
     * @param int
     * @return Imagick
     **/
    function morphImages($number_frames) {}

    /**
     * Inlays an image sequence to form a single coherent picture. It returns
     * a wand with each image in the sequence composited at the location
     * defined by the page offset of the image.
     *
     * @return Imagick
     **/
    function mosaicImages() {}

    /**
     * Simulates motion blur. We convolve the image with a Gaussian operator
     * of the given radius and standard deviation (sigma). For reasonable
     * results, radius should be larger than sigma. Use a radius of 0 and
     * MotionBlurImage() selects a suitable radius for you. Angle gives the
     * angle of the blurring motion.
     *
     * @param float
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function motionBlurImage($radius, $sigma, $angle, $channel) {}

    /**
     * Negates the colors in the reference image. The Grayscale option means
     * that only grayscale values within the image are negated.
     *
     * @param bool
     * @param int
     * @return bool
     **/
    function negateImage($gray, $channel) {}

    /**
     * Creates a new image and associates ImagickPixel value as background
     * color
     *
     * @param int
     * @param int
     * @param mixed
     * @param string
     * @return bool
     **/
    function newImage($cols, $rows, $background, $format) {}

    /**
     * Creates a new image using ImageMagick pseudo-formats.
     *
     * @param int
     * @param int
     * @param string
     * @return bool
     **/
    function newPseudoImage($columns, $rows, $pseudoString) {}

    /**
     * Associates the next image in the image list with an Imagick object.
     *
     * @return bool
     **/
    function nextImage() {}

    /**
     * Enhances the contrast of a color image by adjusting the pixels color
     * to span the entire range of colors available.
     *
     * @param int
     * @return bool
     **/
    function normalizeImage($channel) {}

    /**
     * Applies a special effect filter that simulates an oil painting. Each
     * pixel is replaced by the most frequent color occurring in a circular
     * region defined by radius.
     *
     * @param float
     * @return bool
     **/
    function oilPaintImage($radius) {}

    /**
     * Changes any pixel that matches color with the color defined by fill.
     *
     * @param mixed
     * @param mixed
     * @param float
     * @param bool
     * @param int
     * @return bool
     **/
    function opaquePaintImage($target, $fill, $fuzz, $invert, $channel) {}

    /**
     * Compares each image the GIF disposed forms of the previous image in
     * the sequence. From this it attempts to select the smallest cropped
     * image to replace each frame, while preserving the results of the
     * animation.
     *
     * @return bool
     **/
    function optimizeImageLayers() {}

    /**
     * Performs an ordered dither based on a number of pre-defined dithering
     * threshold maps, but over multiple intensity levels, which can be
     * different for different channels, according to the input arguments.
     *
     * @param string
     * @param int
     * @return bool
     **/
    function orderedPosterizeImage($threshold_map, $channel) {}

    /**
     * Changes the color value of any pixel that matches target and is an
     * immediate neighbor. As of ImageMagick 6.3.8 this method has been
     * deprecated and Imagick::floodfillPaintImage should be used instead.
     *
     * @param mixed
     * @param float
     * @param mixed
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function paintFloodfillImage($fill, $fuzz, $bordercolor, $x, $y, $channel) {}

    /**
     * Changes any pixel that matches color with the color defined by fill.
     *
     * @param mixed
     * @param mixed
     * @param float
     * @param int
     * @return bool
     **/
    function paintOpaqueImage($target, $fill, $fuzz, $channel) {}

    /**
     * Changes any pixel that matches color with the color defined by fill.
     *
     * @param mixed
     * @param float
     * @param float
     * @return bool
     **/
    function paintTransparentImage($target, $alpha, $fuzz) {}

    /**
     * This method can be used to query image width, height, size, and format
     * without reading the whole image in to memory.
     *
     * @param string
     * @return bool
     **/
    function pingImage($filename) {}

    /**
     * This method can be used to query image width, height, size, and format
     * without reading the whole image to memory.
     *
     * @param string
     * @return bool
     **/
    function pingImageBlob($image) {}

    /**
     * This method can be used to query image width, height, size, and format
     * without reading the whole image to memory.
     *
     * @param resource
     * @param string
     * @return bool
     **/
    function pingImageFile($filehandle, $fileName) {}

    /**
     * Simulates a Polaroid picture.
     *
     * @param ImagickDraw
     * @param float
     * @return bool
     **/
    function polaroidImage($properties, $angle) {}

    /**
     * Reduces the image to a limited number of color level.
     *
     * @param int
     * @param bool
     * @return bool
     **/
    function posterizeImage($levels, $dither) {}

    /**
     * Tiles 9 thumbnails of the specified image with an image processing
     * operation applied at varying strengths. This is helpful to quickly
     * pin-point an appropriate parameter for an image processing operation.
     *
     * @param int
     * @return bool
     **/
    function previewImages($preview) {}

    /**
     * Assocates the previous image in an image list with the Imagick object.
     *
     * @return bool
     **/
    function previousImage() {}

    /**
     * Adds or removes a ICC, IPTC, or generic profile from an image. If the
     * profile is NULL, it is removed from the image otherwise added. Use a
     * name of '*' and a profile of NULL to remove all profiles from the
     * image.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function profileImage($name, $profile) {}

    /**
     * @param int
     * @param int
     * @param int
     * @param bool
     * @param bool
     * @return bool
     **/
    function quantizeImage($numberColors, $colorspace, $treedepth, $dither, $measureError) {}

    /**
     * @param int
     * @param int
     * @param int
     * @param bool
     * @param bool
     * @return bool
     **/
    function quantizeImages($numberColors, $colorspace, $treedepth, $dither, $measureError) {}

    /**
     * Returns a multi-dimensional array representing the font metrics.
     *
     * @param ImagickDraw
     * @param string
     * @param bool
     * @return array
     **/
    function queryFontMetrics($properties, $text, $multiline) {}

    /**
     * Returns formats supported by Imagick.
     *
     * @param string
     * @return array
     **/
    function queryFonts($pattern) {}

    /**
     * Returns formats supported by Imagick.
     *
     * @param string
     * @return array
     **/
    function queryFormats($pattern) {}

    /**
     * Radial blurs an image.
     *
     * @param float
     * @param int
     * @return bool
     **/
    function radialBlurImage($angle, $channel) {}

    /**
     * Creates a simulated three-dimensional button-like effect by lightening
     * and darkening the edges of the image. Members width and height of
     * raise_info define the width of the vertical and horizontal edge of the
     * effect.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @param bool
     * @return bool
     **/
    function raiseImage($width, $height, $x, $y, $raise) {}

    /**
     * Changes the value of individual pixels based on the intensity of each
     * pixel compared to threshold. The result is a high-contrast, two color
     * image.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function randomThresholdImage($low, $high, $channel) {}

    /**
     * Reads image from filename
     *
     * @param string
     * @return bool
     **/
    function readImage($filename) {}

    /**
     * Reads image from a binary string
     *
     * @param string
     * @param string
     * @return bool
     **/
    function readImageBlob($image, $filename) {}

    /**
     * Reads image from open filehandle
     *
     * @param resource
     * @param string
     * @return bool
     **/
    function readImageFile($filehandle, $fileName) {}

    /**
     * Smooths the contours of an image while still preserving edge
     * information. The algorithm works by replacing each pixel with its
     * neighbor closest in value. A neighbor is defined by radius. Use a
     * radius of 0 and Imagick::reduceNoiseImage() selects a suitable radius
     * for you.
     *
     * @param float
     * @return bool
     **/
    function reduceNoiseImage($radius) {}

    /**
     * Removes an image from the image list.
     *
     * @return bool
     **/
    function removeImage() {}

    /**
     * Removes the named image profile and returns it.
     *
     * @param string
     * @return string
     **/
    function removeImageProfile($name) {}

    /**
     * Renders all preceding drawing commands.
     *
     * @return bool
     **/
    function render() {}

    /**
     * Resample image to desired resolution.
     *
     * @param float
     * @param float
     * @param int
     * @param float
     * @return bool
     **/
    function resampleImage($x_resolution, $y_resolution, $filter, $blur) {}

    /**
     * The page definition as a string. The string is in format WxH+x+y.
     *
     * @param string
     * @return bool
     **/
    function resetImagePage($page) {}

    /**
     * Scales an image to the desired dimensions with a filter.
     *
     * @param int
     * @param int
     * @param int
     * @param float
     * @param bool
     * @return bool
     **/
    function resizeImage($columns, $rows, $filter, $blur, $fit) {}

    /**
     * Offsets an image as defined by x and y.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function rollImage($x, $y) {}

    /**
     * Rotates an image the specified number of degrees. Empty triangles left
     * over from rotating the image are filled with the background color.
     *
     * @param mixed
     * @param float
     * @return bool
     **/
    function rotateImage($background, $degrees) {}

    /**
     * Rounds image corners. The first two parameters control the amount of
     * rounding and the three last parameters can be used to fine-tune the
     * rounding process.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function roundCorners($x_rounding, $y_rounding, $stroke_width, $displace, $size_correction) {}

    /**
     * Scales an image to the desired dimensions with pixel sampling. Unlike
     * other scaling methods, this method does not introduce any additional
     * color into the scaled image.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function sampleImage($columns, $rows) {}

    /**
     * Scales the size of an image to the given dimensions. The other
     * parameter will be calculated if 0 is passed as either param.
     *
     * @param int
     * @param int
     * @param bool
     * @return bool
     **/
    function scaleImage($cols, $rows, $fit) {}

    /**
     * Analyses the image and identifies units that are similar.
     *
     * @param int
     * @param float
     * @param float
     * @param boolean
     * @return void
     **/
    function segmentImage($COLORSPACE, $cluster_threshold, $smooth_threshold, $verbose) {}

    /**
     * Separates a channel from the image and returns a grayscale image. A
     * channel is a particular color component of each pixel in the image.
     *
     * @param int
     * @return bool
     **/
    function separateImageChannel($channel) {}

    /**
     * Applies a special effect to the image, similar to the effect achieved
     * in a photo darkroom by sepia toning. Threshold ranges from 0 to
     * QuantumRange and is a measure of the extent of the sepia toning. A
     * threshold of 80 is a good starting point for a reasonable tone.
     *
     * @param float
     * @return bool
     **/
    function sepiaToneImage($threshold) {}

    /**
     * Sets the object's default background color.
     *
     * @param mixed
     * @return bool
     **/
    function setBackgroundColor($background) {}

    /**
     * Sets the object's default compression type
     *
     * @param int
     * @return bool
     **/
    function setCompression($compression) {}

    /**
     * Sets the object's default compression quality.
     *
     * @param int
     * @return bool
     **/
    function setCompressionQuality($quality) {}

    /**
     * Sets the filename before you read or write an image file.
     *
     * @param string
     * @return bool
     **/
    function setFilename($filename) {}

    /**
     * Sets the Imagick iterator to the first image.
     *
     * @return bool
     **/
    function setFirstIterator() {}

    /**
     * Sets object's font property. This method can be used for example to
     * set font for caption: pseudo-format. The font needs to be configured
     * in ImageMagick confiration or a file by the name of font must exist.
     * This method should not be confused with ImagickDraw::setFont which
     * sets the font for a specific ImagickDraw object.
     *
     * @param string
     * @return bool
     **/
    function setFont($font) {}

    /**
     * Sets the format of the Imagick object.
     *
     * @param string
     * @return bool
     **/
    function setFormat($format) {}

    /**
     * Sets the global gravity property for the Imagick object.
     *
     * @param int
     * @return bool
     **/
    function setGravity($gravity) {}

    /**
     * Replaces the current image sequence with the image from replace
     * object.
     *
     * @param Imagick
     * @return bool
     **/
    function setImage($replace) {}

    /**
     * Activate or deactivate image alpha channel. The mode is one of the
     * Imagick::ALPHACHANNEL_* constants.
     *
     * @param int
     * @return bool
     **/
    function setImageAlphaChannel($mode) {}

    /**
     * Sets the image background color.
     *
     * @param mixed
     * @return bool
     **/
    function setImageBackgroundColor($background) {}

    /**
     * Sets the image bias for any method that convolves an image (e.g.
     * Imagick::ConvolveImage()).
     *
     * @param float
     * @return bool
     **/
    function setImageBias($bias) {}

    /**
     * Sets the image chromaticity blue primary point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function setImageBluePrimary($x, $y) {}

    /**
     * Sets the image border color.
     *
     * @param mixed
     * @return bool
     **/
    function setImageBorderColor($border) {}

    /**
     * Sets the depth of a particular image channel.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setImageChannelDepth($channel, $depth) {}

    /**
     * Sets image clip mask from another Imagick object.
     *
     * @param Imagick
     * @return bool
     **/
    function setImageClipMask($clip_mask) {}

    /**
     * Sets the color of the specified colormap index.
     *
     * @param int
     * @param ImagickPixel
     * @return bool
     **/
    function setImageColormapColor($index, $color) {}

    /**
     * Sets the image colorspace.
     *
     * @param int
     * @return bool
     **/
    function setImageColorspace($colorspace) {}

    /**
     * Sets the image composite operator, useful for specifying how to
     * composite the image thumbnail when using the Imagick::montageImage()
     * method.
     *
     * @param int
     * @return bool
     **/
    function setImageCompose($compose) {}

    /**
     * @param int
     * @return bool
     **/
    function setImageCompression($compression) {}

    /**
     * Sets the image compression quality.
     *
     * @param int
     * @return bool
     **/
    function setImageCompressionQuality($quality) {}

    /**
     * Sets the image delay.
     *
     * @param int
     * @return bool
     **/
    function setImageDelay($delay) {}

    /**
     * Sets the image depth.
     *
     * @param int
     * @return bool
     **/
    function setImageDepth($depth) {}

    /**
     * Sets the image disposal method.
     *
     * @param int
     * @return bool
     **/
    function setImageDispose($dispose) {}

    /**
     * Sets the image size (i.e. columns rows).
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setImageExtent($columns, $rows) {}

    /**
     * Sets the filename of a particular image in a sequence.
     *
     * @param string
     * @return bool
     **/
    function setImageFilename($filename) {}

    /**
     * Sets the format of a particular image in a sequence.
     *
     * @param string
     * @return bool
     **/
    function setImageFormat($format) {}

    /**
     * Sets the image gamma.
     *
     * @param float
     * @return bool
     **/
    function setImageGamma($gamma) {}

    /**
     * Sets the gravity property for the current image. This method can be
     * used to set the gravity property for a single image sequence.
     *
     * @param int
     * @return bool
     **/
    function setImageGravity($gravity) {}

    /**
     * Sets the image chromaticity green primary point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function setImageGreenPrimary($x, $y) {}

    /**
     * Set the iterator to the position in the image list specified with the
     * index parameter.
     * 
     * This method has been deprecated. See Imagick::setIteratorIndex
     *
     * @param int
     * @return bool
     **/
    function setImageIndex($index) {}

    /**
     * Sets the image compression.
     *
     * @param int
     * @return bool
     **/
    function setImageInterlaceScheme($interlace_scheme) {}

    /**
     * Sets the image interpolate pixel method.
     *
     * @param int
     * @return bool
     **/
    function setImageInterpolateMethod($method) {}

    /**
     * Sets the image iterations.
     *
     * @param int
     * @return bool
     **/
    function setImageIterations($iterations) {}

    /**
     * Sets the image matte channel.
     *
     * @param bool
     * @return bool
     **/
    function setImageMatte($matte) {}

    /**
     * Sets the image matte color.
     *
     * @param mixed
     * @return bool
     **/
    function setImageMatteColor($matte) {}

    /**
     * Sets the image to the specified opacity level.
     *
     * @param float
     * @return bool
     **/
    function setImageOpacity($opacity) {}

    /**
     * Sets the image orientation.
     *
     * @param int
     * @return bool
     **/
    function setImageOrientation($orientation) {}

    /**
     * Sets the page geometry of the image.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function setImagePage($width, $height, $x, $y) {}

    /**
     * Adds a named profile to the Imagick object. If a profile with the same
     * name already exists, it is replaced. This method differs from the
     * Imagick::ProfileImage() method in that it does not apply any CMS color
     * profiles.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function setImageProfile($name, $profile) {}

    /**
     * Sets a named property to the image.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function setImageProperty($name, $value) {}

    /**
     * Sets the image chromaticity red primary point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function setImageRedPrimary($x, $y) {}

    /**
     * Sets the image rendering intent.
     *
     * @param int
     * @return bool
     **/
    function setImageRenderingIntent($rendering_intent) {}

    /**
     * Sets the image resolution.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function setImageResolution($x_resolution, $y_resolution) {}

    /**
     * Sets the image scene.
     *
     * @param int
     * @return bool
     **/
    function setImageScene($scene) {}

    /**
     * Sets the image ticks-per-second.
     *
     * @param int
     * @return bool
     **/
    function setImageTicksPerSecond($ticks_persecond) {}

    /**
     * Sets the image type.
     *
     * @param int
     * @return bool
     **/
    function setImageType($image_type) {}

    /**
     * Sets the image units of resolution.
     *
     * @param int
     * @return bool
     **/
    function setImageUnits($units) {}

    /**
     * Sets the image virtual pixel method.
     *
     * @param int
     * @return bool
     **/
    function setImageVirtualPixelMethod($method) {}

    /**
     * Sets the image chromaticity white point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function setImageWhitePoint($x, $y) {}

    /**
     * Sets the image compression.
     *
     * @param int
     * @return bool
     **/
    function setInterlaceScheme($interlace_scheme) {}

    /**
     * Set the iterator to the position in the image list specified with the
     * index parameter.
     *
     * @param int
     * @return bool
     **/
    function setIteratorIndex($index) {}

    /**
     * Sets the Imagick iterator to the last image.
     *
     * @return bool
     **/
    function setLastIterator() {}

    /**
     * Associates one or options with the wand.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function setOption($key, $value) {}

    /**
     * Sets the page geometry of the Imagick object.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function setPage($width, $height, $x, $y) {}

    /**
     * Sets object's point size property. This method can be used for example
     * to set font size for caption: pseudo-format.
     *
     * @param float
     * @return bool
     **/
    function setPointSize($point_size) {}

    /**
     * Sets the image resolution.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function setResolution($x_resolution, $y_resolution) {}

    /**
     * Sets the limit for a particular resource in megabytes.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setResourceLimit($type, $limit) {}

    /**
     * Sets the image sampling factors.
     *
     * @param array
     * @return bool
     **/
    function setSamplingFactors($factors) {}

    /**
     * Sets the size of the Imagick object. Set it before you read a raw
     * image format such as RGB, GRAY, or CMYK.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setSize($columns, $rows) {}

    /**
     * Sets the size and offset of the Imagick object. Set it before you read
     * a raw image format such as RGB, GRAY, or CMYK.
     *
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function setSizeOffset($columns, $rows, $offset) {}

    /**
     * Sets the image type attribute.
     *
     * @param int
     * @return bool
     **/
    function setType($image_type) {}

    /**
     * Shines a distant light on an image to create a three-dimensional
     * effect. You control the positioning of the light with azimuth and
     * elevation; azimuth is measured in degrees off the x axis and elevation
     * is measured in pixels above the Z axis.
     *
     * @param bool
     * @param float
     * @param float
     * @return bool
     **/
    function shadeImage($gray, $azimuth, $elevation) {}

    /**
     * Simulates an image shadow.
     *
     * @param float
     * @param float
     * @param int
     * @param int
     * @return bool
     **/
    function shadowImage($opacity, $sigma, $x, $y) {}

    /**
     * Sharpens an image. We convolve the image with a Gaussian operator of
     * the given radius and standard deviation (sigma). For reasonable
     * results, the radius should be larger than sigma. Use a radius of 0 and
     * selects a suitable radius for you.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function sharpenImage($radius, $sigma, $channel) {}

    /**
     * Shaves pixels from the image edges. It allocates the memory necessary
     * for the new Image structure and returns a pointer to the new image.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function shaveImage($columns, $rows) {}

    /**
     * Slides one edge of an image along the X or Y axis, creating a
     * parallelogram. An X direction shear slides an edge along the X axis,
     * while a Y direction shear slides an edge along the Y axis. The amount
     * of the shear is controlled by a shear angle. For X direction shears,
     * x_shear is measured relative to the Y axis, and similarly, for Y
     * direction shears y_shear is measured relative to the X axis. Empty
     * triangles left over from shearing the image are filled with the
     * background color.
     *
     * @param mixed
     * @param float
     * @param float
     * @return bool
     **/
    function shearImage($background, $x_shear, $y_shear) {}

    /**
     * Adjusts the contrast of an image with a non-linear sigmoidal contrast
     * algorithm. Increase the contrast of the image using a sigmoidal
     * transfer function without saturating highlights or shadows. Contrast
     * indicates how much to increase the contrast (0 is none; 3 is typical;
     * 20 is pushing it); mid-point indicates where midtones fall in the
     * resultant image (0 is white; 50 is middle-gray; 100 is black). Set
     * sharpen to to increase the image contrast otherwise the contrast is
     * reduced.
     *
     * @param bool
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function sigmoidalContrastImage($sharpen, $alpha, $beta, $channel) {}

    /**
     * Simulates a pencil sketch. We convolve the image with a Gaussian
     * operator of the given radius and standard deviation (sigma). For
     * reasonable results, radius should be larger than sigma. Use a radius
     * of 0 and Imagick::sketchImage() selects a suitable radius for you.
     * Angle gives the angle of the blurring motion.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function sketchImage($radius, $sigma, $angle) {}

    /**
     * Applies a special effect to the image, similar to the effect achieved
     * in a photo darkroom by selectively exposing areas of photo sensitive
     * paper to light. Threshold ranges from 0 to QuantumRange and is a
     * measure of the extent of the solarization.
     *
     * @param int
     * @return bool
     **/
    function solarizeImage($threshold) {}

    /**
     * Splices a solid color into the image.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function spliceImage($width, $height, $x, $y) {}

    /**
     * Special effects method that randomly displaces each pixel in a block
     * defined by the radius parameter.
     *
     * @param float
     * @return bool
     **/
    function spreadImage($radius) {}

    /**
     * Hides a digital watermark within the image. Recover the hidden
     * watermark later to prove that the authenticity of an image. Offset
     * defines the start position within the image to hide the watermark.
     *
     * @param Imagick
     * @param int
     * @return Imagick
     **/
    function steganoImage($watermark_wand, $offset) {}

    /**
     * Composites two images and produces a single image that is the
     * composite of a left and right image of a stereo pair.
     *
     * @param Imagick
     * @return bool
     **/
    function stereoImage($offset_wand) {}

    /**
     * Strips an image of all profiles and comments.
     *
     * @return bool
     **/
    function stripImage() {}

    /**
     * Swirls the pixels about the center of the image, where degrees
     * indicates the sweep of the arc through which each pixel is moved. You
     * get a more dramatic effect as the degrees move from 1 to 360.
     *
     * @param float
     * @return bool
     **/
    function swirlImage($degrees) {}

    /**
     * Repeatedly tiles the texture image across and down the image canvas.
     *
     * @param Imagick
     * @return bool
     **/
    function textureImage($texture_wand) {}

    /**
     * Changes the value of individual pixels based on the intensity of each
     * pixel compared to threshold. The result is a high-contrast, two color
     * image.
     *
     * @param float
     * @param int
     * @return bool
     **/
    function thresholdImage($threshold, $channel) {}

    /**
     * Changes the size of an image to the given dimensions and removes any
     * associated profiles. The goal is to produce small low cost thumbnail
     * images suited for display on the Web.
     * 
     * If is given as a third parameter then columns and rows parameters are
     * used as maximums for each side. Both sides will be scaled down until
     * the match or are smaller than the parameter given for the side.
     *
     * @param int
     * @param int
     * @param bool
     * @return bool
     **/
    function thumbnailImage($columns, $rows, $fit) {}

    /**
     * Applies a color vector to each pixel in the image. The length of the
     * vector is 0 for black and white and at its maximum for the midtones.
     * The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).
     *
     * @param mixed
     * @param mixed
     * @return bool
     **/
    function tintImage($tint, $opacity) {}

    /**
     * A convenience method for setting crop size and the image geometry from
     * strings.
     *
     * @param string
     * @param string
     * @return Imagick
     **/
    function transformImage($crop, $geometry) {}

    /**
     * Paints pixels matching the target color transparent.
     *
     * @param mixed
     * @param float
     * @param float
     * @param bool
     * @return bool
     **/
    function transparentPaintImage($target, $alpha, $fuzz, $invert) {}

    /**
     * Creates a vertical mirror image by reflecting the pixels around the
     * central x-axis while rotating them 90-degrees.
     *
     * @return bool
     **/
    function transposeImage() {}

    /**
     * Creates a horizontal mirror image by reflecting the pixels around the
     * central y-axis while rotating them 270-degrees.
     *
     * @return bool
     **/
    function transverseImage() {}

    /**
     * Remove edges that are the background color from the image.
     *
     * @param float
     * @return bool
     **/
    function trimImage($fuzz) {}

    /**
     * Discards all but one of any pixel color.
     *
     * @return bool
     **/
    function uniqueImageColors() {}

    /**
     * Sharpens an image. We convolve the image with a Gaussian operator of
     * the given radius and standard deviation (sigma). For reasonable
     * results, radius should be larger than sigma. Use a radius of 0 and
     * Imagick::UnsharpMaskImage() selects a suitable radius for you.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function unsharpMaskImage($radius, $sigma, $amount, $threshold, $channel) {}

    /**
     * Checks if the current item is valid.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Softens the edges of the image in vignette style.
     *
     * @param float
     * @param float
     * @param int
     * @param int
     * @return bool
     **/
    function vignetteImage($blackPoint, $whitePoint, $x, $y) {}

    /**
     * Applies a wave filter to the image.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function waveImage($amplitude, $length) {}

    /**
     * Is like Imagick::ThresholdImage() but force all pixels above the
     * threshold into white while leaving all pixels below the threshold
     * unchanged.
     *
     * @param mixed
     * @return bool
     **/
    function whiteThresholdImage($threshold) {}

    /**
     * Writes an image to the specified filename. If the filename parameter
     * is NULL, the image is written to the filename set by
     * Imagick::ReadImage() or Imagick::SetImageFilename().
     *
     * @param string
     * @return bool
     **/
    function writeImage($filename) {}

    /**
     * Writes the image sequence to an open filehandle. The handle must be
     * opened with for example fopen.
     *
     * @param resource
     * @return bool
     **/
    function writeImageFile($filehandle) {}

    /**
     * Writes an image or image sequence.
     *
     * @param string
     * @param bool
     * @return bool
     **/
    function writeImages($filename, $adjoin) {}

    /**
     * Writes all image frames into an open filehandle. This method can be
     * used to write animated gifs or other multiframe images into open
     * filehandle.
     *
     * @param resource
     * @return bool
     **/
    function writeImagesFile($filehandle) {}

    /**
     * The Imagick constructor
     *
     * @param mixed
     * @return Imagick
     **/
    function __construct($files) {}

}
class ImagickDraw {
    /**
     * Adjusts the current affine transformation matrix with the specified
     * affine transformation matrix.
     *
     * @param array
     * @return bool
     **/
    function affine($affine) {}

    /**
     * Draws text on the image.
     *
     * @param float
     * @param float
     * @param string
     * @return bool
     **/
    function annotation($x, $y, $text) {}

    /**
     * Draws an arc falling within a specified bounding rectangle on the
     * image.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function arc($sx, $sy, $ex, $ey, $sd, $ed) {}

    /**
     * Draws a bezier curve through a set of points on the image.
     *
     * @param array
     * @return bool
     **/
    function bezier($coordinates) {}

    /**
     * Draws a circle on the image.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function circle($ox, $oy, $px, $py) {}

    /**
     * Clears the ImagickDraw object of any accumulated commands, and resets
     * the settings it contains to their defaults.
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Draws color on image using the current fill color, starting at
     * specified position, and using specified paint method.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function color($x, $y, $paintMethod) {}

    /**
     * Adds a comment to a vector output stream.
     *
     * @param string
     * @return bool
     **/
    function comment($comment) {}

    /**
     * Composites an image onto the current image, using the specified
     * composition operator, specified position, and at the specified size.
     *
     * @param int
     * @param float
     * @param float
     * @param float
     * @param float
     * @param Imagick
     * @return bool
     **/
    function composite($compose, $x, $y, $width, $height, $compositeWand) {}

    /**
     * Frees all resources associated with the ImagickDraw object.
     *
     * @return bool
     **/
    function destroy() {}

    /**
     * Draws an ellipse on the image.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function ellipse($ox, $oy, $rx, $ry, $start, $end) {}

    /**
     * Obtains the current clipping path ID.
     *
     * @return string
     **/
    function getClipPath() {}

    /**
     * Returns the current polygon fill rule to be used by the clipping path.
     *
     * @return int
     **/
    function getClipRule() {}

    /**
     * Returns the interpretation of clip path units.
     *
     * @return int
     **/
    function getClipUnits() {}

    /**
     * Returns the fill color used for drawing filled objects.
     *
     * @return ImagickPixel
     **/
    function getFillColor() {}

    /**
     * Returns the opacity used when drawing using the fill color or fill
     * texture. Fully opaque is 1.0.
     *
     * @return float
     **/
    function getFillOpacity() {}

    /**
     * Returns the fill rule used while drawing polygons.
     *
     * @return int
     **/
    function getFillRule() {}

    /**
     * Returns a string specifying the font used when annotating with text.
     *
     * @return string
     **/
    function getFont() {}

    /**
     * Returns the font family to use when annotating with text.
     *
     * @return string
     **/
    function getFontFamily() {}

    /**
     * Returns the font pointsize used when annotating with text.
     *
     * @return float
     **/
    function getFontSize() {}

    /**
     * Returns the font style used when annotating with text.
     *
     * @return int
     **/
    function getFontStyle() {}

    /**
     * Returns the font weight used when annotating with text.
     *
     * @return int
     **/
    function getFontWeight() {}

    /**
     * Returns the text placement gravity used when annotating with text.
     *
     * @return int
     **/
    function getGravity() {}

    /**
     * Returns the current stroke antialias setting. Stroked outlines are
     * antialiased by default. When antialiasing is disabled stroked pixels
     * are thresholded to determine if the stroke color or underlying canvas
     * color should be used.
     *
     * @return bool
     **/
    function getStrokeAntialias() {}

    /**
     * Returns the color used for stroking object outlines.
     *
     * @param ImagickPixel
     * @return ImagickPixel
     **/
    function getStrokeColor($stroke_color) {}

    /**
     * Returns an array representing the pattern of dashes and gaps used to
     * stroke paths.
     *
     * @return array
     **/
    function getStrokeDashArray() {}

    /**
     * Returns the offset into the dash pattern to start the dash.
     *
     * @return float
     **/
    function getStrokeDashOffset() {}

    /**
     * Returns the shape to be used at the end of open subpaths when they are
     * stroked.
     *
     * @return int
     **/
    function getStrokeLineCap() {}

    /**
     * Returns the shape to be used at the corners of paths (or other vector
     * shapes) when they are stroked.
     *
     * @return int
     **/
    function getStrokeLineJoin() {}

    /**
     * Returns the miter limit. When two line segments meet at a sharp angle
     * and miter joins have been specified for 'lineJoin', it is possible for
     * the miter to extend far beyond the thickness of the line stroking the
     * path. The miterLimit' imposes a limit on the ratio of the miter length
     * to the 'lineWidth'.
     *
     * @return int
     **/
    function getStrokeMiterLimit() {}

    /**
     * Returns the opacity of stroked object outlines.
     *
     * @return float
     **/
    function getStrokeOpacity() {}

    /**
     * Returns the width of the stroke used to draw object outlines.
     *
     * @return float
     **/
    function getStrokeWidth() {}

    /**
     * Returns the alignment applied when annotating with text.
     *
     * @return int
     **/
    function getTextAlignment() {}

    /**
     * Returns the current text antialias setting, which determines whether
     * text is antialiased. Text is antialiased by default.
     *
     * @return bool
     **/
    function getTextAntialias() {}

    /**
     * Returns the decoration applied when annotating with text.
     *
     * @return int
     **/
    function getTextDecoration() {}

    /**
     * Returns a string which specifies the code set used for text
     * annotations.
     *
     * @return string
     **/
    function getTextEncoding() {}

    /**
     * Returns the color of a background rectangle to place under text
     * annotations.
     *
     * @return ImagickPixel
     **/
    function getTextUnderColor() {}

    /**
     * Returns a string which specifies the vector graphics generated by any
     * graphics calls made since the ImagickDraw object was instantiated.
     *
     * @return string
     **/
    function getVectorGraphics() {}

    /**
     * Draws a line on the image using the current stroke color, stroke
     * opacity, and stroke width.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function line($sx, $sy, $ex, $ey) {}

    /**
     * Paints on the image's opacity channel in order to set effected pixels
     * to transparent. to influence the opacity of pixels.
     *
     * @param float
     * @param float
     * @param int
     * @return bool
     **/
    function matte($x, $y, $paintMethod) {}

    /**
     * Adds a path element to the current path which closes the current
     * subpath by drawing a straight line from the current point to the
     * current subpath's most recent starting point (usually, the most recent
     * moveto point).
     *
     * @return bool
     **/
    function pathClose() {}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point at the beginning of the curve and (x2,y2)
     * as the control point at the end of the curve using absolute
     * coordinates. At the end of the command, the new current point becomes
     * the final (x,y) coordinate pair used in the polybezier.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToAbsolute($x1, $y1, $x2, $y2, $x, $y) {}

    /**
     * Draws a quadratic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point using absolute coordinates. At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToQuadraticBezierAbsolute($x1, $y1, $x, $y) {}

    /**
     * Draws a quadratic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point using relative coordinates. At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToQuadraticBezierRelative($x1, $y1, $x, $y) {}

    /**
     * Draws a quadratic Bezier curve (using relative coordinates) from the
     * current point to (x,y). The control point is assumed to be the
     * reflection of the control point on the previous command relative to
     * the current point. (If there is no previous command or if the previous
     * command was not a DrawPathCurveToQuadraticBezierAbsolute,
     * DrawPathCurveToQuadraticBezierRelative,
     * DrawPathCurveToQuadraticBezierSmoothAbsolut or
     * DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point
     * is coincident with the current point.). At the end of the command, the
     * new current point becomes the final (x,y) coordinate pair used in the
     * polybezier.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToQuadraticBezierSmoothAbsolute($x, $y) {}

    /**
     * Draws a quadratic Bezier curve (using relative coordinates) from the
     * current point to (x, y). The control point is assumed to be the
     * reflection of the control point on the previous command relative to
     * the current point. (If there is no previous command or if the previous
     * command was not a DrawPathCurveToQuadraticBezierAbsolute,
     * DrawPathCurveToQuadraticBezierRelative,
     * DrawPathCurveToQuadraticBezierSmoothAbsolut or
     * DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point
     * is coincident with the current point). At the end of the command, the
     * new current point becomes the final (x, y) coordinate pair used in the
     * polybezier.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToQuadraticBezierSmoothRelative($x, $y) {}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point at the beginning of the curve and (x2,y2)
     * as the control point at the end of the curve using relative
     * coordinates. At the end of the command, the new current point becomes
     * the final (x,y) coordinate pair used in the polybezier.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToRelative($x1, $y1, $x2, $y2, $x, $y) {}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * absolute coordinates. The first control point is assumed to be the
     * reflection of the second control point on the previous command
     * relative to the current point. (If there is no previous command or if
     * the previous command was not an DrawPathCurveToAbsolute,
     * DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or
     * DrawPathCurveToSmoothRelative, assume the first control point is
     * coincident with the current point.) (x2,y2) is the second control
     * point (i.e., the control point at the end of the curve). At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToSmoothAbsolute($x2, $y2, $x, $y) {}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * relative coordinates. The first control point is assumed to be the
     * reflection of the second control point on the previous command
     * relative to the current point. (If there is no previous command or if
     * the previous command was not an DrawPathCurveToAbsolute,
     * DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or
     * DrawPathCurveToSmoothRelative, assume the first control point is
     * coincident with the current point.) (x2,y2) is the second control
     * point (i.e., the control point at the end of the curve). At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pathCurveToSmoothRelative($x2, $y2, $x, $y) {}

    /**
     * Draws an elliptical arc from the current point to (x, y) using
     * absolute coordinates. The size and orientation of the ellipse are
     * defined by two radii (rx, ry) and an xAxisRotation, which indicates
     * how the ellipse as a whole is rotated relative to the current
     * coordinate system. The center (cx, cy) of the ellipse is calculated
     * automatically to satisfy the constraints imposed by the other
     * parameters. largeArcFlag and sweepFlag contribute to the automatic
     * calculations and help determine how the arc is drawn. If largeArcFlag
     * is then draw the larger of the available arcs. If sweepFlag is true,
     * then draw the arc matching a clock-wise rotation.
     *
     * @param float
     * @param float
     * @param float
     * @param bool
     * @param bool
     * @param float
     * @param float
     * @return bool
     **/
    function pathEllipticArcAbsolute($rx, $ry, $x_axis_rotation, $large_arc_flag, $sweep_flag, $x, $y) {}

    /**
     * Draws an elliptical arc from the current point to (x, y) using
     * relative coordinates. The size and orientation of the ellipse are
     * defined by two radii (rx, ry) and an xAxisRotation, which indicates
     * how the ellipse as a whole is rotated relative to the current
     * coordinate system. The center (cx, cy) of the ellipse is calculated
     * automatically to satisfy the constraints imposed by the other
     * parameters. largeArcFlag and sweepFlag contribute to the automatic
     * calculations and help determine how the arc is drawn. If largeArcFlag
     * is then draw the larger of the available arcs. If sweepFlag is true,
     * then draw the arc matching a clock-wise rotation.
     *
     * @param float
     * @param float
     * @param float
     * @param bool
     * @param bool
     * @param float
     * @param float
     * @return bool
     **/
    function pathEllipticArcRelative($rx, $ry, $x_axis_rotation, $large_arc_flag, $sweep_flag, $x, $y) {}

    /**
     * Terminates the current path.
     *
     * @return bool
     **/
    function pathFinish() {}

    /**
     * Draws a line path from the current point to the given coordinate using
     * absolute coordinates. The coordinate then becomes the new current
     * point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function pathLineToAbsolute($x, $y) {}

    /**
     * Draws a horizontal line path from the current point to the target
     * point using absolute coordinates. The target point then becomes the
     * new current point.
     *
     * @param float
     * @return bool
     **/
    function pathLineToHorizontalAbsolute($x) {}

    /**
     * Draws a horizontal line path from the current point to the target
     * point using relative coordinates. The target point then becomes the
     * new current point.
     *
     * @param float
     * @return bool
     **/
    function pathLineToHorizontalRelative($x) {}

    /**
     * Draws a line path from the current point to the given coordinate using
     * relative coordinates. The coordinate then becomes the new current
     * point.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function pathLineToRelative($x, $y) {}

    /**
     * Draws a vertical line path from the current point to the target point
     * using absolute coordinates. The target point then becomes the new
     * current point.
     *
     * @param float
     * @return bool
     **/
    function pathLineToVerticalAbsolute($y) {}

    /**
     * Draws a vertical line path from the current point to the target point
     * using relative coordinates. The target point then becomes the new
     * current point.
     *
     * @param float
     * @return bool
     **/
    function pathLineToVerticalRelative($y) {}

    /**
     * Starts a new sub-path at the given coordinate using absolute
     * coordinates. The current point then becomes the specified coordinate.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function pathMoveToAbsolute($x, $y) {}

    /**
     * Starts a new sub-path at the given coordinate using relative
     * coordinates. The current point then becomes the specified coordinate.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function pathMoveToRelative($x, $y) {}

    /**
     * Declares the start of a path drawing list which is terminated by a
     * matching DrawPathFinish() command. All other DrawPath commands must be
     * enclosed between a and a DrawPathFinish() command. This is because
     * path drawing commands are subordinate commands and they do not
     * function by themselves.
     *
     * @return bool
     **/
    function pathStart() {}

    /**
     * Draws a point using the current stroke color and stroke thickness at
     * the specified coordinates.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function point($x, $y) {}

    /**
     * Draws a polygon using the current stroke, stroke width, and fill color
     * or texture, using the specified array of coordinates.
     *
     * @param array
     * @return bool
     **/
    function polygon($coordinates) {}

    /**
     * Draws a polyline using the current stroke, stroke width, and fill
     * color or texture, using the specified array of coordinates.
     *
     * @param array
     * @return bool
     **/
    function polyline($coordinates) {}

    /**
     * Destroys the current ImagickDraw in the stack, and returns to the
     * previously pushed ImagickDraw. Multiple ImagickDraws may exist. It is
     * an error to attempt to pop more ImagickDraws than have been pushed,
     * and it is proper form to pop all ImagickDraws which have been pushed.
     *
     * @return bool
     **/
    function pop() {}

    /**
     * Terminates a clip path definition.
     *
     * @return bool
     **/
    function popClipPath() {}

    /**
     * Terminates a definition list.
     *
     * @return bool
     **/
    function popDefs() {}

    /**
     * Terminates a pattern definition.
     *
     * @return bool
     **/
    function popPattern() {}

    /**
     * Clones the current ImagickDraw to create a new ImagickDraw, which is
     * then added to the ImagickDraw stack. The original drawing
     * ImagickDraw(s) may be returned to by invoking pop(). The ImagickDraws
     * are stored on a ImagickDraw stack. For every Pop there must have
     * already been an equivalent Push.
     *
     * @return bool
     **/
    function push() {}

    /**
     * Starts a clip path definition which is comprised of any number of
     * drawing commands and terminated by a ImagickDraw::popClipPath()
     * command.
     *
     * @param string
     * @return bool
     **/
    function pushClipPath($clip_mask_id) {}

    /**
     * Indicates that commands up to a terminating ImagickDraw::popDefs()
     * command create named elements (e.g. clip-paths, textures, etc.) which
     * may safely be processed earlier for the sake of efficiency.
     *
     * @return bool
     **/
    function pushDefs() {}

    /**
     * Indicates that subsequent commands up to a DrawPopPattern() command
     * comprise the definition of a named pattern. The pattern space is
     * assigned top left corner coordinates, a width and height, and becomes
     * its own drawing space. Anything which can be drawn may be used in a
     * pattern definition. Named patterns may be used as stroke or brush
     * definitions.
     *
     * @param string
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function pushPattern($pattern_id, $x, $y, $width, $height) {}

    /**
     * Draws a rectangle given two coordinates and using the current stroke,
     * stroke width, and fill settings.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function rectangle($x1, $y1, $x2, $y2) {}

    /**
     * Renders all preceding drawing commands onto the image.
     *
     * @return bool
     **/
    function render() {}

    /**
     * Applies the specified rotation to the current coordinate space.
     *
     * @param float
     * @return bool
     **/
    function rotate($degrees) {}

    /**
     * Draws a rounded rectangle given two coordinates, x y corner radiuses
     * and using the current stroke, stroke width, and fill settings.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function roundRectangle($x1, $y1, $x2, $y2, $rx, $ry) {}

    /**
     * Adjusts the scaling factor to apply in the horizontal and vertical
     * directions to the current coordinate space.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function scale($x, $y) {}

    /**
     * Associates a named clipping path with the image. Only the areas drawn
     * on by the clipping path will be modified as long as it remains in
     * effect.
     *
     * @param string
     * @return bool
     **/
    function setClipPath($clip_mask) {}

    /**
     * Set the polygon fill rule to be used by the clipping path.
     *
     * @param int
     * @return bool
     **/
    function setClipRule($fill_rule) {}

    /**
     * Sets the interpretation of clip path units.
     *
     * @param int
     * @return bool
     **/
    function setClipUnits($clip_units) {}

    /**
     * Sets the opacity to use when drawing using the fill color or fill
     * texture. Fully opaque is 1.0.
     *
     * @param float
     * @return bool
     **/
    function setFillAlpha($opacity) {}

    /**
     * Sets the fill color to be used for drawing filled objects.
     *
     * @param ImagickPixel
     * @return bool
     **/
    function setFillColor($fill_pixel) {}

    /**
     * Sets the opacity to use when drawing using the fill color or fill
     * texture. Fully opaque is 1.0.
     *
     * @param float
     * @return bool
     **/
    function setFillOpacity($fillOpacity) {}

    /**
     * Sets the URL to use as a fill pattern for filling objects. Only local
     * URLs ("#identifier") are supported at this time. These local URLs are
     * normally created by defining a named fill pattern with
     * DrawPushPattern/DrawPopPattern.
     *
     * @param string
     * @return bool
     **/
    function setFillPatternURL($fill_url) {}

    /**
     * Sets the fill rule to use while drawing polygons.
     *
     * @param int
     * @return bool
     **/
    function setFillRule($fill_rule) {}

    /**
     * Sets the fully-specified font to use when annotating with text.
     *
     * @param string
     * @return bool
     **/
    function setFont($font_name) {}

    /**
     * Sets the font family to use when annotating with text.
     *
     * @param string
     * @return bool
     **/
    function setFontFamily($font_family) {}

    /**
     * Sets the font pointsize to use when annotating with text.
     *
     * @param float
     * @return bool
     **/
    function setFontSize($pointsize) {}

    /**
     * Sets the font stretch to use when annotating with text. The AnyStretch
     * enumeration acts as a wild-card "don't care" option.
     *
     * @param int
     * @return bool
     **/
    function setFontStretch($fontStretch) {}

    /**
     * Sets the font style to use when annotating with text. The AnyStyle
     * enumeration acts as a wild-card "don't care" option.
     *
     * @param int
     * @return bool
     **/
    function setFontStyle($style) {}

    /**
     * Sets the font weight to use when annotating with text.
     *
     * @param int
     * @return bool
     **/
    function setFontWeight($font_weight) {}

    /**
     * Sets the text placement gravity to use when annotating with text.
     *
     * @param int
     * @return bool
     **/
    function setGravity($gravity) {}

    /**
     * Specifies the opacity of stroked object outlines.
     *
     * @param float
     * @return bool
     **/
    function setStrokeAlpha($opacity) {}

    /**
     * Controls whether stroked outlines are antialiased. Stroked outlines
     * are antialiased by default. When antialiasing is disabled stroked
     * pixels are thresholded to determine if the stroke color or underlying
     * canvas color should be used.
     *
     * @param bool
     * @return bool
     **/
    function setStrokeAntialias($stroke_antialias) {}

    /**
     * Sets the color used for stroking object outlines.
     *
     * @param ImagickPixel
     * @return bool
     **/
    function setStrokeColor($stroke_pixel) {}

    /**
     * Specifies the pattern of dashes and gaps used to stroke paths. The
     * strokeDashArray represents an array of numbers that specify the
     * lengths of alternating dashes and gaps in pixels. If an odd number of
     * values is provided, then the list of values is repeated to yield an
     * even number of values. To remove an existing dash array, pass a zero
     * number_elements argument and null dash_array. A typical
     * strokeDashArray_ array might contain the members 5 3 2.
     *
     * @param array
     * @return bool
     **/
    function setStrokeDashArray($dashArray) {}

    /**
     * Specifies the offset into the dash pattern to start the dash.
     *
     * @param float
     * @return bool
     **/
    function setStrokeDashOffset($dash_offset) {}

    /**
     * Specifies the shape to be used at the end of open subpaths when they
     * are stroked.
     *
     * @param int
     * @return bool
     **/
    function setStrokeLineCap($linecap) {}

    /**
     * Specifies the shape to be used at the corners of paths (or other
     * vector shapes) when they are stroked.
     *
     * @param int
     * @return bool
     **/
    function setStrokeLineJoin($linejoin) {}

    /**
     * Specifies the miter limit. When two line segments meet at a sharp
     * angle and miter joins have been specified for 'lineJoin', it is
     * possible for the miter to extend far beyond the thickness of the line
     * stroking the path. The miterLimit' imposes a limit on the ratio of the
     * miter length to the 'lineWidth'.
     *
     * @param int
     * @return bool
     **/
    function setStrokeMiterLimit($miterlimit) {}

    /**
     * Specifies the opacity of stroked object outlines.
     *
     * @param float
     * @return bool
     **/
    function setStrokeOpacity($stroke_opacity) {}

    /**
     * Sets the pattern used for stroking object outlines.
     *
     * @param string
     * @return bool
     **/
    function setStrokePatternURL($stroke_url) {}

    /**
     * Sets the width of the stroke used to draw object outlines.
     *
     * @param float
     * @return bool
     **/
    function setStrokeWidth($stroke_width) {}

    /**
     * Specifies a text alignment to be applied when annotating with text.
     *
     * @param int
     * @return bool
     **/
    function setTextAlignment($alignment) {}

    /**
     * Controls whether text is antialiased. Text is antialiased by default.
     *
     * @param bool
     * @return bool
     **/
    function setTextAntialias($antiAlias) {}

    /**
     * Specifies a decoration to be applied when annotating with text.
     *
     * @param int
     * @return bool
     **/
    function setTextDecoration($decoration) {}

    /**
     * Specifies specifies the code set to use for text annotations. The only
     * character encoding which may be specified at this time is "UTF-8" for
     * representing Unicode as a sequence of bytes. Specify an empty string
     * to set text encoding to the system's default. Successful text
     * annotation using Unicode may require fonts designed to support
     * Unicode.
     *
     * @param string
     * @return bool
     **/
    function setTextEncoding($encoding) {}

    /**
     * Specifies the color of a background rectangle to place under text
     * annotations.
     *
     * @param ImagickPixel
     * @return bool
     **/
    function setTextUnderColor($under_color) {}

    /**
     * Sets the vector graphics associated with the specified ImagickDraw
     * object. Use this method with ImagickDraw::getVectorGraphics() as a
     * method to persist the vector graphics state.
     *
     * @param string
     * @return bool
     **/
    function setVectorGraphics($xml) {}

    /**
     * Sets the overall canvas size to be recorded with the drawing vector
     * data. Usually this will be specified using the same size as the canvas
     * image. When the vector data is saved to SVG or MVG formats, the
     * viewbox is use to specify the size of the canvas image that a viewer
     * will render the vector data on.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function setViewbox($x1, $y1, $x2, $y2) {}

    /**
     * Skews the current coordinate system in the horizontal direction.
     *
     * @param float
     * @return bool
     **/
    function skewX($degrees) {}

    /**
     * Skews the current coordinate system in the vertical direction.
     *
     * @param float
     * @return bool
     **/
    function skewY($degrees) {}

    /**
     * Applies a translation to the current coordinate system which moves the
     * coordinate system origin to the specified coordinate.
     *
     * @param float
     * @param float
     * @return bool
     **/
    function translate($x, $y) {}

    /**
     * The ImagickDraw constructor
     *
     * @return ImagickDraw
     **/
    function __construct() {}

}
class ImagickPixel {
    /**
     * Clears the ImagickPixel object, leaving it in a fresh state. This also
     * unsets any color associated with the object.
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Deallocates any resources used by the ImagickPixel object, and unsets
     * any associated color. The object should not be used after the destroy
     * function has been called.
     *
     * @return bool
     **/
    function destroy() {}

    /**
     * Returns the color described by the ImagickPixel object, as an array.
     * If the color has an opacity channel set, this is provided as a fourth
     * value in the list.
     *
     * @param bool
     * @return array
     **/
    function getColor($normalized) {}

    /**
     * Returns the color of the ImagickPixel object as a string.
     *
     * @return string
     **/
    function getColorAsString() {}

    /**
     * Returns the color count associated with this color.
     *
     * @return int
     **/
    function getColorCount() {}

    /**
     * Retrieves the value of the color channel specified, as a
     * floating-point number between 0 and 1.
     *
     * @param int
     * @return float
     **/
    function getColorValue($color) {}

    /**
     * Returns the normalized HSL color described by the ImagickPixel object,
     * with each of the three values as floating point numbers between 0.0
     * and 1.0.
     *
     * @return array
     **/
    function getHSL() {}

    /**
     * Checks the distance between the color described by this ImagickPixel
     * object and that of the provided object, by plotting their RGB values
     * on the color cube. If the distance between the two points is less than
     * the fuzz value given, the colors are similar.
     *
     * @param ImagickPixel
     * @param float
     * @return bool
     **/
    function isSimilar($color, $fuzz) {}

    /**
     * Sets the color described by the ImagickPixel object, with a string
     * (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)",
     * etc.).
     *
     * @param string
     * @return bool
     **/
    function setColor($color) {}

    /**
     * Sets the value of the specified channel of this object to the provided
     * value, which should be between 0 and 1. This function can be used to
     * provide an opacity channel to an ImagickPixel object.
     *
     * @param int
     * @param float
     * @return bool
     **/
    function setColorValue($color, $value) {}

    /**
     * Sets the color described by the ImagickPixel object using normalized
     * values for hue, saturation and luminosity.
     *
     * @param float
     * @param float
     * @param float
     * @return bool
     **/
    function setHSL($hue, $saturation, $luminosity) {}

    /**
     * Constructs an ImagickPixel object. If a color is specified, the object
     * is constructed and then initialised with that color before being
     * returned.
     *
     * @param string
     * @return ImagickPixel
     **/
    function __construct($color) {}

}
class ImagickPixelIterator {
    /**
     * Clear resources associated with a PixelIterator.
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Deallocates resources associated with a PixelIterator.
     *
     * @return bool
     **/
    function destroy() {}

    /**
     * Returns the current row as an array of ImagickPixel objects from the
     * pixel iterator.
     *
     * @return array
     **/
    function getCurrentIteratorRow() {}

    /**
     * Returns the current pixel iterator row.
     *
     * @return int
     **/
    function getIteratorRow() {}

    /**
     * Returns the next row as an array of pixel wands from the pixel
     * iterator.
     *
     * @return array
     **/
    function getNextIteratorRow() {}

    /**
     * Returns the previous row as an array of pixel wands from the pixel
     * iterator.
     *
     * @return array
     **/
    function getPreviousIteratorRow() {}

    /**
     * Returns a new pixel iterator.
     *
     * @param Imagick
     * @return bool
     **/
    function newPixelIterator($wand) {}

    /**
     * Returns a new pixel iterator.
     *
     * @param Imagick
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function newPixelRegionIterator($wand, $x, $y, $columns, $rows) {}

    /**
     * Resets the pixel iterator. Use it in conjunction with
     * ImagickPixelIterator::getNextIteratorRow() to iterate over all the
     * pixels in a pixel container.
     *
     * @return bool
     **/
    function resetIterator() {}

    /**
     * Sets the pixel iterator to the first pixel row.
     *
     * @return bool
     **/
    function setIteratorFirstRow() {}

    /**
     * Sets the pixel iterator to the last pixel row.
     *
     * @return bool
     **/
    function setIteratorLastRow() {}

    /**
     * Set the pixel iterator row.
     *
     * @param int
     * @return bool
     **/
    function setIteratorRow($row) {}

    /**
     * Syncs the pixel iterator.
     *
     * @return bool
     **/
    function syncIterator() {}

    /**
     * The ImagickPixelIterator constructor
     *
     * @param Imagick
     * @return ImagickPixelIterator
     **/
    function __construct($wand) {}

}
class InfiniteIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Moves the inner Iterator forward to its next element if there is one,
     * otherwise rewinds the inner Iterator back to the beginning.
     *
     * @return void
     **/
    function next() {}

    /**
     * Constructs an InfiniteIterator from an Iterator.
     *
     * @param Iterator
     **/
    function __construct($iterator) {}

}
class IntlDateFormatter {
    /**
     * Create a date formatter
     *
     * @param string
     * @param int
     * @param int
     * @param string
     * @param int
     * @param string
     * @return IntlDateFormatter
     **/
    function create($locale, $datetype, $timetype, $timezone, $calendar, $pattern) {}

    /**
     * Formats the time value as a string.
     *
     * @param mixed
     * @return string
     **/
    function format($value) {}

    /**
     * @return int
     **/
    function getCalendar() {}

    /**
     * Returns date type used by the formatter.
     *
     * @return int
     **/
    function getDateType() {}

    /**
     * Get the error code from last operation. Returns error code from the
     * last number formatting operation.
     *
     * @return int
     **/
    function getErrorCode() {}

    /**
     * Get the error text from the last operation.
     *
     * @return string
     **/
    function getErrorMessage() {}

    /**
     * Get locale used by the formatter.
     *
     * @param int
     * @return string
     **/
    function getLocale($which) {}

    /**
     * Get pattern used by the formatter.
     *
     * @return string
     **/
    function getPattern() {}

    /**
     * Return time type used by the formatter.
     *
     * @return int
     **/
    function getTimeType() {}

    /**
     * Get the timezone-id used for the IntlDateFormatter.
     *
     * @return string
     **/
    function getTimeZoneId() {}

    /**
     * Check if the parser is strict or lenient in interpreting inputs that
     * do not match the pattern exactly.
     *
     * @return bool
     **/
    function isLenient() {}

    /**
     * Converts string $value to a field-based time value ( an array of
     * various fields), starting at $parse_pos and consuming as much of the
     * input value as possible.
     *
     * @param string
     * @param int
     * @return array
     **/
    function localtime($value, &$position) {}

    /**
     * Converts string $value to an incremental time value, starting at
     * $parse_pos and consuming as much of the input value as possible.
     *
     * @param string
     * @param int
     * @return int
     **/
    function parse($value, &$position) {}

    /**
     * Sets the calendar used by the formatter.
     *
     * @param int
     * @return bool
     **/
    function setCalendar($which) {}

    /**
     * Define if the parser is strict or lenient in interpreting inputs that
     * do not match the pattern exactly. Enabling lenient parsing allows the
     * parser to accept otherwise flawed date or time patterns, parsing as
     * much as possible to obtain a value. Extra space, unrecognized tokens,
     * or invalid values ("February 30th") are not accepted.
     *
     * @param bool
     * @return bool
     **/
    function setLenient($lenient) {}

    /**
     * Set the pattern used for the IntlDateFormatter.
     *
     * @param string
     * @return bool
     **/
    function setPattern($pattern) {}

    /**
     * Sets the time zone to use.
     *
     * @param string
     * @return bool
     **/
    function setTimeZoneId($zone) {}

}
class InvalidArgumentException extends LogicException {
}
class Iterator {
}
class IteratorIterator implements Iterator, Traversable, OuterIterator {
    /**
     * Get the value of the current element.
     *
     * @return void
     **/
    function current() {}

    /**
     * Get the inner iterator.
     *
     * @return void
     **/
    function getInnerIterator() {}

    /**
     * Get the key of the current element.
     *
     * @return void
     **/
    function key() {}

    /**
     * Forward to the next element.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewinds to the first element.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Checks if the iterator is valid.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Creates an iterator from anything that is traversable.
     *
     * @param Traversable
     **/
    function __construct($iterator) {}

}
class KTaglib_ID3v2_AttachedPictureFrame {
    const Artist = 0;
    const BackCover = 0;
    const Band = 0;
    const BandLogo = 0;
    const ColouredFish = 0;
    const Composer = 0;
    const Conductor = 0;
    const DuringPerformance = 0;
    const DuringRecording = 0;
    const FileIcon = 0;
    const FrontCover = 0;
    const Illustration = 0;
    const LeadArtist = 0;
    const LeafletPage = 0;
    const Lyricist = 0;
    const Media = 0;
    const MovieScreenCapture = 0;
    const Other = 0;
    const OtherFileIcon = 0;
    const RecordingLocation = 0;
    /**
     * Returns the attached description for a picture frame in an ID3v2.x
     * frame.
     *
     * @return string
     **/
    function getDescription() {}

    /**
     * Sets the mime type of the image. This should in most cases be
     * "image/png" or "image/jpeg".
     *
     * @param string
     * @return string
     **/
    function getMimeType($type) {}

    /**
     * Returns the type of the image.
     * 
     * The ID3v2 specification allows an AttachedPictureFrame to set the type
     * of an image. This can be e.g. FrontCover or FileIcon. Please refer to
     * the KTagLib_ID3v2_AttachedPictureFrame class description for a list of
     * available types.
     *
     * @return int
     **/
    function getType() {}

    /**
     * Saves the attached picture to the given filename.
     *
     * @param string
     * @return bool
     **/
    function savePicture($filename) {}

    /**
     * Sets the picture to the give image. The image is loaded from the given
     * filename. 	Please note that the picture is not saved unless you call
     * the save method of the 	corresponding file object.
     *
     * @param string
     * @return void
     **/
    function setPicture($filename) {}

    /**
     * Sets the type of the image. This can be e.g. FrontCover or FileIcon.
     * Please refer to the KTaglib_ID3v2_AttachedPictureFrame class
     * description for a list of available types and their constant mappings.
     *
     * @param int
     * @return void
     **/
    function setType($type) {}

}
class KTagLib_ID3v2_Frame extends KTagLib_ID3v2_Frame {
    /**
     * Returns the size of the frame in bytes. Please refer to id3.org to see
     * what ID3v2 frames are and how they are defined.
     *
     * @return int
     **/
    function getSize() {}

    /**
     * Returns a string representation of the frame. This might be just the
     * frame id, but might contain more information. Please see the ktaglib
     * documentation for more information
     *
     * @return string
     **/
    function __toString() {}

}
class KTaglib_ID3v2_Tag {
    /**
     * Adds a frame to the ID3v2 tag. The frame must be a valid
     * KTagLib_ID3v2_Frame object. 	To save the tag, the save function needs
     * to be invoked.
     *
     * @param KTagLib_ID3v2_Frame
     * @return bool
     **/
    function addFrame($frame) {}

    /**
     * Returns an array of ID3v2 frames, associated with the ID3v2 tag.
     *
     * @return array
     **/
    function getFrameList() {}

}
class KTaglib_MPEG_AudioProperties {
    /**
     * Returns the bitrate of the MPEG file
     *
     * @return int
     **/
    function getBitrate() {}

    /**
     * Returns the amount of channels of the MPEG file
     *
     * @return int
     **/
    function getChannels() {}

    /**
     * Returns the layer of the MPEG file (usually 3 for MP3).
     *
     * @return int
     **/
    function getLayer() {}

    /**
     * Returns the length of the MPEG file
     *
     * @return int
     **/
    function getLength() {}

    /**
     * Returns the sample bitrate of the MPEG file
     *
     * @return int
     **/
    function getSampleBitrate() {}

    /**
     * Returns the version of the MPEG file header. The possible versions are
     * 	defined in Tag_MPEG_Header (Version1, Version2, Version2.5).
     *
     * @return int
     **/
    function getVersion() {}

    /**
     * Returns true if the MPEG file is copyrighted
     *
     * @return bool
     **/
    function isCopyrighted() {}

    /**
     * Returns true if the file is marked as the original file
     *
     * @return bool
     **/
    function isOriginal() {}

    /**
     * Returns true if protection mechanism (like DRM) are enabled for this
     * file
     *
     * @return bool
     **/
    function isProtectionEnabled() {}

}
class KTaglib_MPEG_File {
    /**
     * Returns an object that provides access to the audio properties of the
     * mpeg file.
     *
     * @return KTaglib_MPEG_File:
     **/
    function getAudioProperties() {}

    /**
     * Returns an object that represents an ID3v1 tag, which can be used to
     * get information about the ID3v1 tag.
     *
     * @param bool
     * @return KTaglib_ID3v1_Tag
     **/
    function getID3v1Tag($create) {}

    /**
     * Returns a ID3v2 object for the mpeg file. If no ID3v2 Tag is present,
     * an KTaglib_TagNotFoundException is thrown.
     *
     * @param bool
     * @return KTaglib_ID3v2_Tag
     **/
    function getID3v2Tag($create) {}

}
class KTaglib_MPEG_Header {
    const Version1 = 0;
    const Version2 = 0;
    const Version2_5 = 0;
}
class KTagLib_Tag extends KTagLib_Tag {
    /**
     * Returns the album string of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     *
     * @return string
     **/
    function getAlbum() {}

    /**
     * Returns the artist string of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     *
     * @return string
     **/
    function getArtist() {}

    /**
     * Returns the comment of an ID3 tag. This method is implemented in ID3v1
     * and ID3v2 tags.
     *
     * @return string
     **/
    function getComment() {}

    /**
     * Returns the genre of an ID3 tag. This method is implemented in ID3v1
     * and ID3v2 tags.
     *
     * @return string
     **/
    function getGenre() {}

    /**
     * Returns the title string of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     *
     * @return string
     **/
    function getTitle() {}

    /**
     * Returns the track number of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     *
     * @return int
     **/
    function getTrack() {}

    /**
     * Returns the year of an ID3 tag. This method is implemented in ID3v1
     * and ID3v2 tags.
     *
     * @return int
     **/
    function getYear() {}

    /**
     * Returns true if the tag exists, but is empty. This method is
     * implemented in ID3v1 and ID3v2 tags.
     *
     * @return bool
     **/
    function isEmpty() {}

}
class LengthException extends LogicException {
}
class libXMLError {
}
class LimitIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Gets the current element.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * Gets the inner iterator.
     *
     * @return Iterator
     **/
    function getInnerIterator() {}

    /**
     * @return int
     **/
    function getPosition() {}

    /**
     * Gets the current key
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Moves the iterator forward.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewinds the iterator to the specified starting offset.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * @param int
     * @return void
     **/
    function seek($position) {}

    /**
     * Checks whether the current element is valid.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Constructs a new LimitIterator, which consists of a passed in iterator
     * with limits applied to it.
     *
     * @param Iterator
     * @param string
     * @param string
     **/
    function __construct($iterator, $offset, $count) {}

}
class Locale {
    /**
     * Tries to find locale that can satisfy the language list that is
     * requested by the 	HTTP "Accept-Language" header.
     *
     * @param string
     * @return string
     **/
    function acceptFromHttp($header) {}

    /**
     * Returns a correctly ordered and delimited locale ID the keys identify
     * the particular locale ID subtags, and the values are the associated
     * subtag values.
     *
     * @param array
     * @return string
     **/
    function composeLocale($subtags) {}

    /**
     * Checks if a $langtag filter matches with $locale according to RFC
     * 4647's basic filtering algorithm
     *
     * @param string
     * @param string
     * @param bool
     * @return bool
     **/
    function filterMatches($langtag, $locale, $canonicalize) {}

    /**
     * Gets the variants for the input locale
     *
     * @param string
     * @return array
     **/
    function getAllVariants($locale) {}

    /**
     * Gets the default locale value. At the PHP initialization this value is
     * set to 'intl.default_locale' value from if that value exists or from
     * ICU's function uloc_getDefault().
     *
     * @return string
     **/
    function getDefault() {}

    /**
     * Returns an appropriately localized display name for language of the
     * input locale. If is then the default locale is used.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getDisplayLanguage($locale, $in_locale) {}

    /**
     * Returns an appropriately localized display name for the input locale.
     * If is then the default locale is used.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getDisplayName($locale, $in_locale) {}

    /**
     * Returns an appropriately localized display name for region of the
     * input locale. If is then the default locale is used.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getDisplayRegion($locale, $in_locale) {}

    /**
     * Returns an appropriately localized display name for script of the
     * input locale. If is then the default locale is used.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getDisplayScript($locale, $in_locale) {}

    /**
     * Returns an appropriately localized display name for variants of the
     * input locale. If is then the default locale is used.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getDisplayVariant($locale, $in_locale) {}

    /**
     * Gets the keywords for the input locale.
     *
     * @param string
     * @return array
     **/
    function getKeywords($locale) {}

    /**
     * Gets the primary language for the input locale
     *
     * @param string
     * @return string
     **/
    function getPrimaryLanguage($locale) {}

    /**
     * Gets the region for the input locale.
     *
     * @param string
     * @return string
     **/
    function getRegion($locale) {}

    /**
     * Gets the script for the input locale.
     *
     * @param string
     * @return string
     **/
    function getScript($locale) {}

    /**
     * Searches the items in langtag for the best match to the language range
     * specified in locale according to RFC 4647's lookup algorithm.
     *
     * @param array
     * @param string
     * @param bool
     * @param string
     * @return string
     **/
    function lookup($langtag, $locale, $canonicalize, $default) {}

    /**
     * Returns a key-value array of locale ID subtag elements.
     *
     * @param string
     * @return array
     **/
    function parseLocale($locale) {}

    /**
     * Sets the default runtime locale to $locale. This changes the value of
     * INTL global 'default_locale' locale identifier. UAX #35 extensions are
     * accepted.
     *
     * @param string
     * @return bool
     **/
    function setDefault($locale) {}

}
class LogicException extends Exception {
}
class maxdb {
    /**
     * maxdb_affected_rows returns the number of rows affected by the last
     * INSERT, UPDATE, or DELETE query associated with the provided link
     * parameter. If this number cannot be determined, this function will
     * return -1.
     * 
     * The maxdb_affected_rows function only works with queries which modify
     * a table. In order to return the number of rows from a SELECT query,
     * use the maxdb_num_rows function instead.
     *
     * @var int
     **/
    var $affected_rows;
    /**
     * The maxdb_errno function will return the last error code for the most
     * recent MaxDB function call that can succeed or fail with respect to
     * the database link defined by the link parameter. If no errors have
     * occured, this function will return zero.
     *
     * @var int
     **/
    var $errno;
    /**
     * The maxdb_error function is identical to the corresponding maxdb_errno
     * function in every way, except instead of returning an integer error
     * code the maxdb_error function will return a string representation of
     * the last error to occur for the database connection represented by the
     * link parameter. If no error has occured, this function will return an
     * empty string.
     *
     * @var string
     **/
    var $error;
    /**
     * Procdural style:
     * 
     * The maxdb_get_host_info function returns a string describing the
     * connection represented by the link parameter is using.
     *
     * @var string
     **/
    var $host_info;
    /**
     * The maxdb_info function returns a string providing information about
     * the last query executed. The nature of this string is provided below:
     * 
     * Possible maxdb_info return values
     * 
     * Query type Example result string
     * 
     * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0
     * 
     * INSERT INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0
     * Warnings: 0
     * 
     * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
     * 
     * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0
     * 
     * UPDATE ... Rows matched: 40 Changed: 40 Warnings: 0
     *
     * @var string
     **/
    var $info;
    /**
     * The maxdb_insert_id function returns the ID generated by a query on a
     * table with a column having the DEFAULT SERIAL attribute. If the last
     * query wasn't an INSERT or UPDATE statement or if the modified table
     * does not have a column with the DEFAULT SERIAL attribute, this
     * function will return zero.
     *
     * @var mixed
     **/
    var $insert_id;
    /**
     * Returns the number of rows in the result set.
     * 
     * The use of maxdb_num_rows depends on whether you use buffered or
     * unbuffered result sets. In case you use unbuffered resultsets
     * maxdb_num_rows will not correct the correct number of rows until all
     * the rows in the result have been retrieved.
     *
     * @var int
     **/
    var $num_rows;
    /**
     * Returns an integer representing the MaxDB protocol version used by the
     * connection represented by the link parameter.
     *
     * @var string
     **/
    var $protocol_version;
    /**
     * Returns a string representing the version of the MaxDB server that the
     * MaxDB extension is connected to (represented by the link parameter).
     *
     * @var string
     **/
    var $server_info;
    /**
     * The maxdb_get_server_version function returns the version of the
     * server connected to (represented by the link parameter) as an integer.
     * 
     * The form of this version number is main_version * 10000 +
     * minor_version * 100 + sub_version (i.e. version 7.5.0 is 70500).
     *
     * @var int
     **/
    var $server_version;
    /**
     * Returns a string containing the SQLSTATE error code for the last
     * error. The error code consists of five characters. '00000' means no
     * error. The values are specified by ANSI SQL and ODBC.
     *
     * @var string
     **/
    var $sqlstate;
    /**
     * The maxdb_thread_id function returns the thread ID for the current
     * connection which can then be killed using the maxdb_kill function. If
     * the connection is lost and you reconnect with maxdb_ping, the thread
     * ID will be other. Therefore you should get the thread ID only when you
     * need it.
     *
     * @var int
     **/
    var $thread_id;
    /**
     * maxdb_warning_count returns the number of warnings from the last query
     * in the connection represented by the link parameter.
     *
     * @var int
     **/
    var $warning_count;
    /**
     * maxdb_autocommit is used to turn on or off auto-commit mode on queries
     * for the database connection represented by the link resource.
     *
     * @param bool
     * @return bool
     **/
    function auto_commit($mode) {}

    /**
     * maxdb_change_user is used to change the user of the specified database
     * connection as given by the link parameter and to set the current
     * database to that specified by the database parameter.
     * 
     * In order to successfully change users a valid username and password
     * parameters must be provided and that user must have sufficient
     * permissions to access the desired database. If for any reason
     * authorization fails, the current user authentication will remain.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function change_user($user, $password, $database) {}

    /**
     * Returns the current character set for the database connection
     * specified by the link parameter.
     *
     * @return string
     **/
    function character_set_name() {}

    /**
     * The maxdb_close function closes a previously opened database
     * connection specified by the link parameter.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Commits the current transaction for the database connection specified
     * by the link parameter.
     *
     * @return bool
     **/
    function commit() {}

    /**
     * @return void
     **/
    function disable_reads_from_master() {}

    /**
     * Returns the number of columns for the most recent query on the
     * connection represented by the link parameter. This function can be
     * useful when using the maxdb_store_result function to determine if the
     * query should have produced a non-empty result set or not without
     * knowing the nature of the query.
     *
     * @return int
     **/
    function field_count() {}

    /**
     * This function is used to disconnect from a MaxDB server specified by
     * the processid parameter.
     *
     * @param int
     * @return bool
     **/
    function kill($processid) {}

    /**
     * Returns the current character set for the database connection
     * specified by the link parameter.
     *
     * @return string
     **/
    function maxdb_client_encoding() {}

    /**
     * This function is used to create a legal SQL string that you can use in
     * a SQL statement. The string escapestr is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     * 
     * Characters encoded are ', ".
     *
     * @param string
     * @return string
     **/
    function maxdb_escape_string($escapestr) {}

    /**
     * maxdb_maxdb_set_opt can be used to set extra connect maxdb_set_opt and affect
     * behavior for a connection.
     * 
     * This function may be called multiple times to set several maxdb_set_opt.
     * 
     * maxdb_maxdb_set_opt should be called after maxdb_init and before
     * maxdb_real_connect.
     * 
     * The parameter option is the option that you want to set, the value is
     * the value for the option. For detailed description of the maxdb_set_opt see
     * The parameter option can be one of the following values:
     * 
     * Valid maxdb_set_opt
     * 
     * Name Description
     * 
     * MAXDB_COMPNAME The component name used to initialise the SQLDBC
     * runtime environment.
     * 
     * MAXDB_APPLICATION The application to be connected to the database.
     * 
     * MAXDB_APPVERSION The version of the application.
     * 
     * MAXDB_SQLMODE
     * 
     * The SQL mode.
     * 
     * MAXDB_UNICODE
     * 
     * TRUE, if the connection is an unicode (UCS2) client or FALSE, if not.
     * 
     * MAXDB_TIMEOUT
     * 
     * The maximum allowed time of inactivity after which the connection to
     * the database is closed by the system.
     * 
     * MAXDB_ISOLATIONLEVEL
     * 
     * Specifies whether and how shared locks and exclusive locks are
     * implicitly requested or released.
     * 
     * MAXDB_PACKETCOUNT
     * 
     * The number of different request packets used for the connection.
     * 
     * MAXDB_STATEMENTCACHESIZE
     * 
     * The number of prepared statements to be cached for the connection for
     * re-use.
     * 
     * MAXDB_CURSORPREFIX
     * 
     * The prefix to use for result tables that are automatically named.
     *
     * @param int
     * @param mixed
     * @return bool
     **/
    function maxdb_set_opt($option, $value) {}

    /**
     * The maxdb_multi_query works like the function maxdb_query. Multiple
     * queries are not yet supported.
     *
     * @param string
     * @return bool
     **/
    function multi_query($query) {}

    /**
     * maxdb_options can be used to set extra connect options and affect
     * behavior for a connection.
     * 
     * This function may be called multiple times to set several options.
     * 
     * maxdb_options should be called after maxdb_init and before
     * maxdb_real_connect.
     * 
     * The parameter option is the option that you want to set, the value is
     * the value for the option. For detailed description of the options see
     * The parameter option can be one of the following values:
     * 
     * Valid options
     * 
     * Name Description
     * 
     * MAXDB_COMPNAME The component name used to initialise the SQLDBC
     * runtime environment.
     * 
     * MAXDB_APPLICATION The application to be connected to the database.
     * 
     * MAXDB_APPVERSION The version of the application.
     * 
     * MAXDB_SQLMODE
     * 
     * The SQL mode.
     * 
     * MAXDB_UNICODE
     * 
     * TRUE, if the connection is an unicode (UCS2) client or FALSE, if not.
     * 
     * MAXDB_TIMEOUT
     * 
     * The maximum allowed time of inactivity after which the connection to
     * the database is closed by the system.
     * 
     * MAXDB_ISOLATIONLEVEL
     * 
     * Specifies whether and how shared locks and exclusive locks are
     * implicitly requested or released.
     * 
     * MAXDB_PACKETCOUNT
     * 
     * The number of different request packets used for the connection.
     * 
     * MAXDB_STATEMENTCACHESIZE
     * 
     * The number of prepared statements to be cached for the connection for
     * re-use.
     * 
     * MAXDB_CURSORPREFIX
     * 
     * The prefix to use for result tables that are automatically named.
     *
     * @param int
     * @param mixed
     * @return bool
     **/
    function options($option, $value) {}

    /**
     * Checks whether the connection to the server is working. If it has gone
     * down, and global option maxdb.reconnect is enabled an automatic
     * reconnection is attempted.
     * 
     * This function can be used by clients that remain idle for a long
     * while, to check whether the server has closed the connection and
     * reconnect if necessary.
     *
     * @return bool
     **/
    function ping() {}

    /**
     * The maxdb_query function is used to simplify the act of performing a
     * query against the database represented by the link parameter.
     *
     * @param string
     * @return mixed
     **/
    function query($query) {}

    /**
     * maxdb_real_connect attempts to establish a connection to a MaxDB
     * database engine running on hostname.
     * 
     * This function differs from maxdb_connect:
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param int
     * @param string
     * @return bool
     **/
    function real_connect($hostname, $username, $passwd, $dbname, $port, $socket) {}

    /**
     * This function is used to create a legal SQL string that you can use in
     * a SQL statement. The string escapestr is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     * 
     * Characters encoded are ', ".
     *
     * @param string
     * @return string
     **/
    function real_escape_sring($escapestr) {}

    /**
     * The maxdb_real_query is functionally identical with the maxdb_query.
     *
     * @param string
     * @return bool
     **/
    function real_query($query) {}

    /**
     * Rollbacks the current transaction for the database specified by the
     * link parameter.
     *
     * @return bool
     **/
    function rollback() {}

    /**
     * @return int
     **/
    function rpl_query_type() {}

    /**
     * @param string
     * @return bool
     **/
    function send_query($query) {}

    /**
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function ssl_set($key, $cert, $ca, $capath, $cipher) {}

    /**
     * maxdb_stat returns a string containing several information about the
     * MaxDB server running.
     *
     * @return string
     **/
    function stat() {}

    /**
     * Allocates and initializes a statement resource suitable for
     * maxdb_stmt_prepare.
     *
     * @return object
     **/
    function stmt_init() {}

    /**
     * This function has no functionally effect.
     *
     * @return object
     **/
    function store_result() {}

    /**
     * maxdb_use_result has no effect.
     *
     * @return resource
     **/
    function use_result() {}

}
class maxdb_stmt {
    /**
     * Closes a prepared statement. maxdb_stmt_close also deallocates the
     * statement handle pointed to by stmt. If the current statement has
     * pending or unread results, this function cancels them so that the next
     * query can be executed.
     *
     * @return bool
     **/
    function close() {}

    /**
     * This function has to be called after a sequence of
     * maxdb_stmt_send_long_data, that was started after maxdb_execute.
     * 
     * param_nr indicates which parameter to associate the end of data with.
     * Parameters are numbered beginning with 0.
     *
     * @return bool
     **/
    function close_long_data() {}

    /**
     * This function has to be called after a sequence of
     * maxdb_stmt_send_long_data, that was started after maxdb_execute.
     * 
     * param_nr indicates which parameter to associate the end of data with.
     * Parameters are numbered beginning with 0.
     *
     * @return bool
     **/
    function maxdb_close_long_data() {}

}
class Memcache {
    /**
     * Memcache::add stores variable var with key only if such key doesn't
     * exist at the server yet. Also you can use memcache_add function.
     *
     * @param string
     * @param mixed
     * @param int
     * @param int
     * @return bool
     **/
    function add($key, $var, $flag, $expire) {}

    /**
     * Memcache::addServer adds a server to the connection pool. The
     * connection, which was opened using Memcache::addServer will be
     * automatically closed at the end of script execution, you can also
     * close it manually with Memcache::close. You can also use the
     * memcache_add_server function.
     * 
     * When using this method (as opposed to Memcache::connect and
     * Memcache::pconnect) the network connection is not established until
     * actually needed. Thus there is no overhead in adding a large number of
     * servers to the pool, even though they might not all be used.
     * 
     * Failover may occur at any stage in any of the methods, as long as
     * other servers are available the request the user won't notice. Any
     * kind of socket or Memcached server level errors (except out-of-memory)
     * may trigger the failover. Normal client errors such as adding an
     * existing key will not trigger a failover.
     *
     * @param string
     * @param int
     * @param bool
     * @param int
     * @param int
     * @param int
     * @param bool
     * @param callback
     * @param int
     * @return bool
     **/
    function addServer($host, $port, $persistent, $weight, $timeout, $retry_interval, $status, $failure_callback, $timeoutms) {}

    /**
     * Memcache::close closes connection to memcached server. This function
     * doesn't close persistent connections, which are closed only during
     * web-server shutdown/restart. Also you can use memcache_close function.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Memcache::connect establishes a connection to the memcached server.
     * The connection, which was opened using Memcache::connect will be
     * automatically closed at the end of script execution. Also you can
     * close it with Memcache::close. Also you can use memcache_connect
     * function.
     *
     * @param string
     * @param int
     * @param int
     * @return bool
     **/
    function connect($host, $port, $timeout) {}

    /**
     * Memcache::decrement decrements value of the item by value. Similarly
     * to Memcache::increment, current value of the item is being converted
     * to numerical and after that value is substracted.
     * 
     * New item's value will not be less than zero.
     * 
     * Do not use Memcache::decrement with item, which was stored
     * compressed, because consequent call to Memcache::get will fail.
     * 
     * Memcache::decrement does not create an item if it didn't exist. Also
     * you can use memcache_decrement function.
     *
     * @param string
     * @param int
     * @return int
     **/
    function decrement($key, $value) {}

    /**
     * Memcache::delete deletes item with the key. If parameter timeout is
     * specified, the item will expire after timeout seconds. Also you can
     * use memcache_delete function.
     *
     * @param string
     * @param int
     * @return bool
     **/
    function delete($key, $timeout) {}

    /**
     * Memcache::flush immediately invalidates all existing items.
     * Memcache::flush doesn't actually free any resources, it only marks all
     * the items as expired, so occupied memory will be overwritten by new
     * items. Also you can use memcache_flush function.
     *
     * @return bool
     **/
    function flush() {}

    /**
     * Memcache::get returns previously stored data if an item with such key
     * exists on the server at this moment.
     * 
     * You can pass array of keys to Memcache::get to get array of values.
     * The result array will contain only found key-value pairs.
     *
     * @param string
     * @param int
     * @return string
     **/
    function get($key, &$flags) {}

    /**
     * Memcache::getExtendedStats returns a two-dimensional associative array
     * with server statistics. Array keys correspond to host:port of server
     * and values contain the individual server statistics. A failed server
     * will have its corresponding entry set to . You can also use the
     * memcache_get_extended_stats function.
     *
     * @param string
     * @param int
     * @param int
     * @return array
     **/
    function getExtendedStats($type, $slabid, $limit) {}

    /**
     * Memcache::getServerStatus returns a the servers online/offline status.
     * You can also use memcache_get_server_status function.
     *
     * @param string
     * @param int
     * @return int
     **/
    function getServerStatus($host, $port) {}

    /**
     * Memcache::getStats returns an associative array with server's
     * statistics. Array keys correspond to stats parameters and values to
     * parameter's values. Also you can use memcache_get_stats function.
     *
     * @param string
     * @param int
     * @param int
     * @return array
     **/
    function getStats($type, $slabid, $limit) {}

    /**
     * Memcache::getVersion returns a string with server's version number.
     * Also you can use memcache_get_version function.
     *
     * @return string
     **/
    function getVersion() {}

    /**
     * Memcache::increment increments value of the item on the specified
     * value. If item with key key was not numeric and cannot be converted to
     * number, it will change it's value to value. Memcache::increment does
     * not create an item if it didn't exist.
     * 
     * Do not use Memcache::increment with item, which was stored
     * compressed, because consequent call to Memcache::get will fail.
     * 
     * Also you can use memcache_increment function.
     *
     * @param string
     * @param int
     * @return int
     **/
    function increment($key, $value) {}

    /**
     * Memcache::pconnect is similar to Memcache::connect with the
     * difference, that the connection it establishes is persistent. This
     * connection is not closed after the end of script execution and by
     * Memcache::close function. Also you can use memcache_pconnect function.
     *
     * @param string
     * @param int
     * @param int
     * @return bool
     **/
    function pconnect($host, $port, $timeout) {}

    /**
     * Memcache::replace should be used to replace value of existing item
     * with key. In case if item with such key doesn't exists,
     * Memcache::replace returns . For the rest Memcache::replace behaves
     * similarly to Memcache::set. Also you can use memcache_replace
     * function.
     *
     * @param string
     * @param mixed
     * @param int
     * @param int
     * @return bool
     **/
    function replace($key, $var, $flag, $expire) {}

    /**
     * Memcache::set stores an item var with key on the memcached server.
     * Parameter expire is expiration time in seconds. If it's 0, the item
     * never expires (but memcached server doesn't guarantee this item to be
     * stored all the time, it could be deleted from the cache to make place
     * for other items). You can use MEMCACHE_COMPRESSED constant as flag
     * value if you want to use on-the-fly compression (uses zlib).
     * 
     * Remember that resource variables (i.e. file and connection
     * descriptors) cannot be stored in the cache, because they cannot be
     * adequately represented in serialized state.
     * 
     * Also you can use memcache_set function.
     *
     * @param string
     * @param mixed
     * @param int
     * @param int
     * @return bool
     **/
    function set($key, $var, $flag, $expire) {}

    /**
     * Memcache::setCompressThreshold enables automatic compression of large
     * values. You can also use the memcache_set_compress_threshold function.
     *
     * @param int
     * @param float
     * @return bool
     **/
    function setCompressThreshold($threshold, $min_savings) {}

    /**
     * Memcache::setServerParams changes server parameters at runtime. You
     * can also use the memcache_set_server_params function.
     *
     * @param string
     * @param int
     * @param int
     * @param int
     * @param bool
     * @param callback
     * @return bool
     **/
    function setServerParams($host, $port, $timeout, $retry_interval, $status, $failure_callback) {}

}
class Memcached {
    const DISTRIBUTION_CONSISTENT = 0;
    const DISTRIBUTION_MODULA = 0;
    const GET_PRESERVE_ORDER = 0;
    const HASH_CRC = 0;
    const HASH_DEFAULT = 0;
    const HASH_FNV1A_32 = 0;
    const HASH_FNV1A_64 = 0;
    const HASH_FNV1_32 = 0;
    const HASH_FNV1_64 = 0;
    const HASH_HSIEH = 0;
    const HASH_MD5 = 0;
    const HASH_MURMUR = 0;
    const HAVE_IGBINARY = 0;
    const HAVE_JSON = 0;
    const OPT_BINARY_PROTOCOL = 0;
    const OPT_BUFFER_WRITES = 0;
    const OPT_CACHE_LOOKUPS = 0;
    const OPT_COMPRESSION = 0;
    const OPT_CONNECT_TIMEOUT = 0;
    const OPT_DISTRIBUTION = 0;
    const OPT_HASH = 0;
    const OPT_LIBKETAMA_COMPATIBLE = 0;
    const OPT_NO_BLOCK = 0;
    const OPT_POLL_TIMEOUT = 0;
    const OPT_PREFIX_KEY = 0;
    const OPT_RECV_TIMEOUT = 0;
    const OPT_RETRY_TIMEOUT = 0;
    const OPT_SEND_TIMEOUT = 0;
    const OPT_SERIALIZER = 0;
    const OPT_SERVER_FAILURE_LIMIT = 0;
    const OPT_SOCKET_RECV_SIZE = 0;
    const OPT_SOCKET_SEND_SIZE = 0;
    const OPT_TCP_NODELAY = 0;
    const RES_BAD_KEY_PROVIDED = 0;
    const RES_BUFFERED = 0;
    const RES_CLIENT_ERROR = 0;
    const RES_CONNECTION_SOCKET_CREATE_FAILURE = 0;
    const RES_DATA_EXISTS = 0;
    const RES_END = 0;
    const RES_ERRNO = 0;
    const RES_FAILURE = 0;
    const RES_HOST_LOOKUP_FAILURE = 0;
    const RES_NOTFOUND = 0;
    const RES_NOTSTORED = 0;
    const RES_NO_SERVERS = 0;
    const RES_PARTIAL_READ = 0;
    const RES_PAYLOAD_FAILURE = 0;
    const RES_PROTOCOL_ERROR = 0;
    const RES_SERVER_ERROR = 0;
    const RES_SOME_ERRORS = 0;
    const RES_SUCCESS = 0;
    const RES_TIMEOUT = 0;
    const RES_UNKNOWN_READ_FAILURE = 0;
    const RES_WRITE_FAILURE = 0;
    const SERIALIZER_IGBINARY = 0;
    const SERIALIZER_JSON = 0;
    const SERIALIZER_PHP = 0;
    /**
     * Memcached::add is similar to Memcached::set, but the operation fails
     * if the key already exists on the server.
     *
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function add($key, $value, $expiration) {}

    /**
     * Memcached::addByKey is functionally equivalent to Memcached::add,
     * except that the free-form server_key can be used to map the key to a
     * specific server. This is useful if you need to keep a bunch of related
     * keys on a certain server.
     *
     * @param string
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function addByKey($server_key, $key, $value, $expiration) {}

    /**
     * Memcached::addServer adds the specified server to the server pool. No
     * connection is established to the server at this time, but if you are
     * using consistent key distribution option (via
     * Memcached::DISTRIBUTION_CONSISTENT or
     * Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data
     * structures will have to be updated. Thus, if you need to add multiple
     * servers, it is better to use Memcached::addServers as the update then
     * happens only once.
     * 
     * The same server may appear multiple times in the server pool, because
     * no duplication checks are made. This is not advisable; instead, use
     * the weight option to increase the selection weighting of this server.
     *
     * @param string
     * @param int
     * @param int
     * @return bool
     **/
    function addServer($host, $port, $weight) {}

    /**
     * Memcached::addServers adds servers to the server pool. Each entry in
     * servers is supposed to an array containing hostname, port, and,
     * optionally, weight of the server. No connection is established to the
     * servers at this time.
     * 
     * The same server may appear multiple times in the server pool, because
     * no duplication checks are made. This is not advisable; instead, use
     * the weight option to increase the selection weighting of this server.
     *
     * @param array
     * @return bool
     **/
    function addServers($servers) {}

    /**
     * Memcached::append appends the given value string to the value of an
     * existing item. The reason that value is forced to be a string is that
     * appending mixed types is not well-defined.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function append($key, $value) {}

    /**
     * Memcached::appendByKey is functionally equivalent to
     * Memcached::append, except that the free-form server_key can be used to
     * map the key to a specific server.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function appendByKey($server_key, $key, $value) {}

    /**
     * Memcached::cas performs a "check and set" operation, so that the item
     * will be stored only if no other client has updated it since it was
     * last fetched by this client. The check is done via the cas_token
     * parameter which is a unique 64-bit value assigned to the existing item
     * by memcache. See the documentation for Memcached::get* methods for how
     * to obtain this token. Note that the token is represented as a double
     * due to the limitations of PHP's integer space.
     *
     * @param double
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function cas($cas_token, $key, $value, $expiration) {}

    /**
     * Memcached::casByKey is functionally equivalent to Memcached::cas,
     * except that the free-form server_key can be used to map the key to a
     * specific server. This is useful if you need to keep a bunch of related
     * keys on a certain server.
     *
     * @param double
     * @param string
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function casByKey($cas_token, $server_key, $key, $value, $expiration) {}

    /**
     * Memcached::decrement decrements a numeric item's value by the
     * specified offset. If the item's value is not numeric, it is treated as
     * if the value were 0. If the operation would decrease the value below
     * 0, the new value will be 0. Memcached::decrement will fail if the item
     * does not exist.
     *
     * @param string
     * @param int
     * @return int
     **/
    function decrement($key, $offset) {}

    /**
     * Memcached::delete deletes the key from the server. The time parameter
     * is the amount of time in seconds (or Unix time until which) the client
     * wishes the server to refuse add and replace commands for this key. For
     * this amount of time, the item is put into a delete queue, which means
     * that it won't possible to retrieve it by the get command, but add and
     * replace command with this key will also fail (the set command will
     * succeed, however). After the time passes, the item is finally deleted
     * from server memory. The parameter time defaults to 0 (which means that
     * the item will be deleted immediately and further storage commands with
     * this key will succeed).
     *
     * @param string
     * @param int
     * @return bool
     **/
    function delete($key, $time) {}

    /**
     * Memcached::deleteByKey is functionally equivalent to
     * Memcached::delete, except that the free-form server_key can be used to
     * map the key to a specific server.
     *
     * @param string
     * @param string
     * @param int
     * @return bool
     **/
    function deleteByKey($server_key, $key, $time) {}

    /**
     * Memcached::fetch retrieves the next result from the last request.
     *
     * @return mixed
     **/
    function fetch() {}

    /**
     * Memcached::fetchAll retrieves all the remaining results from the last
     * request.
     *
     * @return mixed
     **/
    function fetchAll() {}

    /**
     * Memcached::flush invalidates all existing cache items immediately (by
     * default) or after the delay specified. After invalidation none of the
     * items will be returned in response to a retrieval command (unless it's
     * stored again under the same key after Memcached::flush has invalidated
     * the items). The flush does not actually free all the memory taken up
     * by the existing items; that will happen gradually as new items are
     * stored.
     *
     * @param int
     * @return bool
     **/
    function flush($delay) {}

    /**
     * Memcached::get returns the item that was previously stored under the
     * key. If the item is found and cas_token variable is provided, it will
     * contain the CAS token value for the item. See Memcached::cas for how
     * to use CAS tokens. Read-through caching callback may be specified via
     * cache_cb parameter.
     * 
     * 
     *
     * @param string
     * @param callback
     * @param double
     * @return mixed
     **/
    function get($key, $cache_cb, &$cas_token) {}

    /**
     * Memcached::getByKey is functionally equivalent to Memcached::get,
     * except that the free-form server_key can be used to map the key to a
     * specific server.
     *
     * @param string
     * @param string
     * @param callback
     * @param double
     * @return mixed
     **/
    function getByKey($server_key, $key, $cache_cb, &$cas_token) {}

    /**
     * Memcached::getDelayed issues a request to memcache for multiple items
     * the keys of which are specified in the keys array. The method does not
     * wait for response and returns right away. When you are ready to
     * collect the items, call either Memcached::fetch or
     * Memcached::fetchAll. If with_cas is true, the CAS token values will
     * also be requested.
     * 
     * Instead of fetching the results explicitly, you can specify a result
     * callback via value_cb parameter.
     *
     * @param array
     * @param bool
     * @param callback
     * @return bool
     **/
    function getDelayed($keys, $with_cas, $value_cb) {}

    /**
     * Memcached::getDelayedByKey is functionally equivalent to
     * Memcached::getDelayed, except that the free-form server_key can be
     * used to map the keys to a specific server.
     *
     * @param string
     * @param array
     * @param bool
     * @param callback
     * @return bool
     **/
    function getDelayedByKey($server_key, $keys, $with_cas, $value_cb) {}

    /**
     * Memcached::getMulti is similar to Memcached::get, but instead of a
     * single key item, it retrievess multiple items the keys of which are
     * specified in the keys array. If cas_tokens variable is provided, it is
     * filled with the CAS token values for the found items.
     * 
     * Unlike Memcached::get it is not possible to specify a read-through
     * cache callback for Memcached::getMulti, because the memcache protocol
     * does not provide information on which keys were not found in the
     * multi-key request.
     * 
     * The flags parameter can be used to specify additional options for
     * Memcached::getMulti. Currently, the only available option is
     * Memcached::GET_PRESERVE_ORDER that ensures that the keys are returned
     * in the same order as they were requested in.
     *
     * @param array
     * @param array
     * @param integer
     * @return mixed
     **/
    function getMulti($keys, &$cas_tokens, $flags) {}

    /**
     * Memcached::getMultiByKey is functionally equivalent to
     * Memcached::getMulti, except that the free-form server_key can be used
     * to map the keys to a specific server.
     *
     * @param string
     * @param array
     * @param string
     * @param integer
     * @return void
     **/
    function getMultiByKey($server_key, $keys, &$cas_tokens, $flags) {}

    /**
     * This method returns the value of a Memcached option. Some options
     * correspond to the ones defined by libmemcached, and some are specific
     * to the extension. See Memcached Constants for more information.
     *
     * @param int
     * @return void
     **/
    function getOption($option) {}

    /**
     * Memcached::getResultCode returns one of the Memcached::RES_* constants
     * that is the result of the last executed Memcached method.
     *
     * @return int
     **/
    function getResultCode() {}

    /**
     * Memcached::getResultMessage returns a string that describes the result
     * code of the last executed Memcached method.
     *
     * @return string
     **/
    function getResultMessage() {}

    /**
     * Memcached::getServerByKey returns the server that would be selected by
     * a particular server_key in all the Memcached::*ByKey operations.
     *
     * @param string
     * @return array
     **/
    function getServerByKey($server_key) {}

    /**
     * Memcached::getServerList returns the list of all servers that are in
     * its server pool.
     *
     * @return array
     **/
    function getServerList() {}

    /**
     * Memcached::getStats returns an array containing the state of all
     * available memcache servers. See memcache protocol specification for
     * details on these statistics.
     *
     * @return array
     **/
    function getStats() {}

    /**
     * Memcached::getVersion returns an array containing the version info for
     * all available memcache servers.
     *
     * @return array
     **/
    function getVersion() {}

    /**
     * Memcached::increment increments a numeric item's value by the
     * specified offset. If the item's value is not numeric, it is treated as
     * if the value were 0. Memcached::increment will fail if the item does
     * not exist.
     *
     * @param string
     * @param int
     * @return int
     **/
    function increment($key, $offset) {}

    /**
     * Memcached::prepend prepends the given value string to the value of an
     * existing item. The reason that value is forced to be a string is that
     * prepending mixed types is not well-defined.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function prepend($key, $value) {}

    /**
     * Memcached::prependByKey is functionally equivalent to
     * Memcached::prepend, except that the free-form server_key can be used
     * to map the key to a specific server.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function prependByKey($server_key, $key, $value) {}

    /**
     * Memcached::replace is similar to Memcached::set, but the operation
     * fails if the key does not exist on the server.
     *
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function replace($key, $value, $expiration) {}

    /**
     * Memcached::replaceByKey is functionally equivalent to
     * Memcached::replace, except that the free-form server_key can be used
     * to map the key to a specific server. This is useful if you need to
     * keep a bunch of related keys on a certain server.
     *
     * @param string
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function replaceByKey($server_key, $key, $value, $expiration) {}

    /**
     * Memcached::set stores the value on a memcache server under the
     * specified key. The expiration parameter can be used to control when
     * the value is considered expired.
     * 
     * The value can be any valid PHP type except for resources, because
     * those cannot be represented in a serialized form. If the
     * Memcached::OPT_COMPRESSION option is turned on, the serialized value
     * will also be compressed before storage.
     *
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function set($key, $value, $expiration) {}

    /**
     * Memcached::setByKey is functionally equivalent to Memcached::set,
     * except that the free-form server_key can be used to map the key to a
     * specific server. This is useful if you need to keep a bunch of related
     * keys on a certain server.
     *
     * @param string
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function setByKey($server_key, $key, $value, $expiration) {}

    /**
     * Memcached::setMulti is similar to Memcached::set, but instead of a
     * single key/value item, it works on multiple items specified in items.
     * The expiration time applies to all the items at once.
     *
     * @param array
     * @param int
     * @return bool
     **/
    function setMulti($items, $expiration) {}

    /**
     * Memcached::setMultiByKey is functionally equivalent to
     * Memcached::setMulti, except that the free-form server_key can be used
     * to map the keys from items to a specific server. This is useful if you
     * need to keep a bunch of related keys on a certain server.
     *
     * @param string
     * @param array
     * @param int
     * @return bool
     **/
    function setMultiByKey($server_key, $items, $expiration) {}

    /**
     * This method sets the value of a Memcached option. Some options
     * correspond to the ones defined by libmemcached, and some are specific
     * to the extension. See Memcached Constants for more information.
     * 
     * The options listed below require values specified via constants.
     * 
     * Memcached::OPT_HASH requires Memcached::HASH_* values.
     * 
     * Memcached::OPT_DISTRIBUTION requires Memcached::DISTRIBUTION_*
     * values.
     *
     * @param int
     * @param mixed
     * @return bool
     **/
    function setOption($option, $value) {}

}
class MemcachedException extends RuntimeException {
}
class MessageFormatter {
    /**
     * Constructs a new Message Formatter
     *
     * @param string
     * @param string
     * @return MessageFormatter
     **/
    function create($locale, $pattern) {}

    /**
     * Format the message by substituting the data into the format string
     * according to the locale rules
     *
     * @param array
     * @return string
     **/
    function format($args) {}

    /**
     * Quick formatting function that formats the string without having to
     * explicitly create the formatter object. Use this function when the
     * format operation is done only once and does not need and parameters or
     * state to be kept.
     *
     * @param string
     * @param string
     * @param array
     * @return string
     **/
    function formatMessage($locale, $pattern, $args) {}

    /**
     * Get the error code from last operation.
     *
     * @return int
     **/
    function getErrorCode() {}

    /**
     * Get the error text from the last operation.
     *
     * @return string
     **/
    function getErrorMessage() {}

    /**
     * Get the locale for which the formatter was created.
     *
     * @return string
     **/
    function getLocale() {}

    /**
     * Get the pattern used by the formatter
     *
     * @return string
     **/
    function getPattern() {}

    /**
     * Parses input string and return any extracted items as an array.
     *
     * @param string
     * @return array
     **/
    function parse($value) {}

    /**
     * Parses input string without explicitly creating the formatter object.
     * Use this function when the format operation is done only once and does
     * not need and parameters or state to be kept.
     *
     * @param string
     * @param string
     * @return array
     **/
    function parseMessage($locale, $value) {}

    /**
     * Set the pattern used by the formatter
     *
     * @param string
     * @return bool
     **/
    function setPattern($pattern) {}

}
class Mongo {
    const DEFAULT_HOST = '';
    const DEFAULT_PORT = 0;
    /**
     * @return boolean
     **/
    function close() {}

    /**
     * @return boolean
     **/
    function connect() {}

    /**
     * @param string
     * @param string
     * @return boolean
     **/
    function connectUtil($username, $password) {}

    /**
     * @param mixed
     * @return array
     **/
    function dropDB($db) {}

    /**
     * Use MongoDB::forceError instead.
     *
     * @return bool
     **/
    function forceError() {}

    /**
     * Use MongoDB::lastError instead.
     *
     * @return array
     **/
    function lastError() {}

    /**
     * To successfully create a paired connection, $this-&gt;server must be a
     * string of the form "server1,server2".
     *
     * @return boolean
     **/
    function pairConnect() {}

    /**
     * @param string
     * @param string
     * @return boolean
     **/
    function pairPersistConnect($username, $password) {}

    /**
     * @param string
     * @param string
     * @return boolean
     **/
    function persistConnect($username, $password) {}

    /**
     * Use MongoDB::prevError instead.
     *
     * @return array
     **/
    function prevError() {}

    /**
     * @param MongoDB
     * @param boolean
     * @param boolean
     * @return array
     **/
    function repairDB($db, $preserve_cloned_files, $backup_original_files) {}

    /**
     * Use MongoDB::resetError instead.
     *
     * @return array
     **/
    function resetError() {}

    /**
     * @param string|MongoDB
     * @param string
     * @return MongoCollection
     **/
    function selectCollection($db, $collection) {}

    /**
     * @param string
     * @return MongoDB
     **/
    function selectDB($dbname) {}

    /**
     * @param string
     * @param boolean
     * @param boolean
     * @param boolean
     **/
    function __construct($server, $connect, $persistent, $paired) {}

    /**
     * @return string
     **/
    function __toString() {}

}
class MongoBinData {
    /**
     * Creates a new binary data object.
     *
     * @param string
     * @param int
     **/
    function __construct($data, $type) {}

    /**
     * Returns the string representing this binary data object.
     *
     * @return string
     **/
    function __toString() {}

}
class MongoCode {
    /**
     * @param string
     * @param array
     **/
    function __construct($code, $scope) {}

    /**
     * @return string
     **/
    function __toString() {}

}
class MongoCollection extends MongoCollection {
    /**
     * @param array
     * @return boolean
     **/
    function batchInsert($a) {}

    /**
     * @param array
     * @param array
     * @return int
     **/
    function count($query, $fields) {}

    /**
     * @param array
     * @return array
     **/
    function createDBRef($a) {}

    /**
     * @param string|array
     * @return array
     **/
    function deleteIndex($keys) {}

    /**
     * @return array
     **/
    function deleteIndexes() {}

    /**
     * Drops this collection and deletes its indices.
     *
     * @return array
     **/
    function drop() {}

    /**
     * @param string|array
     * @return boolean
     **/
    function ensureIndex($keys) {}

    /**
     * @param array
     * @param array
     * @return MongoCursor
     **/
    function find($query, $fields) {}

    /**
     * @param array
     * @param array
     * @return array
     **/
    function findOne($query, $fields) {}

    /**
     * @param array
     * @return array
     **/
    function getDBRef($ref) {}

    /**
     * @return array
     **/
    function getIndexInfo() {}

    /**
     * @return string
     **/
    function getName() {}

    /**
     * @param array
     * @param array
     * @param string
     * @param array
     * @return array
     **/
    function group($keys, $initial, $reduce, $condition) {}

    /**
     * @param array
     * @param boolean
     * @return mixed
     **/
    function insert($a, $safe) {}

    /**
     * @param array
     * @param boolean
     * @return boolean
     **/
    function remove($criteria, $justOne) {}

    /**
     * If the object is from the database, update the existing database
     * object, otherwise insert this object.
     *
     * @param array
     * @return boolean
     **/
    function save($a) {}

    /**
     * @param array
     * @param array
     * @param boolean
     * @return boolean
     **/
    function update($criteria, $newobj, $upsert) {}

    /**
     * @param bool
     * @return array
     **/
    function validate($scan_data) {}

    /**
     * @param MongoDB
     * @param string
     **/
    function __construct($db, $name) {}

    /**
     * @return string
     **/
    function __toString() {}

}
class MongoCursor extends MongoCursor {
    /**
     * @return int
     **/
    function count() {}

    /**
     * @return array
     **/
    function current() {}

    /**
     * @return void
     **/
    function doQuery() {}

    /**
     * @return array
     **/
    function explain() {}

    /**
     * @return array
     **/
    function getNext() {}

    /**
     * @return boolean
     **/
    function hasNext() {}

    /**
     * @param array
     * @return MongoCursor
     **/
    function hint($key_pattern) {}

    /**
     * @return string
     **/
    function key() {}

    /**
     * @param int
     * @return MongoCursor
     **/
    function limit($num) {}

    /**
     * @return void
     **/
    function next() {}

    /**
     * @return void
     **/
    function reset() {}

    /**
     * @return void
     **/
    function rewind() {}

    /**
     * @param int
     * @return MongoCursor
     **/
    function skip($num) {}

    /**
     * This method will override the static class variable slaveOkay.
     *
     * @param boolean
     * @return MongoCursor
     **/
    function slaveOkay($okay) {}

    /**
     * Use snapshot mode for the query. Snapshot mode assures no duplicates
     * are returned, or objects missed, which were present at both the start
     * and end of the query's execution (if an object is new during the
     * query, or deleted during the query, it may or may not be returned,
     * even with snapshot mode).
     * 
     * Note that short query responses (less than 1MB) are always effectively
     * snapshotted.
     * 
     * Currently, snapshot mode may not be used with sorting or explicit
     * hints.
     *
     * @return MongoCursor
     **/
    function snapshot() {}

    /**
     * @param array
     * @return MongoCursor
     **/
    function sort($fields) {}

    /**
     * Mongo has a feature known as tailable cursors which are similar to the
     * Unix "tail -f" command.
     * 
     * Tailable means cursor is not closed when the last data is retrieved.
     * rather, the cursor marks the final object's position. you can resume
     * using the cursor later, from where it was located, if more data were
     * received.
     * 
     * Like any "latent cursor", the cursor may become invalid at some point
     * -- for example if that final object it references were deleted. Thus,
     * you should be prepared to requery if the cursor is dead().
     *
     * @param boolean
     * @return MongoCursor
     **/
    function tailable($tail) {}

    /**
     * @return boolean
     **/
    function valid() {}

    /**
     * @param resource
     * @param string
     * @param array
     * @param array
     **/
    function __construct($connection, $ns, $query, $fields) {}

}
class MongoDate {
    /**
     * Creates a new date. If no parameters are given, the current time is
     * used.
     *
     * @param long
     * @param long
     **/
    function __construct($sec, $usec) {}

    /**
     * Returns a string representation of this date, similar to the
     * representation returned by microtime().
     *
     * @return string
     **/
    function __toString() {}

}
class MongoDB {
    const PROFILING_OFF = 0;
    const PROFILING_ON = 0;
    const PROFILING_SLOW = 0;
    /**
     * @param array
     * @return array
     **/
    function command($data) {}

    /**
     * @param string
     * @param bool
     * @param int
     * @param int
     * @return MongoCollection
     **/
    function createCollection($name, $capped, $size, $max) {}

    /**
     * @param mixed
     * @param mixed
     * @return array
     **/
    function createDBRef($ns, $a) {}

    /**
     * @return array
     **/
    function drop() {}

    /**
     * @param mixed
     * @return array
     **/
    function dropCollection($coll) {}

    /**
     * @param mixed
     * @param array
     * @return array
     **/
    function execute($code, $args) {}

    /**
     * @return bool
     **/
    function forceError() {}

    /**
     * @return array
     **/
    function getCursorInfo() {}

    /**
     * @param array
     * @return array
     **/
    function getDBRef($ref) {}

    /**
     * @param string
     * @param string
     * @return MongoGridFS
     **/
    function getGridFS($arg1, $arg2) {}

    /**
     * @return int
     **/
    function getProfilingLevel() {}

    /**
     * @return array
     **/
    function lastError() {}

    /**
     * @return array
     **/
    function listCollections() {}

    /**
     * @return array
     **/
    function prevError() {}

    /**
     * @param bool
     * @param bool
     * @return array
     **/
    function repair($preserve_cloned_files, $backup_original_files) {}

    /**
     * @return array
     **/
    function resetError() {}

    /**
     * @param string
     * @return MongoCollection
     **/
    function selectCollection($name) {}

    /**
     * @param int
     * @return int
     **/
    function setProfilingLevel($level) {}

    /**
     * @param Mongo
     * @param string
     **/
    function __construct($conn, $name) {}

    /**
     * @return string
     **/
    function __toString() {}

}
class MongoDBRef {
    /**
     * @param string
     * @param mixed
     * @return array
     **/
    function create($ns, $id) {}

    /**
     * @param MongoDB
     * @param array
     * @return array
     **/
    function get($db, $ref) {}

    /**
     * @param array
     * @return boolean
     **/
    function isRef($ref) {}

}
class MongoEmptyObj {
}
class MongoException extends MongoException {
}
class MongoGridFS {
    /**
     * @return array
     **/
    function drop() {}

    /**
     * @param array
     * @param array
     * @return MongoGridFSCursor
     **/
    function find($query, $fields) {}

    /**
     * @param mixed
     * @return MongoGridFSFile
     **/
    function findOne($query) {}

    /**
     * @param array
     * @param boolean
     * @return boolean
     **/
    function remove($criteria, $just_one) {}

    /**
     * @param string
     * @param array
     * @return mixed
     **/
    function storeBytes($bytes, $extra) {}

    /**
     * @param string
     * @param array
     * @return mixed
     **/
    function storeFile($filename, $extra) {}

    /**
     * @param string
     * @param string
     * @return mixed
     **/
    function storeUpload($name, $filename) {}

    /**
     * Files as stored across two collections, the first containing file meta
     * information, the second containing chunks of the actual file. By
     * default, fs.files and fs.chunks are the collection names used.
     * 
     * Use one argument to specify a prefix other than "fs":
     * 
     * uses myfiles.files and myfiles.chunks collections.
     * 
     * Use two arguments to fully specify the collection names:
     * 
     * uses myfiles and mychunks collections.
     *
     * @param MongoDB
     * @param string
     * @param string
     **/
    function __construct($db, $files, $chunks) {}

}
class MongoGridFSCursor {
    /**
     * @return MongoGridFSFile
     **/
    function current() {}

    /**
     * @return MongoGridFSFile
     **/
    function getNext() {}

    /**
     * @return string
     **/
    function key() {}

    /**
     * @param MongoGridFS
     * @param resource
     * @param string
     * @param array
     * @param array
     **/
    function __construct($gridfs, $connection, $ns, $query, $fields) {}

}
class MongoGridFSFile {
    /**
     * Warning: this will load the file into memory. If the file is bigger
     * than your memory, this will cause problems!
     *
     * @return string
     **/
    function getBytes() {}

    /**
     * @return string
     **/
    function getFilename() {}

    /**
     * @return int
     **/
    function getSize() {}

    /**
     * @param string
     * @return int
     **/
    function write($filename) {}

    /**
     * @param MongoGridFS
     * @param array
     **/
    function __construct($gridfs, $file) {}

}
class MongoId {
    /**
     * @param string
     **/
    function __construct($id) {}

    /**
     * @return string
     **/
    function __toString() {}

}
class MongoRegex {
    /**
     * Creates a new regular expression.
     *
     * @param string
     **/
    function __construct($regex) {}

    /**
     * Returns a string representation of this regular expression.
     *
     * @return string
     **/
    function __toString() {}

}
class MongoUtil {
    const ASC = 0;
    const BIN_ARRAY = 0;
    const BIN_CUSTOM = 0;
    const BIN_MD5 = 0;
    const BIN_UUID = 0;
    const DESC = 0;
    const GT = '';
    const GTE = '';
    const IN = '';
    const LT = '';
    const LTE = '';
    const NE = '';
    /**
     * @param string|array
     * @return string
     **/
    function toIndexString($keys) {}

}
class MultipleIterator implements Iterator, Traversable {
    /**
     * Attaches iterator information.
     *
     * @param Iterator
     * @param string
     * @return void
     **/
    function attachIterator($iterator, $infos) {}

    /**
     * Checks if an iterator is attached or not.
     *
     * @param Iterator
     * @return void
     **/
    function containsIterator($iterator) {}

    /**
     * Gets the number of attached iterator instances.
     *
     * @return void
     **/
    function countIterators() {}

    /**
     * Get the registered iterator instances.
     *
     * @return void
     **/
    function current() {}

    /**
     * Detaches an iterator.
     *
     * @param Iterator
     * @return void
     **/
    function detachIterator($iterator) {}

    /**
     * Gets information about the flags.
     *
     * @return void
     **/
    function getFlags() {}

    /**
     * Get the registered iterator instances.
     *
     * @return void
     **/
    function key() {}

    /**
     * Moves all attached iterator instances forward.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewinds all attached iterator instances.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Sets flags.
     *
     * @param integer
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Checks the validity of sub iterators.
     *
     * @return void
     **/
    function valid() {}

    /**
     * Construct a new MultipleIterator.
     *
     * @param integer
     **/
    function __construct($flags) {}

}
class MySQLi {
    /**
     * Returns the number of rows affected by the last INSERT, UPDATE,
     * REPLACE or DELETE query.
     * 
     * For SELECT statements mysqli_affected_rows works like mysqli_num_rows.
     *
     * @var int
     **/
    var $affected_rows;
    /**
     * Returns a string that represents the MySQL client library version.
     *
     * @var string
     **/
    var $client_info;
    /**
     * Returns client version number as an integer.
     *
     * @var int
     **/
    var $client_version;
    /**
     * Returns client version number as an integer.
     *
     * @var int
     **/
    var $client_version;
    /**
     * Returns the last error code number from the last call to
     * mysqli_connect.
     *
     * @var string
     **/
    var $connect_errno;
    /**
     * Returns the last error message string from the last call to
     * mysqli_connect.
     *
     * @var string
     **/
    var $connect_error;
    /**
     * Returns the last error code for the most recent MySQLi function call
     * that can succeed or fail.
     * 
     * Client error message numbers are listed in the MySQL errmsg.h header
     * file, server error message numbers are listed in mysqld_error.h. In
     * the MySQL source distribution you can find a complete list of error
     * messages and error numbers in the file Docs/mysqld_error.txt.
     *
     * @var int
     **/
    var $errno;
    /**
     * Returns the last error message for the most recent MySQLi function
     * call that can succeed or fail.
     *
     * @var string
     **/
    var $error;
    /**
     * Returns a string describing the connection represented by the link
     * parameter (including the server host name).
     *
     * @var string
     **/
    var $host_info;
    /**
     * The mysqli_info function returns a string providing information about
     * the last query executed. The nature of this string is provided below:
     * 
     * Possible mysqli_info return values
     * 
     * Query type Example result string
     * 
     * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0
     * 
     * INSERT INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0
     * Warnings: 0
     * 
     * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
     * 
     * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0
     * 
     * UPDATE ... Rows matched: 40 Changed: 40 Warnings: 0
     *
     * @var string
     **/
    var $info;
    /**
     * The mysqli_insert_id function returns the ID generated by a query on a
     * table with a column having the AUTO_INCREMENT attribute. If the last
     * query wasn't an INSERT or UPDATE statement or if the modified table
     * does not have a column with the AUTO_INCREMENT attribute, this
     * function will return zero.
     *
     * @var mixed
     **/
    var $insert_id;
    /**
     * Returns an integer representing the MySQL protocol version used by the
     * connection represented by the link parameter.
     *
     * @var string
     **/
    var $protocol_version;
    /**
     * Returns a string representing the version of the MySQL server that the
     * MySQLi extension is connected to.
     *
     * @var string
     **/
    var $server_info;
    /**
     * The mysqli_get_server_version function returns the version of the
     * server connected to (represented by the link parameter) as an integer.
     *
     * @var int
     **/
    var $server_version;
    /**
     * Returns a string containing the SQLSTATE error code for the last
     * error. The error code consists of five characters. '00000' means no
     * error. The values are specified by ANSI SQL and ODBC. For a list of
     * possible values, see .
     *
     * @var string
     **/
    var $sqlstate;
    /**
     * The mysqli_thread_id function returns the thread ID for the current
     * connection which can then be killed using the mysqli_kill function. If
     * the connection is lost and you reconnect with mysqli_ping, the thread
     * ID will be other. Therefore you should get the thread ID only when you
     * need it.
     *
     * @var int
     **/
    var $thread_id;
    /**
     * Returns the number of warnings from the last query in the connection.
     *
     * @var int
     **/
    var $warning_count;
    /**
     * Turns on or off auto-commit mode on queries for the database
     * connection.
     * 
     * To determine the current state of autocommit use the SQL command
     * SELECT @@autocommit.
     *
     * @param bool
     * @return bool
     **/
    function autocommit($mode) {}

    /**
     * Changes the user of the specified database connection and sets the
     * current database.
     * 
     * In order to successfully change users a valid username and password
     * parameters must be provided and that user must have sufficient
     * permissions to access the desired database. If for any reason
     * authorization fails, the current user authentication will remain.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function change_user($user, $password, $database) {}

    /**
     * Returns the current character set for the database connection.
     *
     * @return string
     **/
    function character_set_name() {}

    /**
     * Closes a previously opened database connection.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Commits the current transaction for the database connection.
     *
     * @return bool
     **/
    function commit() {}

    /**
     * Performs debugging operations using the Fred Fish debugging library.
     *
     * @param string
     * @return bool
     **/
    function debug($message) {}

    /**
     * @return void
     **/
    function disable_reads_from_master() {}

    /**
     * This function is designed to be executed by an user with the SUPER
     * privilege and is used to dump debugging information into the log for
     * the MySQL Server relating to the connection.
     *
     * @return bool
     **/
    function dump_debug_info() {}

    /**
     * This function is used to create a legal SQL string that you can use in
     * an SQL statement. The given string is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     *
     * @param string
     * @return string
     **/
    function escape_string($escapestr) {}

    /**
     * Returns client Zval cache statistics.
     *
     * @return bool
     **/
    function get_cache_stats() {}

    /**
     * Returns a character set object providing several properties of the
     * current active character set.
     *
     * @return object
     **/
    function get_charset() {}

    /**
     * Returns a string that represents the MySQL client library version.
     *
     * @return string
     **/
    function get_client_info() {}

    /**
     * Returns client per-process statistics.
     *
     * @return bool
     **/
    function get_client_stats() {}

    /**
     * Returns statistics about the client connection.
     *
     * @return bool
     **/
    function get_connection_stats() {}

    /**
     * @return object
     **/
    function get_warnings() {}

    /**
     * Allocates or initializes a MYSQL object suitable for mysqli_options
     * and mysqli_real_connect.
     *
     * @return mysqli
     **/
    function init() {}

    /**
     * This function is used to ask the server to kill a MySQL thread
     * specified by the processid parameter. This value must be retrieved by
     * calling the mysqli_thread_id function.
     * 
     * To stop a running query you should use the SQL command KILL QUERY
     * processid.
     *
     * @param int
     * @return bool
     **/
    function kill($processid) {}

    /**
     * Indicates if one or more result sets are available from a previous
     * call to mysqli_multi_query.
     *
     * @return bool
     **/
    function more_results() {}

    /**
     * Executes one or multiple queries which are concatenated by a
     * semicolon.
     * 
     * To retrieve the resultset from the first query you can use
     * mysqli_use_result or mysqli_store_result. All subsequent query results
     * can be processed using mysqli_more_results and mysqli_next_result.
     *
     * @param string
     * @return bool
     **/
    function multi_query($query) {}

    /**
     * Prepares next result set from a previous call to mysqli_multi_query
     * which can be retrieved by mysqli_store_result or mysqli_use_result.
     *
     * @return bool
     **/
    function next_result() {}

    /**
     * Used to set extra connect options and affect behavior for a
     * connection.
     * 
     * This function may be called multiple times to set several options.
     * 
     * mysqli_options should be called after mysqli_init and before
     * mysqli_real_connect.
     *
     * @param int
     * @param mixed
     * @return bool
     **/
    function options($option, $value) {}

    /**
     * Checks whether the connection to the server is working. If it has gone
     * down, and global option mysqli.reconnect is enabled an automatic
     * reconnection is attempted.
     * 
     * This function can be used by clients that remain idle for a long
     * while, to check whether the server has closed the connection and
     * reconnect if necessary.
     *
     * @return bool
     **/
    function ping() {}

    /**
     * Poll connections.
     *
     * @param array
     * @param array
     * @param array
     * @param int
     * @param int
     * @return int
     **/
    function poll(&$read, &$error, &$reject, $sec, $usec) {}

    /**
     * Prepares the SQL query pointed to by the null-terminated string query,
     * and returns a statement handle to be used for further operations on
     * the statement. The query must consist of a single SQL statement.
     * 
     * The parameter markers must be bound to application variables using
     * mysqli_stmt_bind_param and/or mysqli_stmt_bind_result before executing
     * the statement or fetching rows.
     *
     * @param string
     * @return mysqli_stmt
     **/
    function prepare($query) {}

    /**
     * Performs a query against the database.
     * 
     * Functionally, using this function is identical to calling
     * mysqli_real_query followed either by mysqli_use_result or
     * mysqli_store_result.
     *
     * @param string
     * @param int
     * @return mixed
     **/
    function query($query, $resultmode) {}

    /**
     * Establish a connection to a MySQL database engine.
     * 
     * This function differs from mysqli_connect:
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param int
     * @param string
     * @param int
     * @return bool
     **/
    function real_connect($host, $username, $passwd, $dbname, $port, $socket, $flags) {}

    /**
     * Executes a single query against the database whose result can then be
     * retrieved or stored using the mysqli_store_result or mysqli_use_result
     * functions.
     * 
     * In order to determine if a given query should return a result set or
     * not, see mysqli_field_count.
     *
     * @param string
     * @return bool
     **/
    function real_query($query) {}

    /**
     * Get result from async query.
     *
     * @return mysqli_result
     **/
    function reap_async_query() {}

    /**
     * Rollbacks the current transaction for the database.
     *
     * @return bool
     **/
    function rollback() {}

    /**
     * Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN
     * depending on a query type. INSERT, UPDATE and similar are master
     * queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.
     *
     * @param string
     * @return int
     **/
    function rpl_query_type($query) {}

    /**
     * Selects the default database to be used when performing queries
     * against the database connection.
     *
     * @param string
     * @return bool
     **/
    function select_db($dbname) {}

    /**
     * @param string
     * @return bool
     **/
    function send_query($query) {}

    /**
     * Sets the default character set to be used when sending data from and
     * to the database server.
     *
     * @param string
     * @return bool
     **/
    function set_charset($charset) {}

    /**
     * Set callback function for LOAD DATA LOCAL INFILE command
     * 
     * The callbacks task is to read input from the file specified in the
     * LOAD DATA LOCAL INFILE and to reformat it into the format understood
     * by LOAD DATA INFILE.
     * 
     * The returned data needs to match the format specified in the LOAD DATA
     *
     * @param mysqli
     * @param callback
     * @return bool
     **/
    function set_local_infile_handler($link, $read_func) {}

    /**
     * Used for establishing secure connections using SSL. It must be called
     * before mysqli_real_connect. This function does nothing unless OpenSSL
     * support is enabled.
     * 
     * Note that MySQL Native Driver does not support SSL, so calling this
     * function when using MySQL Native Driver will result in an error. MySQL
     * Native Driver is enabled by default on Microsoft Windows from PHP
     * version 5.3 onwards.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function ssl_set($key, $cert, $ca, $capath, $cipher) {}

    /**
     * mysqli_stat returns a string containing information similar to that
     * provided by the 'mysqladmin status' command. This includes uptime in
     * seconds and the number of running threads, questions, reloads, and
     * open tables.
     *
     * @return string
     **/
    function stat() {}

    /**
     * Allocates and initializes a statement object suitable for
     * mysqli_stmt_prepare.
     *
     * @return mysqli_stmt
     **/
    function stmt_init() {}

    /**
     * Transfers the result set from the last query on the database
     * connection represented by the link parameter to be used with the
     * mysqli_data_seek function.
     *
     * @return mysqli_result
     **/
    function store_result() {}

    /**
     * Used to initiate the retrieval of a result set from the last query
     * executed using the mysqli_real_query function on the database
     * connection.
     * 
     * Either this or the mysqli_store_result function must be called before
     * the results of a query can be retrieved, and one or the other must be
     * called to prevent the next query on that database connection from
     * failing.
     *
     * @return mysqli_result
     **/
    function use_result() {}

}
class MySQLi_Driver {
    /**
     * @return void
     **/
    function embedded_server_end() {}

    /**
     * @param bool
     * @param array
     * @param array
     * @return bool
     **/
    function embedded_server_start($start, $arguments, $groups) {}

}
class MySQLi_Result {
    /**
     * Returns the position of the field cursor used for the last
     * mysqli_fetch_field call. This value can be used as an argument to
     * mysqli_field_seek.
     *
     * @var int
     **/
    var $current_field;
    /**
     * Returns the number of columns for the most recent query on the
     * connection represented by the link parameter. This function can be
     * useful when using the mysqli_store_result function to determine if the
     * query should have produced a non-empty result set or not without
     * knowing the nature of the query.
     *
     * @var int
     **/
    var $field_count;
    /**
     * Returns the number of fields from specified result set.
     *
     * @var int
     **/
    var $field_count;
    /**
     * The mysqli_fetch_lengths function returns an array containing the
     * lengths of every column of the current row within the result set.
     *
     * @var array
     **/
    var $lengths;
    /**
     * Returns the number of rows in the result set.
     * 
     * The use of mysqli_num_rows depends on whether you use buffered or
     * unbuffered result sets. In case you use unbuffered resultsets
     * mysqli_num_rows will not return the correct number of rows until all
     * the rows in the result have been retrieved.
     *
     * @var int
     **/
    var $num_rows;
    /**
     * The mysqli_data_seek function seeks to an arbitrary result pointer
     * specified by the offset in the result set.
     *
     * @param int
     * @return bool
     **/
    function data_seek($offset) {}

    /**
     * mysqli_fetch_all fetches all result rows and returns the result set as
     * an associative array, a numeric array, or both.
     *
     * @param int
     * @return mixed
     **/
    function fetch_all($resulttype) {}

    /**
     * Returns an array that corresponds to the fetched row or if there are
     * no more rows for the resultset represented by the result parameter.
     * 
     * mysqli_fetch_array is an extended version of the mysqli_fetch_row
     * function. In addition to storing the data in the numeric indices of
     * the result array, the mysqli_fetch_array function can also store the
     * data in associative indices, using the field names of the result set
     * as keys.
     * 
     * If two or more columns of the result have the same field names, the
     * last column will take precedence and overwrite the earlier data. In
     * order to access multiple columns with the same name, the numerically
     * indexed version of the row must be used.
     *
     * @param int
     * @return mixed
     **/
    function fetch_array($resulttype) {}

    /**
     * Returns an associative array that corresponds to the fetched row or if
     * there are no more rows.
     *
     * @return array
     **/
    function fetch_assoc() {}

    /**
     * Returns the definition of one column of a result set as an object.
     * Call this function repeatedly to retrieve information about all
     * columns in the result set.
     *
     * @return object
     **/
    function fetch_field() {}

    /**
     * This function serves an identical purpose to the mysqli_fetch_field
     * function with the single difference that, instead of returning one
     * object at a time for each field, the columns are returned as an array
     * of objects.
     *
     * @return array
     **/
    function fetch_fields() {}

    /**
     * Returns an object which contains field definition information from the
     * specified result set.
     *
     * @param int
     * @return object
     **/
    function fetch_field_direct($fieldnr) {}

    /**
     * The mysqli_fetch_object will return the current row result set as an
     * object where the attributes of the object represent the names of the
     * fields found within the result set.
     *
     * @param string
     * @param array
     * @return object
     **/
    function fetch_object($class_name, $params) {}

    /**
     * Fetches one row of data from the result set and returns it as an
     * enumerated array, where each column is stored in an array offset
     * starting from 0 (zero). Each subsequent call to this function will
     * return the next row within the result set, or if there are no more
     * rows.
     *
     * @return mixed
     **/
    function fetch_row() {}

    /**
     * Sets the field cursor to the given offset. The next call to
     * mysqli_fetch_field will retrieve the field definition of the column
     * associated with that offset.
     *
     * @param int
     * @return bool
     **/
    function field_seek($fieldnr) {}

    /**
     * Frees the memory associated with the result.
     *
     * @return void
     **/
    function free() {}

}
class MySQLi_STMT {
    /**
     * Returns the number of rows affected by INSERT, UPDATE, or DELETE
     * query.
     * 
     * This function only works with queries which update a table. In order
     * to get the number of rows from a SELECT query, use
     * mysqli_stmt_num_rows instead.
     *
     * @var int
     **/
    var $affected_rows;
    /**
     * Returns the error code for the most recently invoked statement
     * function that can succeed or fail.
     * 
     * Client error message numbers are listed in the MySQL errmsg.h header
     * file, server error message numbers are listed in mysqld_error.h. In
     * the MySQL source distribution you can find a complete list of error
     * messages and error numbers in the file Docs/mysqld_error.txt.
     *
     * @var int
     **/
    var $errno;
    /**
     * Returns a containing the error message for the most recently invoked
     * statement function that can succeed or fail.
     *
     * @var string
     **/
    var $error;
    /**
     * @var int
     **/
    var $field_count;
    /**
     * @var int
     **/
    var $insert_id;
    /**
     * Returns the number of rows in the result set. The use of
     * mysqli_stmt_num_rows depends on whether or not you used
     * mysqli_stmt_store_result to buffer the entire result set in the
     * statement handle.
     * 
     * If you use mysqli_stmt_store_result, mysqli_stmt_num_rows may be
     * called immediately.
     *
     * @var int
     **/
    var $num_rows;
    /**
     * Returns the number of parameter markers present in the prepared
     * statement.
     *
     * @var int
     **/
    var $param_count;
    /**
     * Returns a string containing the SQLSTATE error code for the most
     * recently invoked prepared statement function that can succeed or fail.
     * The error code consists of five characters. '00000' means no error.
     * The values are specified by ANSI SQL and ODBC. For a list of possible
     * values, see .
     *
     * @var string
     **/
    var $sqlstate;
    /**
     * Gets the current value of a statement attribute.
     *
     * @param int
     * @return int
     **/
    function attr_get($attr) {}

    /**
     * Used to modify the behavior of a prepared statement. This function may
     * be called multiple times to set several attributes.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function attr_set($attr, $mode) {}

    /**
     * Bind variables for the parameter markers in the SQL statement that was
     * passed to mysqli_prepare.
     *
     * @param string
     * @param mixed
     * @return bool
     **/
    function bind_param($types, &$var1) {}

    /**
     * Binds columns in the result set to variables.
     * 
     * When mysqli_stmt_fetch is called to fetch data, the MySQL
     * client/server protocol places the data for the bound columns into the
     * specified variables var1, ....
     *
     * @param mixed
     * @return bool
     **/
    function bind_result(&$var1) {}

    /**
     * Closes a prepared statement. mysqli_stmt_close also deallocates the
     * statement handle. If the current statement has pending or unread
     * results, this function cancels them so that the next query can be
     * executed.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Seeks to an arbitrary result pointer in the statement result set.
     * 
     * mysqli_stmt_store_result must be called prior to
     * mysqli_stmt_data_seek.
     *
     * @param int
     * @return void
     **/
    function data_seek($offset) {}

    /**
     * Executes a query that has been previously prepared using the
     * mysqli_prepare function. When executed any parameter markers which
     * exist will automatically be replaced with the appropriate data.
     * 
     * If the statement is UPDATE, DELETE, or INSERT, the total number of
     * affected rows can be determined by using the mysqli_stmt_affected_rows
     * function. Likewise, if the query yields a result set the
     * mysqli_stmt_fetch function is used.
     *
     * @return bool
     **/
    function execute() {}

    /**
     * Fetch the result from a prepared statement into the variables bound by
     * mysqli_stmt_bind_result.
     *
     * @return bool
     **/
    function fetch() {}

    /**
     * Frees the result memory associated with the statement, which was
     * allocated by mysqli_stmt_store_result.
     *
     * @return void
     **/
    function free_result() {}

    /**
     * @param mysqli_stmt
     * @return object
     **/
    function get_warnings($stmt) {}

    /**
     * Prepares the SQL query pointed to by the null-terminated string query.
     * 
     * The parameter markers must be bound to application variables using
     * mysqli_stmt_bind_param and/or mysqli_stmt_bind_result before executing
     * the statement or fetching rows.
     *
     * @param string
     * @return mixed
     **/
    function prepare($query) {}

    /**
     * Resets a prepared statement on client and server to state after
     * prepare.
     * 
     * It resets the statement on the server, data sent using
     * mysqli_stmt_send_long_data, unbuffered result sets and current errors.
     * It does not clear bindings or stored result sets. Stored result sets
     * will be cleared when executing the prepared statement (or closing it).
     * 
     * To prepare a statement with another query use function
     * mysqli_stmt_prepare.
     *
     * @return bool
     **/
    function reset() {}

    /**
     * If a statement passed to mysqli_prepare is one that produces a result
     * set, mysqli_stmt_result_metadata returns the result object that can be
     * used to process the meta information such as total number of fields
     * and individual field information.
     * 
     * The result set structure should be freed when you are done with it,
     * which you can do by passing it to mysqli_free_result
     *
     * @return mysqli_result
     **/
    function result_metadata() {}

    /**
     * Allows to send parameter data to the server in pieces (or chunks),
     * e.g. if the size of a blob exceeds the size of max_allowed_packet.
     * This function can be called multiple times to send the parts of a
     * character or binary data value for a column, which must be one of the
     * TEXT or BLOB datatypes.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function send_long_data($param_nr, $data) {}

    /**
     * You must call mysqli_stmt_store_result for every query that
     * successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN),
     * and only if you want to buffer the complete result set by the client,
     * so that the subsequent mysqli_stmt_fetch call returns buffered data.
     *
     * @return bool
     **/
    function store_result() {}

}
class NoRewindIterator extends IteratorIterator {
    /**
     * Gets the current value.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * Gets the inner iterator, that was passed in to NoRewindIterator.
     *
     * @return iterator
     **/
    function getInnerIterator() {}

    /**
     * Gets the current key.
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Forwards to the next element.
     *
     * @return void
     **/
    function next() {}

    /**
     * Prevents the rewind operation on the inner iterator.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Checks whether the iterator is valid.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Constructs a NoRewindIterator.
     *
     * @param Iterator
     **/
    function __construct($iterator) {}

}
class Normalizer {
    /**
     * Checks if the provided string is already in the specified
     * normalization form.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function isNormalized($input, $form) {}

    /**
     * Normalizes the input provided and returns the normalized string
     *
     * @param string
     * @param string
     * @return string
     **/
    function normalize($input, $form) {}

}
class NumberFormatter {
    /**
     * Creates a number formatter.
     *
     * @param string
     * @param int
     * @param string
     * @return NumberFormatter
     **/
    function create($locale, $style, $pattern) {}

    /**
     * Format a numeric value according to the formatter rules.
     *
     * @param number
     * @param int
     * @return string
     **/
    function format($value, $type) {}

    /**
     * Format the currency value according to the formatter rules.
     *
     * @param float
     * @param string
     * @return string
     **/
    function formatCurrency($value, $currency) {}

    /**
     * Get a numeric attribute associated with the formatter. An example of a
     * numeric attribute is the number of integer digits the formatter will
     * produce.
     *
     * @param int
     * @return int
     **/
    function getAttribute($attr) {}

    /**
     * Get error code from the last function performed by the formatter.
     *
     * @return int
     **/
    function getErrorCode() {}

    /**
     * Get error message from the last function performed by the formatter.
     *
     * @return string
     **/
    function getErrorMessage() {}

    /**
     * Get formatter locale name.
     *
     * @param int
     * @return string
     **/
    function getLocale($type) {}

    /**
     * Extract pattern used by the formatter.
     *
     * @return string
     **/
    function getPattern() {}

    /**
     * Get a symbol associated with the formatter. The formatter uses symbols
     * to represent the special locale-dependent characters in a number, for
     * example the percent sign. This API is not supported for rule-based
     * formatters.
     *
     * @param int
     * @return string
     **/
    function getSymbol($attr) {}

    /**
     * Get a text attribute associated with the formatter. An example of a
     * text attribute is the suffix for positive numbers. If the formatter
     * does not understand the attribute, U_UNSUPPORTED_ERROR error is
     * produced. Rule-based formatters only understand
     * NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
     *
     * @param int
     * @return string
     **/
    function getTextAttribute($attr) {}

    /**
     * Parse a string into a number using the current formatter rules.
     *
     * @param string
     * @param int
     * @param int
     * @return mixed
     **/
    function parse($value, $type, &$position) {}

    /**
     * Parse a string into a double and a currency using the current
     * formatter.
     *
     * @param string
     * @param string
     * @param int
     * @return float
     **/
    function parseCurrency($value, &$currency, &$position) {}

    /**
     * Set a numeric attribute associated with the formatter. An example of a
     * numeric attribute is the number of integer digits the formatter will
     * produce.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setAttribute($attr, $value) {}

    /**
     * Set the pattern used by the formatter. Can not be used on a rule-based
     * formatter.
     *
     * @param string
     * @return bool
     **/
    function setPattern($pattern) {}

    /**
     * Set a symbol associated with the formatter. The formatter uses symbols
     * to represent the special locale-dependent characters in a number, for
     * example the percent sign. This API is not supported for rule-based
     * formatters.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function setSymbol($attr, $value) {}

    /**
     * Set a text attribute associated with the formatter. An example of a
     * text attribute is the suffix for positive numbers. If the formatter
     * does not understand the attribute, U_UNSUPPORTED_ERROR error is
     * produced. Rule-based formatters only understand
     * NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function setTextAttribute($attr, $value) {}

}
class OAuth {
    /**
     * Turns off verbose request information (off by default). Alternatively,
     * the debug member can be set to a value to turn debug off.
     *
     * @return bool
     **/
    function disableDebug() {}

    /**
     * Turns off the usual SSL peer certificate and host checks, this is not
     * for production environments. Alternatively, the sslChecks member can
     * be set to to turn SSL checks off.
     *
     * @return bool
     **/
    function disableSSLChecks() {}

    /**
     * Turns on verbose request information useful for debugging, the debug
     * information is stored in the debugInfo member. Alternatively, the
     * debug member can be set to a non- value to turn debug on.
     *
     * @return bool
     **/
    function enableDebug() {}

    /**
     * Turns on the usual SSL peer certificate and host checks (enabled by
     * default). Alternatively, the sslChecks member can be set to a non-
     * value to turn SSL checks off.
     *
     * @return bool
     **/
    function enableSSLChecks() {}

    /**
     * Fetch a resource.
     *
     * @param string
     * @param array
     * @param int
     * @param array
     * @return bool
     **/
    function fetch($protected_resource_url, $extra_parameters, $http_method, $http_headers) {}

    /**
     * Fetch an access token, secret and any additional response parameters
     * from the service provider.
     *
     * @param string
     * @param string
     * @param string
     * @return array
     **/
    function getAccessToken($access_token_url, $auth_session_handle, $verifier_token) {}

    /**
     * Get the raw response of the most recent request.
     *
     * @return string
     **/
    function getLastResponse() {}

    /**
     * Get HTTP information about the last response.
     *
     * @return array
     **/
    function getLastResponseInfo() {}

    /**
     * Fetch a request token, secret and any additional response parameters
     * from the service provider.
     *
     * @param string
     * @param string
     * @return array
     **/
    function getRequestToken($request_token_url, $callback_url) {}

    /**
     * Set where the OAuth parameters should be passed.
     *
     * @param string
     * @return bool
     **/
    function setAuthType($auth_type) {}

    /**
     * Sets the nonce for all subsequent requests.
     *
     * @param string
     * @return bool
     **/
    function setNonce($nonce) {}

    /**
     * Set the token and secret for subsequent requests.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function setToken($token, $token_secret) {}

    /**
     * Sets the OAuth version for subsequent requests
     *
     * @param string
     * @return bool
     **/
    function setVersion($version) {}

    /**
     * Creates a new OAuth object
     *
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($consumer_key, $consumer_secret, $signature_method, $auth_type) {}

}
class OAuthException extends Exception {
}
class OuterIterator extends Iterator {
    /**
     * Returns the inner iterator for the current iterator entry.
     *
     * @return Iterator
     **/
    function getInnerIterator() {}

}
class OutOfBoundsException extends RuntimeException {
}
class OutOfRangeException extends LogicException {
}
class OverflowException extends RuntimeException {
}
class ParentIterator extends RecursiveFilterIterator implements RecursiveIterator, OuterIterator, Traversable, Iterator {
    /**
     * Determines if the the current element has children.
     *
     * @return bool
     **/
    function accept() {}

    /**
     * Get the inner iterator's children contained in a ParentIterator.
     *
     * @return ParentIterator
     **/
    function getChildren() {}

    /**
     * Check whether the inner iterator's current element has children.
     *
     * @return bool
     **/
    function hasChildren() {}

    /**
     * Moves the iterator forward.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewinds the iterator.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Constructs a ParentIterator on an iterator.
     *
     * @param RecursiveIterator
     **/
    function __construct($iterator) {}

}
class PDO {
    const ATTR_AUTOCOMMIT = 0;
    const ATTR_CASE = 0;
    const ATTR_CLIENT_VERSION = 0;
    const ATTR_CONNECTION_STATUS = 0;
    const ATTR_CURSOR = 0;
    const ATTR_CURSOR_NAME = 0;
    const ATTR_DEFAULT_FETCH_MODE = 0;
    const ATTR_DRIVER_NAME = '';
    const ATTR_EMULATE_PREPARES = 0;
    const ATTR_ERRMODE = 0;
    const ATTR_FETCH_CATALOG_NAMES = 0;
    const ATTR_FETCH_TABLE_NAMES = 0;
    const ATTR_MAX_COLUMN_LEN = 0;
    const ATTR_ORACLE_NULLS = 0;
    const ATTR_PERSISTENT = 0;
    const ATTR_PREFETCH = 0;
    const ATTR_SERVER_INFO = 0;
    const ATTR_SERVER_VERSION = 0;
    const ATTR_STATEMENT_CLASS = 0;
    const ATTR_STRINGIFY_FETCHES = 0;
    const ATTR_TIMEOUT = 0;
    const CASE_LOWER = 0;
    const CASE_NATURAL = 0;
    const CASE_UPPER = 0;
    const CURSOR_FWDONLY = 0;
    const CURSOR_SCROLL = 0;
    const ERRMODE_EXCEPTION = 0;
    const ERRMODE_SILENT = 0;
    const ERRMODE_WARNING = 0;
    const ERR_NONE = '';
    const FB_ATTR_DATE_FORMAT = 0;
    const FB_ATTR_TIMESTAMP_FORMAT = 0;
    const FB_ATTR_TIME_FORMAT = 0;
    const FETCH_ASSOC = 0;
    const FETCH_BOTH = 0;
    const FETCH_BOUND = 0;
    const FETCH_CLASS = 0;
    const FETCH_CLASSTYPE = 0;
    const FETCH_COLUMN = 0;
    const FETCH_FUNC = 0;
    const FETCH_GROUP = 0;
    const FETCH_INTO = 0;
    const FETCH_KEY_PAIR = 0;
    const FETCH_LAZY = 0;
    const FETCH_NAMED = 0;
    const FETCH_NUM = 0;
    const FETCH_OBJ = 0;
    const FETCH_ORI_ABS = 0;
    const FETCH_ORI_FIRST = 0;
    const FETCH_ORI_LAST = 0;
    const FETCH_ORI_NEXT = 0;
    const FETCH_ORI_PRIOR = 0;
    const FETCH_ORI_REL = 0;
    const FETCH_PROPS_LATE = 0;
    const FETCH_SERIALIZE = 0;
    const FETCH_UNIQUE = 0;
    const MYSQL_ATTR_DIRECT_QUERY = 0;
    const MYSQL_ATTR_INIT_COMMAND = 0;
    const MYSQL_ATTR_LOCAL_INFILE = 0;
    const MYSQL_ATTR_MAX_BUFFER_SIZE = 0;
    const MYSQL_ATTR_READ_DEFAULT_FILE = 0;
    const MYSQL_ATTR_READ_DEFAULT_GROUP = 0;
    const MYSQL_ATTR_USE_BUFFERED_QUERY = 0;
    const NULL_EMPTY_STRING = 0;
    const NULL_NATURAL = 0;
    const NULL_TO_STRING = 0;
    const PARAM_BOOL = 0;
    const PARAM_EVT_ALLOC = 0;
    const PARAM_EVT_EXEC_POST = 0;
    const PARAM_EVT_EXEC_PRE = 0;
    const PARAM_EVT_FETCH_POST = 0;
    const PARAM_EVT_FETCH_PRE = 0;
    const PARAM_EVT_FREE = 0;
    const PARAM_EVT_NORMALIZE = 0;
    const PARAM_INPUT_OUTPUT = 0;
    const PARAM_INT = 0;
    const PARAM_LOB = 0;
    const PARAM_NULL = 0;
    const PARAM_STMT = 0;
    const PARAM_STR = 0;
    /**
     * Turns off autocommit mode. While autocommit mode is turned off,
     * changes made to the database via the PDO object instance are not
     * committed until you end the transaction by calling PDO::commit.
     * Calling PDO::rollBack will roll back all changes to the database and
     * return the connection to autocommit mode.
     * 
     * Some databases, including MySQL, automatically issue an implicit
     * COMMIT when a database definition language (DDL) statement such as
     * DROP TABLE or CREATE TABLE is issued within a transaction. The
     * implicit COMMIT will prevent you from rolling back any other changes
     * within the transaction boundary.
     *
     * @return bool
     **/
    function beginTransaction() {}

    /**
     * Commits a transaction, returning the database connection to autocommit
     * mode until the next call to PDO::beginTransaction starts a new
     * transaction.
     *
     * @return bool
     **/
    function commit() {}

    /**
     * @return mixed
     **/
    function errorCode() {}

    /**
     * @return array
     **/
    function errorInfo() {}

    /**
     * PDO::exec executes an SQL statement in a single function call,
     * returning the number of rows affected by the statement.
     * 
     * PDO::exec does not return results from a SELECT statement. For a
     * SELECT statement that you only need to issue once during your program,
     * consider issuing PDO::query. For a statement that you need to issue
     * multiple times, prepare a PDOStatement object with PDO::prepare and
     * issue the statement with PDOStatement::execute.
     *
     * @param string
     * @return int
     **/
    function exec($statement) {}

    /**
     * This function returns the value of a database connection attribute. To
     * retrieve PDOStatement attributes, refer to PDOStatement::getAttribute.
     * 
     * Note that some database/driver combinations may not support all of the
     * database connection attributes.
     *
     * @param int
     * @return mixed
     **/
    function getAttribute($attribute) {}

    /**
     * This function returns all currently available PDO drivers which can be
     * used in DSN parameter of PDO::__construct. This is a static method.
     *
     * @return array
     **/
    function getAvailableDrivers() {}

    /**
     * Returns the ID of the last inserted row, or the last value from a
     * sequence object, depending on the underlying driver. For example,
     * PDO_PGSQL requires you to specify the name of a sequence object for
     * the name parameter.
     *
     * @param string
     * @return string
     **/
    function lastInsertId($name) {}

    /**
     * PDO::pgsqlLOBCreate creates a large object and returns the OID of that
     * object. You may then open a stream on the object using
     * PDO::pgsqlLOBOpen to read or write data to it. The OID can be stored
     * in columns of type OID and be used to reference the large object,
     * without causing the row to grow arbitrarily large. The large object
     * will continue to live in the database until it is removed by calling
     * PDO::pgsqlLOBUnlink.
     * 
     * Large objects can be up to 2GB in size, but are cumbersome to use; you
     * need to ensure that PDO::pgsqlLOBUnlink is called prior to deleting
     * the last row that references its OID from your database. In addition,
     * large objects have no access controls. As an alternative, try the
     * bytea column type; recent versions of PostgreSQL allow bytea columns
     * of up to 1GB in size and transparently manage the storage for optimal
     * row size.
     *
     * @return string
     **/
    function pgsqlLOBCreate() {}

    /**
     * PDO::pgsqlLOBOpen opens a stream to access the data referenced by oid.
     * If mode is r, the stream is opened for reading, if mode is w, then the
     * stream will be opened for writing. You can use all the usual
     * filesystem functions, such as fread, fwrite and fgets to manipulate
     * the contents of the stream.
     *
     * @param string
     * @param string
     * @return resource
     **/
    function pgsqlLOBOpen($oid, $mode) {}

    /**
     * Deletes a large object from the database identified by OID.
     *
     * @param string
     * @return bool
     **/
    function pgsqlLOBUnlink($oid) {}

    /**
     * Prepares an SQL statement to be executed by the PDOStatement::execute
     * method. The SQL statement can contain zero or more named (:name) or
     * question mark (?) parameter markers for which real values will be
     * substituted when the statement is executed. You cannot use both named
     * and question mark parameter markers within the same SQL statement;
     * pick one or the other parameter style.
     * 
     * You must include a unique parameter marker for each value you wish to
     * pass in to the statement when you call PDOStatement::execute. You
     * cannot use a named parameter marker of the same name twice in a
     * prepared statement. You cannot bind multiple values to a single named
     * parameter in, for example, the IN() clause of an SQL statement.
     * 
     * Calling PDO::prepare and PDOStatement::execute for statements that
     * will be issued multiple times with different parameter values
     * optimizes the performance of your application by allowing the driver
     * to negotiate client and/or server side caching of the query plan and
     * meta information, and helps to prevent SQL injection attacks by
     * eliminating the need to manually quote the parameters.
     * 
     * PDO will emulate prepared statements/bound parameters for drivers that
     * do not natively support them, and can also rewrite named or question
     * mark style parameter markers to something more appropriate, if the
     * driver supports one style but not the other.
     *
     * @param string
     * @param array
     * @return PDOStatement
     **/
    function prepare($statement, $driver_options) {}

    /**
     * PDO::query executes an SQL statement in a single function call,
     * returning the result set (if any) returned by the statement as a
     * PDOStatement object.
     * 
     * For a query that you need to issue multiple times, you will realize
     * better performance if you prepare a PDOStatement object using
     * PDO::prepare and issue the statement with multiple calls to
     * PDOStatement::execute.
     * 
     * If you do not fetch all of the data in a result set before issuing
     * your next call to PDO::query, your call may fail. Call
     * PDOStatement::closeCursor to release the database resources associated
     * with the PDOStatement object before issuing your next call to
     * PDO::query.
     *
     * @param string
     * @return PDOStatement
     **/
    function query($statement) {}

    /**
     * PDO::quote places quotes around the input string (if required) and
     * escapes special characters within the input string, using a quoting
     * style appropriate to the underlying driver.
     * 
     * If you are using this function to build SQL statements, you are
     * strongly recommended to use PDO::prepare to prepare SQL statements
     * with bound parameters instead of using PDO::quote to interpolate user
     * input into a SQL statement. Prepared statements with bound parameters
     * are not only more portable, more convenient, immune to SQL injection,
     * but are often much faster to execute than interpolated queries, as
     * both the server and client side can cache a compiled form of the
     * query.
     * 
     * Not all PDO drivers implement this method (notably PDO_ODBC). Consider
     * using prepared statements instead.
     *
     * @param string
     * @param int
     * @return string
     **/
    function quote($string, $parameter_type) {}

    /**
     * Rolls back the current transaction, as initiated by
     * PDO::beginTransaction. It is an error to call this method if no
     * transaction is active.
     * 
     * If the database was set to autocommit mode, this function will restore
     * autocommit mode after it has rolled back the transaction.
     * 
     * Some databases, including MySQL, automatically issue an implicit
     * COMMIT when a database definition language (DDL) statement such as
     * DROP TABLE or CREATE TABLE is issued within a transaction. The
     * implicit COMMIT will prevent you from rolling back any other changes
     * within the transaction boundary.
     *
     * @return bool
     **/
    function rollBack() {}

    /**
     * Sets an attribute on the database handle. Some of the available
     * generic attributes are listed below; some drivers may make use of
     * additional driver specific attributes.
     * 
     * PDO::ATTR_CASE: Force column names to a specific case.
     * 
     * PDO::CASE_LOWER: Force column names to lower case.
     * 
     * PDO::CASE_NATURAL: Leave column names as returned by the database
     * driver.
     * 
     * PDO::CASE_UPPER: Force column names to upper case.
     * 
     * PDO::ATTR_ERRMODE: Error reporting.
     * 
     * PDO::ERRMODE_SILENT: Just set error codes. PDO::ERRMODE_WARNING:
     * Raise E_WARNING. PDO::ERRMODE_EXCEPTION: Throw exceptions.
     * 
     * PDO::ATTR_ORACLE_NULLS (available with all drivers, not just Oracle):
     * Conversion of NULL and empty strings.
     * 
     * PDO::NULL_NATURAL: No conversion. PDO::NULL_EMPTY_STRING: Empty
     * string is converted to . PDO::NULL_TO_STRING: NULL is converted to an
     * empty string.
     * 
     * PDO::ATTR_STRINGIFY_FETCHES: Convert numeric values to strings when
     * fetching. Requires bool.
     * 
     * PDO::ATTR_STATEMENT_CLASS: Set user-supplied statement class derived
     * from PDOStatement. Cannot be used with persistent PDO instances.
     * Requires array(string classname, array(mixed constructor_args)).
     * 
     * PDO::ATTR_AUTOCOMMIT (available in OCI, Firebird and MySQL): Whether
     * to autocommit every single statement.
     * 
     * PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (available in MySQL): Use buffered
     * queries.
     *
     * @param int
     * @param mixed
     * @return bool
     **/
    function setAttribute($attribute, $value) {}

    /**
     * This method is similar to except that it registers functions that can
     * be used to calculate a result aggregated across all the rows of a
     * query.
     * 
     * The key difference between this method and is that two functions are
     * required to manage the aggregate.
     *
     * @param string
     * @param callback
     * @param callback
     * @param int
     * @return bool
     **/
    function sqliteCreateAggregate($function_name, $step_func, $finalize_func, $num_args) {}

    /**
     * This method allows you to register a PHP function with SQLite as an
     * UDF (User Defined Function), so that it can be called from within your
     * SQL statements.
     * 
     * The UDF can be used in any SQL statement that can call functions, such
     * as SELECT and UPDATE statements and also in triggers.
     *
     * @param string
     * @param callback
     * @param int
     * @return bool
     **/
    function sqliteCreateFunction($function_name, $callback, $num_args) {}

}
class PDOException extends RuntimeException {
}
class PDOStatement implements Traversable {
    /**
     * PDOStatement::bindColumn arranges to have a particular variable bound
     * to a given column in the result-set from a query. Each call to
     * PDOStatement::fetch or PDOStatement::fetchAll will update all the
     * variables that are bound to columns.
     *
     * @param mixed
     * @param mixed
     * @param int
     * @param int
     * @param mixed
     * @return bool
     **/
    function bindColumn($column, &$param, $type, $maxlen, $driverdata) {}

    /**
     * Binds a PHP variable to a corresponding named or question mark
     * placeholder in the SQL statement that was use to prepare the
     * statement. Unlike PDOStatement::bindValue, the variable is bound as a
     * reference and will only be evaluated at the time that
     * PDOStatement::execute is called.
     * 
     * Most parameters are input parameters, that is, parameters that are
     * used in a read-only fashion to build up the query. Some drivers
     * support the invocation of stored procedures that return data as output
     * parameters, and some also as input/output parameters that both send in
     * data and are updated to receive it.
     *
     * @param mixed
     * @param mixed
     * @param int
     * @param int
     * @param mixed
     * @return bool
     **/
    function bindParam($parameter, &$variable, $data_type, $length, $driver_options) {}

    /**
     * Binds a value to a corresponding named or question mark placeholder in
     * the SQL statement that was use to prepare the statement.
     *
     * @param mixed
     * @param mixed
     * @param int
     * @return bool
     **/
    function bindValue($parameter, $value, $data_type) {}

    /**
     * PDOStatement::closeCursor frees up the connection to the server so
     * that other SQL statements may be issued, but leaves the statement in a
     * state that enables it to be executed again.
     * 
     * This method is useful for database drivers that do not support
     * executing a PDOStatement object when a previously executed
     * PDOStatement object still has unfetched rows. If your database driver
     * suffers from this limitation, the problem may manifest itself in an
     * out-of-sequence error.
     * 
     * PDOStatement::closeCursor is implemented either as an optional driver
     * specific method (allowing for maximum efficiency), or as the generic
     * PDO fallback if no driver specific function is installed. The PDO
     * generic fallback is semantically the same as writing the following
     * code in your PHP script:
     *
     * @return bool
     **/
    function closeCursor() {}

    /**
     * Use PDOStatement::columnCount to return the number of columns in the
     * result set represented by the PDOStatement object.
     * 
     * If the PDOStatement object was returned from PDO::query, the column
     * count is immediately available.
     * 
     * If the PDOStatement object was returned from PDO::prepare, an accurate
     * column count will not be available until you invoke
     * PDOStatement::execute.
     *
     * @return int
     **/
    function columnCount() {}

    /**
     * Dumps the informations contained by a prepared statement directly on
     * the output. It will provide the SQL query in use, the number of
     * parameters used (Params), the list of parameters, with their name,
     * type (paramtype) as an integer, their key name or position, the value,
     * and the position in the query (if this is supported by the PDO driver,
     * otherwise, it will be -1).
     * 
     * This is a debug function, which dump directly the data on the normal
     * output.
     * 
     * This will only dumps the parameters in the statement at the moment of
     * the dump. Extra parameters are not stored in the statement, and not
     * displayed.
     *
     * @return bool
     **/
    function debugDumpParams() {}

    /**
     * @return string
     **/
    function errorCode() {}

    /**
     * @return array
     **/
    function errorInfo() {}

    /**
     * Execute the prepared statement. If the prepared statement included
     * parameter markers, you must either:
     * 
     * call PDOStatement::bindParam to bind PHP variables to the parameter
     * markers: bound variables pass their value as input and receive the
     * output value, if any, of their associated parameter markers or pass an
     * array of input-only parameter values
     *
     * @param array
     * @return bool
     **/
    function execute($input_parameters) {}

    /**
     * Fetches a row from a result set associated with a PDOStatement object.
     * The fetch_style parameter determines how PDO returns the row.
     *
     * @param int
     * @param int
     * @param int
     * @return mixed
     **/
    function fetch($fetch_style, $cursor_orientation, $cursor_offset) {}

    /**
     * @param int
     * @param int
     * @param array
     * @return array
     **/
    function fetchAll($fetch_style, $column_index, $ctor_args) {}

    /**
     * Returns a single column from the next row of a result set or if there
     * are no more rows.
     *
     * @param int
     * @return string
     **/
    function fetchColumn($column_number) {}

    /**
     * Fetches the next row and returns it as an object. This function is an
     * alternative to PDOStatement::fetch with PDO::FETCH_CLASS or
     * PDO::FETCH_OBJ style.
     *
     * @param string
     * @param array
     * @return mixed
     **/
    function fetchObject($class_name, $ctor_args) {}

    /**
     * Gets an attribute of the statement. Currently, no generic attributes
     * exist but only driver specific:
     * 
     * PDO::ATTR_CURSOR_NAME (Firebird and ODBC specific): Get the name of
     * cursor for UPDATE ... WHERE CURRENT OF.
     *
     * @param int
     * @return mixed
     **/
    function getAttribute($attribute) {}

    /**
     * Retrieves the metadata for a 0-indexed column in a result set as an
     * associative array.
     *
     * @param int
     * @return array
     **/
    function getColumnMeta($column) {}

    /**
     * Some database servers support stored procedures that return more than
     * one rowset (also known as a result set). PDOStatement::nextRowset
     * enables you to access the second and subsequent rowsets associated
     * with a PDOStatement object. Each rowset can have a different set of
     * columns from the preceding rowset.
     *
     * @return bool
     **/
    function nextRowset() {}

    /**
     * PDOStatement::rowCount returns the number of rows affected by the last
     * DELETE, INSERT, or UPDATE statement executed by the corresponding
     * PDOStatement object.
     * 
     * If the last SQL statement executed by the associated PDOStatement was
     * a SELECT statement, some databases may return the number of rows
     * returned by that statement. However, this behaviour is not guaranteed
     * for all databases and should not be relied on for portable
     * applications.
     *
     * @return int
     **/
    function rowCount() {}

    /**
     * Sets an attribute on the statement. Currently, no generic attributes
     * are set but only driver specific:
     * 
     * PDO::ATTR_CURSOR_NAME (Firebird and ODBC specific): Set the name of
     * cursor for UPDATE ... WHERE CURRENT OF.
     *
     * @param int
     * @param mixed
     * @return bool
     **/
    function setAttribute($attribute, $value) {}

    /**
     * @param int
     * @return bool
     **/
    function setFetchMode($mode) {}

}
class Phar extends RecursiveDirectoryIterator implements Countable, ArrayAccess {
    const BZ2 = 0;
    const COMPRESSED = 0;
    const GZ = 0;
    const MD5 = 0;
    const NONE = 0;
    const OPENSSL = 0;
    const PHAR = 0;
    const PHP = 0;
    const PHPS = 0;
    const SAME = 0;
    const SHA1 = 0;
    const SHA256 = 0;
    const SHA512 = 0;
    const TAR = 0;
    const ZIP = 0;
    /**
     * With this method, an empty directory is created with path dirname.
     * This method is similar to ZipArchive::addEmptyDir.
     *
     * @param string
     * @return void
     **/
    function addEmptyDir($dirname) {}

    /**
     * With this method, any file or URL can be added to the phar archive. If
     * the optional second parameter localname is specified, the file will be
     * stored in the archive with that name, otherwise the file parameter is
     * used as the path to store within the archive. URLs must have a
     * localname or an exception is thrown. This method is similar to
     * ZipArchive::addFile.
     *
     * @param string
     * @param string
     * @return void
     **/
    function addFile($file, $localname) {}

    /**
     * With this method, any string can be added to the phar archive. The
     * file will be stored in the archive with localname as its path. This
     * method is similar to ZipArchive::addFromString.
     *
     * @param string
     * @param string
     * @return void
     **/
    function addFromString($localname, $contents) {}

    /**
     * Return the API version of the phar file format that will be used when
     * creating phars. The Phar extension supports reading API version 1.0.0
     * or newer. API version 1.1.0 is required for SHA-256 and SHA-512 hash,
     * and API version 1.1.1 is required to store empty directories.
     *
     * @return string
     **/
    function apiVersion() {}

    /**
     * Populate a phar archive from directory contents. The optional second
     * parameter is a regular expression (pcre) that is used to exclude
     * files. Any filename that matches the regular expression will be
     * included, all others will be excluded. For more fine-grained control,
     * use Phar::buildFromIterator.
     *
     * @param string
     * @param string
     * @return array
     **/
    function buildFromDirectory($base_dir, $regex) {}

    /**
     * Populate a phar archive from an iterator. Two styles of iterators are
     * supported, iterators that map the filename within the phar to the name
     * of a file on disk, and iterators like DirectoryIterator that return
     * SplFileInfo objects. For iterators that return SplFileInfo objects,
     * the second parameter is required.
     *
     * @param Iterator
     * @param string
     * @return array
     **/
    function buildFromIterator($iter, $base_directory) {}

    /**
     * This should be used to test whether compression is possible prior to
     * loading a phar archive containing compressed files.
     *
     * @param int
     * @return bool
     **/
    function canCompress($type) {}

    /**
     * This static method determines whether write access has been disabled
     * in the system php.ini via the phar.readonly ini variable.
     *
     * @return bool
     **/
    function canWrite() {}

    /**
     * For tar-based and phar-based phar archives, this method compresses the
     * entire archive using gzip compression or bzip2 compression. The
     * resulting file can be processed with the gunzip command/bunzip
     * command, or accessed directly and transparently with the Phar
     * extension.
     * 
     * For Zip-based phar archives, this method fails with an exception. The
     * zlib extension must be enabled to compress with gzip compression, the
     * bzip2 extension must be enabled in order to compress with bzip2
     * compression. As with all functionality that modifies the contents of a
     * phar, the phar.readonly INI variable must be off in order to succeed.
     * 
     * In addition, this method automatically renames the archive, appending
     * .gz, .bz2 or removing the extension if passed Phar::NONE to remove
     * compression. Alternatively, a file extension may be specified with the
     * second parameter.
     *
     * @param int
     * @param string
     * @return object
     **/
    function compress($compression, $extension) {}

    /**
     * This method compresses all files in the Phar archive using bzip2
     * compression. The bzip2 extension must be enabled to take advantage of
     * this feature. In addition, if any files are already compressed using
     * gzip compression, the zlib extension must be enabled in order to
     * decompress the files prior to re-compressing with bzip2 compression.
     * As with all functionality that modifies the contents of a phar, the
     * phar.readonly INI variable must be off in order to succeed.
     *
     * @return bool
     **/
    function compressAllFilesBZIP2() {}

    /**
     * For tar-based phar archives, this method compresses the entire archive
     * using gzip compression. The resulting file can be processed with the
     * gunzip command, or accessed directly and transparently with the Phar
     * extension.
     * 
     * For Zip-based and phar-based phar archives, this method compresses all
     * files in the Phar archive using gzip compression. The zlib extension
     * must be enabled to take advantage of this feature. In addition, if any
     * files are already compressed using bzip2 compression, the bzip2
     * extension must be enabled in order to decompress the files prior to
     * re-compressing with gzip compression. As with all functionality that
     * modifies the contents of a phar, the phar.readonly INI variable must
     * be off in order to succeed.
     *
     * @return bool
     **/
    function compressAllFilesGZ() {}

    /**
     * For tar-based phar archives, this method throws a
     * BadMethodCallException, as compression of individual files within a
     * tar archive is not supported by the file format. Use Phar::compress to
     * compress an entire tar-based phar archive.
     * 
     * For Zip-based and phar-based phar archives, this method compresses all
     * files in the Phar archive using the specified compression. The zlib or
     * bzip2 extensions must be enabled to take advantage of this feature. In
     * addition, if any files are already compressed using bzip2/zlib
     * compression, the respective extension must be enabled in order to
     * decompress the files prior to re-compressing. As with all
     * functionality that modifies the contents of a phar, the phar.readonly
     * INI variable must be off in order to succeed.
     *
     * @param int
     * @return void
     **/
    function compressFiles($compression) {}

    /**
     * This method is used to convert an executable phar archive to either a
     * tar or zip file. To make the tar or zip non-executable, the phar stub
     * and phar alias files are removed from the newly created archive.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException if the archive is in phar file format. For
     * archives in tar or zip file format, this method converts the archive
     * to a non-executable archive.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * PharData object. The old archive is not removed from disk, and should
     * be done manually after the process has finished.
     *
     * @param int
     * @param int
     * @param string
     * @return PharData
     **/
    function convertToData($format, $compression, $extension) {}

    /**
     * This method is used to convert a phar archive to another file format.
     * For instance, it can be used to create a tar-based executable phar
     * archive from a zip-based executable phar archive, or from an
     * executable phar archive in the phar file format. In addition, it can
     * be used to apply whole-archive compression to a tar or phar-based
     * archive.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * Phar object. The old archive is not removed from disk, and should be
     * done manually after the process has finished.
     *
     * @param int
     * @param int
     * @param string
     * @return Phar
     **/
    function convertToExecutable($format, $compression, $extension) {}

    /**
     * Copy a file internal to the phar archive to another new file within
     * the phar. This is an object-oriented alternative to using copy with
     * the phar stream wrapper.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function copy($oldfile, $newfile) {}

    /**
     * @return int
     **/
    function count() {}

    /**
     * This method is intended for creation of phar-file format-specific
     * stubs, and is not intended for use with tar- or zip-based phar
     * archives.
     * 
     * Phar archives contain a bootstrap loader, or stub written in PHP that
     * is executed when the archive is executed in PHP either via include:
     * 
     * or by simple execution:
     * 
     * This method provides a simple and easy method to create a stub that
     * will run a startup file from the phar archive. In addition, different
     * files can be specified for running the phar archive from the command
     * line versus through a web server. The loader stub also calls
     * Phar::interceptFileFuncs to allow easy bundling of a PHP application
     * that accesses the file system. If the phar extension is not present,
     * the loader stub will extract the phar archive to a temporary directory
     * and then operate on the files. A shutdown function erases the
     * temporary files on exit.
     *
     * @param string
     * @param string
     * @return string
     **/
    function createDefaultStub($indexfile, $webindexfile) {}

    /**
     * For tar-based and phar-based phar archives, this method decompresses
     * the entire archive.
     * 
     * For Zip-based phar archives, this method fails with an exception. The
     * zlib extension must be enabled to decompress an archive compressed
     * with with gzip compression, and the bzip2 extension must be enabled in
     * order to decompress an archive compressed with bzip2 compression. As
     * with all functionality that modifies the contents of a phar, the
     * phar.readonly INI variable must be off in order to succeed.
     * 
     * In addition, this method automatically changes the file extension of
     * the archive, .phar by default for phar archives, or .phar.tar for
     * tar-based phar archives. Alternatively, a file extension may be
     * specified with the second parameter.
     *
     * @param string
     * @return object
     **/
    function decompress($extension) {}

    /**
     * For tar-based phar archives, this method throws a
     * BadMethodCallException, as compression of individual files within a
     * tar archive is not supported by the file format. Use Phar::compress to
     * compress an entire tar-based phar archive.
     * 
     * For Zip-based and phar-based phar archives, this method decompresses
     * all files in the Phar archive. The zlib or bzip2 extensions must be
     * enabled to take advantage of this feature if any files are compressed
     * using bzip2/zlib compression. As with all functionality that modifies
     * the contents of a phar, the phar.readonly INI variable must be off in
     * order to succeed.
     *
     * @return bool
     **/
    function decompressFiles() {}

    /**
     * Delete a file within an archive. This is the functional equivalent of
     * calling unlink on the stream wrapper equivalent, as shown in the
     * example below.
     *
     * @param string
     * @return bool
     **/
    function delete($entry) {}

    /**
     * Deletes the global metadata of the phar
     *
     * @return bool
     **/
    function delMetadata() {}

    /**
     * Extract all files within a phar archive to disk. Extracted files and
     * directories preserve permissions as stored in the archive. The
     * optional parameters allow optional control over which files are
     * extracted, and whether existing files on disk can be overwritten. The
     * second parameter files can be either the name of a file or directory
     * to extract, or an array of names of files and directories to extract.
     * By default, this method will not overwrite existing files, the third
     * parameter can be set to true to enable overwriting of files. This
     * method is similar to ZipArchive::extractTo.
     *
     * @param string
     * @param string|array
     * @param bool
     * @return bool
     **/
    function extractTo($pathto, $files, $overwrite) {}

    /**
     * Retrieve archive meta-data. Meta-data can be any PHP variable that can
     * be serialized.
     *
     * @return mixed
     **/
    function getMetaData() {}

    /**
     * This method can be used to determine whether a phar has either had an
     * internal file deleted, or contents of a file changed in some way.
     *
     * @return bool
     **/
    function getModified() {}

    /**
     * Returns the verification signature of a phar archive in a hexadecimal
     * string.
     *
     * @return array
     **/
    function getSignature() {}

    /**
     * Phar archives contain a bootstrap loader, or stub written in PHP that
     * is executed when the archive is executed in PHP either via include:
     * 
     * or by simple execution:
     *
     * @return string
     **/
    function getStub() {}

    /**
     * @return array
     **/
    function getSupportedCompression() {}

    /**
     * Return array of supported signature types
     *
     * @return array
     **/
    function getSupportedSignatures() {}

    /**
     * Returns the API version of an opened Phar archive.
     *
     * @return string
     **/
    function getVersion() {}

    /**
     * Returns whether phar has global meta-data set.
     *
     * @return bool
     **/
    function hasMetadata() {}

    /**
     * instructs phar to intercept fopen, readfile, file_get_contents,
     * opendir, and all of the stat-related functions. If any of these
     * functions is called from within a phar archive with a relative path,
     * the call is modified to access a file within the phar archive.
     * Absolute paths are assumed to be attempts to load external files from
     * the filesystem.
     * 
     * This function makes it possible to run PHP applications designed to
     * run off of a hard disk as a phar application.
     *
     * @return void
     **/
    function interceptFileFuncs() {}

    /**
     * This method can be used to determine whether a Phar will save changes
     * to disk immediately, or whether a call to Phar-stopBuffering is needed
     * to enable saving changes.
     * 
     * Phar write buffering is per-archive, buffering active for the foo.phar
     * Phar archive does not affect changes to the bar.phar Phar archive.
     *
     * @return bool
     **/
    function isBuffering() {}

    /**
     * Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed
     * (.tar.gz/tar.bz and so on). Zip-based phar archives cannot be
     * compressed as a file, and so this method will always return if a
     * zip-based phar archive is queried.
     *
     * @return mixed
     **/
    function isCompressed() {}

    /**
     * @param int
     * @return bool
     **/
    function isFileFormat($format) {}

    /**
     * Returns whether the given filename is a valid phar filename that will
     * be recognized as a phar archive by the phar extension. This can be
     * used to test a name without having to instantiate a phar archive and
     * catch the inevitable Exception that will be thrown if an invalid name
     * is specified.
     *
     * @param string
     * @param bool
     * @return bool
     **/
    function isValidPharFilename($filename, $executable) {}

    /**
     * This method returns if phar.readonly is 0, and the actual phar archive
     * on disk is not read-only.
     *
     * @return bool
     **/
    function isWritable() {}

    /**
     * This can be used to read the contents of an external Phar archive.
     * This is most useful for assigning an alias to a phar so that
     * subsequent references to the phar can use the shorter alias, or for
     * loading Phar archives that only contain data and are not intended for
     * execution/inclusion in PHP scripts.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function loadPhar($filename, $alias) {}

    /**
     * This static method can only be used inside a Phar archive's loader
     * stub in order to initialize the phar when it is directly executed, or
     * when it is included in another script.
     *
     * @param string
     * @param int
     * @return bool
     **/
    function mapPhar($alias, $dataoffset) {}

    /**
     * Much like the unix file system concept of mounting external devices to
     * paths within the directory tree, Phar::mount allows referring to
     * external files and directories as if they were inside of an archive.
     * This allows powerful abstraction such as referring to external
     * configuration files as if they were inside the archive.
     *
     * @param string
     * @param string
     * @return void
     **/
    function mount($pharpath, $externalpath) {}

    /**
     * Phar::mungServer should only be called within the stub of a phar
     * archive.
     * 
     * Defines a list of up to 4 $_SERVER variables that should be modified
     * for execution. Variables that can be modified to remove traces of phar
     * execution are REQUEST_URI, PHP_SELF, SCRIPT_NAME and SCRIPT_FILENAME.
     * 
     * On its own, this method does nothing. Only when combined with
     * Phar::webPhar does it take effect, and only when the requested file is
     * a PHP file to be parsed. Note that the PATH_INFO and PATH_TRANSLATED
     * variables are always modified.
     * 
     * The original values of variables that are modified are stored in the
     * SERVER array with PHAR_ prepended, so for instance SCRIPT_NAME would
     * be saved as PHAR_SCRIPT_NAME.
     *
     * @param array
     * @return void
     **/
    function mungServer($munglist) {}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets.
     * 
     * offsetExists() is called whenever isset is called.
     *
     * @param string
     * @return bool
     **/
    function offsetExists($offset) {}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets. Phar::offsetGet is used for retrieving files from a Phar
     * archive.
     *
     * @param string
     * @return int
     **/
    function offsetGet($offset) {}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets. offsetSet is used for modifying an existing file, or adding
     * a new file to a Phar archive.
     *
     * @param string
     * @param string
     * @return void
     **/
    function offsetSet($offset, $value) {}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets. offsetUnset is used for deleting an existing file, and is
     * called by the unset language construct.
     *
     * @param string
     * @return bool
     **/
    function offsetUnset($offset) {}

    /**
     * Returns the full path to the running phar archive. This is intended
     * for use much like the __FILE__ magic constant, and only has effect
     * inside an executing phar archive.
     * 
     * Inside the stub of an archive, Phar::running returns . Simply use
     * __FILE__ to access the current running phar inside a stub.
     *
     * @param bool
     * @return string
     **/
    function running($retphar) {}

    /**
     * Set the alias for the Phar archive, and write it as the permanent
     * alias for this phar archive. An alias can be used internally to a phar
     * archive to ensure that use of the phar stream wrapper to access
     * internal files always works regardless of the location of the phar
     * archive on the filesystem. Another alternative is to rely upon Phar's
     * interception of include or to use Phar::interceptFileFuncs and use
     * relative paths.
     *
     * @param string
     * @return bool
     **/
    function setAlias($alias) {}

    /**
     * This method is a convenience method that combines the functionality of
     * Phar::createDefaultStub and Phar::setStub.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function setDefaultStub($index, $webindex) {}

    /**
     * Phar::setMetadata should be used to store customized data that
     * describes something about the phar archive as a complete entity.
     * PharFileInfo::setMetadata should be used for file-specific meta-data.
     * Meta-data can slow down the performance of loading a phar archive if
     * the data is large.
     * 
     * Some possible uses for meta-data include specifying which file within
     * the archive should be used to bootstrap the archive, or the location
     * of a file manifest like PEAR's package.xml file. However, any useful
     * data that describes the phar archive may be stored.
     *
     * @param mixed
     * @return void
     **/
    function setMetadata($metadata) {}

    /**
     * set the signature algorithm for a phar and apply it. The signature
     * algorithm must be one of Phar::MD5, Phar::SHA1, Phar::SHA256,
     * Phar::SHA512, or Phar::OPENSSL.
     * 
     * Note that all executable phar archives have a signature created
     * automatically, SHA1 by default. data tar- or zip-based archives
     * (archives created with the PharData class) must have their signature
     * created and set explicitly via Phar::setSignatureAlgorithm.
     *
     * @param int
     * @param string
     * @return void
     **/
    function setSignatureAlgorithm($sigtype, $privatekey) {}

    /**
     * This method is used to add a PHP bootstrap loader stub to a new Phar
     * archive, or to replace the loader stub in an existing Phar archive.
     * 
     * The loader stub for a Phar archive is used whenever an archive is
     * included directly as in this example:
     * 
     * The loader is not accessed when including a file through the phar
     * stream wrapper like so:
     *
     * @param string
     * @return bool
     **/
    function setStub($stub) {}

    /**
     * Although technically unnecessary, the Phar::startBuffering method can
     * provide a significant performance boost when creating or modifying a
     * Phar archive with a large number of files. Ordinarily, every time a
     * file within a Phar archive is created or modified in any way, the
     * entire Phar archive will be recreated with the changes. In this way,
     * the archive will be up-to-date with the activity performed on it.
     * 
     * However, this can be unnecessary when simply creating a new Phar
     * archive, when it would make more sense to write the entire archive out
     * at once. Similarly, it is often necessary to make a series of changes
     * and to ensure that they all are possible before making any changes on
     * disk, similar to the relational database concept of transactions. the
     * Phar::startBuffering/Phar::stopBuffering pair of methods is provided
     * for this purpose.
     * 
     * Phar write buffering is per-archive, buffering active for the foo.phar
     * Phar archive does not affect changes to the bar.phar Phar archive.
     *
     * @return void
     **/
    function startBuffering() {}

    /**
     * Phar::stopBuffering is used in conjunction with the
     * Phar::startBuffering method. Phar::startBuffering can provide a
     * significant performance boost when creating or modifying a Phar
     * archive with a large number of files. Ordinarily, every time a file
     * within a Phar archive is created or modified in any way, the entire
     * Phar archive will be recreated with the changes. In this way, the
     * archive will be up-to-date with the activity performed on it.
     * 
     * However, this can be unnecessary when simply creating a new Phar
     * archive, when it would make more sense to write the entire archive out
     * at once. Similarly, it is often necessary to make a series of changes
     * and to ensure that they all are possible before making any changes on
     * disk, similar to the relational database concept of transactions. The
     * Phar::startBuffering/Phar::stopBuffering pair of methods is provided
     * for this purpose.
     * 
     * Phar write buffering is per-archive, buffering active for the foo.phar
     * Phar archive does not affect changes to the bar.phar Phar archive.
     *
     * @return void
     **/
    function stopBuffering() {}

    /**
     * This method decompresses all files in the Phar archive. If any files
     * are already compressed using gzip compression, the zlib extension must
     * be enabled in order to decompress the files, and any files compressed
     * using bzip2 compression require the bzip2 extension to decompress the
     * files. As with all functionality that modifies the contents of a phar,
     * the phar.readonly INI variable must be off in order to succeed.
     *
     * @return bool
     **/
    function uncompressAllFiles() {}

    /**
     * Removes a phar archive for disk and memory.
     *
     * @param string
     * @return bool
     **/
    function unlinkArchive($archive) {}

    /**
     * Phar::mapPhar for web-based phars. This method parses
     * $_SERVER['REQUEST_URI'] and routes a request from a web browser to an
     * internal file within the phar archive. In essence, it simulates a web
     * server, routing requests to the correct file, echoing the correct
     * headers and parsing PHP files as needed. This powerful method is part
     * of what makes it easy to convert an existing PHP application into a
     * phar archive. Combined with Phar::mungServer and
     * Phar::interceptFileFuncs, any web application can be used unmodified
     * from a phar archive.
     * 
     * Phar::webPhar should only be called from the stub of a phar archive
     * (see here for more information on what a stub is).
     *
     * @param string
     * @param string
     * @param string
     * @param array
     * @param array
     * @return void
     **/
    function webPhar($alias, $index, $f404, $mimetypes, $rewrites) {}

    /**
     * @param string
     * @param int
     * @param string
     * @return void
     **/
    function __construct($fname, $flags, $alias) {}

}
class PharData extends Phar {
    /**
     * With this method, an empty directory is created with path dirname.
     * This method is similar to ZipArchive::addEmptyDir.
     *
     * @param string
     * @return bool
     **/
    function addEmptyDir($dirname) {}

    /**
     * With this method, any string can be added to the tar/zip archive. The
     * file will be stored in the archive with localname as its path. This
     * method is similar to ZipArchive::addFromString.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function addFromString($localname, $contents) {}

    /**
     * Populate a tar or zip archive from an iterator. Two styles of
     * iterators are supported, iterators that map the filename within the
     * tar/zip to the name of a file on disk, and iterators like
     * DirectoryIterator that return SplFileInfo objects. For iterators that
     * return SplFileInfo objects, the second parameter is required.
     *
     * @param Iterator
     * @param string
     * @return array
     **/
    function buildFromIterator($iter, $base_directory) {}

    /**
     * For tar archives, this method compresses the entire archive using gzip
     * compression or bzip2 compression. The resulting file can be processed
     * with the gunzip command/bunzip command, or accessed directly and
     * transparently with the Phar extension.
     * 
     * For zip archives, this method fails with an exception. The zlib
     * extension must be enabled to compress with gzip compression, the bzip2
     * extension must be enabled in order to compress with bzip2 compression.
     * 
     * In addition, this method automatically renames the archive, appending
     * .gz, .bz2 or removing the extension if passed Phar::NONE to remove
     * compression. Alternatively, a file extension may be specified with the
     * second parameter.
     *
     * @param int
     * @param string
     * @return object
     **/
    function compress($compression, $extension) {}

    /**
     * For tar-based archives, this method throws a BadMethodCallException,
     * as compression of individual files within a tar archive is not
     * supported by the file format. Use PharData::compress to compress an
     * entire tar-based archive.
     * 
     * For Zip-based archives, this method compresses all files in the
     * archive using the specified compression. The zlib or bzip2 extensions
     * must be enabled to take advantage of this feature. In addition, if any
     * files are already compressed using bzip2/zlib compression, the
     * respective extension must be enabled in order to decompress the files
     * prior to re-compressing.
     *
     * @param int
     * @return bool
     **/
    function compressFiles($compression) {}

    /**
     * This method is used to convert a non-executable tar or zip archive to
     * another non-executable format.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException. This method should be used to convert a tar
     * archive to zip format or vice-versa. Although it is possible to simply
     * change the compression of a tar archive using this method, it is
     * better to use the PharData::compress method for logical consistency.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * PharData object. The old archive is not removed from disk, and should
     * be done manually after the process has finished.
     *
     * @param int
     * @param int
     * @param string
     * @return PharData
     **/
    function convertToData($format, $compression, $extension) {}

    /**
     * This method is used to convert a non-executable tar or zip archive to
     * an executable phar archive. Any of the three executable file formats
     * (phar, tar or zip) can be used, and whole-archive compression can also
     * be performed.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * Phar object. The old archive is not removed from disk, and should be
     * done manually after the process has finished.
     *
     * @param int
     * @param int
     * @param string
     * @return Phar
     **/
    function convertToExecutable($format, $compression, $extension) {}

    /**
     * Copy a file internal to the tar/zip archive to another new file within
     * the same archive. This is an object-oriented alternative to using copy
     * with the phar stream wrapper.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function copy($oldfile, $newfile) {}

    /**
     * For tar-based archives, this method decompresses the entire archive.
     * 
     * For Zip-based archives, this method fails with an exception. The zlib
     * extension must be enabled to decompress an archive compressed with
     * with gzip compression, and the bzip2 extension must be enabled in
     * order to decompress an archive compressed with bzip2 compression.
     * 
     * In addition, this method automatically renames the file extension of
     * the archive, .tar by default. Alternatively, a file extension may be
     * specified with the second parameter.
     *
     * @param string
     * @return object
     **/
    function decompress($extension) {}

    /**
     * For tar-based archives, this method throws a BadMethodCallException,
     * as compression of individual files within a tar archive is not
     * supported by the file format. Use PharData::compress to compress an
     * entire tar-based archive.
     * 
     * For Zip-based archives, this method decompresses all files in the
     * archive. The zlib or bzip2 extensions must be enabled to take
     * advantage of this feature if any files are compressed using bzip2/zlib
     * compression.
     *
     * @return bool
     **/
    function decompressFiles() {}

    /**
     * Delete a file within an archive. This is the functional equivalent of
     * calling unlink on the stream wrapper equivalent, as shown in the
     * example below.
     *
     * @param string
     * @return int
     **/
    function delete($entry) {}

    /**
     * Deletes the global metadata of the zip archive
     *
     * @return int
     **/
    function delMetadata() {}

    /**
     * Extract all files within a tar/zip archive to disk. Extracted files
     * and directories preserve permissions as stored in the archive. The
     * optional parameters allow optional control over which files are
     * extracted, and whether existing files on disk can be overwritten. The
     * second parameter files can be either the name of a file or directory
     * to extract, or an array of names of files and directories to extract.
     * By default, this method will not overwrite existing files, the third
     * parameter can be set to true to enable overwriting of files. This
     * method is similar to ZipArchive::extractTo.
     *
     * @param string
     * @param string|array
     * @param bool
     * @return int
     **/
    function extractTo($pathto, $files, $overwrite) {}

    /**
     * This method returns if the tar/zip archive on disk is not read-only.
     * Unlike Phar::isWritable, data-only tar/zip archives can be modified
     * even if phar.readonly is set to 1.
     *
     * @return bool
     **/
    function isWritable() {}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a tar/zip archive using array access
     * brackets. offsetSet is used for modifying an existing file, or adding
     * a new file to a tar/zip archive.
     *
     * @param string
     * @param string
     * @return void
     **/
    function offsetSet($offset, $value) {}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a tar/zip archive using array access
     * brackets. offsetUnset is used for deleting an existing file, and is
     * called by the unset language construct.
     *
     * @param string
     * @return bool
     **/
    function offsetUnset($offset) {}

    /**
     * Non-executable tar/zip archives cannot have an alias, so this method
     * simply throws an exception.
     *
     * @param string
     * @return bool
     **/
    function setAlias($alias) {}

    /**
     * Non-executable tar/zip archives cannot have a stub, so this method
     * simply throws an exception.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setDefaultStub($index, $webindex) {}

    /**
     * Non-executable tar/zip archives cannot have a stub, so this method
     * simply throws an exception.
     *
     * @param string
     * @return void
     **/
    function setStub($stub) {}

    /**
     * @param string
     * @param int
     * @return void
     **/
    function __construct($fname, $flags) {}

}
class PharException extends Exception {
}
class PharFileInfo extends SplFileInfo {
    /**
     * PharFileInfo::chmod allows setting of the executable file permissions
     * bit, as well as read-only bits. Writeable bits are ignored, and set at
     * runtime based on the phar.readonly INI variable. As with all
     * functionality that modifies the contents of a phar, the phar.readonly
     * INI variable must be off in order to succeed if the file is within a
     * Phar archive. Files within PharData archives do not have this
     * restriction.
     *
     * @param int
     * @return void
     **/
    function chmod($permissions) {}

    /**
     * This method compresses the file inside the Phar archive using either
     * bzip2 compression or zlib compression. The bzip2 or zlib extension
     * must be enabled to take advantage of this feature. In addition, if the
     * file is already compressed, the respective extension must be enabled
     * in order to decompress the file. As with all functionality that
     * modifies the contents of a phar, the phar.readonly INI variable must
     * be off in order to succeed if the file is within a Phar archive. Files
     * within PharData archives do not have this restriction.
     *
     * @param int
     * @return bool
     **/
    function compress($compression) {}

    /**
     * This method decompresses the file inside the Phar archive. Depending
     * on how the file is compressed, the bzip2 or zlib extensions must be
     * enabled to take advantage of this feature. As with all functionality
     * that modifies the contents of a phar, the phar.readonly INI variable
     * must be off in order to succeed if the file is within a Phar archive.
     * Files within PharData archives do not have this restriction.
     *
     * @return bool
     **/
    function decompress() {}

    /**
     * Deletes the metadata of the entry, if any.
     *
     * @return bool
     **/
    function delMetadata() {}

    /**
     * This returns the size of the file within the Phar archive.
     * Uncompressed files will return the same value for getCompressedSize as
     * they will with filesize
     *
     * @return int
     **/
    function getCompressedSize() {}

    /**
     * This returns the crc32 checksum of the file within the Phar archive.
     *
     * @return int
     **/
    function getCRC32() {}

    /**
     * Return meta-data that was saved in the Phar archive's manifest for
     * this file.
     *
     * @return mixed
     **/
    function getMetaData() {}

    /**
     * This returns the flags set in the manifest for a Phar. This will
     * always return 0 in the current implementation.
     *
     * @return int
     **/
    function getPharFlags() {}

    /**
     * Returns the metadata of a file within a phar archive.
     *
     * @return bool
     **/
    function hasMetadata() {}

    /**
     * This returns whether a file is compressed within a Phar archive with
     * either Gzip or Bzip2 compression.
     *
     * @param int
     * @return bool
     **/
    function isCompressed($compression_type) {}

    /**
     * This returns whether a file is compressed within a Phar archive with
     * Bzip2 compression.
     *
     * @return bool
     **/
    function isCompressedBZIP2() {}

    /**
     * This returns whether a file is compressed within a Phar archive with
     * Gzip compression.
     *
     * @return bool
     **/
    function isCompressedGZ() {}

    /**
     * This returns whether a file within a Phar archive has had its CRC
     * verified.
     *
     * @return bool
     **/
    function isCRCChecked() {}

    /**
     * This method compresses the file inside the Phar archive using bzip2
     * compression. The bzip2 extension must be enabled to take advantage of
     * this feature. In addition, if the file is already compressed using
     * gzip compression, the zlib extension must be enabled in order to
     * decompress the file. As with all functionality that modifies the
     * contents of a phar, the phar.readonly INI variable must be off in
     * order to succeed.
     *
     * @return bool
     **/
    function setCompressedBZIP2() {}

    /**
     * This method compresses the file inside the Phar archive using gzip
     * compression. The zlib extension must be enabled to take advantage of
     * this feature. In addition, if the file is already compressed using
     * bzip2 compression, the bzip2 extension must be enabled in order to
     * decompress the file. As with all functionality that modifies the
     * contents of a phar, the phar.readonly INI variable must be off in
     * order to succeed.
     *
     * @return bool
     **/
    function setCompressedGZ() {}

    /**
     * PharFileInfo::setMetaData should only be used to store customized data
     * in a file that cannot be represented with existing information stored
     * with a file. Meta-data can significantly slow down the performance of
     * loading a phar archive if the data is large, or if there are many
     * files containing meta-data. It is important to note that file
     * permissions are natively supported inside a phar; it is possible to
     * set them with the PharFileInfo::chmod method. As with all
     * functionality that modifies the contents of a phar, the phar.readonly
     * INI variable must be off in order to succeed if the file is within a
     * Phar archive. Files within PharData archives do not have this
     * restriction.
     * 
     * Some possible uses for meta-data include passing a user/group that
     * should be set when a file is extracted from the phar to disk. Other
     * uses could include explicitly specifying a MIME type to return.
     * However, any useful data that describes a file, but should not be
     * contained inside of it may be stored.
     *
     * @param mixed
     * @return void
     **/
    function setMetaData($metadata) {}

    /**
     * This method decompresses the file inside the Phar archive. Depending
     * on how the file is compressed, the bzip2 or zlib extensions must be
     * enabled to take advantage of this feature. As with all functionality
     * that modifies the contents of a phar, the phar.readonly INI variable
     * must be off in order to succeed.
     *
     * @return bool
     **/
    function setUncompressed() {}

    /**
     * This should not be called directly. Instead, a PharFileInfo object is
     * initialized by calling Phar::offsetGet through array access.
     *
     * @param string
     * @return void
     **/
    function __construct($entry) {}

}
class RangeException extends RuntimeException {
}
class Rar {
    /**
     * Rar::extract extracts entry's data to the dir. It will create new file
     * in the specified dir with the name identical to the entry's name.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function extract($dir, $filepath) {}

    /**
     * Rar::getAttr returns attributes of the archive entry.
     *
     * @return int
     **/
    function getAttr() {}

    /**
     * Rar::getCrc returns CRC of the archive entry.
     *
     * @return int
     **/
    function getCrc() {}

    /**
     * Gets entry last modification time.
     *
     * @return string
     **/
    function getFileTime() {}

    /**
     * Rar::getHostOs return code of the host OS of the archive entry.
     *
     * @return int
     **/
    function getHostOs() {}

    /**
     * Rar::getMethod returns number of the method used when adding current
     * archive entry.
     *
     * @return int
     **/
    function getMethod() {}

    /**
     * Rar::getName returns full name of the archive entry.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Get packed size of the archive entry.
     *
     * @return int
     **/
    function getPackedSize() {}

    /**
     * Get unpacked size of the archive entry.
     *
     * @return int
     **/
    function getUnpackedSize() {}

    /**
     * Get version of the archiver used to add the archive entry.
     *
     * @return int
     **/
    function getVersion() {}

}
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator {
    /**
     * Returns an iterator for the current iterator entry.
     *
     * @return RecursiveArrayIterator
     **/
    function getChildren() {}

    /**
     * Returns whether current entry is an array or an object for which an
     * iterator can be obtained via RecursiveArrayIterator::getChildren.
     *
     * @return bool
     **/
    function hasChildren() {}

}
class RecursiveCachingIterator extends CachingIterator implements Countable, ArrayAccess, Iterator, Traversable, OuterIterator, RecursiveIterator {
    /**
     * @return RecursiveCachingIterator
     **/
    function getChildren() {}

    /**
     * @return bool
     **/
    function hasChildren() {}

    /**
     * Constructs a new RecursiveCachingIterator, which consists of a passed
     * in iterator.
     *
     * @param Iterator
     * @param string
     **/
    function __construct($iterator, $flags) {}

}
class RecursiveDirectoryIterator extends DirectoryIterator implements Traversable, Iterator, RecursiveIterator {
    /**
     * @return object
     **/
    function getChildren() {}

    /**
     * Gets the sub path.
     *
     * @return string
     **/
    function getSubPath() {}

    /**
     * Gets the sub path and filename.
     *
     * @return string
     **/
    function getSubPathname() {}

    /**
     * @param bool
     * @return bool
     **/
    function hasChildren($allow_links) {}

    /**
     * @return string
     **/
    function key() {}

    /**
     * @return void
     **/
    function next() {}

    /**
     * @return void
     **/
    function rewind() {}

    /**
     * Constructs a RecursiveDirectoryIterator.
     *
     * @param string
     * @param string
     **/
    function __construct($path, $flags) {}

}
class RecursiveFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator, RecursiveIterator {
    /**
     * Return the inner iterator's children contained in a
     * RecursiveFilterIterator.
     *
     * @return void
     **/
    function getChildren() {}

    /**
     * Check whether the inner iterator's current element has children.
     *
     * @return void
     **/
    function hasChildren() {}

    /**
     * Create a RecursiveFilterIterator from a RecursiveIterator.
     *
     * @param RecursiveIterator
     **/
    function __construct($iterator) {}

}
class RecursiveIterator extends Iterator {
    /**
     * Returns an iterator for the current iterator entry.
     *
     * @return RecursiveIterator
     **/
    function getChildren() {}

    /**
     * Returns if an iterator can be created fot the current entry.
     * RecursiveIterator::getChildren.
     *
     * @return bool
     **/
    function hasChildren() {}

}
class RecursiveIteratorIterator implements OuterIterator, Traversable, Iterator {
    const CHILD_FIRST = 0;
    const LEAVES_ONLY = 0;
    const SELF_FIRST = 0;
    /**
     * Is called after calling RecursiveIteratorIterator::getChildren, and
     * its associated RecursiveIteratorIterator::rewind.
     *
     * @return void
     **/
    function beginChildren() {}

    /**
     * Called when iteration begins (after the first
     * RecursiveIteratorIterator::rewind call.
     *
     * @return void
     **/
    function beginIteration() {}

    /**
     * Get children of the current element.
     *
     * @return RecursiveIterator
     **/
    function callGetChildren() {}

    /**
     * Called for each element to test whether it has children.
     *
     * @return bool
     **/
    function callHasChildren() {}

    /**
     * @return mixed
     **/
    function current() {}

    /**
     * Called when end recursing one level.
     *
     * @return void
     **/
    function endChildren() {}

    /**
     * Called when the iteration ends (when RecursiveIteratorIterator::valid
     * first returns .
     *
     * @return void
     **/
    function endIteration() {}

    /**
     * @return int
     **/
    function getDepth() {}

    /**
     * Gets the current active sub iterator.
     *
     * @return iterator
     **/
    function getInnerIterator() {}

    /**
     * Gets the maximum allowable depth.
     *
     * @return mixed
     **/
    function getMaxDepth() {}

    /**
     * @return RecursiveIterator
     **/
    function getSubIterator() {}

    /**
     * @return mixed
     **/
    function key() {}

    /**
     * @return void
     **/
    function next() {}

    /**
     * Called when the next element is available.
     *
     * @return void
     **/
    function nextElement() {}

    /**
     * @return void
     **/
    function rewind() {}

    /**
     * Set the maximum allowed depth. Defaults to -1, which is any depth.
     *
     * @param string
     * @return void
     **/
    function setMaxDepth($max_depth) {}

    /**
     * @return bool
     **/
    function valid() {}

    /**
     * Creates a RecursiveIteratorIterator from a RecursiveIterator.
     *
     * @param Traversable
     * @param int
     * @param int
     **/
    function __construct($iterator, $mode, $flags) {}

}
class RecursiveRegexIterator extends RegexIterator implements RecursiveIterator {
    /**
     * Returns an iterator for the current iterator entry.
     *
     * @return RecursiveRegexIterator
     **/
    function getChildren() {}

    /**
     * Returns whether an iterator can be obtained for the current entry.
     * This iterator can be obtained via RecursiveRegexIterator::getChildren.
     *
     * @return bool
     **/
    function hasChildren() {}

}
class RecursiveTreeIterator extends RecursiveIteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Called when recursing one level down.
     *
     * @return void
     **/
    function beginChildren() {}

    /**
     * Called when iteration begins (after the first
     * RecursiveTreeIterator::rewind call).
     *
     * @return RecursiveIterator
     **/
    function beginIteration() {}

    /**
     * Gets children of the current element.
     *
     * @return RecursiveIterator
     **/
    function callGetChildren() {}

    /**
     * Called for each element to test whether it has children.
     *
     * @return bool
     **/
    function callHasChildren() {}

    /**
     * Gets the current element prefixed and postfixed.
     *
     * @return string
     **/
    function current() {}

    /**
     * Called when end recursing one level.
     *
     * @return void
     **/
    function endChildren() {}

    /**
     * Called when the iteration ends (when RecursiveTreeIterator::valid
     * first returns )
     *
     * @return void
     **/
    function endIteration() {}

    /**
     * Gets the part of the tree built for the current element.
     *
     * @return string
     **/
    function getEntry() {}

    /**
     * Gets the string to place after the current element.
     *
     * @return void
     **/
    function getPostfix() {}

    /**
     * Gets the string to place in front of current element
     *
     * @return string
     **/
    function getPrefix() {}

    /**
     * Gets the current key prefixed and postfixed.
     *
     * @return string
     **/
    function key() {}

    /**
     * Moves forward to the next element.
     *
     * @return void
     **/
    function next() {}

    /**
     * Called when the next element is available.
     *
     * @return void
     **/
    function nextElement() {}

    /**
     * Rewinds the iterator to the first element of the top level inner
     * iterator.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Sets a part of the prefix used in the graphic tree.
     *
     * @param int
     * @param string
     * @return void
     **/
    function setPrefixPart($part, $value) {}

    /**
     * Check whether the current position is valid.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Constructs a new RecursiveTreeIterator from the supplied recursive
     * iterator.
     *
     * @param RecursiveIterator|IteratorAggregate
     * @param int
     * @param int
     * @param int
     **/
    function __construct($it, $flags, $cit_flags, $mode) {}

}
class Reflection {
    /**
     * Exports a reflection.
     *
     * @param Reflector
     * @param string
     * @return void
     **/
    function export($reflector, $return) {}

    /**
     * Gets modifier names.
     *
     * @param int
     * @return array
     **/
    function getModifierNames($modifiers) {}

}
class ReflectionClass implements Reflector {
    /**
     * Exports a reflected class.
     *
     * @param mixed
     * @param bool
     * @return string
     **/
    function export($argument, $return) {}

    /**
     * Gets the defined constants.
     *
     * @param string
     * @return mixed
     **/
    function getConstant($name) {}

    /**
     * Gets defined constants from a class.
     *
     * @return array
     **/
    function getConstants() {}

    /**
     * Gets the constructor from a class.
     *
     * @return object
     **/
    function getConstructor() {}

    /**
     * Gets default properties from a class.
     *
     * @return array
     **/
    function getDefaultProperties() {}

    /**
     * Gets doc comments from a class.
     *
     * @return string
     **/
    function getDocComment() {}

    /**
     * Gets end line number from a user-defined class definition.
     *
     * @return int
     **/
    function getEndLine() {}

    /**
     * Gets an extensions ReflectionExtension object.
     *
     * @return ReflectionExtension
     **/
    function getExtension() {}

    /**
     * Gets an extensions name.
     *
     * @return string
     **/
    function getExtensionName() {}

    /**
     * Gets a filename.
     *
     * @return string
     **/
    function getFileName() {}

    /**
     * Get the interface names.
     *
     * @return array
     **/
    function getInterfaceNames() {}

    /**
     * Gets the interfaces.
     *
     * @return array
     **/
    function getInterfaces() {}

    /**
     * Gets a ReflectionMethod about a method.
     *
     * @param string
     * @return object
     **/
    function getMethod($name) {}

    /**
     * Gets a list of methods.
     *
     * @param string
     * @return array
     **/
    function getMethods($filter) {}

    /**
     * @return int
     **/
    function getModifiers() {}

    /**
     * Gets the class name.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Gets the namespace name.
     *
     * @return string
     **/
    function getNamespaceName() {}

    /**
     * @return object
     **/
    function getParentClass() {}

    /**
     * Gets the properties.
     *
     * @param string
     * @return ReflectionProperty
     **/
    function getProperties($filter) {}

    /**
     * Gets a property.
     *
     * @param string
     * @return ReflectionProperty
     **/
    function getProperty($name) {}

    /**
     * Gets the short name of the class, the part without the namespace.
     *
     * @return string
     **/
    function getShortName() {}

    /**
     * Get the starting line number.
     *
     * @return int
     **/
    function getStartLine() {}

    /**
     * Get the static properties.
     *
     * @return array
     **/
    function getStaticProperties() {}

    /**
     * Gets the static property values.
     *
     * @param string
     * @param string
     * @return mixed
     **/
    function getStaticPropertyValue($name, $default) {}

    /**
     * Checks whether the class has a specific constant defined or not.
     *
     * @param string
     * @return bool
     **/
    function hasConstant($name) {}

    /**
     * Checks whether a specific method is defined in a class.
     *
     * @param string
     * @return bool
     **/
    function hasMethod($name) {}

    /**
     * Checks whether the specified property is defined.
     *
     * @param string
     * @return bool
     **/
    function hasProperty($name) {}

    /**
     * Checks whether it implements an interface.
     *
     * @param string
     * @return bool
     **/
    function implementsInterface($interface) {}

    /**
     * Checks if this class is defined in a namespace.
     *
     * @return bool
     **/
    function inNamespace() {}

    /**
     * Checks if the class is abstract.
     *
     * @return bool
     **/
    function isAbstract() {}

    /**
     * Checks if a class is final.
     *
     * @return bool
     **/
    function isFinal() {}

    /**
     * Checks if a class is an instance of an object.
     *
     * @param string
     * @return bool
     **/
    function isInstance($object) {}

    /**
     * Checks if the class is instanciable.
     *
     * @return bool
     **/
    function isInstantiable() {}

    /**
     * Checks whether the class is an interface.
     *
     * @return bool
     **/
    function isInterface() {}

    /**
     * Checks whether the class is internal, as opposed to user-defined.
     *
     * @return bool
     **/
    function isInternal() {}

    /**
     * Checks whether the class is iterateable.
     *
     * @return bool
     **/
    function isIterateable() {}

    /**
     * Checks if the class is a subclass of a specified class.
     *
     * @param string
     * @return bool
     **/
    function isSubclassOf($class) {}

    /**
     * Checks whether the class is user-defined, as opposed to internal.
     *
     * @return bool
     **/
    function isUserDefined() {}

    /**
     * A new instance.
     *
     * @param mixed
     * @return object
     **/
    function newInstance($args) {}

    /**
     * New instance args.
     *
     * @param array
     * @return object
     **/
    function newInstanceArgs($args) {}

    /**
     * Sets static property value.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setStaticPropertyValue($name, $value) {}

    /**
     * Clones.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * Constructs a new ReflectionClass object.
     *
     * @param string
     **/
    function __construct($argument) {}

    /**
     * To a string.
     *
     * @return string
     **/
    function __toString() {}

}
class ReflectionException extends Exception {
}
class ReflectionExtension implements Reflector {
    /**
     * Exports a reflected extension.
     *
     * @param string
     * @param string
     * @return string
     **/
    function export($name, $return) {}

    /**
     * Gets a list of classes from an extension.
     *
     * @return array
     **/
    function getClasses() {}

    /**
     * Gets a listing of class names as defined in the extension.
     *
     * @return array
     **/
    function getClassNames() {}

    /**
     * Get defined constants from an extension.
     *
     * @return array
     **/
    function getConstants() {}

    /**
     * Gets dependencies, by listing both required and conflicting
     * dependencies.
     *
     * @return array
     **/
    function getDependencies() {}

    /**
     * Get defined functions from an extension.
     *
     * @return array
     **/
    function getFunctions() {}

    /**
     * Get the ini entries for an extension.
     *
     * @return array
     **/
    function getINIEntries() {}

    /**
     * Gets the extensions name.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Gets the version of the extension.
     *
     * @return string
     **/
    function getVersion() {}

    /**
     * Gets information about an extension.
     *
     * @return string
     **/
    function info() {}

    /**
     * Clones.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * Construct a ReflectionExtension object.
     *
     * @param string
     **/
    function __construct($name) {}

    /**
     * To a string.
     *
     * @return string
     **/
    function __toString() {}

}
class ReflectionFunction extends ReflectionFunctionAbstract implements Reflector {
    /**
     * Exports a Reflected function.
     *
     * @param string
     * @param string
     * @return string
     **/
    function export($name, $return) {}

    /**
     * Invokes a reflected function.
     *
     * @param string
     * @return mixed
     **/
    function invoke($args) {}

    /**
     * Invokes args.
     *
     * @param array
     * @return mixed
     **/
    function invokeArgs($args) {}

    /**
     * Checks if the function is disabled, via the disable_functions
     * directive.
     *
     * @return bool
     **/
    function isDisabled() {}

    /**
     * Constructs a ReflectionFunction object.
     *
     * @param string
     **/
    function __construct($name) {}

    /**
     * To string.
     *
     * @return string
     **/
    function __toString() {}

}
class ReflectionFunctionAbstract implements Reflector {
    /**
     * Get a Doc comment from a function.
     *
     * @return string
     **/
    function getDocComment() {}

    /**
     * Get the ending line number.
     *
     * @return int
     **/
    function getEndLine() {}

    /**
     * Get the extension information of a function.
     *
     * @return ReflectionExtension
     **/
    function getExtension() {}

    /**
     * Get the extensions name.
     *
     * @return string
     **/
    function getExtensionName() {}

    /**
     * Gets the file name from a user-defined function.
     *
     * @return string
     **/
    function getFileName() {}

    /**
     * Get the name of the function.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Get the namespace name where the class is defined.
     *
     * @return string
     **/
    function getNamespaceName() {}

    /**
     * Get the number of parameters that a function defines, both optional
     * and required.
     *
     * @return int
     **/
    function getNumberOfParameters() {}

    /**
     * Get the number of required parameters that a function defines.
     *
     * @return int
     **/
    function getNumberOfRequiredParameters() {}

    /**
     * Get the parameters as an array of ReflectionParameter.
     *
     * @return array
     **/
    function getParameters() {}

    /**
     * Get the short name of the function (without the namespace part).
     *
     * @return string
     **/
    function getShortName() {}

    /**
     * Gets the starting line number of the function.
     *
     * @return int
     **/
    function getStartLine() {}

    /**
     * Get the static variables.
     *
     * @return array
     **/
    function getStaticVariables() {}

    /**
     * Checks whether a function is defined in a namespace.
     *
     * @return bool
     **/
    function inNamespace() {}

    /**
     * Checks whether it's a closure.
     *
     * @return bool
     **/
    function isClosure() {}

    /**
     * Checks whether the function is deprecated.
     *
     * @return bool
     **/
    function isDeprecated() {}

    /**
     * Checks whether the function is internal, as opposed to user-defined.
     *
     * @return bool
     **/
    function isInternal() {}

    /**
     * Checks whether the function is user-defined, as opposed to internal.
     *
     * @return bool
     **/
    function isUserDefined() {}

    /**
     * Checks whether the function returns a reference.
     *
     * @return bool
     **/
    function returnsReference() {}

    /**
     * Clones a function.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * To string.
     *
     * @return void
     **/
    function __toString() {}

}
class ReflectionMethod extends ReflectionFunctionAbstract implements Reflector {
    /**
     * Exports a ReflectionMethod.
     *
     * @param string
     * @param string
     * @param bool
     * @return string
     **/
    function export($class, $name, $return) {}

    /**
     * Gets the declaring class.
     *
     * @return ReflectionClass
     **/
    function getDeclaringClass() {}

    /**
     * Gets the modifiers.
     *
     * @return int
     **/
    function getModifiers() {}

    /**
     * Gets the methods prototype.
     *
     * @return void
     **/
    function getPrototype() {}

    /**
     * Invokes a reflected method.
     *
     * @param object
     * @param string
     * @return mixed
     **/
    function invoke($object, $args) {}

    /**
     * Invoke arguments.
     *
     * @param string
     * @param array
     * @return mixed
     **/
    function invokeArgs($object, $args) {}

    /**
     * Checks if the method is abstract.
     *
     * @return bool
     **/
    function isAbstract() {}

    /**
     * Checks if the method is a constructor.
     *
     * @return bool
     **/
    function isConstructor() {}

    /**
     * Checks if the method is a destructor.
     *
     * @return bool
     **/
    function isDestructor() {}

    /**
     * Checks if the method is final.
     *
     * @return bool
     **/
    function isFinal() {}

    /**
     * Checks if the method is private.
     *
     * @return bool
     **/
    function isPrivate() {}

    /**
     * Checks if the method is protected.
     *
     * @return bool
     **/
    function isProtected() {}

    /**
     * Checks if the method is public.
     *
     * @return bool
     **/
    function isPublic() {}

    /**
     * Checks if the method is static.
     *
     * @return bool
     **/
    function isStatic() {}

    /**
     * Sets a method to be accessible. For example, it may allow protected
     * and private methods to be invoked.
     *
     * @param bool
     * @return void
     **/
    function setAccessible($accessible) {}

    /**
     * Constructs a new ReflectionMethod.
     *
     * @param string
     * @param string
     **/
    function __construct($class_or_method, $name) {}

    /**
     * To string.
     *
     * @return string
     **/
    function __toString() {}

}
class ReflectionObject extends ReflectionClass implements Reflector {
    /**
     * Exports a reflection.
     *
     * @param string
     * @param bool
     * @return string
     **/
    function export($argument, $return) {}

    /**
     * Constructs a ReflectionObject.
     *
     * @param object
     **/
    function __construct($argument) {}

}
class ReflectionParameter implements Reflector {
    /**
     * Checks whether the parameter allows .
     *
     * @return bool
     **/
    function allowsNull() {}

    /**
     * Exports.
     *
     * @param string
     * @param string
     * @param bool
     * @return string
     **/
    function export($function, $parameter, $return) {}

    /**
     * Gets a class.
     *
     * @return ReflectionClass
     **/
    function getClass() {}

    /**
     * Gets the declaring class.
     *
     * @return ReflectionClass
     **/
    function getDeclaringClass() {}

    /**
     * Gets the declaring function.
     *
     * @return ReflectionFunction
     **/
    function getDeclaringFunction() {}

    /**
     * Gets the parameters default value.
     *
     * @return mixed
     **/
    function getDefaultValue() {}

    /**
     * Gets the name of the parameter.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Gets the position of the parameter.
     *
     * @return int
     **/
    function getPosition() {}

    /**
     * Checks if the parameter expects an array.
     *
     * @return bool
     **/
    function isArray() {}

    /**
     * Checks if a default value for the parameter is available.
     *
     * @return bool
     **/
    function isDefaultValueAvailable() {}

    /**
     * Checks if the parameter is optional.
     *
     * @return bool
     **/
    function isOptional() {}

    /**
     * Checks if the parameter is passed in by reference.
     *
     * @return bool
     **/
    function isPassedByReference() {}

    /**
     * Clones.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * Constructs a ReflectionParameter class.
     *
     * @param string
     * @param string
     **/
    function __construct($function, $parameter) {}

    /**
     * To string.
     *
     * @return string
     **/
    function __toString() {}

}
class ReflectionProperty implements Reflector {
    /**
     * Exports a reflection.
     *
     * @param mixed
     * @param string
     * @param bool
     * @return string
     **/
    function export($class, $name, $return) {}

    /**
     * Gets the declaring class.
     *
     * @return ReflectionClass
     **/
    function getDeclaringClass() {}

    /**
     * Gets the doc comment.
     *
     * @return string
     **/
    function getDocComment() {}

    /**
     * Gets the modifiers.
     *
     * @return int
     **/
    function getModifiers() {}

    /**
     * Gets the properties name.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Gets the properties value.
     *
     * @param string
     * @return mixed
     **/
    function getValue($object) {}

    /**
     * Checks whether the property is the default.
     *
     * @return bool
     **/
    function isDefault() {}

    /**
     * Checks whether the property is private.
     *
     * @return bool
     **/
    function isPrivate() {}

    /**
     * Checks whether the property is protected.
     *
     * @return bool
     **/
    function isProtected() {}

    /**
     * Checks whether the property is public.
     *
     * @return bool
     **/
    function isPublic() {}

    /**
     * Checks whether the property is static.
     *
     * @return bool
     **/
    function isStatic() {}

    /**
     * Sets a property to be accessible. For example, it may allow protected
     * and private properties to be accessed.
     *
     * @param bool
     * @return void
     **/
    function setAccessible($accessible) {}

    /**
     * Sets (changes) a properties value.
     *
     * @param object
     * @param mixed
     * @return void
     **/
    function setValue($object, $value) {}

    /**
     * Clones.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * @param mixed
     * @param string
     **/
    function __construct($class, $name) {}

    /**
     * To string.
     *
     * @return string
     **/
    function __toString() {}

}
class Reflector {
    /**
     * Exports.
     *
     * @return string
     **/
    function export() {}

    /**
     * To string.
     *
     * @return string
     **/
    function __toString() {}

}
class RegexIterator extends FilterIterator {
    /**
     * Match (string) RegexIterator::current against a regular expression.
     *
     * @return bool
     **/
    function accept() {}

    /**
     * Returns the special flags, see RegexIterator::setFlags for the list of
     * special flags.
     *
     * @return int
     **/
    function getFlags() {}

    /**
     * Returns the operation mode, see RegexIterator::setMode for the list of
     * operation modes.
     *
     * @return int
     **/
    function getMode() {}

    /**
     * Returns the special flags, see RegexIterator::__construct for the list
     * of flags.
     *
     * @return int
     **/
    function getPregFlags() {}

    /**
     * Sets the special flags.
     *
     * @param int
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Sets the operation mode.
     *
     * @param int
     * @return void
     **/
    function setMode($mode) {}

    /**
     * Sets the regular expression flags.
     *
     * @param int
     * @return void
     **/
    function setPregFlags($preg_flags) {}

}
class result {
    /**
     * Returns the position of the field cursor used for the last
     * maxdb_fetch_field call. This value can be used as an argument to
     * maxdb_field_seek.
     *
     * @var int
     **/
    var $current_field;
    /**
     * maxdb_num_fields returns the number of fields from specified result
     * set.
     *
     * @var int
     **/
    var $field_count;
    /**
     * The maxdb_fetch_lengths function returns an array containing the
     * lengths of every column of the current row within the result set
     * represented by the result parameter. If successful, a numerically
     * indexed array representing the lengths of each column is returned or
     * on failure.
     *
     * @var array
     **/
    var $lengths;
    /**
     * The maxdb_data_seek function seeks to an arbitrary result pointer
     * specified by the offset in the result set represented by result. The
     * offset parameter must be between zero and the total number of rows
     * minus one (0..maxdb_num_rows - 1).
     *
     * @param int
     * @return bool
     **/
    function data_seek($offset) {}

    /**
     * Returns an array that corresponds to the fetched row or if there are
     * no more rows for the resultset represented by the result parameter.
     * 
     * maxdb_fetch_array is an extended version of the maxdb_fetch_row
     * function. In addition to storing the data in the numeric indices of
     * the result array, the maxdb_fetch_array function can also store the
     * data in associative indices, using the field names of the result set
     * as keys.
     * 
     * If two or more columns of the result have the same field names, the
     * last column will take precedence and overwrite the earlier data. In
     * order to access multiple columns with the same name, the numerically
     * indexed version of the row must be used.
     * 
     * The optional second argument resulttype is a constant indicating what
     * type of array should be produced from the current row data. The
     * possible values for this parameter are the constants MAXDB_ASSOC,
     * MAXDB_ASSOC_UPPER, MAXDB_ASSOC_LOWER, MAXDB_NUM, or MAXDB_BOTH. By
     * default the maxdb_fetch_array function will assume MAXDB_BOTH, which
     * is a combination of MAXDB_NUM and MAXDB_ASSOC for this parameter.
     * 
     * By using the MAXDB_ASSOC constant this function will behave
     * identically to the maxdb_fetch_assoc, while MAXDB_NUM will behave
     * identically to the maxdb_fetch_row function. The final option
     * MAXDB_BOTH will create a single array with the attributes of both.
     * 
     * By using the MAXDB_ASSOC_UPPER constant, the behaviour of this
     * function is identical to the use of MAXDB_ASSOC except the array index
     * of a column is the fieldname in upper case.
     * 
     * By using the MAXDB_ASSOC_LOWER constant, the behaviour of this
     * function is identical to the use of MAXDB_ASSOC except the array index
     * of a column is the fieldname in lower case.
     *
     * @param int
     * @return mixed
     **/
    function fetch_array($resulttype) {}

    /**
     * Returns an associative array that corresponds to the fetched row or if
     * there are no more rows.
     * 
     * The maxdb_fetch_assoc function is used to return an associative array
     * representing the next row in the result set for the result represented
     * by the result parameter, where each key in the array represents the
     * name of one of the result set's columns.
     * 
     * If two or more columns of the result have the same field names, the
     * last column will take precedence. To access the other column(s) of the
     * same name, you either need to access the result with numeric indices
     * by using maxdb_fetch_row or add alias names.
     *
     * @return array
     **/
    function fetch_assoc() {}

    /**
     * The maxdb_fetch_field returns the definition of one column of a result
     * set as an resource. Call this function repeatedly to retrieve
     * information about all columns in the result set. maxdb_fetch_field
     * returns when no more fields are left.
     *
     * @return mixed
     **/
    function fetch_field() {}

    /**
     * This function serves an identical purpose to the maxdb_fetch_field
     * function with the single difference that, instead of returning one
     * resource at a time for each field, the columns are returned as an
     * array of resources.
     *
     * @return mixed
     **/
    function fetch_fields() {}

    /**
     * maxdb_fetch_field_direct returns an resource which contains field
     * definition information from specified resultset. The value of fieldnr
     * must be in the range from 0 to number of fields - 1.
     *
     * @param int
     * @return mixed
     **/
    function fetch_field_direct($fieldnr) {}

    /**
     * The maxdb_fetch_object will return the current row result set as an
     * object where the attributes of the object represent the names of the
     * fields found within the result set. If no more rows exist in the
     * current result set, is returned.
     *
     * @return object
     **/
    function fetch_object() {}

    /**
     * Returns an array that corresponds to the fetched row, or if there are
     * no more rows.
     * 
     * maxdb_fetch_row fetches one row of data from the result set
     * represented by result and returns it as an enumerated array, where
     * each column is stored in an array offset starting from 0 (zero). Each
     * subsequent call to the maxdb_fetch_row function will return the next
     * row within the result set, or if there are no more rows.
     *
     * @return mixed
     **/
    function fetch_row() {}

    /**
     * Sets the field cursor to the given offset. The next call to
     * maxdb_fetch_field will retrieve the field definition of the column
     * associated with that offset.
     *
     * @param int
     * @return bool
     **/
    function field_seek($fieldnr) {}

    /**
     * The maxdb_free_result function frees the memory associated with the
     * result represented by the result parameter, which was allocated by
     * maxdb_query, maxdb_store_result or maxdb_use_result.
     *
     * @return void
     **/
    function free() {}

}
class Runkit_Sandbox_Parent {
    /**
     * Instantiating the Runkit_Sandbox_Parent class from within a sandbox
     * environment created from the Runkit_Sandbox class provides some
     * (controlled) means for a sandbox child to access its parent.
     * 
     * In order for any of the Runkit_Sandbox_Parent features to function.
     * Support must be enabled on a per-sandbox basis by enabling the
     * parent_access flag from the parent's context.
     *
     * @return void
     **/
    function __construct() {}

}
class RuntimeException extends Exception {
}
class SAMConnection {
    /**
     * Contains the numeric error code of the last executed SAM operation on
     * this connection. If the last operation completed successfully this
     * property contains 0.
     *
     * @var int
     **/
    var $errno;
    /**
     * Contains the text description of the last failed SAM operation on this
     * connection. If the last operation completed successfully this property
     * contains an empty string.
     *
     * @var string
     **/
    var $error;
    /**
     * Calling the "commit" method on a Connection object commits (completes)
     * all in-flight transactions that are part of the current unit of work.
     *
     * @return bool
     **/
    function commit() {}

    /**
     * Calling the "connect" method on a SAMConnection object connects the
     * PHP script to a messaging server. No messages can be sent or received
     * until a connection is made.
     *
     * @param string
     * @param array
     * @return bool
     **/
    function connect($protocol, $properties) {}

    /**
     * Calling the "disconnect" method on a SAMConnection object disconnects
     * the PHP script from a messaging server. No messages can be sent or
     * received after a connection has been disconnected.
     *
     * @return bool
     **/
    function disconnect() {}

    /**
     * Calling the "isConnected" method on a Connection object will check
     * whether the PHP script is connected to a messaging server. No messages
     * can be sent or received unless a connection has been established with
     * a Messaging server.
     *
     * @return bool
     **/
    function isConnected() {}

    /**
     * @param string
     * @param array
     * @return SAMMessage
     **/
    function peek($target, $properties) {}

    /**
     * @param string
     * @param array
     * @return array
     **/
    function peekAll($target, $properties) {}

    /**
     * @param string
     * @param array
     * @return SAMMessage
     **/
    function receive($target, $properties) {}

    /**
     * Removes a message from a queue.
     *
     * @param string
     * @param array
     * @return SAMMessage
     **/
    function remove($target, $properties) {}

    /**
     * Rolls back an in-flight unit of work.
     *
     * @return bool
     **/
    function rollback() {}

    /**
     * The "send" method is used to send a message to a specific queue or to
     * publish to a specific topic. The method returns a correlation id that
     * can be used as a selector to identify reply or response messages when
     * these are requested.
     *
     * @param string
     * @param SAMMessage
     * @param array
     * @return string
     **/
    function send($target, $msg, $properties) {}

    /**
     * The "setdebug" method is used to turn on or off additional debugging
     * output. The SAM framework will provide method/function entry and exit
     * trace data plus additional information. Protocol specific
     * implementations also provide extra output.
     *
     * @param bool
     * @return void
     **/
    function setDebug($switch) {}

    /**
     * The "subscribe" method is used to create a new subscription to a
     * specified topic.
     *
     * @param string
     * @return string
     **/
    function subscribe($targetTopic) {}

    /**
     * The "unsubscribe" method is used to delete an existing subscription to
     * a specified topic.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function unsubscribe($subscriptionId, $targetTopic) {}

}
class SAMMessage {
    /**
     * The "body" property contains the actual body of the message. It may
     * not always be set.
     *
     * @var string
     **/
    var $body;
    /**
     * The header property is a container for any system or user properties
     * that area associated with the message.
     * 
     * Properties may be assigned by the sender of a message to control the
     * way the messaging systems handles it or may be assigned by the
     * messaging system itself to tell the recipient extra information about
     * the message or the way in which it has been handled.
     * 
     * Some properties are understood by SAM in which case constants have
     * been defined for them. The majority of properties however are ignored
     * by the SAM implementation and simply passed through to the underlying
     * messaging systems allowing the application to use messaging specific
     * property names or to define its own "user" properties.
     * 
     * The SAM defined properties are as follows:
     * 
     * Property name Possible values
     * 
     * SAM_MESSAGEID
     * 
     * When a message is received this field contains the unique identifier
     * of the message as allocated by the underlying messaging system. When
     * sending a message this field is ignored.
     * 
     * SAM_REPLY_TO
     * 
     * A string providing the identity of the queue on to which responses to
     * this message should be posted.
     * 
     * SAM_TYPE
     * 
     * An indication of the type of message to be sent. The value may be
     * SAM_TEXT indicating the contents of the message body is a text string,
     * or SAM_BYTES indicating the contents of the message body are some
     * application defined format.
     * 
     * The way in which this property is used may depend on the underlying
     * messaging server. For instance a messaging server that supports the
     * JMS (Java Message Service) specification may interpret this value and
     * send messages of type "jms_text" and "jms_bytes". In addition, if the
     * SAM_TYPE property is set to SAM_TEXT the data provided for the message
     * body is expected to be a UTF8 encoded string.
     * 
     * When setting the values of properties it is often useful to give a
     * hint as to the format in which the property should be delivered to the
     * messaging system. By default property values are delivered as text and
     * the following simple syntax may be used to set a value:
     * 
     * Setting a text format property using the default syntax
     * 
     * If it is desired to pass type information an alternative syntax may be
     * used where the value and the type hint are passed in an associative
     * array:
     * 
     * Setting a text format property using a type hint
     * 
     * When passing a type hint the type entry should be one of the SAM
     * defined constant values as defined by the following table:
     * 
     * Constant Type description
     * 
     * SAM_BOOLEAN
     * 
     * Any value passed will be interpreted as logical true or false. If the
     * value cannot be interpreted as a PHP boolean value the value passed to
     * the messaging system is undefined.
     * 
     * SAM_BYTE
     * 
     * An 8-bit signed integer value. SAM will attempt to convert the
     * property value specified into a single byte value to pass to the
     * messaging system. If a string value is passed an attempt will be made
     * to interpret the string as a numeric value. If the numeric value
     * cannot be expressed as an 8-bit signed binary value data may be lost
     * in the conversion.
     * 
     * SAM_DOUBLE
     * 
     * A long floating point value. SAM will attempt to convert the property
     * value specified into a floating point value with 15 digits of
     * precision. If a string value is passed an attempt will be made to
     * interpret the string as a numeric value. If the passed value cannot be
     * expressed as a 15 digit floating point value data may be lost in the
     * conversion.
     * 
     * SAM_FLOAT
     * 
     * A short floating point value. SAM will attempt to convert the
     * property value specified into a floating point value with 7 digits of
     * precision. If a string value is passed an attempt will be made to
     * interpret the string as a numeric value. If the passed value cannot be
     * expressed as a 7 digit floating point value data may be lost in the
     * conversion.
     * 
     * SAM_INT
     * 
     * An 32-bit signed integer value. SAM will attempt to convert the
     * property value specified into a 32-bit value to pass to the messaging
     * system. If a string value is passed an attempt will be made to
     * interpret the string as a numeric value. If the numeric value cannot
     * be expressed as an 32-bit signed binary value data may be lost in the
     * conversion.
     * 
     * SAM_LONG
     * 
     * An 64-bit signed integer value. SAM will attempt to convert the
     * property value specified into a 64-bit value to pass to the messaging
     * system. If a string value is passed an attempt will be made to
     * interpret the string as a numeric value. If the numeric value cannot
     * be expressed as an 64-bit signed binary value data may be lost in the
     * conversion.
     * 
     * SAM_STRING
     * 
     * SAM will interpret the property value specified as a string and pass
     * it to the messaging system accordingly.
     *
     * @var object
     **/
    var $header;
}
class SCA {
    /**
     * This method is used inside an SCA component that needs to create an
     * SDO to return. The parameters are the desired SDO's namespace URI and
     * type name. The namespace and type must be defined in one of the schema
     * files which are specified on the @types annotation within the
     * component.
     *
     * @param string
     * @param string
     * @return SDO_DataObject
     **/
    function createDataObject($type_namespace_uri, $type_name) {}

    /**
     * Examine the target and initialize and return a proxy of the
     * appropriate sort. If the target is for a local PHP component the
     * returned proxy will be an SCA_LocalProxy. If the target is for a WSDL
     * file, the returned proxy will be a SCA_SoapProxy.
     *
     * @param string
     * @param string
     * @param array
     * @return mixed
     **/
    function getService($target, $binding, $config) {}

}
class SCA_LocalProxy {
    /**
     * This method is used inside either an ordinary PHP script or an SCA
     * component that needs to create an SDO to pass to a local service. The
     * parameters are the desired SDO's namespace URI and type name. The
     * namespace and type must be defined in the interface of the component
     * that is to be called, so the namespace and type must be defined in one
     * of the schema files which are specified on the @types annotation
     * within the component for which the SCA_LocalProxy object is a proxy.
     *
     * @param string
     * @param string
     * @return SDO_DataObject
     **/
    function createDataObject($type_namespace_uri, $type_name) {}

}
class SCA_SoapProxy {
    /**
     * This method is used inside either an ordinary PHP script or an SCA
     * component that needs to create an SDO to pass to a web service. The
     * parameters are the desired SDO's namespace URI and type name. The
     * namespace and type must be defined in the interface of the component
     * that is to be called, so the namespace and type must be defined within
     * the WSDL for the web service. If the web service is also an SCA
     * component then the types will have been defined within one of the
     * schema files which are specified on the @types annotation within the
     * component for which the SCA_SoapProxy object is a proxy.
     *
     * @param string
     * @param string
     * @return SDO_DataObject
     **/
    function createDataObject($type_namespace_uri, $type_name) {}

}
class SDO_DAS_ChangeSummary {
    const ADDITION = 0;
    const DELETION = 0;
    const MODIFICATION = 0;
    const NONE = 0;
    /**
     * Begin logging changes made to the SDO_DataObject.
     *
     * @return void
     **/
    function beginLogging() {}

    /**
     * End logging changes made to an SDO_DataObject.
     *
     * @return void
     **/
    function endLogging() {}

    /**
     * Get an SDO_List of the SDO_DataObjects which have been changed. These
     * data objects can then be used to identify the types of change made to
     * each, along with the old values.
     *
     * @return SDO_List
     **/
    function getChangedDataObjects() {}

    /**
     * Get the type of change which has been made to the supplied
     * SDO_DataObject.
     *
     * @param SDO_DataObject
     * @return int
     **/
    function getChangeType($dataObject) {}

    /**
     * Get the old container (SDO_DataObject) for a deleted SDO_DataObject.
     *
     * @param SDO_DataObject
     * @return SDO_DataObject
     **/
    function getOldContainer($data_object) {}

    /**
     * Get a list of the old values for a given changed SDO_DataObject.
     * Returns a list of SDO_DAS_Settings describing the old values for the
     * changed properties of the SDO_DataObject.
     *
     * @param SDO_DataObject
     * @return SDO_List
     **/
    function getOldValues($data_object) {}

    /**
     * Test to see whether change logging is switched on.
     *
     * @return bool
     **/
    function isLogging() {}

}
class SDO_DAS_DataFactory {
    /**
     * Adds a property to a type. The type must already be known to the
     * SDO_DAS_DataFactory (i.e. have been added using addType()). The
     * property becomes a property of the type. This is how the graph model
     * for the structure of an SDO_DataObject is built.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param array
     * @return void
     **/
    function addPropertyToType($parent_type_namespace_uri, $parent_type_name, $property_name, $type_namespace_uri, $type_name, $options) {}

    /**
     * Add a new type to the SDO_DAS_DataFactory, defined by its namespace
     * and type name. The type becomes part of the model of data objects that
     * the data factory can create.
     *
     * @param string
     * @param string
     * @param array
     * @return void
     **/
    function addType($type_namespace_uri, $type_name, $options) {}

    /**
     * Static method to get an instance of an SDO_DAS_DataFactory. This
     * instance is initially only configured with the basic SDO types. A Data
     * Access Service is responsible for populating the data factory model
     * and then allowing PHP applications to create SDOs based on the model
     * through the SDO_DataFactory interface. PHP applications should always
     * obtain a data factory from a configured Data Access Service, not
     * through this interface.
     *
     * @return SDO_DAS_DataFactory
     **/
    function getDataFactory() {}

}
class SDO_DAS_DataObject {
    /**
     * Get the SDO_DAS_ChangeSummary for an SDO_DAS_DataObject, or NULL if it
     * does not have one.
     *
     * @return SDO_DAS_ChangeSummary
     **/
    function getChangeSummary() {}

}
class SDO_DAS_Relational {
    /**
     * Given a PDO database handle and the special root object of a data
     * graph, examine the change summary in the datagraph and applies the
     * changes to the database. The changes that it can apply can be
     * creations of data objects, deletes of data objects, and modifications
     * to properties of data objects.
     *
     * @param PDO
     * @param SDODataObject
     * @return void
     **/
    function applyChanges($database_handle, $root_data_object) {}

    /**
     * Returns the special root object at the top of an otherwise empty data
     * graph. This call is used when the application wants to create a data
     * graph from scratch, without having called executeQuery to create a
     * data graph.
     * 
     * The special root object has one multi-valued containment property,
     * with a name of the application root type that was passed when the
     * Relational DAS was constructed. The property can take values of only
     * that type. The only thing that the application can usefully do with
     * the root type is to call createDataObject on it, passing the name of
     * the application root type, in order to create a data object of their
     * own application type.
     *
     * @return SDODataObject
     **/
    function createRootDataObject() {}

    /**
     * Executes a given query against the relational database, using the
     * supplied PDO database handle. Differs from the simpler executeQuery in
     * that it takes a prepared statement and a list of values. This is the
     * appropriate call to use either when the statement is to executed a
     * number of times with different arguments, and there is therefore a
     * performance benefit to be had from preparing the statement only once,
     * or when the SQL statement is to contain varying values taken from a
     * source that cannot be completely trusted. In this latter case it may
     * be unsafe to construct the SQL statement by simply concatenating the
     * parts of the statement together, since the values may contain pieces
     * of SQL. To guard against this, a so-called SQL injection attack, it is
     * safer to prepare the SQL statement with placeholders (also known as
     * parameter markers, denoted by '?') and supply a list of the values to
     * be substituted as a separate argument. Otherwise this function is the
     * same as executeQuery in that it uses the model that it built from the
     * metadata to interpret the result set and returns a data graph.
     *
     * @param PDO
     * @param PDOStatement
     * @param array
     * @param array
     * @return SDODataObject
     **/
    function executePreparedQuery($database_handle, $prepared_statement, $value_list, $column_specifier) {}

    /**
     * Executes a given query against the relational database, using the
     * supplied PDO database handle. Uses the model that it built from the
     * metadata to interpret the result set. Returns a data graph.
     *
     * @param PDO
     * @param string
     * @param array
     * @return SDODataObject
     **/
    function executeQuery($database_handle, $SQL_statement, $column_specifier) {}

    /**
     * Constructs an instance of a Relational Data Access Service from the
     * passed metadata.
     *
     * @param array
     * @param string
     * @param array
     * @return SDO_DAS_Relational
     **/
    function __construct($database_metadata, $application_root_type, $SDO_containment_references_metadata) {}

}
class SDO_DAS_Setting {
    /**
     * Get the list index for a modification made to an element of a
     * many-valued property. For example, if we modified the third element of
     * a many-valued property we could obtain an SDO_DAS_Setting from the
     * change summary corresponding to that modification. A call to
     * getListIndex on that setting would return the value 2 (lists are
     * indexed from zero).
     *
     * @return int
     **/
    function getListIndex() {}

    /**
     * Returns the property index for the changed property. This index
     * identifies the property which was modified in data object.
     *
     * @return int
     **/
    function getPropertyIndex() {}

    /**
     * Returns the property name for the changed property. This name
     * identifies the property which was modified in data object.
     *
     * @return string
     **/
    function getPropertyName() {}

    /**
     * Returns the old value for the changed property. This can be used by a
     * Data Access Service when writing updates to a data source. The DAS
     * uses the old value to detect conflicts by comparing it with the
     * current value in the data source. If they do not match, then the data
     * source has been updated since the data object was originally
     * populated, and therefore writing any new updates risks compromising
     * the integrity of the data.
     *
     * @return mixed
     **/
    function getValue() {}

}
class SDO_DAS_XML {
    /**
     * Load a second or subsequent schema file to an XML DAS that has already
     * been created with the static method create. Although the file may be
     * any valid schema file, a likely reason for using this method is to add
     * a schema file containing definitions of extra complex types, hence the
     * name. See Example 4 of the parent document for an example.
     *
     * @param string
     * @return void
     **/
    function addTypes($xsd_file) {}

    /**
     * This is the only static method of SDO_DAS_XML class. Used to
     * instantiate SDO_DAS_XML object.
     *
     * @param mixed
     * @param string
     * @return SDO_DAS_XML
     **/
    function create($xsd_file, $key) {}

    /**
     * Creates SDO_DataObject for a given namespace URI and type name. The
     * type should be defined in the underlying model otherwise
     * SDO_TypeNotFoundException will be thrown.
     *
     * @param string
     * @param string
     * @return SDO_DataObject
     **/
    function createDataObject($namespace_uri, $type_name) {}

    /**
     * Creates an XML Document object. This will contain just one empty root
     * element on which none of the properties will have been set. The
     * purpose of this call is to allow an application to create an XML
     * document from scratch without the need to load a document from a file
     * or string. The document that is created will be as if a document had
     * been loaded that contained just a single empty document element with
     * no attributes set or elements within it.
     * 
     * createDocument may need to be told what the document element is. This
     * will not be necessary in simple cases. When there is no ambiguity then
     * no parameter need be passed to the method. However it is possible to
     * load more than one schema file into the same XML DAS and in this case
     * there may be more than one possible document element defined:
     * furthermore it is even possible that there are two possible document
     * elements that differ only in the namespace. To cope with these cases
     * it is possible to specify either the document element name, or both
     * the document element name and namespace to the method.
     *
     * @param string
     * @return SDO_DAS_XML_Document
     **/
    function createDocument($document_element_name) {}

    /**
     * Constructs the tree of SDO_DataObjects from the given address to xml
     * instance document. Returns SDO_DAS_XML_Document Object. Use
     * SDO_DAS_XML_Document::getRootDataObject method to get root data
     * object.
     *
     * @param string
     * @return SDO_XMLDocument
     **/
    function loadFile($xml_file) {}

    /**
     * Constructs the tree of SDO_DataObjects from the given xml instance
     * string. Returns SDO_DAS_XML_Document Object. Use
     * SDO_DAS_XML_Document::getRootDataObject method to get root data
     * object.
     *
     * @param string
     * @return SDO_DAS_XML_Document
     **/
    function loadString($xml_string) {}

    /**
     * Saves the SDO_DAS_XML_Document object to a file.
     *
     * @param SDO_XMLDocument
     * @param string
     * @param int
     * @return void
     **/
    function saveFile($xdoc, $xml_file, $indent) {}

    /**
     * Saves the SDO_DAS_XML_Document object to string.
     *
     * @param SDO_XMLDocument
     * @param int
     * @return string
     **/
    function saveString($xdoc, $indent) {}

}
class SDO_DAS_XML_Document {
    /**
     * Returns the root SDO_DataObject.
     *
     * @return SDO_DataObject
     **/
    function getRootDataObject() {}

    /**
     * Returns root element's name.
     *
     * @return string
     **/
    function getRootElementName() {}

    /**
     * Returns root element's URI string.
     *
     * @return string
     **/
    function getRootElementURI() {}

    /**
     * Sets the given string as encoding.
     *
     * @param string
     * @return void
     **/
    function setEncoding($encoding) {}

    /**
     * Controls whether an XML declaration will be generated at the start of
     * the XML document. Set to to generate the XML declaration, or to
     * suppress it.
     *
     * @param bool
     * @return void
     **/
    function setXMLDeclaration($xmlDeclatation) {}

    /**
     * Sets the given string as xml version.
     *
     * @param string
     * @return void
     **/
    function setXMLVersion($xmlVersion) {}

}
class SDO_DataFactory {
    /**
     * Create a new SDO_DataObject given the data object's namespace URI and
     * type name.
     *
     * @param string
     * @param string
     * @return void
     **/
    function create($type_namespace_uri, $type_name) {}

}
class SDO_DataObject {
    /**
     * Clear an SDO_DataObject's properties. Read-only properties are
     * unaffected. Subsequent calls to isset() for the data object will
     * return .
     *
     * @return void
     **/
    function clear() {}

    /**
     * Create a child SDO_DataObject of the default type for the property
     * identified. The data object is automatically inserted into the tree
     * and a reference to it is returned.
     *
     * @param mixed
     * @return SDO_DataObject
     **/
    function createDataObject($identifier) {}

    /**
     * Get the data object which contains this data object.
     *
     * @return SDO_DataObject
     **/
    function getContainer() {}

    /**
     * Return the SDO_Sequence for this SDO_DataObject. Accessing the
     * SDO_DataObject through the SDO_Sequence interface acts on the same
     * SDO_DataObject instance data, but preserves ordering across
     * properties.
     *
     * @return SDO_Sequence
     **/
    function getSequence() {}

    /**
     * Return the name of the type for a data object. A convenience method
     * corresponding to SDO_Model_ReflectionDataObject::getType().getName().
     *
     * @return string
     **/
    function getTypeName() {}

    /**
     * Return the namespace URI of the type for a data object. A convenience
     * method corresponding to
     * SDO_Model_ReflectionDataObject::getType().getNamespaceURI().
     *
     * @return string
     **/
    function getTypeNamespaceURI() {}

}
class SDO_Exception {
    /**
     * Returns the cause of this exception or NULL if the cause is
     * nonexistent or unknown. Typically the cause will be an
     * SDO_CPPException object, which may be used to obtain additional
     * diagnostic information.
     *
     * @return mixed
     **/
    function getCause() {}

}
class SDO_List {
    /**
     * Insert a new element at a specified position in the list. All
     * subsequent list items are moved up.
     *
     * @param mixed
     * @param int
     * @return void
     **/
    function insert($value, $index) {}

}
class SDO_Model_Property {
    /**
     * Returns the SDO_Model_Type which contains this property.
     *
     * @return SDO_Model_Type
     **/
    function getContainingType() {}

    /**
     * Returns the default value for the property. Only primitive data type
     * properties can have default values.
     *
     * @return mixed
     **/
    function getDefault() {}

    /**
     * Returns the name of the SDO_Model_Property.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Get the SDO_Model_Type of the property. The SDO_Model_Type describes
     * the type information for the property, such as its type name,
     * namespace URI, whether it is a primitive data type, and so on.
     *
     * @return SDO_Model_Type
     **/
    function getType() {}

    /**
     * Test to see if the property corresponds to a containment relationship.
     * Returns if the property defines a containment relationship, or if it
     * is reference.
     *
     * @return bool
     **/
    function isContainment() {}

    /**
     * Test to see if the property is many-valued. Returns if this is a
     * many-valued property, otherwise returns .
     *
     * @return bool
     **/
    function isMany() {}

}
class SDO_Model_ReflectionDataObject {
    /**
     * Get a string describing the SDO_DataObject. The default behaviour is
     * to print the output, but if is specified for return, it is returned as
     * a string.
     *
     * @param SDO_Model_ReflectionDataObject
     * @param bool
     * @return mixed
     **/
    function export($rdo, $return) {}

    /**
     * Get the SDO_Model_Property that contains the SDO_DataObject. This
     * method is used to navigate up to the parent's property which contains
     * the data object which has been reflected upon.
     *
     * @return SDO_Model_Property
     **/
    function getContainmentProperty() {}

    /**
     * Get the instance properties for the SDO_DataObject. The instance
     * properties consist of all the properties defined on the data object's
     * type, plus any instance properties from open content (if the data
     * object is an open type).
     *
     * @return array
     **/
    function getInstanceProperties() {}

    /**
     * Returns the SDO_Model_Type for the SDO_DataObject. The SDO_Model_Type
     * holds all the information about the data object's type, such as
     * namespace URI, type name, whether it is a primitive data type, and so
     * on.
     *
     * @return SDO_Model_Type
     **/
    function getType() {}

    /**
     * Construct an SDO_Model_ReflectionDataObject to reflect on an
     * SDO_DataObject. Reflecting on an SDO_DataObject gives access to
     * information about its model. The model contains information such as
     * the data object's type, and whether that type is sequenced (preserves
     * ordering across properties) or open (each instance can have its model
     * extended). The model also holds information about the data object's
     * properties, any default values they may have, and so on.
     *
     * @param SDO_DataObject
     * @return SDO_Model_ReflectionDataObject
     **/
    function __construct($data_object) {}

}
class SDO_Model_Type {
    /**
     * Get the base type for this type. Returns the SDO_Model_Type for the
     * base type if this type inherits from another, otherwise returns . An
     * example of when base types occur is when a type defined in XML schema
     * inherits from another type by using .
     *
     * @return SDO_Model_Type
     **/
    function getBaseType() {}

    /**
     * Returns the name of the type. The combination of type name and
     * namespace URI is used to uniquely identify the type.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Returns the namespace URI of the type. The combination of namespace
     * URI and type name is used to uniquely identify the type.
     *
     * @return string
     **/
    function getNamespaceURI() {}

    /**
     * Get an array of SDO_Model_Property objects describing the properties
     * defined for the SDO_Model_Type. Each SDO_Model_Property holds
     * information such as the property name, default value, and so on.
     *
     * @return array
     **/
    function getProperties() {}

    /**
     * Get an SDO_Model_Property of the type, identified by its property
     * index or property name.
     *
     * @param mixed
     * @return SDO_Model_Property
     **/
    function getProperty($identifier) {}

    /**
     * Test to see if this SDO_Model_Type is an abstract data type. Returns
     * if this type is abstract, that is, no SDO_DataObject of this type can
     * be instantiated, though other types may inherit from it.
     *
     * @return bool
     **/
    function isAbstractType() {}

    /**
     * Test to see if this SDO_Model_Type is a primitive data type. Returns
     * if this type is a primitive data type, otherwise returns .
     *
     * @return bool
     **/
    function isDataType() {}

    /**
     * Test for an SDO_DataObject being an instance of this SDO_Model_Type.
     * Returns if the SDO_DataObject provided is an instance of this
     * SDO_Model_Type, or a derived type, otherwise returns .
     *
     * @param SDO_DataObject
     * @return bool
     **/
    function isInstance($data_object) {}

    /**
     * Test to see if this type is open. Returns if this type is open,
     * otherwise returns . An SDO_DataObject whose type is open can have
     * properties added to them which are not described by the type. This
     * capability is used to support working with XML documents whose schema
     * support open content, such as that defined by an element.
     *
     * @return bool
     **/
    function isOpenType() {}

    /**
     * Test to see if this is a sequenced type. Returns if this type is
     * sequence, otherwise returns . Sequenced types can have the ordering
     * across properties preserved and can contain unstructured text. For
     * more information on sequenced types see the section on Working with
     * Sequenced Data Objects.
     *
     * @return bool
     **/
    function isSequencedType() {}

}
class SDO_Sequence {
    /**
     * Return the property for the specified sequence index.
     *
     * @param int
     * @return SDO_Model_Property
     **/
    function getProperty($sequence_index) {}

    /**
     * Insert a new element at a specified position in the sequence. All
     * subsequent sequence items are moved up.
     *
     * @param mixed
     * @param int
     * @param mixed
     * @return void
     **/
    function insert($value, $sequenceIndex, $propertyIdentifier) {}

    /**
     * Modify the position of the item in the sequence, without altering the
     * value of the property in the SDO_DataObject.
     *
     * @param int
     * @param int
     * @return void
     **/
    function move($toIndex, $fromIndex) {}

}
class SeekableIterator extends Iterator {
    /**
     * Seeks to a given position in the iterator.
     *
     * @param int
     * @return void
     **/
    function seek($position) {}

}
class SimpleXMLElement {
    /**
     * Adds an attribute to the SimpleXML element.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function addAttribute($name, $value, $namespace) {}

    /**
     * Adds a child element to the node and returns a SimpleXMLElement of the
     * child.
     *
     * @param string
     * @param string
     * @param string
     * @return SimpleXMLElement
     **/
    function addChild($name, $value, $namespace) {}

    /**
     * The asXML method formats the parent object's data in XML version 1.0.
     *
     * @param string
     * @return mixed
     **/
    function asXML($filename) {}

    /**
     * This function provides the attributes and values defined within an xml
     * tag.
     *
     * @param string
     * @param bool
     * @return SimpleXMLElement
     **/
    function attributes($ns, $is_prefix) {}

    /**
     * This method finds the children of the element of which it is a member.
     * The result follows normal iteration rules.
     *
     * @param string
     * @param bool
     * @return SimpleXMLElement
     **/
    function children($ns, $is_prefix) {}

    /**
     * Returns namespaces declared in document
     *
     * @param bool
     * @return array
     **/
    function getDocNamespaces($recursive) {}

    /**
     * Gets the name of the XML element.
     *
     * @return string
     **/
    function getName() {}

    /**
     * Returns namespaces used in document
     *
     * @param bool
     * @return array
     **/
    function getNamespaces($recursive) {}

    /**
     * Creates a prefix/ns context for the next XPath query. In particular,
     * this is helpful if the provider of the given XML document alters the
     * namespace prefixes. registerXPathNamespace will create a prefix for
     * the associated namespace, allowing one to access nodes in that
     * namespace without the need to change code to allow for the new
     * prefixes dictated by the provider.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function registerXPathNamespace($prefix, $ns) {}

    /**
     * The xpath method searches the SimpleXML node for children matching the
     * XPath path.
     *
     * @param string
     * @return array
     **/
    function xpath($path) {}

}
class SimpleXMLIterator extends SimpleXMLElement implements RecursiveIterator, Traversable, Iterator, Countable {
    /**
     * This method returns the current element as a SimpleXMLIterator object
     * or .
     *
     * @return mixed
     **/
    function current() {}

    /**
     * This method returns a SimpleXMLIterator object containing sub-elements
     * of the current SimpleXMLIterator element.
     *
     * @return object
     **/
    function getChildren() {}

    /**
     * This method checks whether the current SimpleXMLIterator element has
     * sub-elements.
     *
     * @return bool
     **/
    function hasChildren() {}

    /**
     * This method gets the XML tag name of the current element.
     *
     * @return mixed
     **/
    function key() {}

    /**
     * This method moves the SimpleXMLIterator to the next element.
     *
     * @return void
     **/
    function next() {}

    /**
     * This method rewinds the SimpleXMLIterator to the first element.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * This method checks if the current element is valid after calls to
     * SimpleXMLIterator::rewind or SimpleXMLIterator::next.
     *
     * @return bool
     **/
    function valid() {}

}
class SoapClient {
    /**
     * This constructor creates SoapClient objects in WSDL or non-WSDL mode.
     *
     * @param mixed
     * @param array
     **/
    function SoapClient($wsdl, $options) {}

    /**
     * This method is deprecated. Use instead of it.
     *
     * @param string
     * @param string
     * @return mixed
     **/
    function __call($function_name, $arguments) {}

    /**
     * Performs SOAP request over HTTP.
     * 
     * This method can be overridden in subclasses to implement different
     * transport layers, perform additional XML processing or other purpose.
     *
     * @param string
     * @param string
     * @param string
     * @param int
     * @param int
     * @return string
     **/
    function __doRequest($request, $location, $action, $version, $one_way) {}

    /**
     * Returns a list of available SOAP functions.
     * 
     * This function only works in WSDL mode.
     *
     * @return array
     **/
    function __getFunctions() {}

    /**
     * Returns the XML sent in the last SOAP request.
     *
     * @return string
     **/
    function __getLastRequest() {}

    /**
     * Returns the SOAP headers from the last request.
     *
     * @return string
     **/
    function __getLastRequestHeaders() {}

    /**
     * Returns the XML sent in the last SOAP response.
     *
     * @return string
     **/
    function __getLastResponse() {}

    /**
     * Returns the SOAP headers from the last response.
     *
     * @return string
     **/
    function __getLastResponseHeaders() {}

    /**
     * Returns an array of types described in the WSDL for the Web service.
     *
     * @return array
     **/
    function __getTypes() {}

    /**
     * Defines a cookie to be sent along with the SOAP requests.
     *
     * @param string
     * @param string
     * @return void
     **/
    function __setCookie($name, $value) {}

    /**
     * Sets the endpoint URL that will be touched by following SOAP requests.
     * This is equivalent to specifying the location option when constructing
     * the SoapClient.
     *
     * @param string
     * @return string
     **/
    function __setLocation($new_location) {}

    /**
     * Defines headers to be sent along with the SOAP requests.
     *
     * @param mixed
     * @return bool
     **/
    function __setSoapHeaders($soapheaders) {}

    /**
     * This is a low level API function that is used to make a SOAP call.
     * Usually, in WSDL mode, SOAP functions can be called as methods of the
     * SoapClient object. This method is useful in non-WSDL mode when
     * soapaction is unknown, uri differs from the default or when sending
     * and/or receiving SOAP Headers.
     * 
     * On error, a call to a SOAP function can cause PHP to throw exceptions
     * or return a SoapFault object if exceptions are disabled. To check if
     * the function call failed to catch the SoapFault exceptions, check the
     * result with is_soap_fault.
     *
     * @param string
     * @param array
     * @param array
     * @param mixed
     * @param array
     * @return mixed
     **/
    function __soapCall($function_name, $arguments, $options, $input_headers, &$output_headers) {}

}
class SoapFault extends Exception {
    /**
     * This class is used to send SOAP fault responses from the PHP handler.
     * faultcode, faultstring, faultactor and details are standard elements
     * of a SOAP Fault.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function SoapFault($faultcode, $faultstring, $faultactor, $detail, $faultname, $headerfault) {}

    /**
     * SoapFault::SoapFault
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($faultcode, $faultstring, $faultactor, $detail, $faultname, $headerfault) {}

    /**
     * Returns a string representation of the SoapFault.
     *
     * @return string
     **/
    function __toString() {}

}
class SoapHeader {
    /**
     * Constructs a new SoapHeader object.
     *
     * @param string
     * @param string
     * @param mixed
     * @param bool
     * @param string
     **/
    function SoapHeader($namespace, $name, $data, $mustunderstand, $actor) {}

    /**
     * SoapHeader::SoapHeader
     *
     * @param string
     * @param string
     * @param mixed
     * @param bool
     * @param string
     **/
    function __construct($namespace, $name, $data, $mustunderstand, $actor) {}

}
class SoapParam {
    /**
     * Constructs a new SoapParam object.
     *
     * @param mixed
     * @param string
     **/
    function SoapParam($data, $name) {}

    /**
     * SoapParam::SoapParam
     *
     * @param mixed
     * @param string
     **/
    function __construct($data, $name) {}

}
class SoapServer {
    /**
     * Exports one or more functions for remote clients
     *
     * @param string
     * @return void
     **/
    function addFunction($functions) {}

    /**
     * Adds a SOAP header to be returned with the response to the current
     * request.
     *
     * @param string
     * @return void
     **/
    function addSoapHeader($object) {}

    /**
     * Sends a response to the client of the current request indicating an
     * error.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function fault($code, $string, $actor, $details, $name) {}

    /**
     * Returns a list of the defined functions in the SoapServer object. This
     * method returns the list of all functions added by
     * SoapServer::addFunction or SoapServer::setClass.
     *
     * @return array
     **/
    function getFunctions() {}

    /**
     * Processes a SOAP request, calls necessary functions, and sends a
     * response back.
     *
     * @param string
     * @return void
     **/
    function handle($soap_request) {}

    /**
     * Exports all methods from specified class.
     * 
     * The object can be made persistent across request for a given PHP
     * session with the SoapServer::setPersistence method.
     *
     * @param string
     * @param string
     * @return void
     **/
    function setClass($class_name, $args) {}

    /**
     * This sets a specific object as the handler for SOAP requests, rather
     * than just a class as in SoapServer::setClass.
     *
     * @param string
     * @return void
     **/
    function setObject($object) {}

    /**
     * This function allows saving data between requests in a PHP session. It
     * works only with a server that exports functions from a class with
     * SoapServer::setClass or SoapServer::setObject.
     *
     * @param string
     * @return void
     **/
    function setPersistence($mode) {}

    /**
     * This constructor allows the creation of SoapServer objects in WSDL or
     * non-WSDL mode.
     *
     * @param mixed
     * @param array
     **/
    function SoapServer($wsdl, $options) {}

    /**
     * SoapServer::SoapServer
     *
     * @param mixed
     * @param array
     **/
    function __construct($wsdl, $options) {}

}
class SoapVar {
    /**
     * Constructs a new SoapVar object.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function SoapVar($data, $encoding, $type_name, $type_namespace, $node_name, $node_namespace) {}

    /**
     * SoapVar::SoapVar
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     * @param string
     **/
    function __construct($data, $encoding, $type_name, $type_namespace, $node_name, $node_namespace) {}

}
class SolrClient {
    /**
     * This method adds a document to the index.
     *
     * @param SolrInputDocument
     * @param bool
     * @param int
     * @return SolrUpdateResponse
     **/
    function addDocument(&$doc, $allowDups, $commitWithin) {}

    /**
     * Adds a collection of documents to the index.
     *
     * @param array
     * @param bool
     * @param int
     * @return void
     **/
    function addDocuments(&$docs, $allowDups, $commitWithin) {}

    /**
     * This method finalizes all add/deletes made to the index.
     *
     * @param int
     * @param bool
     * @param bool
     * @return SolrUpdateResponse
     **/
    function commit($maxSegments, $waitFlush, $waitSearcher) {}

    /**
     * Deletes the document with the specified ID. Where ID is the value of
     * the uniqueKey field declared in the schema
     *
     * @param string
     * @return SolrUpdateResponse
     **/
    function deleteById($id) {}

    /**
     * Deletes a collection of documents with the specified set of ids.
     *
     * @param array
     * @return SolrUpdateResponse
     **/
    function deleteByIds($ids) {}

    /**
     * Removes all documents matching any of the queries
     *
     * @param array
     * @return SolrUpdateResponse
     **/
    function deleteByQueries($queries) {}

    /**
     * Deletes all documents matching the given query.
     *
     * @param string
     * @return SolrUpdateResponse
     **/
    function deleteByQuery($query) {}

    /**
     * Defragments the index for faster search performance.
     *
     * @param int
     * @param bool
     * @param bool
     * @return SolrUpdateResponse
     **/
    function optimize($maxSegments, $waitFlush, $waitSearcher) {}

    /**
     * Checks if the Solr server is still alive. Sends a HEAD request to the
     * Apache Solr server.
     *
     * @return SolrPingResponse
     **/
    function ping() {}

    /**
     * Sends a query to the server.
     *
     * @param SolrParams
     * @return SolrQueryResponse
     **/
    function query(&$query) {}

    /**
     * Sends a raw XML update request to the server
     *
     * @param string
     * @return void
     **/
    function request($raw_request) {}

    /**
     * Rollbacks all add/deletes made to the index since the last commit. It
     * neither calls any event listeners nor creates a new searcher.
     *
     * @return SolrUpdateResponse
     **/
    function rollback() {}

    /**
     * Changes the specified servlet type to a new value
     *
     * @param int
     * @param string
     * @return bool
     **/
    function setServlet($type, $value) {}

    /**
     * Checks the threads status
     *
     * @return void
     **/
    function threads() {}

    /**
     * Constructor for the SolrClient object
     *
     * @param array
     **/
    function __construct($clientOptions) {}

    /**
     * Destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrClientException extends SolrException {
    /**
     * Returns internal information where the Exception was thrown.
     *
     * @return array
     **/
    function getInternalInfo() {}

}
class SolrDocument implements ArrayAccess, Iterator, Traversable, Serializable {
    /**
     * This method adds a field to the SolrDocument instance.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function addField($fieldName, $fieldValue) {}

    /**
     * Resets the current object. Discards all the fields and resets the
     * document boost to zero.
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Retrieves the current field
     *
     * @return SolrDocumentField
     **/
    function current() {}

    /**
     * Removes a field from the document.
     *
     * @param string
     * @return bool
     **/
    function deleteField($fieldName) {}

    /**
     * Checks if the requested field as a valid fieldname in the document.
     *
     * @param string
     * @return bool
     **/
    function fieldExists($fieldName) {}

    /**
     * Retrieves a field by name.
     *
     * @param string
     * @return SolrDocumentField
     **/
    function getField($fieldName) {}

    /**
     * Returns the number of fields in this document. Multi-value fields are
     * only counted once.
     *
     * @return int
     **/
    function getFieldCount() {}

    /**
     * Returns an array of fields names in the document.
     *
     * @return array
     **/
    function getFieldNames() {}

    /**
     * Returns a SolrInputDocument equivalent of the object. This is useful
     * if one wishes to resubmit/update a document retrieved from a query.
     *
     * @return SolrInputDocument
     **/
    function getInputDocument() {}

    /**
     * Retrieves the current key.
     *
     * @return string
     **/
    function key() {}

    /**
     * Merges source to the current SolrDocument.
     *
     * @param SolrDocument
     * @param bool
     * @return void
     **/
    function merge(&$sourceDoc, $overwrite) {}

    /**
     * Moves the internal pointer to the next field.
     *
     * @return void
     **/
    function next() {}

    /**
     * Checks if a particular field exists. This is used when the object is
     * treated as an array.
     *
     * @param string
     * @return bool
     **/
    function offsetExists($fieldName) {}

    /**
     * This is used to retrieve the field when the object is treated as an
     * array.
     *
     * @param string
     * @return SolrDocumentField
     **/
    function offsetGet($fieldName) {}

    /**
     * Used when the object is treated as an array to add a field to the
     * document.
     *
     * @param string
     * @param string
     * @return void
     **/
    function offsetSet($fieldName, $fieldValue) {}

    /**
     * Removes a field from the document.
     *
     * @param string
     * @return void
     **/
    function offsetUnset($fieldName) {}

    /**
     * This is an alias to SolrDocument::clear()
     *
     * @return bool
     **/
    function reset() {}

    /**
     * Resets the internal pointer to the beginning.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Used for custom serialization.
     *
     * @return string
     **/
    function serialize() {}

    /**
     * @param int
     * @param int
     * @return void
     **/
    function sort($sortOrderBy, $sortDirection) {}

    /**
     * Returns an array representation of the document.
     *
     * @return array
     **/
    function toArray() {}

    /**
     * Custom serialization of SolrDocument objects
     *
     * @param string
     * @return void
     **/
    function unserialize($serialized) {}

    /**
     * Checks if the current position internally is still valid. It is used
     * during foreach operations.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Creates a copy of a SolrDocument object. Not to be called directly.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * Constructor for SolrDocument
     *
     **/
    function __construct() {}

    /**
     * Destructor for SolrDocument.
     *
     * @return void
     **/
    function __destruct() {}

    /**
     * Magic method for accessing the field as a property.
     *
     * @param string
     * @return SolrDocumentField
     **/
    function __get($fieldName) {}

    /**
     * Checks if a field exists
     *
     * @param string
     * @return bool
     **/
    function __isset($fieldName) {}

    /**
     * Adds another field to the document. Used to set the fields as new
     * properties.
     *
     * @param string
     * @param string
     * @return void
     **/
    function __set($fieldName, $fieldValue) {}

    /**
     * Removes a field from the document when the field is access as an
     * object property.
     *
     * @param string
     * @return void
     **/
    function __unset($fieldName) {}

}
class SolrDocumentField {
    /**
     * Constructor.
     *
     **/
    function __construct() {}

    /**
     * Destructor.
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrException extends Exception {
    /**
     * Returns internal information where the Exception was thrown.
     *
     * @return array
     **/
    function getInternalInfo() {}

}
class SolrGenericResponse extends SolrResponse {
    /**
     * Constructor
     *
     **/
    function __construct() {}

    /**
     * Destructor.
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrIllegalArgumentException extends SolrException {
    /**
     * Returns internal information where the Exception was thrown.
     *
     * @return array
     **/
    function getInternalInfo() {}

}
class SolrIllegalOperationException extends SolrException {
    /**
     * Returns internal information where the Exception was thrown.
     *
     * @return array
     **/
    function getInternalInfo() {}

}
class SolrInputDocument {
    /**
     * For multi-value fields, if a valid boost value is specified, the
     * specified value will be multiplied by the current boost value for this
     * field.
     *
     * @param string
     * @param string
     * @param float
     * @return bool
     **/
    function addField($fieldName, $fieldValue, $fieldBoostValue) {}

    /**
     * Resets the document by dropping all the fields and resets the document
     * boost to zero.
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Removes a field from the document.
     *
     * @param string
     * @return bool
     **/
    function deleteField($fieldName) {}

    /**
     * Checks if a field exists
     *
     * @param string
     * @return bool
     **/
    function fieldExists($fieldName) {}

    /**
     * Retrieves the current boost value for the document.
     *
     * @return float
     **/
    function getBoost() {}

    /**
     * Retrieves a field in the document.
     *
     * @param string
     * @return SolrDocumentField
     **/
    function getField($fieldName) {}

    /**
     * Retrieves the boost value for a particular field.
     *
     * @param string
     * @return float
     **/
    function getFieldBoost($fieldName) {}

    /**
     * Returns the number of fields in the document.
     *
     * @return int
     **/
    function getFieldCount() {}

    /**
     * Returns an array containing all the fields in the document.
     *
     * @return array
     **/
    function getFieldNames() {}

    /**
     * Merges one input document into another.
     *
     * @param SolrInputDocument
     * @param bool
     * @return bool
     **/
    function merge(&$sourceDoc, $overwrite) {}

    /**
     * This is an alias of SolrInputDocument::clear
     *
     * @return bool
     **/
    function reset() {}

    /**
     * Sets the boost value for this document.
     *
     * @param float
     * @return bool
     **/
    function setBoost($documentBoostValue) {}

    /**
     * Sets the index-time boost value for a field. This replaces the current
     * boost value for this field.
     *
     * @param string
     * @param float
     * @return bool
     **/
    function setFieldBoost($fieldName, $fieldBoostValue) {}

    /**
     * @param int
     * @param int
     * @return bool
     **/
    function sort($sortOrderBy, $sortDirection) {}

    /**
     * Returns an array representation of the input document.
     *
     * @return void
     **/
    function toArray() {}

    /**
     * Should not be called directly. It is used to create a deep copy of a
     * SolrInputDocument.
     *
     * @return void
     **/
    function __clone() {}

    /**
     * Constructor.
     *
     **/
    function __construct() {}

    /**
     * Destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrModifiableParams extends SolrParams implements Serializable {
    /**
     * Constructor
     *
     **/
    function __construct() {}

    /**
     * Destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrObject implements ArrayAccess {
    /**
     * Returns an array of all the names of the properties
     *
     * @return array
     **/
    function getPropertyNames() {}

    /**
     * Checks if the property exists. This is used when the object is treated
     * as an array.
     *
     * @param string
     * @return bool
     **/
    function offsetExists($property_name) {}

    /**
     * Used to get the value of a property. This is used when the object is
     * treated as an array.
     *
     * @param string
     * @return mixed
     **/
    function offsetGet($property_name) {}

    /**
     * Sets the value for a property. This is used when the object is treated
     * as an array. This object is read-only. This should never be attempted.
     *
     * @param string
     * @param string
     * @return void
     **/
    function offsetSet($property_name, $property_value) {}

    /**
     * Sets the value for the property. This is used when the object is
     * treated as an array. This object is read-only. This should never be
     * attempted.
     *
     * @param string
     * @return void
     **/
    function offsetUnset($property_name) {}

    /**
     * The method description goes here.
     *
     **/
    function __construct() {}

    /**
     * The destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrParams implements Serializable {
    /**
     * This is an alias for SolrParams::addParam
     *
     * @param string
     * @param string
     * @return SolrParams
     **/
    function add($name, $value) {}

    /**
     * Adds a parameter to the object. This is used for parameters that can
     * be specified multiple times.
     *
     * @param string
     * @param string
     * @return SolrParams
     **/
    function addParam($name, $value) {}

    /**
     * This is an alias for SolrParams::getParam
     *
     * @param string
     * @return mixed
     **/
    function get($param_name) {}

    /**
     * Returns a parameter with name param_name
     *
     * @param string
     * @return mixed
     **/
    function getParam($param_name) {}

    /**
     * Returns an array of non URL-encoded parameters
     *
     * @return array
     **/
    function getParams() {}

    /**
     * Returns an array on URL-encoded parameters
     *
     * @return array
     **/
    function getPreparedParams() {}

    /**
     * Used for custom serialization
     *
     * @return string
     **/
    function serialize() {}

    /**
     * An alias of SolrParams::setParam
     *
     * @param string
     * @param string
     * @return void
     **/
    function set($name, $value) {}

    /**
     * Sets the query parameter to the specified value. This is used for
     * parameters that can only be specified once. Subsequent calls with the
     * same parameter name will override the existing value
     *
     * @param string
     * @param string
     * @return SolrParams
     **/
    function setParam($name, $value) {}

    /**
     * Returns all the name-value pair parameters in the object
     *
     * @param bool
     * @return string
     **/
    function toString($url_encode) {}

    /**
     * Used for custom serialization
     *
     * @param string
     * @return void
     **/
    function unserialize($serialized) {}

}
class SolrPingResponse extends SolrResponse {
    /**
     * Returns the response from the server. This should be empty because the
     * request as a HEAD request.
     *
     * @return string
     **/
    function getResponse() {}

    /**
     * Constructor
     *
     **/
    function __construct() {}

    /**
     * Destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrQuery extends SolrModifiableParams implements Serializable {
    /**
     * This method allows you to specify a field which should be treated as a
     * facet.
     * 
     * It can be used multiple times with different field names to indicate
     * multiple facet fields
     *
     * @param string
     * @return SolrQuery
     **/
    function addFacetDateField($dateField) {}

    /**
     * Sets the facet.date.other parameter. Accepts an optional field
     * override
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function addFacetDateOther($value, $field_override) {}

    /**
     * Adds another field to the facet
     *
     * @param string
     * @return SolrQuery
     **/
    function addFacetField($field) {}

    /**
     * Adds a facet query
     *
     * @param string
     * @return SolrQuery
     **/
    function addFacetQuery($facetQuery) {}

    /**
     * This method is used to used to specify a set of fields to return,
     * thereby restricting the amount of data returned in the response.
     * 
     * It should be called multiple time, once for each field name.
     *
     * @param string
     * @return SolrQuery
     **/
    function addField($field) {}

    /**
     * Specifies a filter query
     *
     * @param string
     * @return SolrQuery
     **/
    function addFilterQuery($fq) {}

    /**
     * Maps to hl.fl. This is used to specify that highlighted snippets
     * should be generated for a particular field
     *
     * @param string
     * @return SolrQuery
     **/
    function addHighlightField($field) {}

    /**
     * Maps to mlt.fl. It specifies that a field should be used for
     * similarity.
     *
     * @param string
     * @return SolrQuery
     **/
    function addMltField($field) {}

    /**
     * Maps to mlt.qf. It is used to specify query fields and their boosts
     *
     * @param string
     * @param float
     * @return SolrQuery
     **/
    function addMltQueryField($field, $boost) {}

    /**
     * Used to control how the results should be sorted.
     *
     * @param string
     * @param int
     * @return SolrQuery
     **/
    function addSortField($field, $order) {}

    /**
     * Requests a return of sub results for values within the given facet.
     * Maps to the stats.facet field
     *
     * @param string
     * @return SolrQuery
     **/
    function addStatsFacet($field) {}

    /**
     * Maps to stats.field parameter This methods adds another stats.field
     * parameter.
     *
     * @param string
     * @return SolrQuery
     **/
    function addStatsField($field) {}

    /**
     * Returns the value of the facet parameter.
     *
     * @return bool
     **/
    function getFacet() {}

    /**
     * Returns the value for the facet.date.end parameter. This method
     * accepts an optional field override
     *
     * @param string
     * @return string
     **/
    function getFacetDateEnd($field_override) {}

    /**
     * Returns all the facet.date fields
     *
     * @return array
     **/
    function getFacetDateFields() {}

    /**
     * Returns the value of the facet.date.gap parameter. It accepts an
     * optional field override
     *
     * @param string
     * @return string
     **/
    function getFacetDateGap($field_override) {}

    /**
     * Returns the value of the facet.date.hardend parameter. Accepts an
     * optional field override
     *
     * @param string
     * @return string
     **/
    function getFacetDateHardEnd($field_override) {}

    /**
     * Returns the value for the facet.date.other parameter. This method
     * accepts an optional field override.
     *
     * @param string
     * @return string
     **/
    function getFacetDateOther($field_override) {}

    /**
     * Returns the lower bound for the first date range for all date faceting
     * on this field. Accepts an optional field override
     *
     * @param string
     * @return string
     **/
    function getFacetDateStart($field_override) {}

    /**
     * Returns all the facet fields
     *
     * @return array
     **/
    function getFacetFields() {}

    /**
     * Returns the maximum number of constraint counts that should be
     * returned for the facet fields. This method accepts an optional field
     * override
     *
     * @param string
     * @return int
     **/
    function getFacetLimit($field_override) {}

    /**
     * Returns the value of the facet.method parameter. This accepts an
     * optional field override.
     *
     * @param string
     * @return string
     **/
    function getFacetMethod($field_override) {}

    /**
     * Returns the minimum counts for facet fields should be included in the
     * response. It accepts an optional field override
     *
     * @param string
     * @return int
     **/
    function getFacetMinCount($field_override) {}

    /**
     * Returns the current state of the facet.missing parameter. This accepts
     * an optional field override
     *
     * @param string
     * @return bool
     **/
    function getFacetMissing($field_override) {}

    /**
     * Returns an offset into the list of constraints to be used for
     * pagination. Accepts an optional field override
     *
     * @param string
     * @return int
     **/
    function getFacetOffset($field_override) {}

    /**
     * Returns the facet prefix
     *
     * @param string
     * @return string
     **/
    function getFacetPrefix($field_override) {}

    /**
     * Returns all the facet queries
     *
     * @return array
     **/
    function getFacetQueries() {}

    /**
     * Returns an integer (SolrQuery::FACET_SORT_INDEX or
     * SolrQuery::FACET_SORT_COUNT)
     *
     * @param string
     * @return int
     **/
    function getFacetSort($field_override) {}

    /**
     * Returns the list of fields that will be returned in the response
     *
     * @return array
     **/
    function getFields() {}

    /**
     * Returns an array of filter queries. These are queries that can be used
     * to restrict the super set of documents that can be returned, without
     * influencing score
     *
     * @return array
     **/
    function getFilterQueries() {}

    /**
     * Returns a boolean indicating whether or not to enable highlighted
     * snippets to be generated in the query response.
     *
     * @return bool
     **/
    function getHighlight() {}

    /**
     * Returns the highlight field to use as backup or default. It accepts an
     * optional override.
     *
     * @param string
     * @return string
     **/
    function getHighlightAlternateField($field_override) {}

    /**
     * Returns all the fields that Solr should generate highlighted snippets
     * for
     *
     * @return array
     **/
    function getHighlightFields() {}

    /**
     * Returns the formatter for the highlighted output
     *
     * @param string
     * @return string
     **/
    function getHighlightFormatter($field_override) {}

    /**
     * Returns the text snippet generator for highlighted text. Accepts an
     * optional field override.
     *
     * @param string
     * @return string
     **/
    function getHighlightFragmenter($field_override) {}

    /**
     * Returns the number of characters of fragments to consider for
     * highlighting. Zero implies no fragmenting. The entire field should be
     * used.
     *
     * @param string
     * @return int
     **/
    function getHighlightFragsize($field_override) {}

    /**
     * Returns whether or not to enable highlighting for
     * range/wildcard/fuzzy/prefix queries
     *
     * @return bool
     **/
    function getHighlightHighlightMultiTerm() {}

    /**
     * Returns the maximum number of characters of the field to return
     *
     * @param string
     * @return int
     **/
    function getHighlightMaxAlternateFieldLength($field_override) {}

    /**
     * Returns the maximum number of characters into a document to look for
     * suitable snippets
     *
     * @return int
     **/
    function getHighlightMaxAnalyzedChars() {}

    /**
     * Returns whether or not the collapse contiguous fragments into a single
     * fragment. Accepts an optional field override.
     *
     * @param string
     * @return bool
     **/
    function getHighlightMergeContiguous($field_override) {}

    /**
     * Returns the maximum number of characters from a field when using the
     * regex fragmenter
     *
     * @return int
     **/
    function getHighlightRegexMaxAnalyzedChars() {}

    /**
     * Returns the regular expression used for fragmenting
     *
     * @return string
     **/
    function getHighlightRegexPattern() {}

    /**
     * Returns the factor by which the regex fragmenter can deviate from the
     * ideal fragment size to accomodate the regular expression
     *
     * @return float
     **/
    function getHighlightRegexSlop() {}

    /**
     * Returns if a field will only be highlighted if the query matched in
     * this particular field.
     *
     * @return bool
     **/
    function getHighlightRequireFieldMatch() {}

    /**
     * Returns the text which appears after a highlighted term. Accepts an
     * optional field override
     *
     * @param string
     * @return string
     **/
    function getHighlightSimplePost($field_override) {}

    /**
     * Returns the text which appears before a highlighted term. Accepts an
     * optional field override
     *
     * @param string
     * @return string
     **/
    function getHighlightSimplePre($field_override) {}

    /**
     * Returns the maximum number of highlighted snippets to generate per
     * field. Accepts an optional field override
     *
     * @param string
     * @return int
     **/
    function getHighlightSnippets($field_override) {}

    /**
     * Returns whether or not to use SpanScorer to highlight phrase terms
     * only when they appear within the query phrase in the document.
     *
     * @return bool
     **/
    function getHighlightUsePhraseHighlighter() {}

    /**
     * Returns whether or not MoreLikeThis results should be enabled
     *
     * @return bool
     **/
    function getMlt() {}

    /**
     * Returns whether or not the query will be boosted by the interesting
     * term relevance
     *
     * @return bool
     **/
    function getMltBoost() {}

    /**
     * Returns the number of similar documents to return for each result
     *
     * @return int
     **/
    function getMltCount() {}

    /**
     * Returns all the fields to use for similarity
     *
     * @return array
     **/
    function getMltFields() {}

    /**
     * Returns the maximum number of query terms that will be included in any
     * generated query
     *
     * @return int
     **/
    function getMltMaxNumQueryTerms() {}

    /**
     * Returns the maximum number of tokens to parse in each document field
     * that is not stored with TermVector support
     *
     * @return int
     **/
    function getMltMaxNumTokens() {}

    /**
     * Returns the maximum word length above which words will be ignored
     *
     * @return int
     **/
    function getMltMaxWordLength() {}

    /**
     * Returns the treshold frequency at which words will be ignored which do
     * not occur in at least this many docs
     *
     * @return int
     **/
    function getMltMinDocFrequency() {}

    /**
     * Returns the frequency below which terms will be ignored in the source
     * document
     *
     * @return int
     **/
    function getMltMinTermFrequency() {}

    /**
     * Returns the minimum word length below which words will be ignored
     *
     * @return int
     **/
    function getMltMinWordLength() {}

    /**
     * Returns the query fields and their boosts
     *
     * @return array
     **/
    function getMltQueryFields() {}

    /**
     * Returns the main search query
     *
     * @return string
     **/
    function getQuery() {}

    /**
     * Returns the maximum number of documents from the complete result set
     * to return to the client for every request
     *
     * @return int
     **/
    function getRows() {}

    /**
     * Returns all the sort fields
     *
     * @return array
     **/
    function getSortFields() {}

    /**
     * Returns the offset in the complete result set for the queries where
     * the set of returned documents should begin.
     *
     * @return int
     **/
    function getStart() {}

    /**
     * Returns whether or not stats is enabled
     *
     * @return bool
     **/
    function getStats() {}

    /**
     * Returns all the stats facets that were set
     *
     * @return array
     **/
    function getStatsFacets() {}

    /**
     * Returns all the statistics fields
     *
     * @return array
     **/
    function getStatsFields() {}

    /**
     * Returns whether or not the TermsComponent is enabled
     *
     * @return bool
     **/
    function getTerms() {}

    /**
     * Returns the field from which the terms are retrieved
     *
     * @return string
     **/
    function getTermsField() {}

    /**
     * Returns whether or not to include the lower bound in the result set
     *
     * @return bool
     **/
    function getTermsIncludeLowerBound() {}

    /**
     * Returns whether or not to include the upper bound term in the result
     * set
     *
     * @return bool
     **/
    function getTermsIncludeUpperBound() {}

    /**
     * Returns the maximum number of terms Solr should return
     *
     * @return int
     **/
    function getTermsLimit() {}

    /**
     * Returns the term to start at
     *
     * @return string
     **/
    function getTermsLowerBound() {}

    /**
     * Returns the maximum document frequency
     *
     * @return int
     **/
    function getTermsMaxCount() {}

    /**
     * Returns the minimum document frequency to return in order to be
     * included
     *
     * @return int
     **/
    function getTermsMinCount() {}

    /**
     * Returns the prefix to which matching terms must be restricted. This
     * will restrict matches to only terms that start with the prefix
     *
     * @return string
     **/
    function getTermsPrefix() {}

    /**
     * Returns a boolean indicating whether or not to return the raw
     * characters of the indexed term, regardless of if it is human readable
     *
     * @return bool
     **/
    function getTermsReturnRaw() {}

    /**
     * SolrQuery::TERMS_SORT_INDEX indicates that the terms are returned by
     * index order. SolrQuery::TERMS_SORT_COUNT implies that the terms are
     * sorted by term frequency (highest count first)
     *
     * @return int
     **/
    function getTermsSort() {}

    /**
     * Returns the term to stop at
     *
     * @return string
     **/
    function getTermsUpperBound() {}

    /**
     * Returns the time in milliseconds allowed for the query to finish.
     *
     * @return int
     **/
    function getTimeAllowed() {}

    /**
     * The name of the field
     *
     * @param string
     * @return SolrQuery
     **/
    function removeFacetDateField($field) {}

    /**
     * Removes one of the facet.date.other parameters
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function removeFacetDateOther($value, $field_override) {}

    /**
     * Removes one of the facet.date parameters
     *
     * @param string
     * @return SolrQuery
     **/
    function removeFacetField($field) {}

    /**
     * Removes one of the facet.query parameters.
     *
     * @param string
     * @return SolrQuery
     **/
    function removeFacetQuery($value) {}

    /**
     * Removes a field from the list of fields
     *
     * @param string
     * @return SolrQuery
     **/
    function removeField($field) {}

    /**
     * Removes a filter query.
     *
     * @param string
     * @return SolrQuery
     **/
    function removeFilterQuery($fq) {}

    /**
     * Removes one of the fields used for highlighting.
     *
     * @param string
     * @return SolrQuery
     **/
    function removeHighlightField($field) {}

    /**
     * Removes one of the moreLikeThis fields.
     *
     * @param string
     * @return SolrQuery
     **/
    function removeMltField($field) {}

    /**
     * Removes one of the moreLikeThis query fields.
     *
     * @param string
     * @return SolrQuery
     **/
    function removeMltQueryField($queryField) {}

    /**
     * Removes one of the sort fields
     *
     * @param string
     * @return SolrQuery
     **/
    function removeSortField($field) {}

    /**
     * Removes one of the stats.facet parameters
     *
     * @param string
     * @return SolrQuery
     **/
    function removeStatsFacet($value) {}

    /**
     * Removes one of the stats.field parameters
     *
     * @param string
     * @return SolrQuery
     **/
    function removeStatsField($field) {}

    /**
     * If set to true, Solr places the name of the handle used in the
     * response to the client for debugging purposes.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setEchoHandler($flag) {}

    /**
     * Instructs Solr what kinds of Request parameters should be included in
     * the response for debugging purposes, legal values include:
     * 
     * 
     *
     * @param string
     * @return SolrQuery
     **/
    function setEchoParams($type) {}

    /**
     * Sets the explainOther common query parameter
     *
     * @param string
     * @return SolrQuery
     **/
    function setExplainOther($query) {}

    /**
     * Enables or disables faceting.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setFacet($flag) {}

    /**
     * Maps to facet.date.end
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setFacetDateEnd($value, $field_override) {}

    /**
     * Maps to facet.date.gap
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setFacetDateGap($value, $field_override) {}

    /**
     * Maps to facet.date.hardend
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setFacetDateHardEnd($value, $field_override) {}

    /**
     * Maps to facet.date.start
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setFacetDateStart($value, $field_override) {}

    /**
     * Sets the minimum document frequency used for determining term count
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setFacetEnumCacheMinDefaultFrequency($frequency, $field_override) {}

    /**
     * Maps to facet.limit. Sets the maximum number of constraint counts that
     * should be returned for the facet fields.
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setFacetLimit($limit, $field_override) {}

    /**
     * Specifies the type of algorithm to use when faceting a field. This
     * method accepts optional field override.
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setFacetMethod($method, $field_override) {}

    /**
     * Sets the minimum counts for facet fields that should be included in
     * the response
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setFacetMinCount($mincount, $field_override) {}

    /**
     * Used to indicate that in addition to the Term-based constraints of a
     * facet field, a count of all matching results which have no value for
     * the field should be computed
     *
     * @param bool
     * @param string
     * @return SolrQuery
     **/
    function setFacetMissing($flag, $field_override) {}

    /**
     * Sets the offset into the list of constraints to allow for pagination.
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setFacetOffset($offset, $field_override) {}

    /**
     * Specifies a string prefix with which to limits the terms on which to
     * facet.
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setFacetPrefix($prefix, $field_override) {}

    /**
     * Determines the ordering of the facet field constraints
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setFacetSort($facetSort, $field_override) {}

    /**
     * Setting it to enables highlighted snippets to be generated in the
     * query response.
     * 
     * Setting it to disables highlighting
     *
     * @param bool
     * @return SolrQuery
     **/
    function setHighlight($flag) {}

    /**
     * If a snippet cannot be generated because there were no matching terms,
     * one can specify a field to use as the backup or default summary
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setHighlightAlternateField($field, $field_override) {}

    /**
     * Specify a formatter for the highlight output.
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setHighlightFormatter($formatter, $field_override) {}

    /**
     * Specify a text snippet generator for highlighted text.
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setHighlightFragmenter($fragmenter, $field_override) {}

    /**
     * Sets the size, in characters, of fragments to consider for
     * highlighting. "0" indicates that the whole field value should be used
     * (no fragmenting).
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setHighlightFragsize($size, $field_override) {}

    /**
     * Use SpanScorer to highlight phrase terms only when they appear within
     * the query phrase in the document.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setHighlightHighlightMultiTerm($flag) {}

    /**
     * If SolrQuery::setHighlightAlternateField() was passed the value , this
     * parameter specifies the maximum number of characters of the field to
     * return
     * 
     * Any value less than or equal to 0 means unlimited.
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setHighlightMaxAlternateFieldLength($fieldLength, $field_override) {}

    /**
     * Specifies the number of characters into a document to look for
     * suitable snippets
     *
     * @param int
     * @return SolrQuery
     **/
    function setHighlightMaxAnalyzedChars($value) {}

    /**
     * Whether or not to collapse contiguous fragments into a single fragment
     *
     * @param bool
     * @param string
     * @return SolrQuery
     **/
    function setHighlightMergeContiguous($flag, $field_override) {}

    /**
     * Specify the maximum number of characters to analyze from a field when
     * using the regex fragmenter
     *
     * @param int
     * @return SolrQuery
     **/
    function setHighlightRegexMaxAnalyzedChars($maxAnalyzedChars) {}

    /**
     * Specifies the regular expression for fragmenting. This could be used
     * to extract sentences
     *
     * @param string
     * @return SolrQuery
     **/
    function setHighlightRegexPattern($value) {}

    /**
     * The factor by which the regex fragmenter can stray from the ideal
     * fragment size ( specfied by SolrQuery::setHighlightFragsize )to
     * accomodate the regular expression
     *
     * @param float
     * @return SolrQuery
     **/
    function setHighlightRegexSlop($factor) {}

    /**
     * If , then a field will only be highlighted if the query matched in
     * this particular field.
     * 
     * This will only work if SolrQuery::setHighlightUsePhraseHighlighter()
     * was set to
     *
     * @param bool
     * @return SolrQuery
     **/
    function setHighlightRequireFieldMatch($flag) {}

    /**
     * Sets the text which appears before a highlighted term
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setHighlightSimplePost($simplePost, $field_override) {}

    /**
     * Sets the text which appears before a highlighted term
     * 
     * 
     *
     * @param string
     * @param string
     * @return SolrQuery
     **/
    function setHighlightSimplePre($simplePre, $field_override) {}

    /**
     * Sets the maximum number of highlighted snippets to generate per field
     *
     * @param int
     * @param string
     * @return SolrQuery
     **/
    function setHighlightSnippets($value, $field_override) {}

    /**
     * Sets whether or not to use SpanScorer to highlight phrase terms only
     * when they appear within the query phrase in the document
     *
     * @param bool
     * @return SolrQuery
     **/
    function setHighlightUsePhraseHighlighter($flag) {}

    /**
     * Enables or disables moreLikeThis
     *
     * @param bool
     * @return SolrQuery
     **/
    function setMlt($flag) {}

    /**
     * Set if the query will be boosted by the interesting term relevance
     *
     * @param bool
     * @return SolrQuery
     **/
    function setMltBoost($flag) {}

    /**
     * Set the number of similar documents to return for each result
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltCount($count) {}

    /**
     * Sets the maximum number of query terms that will be included in any
     * generated query.
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltMaxNumQueryTerms($value) {}

    /**
     * Specifies the maximum number of tokens to parse in each example doc
     * field that is not stored with TermVector support.
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltMaxNumTokens($value) {}

    /**
     * Sets the maximum word length above which words will be ignored.
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltMaxWordLength($maxWordLength) {}

    /**
     * The frequency at which words will be ignored which do not occur in at
     * least this many docs.
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltMinDocFrequency($minDocFrequency) {}

    /**
     * Sets the frequency below which terms will be ignored in the source
     * docs
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltMinTermFrequency($minTermFrequency) {}

    /**
     * Sets the minimum word length below which words will be ignored.
     *
     * @param int
     * @return SolrQuery
     **/
    function setMltMinWordLength($minWordLength) {}

    /**
     * Exclude the header from the returned results.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setOmitHeader($flag) {}

    /**
     * Sets the search query.
     *
     * @param string
     * @return SolrQuery
     **/
    function setQuery($query) {}

    /**
     * Specifies the maximum number of rows to return in the result
     *
     * @param int
     * @return SolrQuery
     **/
    function setRows($rows) {}

    /**
     * Whether to show debug info
     *
     * @param bool
     * @return SolrQuery
     **/
    function setShowDebugInfo($flag) {}

    /**
     * Specifies the number of rows to skip. Useful in pagination of results.
     *
     * @param int
     * @return SolrQuery
     **/
    function setStart($start) {}

    /**
     * Enables or disables the Stats component.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setStats($flag) {}

    /**
     * Enables or disables the TermsComponent
     *
     * @param bool
     * @return SolrQuery
     **/
    function setTerms($flag) {}

    /**
     * Sets the name of the field to get the terms from
     *
     * @param string
     * @return SolrQuery
     **/
    function setTermsField($fieldname) {}

    /**
     * Include the lower bound term in the result set.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setTermsIncludeLowerBound($flag) {}

    /**
     * Include the upper bound term in the result set.
     *
     * @param bool
     * @return SolrQuery
     **/
    function setTermsIncludeUpperBound($flag) {}

    /**
     * Sets the maximum number of terms to return
     *
     * @param int
     * @return SolrQuery
     **/
    function setTermsLimit($limit) {}

    /**
     * Specifies the Term to start from
     *
     * @param string
     * @return SolrQuery
     **/
    function setTermsLowerBound($lowerBound) {}

    /**
     * Sets the maximum document frequency.
     *
     * @param int
     * @return SolrQuery
     **/
    function setTermsMaxCount($frequency) {}

    /**
     * Sets the minimum doc frequency to return in order to be included
     *
     * @param int
     * @return SolrQuery
     **/
    function setTermsMinCount($frequency) {}

    /**
     * Restrict matches to terms that start with the prefix
     *
     * @param string
     * @return SolrQuery
     **/
    function setTermsPrefix($prefix) {}

    /**
     * If true, return the raw characters of the indexed term, regardless of
     * if it is human readable
     *
     * @param bool
     * @return SolrQuery
     **/
    function setTermsReturnRaw($flag) {}

    /**
     * If SolrQuery::TERMS_SORT_COUNT, sorts the terms by the term frequency
     * (highest count first). If SolrQuery::TERMS_SORT_INDEX, returns the
     * terms in index order
     *
     * @param int
     * @return SolrQuery
     **/
    function setTermsSort($sortType) {}

    /**
     * Sets the term to stop at
     *
     * @param string
     * @return SolrQuery
     **/
    function setTermsUpperBound($upperBound) {}

    /**
     * The time allowed for a search to finish. This value only applies to
     * the search and not to requests in general. Time is in milliseconds.
     * Values less than or equal to zero implies no time restriction. Partial
     * results may be returned, if there are any.
     *
     * @param int
     * @return SolrQuery
     **/
    function setTimeAllowed($timeAllowed) {}

    /**
     * Constructor.
     *
     * @param string
     **/
    function __construct($q) {}

    /**
     * Destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrQueryResponse extends SolrResponse {
    /**
     * Constructor
     *
     **/
    function __construct() {}

    /**
     * Destructor.
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrResponse {
    /**
     * Returns the XML response as serialized PHP data
     *
     * @return string
     **/
    function getDigestedResponse() {}

    /**
     * Returns the HTTP status of the response.
     *
     * @return int
     **/
    function getHttpStatus() {}

    /**
     * Returns more details on the HTTP status.
     *
     * @return string
     **/
    function getHttpStatusMessage() {}

    /**
     * Returns the raw request sent to the Solr server.
     *
     * @return string
     **/
    function getRawRequest() {}

    /**
     * Returns the raw request headers sent to the Solr server.
     *
     * @return string
     **/
    function getRawRequestHeaders() {}

    /**
     * Returns the raw response from the server.
     *
     * @return string
     **/
    function getRawResponse() {}

    /**
     * Returns the raw response headers from the server.
     *
     * @return string
     **/
    function getRawResponseHeaders() {}

    /**
     * Returns the full URL the request was sent to.
     *
     * @return string
     **/
    function getRequestUrl() {}

    /**
     * Returns a SolrObject representing the XML response from the server.
     *
     * @return SolrObject
     **/
    function getResponse() {}

    /**
     * The method description goes here.
     *
     * @param int
     * @return bool
     **/
    function setParseMode($parser_mode) {}

    /**
     * Used to check if the request to the server was successful.
     *
     * @return bool
     **/
    function success() {}

}
class SolrUpdateResponse extends SolrResponse {
    /**
     * Constructor
     *
     **/
    function __construct() {}

    /**
     * Destructor
     *
     * @return void
     **/
    function __destruct() {}

}
class SolrUtils {
    /**
     * This method parses an response XML string from the Apache Solr server
     * into a SolrObject. It throws a SolrException if there was an error.
     *
     * @param string
     * @param int
     * @return SolrObject
     **/
    function digestXmlResponse($xmlresponse, $parse_mode) {}

    /**
     * Lucene supports escaping special characters that are part of the query
     * syntax.
     * 
     * The current list special characters are:
     * 
     * 
     * 
     * These characters are part of the query syntax and must be escaped
     *
     * @param string
     * @return string
     **/
    function escapeQueryChars($str) {}

    /**
     * Returns the current Solr version.
     *
     * @return string
     **/
    function getSolrVersion() {}

    /**
     * Prepares a phrase from an unescaped lucene string.
     *
     * @param string
     * @return string
     **/
    function queryPhrase($str) {}

}
class SphinxClient {
    /**
     * Adds query with the current settings to multi-query batch. This method
     * doesn't affect current settings (sorting, filtering, grouping etc.) in
     * any way.
     *
     * @param string
     * @param string
     * @param string
     * @return int
     **/
    function addQuery($query, $index, $comment) {}

    /**
     * Connects to searchd, requests it to generate excerpts (snippets) from
     * the given documents, and returns the results.
     *
     * @param array
     * @param string
     * @param string
     * @param array
     * @return array
     **/
    function buildExcerpts($docs, $index, $words, $opts) {}

    /**
     * Extracts keywords from query using tokenizer settings for the given
     * index, optionally with per-keyword occurrence statistics.
     *
     * @param string
     * @param string
     * @param bool
     * @return array
     **/
    function buildKeywords($query, $index, $hits) {}

    /**
     * Escapes characters that are treated as special operators by the query
     * language parser.
     *
     * @param string
     * @return string
     **/
    function escapeString($string) {}

    /**
     * Returns string with the last error message. If there were no errors
     * during the previous API call, empty string is returned. This method
     * doesn't reset the error message, so you can safely call it several
     * times.
     *
     * @return string
     **/
    function getLastError() {}

    /**
     * Returns last warning message. If there were no warnings during the
     * previous API call, empty string is returned. This method doesn't reset
     * the warning, so you can safely call it several times.
     *
     * @return string
     **/
    function getLastWarning() {}

    /**
     * Connects to searchd server, runs the given search query with the
     * current settings, obtains and returns the result set.
     *
     * @param string
     * @param string
     * @param string
     * @return array
     **/
    function query($query, $index, $comment) {}

    /**
     * Clears all currently set filters. This call is normally required when
     * using multi-queries. You might want to set different filters for
     * different queries in the batch. To do that, you should call
     * SphinxClient::resetFilters and add new filters using the respective
     * calls.
     *
     * @return void
     **/
    function resetFilters() {}

    /**
     * Clears all currently group-by settings, and disables group-by. This
     * call is normally required only when using multi-queries.
     *
     * @return void
     **/
    function resetGroupBy() {}

    /**
     * Connects to searchd, runs a batch of all queries added using , obtains
     * and returns the result sets.
     *
     * @return array
     **/
    function runQueries() {}

    /**
     * Controls the format of search results set arrays (whether matches
     * should be returned as an array or a hash). If array_result is (default
     * value), matches are returned as a hash with document IDs as keys, and
     * other information (weight, attributes) as values. If array_result is ,
     * matches are eturned as a plain array with complete per-match
     * information including document IDs.
     *
     * @param bool
     * @return bool
     **/
    function setArrayResult($array_result) {}

    /**
     * Sets connection timeout (in seconds) for searchd connection.
     *
     * @param float
     * @return bool
     **/
    function setConnectTimeout($timeout) {}

    /**
     * Binds per-field weights by name.
     * 
     * Match ranking can be affected by per-field weights. See Sphinx
     * documentation for an explanation on how phrase proximity ranking is
     * affected. This call lets you specify non-default weights for full-text
     * fields.
     * 
     * The weights must be positive 32-bit integers, so be careful not to hit
     * 32-bit integer maximum. The final weight is a 32-bit integer too.
     * Default weight value is 1. Unknown field names are silently ignored.
     *
     * @param array
     * @return bool
     **/
    function setFieldWeights($weights) {}

    /**
     * Adds new integer values set filter to the existing list of filters.
     *
     * @param string
     * @param array
     * @param bool
     * @return bool
     **/
    function setFilter($attribute, $values, $exclude) {}

    /**
     * Adds new float range filter to the existing list of filters. Only
     * those documents which have attribute value stored in the index between
     * min and max (including values that are exactly equal to min or max)
     * will be matched (or rejected, if exclude is ).
     *
     * @param string
     * @param float
     * @param float
     * @param bool
     * @return bool
     **/
    function setFilterFloatRange($attribute, $min, $max, $exclude) {}

    /**
     * Adds new integer range filter to the existing list of filters. Only
     * those documents which have attribute value stored in the index between
     * min and max (including values that are exactly equal to min or max)
     * will be matched (or rejected, if exclude is ).
     *
     * @param string
     * @param int
     * @param int
     * @param bool
     * @return bool
     **/
    function setFilterRange($attribute, $min, $max, $exclude) {}

    /**
     * Sets anchor point for a geosphere distance (geodistance) calculations
     * and enables them.
     * 
     * Once an anchor point is set, you can use magic "@geodist" attribute
     * name in your filters and/or sorting expressions.
     *
     * @param string
     * @param string
     * @param float
     * @param float
     * @return bool
     **/
    function setGeoAnchor($attrlat, $attrlong, $latitude, $longitude) {}

    /**
     * Sets grouping attribute, function, and group sorting mode, and enables
     * grouping.
     * 
     * Grouping feature is very similar to GROUP BY clause in SQL. Results
     * produced by this function call are going to be the same as produced by
     * the following pseudo code: SELECT ... GROUP BY $func($attribute) ORDER
     * BY $groupsort.
     *
     * @param string
     * @param int
     * @param string
     * @return bool
     **/
    function setGroupBy($attribute, $func, $groupsort) {}

    /**
     * Sets attribute name for per-group distinct values count calculations.
     * Only available for grouping queries. For each group, all values of
     * attribute will be stored, then the amount of distinct values will be
     * calculated and returned to the client. This feature is similar to
     * COUNT(DISTINCT) clause in SQL.
     *
     * @param string
     * @return bool
     **/
    function setGroupDistinct($attribute) {}

    /**
     * Sets an accepted range of document IDs. Default range is from 0 to 0,
     * i.e. no limit. Only those records that have document ID between min
     * and max (including IDs exactly equal to min or max) will be matched.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setIDRange($min, $max) {}

    /**
     * Sets per-index weights and enables weighted summing of match weights
     * across different indexes.
     *
     * @param array
     * @return bool
     **/
    function setIndexWeights($weights) {}

    /**
     * Sets offset into server-side result set and amount of matches to
     * return to client starting from that offset (limit). Can additionally
     * control maximum server-side result set size for current query
     * (max_matches) and the threshold amount of matches to stop searching at
     * (cutoff).
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function setLimits($offset, $limit, $max_matches, $cutoff) {}

    /**
     * Sets full-text query matching mode. mode is one of the constants
     * listed below.
     * 
     * Match modes
     * 
     * Constant Description
     * 
     * SPH_MATCH_ALL Match all query words (default mode).
     * 
     * SPH_MATCH_ANY Match any of query words.
     * 
     * SPH_MATCH_PHRASE Match query as a phrase, requiring perfect match.
     * 
     * SPH_MATCH_BOOLEAN Match query as a boolean expression.
     * 
     * SPH_MATCH_EXTENDED Match query as an expression in Sphinx internal
     * query language.
     * 
     * SPH_MATCH_FULLSCAN Enables fullscan.
     * 
     * SPH_MATCH_EXTENDED2 The same as SPH_MATCH_EXTENDED plus ranking and
     * quorum searching support.
     *
     * @param int
     * @return bool
     **/
    function setMatchMode($mode) {}

    /**
     * Sets maximum search query time, in milliseconds. qtime must be a
     * non-negative integer. Default value is 0, i.e. no limit.
     *
     * @param int
     * @return bool
     **/
    function setMaxQueryTime($qtime) {}

    /**
     * Sets ranking mode. Only available in SPH_MATCH_EXTENDED2 matching
     * mode.
     * 
     * Ranking modes
     * 
     * Constant Description
     * 
     * SPH_RANK_PROXIMITY_BM25 Default ranking mode which uses both
     * proximity and BM25 ranking.
     * 
     * SPH_RANK_BM25 Statistical ranking mode which uses BM25 ranking only
     * (similar to most of other full-text engines). This mode is faster, but
     * may result in worse quality on queries which contain more than 1
     * keyword.
     * 
     * SPH_RANK_NONE Disables ranking. This mode is the fastest. It is
     * essentially equivalent to boolean searching, a weight of 1 is assigned
     * to all matches.
     *
     * @param int
     * @return bool
     **/
    function setRankingMode($ranker) {}

    /**
     * Sets distributed retry count and delay.
     * 
     * On temporary failures searchd will attempt up to count retries per
     * agent. delay is the delay between the retries, in milliseconds.
     * Retries are disabled by default. Note that this call will not make the
     * API itself retry on temporary failure; it only tells searchd to do so.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function setRetries($count, $delay) {}

    /**
     * Sets searchd host name and TCP port. All subsequent requests will use
     * the new host and port settings. Default host and port are 'localhost'
     * and 3312, respectively.
     *
     * @param string
     * @param int
     * @return bool
     **/
    function setServer($server, $port) {}

    /**
     * Sets matches sorting mode. See available modes below.
     * 
     * Sorting modes
     * 
     * Constant Description
     * 
     * SPH_SORT_RELEVANCE Sort by relevance in descending order (best
     * matches first).
     * 
     * SPH_SORT_ATTR_DESC Sort by an attribute in descending order (bigger
     * attribute values first).
     * 
     * SPH_SORT_ATTR_ASC Sort by an attribute in ascending order (smaller
     * attribute values first).
     * 
     * SPH_SORT_TIME_SEGMENTS Sort by time segments (last
     * hour/day/week/month) in descending order, and then by relevance in
     * descending order.
     * 
     * SPH_SORT_EXTENDED Sort by SQL-like combination of columns in ASC/DESC
     * order.
     * 
     * SPH_SORT_EXPR Sort by an arithmetic expression.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function setSortMode($mode, $sortby) {}

    /**
     * Instantly updates given attribute values in given documents.
     *
     * @param string
     * @param array
     * @param array
     * @return int
     **/
    function updateAttributes($index, $attributes, $values) {}

    /**
     * Creates a new SphinxClient object.
     *
     **/
    function __construct() {}

}
class SplBool {
}
class SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
    /**
     * @return mixed
     **/
    function bottom() {}

    /**
     * @return int
     **/
    function count() {}

    /**
     * Get the current doubly linked list node.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * @return int
     **/
    function getIteratorMode() {}

    /**
     * @return bool
     **/
    function isEmpty() {}

    /**
     * This function returns the current node index
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Move the iterator to the next node.
     *
     * @return void
     **/
    function next() {}

    /**
     * @param mixed
     * @return bool
     **/
    function offsetExists($index) {}

    /**
     * @param mixed
     * @return mixed
     **/
    function offsetGet($index) {}

    /**
     * Sets the value at the specified index to newval.
     *
     * @param mixed
     * @param mixed
     * @return void
     **/
    function offsetSet($index, $newval) {}

    /**
     * Unsets the value at the specified index.
     *
     * @param mixed
     * @return void
     **/
    function offsetUnset($index) {}

    /**
     * @return mixed
     **/
    function pop() {}

    /**
     * Move the iterator to the previous node.
     *
     * @return void
     **/
    function prev() {}

    /**
     * Pushes value at the end of the doubly linked list.
     *
     * @param mixed
     * @return void
     **/
    function push($value) {}

    /**
     * This rewinds the iterator to the beginning.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * @param int
     * @return void
     **/
    function setIteratorMode($mode) {}

    /**
     * @return mixed
     **/
    function shift() {}

    /**
     * @return mixed
     **/
    function top() {}

    /**
     * Prepends value at the beginning of the doubly linked list.
     *
     * @param mixed
     * @return void
     **/
    function unshift($value) {}

    /**
     * Checks if the doubly linked list contains any more nodes.
     *
     * @return bool
     **/
    function valid() {}

}
class SplEnum {
}
class SplFileInfo {
    /**
     * Gets the last access time for the file.
     *
     * @return int
     **/
    function getATime() {}

    /**
     * This method returns the base name of the file, directory, or link
     * without path info.
     *
     * @param string
     * @return string
     **/
    function getBasename($suffix) {}

    /**
     * Returns the inode change time for the file. The time returned is a
     * Unix timestamp.
     *
     * @return int
     **/
    function getCTime() {}

    /**
     * This method gets an SplFileInfo object for the referenced file.
     *
     * @param string
     * @return SplFileInfo
     **/
    function getFileInfo($class_name) {}

    /**
     * Gets the filename without any path information.
     *
     * @return string
     **/
    function getFilename() {}

    /**
     * Gets the file group. The group ID is returned in numerical format.
     *
     * @return int
     **/
    function getGroup() {}

    /**
     * Gets the inode number for the filesystem object.
     *
     * @return int
     **/
    function getInode() {}

    /**
     * Gets the target of a filesystem link.
     *
     * @return string
     **/
    function getLinkTarget() {}

    /**
     * Returns the time when the contents of the file were changed. The time
     * returned is a Unix timestamp.
     *
     * @return int
     **/
    function getMTime() {}

    /**
     * Gets the file owner. The owner ID is returned in numerical format.
     *
     * @return int
     **/
    function getOwner() {}

    /**
     * Returns the path to the file, omitting the filename and any trailing
     * slash.
     *
     * @return string
     **/
    function getPath() {}

    /**
     * Gets an SplFileInfo object for the parent of the current file.
     *
     * @param string
     * @return SplFileInfo
     **/
    function getPathInfo($class_name) {}

    /**
     * Returns the path to the file.
     *
     * @return string
     **/
    function getPathname() {}

    /**
     * Gets the file permissions for the file.
     *
     * @return int
     **/
    function getPerms() {}

    /**
     * This method expands all symbolic links, resolves relative references
     * and returns the real path to the file.
     *
     * @return string
     **/
    function getRealPath() {}

    /**
     * Returns the filesize in bytes for the file referenced.
     *
     * @return int
     **/
    function getSize() {}

    /**
     * Returns the type of the file referenced.
     *
     * @return string
     **/
    function getType() {}

    /**
     * This method can be used to determine if the file is a directory.
     *
     * @return bool
     **/
    function isDir() {}

    /**
     * Checks if the file is executable.
     *
     * @return bool
     **/
    function isExecutable() {}

    /**
     * Checks if the file referenced by this SplFileInfo object exists and is
     * a regular file.
     *
     * @return bool
     **/
    function isFile() {}

    /**
     * Use this method to check if the file referenced by the SplFileInfo
     * object is a link.
     *
     * @return bool
     **/
    function isLink() {}

    /**
     * Check if the file is readable.
     *
     * @return bool
     **/
    function isReadable() {}

    /**
     * Checks if the current entry is writable.
     *
     * @return bool
     **/
    function isWritable() {}

    /**
     * Creates an SplFileObject object of the file. This is useful because
     * SplFileObject contains additional methods for manipulating the file
     * whereas SplFileInfo is only useful for gaining information, like
     * whether the file is writable.
     *
     * @param string
     * @param bool
     * @param resource
     * @return SplFileObject
     **/
    function openFile($open_mode, $use_include_path, $context) {}

    /**
     * Set the class name which SplFileInfo will use to open files with when
     * openFile() is called. The class name passed to this method must be
     * derived from SplFileObject.
     *
     * @param string
     * @return void
     **/
    function setFileClass($class_name) {}

    /**
     * Use this method to set a custom class which will be used when
     * getFileInfo and getPathInfo are called. The class name passed to this
     * method must be derived from SplFileInfo.
     *
     * @param string
     * @return void
     **/
    function setInfoClass($class_name) {}

    /**
     * Creates a new SplFileInfo object for the file_name specified. The file
     * does not need to exist, or be readable.
     *
     * @param string
     **/
    function __construct($file_name) {}

    /**
     * This method will return the file name of the referenced file.
     *
     * @return void
     **/
    function __toString() {}

}
class SplFileObject extends SplFileInfo implements RecursiveIterator, Traversable, Iterator, SeekableIterator {
    /**
     * Retrieves the current line of the file.
     *
     * @return string|array
     **/
    function current() {}

    /**
     * Determine whether the end of file has been reached
     *
     * @return boolean
     **/
    function eof() {}

    /**
     * Forces a write of all buffered output to the file.
     *
     * @return boolean
     **/
    function fflush() {}

    /**
     * Gets a character from the file.
     *
     * @return string
     **/
    function fgetc() {}

    /**
     * Gets a line from the file which is in CSV format and returns an array
     * containing the fields read.
     *
     * @param string
     * @param string
     * @param string
     * @return array
     **/
    function fgetcsv($delimiter, $enclosure, $escape) {}

    /**
     * Gets a line from the file.
     *
     * @return string
     **/
    function fgets() {}

    /**
     * Identical to SplFileObject::fgets, except that SplFileObject::fgetss
     * attempts to strip any HTML and PHP tags from the text it reads.
     *
     * @param string
     * @return string
     **/
    function fgetss($allowable_tags) {}

    /**
     * Locks or unlocks the file in the same portable way as flock.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function flock($operation, &$wouldblock) {}

    /**
     * Reads to EOF on the given file pointer from the current position and
     * writes the results to the output buffer.
     * 
     * You may need to call SplFileObject::rewind to reset the file pointer
     * to the beginning of the file if you have already written data to the
     * file.
     *
     * @return int
     **/
    function fpassthru() {}

    /**
     * Reads a line from the file and interprets it according to the
     * specified format, which is described in the documentation for sprintf.
     * 
     * Any whitespace in the format string matches any whitespace in the line
     * from the file. This means that even a tab \t in the format string can
     * match a single space character in the input stream.
     *
     * @param string
     * @return mixed
     **/
    function fscanf($format) {}

    /**
     * Seek to a position in the file measured in bytes from the beginning of
     * the file, obtained by adding offset to the position specified by
     * whence.
     *
     * @param int
     * @param int
     * @return int
     **/
    function fseek($offset, $whence) {}

    /**
     * Gathers the statistics of the file. Behaves identically to fstat.
     *
     * @return array
     **/
    function fstat() {}

    /**
     * Returns the position of the file pointer which represents the current
     * offset in the file stream.
     *
     * @return int
     **/
    function ftell() {}

    /**
     * Truncates the file to size bytes.
     *
     * @param int
     * @return bool
     **/
    function ftruncate($size) {}

    /**
     * Writes the contents of string to the file
     *
     * @param string
     * @param int
     * @return int
     **/
    function fwrite($str, $length) {}

    /**
     * An SplFileObject does not have children so this method returns .
     *
     * @return void
     **/
    function getChildren() {}

    /**
     * Gets the delimiter and enclosure character used for parsing CSV
     * fields.
     *
     * @return array
     **/
    function getCsvControl() {}

    /**
     * Gets the flags set for an instance of SplFileObject as an integer.
     *
     * @return int
     **/
    function getFlags() {}

    /**
     * Gets the maximum line length as set by SplFileObject::setMaxLineLen.
     *
     * @return int
     **/
    function getMaxLineLen() {}

    /**
     * An SplFileObject does not have children so this method always return .
     *
     * @return bool
     **/
    function hasChildren() {}

    /**
     * Gets the current line number.
     *
     * @return int
     **/
    function key() {}

    /**
     * Moves ahead to the next line in the file.
     *
     * @return void
     **/
    function next() {}

    /**
     * Rewinds the file back to the first line.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Seek to specified line in the file.
     *
     * @param int
     * @return void
     **/
    function seek($line_pos) {}

    /**
     * Sets the delimiter and enclosure character for parsing CSV fields.
     *
     * @param string
     * @param string
     * @param string
     * @return void
     **/
    function setCsvControl($delimiter, $enclosure, $escape) {}

    /**
     * Sets the flags to be used by the SplFileObject.
     *
     * @param int
     * @return void
     **/
    function setFlags($flags) {}

    /**
     * Sets the maximum length of a line to be read.
     *
     * @param int
     * @return void
     **/
    function setMaxLineLen($max_len) {}

    /**
     * Check whether EOF has been reached.
     *
     * @return bool
     **/
    function valid() {}

    /**
     * Construct a new file object.
     *
     * @param string
     * @param string
     * @param bool
     * @param resource
     **/
    function __construct($filename, $open_mode, $use_include_path, $context) {}

}
class SplFixedArray implements Iterator, ArrayAccess, Countable {
    /**
     * Returns the size of the array.
     *
     * @return int
     **/
    function count() {}

    /**
     * Get the current array element.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * Import the PHP array array in a new SplFixedArray instance
     *
     * @param array
     * @param boolean
     * @return SplFixedArray
     **/
    function fromArray($array, $save_indexes) {}

    /**
     * Gets the size of the array.
     *
     * @return int
     **/
    function getSize() {}

    /**
     * Returns the current array index.
     *
     * @return int
     **/
    function key() {}

    /**
     * Move the iterator to the next array entry.
     *
     * @return void
     **/
    function next() {}

    /**
     * Checks whether the requested index index exists.
     *
     * @param int
     * @return bool
     **/
    function offsetExists($index) {}

    /**
     * Returns the value at the index index.
     *
     * @param int
     * @return mixed
     **/
    function offsetGet($index) {}

    /**
     * Sets the value at the specified index to newval.
     *
     * @param int
     * @param mixed
     * @return void
     **/
    function offsetSet($index, $newval) {}

    /**
     * Unsets the value at the specified index.
     *
     * @param int
     * @return void
     **/
    function offsetUnset($index) {}

    /**
     * Rewinds the iterator to the beginning.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Change the size of an array to the new size of size.
     *
     * @param int
     * @return int
     **/
    function setSize($size) {}

    /**
     * Returns a PHP array from the fixed array.
     *
     * @return array
     **/
    function toArray() {}

    /**
     * Checks if the array contains any more elements.
     *
     * @return bool
     **/
    function valid() {}

}
class SplFloat {
}
class SplHeap implements Iterator, Countable {
    /**
     * Compare value1 with value2.
     *
     * @param mixed
     * @param mixed
     * @return int
     **/
    function compare($value1, $value2) {}

    /**
     * @return int
     **/
    function count() {}

    /**
     * Get the current datastructure node.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * @return mixed
     **/
    function extract() {}

    /**
     * Insert value in the heap.
     *
     * @param mixed
     * @return void
     **/
    function insert($value) {}

    /**
     * @return bool
     **/
    function isEmpty() {}

    /**
     * This function returns the current node index
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Extracts the top node from the heap.
     *
     * @return void
     **/
    function next() {}

    /**
     * @return void
     **/
    function recoverFromCorruption() {}

    /**
     * This rewinds the iterator to the beginning. This is a no-op for heaps
     * as the iterator is virtual and in fact never moves from the top of the
     * heap.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * @return mixed
     **/
    function top() {}

    /**
     * Checks if the heap contains any more nodes.
     *
     * @return bool
     **/
    function valid() {}

}
class SplInt {
}
class SplMaxHeap extends SplHeap implements Iterator, Countable {
    /**
     * Compare value1 with value2.
     *
     * @param mixed
     * @param mixed
     * @return void
     **/
    function compare($value1, $value2) {}

}
class SplMinHeap extends SplHeap implements Iterator, Countable {
    /**
     * Compare value1 with value2.
     *
     * @param mixed
     * @param mixed
     * @return void
     **/
    function compare($value1, $value2) {}

}
class SplObjectStorage implements Countable, Iterator, Traversable, Serializable, ArrayAccess {
    /**
     * Adds all objects-data pairs from a different storage in the current
     * storage.
     *
     * @param SplObjectStorage
     * @return void
     **/
    function addAll($storage) {}

    /**
     * Adds an object inside the storage, and optionaly associate it to some
     * data.
     *
     * @param object
     * @param mixed
     * @return void
     **/
    function attach($object, $data) {}

    /**
     * Checks if the storage contains the object provided.
     *
     * @param object
     * @return boolean
     **/
    function contains($object) {}

    /**
     * Counts the number of objects in the storage.
     *
     * @return int
     **/
    function count() {}

    /**
     * Returns the current storage entry.
     *
     * @return object
     **/
    function current() {}

    /**
     * Removes the object from the storage.
     *
     * @param object
     * @return void
     **/
    function detach($object) {}

    /**
     * Returns the data, or info, associated with the object pointed by the
     * current iterator position.
     *
     * @return mixed
     **/
    function getInfo() {}

    /**
     * Returns the index at which the iterator currently is.
     *
     * @return int
     **/
    function key() {}

    /**
     * Moves the iterator to the next object in the storage.
     *
     * @return void
     **/
    function next() {}

    /**
     * Checks whether an object exists in the storage.
     *
     * @param object
     * @return boolean
     **/
    function offsetExists($object) {}

    /**
     * Returns the data associated with an object in the storage.
     *
     * @param object
     * @return mixed
     **/
    function offsetGet($object) {}

    /**
     * Associate data to an object in the storage.
     *
     * @param object
     * @param mixed
     * @return void
     **/
    function offsetSet($object, $info) {}

    /**
     * Removes an object from the storage.
     *
     * @param object
     * @return void
     **/
    function offsetUnset($object) {}

    /**
     * Removes objects contained in another storage from the current storage.
     *
     * @param SplObjectStorage
     * @return void
     **/
    function removeAll($storage) {}

    /**
     * Rewind the iterator to the first storage element.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * Returns a string representation of the storage.
     *
     * @return string
     **/
    function serialize() {}

    /**
     * Associates data, or info, with the object currently pointed to by the
     * iterator.
     *
     * @param mixed
     * @return void
     **/
    function setInfo($data) {}

    /**
     * Unserializes storage entries and attach them to the current storage.
     *
     * @param string
     * @return void
     **/
    function unserialize($serialized) {}

    /**
     * Returns if the current iterator entry is valid.
     *
     * @return boolean
     **/
    function valid() {}

}
class SplObserver {
    /**
     * This method is called when any SplSubject to which the observer is
     * attached calls SplSubject::notify.
     *
     * @param SplSubject
     * @return void
     **/
    function update($subject) {}

}
class SplPriorityQueue implements Iterator, Countable {
    /**
     * Compare priority1 with priority2.
     *
     * @param mixed
     * @param mixed
     * @return void
     **/
    function compare($priority1, $priority2) {}

    /**
     * @return int
     **/
    function count() {}

    /**
     * Get the current datastructure node.
     *
     * @return mixed
     **/
    function current() {}

    /**
     * @return mixed
     **/
    function extract() {}

    /**
     * Insert value with the priority priority in the queue.
     *
     * @param mixed
     * @param mixed
     * @return void
     **/
    function insert($value, $priority) {}

    /**
     * @return bool
     **/
    function isEmpty() {}

    /**
     * This function returns the current node index
     *
     * @return mixed
     **/
    function key() {}

    /**
     * Extracts the top node from the queue.
     *
     * @return void
     **/
    function next() {}

    /**
     * @return void
     **/
    function recoverFromCorruption() {}

    /**
     * This rewinds the iterator to the beginning. This is a no-op for heaps
     * as the iterator is virtual and in fact never moves from the top of the
     * heap.
     *
     * @return void
     **/
    function rewind() {}

    /**
     * @param int
     * @return void
     **/
    function setExtractFlags($flags) {}

    /**
     * @return mixed
     **/
    function top() {}

    /**
     * Checks if the queue contains any more nodes.
     *
     * @return bool
     **/
    function valid() {}

}
class SplQueue extends SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
    /**
     * Dequeues value from the top of of the queue.
     *
     * @return mixed
     **/
    function dequeue() {}

    /**
     * Enqueues value at the end of the queue.
     *
     * @param mixed
     * @return void
     **/
    function enqueue($value) {}

    /**
     * @param int
     * @return void
     **/
    function setIteratorMode($mode) {}

}
class SplStack extends SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
    /**
     * @param int
     * @return void
     **/
    function setIteratorMode($mode) {}

}
class SplString {
}
class SplSubject {
    /**
     * Attaches an SplObserver so that it can be notified of updates.
     *
     * @param SplObserver
     * @return void
     **/
    function attach($observer) {}

    /**
     * Detaches an observer from the subject to no longer notify it of
     * updates.
     *
     * @param SplObserver
     * @return void
     **/
    function detach($observer) {}

    /**
     * Notifies all attached observers.
     *
     * @return void
     **/
    function notify() {}

}
class SplTempFileObject extends SplFileObject implements SeekableIterator, Iterator, Traversable, RecursiveIterator {
    /**
     * Construct a new temporary file object.
     *
     * @param integer
     **/
    function __construct($max_memory) {}

}
class SQLite3 {
    /**
     * Returns the number of database rows that were changed (or inserted or
     * deleted) by the most recent SQL statement.
     *
     * @return int
     **/
    function changes() {}

    /**
     * Closes the database connection.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Registers a PHP function or user-defined function for use as an SQL
     * aggregate function for use within SQL statements.
     *
     * @param string
     * @param mixed
     * @param mixed
     * @param int
     * @return bool
     **/
    function createAggregate($name, $step_callback, $final_callback, $argument_count) {}

    /**
     * Registers a PHP function or user-defined function for use as an SQL
     * scalar function for use within SQL statements.
     *
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function createFunction($name, $callback, $argument_count) {}

    /**
     * Returns a string that has been properly escaped for safe inclusion in
     * an SQL statement.
     *
     * @param string
     * @return string
     **/
    function escapeString($value) {}

    /**
     * Executes a result-less query against a given database.
     *
     * @param string
     * @return bool
     **/
    function exec($query) {}

    /**
     * Returns the numeric result code of the most recent failed SQLite
     * request.
     *
     * @return int
     **/
    function lastErrorCode() {}

    /**
     * Returns English text describing the most recent failed SQLite request.
     *
     * @return string
     **/
    function lastErrorMsg() {}

    /**
     * Returns the row ID of the most recent INSERT into the database.
     *
     * @return int
     **/
    function lastInsertRowID() {}

    /**
     * Attempts to load an SQLite extension library.
     *
     * @param string
     * @return bool
     **/
    function loadExtension($shared_library) {}

    /**
     * Opens an SQLite 3 Database. If the build includes encryption, then it
     * will attempt to use the key.
     *
     * @param string
     * @param int
     * @param string
     * @return bool
     **/
    function open($filename, $flags, $encryption_key) {}

    /**
     * Prepares an SQL statement for execution and returns an SQLite3Stmt
     * object.
     *
     * @param string
     * @return SQLite3Stmt
     **/
    function prepare($query) {}

    /**
     * Executes an SQL query, returning an SQLite3Result object if the query
     * returns results.
     *
     * @param string
     * @return SQLite3Result
     **/
    function query($query) {}

    /**
     * Executes a query and returns a single result.
     *
     * @param string
     * @param bool
     * @return mixed
     **/
    function querySingle($query, $entire_row) {}

    /**
     * Returns the SQLite3 library version as a string constant and as a
     * number.
     *
     * @return array
     **/
    function version() {}

    /**
     * Instantiates an SQLite3 object and opens a connection to an SQLite 3
     * database. If the build includes encryption, then it will attempt to
     * use the key.
     *
     * @param string
     * @param int
     * @param string
     **/
    function __construct($filename, $flags, $encryption_key) {}

}
class SQLite3Result {
    /**
     * Returns the name of the column specified by the column_number.
     *
     * @param int
     * @return string
     **/
    function columnName($column_number) {}

    /**
     * Returns the type of the column identified by column_number.
     *
     * @param int
     * @return int
     **/
    function columnType($column_number) {}

    /**
     * Fetches a result row as an associative or numerically indexed array or
     * both. By default, fetches as both.
     *
     * @param int
     * @return array
     **/
    function fetchArray($mode) {}

    /**
     * Closes the result set.
     *
     * @return bool
     **/
    function finalize() {}

    /**
     * Returns the number of columns in the result set.
     *
     * @return int
     **/
    function numColumns() {}

    /**
     * Resets the result set back to the first row.
     *
     * @return bool
     **/
    function reset() {}

}
class SQLite3Stmt {
    /**
     * Binds a parameter to a statement variable.
     *
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function bindParam($sql_param, &$param, $type) {}

    /**
     * Binds the value of a parameter to a statement variable.
     *
     * @param string
     * @param mixed
     * @param int
     * @return bool
     **/
    function bindValue($sql_param, $value, $type) {}

    /**
     * Clears all current bound parameters.
     *
     * @return bool
     **/
    function clear() {}

    /**
     * Closes the prepared statement.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Executes a prepared statement and returns a result set object.
     *
     * @return SQLite3Result
     **/
    function execute() {}

    /**
     * Returns the number of parameters within the prepared statement.
     *
     * @return int
     **/
    function paramCount() {}

    /**
     * Resets the prepared statement to its state prior to execution. All
     * bindings remain intact after reset.
     *
     * @return bool
     **/
    function reset() {}

}
class SQLiteDatabase {
    /**
     * sqlite_array_query executes the given query and returns an array of
     * the entire result set. It is similar to calling sqlite_query and then
     * sqlite_fetch_array for each row in the result set. sqlite_array_query
     * is significantly faster than the aforementioned.
     *
     * @param string
     * @param int
     * @param bool
     * @return array
     **/
    function arrayQuery($query, $result_type, $decode_binary) {}

    /**
     * Set the maximum time, in milliseconds, that SQLite will wait for a
     * dbhandle to become ready for use.
     *
     * @param int
     * @return void
     **/
    function busyTimeout($milliseconds) {}

    /**
     * Returns the numbers of rows that were changed by the most recent SQL
     * statement executed against the dbhandle database handle.
     *
     * @return int
     **/
    function changes() {}

    /**
     * sqlite_create_aggregate is similar to sqlite_create_function except
     * that it registers functions that can be used to calculate a result
     * aggregated across all the rows of a query.
     * 
     * The key difference between this function and sqlite_create_function is
     * that two functions are required to manage the aggregate; step_func is
     * called for each row of the result set. Your PHP function should
     * accumulate the result and store it into the aggregation context. Once
     * all the rows have been processed, finalize_func will be called and it
     * should then take the data from the aggregation context and return the
     * result. Callback functions should return a type understood by SQLite
     * (i.e. scalar type).
     *
     * @param string
     * @param callback
     * @param callback
     * @param int
     * @return void
     **/
    function createAggregate($function_name, $step_func, $finalize_func, $num_args) {}

    /**
     * sqlite_create_function allows you to register a PHP function with
     * SQLite as an UDF (User Defined Function), so that it can be called
     * from within your SQL statements.
     * 
     * The UDF can be used in any SQL statement that can call functions, such
     * as SELECT and UPDATE statements and also in triggers.
     *
     * @param string
     * @param callback
     * @param int
     * @return void
     **/
    function createFunction($function_name, $callback, $num_args) {}

    /**
     * sqlite_fetch_column_types returns an array of column data types from
     * the specified table_name table.
     *
     * @param string
     * @param int
     * @return array
     **/
    function fetchColumnTypes($table_name, $result_type) {}

    /**
     * Returns the error code from the last operation performed on dbhandle
     * (the database handle), or 0 when no error occurred. A human readable
     * description of the error code can be retrieved using
     * sqlite_error_string.
     *
     * @return int
     **/
    function lastError() {}

    /**
     * Returns the rowid of the row that was most recently inserted into the
     * database dbhandle, if it was created as an auto-increment field.
     *
     * @return int
     **/
    function lastInsertRowid() {}

    /**
     * Executes an SQL statement given by the query against a given database
     * handle.
     *
     * @param string
     * @param int
     * @param string
     * @return SQLiteResult
     **/
    function query($query, $result_type, &$error_msg) {}

    /**
     * Executes an SQL statement given by the query against a given database
     * handle (specified by the dbhandle parameter).
     *
     * @param string
     * @param string
     * @return bool
     **/
    function queryExec($query, &$error_msg) {}

    /**
     * @param string
     * @param bool
     * @param bool
     * @return array
     **/
    function singleQuery($query, $first_row_only, $decode_binary) {}

    /**
     * sqlite_unbuffered_query is identical to sqlite_query except that the
     * result that is returned is a sequential forward-only result set that
     * can only be used to read each row, one after the other.
     * 
     * This function is ideal for generating things such as HTML tables where
     * you only need to process one row at a time and don't need to randomly
     * access the row data.
     *
     * @param string
     * @param int
     * @param string
     * @return SQLiteUnbuffered
     **/
    function unbufferedQuery($query, $result_type, &$error_msg) {}

}
class SQLiteResult {
    /**
     * Fetches the value of a column named index_or_name (if it is a string),
     * or of the ordinal column numbered index_or_name (if it is an integer)
     * from the current row of the query result handle result.
     *
     * @param mixed
     * @param bool
     * @return mixed
     **/
    function column($index_or_name, $decode_binary) {}

    /**
     * sqlite_current is identical to sqlite_fetch_array except that it does
     * not advance to the next row prior to returning the data; it returns
     * the data from the current position only.
     *
     * @param int
     * @param bool
     * @return array
     **/
    function current($result_type, $decode_binary) {}

    /**
     * Fetches the next row from the given result handle. If there are no
     * more rows, returns , otherwise returns an associative array
     * representing the row data.
     *
     * @param int
     * @param bool
     * @return array
     **/
    function fetch($result_type, $decode_binary) {}

    /**
     * sqlite_fetch_all returns an array of the entire result set from the
     * result resource. It is similar to calling sqlite_query (or
     * sqlite_unbuffered_query) and then sqlite_fetch_array for each row in
     * the result set.
     *
     * @param int
     * @param bool
     * @return array
     **/
    function fetchAll($result_type, $decode_binary) {}

    /**
     * @param string
     * @param array
     * @param bool
     * @return object
     **/
    function fetchObject($class_name, $ctor_params, $decode_binary) {}

    /**
     * sqlite_fetch_single is identical to sqlite_fetch_array except that it
     * returns the value of the first column of the rowset.
     * 
     * This is the most optimal way to retrieve data when you are only
     * interested in the values from a single column of data.
     *
     * @param bool
     * @return string
     **/
    function fetchSingle($decode_binary) {}

    /**
     * Given the ordinal column number, field_index, sqlite_field_name
     * returns the name of that field in the result set result.
     *
     * @param int
     * @return string
     **/
    function fieldName($field_index) {}

    /**
     * Find whether there are more previous rows from the given result
     * handle.
     *
     * @return bool
     **/
    function hasPrev() {}

    /**
     * sqlite_key returns the current row index of the buffered result set
     * result.
     *
     * @return int
     **/
    function key() {}

    /**
     * sqlite_next advances the result handle result to the next row.
     *
     * @return bool
     **/
    function next() {}

    /**
     * Returns the number of fields in the result set.
     *
     * @return int
     **/
    function numFields() {}

    /**
     * Returns the number of rows in the buffered result set.
     *
     * @return int
     **/
    function numRows() {}

    /**
     * sqlite_prev seeks back the result handle to the previous row.
     *
     * @return bool
     **/
    function prev() {}

    /**
     * sqlite_rewind seeks back to the first row in the given result set.
     *
     * @return bool
     **/
    function rewind() {}

    /**
     * sqlite_seek seeks to the row given by the parameter rownum.
     *
     * @param int
     * @return bool
     **/
    function seek($rownum) {}

    /**
     * sqlite_fetch_single is identical to sqlite_fetch_array except that it
     * returns the value of the first column of the rowset.
     * 
     * This is the most optimal way to retrieve data when you are only
     * interested in the values from a single column of data.
     *
     * @param bool
     * @return string
     **/
    function sqlite_fetch_string($decode_binary) {}

    /**
     * Finds whether more rows are available from the given result handle.
     *
     * @return bool
     **/
    function valid() {}

}
class stdClass {
}
class stmt {
    /**
     * maxdb_stmt_affected_rows returns the number of rows affected by
     * INSERT, UPDATE, or DELETE query. If the last query was invalid or the
     * number of rows can not determined, this function will return -1.
     *
     * @var int
     **/
    var $affected_rows;
    /**
     * For the statement specified by stmt, maxdb_stmt_errno returns the
     * error code for the most recently invoked statement function that can
     * succeed or fail.
     *
     * @var int
     **/
    var $errno;
    /**
     * For the statement specified by stmt, maxdb_stmt_error returns a
     * containing the error message for the most recently invoked statement
     * function that can succeed or fail.
     *
     * @var string
     **/
    var $error;
    /**
     * Returns the number of rows in the result set.
     *
     * @var int
     **/
    var $num_rows;
    /**
     * maxdb_stmt_param_count returns the number of parameter markers present
     * in the prepared statement.
     *
     * @var int
     **/
    var $param_count;
    /**
     * maxdb_stmt_param_count returns the number of parameter markers present
     * in the prepared statement.
     *
     * @var int
     **/
    var $param_count;
    /**
     * maxdb_stmt_bind_param is used to bind variables for the parameter
     * markers in the SQL statement that was passed to maxdb_prepare. The
     * string types contains one or more characters which specify the types
     * for the corresponding bind variables.
     * 
     * The extended syntax of maxdb_stmt_bind_param allows to give the
     * parameters as an array instead of a variable list of PHP variables to
     * the function. If the array variable has not been used before calling
     * maxdb_stmt_bind_param, it has to be initialized as an emtpy array. See
     * the examples how to use maxdb_stmt_bind_param with extended syntax.
     * 
     * Variables for SELECT INTO SQL statements can also be bound using
     * maxdb_stmt_bind_param. Parameters for database procedures can be bound
     * using maxdb_stmt_bind_param. See the examples how to use
     * maxdb_stmt_bind_param in this cases.
     * 
     * If a variable bound as INTO variable to a SQL statement was used
     * before, the content of this variable is overwritten by the data of the
     * SELECT INTO statement. A reference to this variable will be invalid
     * after a call to maxdb_stmt_bind_param.
     * 
     * For INOUT parameters of database procedures the content of the bound
     * INOUT variable is overwritten by the output value of the database
     * procedure. A reference to this variable will be invalid after a call
     * to maxdb_stmt_bind_param.
     * 
     * Type specification chars
     * 
     * Character Description
     * 
     * i corresponding variable has type integer
     * 
     * d corresponding variable has type double
     * 
     * s corresponding variable has type string
     * 
     * b corresponding variable is a blob and will be sent in packages
     *
     * @param string
     * @param mixed
     * @return bool
     **/
    function bind_param($types, &$var1) {}

    /**
     * maxdb_stmt_bind_result is used to associate (bind) columns in the
     * result set to variables. When maxdb_stmt_fetch is called to fetch
     * data, the MaxDB client/server protocol places the data for the bound
     * columns into the specified variables var1, ....
     *
     * @param mixed
     * @return bool
     **/
    function bind_result(&$var1) {}

    /**
     * The maxdb_stmt_data_seek function seeks to an arbitrary result pointer
     * specified by the offset in the statement result set represented by
     * statement. The offset parameter must be between zero and the total
     * number of rows minus one (0..maxdb_stmt_num_rows - 1).
     *
     * @param int
     * @return bool
     **/
    function data_seek($offset) {}

    /**
     * The maxdb_stmt_execute function executes a query that has been
     * previously prepared using the maxdb_prepare function represented by
     * the stmt resource. When executed any parameter markers which exist
     * will automatically be replaced with the appropiate data.
     * 
     * If the statement is UPDATE, DELETE, or INSERT, the total number of
     * affected rows can be determined by using the maxdb_stmt_affected_rows
     * function. Likewise, if the query yields a result set the maxdb_fetch
     * function is used.
     *
     * @return bool
     **/
    function execute() {}

    /**
     * maxdb_stmt_fetch returns row data using the variables bound by
     * maxdb_stmt_bind_result.
     *
     * @return bool
     **/
    function fetch() {}

    /**
     * The maxdb_stmt_free_result function frees the result memory associated
     * with the statement represented by the stmt parameter, which was
     * allocated by maxdb_stmt_store_result.
     *
     * @return void
     **/
    function free_result() {}

    /**
     * maxdb_stmt_maxdb_bind_param is used to bind variables for the parameter
     * markers in the SQL statement that was passed to maxdb_prepare. The
     * string types contains one or more characters which specify the types
     * for the corresponding bind variables.
     * 
     * The extended syntax of maxdb_stmt_maxdb_bind_param allows to give the
     * parameters as an array instead of a variable list of PHP variables to
     * the function. If the array variable has not been used before calling
     * maxdb_stmt_maxdb_bind_param, it has to be initialized as an emtpy array. See
     * the examples how to use maxdb_stmt_maxdb_bind_param with extended syntax.
     * 
     * Variables for SELECT INTO SQL statements can also be bound using
     * maxdb_stmt_maxdb_bind_param. Parameters for database procedures can be bound
     * using maxdb_stmt_maxdb_bind_param. See the examples how to use
     * maxdb_stmt_maxdb_bind_param in this cases.
     * 
     * If a variable bound as INTO variable to a SQL statement was used
     * before, the content of this variable is overwritten by the data of the
     * SELECT INTO statement. A reference to this variable will be invalid
     * after a call to maxdb_stmt_maxdb_bind_param.
     * 
     * For INOUT parameters of database procedures the content of the bound
     * INOUT variable is overwritten by the output value of the database
     * procedure. A reference to this variable will be invalid after a call
     * to maxdb_stmt_maxdb_bind_param.
     * 
     * Type specification chars
     * 
     * Character Description
     * 
     * i corresponding variable has type integer
     * 
     * d corresponding variable has type double
     * 
     * s corresponding variable has type string
     * 
     * b corresponding variable is a blob and will be sent in packages
     *
     * @param string
     * @param mixed
     * @return bool
     **/
    function maxdb_bind_param($types, &$var1) {}

    /**
     * maxdb_stmt_maxdb_bind_result is used to associate (bind) columns in the
     * result set to variables. When maxdb_stmt_fetch is called to fetch
     * data, the MaxDB client/server protocol places the data for the bound
     * columns into the specified variables var1, ....
     *
     * @param mixed
     * @return bool
     **/
    function maxdb_bind_result(&$var1) {}

    /**
     * The maxdb_stmt_maxdb_execute function maxdb_executes a query that has been
     * previously prepared using the maxdb_prepare function represented by
     * the stmt resource. When maxdb_executed any parameter markers which exist
     * will automatically be replaced with the appropiate data.
     * 
     * If the statement is UPDATE, DELETE, or INSERT, the total number of
     * affected rows can be determined by using the maxdb_stmt_affected_rows
     * function. Likewise, if the query yields a result set the maxdb_fetch
     * function is used.
     *
     * @return bool
     **/
    function maxdb_execute() {}

    /**
     * maxdb_stmt_maxdb_fetch returns row data using the variables bound by
     * maxdb_stmt_bind_result.
     *
     * @return bool
     **/
    function maxdb_fetch() {}

    /**
     * If a statement passed to maxdb_prepare is one that produces a result
     * set, maxdb_stmt_maxdb_get_metadata returns the result resource that can
     * be used to process the meta information such as total number of fields
     * and individual field information.
     * 
     * The result set structure should be freed when you are done with it,
     * which you can do by passing it to maxdb_free_result
     *
     * @return resource
     **/
    function maxdb_get_metadata() {}

    /**
     * Allows to send parameter data to the server in pieces (or chunks).
     * This function can be called multiple times to send the parts of a
     * character or binary data value for a column, which must be one of the
     * TEXT or BLOB datatypes.
     * 
     * param_nr indicates which parameter to associate the data with.
     * Parameters are numbered beginning with 0. data is a string containing
     * data to be sent.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function maxdb_send_long_data($param_nr, $data) {}

    /**
     * maxdb_stmt_prepare prepares the SQL query pointed to by the
     * null-terminated string query. The statement resource has to be
     * allocated by maxdb_stmt_init. The query must consist of a single SQL
     * statement.
     * 
     * The parameter query can include one or more parameter markers in the
     * SQL statement by embedding question mark (?) characters at the
     * appropriate positions.
     * 
     * The parameter markers must be bound to application variables using
     * maxdb_stmt_bind_param and/or maxdb_stmt_bind_result before executing
     * the statement or fetching rows.
     *
     * @param string
     * @return mixed
     **/
    function prepare($query) {}

    /**
     * @return bool
     **/
    function reset() {}

    /**
     * If a statement passed to maxdb_prepare is one that produces a result
     * set, maxdb_stmt_result_metadata returns the result resource that can
     * be used to process the meta information such as total number of fields
     * and individual field information.
     * 
     * The result set structure should be freed when you are done with it,
     * which you can do by passing it to maxdb_free_result
     *
     * @return resource
     **/
    function result_metadata() {}

    /**
     * Allows to send parameter data to the server in pieces (or chunks).
     * This function can be called multiple times to send the parts of a
     * character or binary data value for a column, which must be one of the
     * TEXT or BLOB datatypes.
     * 
     * param_nr indicates which parameter to associate the data with.
     * Parameters are numbered beginning with 0. data is a string containing
     * data to be sent.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function stmt_send_long_data($param_nr, $data) {}

}
class streamWrapper {
    /**
     * This method is called in response to closedir.
     * 
     * Any resources which were locked, or allocated, during opening and use
     * of the directory stream should be released.
     *
     * @return bool
     **/
    function dir_closedir() {}

    /**
     * This method is called in response to opendir.
     *
     * @param string
     * @param int
     * @return bool
     **/
    function dir_opendir($path, $options) {}

    /**
     * This method is called in response to readdir.
     *
     * @return string
     **/
    function dir_readdir() {}

    /**
     * This method is called in response to rewinddir.
     * 
     * Should reset the output generated by streamWrapper::dir_readdir. i.e.:
     * The next call to streamWrapper::dir_readdir should return the first
     * entry in the location returned by streamWrapper::dir_opendir.
     *
     * @return bool
     **/
    function dir_rewinddir() {}

    /**
     * This method is called in response to mkdir.
     *
     * @param string
     * @param int
     * @param int
     * @return bool
     **/
    function mkdir($path, $mode, $options) {}

    /**
     * This method is called in response to rename.
     * 
     * Should attempt to rename path_from to path_to
     *
     * @param string
     * @param string
     * @return bool
     **/
    function rename($path_from, $path_to) {}

    /**
     * This method is called in response to rmdir.
     *
     * @param string
     * @param int
     * @return bool
     **/
    function rmdir($path, $options) {}

    /**
     * This method is called in response to stream_select.
     *
     * @param int
     * @return resource
     **/
    function stream_cast($cast_as) {}

    /**
     * This method is called in response to fclose.
     * 
     * All resources that were locked, or allocated, by the wrapper should be
     * released.
     *
     * @return void
     **/
    function stream_close() {}

    /**
     * This method is called in response to feof.
     *
     * @return bool
     **/
    function stream_eof() {}

    /**
     * This method is called in response to fflush.
     * 
     * If you have cached data in your stream but not yet stored it into the
     * underlying storage, you should do so now.
     *
     * @return bool
     **/
    function stream_flush() {}

    /**
     * This method is called in response to flock, when file_put_contents
     * (when flags contains LOCK_EX), stream_set_blocking and when closing
     * the stream (LOCK_UN).
     *
     * @param mode
     * @return bool
     **/
    function stream_lock($operation) {}

    /**
     * This method is called immediately after the wrapper is initialized
     * (f.e. by fopen and file_get_contents).
     *
     * @param string
     * @param string
     * @param int
     * @param string
     * @return bool
     **/
    function stream_open($path, $mode, $options, &$opened_path) {}

    /**
     * This method is called in response to fread and fgets.
     *
     * @param int
     * @return string
     **/
    function stream_read($count) {}

    /**
     * This method is called in response to fseek.
     * 
     * The read/write position of the stream should be updated according to
     * the offset and whence.
     *
     * @param int
     * @param int
     * @return bool
     **/
    function stream_seek($offset, $whence) {}

    /**
     * This method is called to set options on the stream.
     *
     * @param int
     * @param int
     * @param int
     * @return bool
     **/
    function stream_set_option($option, $arg1, $arg2) {}

    /**
     * This method is called in response to fstat.
     *
     * @return array
     **/
    function stream_stat() {}

    /**
     * This method is called in response to ftell.
     *
     * @return int
     **/
    function stream_tell() {}

    /**
     * This method is called in response to fwrite.
     *
     * @param string
     * @return int
     **/
    function stream_write($data) {}

    /**
     * This method is called in response to unlink.
     *
     * @param string
     * @return bool
     **/
    function unlink($path) {}

    /**
     * This method is called in response to all stat related functions, such
     * as:
     * 
     * chmod (only when safe_mode is enabled) copy fileperms fileinode
     * filesize fileowner filegroup fileatime filemtime filectime filetype
     * is_writable is_readable is_executable is_file is_dir is_link
     * file_exists lstat stat SplFileInfo::getPerms SplFileInfo::getInode
     * SplFileInfo::getSize SplFileInfo::getOwner SplFileInfo::getGroup
     * SplFileInfo::getATime SplFileInfo::getMTime SplFileInfo::getCTime
     * SplFileInfo::getType SplFileInfo::isWritable SplFileInfo::isReadable
     * SplFileInfo::isExecutable SplFileInfo::isFile SplFileInfo::isDir
     * SplFileInfo::isLink RecursiveDirectoryIterator::hasChildren
     *
     * @param string
     * @param int
     * @return array
     **/
    function url_stat($path, $flags) {}

    /**
     * Called when opening the stream wrapper, right before
     * streamWrapper::stream_open.
     *
     **/
    function __construct() {}

}
class SWFAction {
    /**
     * Creates a new SWFAction and compiles the given script in it.
     *
     * @param string
     * @return SWFAction
     **/
    function __construct($script) {}

}
class SWFBitmap {
    /**
     * Returns the bitmap's height.
     *
     * @return float
     **/
    function getHeight() {}

    /**
     * Returns the bitmap's width.
     *
     * @return float
     **/
    function getWidth() {}

    /**
     * Creates the new SWFBitmap object from the given file.
     *
     * @param mixed
     * @param mixed
     * @return SWFBitmap
     **/
    function __construct($file, $alphafile) {}

}
class SWFButton {
    /**
     * Adds the given action to the button for the given conditions.
     *
     * @param SWFAction
     * @param int
     * @return void
     **/
    function addAction($action, $flags) {}

    /**
     * @param SWFSound
     * @param int
     * @return SWFSoundInstance
     **/
    function addASound($sound, $flags) {}

    /**
     * Adds the given shape to the button.
     *
     * @param SWFShape
     * @param int
     * @return void
     **/
    function addShape($shape, $flags) {}

    /**
     * Sets the action to be performed when the button is clicked.
     * 
     * This is a shortcut for called with the SWFBUTTON_MOUSEUP flag.
     *
     * @param SWFAction
     * @return void
     **/
    function setAction($action) {}

    /**
     * swfbutton-&gt;setdown alias for addShape(shape, SWFBUTTON_DOWN).
     *
     * @param SWFShape
     * @return void
     **/
    function setDown($shape) {}

    /**
     * swfbutton-&gt;sethit alias for addShape(shape, SWFBUTTON_HIT).
     *
     * @param SWFShape
     * @return void
     **/
    function setHit($shape) {}

    /**
     * @param int
     * @return void
     **/
    function setMenu($flag) {}

    /**
     * swfbutton-&gt;setover alias for addShape(shape, SWFBUTTON_OVER).
     *
     * @param SWFShape
     * @return void
     **/
    function setOver($shape) {}

    /**
     * swfbutton-&gt;setup alias for addShape(shape, SWFBUTTON_UP).
     *
     * @param SWFShape
     * @return void
     **/
    function setUp($shape) {}

    /**
     * Creates a new Button.
     *
     * @return SWFButton
     **/
    function __construct() {}

}
class SWFDisplayItem {
    /**
     * @param SWFAction
     * @param int
     * @return void
     **/
    function addAction($action, $flags) {}

    /**
     * swfdisplayitem-&gt;addcolor adds the color to this item's color
     * transform. The color is given in its RGB form.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function addColor($red, $green, $blue, $a) {}

    /**
     * @return void
     **/
    function endMask() {}

    /**
     * @return float
     **/
    function getRot() {}

    /**
     * @return float
     **/
    function getX() {}

    /**
     * @return float
     **/
    function getXScale() {}

    /**
     * @return float
     **/
    function getXSkew() {}

    /**
     * @return float
     **/
    function getY() {}

    /**
     * @return float
     **/
    function getYScale() {}

    /**
     * @return float
     **/
    function getYSkew() {}

    /**
     * swfdisplayitem-&gt;move moves the current object by (dx,dy) from its
     * current position.
     *
     * @param float
     * @param float
     * @return void
     **/
    function move($dx, $dy) {}

    /**
     * swfdisplayitem-&gt;moveto moves the current object to (x,y) in global
     * coordinates.
     *
     * @param float
     * @param float
     * @return void
     **/
    function moveTo($x, $y) {}

    /**
     * swfdisplayitem-&gt;multcolor multiplies the item's color transform by
     * the given values.
     *
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function multColor($red, $green, $blue, $a) {}

    /**
     * swfdisplayitem-&gt;remove removes this object from the movie's display
     * list.
     *
     * @return void
     **/
    function remove() {}

    /**
     * swfdisplayitem-&gt;rotate rotates the current object by angle degrees
     * from its current rotation.
     *
     * @param float
     * @return void
     **/
    function rotate($angle) {}

    /**
     * swfdisplayitem-&gt;rotateto set the current object rotation to angle
     * degrees in global coordinates.
     *
     * @param float
     * @return void
     **/
    function rotateTo($angle) {}

    /**
     * swfdisplayitem-&gt;scale scales the current object by (dx,dy) from its
     * current size.
     *
     * @param float
     * @param float
     * @return void
     **/
    function scale($dx, $dy) {}

    /**
     * swfdisplayitem-&gt;scaleto scales the current object to (x,y) in
     * global coordinates.
     *
     * @param float
     * @param float
     * @return void
     **/
    function scaleTo($x, $y) {}

    /**
     * swfdisplayitem-&gt;setdepth sets the object's z-order to depth. Depth
     * defaults to the order in which instances are created (by adding a
     * shape/text to a movie)- newer ones are on top of older ones. If two
     * objects are given the same depth, only the later-defined one can be
     * moved.
     *
     * @param int
     * @return void
     **/
    function setDepth($depth) {}

    /**
     * @param int
     * @return void
     **/
    function setMaskLevel($level) {}

    /**
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function setMatrix($a, $b, $c, $d, $x, $y) {}

    /**
     * swfdisplayitem-&gt;setname sets the object's name to name, for
     * targetting with action script. Only useful on sprites.
     *
     * @param string
     * @return void
     **/
    function setName($name) {}

    /**
     * swfdisplayitem-&gt;setratio sets the object's ratio to ratio.
     * Obviously only useful for morphs.
     *
     * @param float
     * @return void
     **/
    function setRatio($ratio) {}

    /**
     * swfdisplayitem-&gt;skewx adds ddegrees to current x-skew.
     *
     * @param float
     * @return void
     **/
    function skewX($ddegrees) {}

    /**
     * swfdisplayitem-&gt;skewxto sets the x-skew to degrees. For degrees is
     * 1.0, it means a 45-degree forward slant. More is more forward, less is
     * more backward.
     *
     * @param float
     * @return void
     **/
    function skewXTo($degrees) {}

    /**
     * swfdisplayitem-&gt;skewy adds ddegrees to current y-skew.
     *
     * @param float
     * @return void
     **/
    function skewY($ddegrees) {}

    /**
     * swfdisplayitem-&gt;skewyto sets the y-skew to degrees. For degrees is
     * 1.0, it means a 45-degree forward slant. More is more upward, less is
     * more downward.
     *
     * @param float
     * @return void
     **/
    function skewYTo($degrees) {}

}
class SWFFill {
    /**
     * Moves the fill origin to the given global coordinates.
     *
     * @param float
     * @param float
     * @return void
     **/
    function moveTo($x, $y) {}

    /**
     * Sets the fill rotation to the given angle.
     *
     * @param float
     * @return void
     **/
    function rotateTo($angle) {}

    /**
     * Sets the fill scale to the given coordinates.
     *
     * @param float
     * @param float
     * @return void
     **/
    function scaleTo($x, $y) {}

    /**
     * Sets the fill x-skew to x.
     *
     * @param float
     * @return void
     **/
    function skewXTo($x) {}

    /**
     * Sets the fill y-skew to y.
     *
     * @param float
     * @return void
     **/
    function skewYTo($y) {}

}
class SWFFont {
    /**
     * @return float
     **/
    function getAscent() {}

    /**
     * @return float
     **/
    function getDescent() {}

    /**
     * @return float
     **/
    function getLeading() {}

    /**
     * @param int
     * @return string
     **/
    function getShape($code) {}

    /**
     * @param string
     * @return float
     **/
    function getUTF8Width($string) {}

    /**
     * swffont-&gt;getwidth returns the string string's width, using font's
     * default scaling. You'll probably want to use the swftext version of
     * this method which uses the text object's scale.
     *
     * @param string
     * @return float
     **/
    function getWidth($string) {}

    /**
     * If filename is the name of an FDB file (i.e., it ends in ".fdb"), load
     * the font definition found in said file. Otherwise, create a
     * browser-defined font reference.
     * 
     * FDB ("font definition block") is a very simple wrapper for the SWF
     * DefineFont2 block which contains a full description of a font. One may
     * create FDB files from SWT Generator template files with the included
     * makefdb utility- look in the util directory off the main ming
     * distribution directory.
     * 
     * Browser-defined fonts don't contain any information about the font
     * other than its name. It is assumed that the font definition will be
     * provided by the movie player. The fonts _serif, _sans, and _typewriter
     * should always be available. For example:
     * 
     * will give you the standard sans-serif font, probably the same as what
     * you'd get with font name="sans-serif" in HTML.
     * 
     * 
     *
     * @param string
     * @return SWFFont
     **/
    function __construct($filename) {}

}
class SWFFontChar {
    /**
     * @param string
     * @return void
     **/
    function addChars($char) {}

    /**
     * @param string
     * @return void
     **/
    function addUTF8Chars($char) {}

}
class SWFGradient {
    /**
     * swfgradient-&gt;addentry adds an entry to the gradient list. ratio is
     * a number between 0 and 1 indicating where in the gradient this color
     * appears. Thou shalt add entries in order of increasing ratio.
     * 
     * red, green, blue is a color (RGB mode).
     *
     * @param float
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function addEntry($ratio, $red, $green, $blue, $alpha) {}

    /**
     * swfgradient creates a new SWFGradient object.
     * 
     * This simple example will draw a big black-to-white gradient as
     * background, and a reddish disc in its center.
     * 
     * swfgradient example
     *
     * @return SWFGradient
     **/
    function __construct() {}

}
class SWFMorph {
    /**
     * Gets the morph's starting shape.
     *
     * @return SWFShape
     **/
    function getShape1() {}

    /**
     * Gets the morph's ending shape.
     *
     * @return SWFShape
     **/
    function getShape2() {}

    /**
     * Creates a new SWFMorph object.
     * 
     * Also called a "shape tween". This thing lets you make those tacky
     * twisting things that make your computer choke. Oh, joy!
     *
     * @return SWFMorph
     **/
    function __construct() {}

}
class SWFMovie {
    /**
     * Adds an SWF object instance to the current movie.
     *
     * @param object
     * @return mixed
     **/
    function add($instance) {}

    /**
     * @param SWFCharacter
     * @param string
     * @return void
     **/
    function addExport($char, $name) {}

    /**
     * @param SWFFont
     * @return mixed
     **/
    function addFont($font) {}

    /**
     * @param string
     * @param string
     * @return SWFSprite
     **/
    function importChar($libswf, $name) {}

    /**
     * @param string
     * @param string
     * @return SWFFontChar
     **/
    function importFont($libswf, $name) {}

    /**
     * @param string
     * @return void
     **/
    function labelFrame($label) {}

    /**
     * Moves to the next frame of the animation.
     *
     * @return void
     **/
    function nextFrame() {}

    /**
     * Dumps the SWFMovie.
     * 
     * Don't forget to send the Content-Type HTTP header file before using
     * this function, in order to display the movie in a browser.
     *
     * @param int
     * @return int
     **/
    function output($compression) {}

    /**
     * Removes the given object instance from the display list.
     *
     * @param object
     * @return void
     **/
    function remove($instance) {}

    /**
     * Saves the SWF movie to the specified filename.
     *
     * @param string
     * @param int
     * @return int
     **/
    function save($filename, $compression) {}

    /**
     * @param resource
     * @param int
     * @return int
     **/
    function saveToFile($x, $compression) {}

    /**
     * Sets the background color.
     * 
     * Why is there no rgba version? Think about it, you might want to let
     * the HTML background show through. There's a way to do that, but it
     * only works on IE4. Search the site for details.
     *
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function setbackground($red, $green, $blue) {}

    /**
     * Sets the movie's dimension to the specified width and height.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setDimension($width, $height) {}

    /**
     * Sets the total number of frames in the animation to the given number.
     *
     * @param int
     * @return void
     **/
    function setFrames($number) {}

    /**
     * Sets the frame rate to the specified rate.
     * 
     * Animation will slow down if the player can't render frames fast
     * enough- unless there's a streaming sound, in which case display frames
     * are sacrificed to keep sound from skipping.
     *
     * @param float
     * @return void
     **/
    function setRate($rate) {}

    /**
     * @param SWFSound
     * @return SWFSoundInstance
     **/
    function startSound($sound) {}

    /**
     * @param SWFSound
     * @return void
     **/
    function stopSound($sound) {}

    /**
     * Streams the given MP3 file mp3file.
     * 
     * This method is not very robust in dealing with oddities (can skip over
     * an initial ID3 tag, but that's about it).
     * 
     * Note that the movie isn't smart enough to put enough frames in to
     * contain the entire mp3 stream- you'll have to add (length of song *
     * frames per second) frames to get the entire stream in.
     *
     * @param mixed
     * @param float
     * @return int
     **/
    function streamMP3($mp3file, $skip) {}

    /**
     * @return void
     **/
    function writeExports() {}

    /**
     * Creates a new movie object, representing an SWF movie.
     *
     * @param int
     * @return SWFMovie
     **/
    function __construct($version) {}

}
class SWFPrebuiltClip {
    /**
     * @param mixed
     * @return SWFPrebuiltClip
     **/
    function __construct($file) {}

}
class SWFShape {
    /**
     * SWFShape-&gt;addFill adds a solid fill to the shape's list of fill
     * styles. SWFShape-&gt;addFill accepts three different types of
     * arguments.
     * 
     * red, green, blue is a color (RGB mode).
     * 
     * The bitmap argument is an SWFBitmap object. The flags argument can be
     * one of the following values: SWFFILL_CLIPPED_BITMAP,
     * SWFFILL_TILED_BITMAP, SWFFILL_LINEAR_GRADIENT or
     * SWFFILL_RADIAL_GRADIENT. Default is SWFFILL_TILED_BITMAP for SWFBitmap
     * and SWFFILL_LINEAR_GRADIENT for SWFGradient.
     * 
     * The gradient argument is an SWFGradient object. The flags argument can
     * be one of the following values : SWFFILL_RADIAL_GRADIENT or
     * SWFFILL_LINEAR_GRADIENT. Default is SWFFILL_LINEAR_GRADIENT. I'm sure
     * about this one. Really.
     * 
     * SWFShape-&gt;addFill returns an SWFFill object for use with the
     * SWFShape-&gt;setLeftFill and SWFShape-&gt;setRightFill functions
     * described below.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return SWFFill
     **/
    function addFill($red, $green, $blue, $alpha) {}

    /**
     * @param float
     * @param float
     * @param float
     * @return void
     **/
    function drawArc($r, $startAngle, $endAngle) {}

    /**
     * @param float
     * @return void
     **/
    function drawCircle($r) {}

    /**
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return int
     **/
    function drawCubic($bx, $by, $cx, $cy, $dx, $dy) {}

    /**
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return int
     **/
    function drawCubicTo($bx, $by, $cx, $cy, $dx, $dy) {}

    /**
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return int
     **/
    function drawCurve($controldx, $controldy, $anchordx, $anchordy, $targetdx, $targetdy) {}

    /**
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @param float
     * @return int
     **/
    function drawCurveTo($controlx, $controly, $anchorx, $anchory, $targetx, $targety) {}

    /**
     * @param SWFFont
     * @param string
     * @param int
     * @return void
     **/
    function drawGlyph($font, $character, $size) {}

    /**
     * @param float
     * @param float
     * @return void
     **/
    function drawLine($dx, $dy) {}

    /**
     * @param float
     * @param float
     * @return void
     **/
    function drawLineTo($x, $y) {}

    /**
     * @param float
     * @param float
     * @return void
     **/
    function movePen($dx, $dy) {}

    /**
     * @param float
     * @param float
     * @return void
     **/
    function movePenTo($x, $y) {}

    /**
     * What this nonsense is about is, every edge segment borders at most two
     * fills. When rasterizing the object, it's pretty handy to know what
     * those fills are ahead of time, so the swf format requires these to be
     * specified.
     * 
     * swfshape-&gt;setleftfill sets the fill on the left side of the edge-
     * that is, on the interior if you're defining the outline of the shape
     * in a counter-clockwise fashion. The fill object is an SWFFill object
     * returned from one of the addFill functions above.
     * 
     * This seems to be reversed when you're defining a shape in a morph,
     * though. If your browser crashes, just try setting the fill on the
     * other side.
     *
     * @param SWFGradient
     * @return void
     **/
    function setLeftFill($fill) {}

    /**
     * swfshape-&gt;setline sets the shape's line style. width is the line's
     * width. If width is 0, the line's style is removed (then, all other
     * arguments are ignored). If width &gt; 0, then line's color is set to
     * red, green, blue. Last parameter a is optional.
     * 
     * You must declare all line styles before you use them (see example).
     *
     * @param SWFShape
     * @return void
     **/
    function setLine($shape) {}

    /**
     * @param SWFGradient
     * @return void
     **/
    function setRightFill($fill) {}

    /**
     * Created a new SWFShape object.
     *
     * @return SWFShape
     **/
    function __construct() {}

}
class SWFSound {
    /**
     * @param string
     * @param int
     * @return SWFSound
     **/
    function __construct($filename, $flags) {}

}
class SWFSoundInstance {
    /**
     * @param int
     * @return void
     **/
    function loopCount($point) {}

    /**
     * @param int
     * @return void
     **/
    function loopInPoint($point) {}

    /**
     * @param int
     * @return void
     **/
    function loopOutPoint($point) {}

    /**
     * @return void
     **/
    function noMultiple() {}

}
class SWFSprite {
    /**
     * swfsprite-&gt;add adds a swfshape, a swfbutton, a swftext, a swfaction
     * or a swfsprite object.
     * 
     * For displayable types (swfshape, swfbutton, swftext, swfaction or
     * swfsprite), this returns a handle to the object in a display list.
     *
     * @param object
     * @return void
     **/
    function add($object) {}

    /**
     * @param string
     * @return void
     **/
    function labelFrame($label) {}

    /**
     * swfsprite-&gt;setframes moves to the next frame of the animation.
     *
     * @return void
     **/
    function nextFrame() {}

    /**
     * swfsprite-&gt;remove remove a swfshape, a swfbutton, a swftext, a
     * swfaction or a swfsprite object from the sprite.
     *
     * @param object
     * @return void
     **/
    function remove($object) {}

    /**
     * swfsprite-&gt;setframes sets the total number of frames in the
     * animation to numberofframes.
     *
     * @param int
     * @return void
     **/
    function setFrames($number) {}

    /**
     * @param SWFSound
     * @return SWFSoundInstance
     **/
    function startSound($sount) {}

    /**
     * @param SWFSound
     * @return void
     **/
    function stopSound($sount) {}

    /**
     * Creates a new SWFSprite object.
     *
     * @return SWFSprite
     **/
    function __construct() {}

}
class SWFText {
    /**
     * swftext-&gt;addstring draws the string string at the current pen
     * (cursor) location. Pen is at the baseline of the text; i.e., ascending
     * text is in the -y direction.
     *
     * @param string
     * @return void
     **/
    function addString($string) {}

    /**
     * @param string
     * @return void
     **/
    function addUTF8String($text) {}

    /**
     * @return float
     **/
    function getAscent() {}

    /**
     * @return float
     **/
    function getDescent() {}

    /**
     * @return float
     **/
    function getLeading() {}

    /**
     * @param string
     * @return float
     **/
    function getUTF8Width($string) {}

    /**
     * Returns the rendered width of the string at the text object's current
     * font, scale, and spacing settings.
     *
     * @param string
     * @return float
     **/
    function getWidth($string) {}

    /**
     * swftext-&gt;moveto moves the pen (or cursor, if that makes more sense)
     * to (x,y) in text object's coordinate space. If either is zero, though,
     * value in that dimension stays the same. Annoying, should be fixed.
     *
     * @param float
     * @param float
     * @return void
     **/
    function moveTo($x, $y) {}

    /**
     * Changes the current text color.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function setColor($red, $green, $blue, $a) {}

    /**
     * swftext-&gt;setfont sets the current font to font.
     *
     * @param SWFFont
     * @return void
     **/
    function setFont($font) {}

    /**
     * swftext-&gt;setheight sets the current font height to height. Default
     * is 240.
     *
     * @param float
     * @return void
     **/
    function setHeight($height) {}

    /**
     * swftext-&gt;setspacing sets the current font spacing to spacing.
     * Default is 1.0. 0 is all of the letters written at the same point.
     * This doesn't really work that well because it inflates the advance
     * across the letter, doesn't add the same amount of spacing between the
     * letters. I should try and explain that better, prolly. Or just fix the
     * damn thing to do constant spacing. This was really just a way to
     * figure out how letter advances work, anyway.. So nyah.
     *
     * @param float
     * @return void
     **/
    function setSpacing($spacing) {}

    /**
     * Creates a new SWFText object, fresh for manipulating.
     *
     * @return void
     **/
    function __construct() {}

}
class SWFTextField {
    /**
     * @param string
     * @return void
     **/
    function addChars($chars) {}

    /**
     * swftextfield-&gt;setname concatenates the string string to the text
     * field.
     *
     * @param string
     * @return void
     **/
    function addString($string) {}

    /**
     * swftextfield-&gt;align sets the text field alignment to alignement.
     * Valid values for alignement are : SWFTEXTFIELD_ALIGN_LEFT,
     * SWFTEXTFIELD_ALIGN_RIGHT, SWFTEXTFIELD_ALIGN_CENTER and
     * SWFTEXTFIELD_ALIGN_JUSTIFY.
     *
     * @param int
     * @return void
     **/
    function align($alignement) {}

    /**
     * swftextfield-&gt;setbounds sets the text field width to width and
     * height to height. If you don't set the bounds yourself, Ming makes a
     * poor guess at what the bounds are.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setBounds($width, $height) {}

    /**
     * swftextfield-&gt;setcolor sets the color of the text field. Default is
     * fully opaque black. Color is represented using RGB system.
     *
     * @param int
     * @param int
     * @param int
     * @param int
     * @return void
     **/
    function setColor($red, $green, $blue, $a) {}

    /**
     * swftextfield-&gt;setfont sets the text field font to the
     * [browser-defined?] font font.
     *
     * @param SWFFont
     * @return void
     **/
    function setFont($font) {}

    /**
     * swftextfield-&gt;setheight sets the font height of this text field
     * font to the given height height. Default is 240.
     *
     * @param float
     * @return void
     **/
    function setHeight($height) {}

    /**
     * swftextfield-&gt;setindentation sets the indentation of the first line
     * in the text field, to width.
     *
     * @param float
     * @return void
     **/
    function setIndentation($width) {}

    /**
     * swftextfield-&gt;setleftmargin sets the left margin width of the text
     * field to width. Default is 0.
     *
     * @param float
     * @return void
     **/
    function setLeftMargin($width) {}

    /**
     * swftextfield-&gt;setlinespacing sets the line spacing of the text
     * field to the height of height. Default is 40.
     *
     * @param float
     * @return void
     **/
    function setLineSpacing($height) {}

    /**
     * swftextfield-&gt;setmargins set both margins at once, for the man on
     * the go.
     *
     * @param float
     * @param float
     * @return void
     **/
    function setMargins($left, $right) {}

    /**
     * swftextfield-&gt;setname sets the variable name of this text field to
     * name, for form posting and action scripting purposes.
     *
     * @param string
     * @return void
     **/
    function setName($name) {}

    /**
     * @param float
     * @return void
     **/
    function setPadding($padding) {}

    /**
     * swftextfield-&gt;setrightmargin sets the right margin width of the
     * text field to width. Default is 0.
     *
     * @param float
     * @return void
     **/
    function setRightMargin($width) {}

    /**
     * swftextfield creates a new text field object. Text Fields are less
     * flexible than swftext objects- they can't be rotated, scaled
     * non-proportionally, or skewed, but they can be used as form entries,
     * and they can use browser-defined fonts.
     * 
     * The optional flags change the text field's behavior. It has the
     * following possibles values :
     * 
     * SWFTEXTFIELD_DRAWBOX draws the outline of the textfield
     * 
     * SWFTEXTFIELD_HASLENGTH
     * 
     * SWFTEXTFIELD_HTML allows text markup using HTML-tags
     * 
     * SWFTEXTFIELD_MULTILINE allows multiple lines
     * 
     * SWFTEXTFIELD_NOEDIT indicates that the field shouldn't be
     * user-editable
     * 
     * SWFTEXTFIELD_NOSELECT makes the field non-selectable
     * 
     * SWFTEXTFIELD_PASSWORD obscures the data entry
     * 
     * SWFTEXTFIELD_WORDWRAP allows text to wrap
     * 
     * Flags are combined with the bitwise OR operation. For example,
     * 
     * creates a totally useless non-editable password field.
     *
     * @param int
     * @return SWFTextField
     **/
    function __construct($flags) {}

}
class SWFVideoStream {
    /**
     * This function returns the number of video-frames of a SWFVideoStream.
     *
     * @return int
     **/
    function getNumFrames() {}

    /**
     * Sets the width and height for streamed videos.
     *
     * @param int
     * @param int
     * @return void
     **/
    function setDimension($x, $y) {}

    /**
     * @param string
     * @return SWFVideoStream
     **/
    function __construct($file) {}

}
class Swish {
    const IN_ALL = 0;
    const IN_BODY = 0;
    const IN_BODY_BIT = 0;
    const IN_COMMENTS = 0;
    const IN_COMMENTS_BIT = 0;
    const IN_EMPHASIZED = 0;
    const IN_EMPHASIZED_BIT = 0;
    const IN_FILE = 0;
    const IN_FILE_BIT = 0;
    const IN_HEAD = 0;
    const IN_HEADER = 0;
    const IN_HEADER_BIT = 0;
    const IN_HEAD_BIT = 0;
    const IN_META = 0;
    const IN_META_BIT = 0;
    const IN_TITLE = 0;
    const IN_TITLE_BIT = 0;
    const META_TYPE_DATE = 0;
    const META_TYPE_STRING = 0;
    const META_TYPE_ULONG = 0;
    const META_TYPE_UNDEF = 0;
    /**
     * @param string
     * @return void
     **/
    function __construct($index_names) {}

}
class Tidy {
    /**
     * Returns warnings and errors which occurred parsing the specified
     * document.
     *
     * @var string
     **/
    var $errorBuffer;
    /**
     * Constructs a new tidy object.
     *
     * @param string
     * @param mixed
     * @param string
     * @param bool
     * @return tidy
     **/
    function __construct($filename, $config, $encoding, $use_include_path) {}

}
class TidyNode {
    /**
     * Returns the parent node of the current node.
     *
     * @return tidyNode
     **/
    function getParent() {}

    /**
     * Tells if the node has children.
     *
     * @return bool
     **/
    function hasChildren() {}

    /**
     * Tells if the node has siblings.
     *
     * @return bool
     **/
    function hasSiblings() {}

    /**
     * Tells whether the current node is ASP.
     *
     * @return bool
     **/
    function isAsp() {}

    /**
     * Tells if the node is a comment.
     *
     * @return bool
     **/
    function isComment() {}

    /**
     * Tells if the node is part of HTML document.
     *
     * @return bool
     **/
    function isHtml() {}

    /**
     * Tells if the node is JSTE.
     *
     * @return bool
     **/
    function isJste() {}

    /**
     * Tells if the node is PHP.
     *
     * @return bool
     **/
    function isPhp() {}

    /**
     * Tells if the node represents a text (without any markup).
     *
     * @return bool
     **/
    function isText() {}

}
class TokyoTyrant {
    /**
     * Adds to an int or double value. This increments the value by the given
     * amount and returns the new value. If the key does not exist a new key
     * is created with initial value of the increment parameter.
     *
     * @param string
     * @param number
     * @param string
     * @return number
     **/
    function add($key, $increment, $type) {}

    /**
     * Connects to a remote database
     *
     * @param string
     * @param int
     * @param array
     * @return TokyoTyrant
     **/
    function connect($host, $port, $options) {}

    /**
     * Connects to a database using an uri
     *
     * @param string
     * @return TokyoTyrant
     **/
    function connectUri($uri) {}

    /**
     * Makes a copy of the current database
     *
     * @param string
     * @return TokyoTyrant
     **/
    function copy($path) {}

    /**
     * Executes a remote script extension.
     *
     * @param string
     * @param int
     * @param string
     * @param string
     * @return string
     **/
    function ext($name, $options, $key, $value) {}

    /**
     * Returns the forward matching keys from the database
     *
     * @param string
     * @param int
     * @return array
     **/
    function fwmKeys($prefix, $max_recs) {}

    /**
     * This method is used to return a value or multiple values. This method
     * accepts a string or an array as a value.
     *
     * @param mixed
     * @return mixed
     **/
    function get($keys) {}

    /**
     * Returns the number of records in the database
     *
     * @return int
     **/
    function num() {}

    /**
     * Removes a record or multiple records. This method accepts a string for
     * a single key or an array of keys for multiple records.
     *
     * @param mixed
     * @return TokyoTyrant
     **/
    function out($keys) {}

    /**
     * Puts a key-value pair into the database or multiple key-value pairs.
     * If keys is string then the second parameter value defines the value.
     * The second parameter is mandatory if keys is a string. If the key
     * exists the value will be replaced with new value.
     *
     * @param mixed
     * @param string
     * @return TokyoTyrant
     **/
    function put($keys, $value) {}

    /**
     * Appends a value into existing key or multiple values if keys is an
     * array. The second parameter is mandatory if keys is a string. If the
     * record does not exist a new record is created.
     *
     * @param mixed
     * @param string
     * @return TokyoTyrant
     **/
    function putCat($keys, $value) {}

    /**
     * Puts a key-value pair into the database or multiple key-value pairs.
     * If keys is string then the second parameter value defines the value.
     * The second parameter is mandatory if keys is a string. If the key
     * already exists this method throws an exception indicating that the
     * records exists.
     *
     * @param mixed
     * @param string
     * @return TokyoTyrant
     **/
    function putKeep($keys, $value) {}

    /**
     * Puts a key-value pair into the database or multiple key-value pairs.
     * If keys is string then the second parameter value defines the value.
     * The second parameter is mandatory if keys is a string. This method
     * does not wait for the response from the server.
     *
     * @param mixed
     * @param string
     * @return TokyoTyrant
     **/
    function putNr($keys, $value) {}

    /**
     * Concatenate to a record and shift to left.
     *
     * @param string
     * @param string
     * @param int
     * @return void
     **/
    function putShl($key, $value, $width) {}

    /**
     * Restore the database from the update log.
     *
     * @param string
     * @param int
     * @param bool
     * @return void
     **/
    function restore($log_dir, $timestamp, $check_consistency) {}

    /**
     * Sets the replication master of the database
     *
     * @param string
     * @param int
     * @param int
     * @param bool
     * @return void
     **/
    function setMaster($host, $port, $timestamp, $check_consistency) {}

    /**
     * Returns the size of a value by key
     *
     * @param string
     * @return int
     **/
    function size($key) {}

    /**
     * Returns statistics of the remote database
     *
     * @return array
     **/
    function stat() {}

    /**
     * Synchronizes the database on to the physical device
     *
     * @return void
     **/
    function sync() {}

    /**
     * Tunes database connection options.
     *
     * @param float
     * @param int
     * @return TokyoTyrant
     **/
    function tune($timeout, $options) {}

    /**
     * Empties a remote database
     *
     * @return void
     **/
    function vanish() {}

    /**
     * Constructs a new TokyoTyrant object and optionally connects to the
     * database
     *
     * @param string
     * @param int
     * @param array
     **/
    function __construct($host, $port, $options) {}

}
class tokyotyrantexception extends Exception {
}
class TokyoTyrantQuery implements Iterator, Traversable {
    /**
     * Adds a condition to the query. Condition can be something like: get
     * all keys which value matches expr.
     *
     * @param string
     * @param int
     * @param string
     * @return void
     **/
    function addCond($name, $op, $expr) {}

    /**
     * Returns a count of how many records a query returns.
     *
     * @return int
     **/
    function count() {}

    /**
     * Returns the current element. Part of Iterator interface
     *
     * @return array
     **/
    function current() {}

    /**
     * Get the hint string of the query. The hint string contains information
     * about an executed query and it could be compared to for example MySQL
     * EXPLAIN statement.
     *
     * @return string
     **/
    function hint() {}

    /**
     * Returns the current key. Part of the Iterator interface
     *
     * @return int
     **/
    function key() {}

    /**
     * Executes multiple queries on a database and returns matching records.
     * The current object is always the left most object in the search.
     *
     * @return array
     **/
    function metaSearch() {}

    /**
     * Returns the next result in the resultset. Part of the Iterator
     * interface.
     *
     * @return array
     **/
    function next() {}

    /**
     * Removes all records that match the query. Works exactly like search
     * but removes the records instead of returning them.
     *
     * @return TokyoTyrantQuery
     **/
    function out() {}

    /**
     * Rewind the resultset and executes the query if it has not been
     * executed. Part of the Iterator interface.
     *
     * @return boolean
     **/
    function rewind() {}

    /**
     * Executes a search on the table database. Returns an array of arrays
     * containing the matching records. In the returned array the first level
     * is the primary key of the data and the second level is the row data.
     *
     * @return array
     **/
    function search() {}

    /**
     * Set the maximum amount of records to return on a query.
     *
     * @param int
     * @param int
     * @return void
     **/
    function setLimit($max, $skip) {}

    /**
     * Checks if the current item is valid. Part of the Iterator interface
     *
     * @return void
     **/
    function valid() {}

    /**
     * Construct a new query object
     *
     * @param TokyoTyrantTable
     **/
    function __construct($table) {}

}
class TokyoTyrantTable extends TokyoTyrant {
    /**
     * This method is not supported with table databases.
     *
     * @param string
     * @param mixed
     * @param string
     * @return int
     **/
    function add($key, $increment, $type) {}

    /**
     * Generates an unique id inside the table database. In table databases
     * rows are referenced using a numeric primary key.
     *
     * @return int
     **/
    function genUid() {}

    /**
     * Gets a row from table database. keys is a single integer for the
     * primary key of the row or an array of integers for multiple rows.
     *
     * @param mixed
     * @return void
     **/
    function get($keys) {}

    /**
     * Get a query object to execute searches on the database
     *
     * @return TokyoTyrantQuery
     **/
    function getQuery() {}

    /**
     * Removes records from a table database.
     *
     * @param mixed
     * @return void
     **/
    function out($keys) {}

    /**
     * Puts a new row into the database. This method parameters are key which
     * is the primary key of the row, passing will generate a new unique id.
     * value is an array containing the row contents which is usually key
     * value pairs.
     *
     * @param mixed
     * @param array
     * @return int
     **/
    function put($key, $columns) {}

    /**
     * This method can be used to add new columns to existing records.
     * Existing keys will be left unmodified but any new columns will be
     * appended to the row. Passing null as key will generate a new row.
     *
     * @param mixed
     * @param array
     * @return void
     **/
    function putCat($key, $columns) {}

    /**
     * Puts a new record into the database. If the key already exists this
     * method throws an exception indicating that the records exists.
     *
     * @param mixed
     * @param array
     * @return void
     **/
    function putKeep($key, $columns) {}

    /**
     * This method is not supported on table databases. Calling this method
     * through TokyoTyrantTable is considered an error and an
     * TokyoTyrantException will be thrown.
     *
     * @param mixed
     * @param string
     * @return void
     **/
    function putNr($keys, $value) {}

    /**
     * This method is not supported on table databases. Calling this method
     * through TokyoTyrantTable is considered an error and an
     * TokyoTyrantException will be thrown.
     *
     * @param string
     * @param string
     * @param int
     * @return void
     **/
    function putShl($key, $value, $width) {}

    /**
     * Sets an index on a specified column. The index type is one of the
     * TokyoTyrant::RDBIT_* constants. Passing TokyoTyrant::RDBIT_VOID
     * removes the index.
     *
     * @param string
     * @param int
     * @return void
     **/
    function setIndex($column, $type) {}

}
class UnderflowException extends RuntimeException {
}
class UnexpectedValueException extends RuntimeException {
}
class XMLReader {
    const ATTRIBUTE = 0;
    const CDATA = 0;
    const COMMENT = 0;
    const DEFAULTATTRS = 0;
    const DOC = 0;
    const DOC_FRAGMENT = 0;
    const DOC_TYPE = 0;
    const ELEMENT = 0;
    const END_ELEMENT = 0;
    const END_ENTITY = 0;
    const ENTITY = 0;
    const ENTITY_REF = 0;
    const LOADDTD = 0;
    const NONE = 0;
    const NOTATION = 0;
    const PI = 0;
    const SIGNIFICANT_WHITESPACE = 0;
    const SUBST_ENTITIES = 0;
    const TEXT = 0;
    const VALIDATE = 0;
    const WHITESPACE = 0;
    const XML_DECLARATION = 0;
    /**
     * Closes the input the XMLReader object is currently parsing.
     *
     * @return bool
     **/
    function close() {}

    /**
     * This method copies the current node and returns the appropriate DOM
     * object.
     *
     * @return DOMNode
     **/
    function expand() {}

    /**
     * Returns the value of a named attribute or an empty string if attribute
     * does not exist or not positioned on an element node.
     *
     * @param string
     * @return string
     **/
    function getAttribute($name) {}

    /**
     * Returns the value of an attribute based on its position or an empty
     * string if attribute does not exist or not positioned on an element
     * node.
     *
     * @param int
     * @return string
     **/
    function getAttributeNo($index) {}

    /**
     * Returns the value of an attribute by name and namespace URI or an
     * empty string if attribute does not exist or not positioned on an
     * element node.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getAttributeNs($localName, $namespaceURI) {}

    /**
     * Indicates if specified property has been set.
     *
     * @param int
     * @return bool
     **/
    function getParserProperty($property) {}

    /**
     * Returns a boolean indicating if the document being parsed is currently
     * valid.
     *
     * @return bool
     **/
    function isValid() {}

    /**
     * Lookup in scope namespace for a given prefix.
     *
     * @param string
     * @return bool
     **/
    function lookupNamespace($prefix) {}

    /**
     * Positions cursor on the named attribute.
     *
     * @param string
     * @return bool
     **/
    function moveToAttribute($name) {}

    /**
     * Positions cursor on attribute based on its position.
     *
     * @param int
     * @return bool
     **/
    function moveToAttributeNo($index) {}

    /**
     * Positions cursor on the named attribute in specified namespace.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function moveToAttributeNs($localName, $namespaceURI) {}

    /**
     * Moves cursor to the parent Element of current Attribute.
     *
     * @return bool
     **/
    function moveToElement() {}

    /**
     * Moves cursor to the first Attribute.
     *
     * @return bool
     **/
    function moveToFirstAttribute() {}

    /**
     * Moves cursor to the next Attribute if positioned on an Attribute or
     * moves to first attribute if positioned on an Element.
     *
     * @return bool
     **/
    function moveToNextAttribute() {}

    /**
     * Positions cursor on the next node skipping all subtrees.
     *
     * @param string
     * @return bool
     **/
    function next($localname) {}

    /**
     * Set the URI containing the XML document to be parsed.
     *
     * @param string
     * @param string
     * @param int
     * @return bool
     **/
    function open($URI, $encoding, $options) {}

    /**
     * Moves cursor to the next node in the document.
     *
     * @return bool
     **/
    function read() {}

    /**
     * Reads the contents of the current node, including child nodes and
     * markup.
     *
     * @return string
     **/
    function readInnerXML() {}

    /**
     * Reads the contents of the current node, including the node itself.
     *
     * @return string
     **/
    function readOuterXML() {}

    /**
     * Reads the contents of the current node as an string.
     *
     * @return string
     **/
    function readString() {}

    /**
     * Set or Unset parser option for the parser. The options must be set
     * after xmlreader-open or xmlreader-xml are called and before the first
     * xmlreader-read call.
     *
     * @param int
     * @param bool
     * @return bool
     **/
    function setParserProperty($property, $value) {}

    /**
     * Set the filename or URI for the RelaxNG Schema to use for validation.
     *
     * @param string
     * @return bool
     **/
    function setRelaxNGSchema($filename) {}

    /**
     * Set the data containing a RelaxNG Schema to use for validation.
     *
     * @param string
     * @return bool
     **/
    function setRelaxNGSchemaSource($source) {}

    /**
     * Use W3C XSD schema to validate the document as it is processed.
     * Activation is only possible before the first Read().
     *
     * @param string
     * @return bool
     **/
    function setSchema($filename) {}

    /**
     * Set the data containing the XML to parse.
     *
     * @param string
     * @param string
     * @param int
     * @return bool
     **/
    function xml($source, $encoding, $options) {}

}
class XMLWriter {
    /**
     * 
     * 
     * 
     * 
     * Ends the current attribute.
     *
     * @return bool
     **/
    function endAttribute() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current CDATA section.
     *
     * @return bool
     **/
    function endCData() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current comment.
     *
     * @return bool
     **/
    function endComment() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current document.
     *
     * @return bool
     **/
    function endDocument() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the DTD of the document.
     *
     * @return bool
     **/
    function endDTD() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current DTD attribute list.
     *
     * @return bool
     **/
    function endDTDAttlist() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current DTD element.
     *
     * @return bool
     **/
    function endDTDElement() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current DTD entity.
     *
     * @return bool
     **/
    function endDTDEntity() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current element.
     *
     * @return bool
     **/
    function endElement() {}

    /**
     * 
     * 
     * 
     * 
     * Ends the current processing instruction.
     *
     * @return bool
     **/
    function endPI() {}

    /**
     * 
     * 
     * 
     * 
     * Flushes the current buffer.
     *
     * @param bool
     * @return mixed
     **/
    function flush($empty) {}

    /**
     * 
     * 
     * 
     * 
     * End the current xml element. Writes an end tag even if the element is
     * empty.
     *
     * @return bool
     **/
    function fullEndElement() {}

    /**
     * 
     * 
     * 
     * 
     * Creates a new XMLWriter using memory for string output.
     *
     * @return bool
     **/
    function openMemory() {}

    /**
     * 
     * 
     * 
     * 
     * Creates a new XMLWriter using uri for the output.
     *
     * @param string
     * @return bool
     **/
    function openURI($uri) {}

    /**
     * 
     * 
     * 
     * 
     * Returns the current buffer.
     *
     * @param bool
     * @return string
     **/
    function outputMemory($flush) {}

    /**
     * 
     * 
     * 
     * 
     * Toggles indentation on or off.
     *
     * @param bool
     * @return bool
     **/
    function setIndent($indent) {}

    /**
     * 
     * 
     * 
     * 
     * Sets the string which will be used to indent each element/attribute of
     * the resulting xml.
     *
     * @param string
     * @return bool
     **/
    function setIndentString($indentString) {}

    /**
     * 
     * 
     * 
     * 
     * Starts an attribute.
     *
     * @param string
     * @return bool
     **/
    function startAttribute($name) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a namespaced attribute.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function startAttributeNS($prefix, $name, $uri) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a CDATA.
     *
     * @return bool
     **/
    function startCData() {}

    /**
     * 
     * 
     * 
     * 
     * Starts a comment.
     *
     * @return bool
     **/
    function startComment() {}

    /**
     * 
     * 
     * 
     * 
     * Starts a document.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function startDocument($version, $encoding, $standalone) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a DTD.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function startDTD($qualifiedName, $publicId, $systemId) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a DTD attribute list.
     *
     * @param string
     * @return bool
     **/
    function startDTDAttlist($name) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a DTD element.
     *
     * @param string
     * @return bool
     **/
    function startDTDElement($qualifiedName) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a DTD entity.
     *
     * @param string
     * @param bool
     * @return bool
     **/
    function startDTDEntity($name, $isparam) {}

    /**
     * 
     * 
     * 
     * 
     * Starts an element.
     *
     * @param string
     * @return bool
     **/
    function startElement($name) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a namespaced element.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function startElementNS($prefix, $name, $uri) {}

    /**
     * 
     * 
     * 
     * 
     * Starts a processing instruction tag.
     *
     * @param string
     * @return bool
     **/
    function startPI($target) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a text.
     *
     * @param string
     * @return bool
     **/
    function text($content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full attribute.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function writeAttribute($name, $value) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full namespaced attribute.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function writeAttributeNS($prefix, $name, $uri, $content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full CDATA.
     *
     * @param string
     * @return bool
     **/
    function writeCData($content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full comment.
     *
     * @param string
     * @return bool
     **/
    function writeComment($content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full DTD.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function writeDTD($name, $publicId, $systemId, $subset) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a DTD attribute list.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function writeDTDAttlist($name, $content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full DTD element.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function writeDTDElement($name, $content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full DTD entity.
     *
     * @param string
     * @param string
     * @param bool
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function writeDTDEntity($name, $content, $pe, $pubid, $sysid, $ndataid) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full element tag.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function writeElement($name, $content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a full namespaced element tag.
     *
     * @param string
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function writeElementNS($prefix, $name, $uri, $content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a processing instruction.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function writePI($target, $content) {}

    /**
     * 
     * 
     * 
     * 
     * Writes a raw xml text.
     *
     * @param string
     * @return bool
     **/
    function writeRaw($content) {}

}
class XPathContext {
    /**
     * The optional contextnode can be specified for doing relative XPath
     * queries.
     * 
     * See also xpath_new_context.
     *
     * @param string
     * @param domnode
     * @return XPathObject
     **/
    function xpath_eval($xpath_expression, $contextnode) {}

    /**
     * xpath_eval_expression Example
     * 
     * See also xpath_eval.
     *
     * @param string
     * @param domnode
     * @return XPathObject
     **/
    function xpath_eval_expression($expression, $contextnode) {}

    /**
     * @param string
     * @param domnode
     * @return int
     **/
    function xptr_eval($eval_str, $contextnode) {}

}
class XSLTProcessor {
    /**
     * Gets a parameter if previously set by XSLTProcessor::setParameter.
     *
     * @param string
     * @param string
     * @return string
     **/
    function getParameter($namespaceURI, $localName) {}

    /**
     * This method determine if PHP was built with the EXSLT library.
     *
     * @return bool
     **/
    function hasExsltSupport() {}

    /**
     * This method import the stylesheet into the XSLTProcessor for
     * transformations.
     *
     * @param DOMDocument
     * @return void
     **/
    function importStylesheet($stylesheet) {}

    /**
     * This method enables the ability to use PHP functions as XSLT functions
     * within XSL stylesheets.
     *
     * @param mixed
     * @return void
     **/
    function registerPHPFunctions($restrict) {}

    /**
     * Removes a parameter, if set. This will make the processor use the
     * default value for the parameter as specified in the stylesheet.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function removeParameter($namespaceURI, $localName) {}

    /**
     * Sets the value of one or more parameters to be used in subsequent
     * transformations with XSLTProcessor. If the parameter doesn't exist in
     * the stylesheet it will be ignored.
     *
     * @param string
     * @param string
     * @param string
     * @return bool
     **/
    function setParameter($namespace, $name, $value) {}

    /**
     * Sets the file to output profiling information when processing a
     * stylesheet.
     *
     * @param string
     * @return bool
     **/
    function setProfiling($filename) {}

    /**
     * Transforms the source node to a DOMDocument applying the stylesheet
     * given by the XSLTProcessor::importStylesheet method.
     *
     * @param DOMNode
     * @return DOMDocument
     **/
    function transformToDoc($doc) {}

    /**
     * Transforms the source node to an URI applying the stylesheet given by
     * the XSLTProcessor::importStylesheet method.
     *
     * @param DOMDocument
     * @param string
     * @return int
     **/
    function transformToURI($doc, $uri) {}

    /**
     * Transforms the source node to a string applying the stylesheet given
     * by the xsltprocessor::importStylesheet method.
     *
     * @param DOMDocument
     * @return string
     **/
    function transformToXML($doc) {}

}
class ZIPARCHIVE {
    const CHECKCONS = 0;
    const CM_BZIP2 = 0;
    const CM_DEFAULT = 0;
    const CM_DEFLATE = 0;
    const CM_DEFLATE64 = 0;
    const CM_IMPLODE = 0;
    const CM_PKWARE_IMPLODE = 0;
    const CM_REDUCE_1 = 0;
    const CM_REDUCE_2 = 0;
    const CM_REDUCE_3 = 0;
    const CM_REDUCE_4 = 0;
    const CM_SHRINK = 0;
    const CM_STORE = 0;
    const CREATE = 0;
    const ER_CHANGED = '';
    const ER_CLOSE = 0;
    const ER_COMPNOTSUPP = 0;
    const ER_CRC = 0;
    const ER_DELETED = 0;
    const ER_EOF = 0;
    const ER_EXISTS = 0;
    const ER_INCONS = 0;
    const ER_INTERNAL = 0;
    const ER_INVAL = 0;
    const ER_MEMORY = 0;
    const ER_MULTIDISK = 0;
    const ER_NOENT = 0;
    const ER_NOZIP = 0;
    const ER_OK = 0;
    const ER_OPEN = 0;
    const ER_READ = 0;
    const ER_REMOVE = 0;
    const ER_RENAME = 0;
    const ER_SEEK = 0;
    const ER_TMPOPEN = 0;
    const ER_WRITE = 0;
    const ER_ZIPCLOSED = 0;
    const ER_ZLIB = 0;
    const EXCL = 0;
    const FL_COMPRESSED = 0;
    const FL_NOCASE = 0;
    const FL_NODIR = 0;
    const FL_UNCHANGED = 0;
    const OVERWRITE = 0;
    /**
     * Adds an empty directory in the archive.
     *
     * @param string
     * @return bool
     **/
    function addEmptyDir($dirname) {}

    /**
     * Adds a file to a ZIP archive from a given path
     *
     * @param string
     * @param string
     * @return bool
     **/
    function addFile($filename, $localname) {}

    /**
     * Add a file to a ZIP archive using its contents.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function addFromString($localname, $contents) {}

    /**
     * Close opened or created archive and save changes. This method is
     * automatically called at the end of the script.
     *
     * @return bool
     **/
    function close() {}

    /**
     * Delete an entry in the archive using its index.
     *
     * @param int
     * @return bool
     **/
    function deleteIndex($index) {}

    /**
     * Delete an entry in the archive using its name.
     *
     * @param string
     * @return bool
     **/
    function deleteName($name) {}

    /**
     * Extract the complete archive or the given files to the specified
     * destination.
     *
     * @param string
     * @param mixed
     * @return bool
     **/
    function extractTo($destination, $entries) {}

    /**
     * Returns the Zip archive comment.
     *
     * @return string
     **/
    function getArchiveComment() {}

    /**
     * Returns the comment of an entry using the entry index.
     *
     * @param int
     * @param int
     * @return string
     **/
    function getCommentIndex($index, $flags) {}

    /**
     * Returns the comment of an entry using the entry name.
     *
     * @param string
     * @param int
     * @return string
     **/
    function getCommentName($name, $flags) {}

    /**
     * Returns the entry contents using its index.
     *
     * @param int
     * @param int
     * @return mixed
     **/
    function getFromIndex($index, $flags) {}

    /**
     * Returns the entry contents using its name.
     *
     * @param string
     * @param int
     * @return mixed
     **/
    function getFromName($name, $flags) {}

    /**
     * Returns the name of an entry using its index.
     *
     * @param int
     * @return string
     **/
    function getNameIndex($index) {}

    /**
     * Returns the status error message, system and/or zip messages.
     *
     * @return string
     **/
    function getStatusString() {}

    /**
     * Get a file handler to the entry defined by its name. For now it only
     * supports read operations.
     *
     * @param string
     * @return resource
     **/
    function getStream($name) {}

    /**
     * Locates an entry using its name.
     *
     * @param string
     * @param int
     * @return mixed
     **/
    function locateName($name, $flags) {}

    /**
     * Opens a new zip archive for reading, writing or modifying.
     *
     * @param string
     * @param int
     * @return mixed
     **/
    function open($filename, $flags) {}

    /**
     * Renames an entry defined by its index.
     *
     * @param int
     * @param string
     * @return bool
     **/
    function renameIndex($index, $newname) {}

    /**
     * Renames an entry defined by its name.
     *
     * @param string
     * @param string
     * @return bool
     **/
    function renameName($name, $newname) {}

    /**
     * Set the comment of a ZIP archive.
     *
     * @param string
     * @return mixed
     **/
    function setArchiveComment($comment) {}

    /**
     * Set the comment of an entry defined by its index.
     *
     * @param int
     * @param string
     * @return mixed
     **/
    function setCommentIndex($index, $comment) {}

    /**
     * Set the comment of an entry defined by its name.
     *
     * @param string
     * @param string
     * @return mixed
     **/
    function setCommentName($name, $comment) {}

    /**
     * The function obtains information about the entry defined by its index.
     *
     * @param int
     * @param int
     * @return mixed
     **/
    function statIndex($index, $flags) {}

    /**
     * The function obtains information about the entry defined by its name.
     *
     * @param name
     * @param int
     * @return mixed
     **/
    function statName($name, $flags) {}

    /**
     * Undo all changes done in the archive.
     *
     * @return mixed
     **/
    function unchangeAll() {}

    /**
     * Revert all global changes to the archive archive. For now, this only
     * reverts archive comment changes.
     *
     * @return mixed
     **/
    function unchangeArchive() {}

    /**
     * Revert all changes done to an entry at the given index.
     *
     * @param int
     * @return mixed
     **/
    function unchangeIndex($index) {}

    /**
     * Revert all changes done to an entry.
     *
     * @param string
     * @return mixed
     **/
    function unchangeName($name) {}

}
define('ABDAY_1', 0);
define('ABDAY_2', 0);
define('ABDAY_3', 0);
define('ABDAY_4', 0);
define('ABDAY_5', 0);
define('ABDAY_6', 0);
define('ABDAY_7', 0);
define('ABMON_1', 0);
define('ABMON_2', 0);
define('ABMON_3', 0);
define('ABMON_4', 0);
define('ABMON_5', 0);
define('ABMON_6', 0);
define('ABMON_7', 0);
define('ABMON_8', 0);
define('ABMON_9', 0);
define('ABMON_10', 0);
define('ABMON_11', 0);
define('ABMON_12', 0);
define('AF_INET', 0);
define('AF_INET6', 0);
define('AF_UNIX', 0);
define('ALC_FREQUENCY', 0);
define('ALC_REFRESH', 0);
define('ALC_SYNC', 0);
define('ALT_DIGITS', 0);
define('AL_BITS', 0);
define('AL_BUFFER', 0);
define('AL_CHANNELS', 0);
define('AL_CONE_INNER_ANGLE', 0);
define('AL_CONE_OUTER_ANGLE', 0);
define('AL_CONE_OUTER_GAIN', 0);
define('AL_DIRECTION', 0);
define('AL_FALSE', 0);
define('AL_FORMAT_MONO8', 0);
define('AL_FORMAT_MONO16', 0);
define('AL_FORMAT_STEREO8', 0);
define('AL_FORMAT_STEREO16', 0);
define('AL_FREQUENCY', 0);
define('AL_GAIN', 0);
define('AL_INITIAL', 0);
define('AL_LOOPING', 0);
define('AL_MAX_DISTANCE', 0);
define('AL_MAX_GAIN', 0);
define('AL_MIN_GAIN', 0);
define('AL_ORIENTATION', 0);
define('AL_PAUSED', 0);
define('AL_PITCH', 0);
define('AL_PLAYING', 0);
define('AL_POSITION', 0);
define('AL_REFERENCE_DISTANCE', 0);
define('AL_ROLLOFF_FACTOR', 0);
define('AL_SIZE', 0);
define('AL_SOURCE_RELATIVE', 0);
define('AL_SOURCE_STATE', 0);
define('AL_STOPPED', 0);
define('AL_TRUE', 0);
define('AL_VELOCITY', 0);
define('AM_STR', 0);
define('APD_VERSION', '');
define('ARGS_TRACE', 0);
define('ASSERT_ACTIVE', 0);
define('ASSERT_BAIL', 0);
define('ASSERT_CALLBACK', 0);
define('ASSERT_QUIET_EVAL', 0);
define('ASSERT_QUITE_EVAL', 0);
define('ASSERT_WARNING', 0);
define('ASSIGNMENT_TRACE', 0);
define('BBCODE_ARG_DOUBLE_QUOTE', 0);
define('BBCODE_ARG_HTML_QUOTE', 0);
define('BBCODE_ARG_QUOTE_ESCAPING', 0);
define('BBCODE_ARG_SINGLE_QUOTE', 0);
define('BBCODE_AUTO_CORRECT', 0);
define('BBCODE_CORRECT_REOPEN_TAGS', 0);
define('BBCODE_DEFAULT_SMILEYS_OFF', 0);
define('BBCODE_DEFAULT_SMILEYS_ON', 0);
define('BBCODE_DISABLE_TREE_BUILD', 0);
define('BBCODE_FLAGS_ARG_PARSING', 0);
define('BBCODE_FLAGS_CDATA_NOT_ALLOWED', 0);
define('BBCODE_FLAGS_DENY_REOPEN_CHILD', 0);
define('BBCODE_FLAGS_ONE_OPEN_PER_LEVEL', 0);
define('BBCODE_FLAGS_REMOVE_IF_EMPTY', 0);
define('BBCODE_FLAGS_SMILEYS_OFF', 0);
define('BBCODE_FLAGS_SMILEYS_ON', 0);
define('BBCODE_FORCE_SMILEYS_OFF', 0);
define('BBCODE_SET_FLAGS_ADD', 0);
define('BBCODE_SET_FLAGS_REMOVE', 0);
define('BBCODE_SET_FLAGS_SET', 0);
define('BBCODE_SMILEYS_CASE_INSENSITIVE', 0);
define('BBCODE_TYPE_ARG', 0);
define('BBCODE_TYPE_NOARG', 0);
define('BBCODE_TYPE_OPTARG', 0);
define('BBCODE_TYPE_ROOT', 0);
define('BBCODE_TYPE_SINGLE', 0);
define('BSDown', 0.0);
define('BSHitTest', 0.0);
define('BSOver', 0.0);
define('BSUp', 0.0);
define('BUS_ADRALN', 0);
define('BUS_ADRERR', 0);
define('BUS_OBJERR', 0);
define('ButtonEnter', 0);
define('ButtonExit', 0);
define('CAL_DOW_DAYNO', 0);
define('CAL_DOW_LONG', 0);
define('CAL_DOW_SHORT', 0);
define('CAL_FRENCH', 0);
define('CAL_GREGORIAN', 0);
define('CAL_JEWISH', 0);
define('CAL_JULIAN', 0);
define('CAL_MONTH_FRENCH', 0);
define('CAL_MONTH_GREGORIAN_LONG', 0);
define('CAL_MONTH_GREGORIAN_SHORT', 0);
define('CAL_MONTH_JEWISH', 0);
define('CAL_MONTH_JULIAN_LONG', 0);
define('CAL_MONTH_JULIAN_SHORT', 0);
define('CAL_NUM_CALS', 0);
define('CASE_LOWER', 0);
define('CASE_UPPER', 0);
define('CHAR_MAX', 0);
define('CLASSKIT_ACC_PRIVATE', 0);
define('CLASSKIT_ACC_PROTECTED', 0);
define('CLASSKIT_ACC_PUBLIC', 0);
define('CLASSKIT_AGGREGATE_OVERRIDE', 0);
define('CLASSKIT_VERSION', '');
define('CLD_CONTINUED', 0);
define('CLD_DUMPED', 0);
define('CLD_EXITED', 0);
define('CLD_KILLED', 0);
define('CLD_STOPPED', 0);
define('CLD_TRAPPED', 0);
define('CLSCTX_ALL', 0);
define('CLSCTX_INPROC_HANDLER', 0);
define('CLSCTX_INPROC_SERVER', 0);
define('CLSCTX_LOCAL_SERVER', 0);
define('CLSCTX_REMOTE_SERVER', 0);
define('CLSCTX_SERVER', 0);
define('CL_EXPUNGE', 0);
define('CODESET', 0);
define('CONNECTION_ABORTED', 0);
define('CONNECTION_NORMAL', 0);
define('CONNECTION_TIMEOUT', 0);
define('COUNT_NORMAL', 0);
define('COUNT_RECURSIVE', 0);
define('CP_ACP', 0);
define('CP_MACCP', 0);
define('CP_MOVE', 0);
define('CP_OEMCP', 0);
define('CP_SYMBOL', 0);
define('CP_THREAD_ACP', 0);
define('CP_UID', 0);
define('CP_UTF7', 0);
define('CP_UTF8', 0);
define('CREDITS_ALL', 0);
define('CREDITS_DOCS', 0);
define('CREDITS_FULLPAGE', 0);
define('CREDITS_GENERAL', 0);
define('CREDITS_GROUP', 0);
define('CREDITS_MODULES', 0);
define('CREDITS_QA', 0);
define('CREDITS_SAPI', 0);
define('CRNCYSTR', 0);
define('CRYPT_BLOWFISH', 0);
define('CRYPT_EXT_DES', 0);
define('CRYPT_MD5', 0);
define('CRYPT_SALT_LENGTH', 0);
define('CRYPT_STD_DES', 0);
define('CURLOPT_AUTOREFERER', 0);
define('CURLOPT_COOKIESESSION', 0);
define('CURLOPT_DNS_USE_GLOBAL_CACHE', 0);
define('CURRENCY_SYMBOL', 0);
define('CYRUS_CALLBACK_NOLITERAL', 0);
define('CYRUS_CALLBACK_NUMBERED', 0);
define('CYRUS_CONN_INITIALRESPONSE', 0);
define('CYRUS_CONN_NONSYNCLITERAL', 0);
define('DAY_1', 0);
define('DAY_2', 0);
define('DAY_3', 0);
define('DAY_4', 0);
define('DAY_5', 0);
define('DAY_6', 0);
define('DAY_7', 0);
define('DB2_AUTOCOMMIT_OFF', 0);
define('DB2_AUTOCOMMIT_ON', 0);
define('DB2_BINARY', 0);
define('DB2_CASE_LOWER', 0);
define('DB2_CASE_NATURAL', 0);
define('DB2_CASE_UPPER', 0);
define('DB2_CHAR', 0);
define('DB2_CONVERT', 0);
define('DB2_DEFERRED_PREPARE_OFF', 0);
define('DB2_DEFERRED_PREPARE_ON', 0);
define('DB2_DOUBLE', 0);
define('DB2_FORWARD_ONLY', 0);
define('DB2_LONG', 0);
define('DB2_PARAM_FILE', 0);
define('DB2_PARAM_IN', 0);
define('DB2_PARAM_INOUT', 0);
define('DB2_PARAM_OUT', 0);
define('DB2_PASSTHRU', 0);
define('DB2_SCROLLABLE', 0);
/**
 * The server can't close
 **/
define('DBPLUS_ERR_CLOSE', 0);
/**
 * A client sent a corrupt tuple
 **/
define('DBPLUS_ERR_CORRUPT_TUPLE', 0);
/**
 * Invalid crc in the superpage
 **/
define('DBPLUS_ERR_CRC', 0);
/**
 * Create() system call failed
 **/
define('DBPLUS_ERR_CREATE', 0);
/**
 * Error in the parser
 **/
define('DBPLUS_ERR_DBPARSE', 0);
/**
 * Exit condition caused by prexit() * procedure
 **/
define('DBPLUS_ERR_DBPREEXIT', 0);
/**
 * Run error in db
 **/
define('DBPLUS_ERR_DBRUNERR', 0);
/**
 * Tried to insert a duplicate tuple
 **/
define('DBPLUS_ERR_DUPLICATE', 0);
/**
 * Relation is empty (server)
 **/
define('DBPLUS_ERR_EMPTY', 0);
/**
 * End of scan from rget()
 **/
define('DBPLUS_ERR_EOSCAN', 0);
/**
 * Can't create a fifo
 **/
define('DBPLUS_ERR_FIFO', 0);
/**
 * Tuple exceeds maximum length
 **/
define('DBPLUS_ERR_LENGTH', 0);
/**
 * Relation was already locked
 **/
define('DBPLUS_ERR_LOCKED', 0);
/**
 * Lseek() system call failed
 **/
define('DBPLUS_ERR_LSEEK', 0);
/**
 * File is not a relation
 **/
define('DBPLUS_ERR_MAGIC', 0);
/**
 * Malloc() call failed
 **/
define('DBPLUS_ERR_MALLOC', 0);
/**
 * Too many secondary indices
 **/
define('DBPLUS_ERR_NIDX', 0);
/**
 * Null error condition
 **/
define('DBPLUS_ERR_NOERR', 0);
/**
 * Relation cannot be locked
 **/
define('DBPLUS_ERR_NOLOCK', 0);
/**
 * Error use of max users
 **/
define('DBPLUS_ERR_NUSERS', 0);
/**
 * Caused by a signal
 **/
define('DBPLUS_ERR_ONTRAP', 0);
/**
 * Open() system call failed
 **/
define('DBPLUS_ERR_OPEN', 0);
/**
 * The server should not really die but after a disaster
 * send ERR_PANIC to all its clients
 **/
define('DBPLUS_ERR_PANIC', 0);
/**
 * Permission denied
 **/
define('DBPLUS_ERR_PERM', 0);
/**
 * Relation uses a different page size
 **/
define('DBPLUS_ERR_PGSIZE', 0);
/**
 * Piped relation requires lseek()
 **/
define('DBPLUS_ERR_PIPE', 0);
/**
 * Caused by invalid usage
 **/
define('DBPLUS_ERR_PREEXIT', 0);
/**
 * Error in the preprocessor
 **/
define('DBPLUS_ERR_PREPROC', 0);
/**
 * Read error on relation
 **/
define('DBPLUS_ERR_READ', 0);
/**
 * Only two users
 **/
define('DBPLUS_ERR_RESTRICTED', 0);
/**
 * TCL_error
 **/
define('DBPLUS_ERR_TCL', 0);
define('DBPLUS_ERR_UNKNOWN', 0);
/**
 * An error in the use of the library by an application
 * programmer
 **/
define('DBPLUS_ERR_USER', 0);
/**
 * File is a very old relation
 **/
define('DBPLUS_ERR_VERSION', 0);
/**
 * Wait a little (Simple only)
 **/
define('DBPLUS_ERR_WAIT', 0);
/**
 * The Simple routines encountered a non fatal error which was
 * corrected
 **/
define('DBPLUS_ERR_WARNING0', 0);
/**
 * The record is write locked
 **/
define('DBPLUS_ERR_WLOCKED', 0);
/**
 * Relation already opened for writing
 **/
define('DBPLUS_ERR_WOPEN', 0);
/**
 * Write error on relation
 **/
define('DBPLUS_ERR_WRITE', 0);
define('DBX_CMP_ASC', 0);
define('DBX_CMP_DESC', 0);
define('DBX_CMP_NATIVE', 0);
define('DBX_CMP_NUMBER', 0);
define('DBX_CMP_TEXT', 0);
define('DBX_COLNAMES_LOWERCASE', 0);
define('DBX_COLNAMES_UNCHANGED', 0);
define('DBX_COLNAMES_UPPERCASE', 0);
define('DBX_FBSQL', 0);
define('DBX_MSSQL', 0);
define('DBX_MYSQL', 0);
define('DBX_OCI8', 0);
define('DBX_ODBC', 0);
define('DBX_PERSISTENT', 0);
define('DBX_PGSQL', 0);
define('DBX_RESULT_ASSOC', 0);
define('DBX_RESULT_INDEX', 0);
define('DBX_RESULT_INFO', 0);
define('DBX_RESULT_UNBUFFERED', 0);
define('DBX_SQLITE', 0);
define('DBX_SYBASECT', 0);
define('DC_BORLAND', 0);
define('DC_CALL_CDECL', 0);
define('DC_CALL_STD', 0);
define('DC_CALL_STD_BO', 0);
define('DC_CALL_STD_M8', 0);
define('DC_CALL_STD_MS', 0);
define('DC_FLAG_ARGPTR', 0);
define('DC_MICROSOFT', 0);
define('DC_RETVAL_MATH4', 0);
define('DC_RETVAL_MATH8', 0);
define('DECIMAL_POINT', 0);
define('DEFAULT_INCLUDE_PATH', '');
define('DIRECTORY_SEPARATOR', '');
define('DISP_E_DIVBYZERO', 0);
define('DISP_E_OVERFLOW', 0);
define('DNS_A', 0);
define('DNS_AAAA', 0);
define('DNS_ALL', 0);
define('DNS_ANY', 0);
define('DNS_CNAME', 0);
define('DNS_HINFO', 0);
define('DNS_MX', 0);
define('DNS_NS', 0);
define('DNS_PTR', 0);
define('DNS_SOA', 0);
define('DNS_TXT', 0);
define('DOMSTRING_SIZE_ERR', 0);
/**
 * If any node is inserted somewhere it doesn't belong
 **/
define('DOM_HIERARCHY_REQUEST_ERR', 0);
/**
 * If index or size is negative, or greater than the allowed value.
 **/
define('DOM_INDEX_SIZE_ERR', 0);
/**
 * If an attempt is made to add an attribute that is already in use elsewhere.
 **/
define('DOM_INUSE_ATTRIBUTE_ERR', 0);
/**
 * If a parameter or an operation is not supported by the underlying object.
 **/
define('DOM_INVALID_ACCESS_ERR', 0);
/**
 * If an invalid or illegal character is specified, such as in a name.
 **/
define('DOM_INVALID_CHARACTER_ERR', 0);
/**
 * If an attempt is made to modify the type of the underlying object.
 **/
define('DOM_INVALID_MODIFICATION_ERR', 0);
/**
 * If an attempt is made to use an object that is not, or is no longer, usable.
 **/
define('DOM_INVALID_STATE_ERR', 0);
/**
 * If an attempt is made to create or change an object in a way which is 
 * incorrect with regard to namespaces.
 **/
define('DOM_NAMESPACE_ERR', 0);
/**
 * If an attempt is made to reference a node in a context where it does not exist.
 **/
define('DOM_NOT_FOUND_ERR', 0);
/**
 * If the implementation does not support the requested type of object or operation.
 **/
define('DOM_NOT_SUPPORTED_ERR', 0);
/**
 * If data is specified for a node which does not support data.
 **/
define('DOM_NO_DATA_ALLOWED_ERR', 0);
/**
 * If an attempt is made to modify an object where modifications are not allowed.
 **/
define('DOM_NO_MODIFICATION_ALLOWED_ERR', 0);
/**
 * Error code not part of the DOM specification. Meant for PHP errors.
 **/
define('DOM_PHP_ERR', 0);
/**
 * If an invalid or illegal string is specified.
 **/
define('DOM_SYNTAX_ERR', 0);
/**
 * If a call to a method such as insertBefore or removeChild would make the Node
 * invalid with respect to "partial validity", this exception would be raised and 
 * the operation would not be done.
 **/
define('DOM_VALIDATION_ERR', 0);
/**
 * If a node is used in a different document than the one that created it.
 **/
define('DOM_WRONG_DOCUMENT_ERR', 0);
define('D_FMT', 0);
define('D_T_FMT', 0);
define('ENC7BIT', 0);
define('ENC8BIT', 0);
define('ENCBASE64', 0);
define('ENCBINARY', 0);
define('ENCOTHER', 0);
define('ENCQUOTEDPRINTABLE', 0);
define('ENT_COMPAT', 0);
define('ENT_NOQUOTES', 0);
define('ENT_QUOTES', 0);
define('ERA', 0);
define('ERA_D_FMT', 0);
define('ERA_D_T_FMT', 0);
define('ERA_T_FMT', 0);
define('ERA_YEAR', 0);
define('ERROR_TRACE', 0);
define('EVLOOP_NONBLOCK', 0);
define('EVLOOP_ONCE', 0);
define('EV_PERSIST', 0);
define('EV_READ', 0);
define('EV_SIGNAL', 0);
define('EV_TIMEOUT', 0);
define('EV_WRITE', 0);
define('EXP_EOF', 0);
define('EXP_EXACT', 0);
define('EXP_FULLBUFFER', 0);
define('EXP_GLOB', 0);
define('EXP_REGEXP', 0);
define('EXP_TIMEOUT', 0);
define('EXTR_IF_EXISTS', 0);
define('EXTR_OVERWRITE', 0);
define('EXTR_PREFIX_ALL', 0);
define('EXTR_PREFIX_IF_EXISTS', 0);
define('EXTR_PREFIX_INVALID', 0);
define('EXTR_PREFIX_SAME', 0);
define('EXTR_REFS', 0);
define('EXTR_SKIP', 0);
/**
 * 32767 in PHP 6,
 * 30719 in PHP 5.3.x,
 * 6143 in PHP 5.2.x,
 * 2047 previously
 **/
define('E_ALL', 0);
/**
 * since PHP 4
 **/
define('E_COMPILE_ERROR', 0);
/**
 * since PHP 4
 **/
define('E_COMPILE_WARNING', 0);
/**
 * since PHP 4
 **/
define('E_CORE_ERROR', 0);
/**
 * since PHP 4
 **/
define('E_CORE_WARNING', 0);
/**
 * since PHP 5.3.0
 **/
define('E_DEPRECATED', 0);
define('E_ERROR', 0);
define('E_NOTICE', 0);
define('E_PARSE', 0);
/**
 * since PHP 5.2.0
 **/
define('E_RECOVERABLE_ERROR', 0);
/**
 * since PHP 5
 **/
define('E_STRICT', 0);
/**
 * since PHP 5.3.0
 **/
define('E_USER_DEPRECATED', 0);
/**
 * since PHP 4
 **/
define('E_USER_ERROR', 0);
/**
 * since PHP 4
 **/
define('E_USER_NOTICE', 0);
/**
 * since PHP 4
 **/
define('E_USER_WARNING', 0);
define('E_WARNING', 0);
define('FAMAcknowledge', 0);
define('FAMChanged', 0);
define('FAMCreated', 0);
define('FAMDeleted', 0);
define('FAMEndExist', 0);
define('FAMExists', 0);
define('FAMMoved', 0);
define('FAMStartExecuting', 0);
define('FAMStopExecuting', 0);
define('FBSQL_ASSOC', 0);
define('FBSQL_BOTH', 0);
define('FBSQL_ISO_READ_COMMITTED', 0);
define('FBSQL_ISO_READ_UNCOMMITTED', 0);
define('FBSQL_ISO_REPEATABLE_READ', 0);
define('FBSQL_ISO_SERIALIZABLE', 0);
define('FBSQL_ISO_VERSIONED', 0);
define('FBSQL_LOB_DIRECT', 0);
define('FBSQL_LOB_HANDLE', 0);
define('FBSQL_LOCK_DEFERRED', 0);
define('FBSQL_LOCK_OPTIMISTIC', 0);
define('FBSQL_LOCK_PESSIMISTIC', 0);
define('FBSQL_NOEXEC', 0);
define('FBSQL_NUM', 0);
define('FBSQL_RUNNING', 0);
define('FBSQL_STARTING', 0);
define('FBSQL_STOPPED', 0);
define('FBSQL_STOPPING', 0);
define('FBSQL_UNKNOWN', 0);
define('FDFAA', 0);
define('FDFAction', 0);
define('FDFAP', 0);
define('FDFAPRef', 0);
define('FDFAS', 0);
define('FDFCalculate', 0);
define('FDFClearFf', 0);
define('FDFClrF', 0);
define('FDFDown', 0);
define('FDFDownAP', 0);
define('FDFEnter', 0);
define('FDFExit', 0);
define('FDFFf', 0);
define('FDFFile', 0);
define('FDFFlags', 0);
define('FDFFormat', 0);
define('FDFID', 0);
define('FDFIF', 0);
define('FDFKeystroke', 0);
define('FDFNormalAP', 0);
define('FDFRolloverAP', 0);
define('FDFSetF', 0);
define('FDFSetFf', 0);
define('FDFStatus', 0);
define('FDFUp', 0);
define('FDFValidate', 0);
define('FDFValue', 0);
define('FILEINFO_COMPRESS', 0);
define('FILEINFO_CONTINUE', 0);
define('FILEINFO_DEVICES', 0);
define('FILEINFO_MIME', 0);
define('FILEINFO_MIME_ENCODING', 0);
define('FILEINFO_MIME_TYPE', 0);
define('FILEINFO_NONE', 0);
define('FILEINFO_PRESERVE_ATIME', 0);
define('FILEINFO_RAW', 0);
define('FILEINFO_SYMLINK', 0);
define('FILE_APPEND', 0);
define('FILE_BINARY', 0);
define('FILE_IGNORE_NEW_LINES', 0);
define('FILE_NO_DEFAULT_CONTEXT', 0);
define('FILE_SKIP_EMPTY_LINES', 0);
define('FILE_TEXT', 0);
define('FILE_USE_INCLUDE_PATH', 0);
define('FILTER_CALLBACK', 0);
define('FILTER_DEFAULT', 0);
define('FILTER_FLAG_ALLOW_FRACTION', 0);
define('FILTER_FLAG_ALLOW_HEX', 0);
define('FILTER_FLAG_ALLOW_OCTAL', 0);
define('FILTER_FLAG_ALLOW_SCIENTIFIC', 0);
define('FILTER_FLAG_ALLOW_THOUSAND', 0);
define('FILTER_FLAG_EMPTY_STRING_NULL', 0);
define('FILTER_FLAG_ENCODE_AMP', 0);
define('FILTER_FLAG_ENCODE_HIGH', 0);
define('FILTER_FLAG_ENCODE_LOW', 0);
define('FILTER_FLAG_HOST_REQUIRED', 0);
define('FILTER_FLAG_IPV4', 0);
define('FILTER_FLAG_IPV6', 0);
define('FILTER_FLAG_NONE', 0);
define('FILTER_FLAG_NO_ENCODE_QUOTES', 0);
define('FILTER_FLAG_NO_PRIV_RANGE', 0);
define('FILTER_FLAG_NO_RES_RANGE', 0);
define('FILTER_FLAG_PATH_REQUIRED', 0);
define('FILTER_FLAG_QUERY_REQUIRED', 0);
define('FILTER_FLAG_SCHEME_REQUIRED', 0);
define('FILTER_FLAG_STRIP_HIGH', 0);
define('FILTER_FLAG_STRIP_LOW', 0);
define('FILTER_FORCE_ARRAY', 0);
define('FILTER_NULL_ON_FAILURE', 0);
define('FILTER_REQUIRE_ARRAY', 0);
define('FILTER_REQUIRE_SCALAR', 0);
define('FILTER_SANITIZE_EMAIL', 0);
define('FILTER_SANITIZE_ENCODED', 0);
define('FILTER_SANITIZE_MAGIC_QUOTES', 0);
define('FILTER_SANITIZE_NUMBER_FLOAT', 0);
define('FILTER_SANITIZE_NUMBER_INT', 0);
define('FILTER_SANITIZE_SPECIAL_CHARS', 0);
define('FILTER_SANITIZE_STRING', 0);
define('FILTER_SANITIZE_STRIPPED', 0);
define('FILTER_SANITIZE_URL', 0);
define('FILTER_UNSAFE_RAW', 0);
define('FILTER_VALIDATE_BOOLEAN', 0);
define('FILTER_VALIDATE_EMAIL', 0);
define('FILTER_VALIDATE_FLOAT', 0);
define('FILTER_VALIDATE_INT', 0);
define('FILTER_VALIDATE_IP', 0);
define('FILTER_VALIDATE_REGEXP', 0);
define('FILTER_VALIDATE_URL', 0);
define('FNM_CASEFOLD', 0);
define('FNM_NOESCAPE', 0);
define('FNM_PATHNAME', 0);
define('FNM_PERIOD', 0);
define('FORCE_DEFLATE', 0);
define('FORCE_GZIP', 0);
define('FPE_FLTDIV', 0);
define('FPE_FLTINV', 0);
define('FPE_FLTOVF', 0);
define('FPE_FLTRES', 0);
define('FPE_FLTSUB', 0);
define('FPE_FLTUND', 0);
define('FPE_INTDIV', 0);
define('FPE_INTOVF', 0);
define('FRAC_DIGITS', 0);
define('FRIBIDI_AUTO', 0);
define('FRIBIDI_CHARSET_8859_6', 0);
define('FRIBIDI_CHARSET_8859_8', 0);
define('FRIBIDI_CHARSET_CAP_RTL', 0);
define('FRIBIDI_CHARSET_CP1255', 0);
define('FRIBIDI_CHARSET_CP1256', 0);
define('FRIBIDI_CHARSET_ISIRI_3342', 0);
define('FRIBIDI_CHARSET_UTF8', 0);
define('FRIBIDI_LTR', 0);
define('FRIBIDI_RTL', 0);
define('FTP_ASCII', 0);
define('FTP_BINARY', 0);
define('FTP_IMAGE', 0);
define('FTP_TEXT', 0);
define('FTP_TIMEOUT_SEC', 0);
define('FT_INTERNAL', 0);
define('FT_NOT', 0);
define('FT_PEEK', 0);
define('FT_PREFETCHTEXT', 0);
define('FT_UID', 0);
define('FUNCTION_TRACE', 0);
define('F_DUPFD', 0);
define('F_GETFD', 0);
define('F_GETFL', 0);
define('F_GETLK', 0);
define('F_GETOWN', 0);
define('F_RDLCK', 0);
define('F_SETFL', 0);
define('F_SETLK', 0);
define('F_SETLKW', 0);
define('F_SETOWN', 0);
define('F_UNLCK', 0);
define('F_WRLCK', 0);
define('GD_BUNDLED', 0);
define('GD_EXTRA_VERSION', '');
define('GD_MAJOR_VERSION', 0);
define('GD_MINOR_VERSION', 0);
define('GD_RELEASE_VERSION', 0);
define('GD_VERSION', '');
define('GEOIP_ASNUM_EDITION', 0);
define('GEOIP_CITY_EDITION_REV0', 0);
define('GEOIP_CITY_EDITION_REV1', 0);
define('GEOIP_COUNTRY_EDITION', 0);
define('GEOIP_DOMAIN_EDITION', 0);
define('GEOIP_ISP_EDITION', 0);
define('GEOIP_NETSPEED_EDITION', 0);
define('GEOIP_ORG_EDITION', 0);
define('GEOIP_PROXY_EDITION', 0);
define('GEOIP_REGION_EDITION_REV0', 0);
define('GEOIP_REGION_EDITION_REV1', 0);
define('GLOB_AVAILABLE_FLAGS', 0);
define('GLOB_BRACE', 0);
define('GLOB_MARK', 0);
define('GLOB_NOCHECK', 0);
define('GLOB_NOESCAPE', 0);
define('GLOB_NOSORT', 0);
define('GLOB_ONLYDIR', 0);
define('GMP_ROUND_MINUSINF', 0);
define('GMP_ROUND_PLUSINF', 0);
define('GMP_ROUND_ZERO', 0);
define('GMP_VERSION', '');
define('GNUPG_ERROR_EXCEPTION', 0);
define('GNUPG_ERROR_SILENT', 0);
define('GNUPG_ERROR_WARNING', 0);
define('GNUPG_PROTOCOL_CMS', 0);
define('GNUPG_PROTOCOL_OpenPGP', 0);
define('GNUPG_SIGSUM_BAD_POLICY', 0);
define('GNUPG_SIGSUM_CRL_MISSING', 0);
define('GNUPG_SIGSUM_CRL_TOO_OLD', 0);
define('GNUPG_SIGSUM_GREEN', 0);
define('GNUPG_SIGSUM_KEY_EXPIRED', 0);
define('GNUPG_SIGSUM_KEY_MISSING', 0);
define('GNUPG_SIGSUM_KEY_REVOKED', 0);
define('GNUPG_SIGSUM_RED', 0);
define('GNUPG_SIGSUM_SIG_EXPIRED', 0);
define('GNUPG_SIGSUM_SYS_ERROR', 0);
define('GNUPG_SIGSUM_VALID', 0);
define('GNUPG_SIG_MODE_CLEAR', 0);
define('GNUPG_SIG_MODE_DETACH', 0);
define('GNUPG_SIG_MODE_NORMAL', 0);
define('GNUPG_VALIDITY_FULL', 0);
define('GNUPG_VALIDITY_MARGINAL', 0);
define('GNUPG_VALIDITY_NEVER', 0);
define('GNUPG_VALIDITY_ULTIMATE', 0);
define('GNUPG_VALIDITY_UNDEFINED', 0);
define('GNUPG_VALIDITY_UNKNOWN', 0);
define('GOPHER_BINARY', 0);
define('GOPHER_BINHEX', 0);
define('GOPHER_DIRECTORY', 0);
define('GOPHER_DOCUMENT', 0);
define('GOPHER_DOSBINARY', 0);
define('GOPHER_HTTP', 0);
define('GOPHER_INFO', 0);
define('GOPHER_UNKNOWN', 0);
define('GOPHER_UUENCODED', 0);
define('GROUPING', 0);
define('GSLC_SSL_NO_AUTH', 0);
define('GSLC_SSL_ONEWAY_AUTH', 0);
define('GSLC_SSL_TWOWAY_AUTH', 0);
define('HASH_HMAC', 0);
define('HTML_ENTITIES', 0);
define('HTML_SPECIALCHARS', 0);
define('HTTP_SUPPORT', 0);
define('HTTP_SUPPORT_ENCODINGS', 0);
define('HTTP_SUPPORT_MAGICMIME', 0);
define('HTTP_SUPPORT_REQUESTS', 0);
define('HTTP_SUPPORT_SSLREQUESTS', 0);
define('HW_ATTR_LANG', 0);
define('HW_ATTR_NONE', 0);
define('HW_ATTR_NR', 0);
define('IBASE_REC_VERSION', 0);
define('IBASE_TEXT', 0);
define('ICONV_IMPL', 0);
define('ICONV_MIME_DECODE_CONTINUE_ON_ERROR', 0);
define('ICONV_MIME_DECODE_STRICT', 0);
define('ICONV_VERSION', 0);
define('IdletoOverDown', 0);
define('IdletoOverUp', 0);
define('IFX_HOLD', 0);
define('IFX_LO_APPEND', 0);
define('IFX_LO_BUFFER', 0);
define('IFX_LO_NOBUFFER', 0);
define('IFX_LO_RDONLY', 0);
define('IFX_LO_RDWR', 0);
define('IFX_LO_WRONLY', 0);
define('IFX_SCROLL', 0);
define('IIS_ANONYMOUS', 0);
define('IIS_BASIC', 0);
define('IIS_EXECUTE', 0);
define('IIS_NTLM', 0);
define('IIS_PAUSED', 0);
define('IIS_READ', 0);
define('IIS_RUNNING', 0);
define('IIS_SCRIPT', 0);
define('IIS_STARTING', 0);
define('IIS_STOPPED', 0);
define('IIS_WRITE', 0);
define('ILL_BADSTK', 0);
define('ILL_COPROC', 0);
define('ILL_ILLADR', 0);
define('ILL_ILLOPC', 0);
define('ILL_ILLOPN', 0);
define('ILL_ILLTRP', 0);
define('ILL_PRVOPC', 0);
define('ILL_PRVREG', 0);
define('IMAGETYPE_BMP', 0);
define('IMAGETYPE_GIF', 0);
define('IMAGETYPE_ICO', 0);
define('IMAGETYPE_IFF', 0);
define('IMAGETYPE_JB2', 0);
define('IMAGETYPE_JP2', 0);
define('IMAGETYPE_JPC', 0);
define('IMAGETYPE_JPEG', 0);
define('IMAGETYPE_JPEG2000', 0);
define('IMAGETYPE_JPX', 0);
define('IMAGETYPE_PNG', 0);
define('IMAGETYPE_PSD', 0);
define('IMAGETYPE_SWC', 0);
define('IMAGETYPE_SWF', 0);
define('IMAGETYPE_TIFF_II', 0);
define('IMAGETYPE_TIFF_MM', 0);
define('IMAGETYPE_WBMP', 0);
define('IMAGETYPE_XBM', 0);
define('IMAP_CLOSETIMEOUT', 0);
define('IMAP_GC_ELT', 0);
define('IMAP_GC_ENV', 0);
define('IMAP_GC_TEXTS', 0);
define('IMAP_OPENTIMEOUT', 0);
define('IMAP_READTIMEOUT', 0);
define('IMAP_WRITETIMEOUT', 0);
define('IMG_ARC_CHORD', 0);
define('IMG_ARC_EDGED', 0);
define('IMG_ARC_NOFILL', 0);
define('IMG_ARC_PIE', 0);
define('IMG_ARC_ROUNDED', 0);
define('IMG_COLOR_BRUSHED', 0);
define('IMG_COLOR_STYLED', 0);
define('IMG_COLOR_STYLEDBRUSHED', 0);
define('IMG_COLOR_TILED', 0);
define('IMG_COLOR_TRANSPARENT', 0);
define('IMG_EFFECT_ALPHABLEND', 0);
define('IMG_EFFECT_NORMAL', 0);
define('IMG_EFFECT_OVERLAY', 0);
define('IMG_EFFECT_REPLACE', 0);
define('IMG_FILTER_BRIGHTNESS', 0);
define('IMG_FILTER_COLORIZE', 0);
define('IMG_FILTER_CONTRAST', 0);
define('IMG_FILTER_EDGEDETECT', 0);
define('IMG_FILTER_EMBOSS', 0);
define('IMG_FILTER_GAUSSIAN_BLUR', 0);
define('IMG_FILTER_GRAYSCALE', 0);
define('IMG_FILTER_MEAN_REMOVAL', 0);
define('IMG_FILTER_NEGATE', 0);
define('IMG_FILTER_PIXELATE', 0);
define('IMG_FILTER_SELECTIVE_BLUR', 0);
define('IMG_FILTER_SMOOTH', 0);
define('IMG_GD2_COMPRESSED', 0);
define('IMG_GD2_RAW', 0);
define('IMG_GIF', 0);
define('IMG_JPEG', 0);
define('IMG_JPG', 0);
define('IMG_PNG', 0);
define('IMG_WBMP', 0);
define('IMG_XPM', 0);
define('INF', 0);
define('INFO_ALL', 0);
define('INFO_CONFIGURATION', 0);
define('INFO_CREDITS', 0);
define('INFO_ENVIRONMENT', 0);
define('INFO_GENERAL', 0);
define('INFO_LICENSE', 0);
define('INFO_MODULES', 0);
define('INFO_VARIABLES', 0);
define('INGRES_API_VERSION', 0);
define('INGRES_ASSOC', 0);
define('INGRES_BOTH', 0);
define('INGRES_CURSOR_READONLY', 0);
define('INGRES_CURSOR_UPDATE', 0);
define('INGRES_DATE_DMY', 0);
define('INGRES_DATE_FINNISH', 0);
define('INGRES_DATE_GERMAN', 0);
define('INGRES_DATE_ISO', 0);
define('INGRES_DATE_ISO4', 0);
define('INGRES_DATE_MDY', 0);
define('INGRES_DATE_MULTINATIONAL', 0);
define('INGRES_DATE_MULTINATIONAL4', 0);
define('INGRES_DATE_YMD', 0);
define('INGRES_EXT_VERSION', '');
define('INGRES_MONEY_LEADING', 0);
define('INGRES_MONEY_TRAILING', 0);
define('INGRES_NUM', 0);
define('INGRES_STRUCTURE_BTREE', 0);
define('INGRES_STRUCTURE_CBTREE', 0);
define('INGRES_STRUCTURE_CHASH', 0);
define('INGRES_STRUCTURE_CHEAP', 0);
define('INGRES_STRUCTURE_CISAM', 0);
define('INGRES_STRUCTURE_HASH', 0);
define('INGRES_STRUCTURE_HEAP', 0);
define('INGRES_STRUCTURE_ISAM', 0);
define('INI_ALL', 0);
define('INI_PERDIR', 0);
define('INI_SCANNER_NORMAL', 0);
define('INI_SCANNER_RAW', 0);
define('INI_SYSTEM', 0);
define('INI_USER', 0);
define('INPUT_COOKIE', 0);
define('INPUT_ENV', 0);
define('INPUT_GET', 0);
define('INPUT_POST', 0);
define('INPUT_REQUEST', 0);
define('INPUT_SERVER', 0);
define('INPUT_SESSION', 0);
define('INT_CURR_SYMBOL', 0);
define('INT_FRAC_DIGITS', 0);
define('IN_ACCESS', 0);
define('IN_ALL_EVENTS', 0);
define('IN_ATTRIB', 0);
define('IN_CLOSE', 0);
define('IN_CLOSE_NOWRITE', 0);
define('IN_CLOSE_WRITE', 0);
define('IN_CREATE', 0);
define('IN_DELETE', 0);
define('IN_DELETE_SELF', 0);
define('IN_DONT_FOLLOW', 0);
define('IN_IGNORED', 0);
define('IN_ISDIR', 0);
define('IN_MASK_ADD', 0);
define('IN_MODIFY', 0);
define('IN_MOVE', 0);
define('IN_MOVED_FROM', 0);
define('IN_MOVED_TO', 0);
define('IN_MOVE_SELF', 0);
define('IN_ONESHOT', 0);
define('IN_ONLYDIR', 0);
define('IN_OPEN', 0);
define('IN_Q_OVERFLOW', 0);
define('IN_UNMOUNT', 0);
define('JSON_ERROR_CTRL_CHAR', 0);
define('JSON_ERROR_DEPTH', 0);
define('JSON_ERROR_NONE', 0);
define('JSON_ERROR_SYNTAX', 0);
define('LATT_HASCHILDREN', 0);
define('LATT_HASNOCHILDREN', 0);
define('LATT_MARKED', 0);
define('LATT_NOINFERIORS', 0);
define('LATT_NOSELECT', 0);
define('LATT_REFERRAL', 0);
define('LATT_UNMARKED', 0);
define('LC_ALL', 0);
define('LC_COLLATE', 0);
define('LC_CTYPE', 0);
define('LC_MESSAGES', 0);
define('LC_MONETARY', 0);
define('LC_NUMERIC', 0);
define('LC_TIME', 0);
define('LDAP_DEREF_ALWAYS', 0);
define('LDAP_DEREF_FINDING', 0);
define('LDAP_DEREF_NEVER', 0);
define('LDAP_DEREF_SEARCHING', 0);
define('LDAP_OPT_CLIENT_CONTROLS', 0);
define('LDAP_OPT_DEBUG_LEVEL', 0);
define('LDAP_OPT_DEREF', 0);
define('LDAP_OPT_ERROR_NUMBER', 0);
define('LDAP_OPT_ERROR_STRING', 0);
define('LDAP_OPT_HOST_NAME', 0);
define('LDAP_OPT_MATCHED_DN', 0);
define('LDAP_OPT_NETWORK_TIMEOUT', 0);
define('LDAP_OPT_PROTOCOL_VERSION', 0);
define('LDAP_OPT_REFERRALS', 0);
define('LDAP_OPT_RESTART', 0);
define('LDAP_OPT_SERVER_CONTROLS', 0);
define('LDAP_OPT_SIZELIMIT', 0);
define('LDAP_OPT_TIMELIMIT', 0);
define('LIBEXSLT_DOTTED_VERSION', '');
define('LIBEXSLT_VERSION', 0);
define('LIBXML_COMPACT', 0);
define('LIBXML_DOTTED_VERSION', '');
define('LIBXML_DTDATTR', 0);
define('LIBXML_DTDLOAD', 0);
define('LIBXML_DTDVALID', 0);
define('LIBXML_ERR_ERROR', 0);
define('LIBXML_ERR_FATAL', 0);
define('LIBXML_ERR_NONE', 0);
define('LIBXML_ERR_WARNING', 0);
define('LIBXML_NOBLANKS', 0);
define('LIBXML_NOCDATA', 0);
define('LIBXML_NOEMPTYTAG', 0);
define('LIBXML_NOENT', 0);
define('LIBXML_NOERROR', 0);
define('LIBXML_NONET', 0);
define('LIBXML_NOWARNING', 0);
define('LIBXML_NOXMLDECL', 0);
define('LIBXML_NSCLEAN', 0);
define('LIBXML_VERSION', 0);
define('LIBXML_XINCLUDE', 0);
define('LIBXSLT_DOTTED_VERSION', '');
define('LIBXSLT_VERSION', 0);
define('LOCK_EX', 0);
define('LOCK_NB', 0);
define('LOCK_SH', 0);
define('LOCK_UN', 0);
define('LOG_ALERT', 0);
define('LOG_AUTH', 0);
define('LOG_AUTHPRIV', 0);
define('LOG_CONS', 0);
define('LOG_CRIT', 0);
define('LOG_CRON', 0);
define('LOG_DAEMON', 0);
define('LOG_DEBUG', 0);
define('LOG_EMERG', 0);
define('LOG_ERR', 0);
define('LOG_INFO', 0);
define('LOG_KERN', 0);
define('LOG_LOCAL0 ... LOG_LOCAL7', 0);
define('LOG_LOCAL0', 0);
define('LOG_LOCAL1', 0);
define('LOG_LOCAL2', 0);
define('LOG_LOCAL3', 0);
define('LOG_LOCAL4', 0);
define('LOG_LOCAL5', 0);
define('LOG_LOCAL6', 0);
define('LOG_LOCAL7', 0);
define('LOG_LPR', 0);
define('LOG_MAIL', 0);
define('LOG_NDELAY', 0);
define('LOG_NEWS', 0);
define('LOG_NOTICE', 0);
define('LOG_NOWAIT', 0);
define('LOG_ODELAY', 0);
define('LOG_PERROR', 0);
define('LOG_PID', 0);
define('LOG_SYSLOG', 0);
define('LOG_USER', 0);
define('LOG_UUCP', 0);
define('LOG_WARNING', 0);
define('MAILPARSE_EXTRACT_OUTPUT', 0);
define('MAILPARSE_EXTRACT_RETURN', 0);
define('MAILPARSE_EXTRACT_STREAM', 0);
define('MB_CASE_LOWER', 0);
define('MB_CASE_TITLE', 0);
define('MB_CASE_UPPER', 0);
define('MB_OVERLOAD_MAIL', 0);
define('MB_OVERLOAD_REGEX', 0);
define('MB_OVERLOAD_STRING', 0);
define('MEMCACHE_COMPRESSED', 0);
define('MEMCACHE_HAVE_SESSION', 0);
define('MEMORY_TRACE', 0);
define('MenuEnter', 0);
define('MenuExit', 0);
define('MING_NEW', 0);
define('MING_ZLIB', 0);
define('MK_E_UNAVAILABLE', 0);
define('MOD_COLOR', 0);
define('MOD_MATRIX', 0);
define('MON_1', 0);
define('MON_2', 0);
define('MON_3', 0);
define('MON_4', 0);
define('MON_5', 0);
define('MON_6', 0);
define('MON_7', 0);
define('MON_8', 0);
define('MON_9', 0);
define('MON_10', 0);
define('MON_11', 0);
define('MON_12', 0);
define('MON_DECIMAL_POINT', 0);
define('MON_GROUPING', 0);
define('MON_THOUSANDS_SEP', 0);
define('MSG_DONTROUTE', 0);
define('MSG_EOF', 0);
define('MSG_EOR', 0);
define('MSG_OOB', 0);
define('MSG_PEEK', 0);
define('MSG_WAITALL', 0);
define('MSQL_ASSOC', 0);
define('MSQL_BOTH', 0);
define('MSQL_NUM', 0);
define('MSSQL_ASSOC', 0);
define('MSSQL_BOTH', 0);
define('MSSQL_NUM', 0);
define('MYSQL_ASSOC', 0);
define('MYSQL_BOTH', 0);
define('MYSQL_CLIENT_COMPRESS', 0);
define('MYSQL_CLIENT_IGNORE_SPACE', 0);
define('MYSQL_CLIENT_INTERACTIVE', 0);
define('MYSQL_CLIENT_SSL', 0);
define('MYSQL_NUM', 0);
define('M_1_PI', 0);
define('M_2_PI', 0);
define('M_2_SQRTPI', 0);
define('M_DONE', 0);
define('M_E', 0);
define('M_ERROR', 0);
define('M_EULER', 0);
define('M_FAIL', 0);
define('M_LN2', 0);
define('M_LN10', 0);
define('M_LNPI', 0);
define('M_LOG2E', 0);
define('M_LOG10E', 0);
define('M_PENDING', 0);
define('M_PI', 0);
define('M_PI_2', 0);
define('M_PI_4', 0);
define('M_SQRT1_2', 0);
define('M_SQRT2', 0);
define('M_SQRT3', 0);
define('M_SQRTPI', 0);
define('M_SUCCESS', 0);
define('NAN', 0);
define('NCURSES_ALL_MOUSE_EVENTS', 0);
define('NCURSES_BUTTON1_CLICKED', 0);
define('NCURSES_BUTTON1_DOUBLE_CLICKED', 0);
define('NCURSES_BUTTON1_PRESSED', 0);
define('NCURSES_BUTTON1_RELEASED', 0);
define('NCURSES_BUTTON1_TRIPLE_CLICKED', 0);
define('NCURSES_BUTTON_ALT', 0);
define('NCURSES_BUTTON_CTRL', 0);
define('NCURSES_BUTTON_SHIFT', 0);
define('NCURSES_COLOR_BLACK', 0);
define('NCURSES_COLOR_BLUE', 0);
define('NCURSES_COLOR_CYAN', 0);
define('NCURSES_COLOR_GREEN', 0);
define('NCURSES_COLOR_MAGENTA', 0);
define('NCURSES_COLOR_RED', 0);
define('NCURSES_COLOR_WHITE', 0);
define('NCURSES_COLOR_YELLOW', 0);
define('NCURSES_KEY_A1', 0);
define('NCURSES_KEY_A3', 0);
define('NCURSES_KEY_B2', 0);
define('NCURSES_KEY_BACKSPACE', 0);
define('NCURSES_KEY_BEG', 0);
define('NCURSES_KEY_BTAB', 0);
define('NCURSES_KEY_C1', 0);
define('NCURSES_KEY_C3', 0);
define('NCURSES_KEY_CANCEL', 0);
define('NCURSES_KEY_CATAB', 0);
define('NCURSES_KEY_CLEAR', 0);
define('NCURSES_KEY_CLOSE', 0);
define('NCURSES_KEY_COMMAND', 0);
define('NCURSES_KEY_COPY', 0);
define('NCURSES_KEY_CREATE', 0);
define('NCURSES_KEY_CTAB', 0);
define('NCURSES_KEY_DC', 0);
define('NCURSES_KEY_DL', 0);
define('NCURSES_KEY_DOWN', 0);
define('NCURSES_KEY_EIC', 0);
define('NCURSES_KEY_END', 0);
define('NCURSES_KEY_EOL', 0);
define('NCURSES_KEY_EOS', 0);
define('NCURSES_KEY_EXIT', 0);
define('NCURSES_KEY_F0', 0);
define('NCURSES_KEY_FIND', 0);
define('NCURSES_KEY_HELP', 0);
define('NCURSES_KEY_HOME', 0);
define('NCURSES_KEY_IC', 0);
define('NCURSES_KEY_IL', 0);
define('NCURSES_KEY_LEFT', 0);
define('NCURSES_KEY_LL', 0);
define('NCURSES_KEY_MARK', 0);
define('NCURSES_KEY_MAX', 0);
define('NCURSES_KEY_MESSAGE', 0);
define('NCURSES_KEY_MOUSE', 0);
define('NCURSES_KEY_MOVE', 0);
define('NCURSES_KEY_NEXT', 0);
define('NCURSES_KEY_NPAGE', 0);
define('NCURSES_KEY_OPEN', 0);
define('NCURSES_KEY_OPTIONS', 0);
define('NCURSES_KEY_PPAGE', 0);
define('NCURSES_KEY_PREVIOUS', 0);
define('NCURSES_KEY_PRINT', 0);
define('NCURSES_KEY_REDO', 0);
define('NCURSES_KEY_REFERENCE', 0);
define('NCURSES_KEY_REFRESH', 0);
define('NCURSES_KEY_REPLACE', 0);
define('NCURSES_KEY_RESET', 0);
define('NCURSES_KEY_RESTART', 0);
define('NCURSES_KEY_RESUME', 0);
define('NCURSES_KEY_RIGHT', 0);
define('NCURSES_KEY_SAVE', 0);
define('NCURSES_KEY_SBEG', 0);
define('NCURSES_KEY_SCANCEL', 0);
define('NCURSES_KEY_SCOMMAND', 0);
define('NCURSES_KEY_SCOPY', 0);
define('NCURSES_KEY_SCREATE', 0);
define('NCURSES_KEY_SDC', 0);
define('NCURSES_KEY_SDL', 0);
define('NCURSES_KEY_SELECT', 0);
define('NCURSES_KEY_SEND', 0);
define('NCURSES_KEY_SEOL', 0);
define('NCURSES_KEY_SEXIT', 0);
define('NCURSES_KEY_SF', 0);
define('NCURSES_KEY_SFIND', 0);
define('NCURSES_KEY_SHELP', 0);
define('NCURSES_KEY_SHOME', 0);
define('NCURSES_KEY_SIC', 0);
define('NCURSES_KEY_SLEFT', 0);
define('NCURSES_KEY_SMESSAGE', 0);
define('NCURSES_KEY_SMOVE', 0);
define('NCURSES_KEY_SNEXT', 0);
define('NCURSES_KEY_SOPTIONS', 0);
define('NCURSES_KEY_SPREVIOUS', 0);
define('NCURSES_KEY_SPRINT', 0);
define('NCURSES_KEY_SR', 0);
define('NCURSES_KEY_SREDO', 0);
define('NCURSES_KEY_SREPLACE', 0);
define('NCURSES_KEY_SRESET', 0);
define('NCURSES_KEY_SRIGHT', 0);
define('NCURSES_KEY_SRSUME', 0);
define('NCURSES_KEY_SSAVE', 0);
define('NCURSES_KEY_SSUSPEND', 0);
define('NCURSES_KEY_STAB', 0);
define('NCURSES_KEY_UNDO', 0);
define('NCURSES_KEY_UP', 0);
define('NCURSES_REPORT_MOUSE_POSITION', 0);
define('NEGATIVE_SIGN', 0);
define('NEWT_ANCHOR_BOTTOM', 0);
define('NEWT_ANCHOR_LEFT', 0);
define('NEWT_ANCHOR_RIGHT', 0);
define('NEWT_ANCHOR_TOP', 0);
define('NEWT_ARG_APPEND', 0);
define('NEWT_ARG_LAST', 0);
define('NEWT_CHECKBOXTREE_COLLAPSED', 0);
define('NEWT_CHECKBOXTREE_EXPANDED', 0);
define('NEWT_CHECKBOXTREE_HIDE_BOX', 0);
define('NEWT_CHECKBOXTREE_SELECTED', 0);
define('NEWT_CHECKBOXTREE_UNSELECTABLE', 0);
define('NEWT_CHECKBOXTREE_UNSELECTED', 0);
define('NEWT_COLORSET_ACTBUTTON', 0);
define('NEWT_COLORSET_ACTCHECKBOX', 0);
define('NEWT_COLORSET_ACTLISTBOX', 0);
define('NEWT_COLORSET_ACTSELLISTBOX', 0);
define('NEWT_COLORSET_ACTTEXTBOX', 0);
define('NEWT_COLORSET_BORDER', 0);
define('NEWT_COLORSET_BUTTON', 0);
define('NEWT_COLORSET_CHECKBOX', 0);
define('NEWT_COLORSET_COMPACTBUTTON', 0);
define('NEWT_COLORSET_DISENTRY', 0);
define('NEWT_COLORSET_EMPTYSCALE', 0);
define('NEWT_COLORSET_ENTRY', 0);
define('NEWT_COLORSET_FULLSCALE', 0);
define('NEWT_COLORSET_HELPLINE', 0);
define('NEWT_COLORSET_LABEL', 0);
define('NEWT_COLORSET_LISTBOX', 0);
define('NEWT_COLORSET_ROOT', 0);
define('NEWT_COLORSET_ROOTTEXT', 0);
define('NEWT_COLORSET_SELLISTBOX', 0);
define('NEWT_COLORSET_SHADOW', 0);
define('NEWT_COLORSET_TEXTBOX', 0);
define('NEWT_COLORSET_TITLE', 0);
define('NEWT_COLORSET_WINDOW', 0);
define('NEWT_ENTRY_DISABLED', 0);
define('NEWT_ENTRY_HIDDEN', 0);
define('NEWT_ENTRY_RETURNEXIT', 0);
define('NEWT_ENTRY_SCROLL', 0);
define('NEWT_EXIT_COMPONENT', 0);
define('NEWT_EXIT_FDREADY', 0);
define('NEWT_EXIT_HOTKEY', 0);
define('NEWT_EXIT_TIMER', 0);
define('NEWT_FD_EXCEPT', 0);
define('NEWT_FD_READ', 0);
define('NEWT_FD_WRITE', 0);
define('NEWT_FLAGS_RESET', 0);
define('NEWT_FLAGS_SET', 0);
define('NEWT_FLAGS_TOGGLE', 0);
define('NEWT_FLAG_BORDER', 0);
define('NEWT_FLAG_CHECKBOX', 0);
define('NEWT_FLAG_DISABLED', 0);
define('NEWT_FLAG_HIDDEN', 0);
define('NEWT_FLAG_MULTIPLE', 0);
define('NEWT_FLAG_NOF12', 0);
define('NEWT_FLAG_PASSWORD', 0);
define('NEWT_FLAG_RETURNEXIT', 0);
define('NEWT_FLAG_SCROLL', 0);
define('NEWT_FLAG_SELECTED', 0);
define('NEWT_FLAG_SHOWCURSOR', 0);
define('NEWT_FLAG_WRAP', 0);
define('NEWT_FORM_NOF12', 0);
define('NEWT_GRID_COMPONENT', 0);
define('NEWT_GRID_EMPTY', 0);
define('NEWT_GRID_FLAG_GROWX', 0);
define('NEWT_GRID_FLAG_GROWY', 0);
define('NEWT_GRID_SUBGRID', 0);
define('NEWT_KEY_BKSPC', 0);
define('NEWT_KEY_DELETE', 0);
define('NEWT_KEY_DOWN', 0);
define('NEWT_KEY_END', 0);
define('NEWT_KEY_ENTER', 0);
define('NEWT_KEY_ESCAPE', 0);
define('NEWT_KEY_EXTRA_BASE', 0);
define('NEWT_KEY_F1', 0);
define('NEWT_KEY_F2', 0);
define('NEWT_KEY_F3', 0);
define('NEWT_KEY_F4', 0);
define('NEWT_KEY_F5', 0);
define('NEWT_KEY_F6', 0);
define('NEWT_KEY_F7', 0);
define('NEWT_KEY_F8', 0);
define('NEWT_KEY_F9', 0);
define('NEWT_KEY_F10', 0);
define('NEWT_KEY_F11', 0);
define('NEWT_KEY_F12', 0);
define('NEWT_KEY_HOME', 0);
define('NEWT_KEY_INSERT', 0);
define('NEWT_KEY_LEFT', 0);
define('NEWT_KEY_PGDN', 0);
define('NEWT_KEY_PGUP', 0);
define('NEWT_KEY_RESIZE', 0);
define('NEWT_KEY_RETURN', 0);
define('NEWT_KEY_RIGHT', 0);
define('NEWT_KEY_SUSPEND', 0);
define('NEWT_KEY_TAB', 0);
define('NEWT_KEY_UNTAB', 0);
define('NEWT_KEY_UP', 0);
define('NEWT_LISTBOX_RETURNEXIT', 0);
define('NEWT_TEXTBOX_SCROLL', 0);
define('NEWT_TEXTBOX_WRAP', 0);
define('NIL', 0);
define('NOEXPR', 0);
define('NORM_IGNORECASE', 0);
define('NORM_IGNOREKANATYPE', 0);
define('NORM_IGNOREKASHIDA', 0);
define('NORM_IGNORENONSPACE', 0);
define('NORM_IGNORESYMBOLS', 0);
define('NORM_IGNOREWIDTH', 0);
define('NOSTR', 0);
define('N_CS_PRECEDES', 0);
define('N_SEP_BY_SPACE', 0);
define('N_SIGN_POSN', 0);
define('OCI_ASSOC', 0);
define('OCI_BOTH', 0);
define('OCI_B_BFILE', 0);
define('OCI_B_BIN', 0);
define('OCI_B_BLOB', 0);
define('OCI_B_CFILEE', 0);
define('OCI_B_CLOB', 0);
define('OCI_B_CURSOR', 0);
define('OCI_B_NTY', 0);
define('OCI_B_ROWID', 0);
define('OCI_COMMIT_ON_SUCCESS', 0);
define('OCI_DEFAULT', 0);
define('OCI_DESCRIBE_ONLY', 0);
define('OCI_DTYPE_FILE', 0);
define('OCI_DTYPE_LOB', 0);
define('OCI_DTYPE_ROWID', 0);
define('OCI_D_FILE', 0);
define('OCI_D_LOB', 0);
define('OCI_D_ROWID', 0);
define('OCI_EXACT_FETCH', 0);
define('OCI_FETCHSTATEMENT_BY_COLUMN', 0);
define('OCI_FETCHSTATEMENT_BY_ROW', 0);
define('OCI_LOB_BUFFER_FREE', 0);
define('OCI_NUM', 0);
define('OCI_RETURN_LOBS', 0);
define('OCI_RETURN_NULLS', 0);
define('OCI_SYSDATE', 0);
define('OCI_SYSDBA', 0);
define('OCI_SYSOPER', 0);
define('OCI_TEMP_BLOB', 0);
define('OCI_TEMP_CLOB', 0);
define('ODBC_BINMODE_CONVERT', 0);
define('ODBC_BINMODE_PASSTHRU', 0);
define('ODBC_BINMODE_RETURN', 0);
define('ODBC_TYPE', 0);
define('OGGVORBIS_PCM_S8', 0);
define('OGGVORBIS_PCM_S16_BE', 0);
define('OGGVORBIS_PCM_S16_LE', 0);
define('OGGVORBIS_PCM_U8', 0);
define('OGGVORBIS_PCM_U16_BE', 0);
define('OGGVORBIS_PCM_U16_LE', 0);
define('OP_ANONYMOUS', 0);
define('OP_DEBUG', 0);
define('OP_EXPUNGE', 0);
define('OP_HALFOPEN', 0);
define('OP_PROTOTYPE', 0);
define('OP_READONLY', 0);
define('OP_SECURE', 0);
define('OP_SHORTCACHE', 0);
define('OP_SILENT', 0);
define('OutDowntoIdle', 0);
define('OutDowntoOverDown', 0);
define('OverDowntoIdle', 0);
define('OverDowntoOutDown', 0);
define('OverUptoIdle', 0);
define('OverUptoOverDown', 0);
define('O_APPEND', 0);
define('O_ASYNC', 0);
define('O_CREAT', 0);
define('O_EXCL', 0);
define('O_NDELAY', 0);
define('O_NOCTTY', 0);
define('O_NONBLOCK', 0);
define('O_RDONLY', 0);
define('O_RDWR', 0);
define('O_SYNC', 0);
define('O_TRUNC', 0);
define('O_WRONLY', 0);
define('PATHINFO_BASENAME', 0);
define('PATHINFO_DIRNAME', 0);
define('PATHINFO_EXTENSION', 0);
define('PATHINFO_FILENAME', 0);
define('PATH_SEPARATOR', '');
define('PCRE_VERSION', 0);
define('PEAR_EXTENSION_DIR', '');
define('PEAR_INSTALL_DIR', '');
define('PGSQL_ASSOC', 0);
define('PGSQL_BAD_RESPONSE', 0);
define('PGSQL_BOTH', 0);
define('PGSQL_COMMAND_OK', 0);
define('PGSQL_CONNECTION_BAD', 0);
define('PGSQL_CONNECTION_OK', 0);
define('PGSQL_CONNECT_FORCE_NEW', 0);
define('PGSQL_CONV_FORCE_NULL', 0);
define('PGSQL_CONV_IGNORE_DEFAULT', 0);
define('PGSQL_COPY_IN', 0);
define('PGSQL_COPY_OUT', 0);
define('PGSQL_DIAG_CONTEXT', 0);
define('PGSQL_DIAG_INTERNAL_POSITION', 0);
define('PGSQL_DIAG_INTERNAL_QUERY', 0);
define('PGSQL_DIAG_MESSAGE_DETAIL', 0);
define('PGSQL_DIAG_MESSAGE_HINT', 0);
define('PGSQL_DIAG_MESSAGE_PRIMARY', 0);
define('PGSQL_DIAG_SEVERITY', 0);
define('PGSQL_DIAG_SOURCE_FILE', 0);
define('PGSQL_DIAG_SOURCE_FUNCTION', 0);
define('PGSQL_DIAG_SOURCE_LINE', 0);
define('PGSQL_DIAG_SQLSTATE', 0);
define('PGSQL_DIAG_STATEMENT_POSITION', 0);
define('PGSQL_EMPTY_QUERY', 0);
define('PGSQL_ERRORS_DEFAULT', 0);
define('PGSQL_ERRORS_TERSE', 0);
define('PGSQL_ERRORS_VERBOSE', 0);
define('PGSQL_FATAL_ERROR', 0);
define('PGSQL_NONFATAL_ERROR', 0);
define('PGSQL_NUM', 0);
define('PGSQL_SEEK_CUR', 0);
define('PGSQL_SEEK_END', 0);
define('PGSQL_SEEK_SET', 0);
define('PGSQL_STATUS_LONG', 0);
define('PGSQL_STATUS_STRING', 0);
define('PGSQL_TRANSACTION_ACTIVE', 0);
define('PGSQL_TRANSACTION_IDLE', 0);
define('PGSQL_TRANSACTION_INERROR', 0);
define('PGSQL_TRANSACTION_INTRANS', 0);
define('PGSQL_TRANSACTION_UNKNOWN', 0);
define('PGSQL_TUPLES_OK', 0);
define('PHP_BINARY_READ', 0);
define('PHP_BINDIR', '');
define('PHP_CONFIG_FILE_PATH', '');
define('PHP_CONFIG_FILE_SCAN_DIR', '');
define('PHP_DATADIR', '');
define('PHP_DEBUG', 0);
define('PHP_EOL', '');
define('PHP_EXTENSION_DIR', '');
define('PHP_EXTRA_VERSION', '');
define('PHP_INT_MAX', 0);
define('PHP_INT_SIZE', 0);
define('PHP_LIBDIR', '');
define('PHP_LOCALSTATEDIR', '');
define('PHP_MAJOR_VERSION', 0);
define('PHP_MAXPATHLEN', 0);
define('PHP_MINOR_VERSION', 0);
define('PHP_NORMAL_READ', 0);
define('PHP_OS', '');
define('PHP_OUTPUT_HANDLER_CONT', 0);
define('PHP_OUTPUT_HANDLER_END', 0);
define('PHP_OUTPUT_HANDLER_START', 0);
define('PHP_PREFIX', '');
define('PHP_RELEASE_VERSION', 0);
define('PHP_ROUND_HALF_DOWN', 0);
define('PHP_ROUND_HALF_EVEN', 0);
define('PHP_ROUND_HALF_ODD', 0);
define('PHP_ROUND_HALF_UP', 0);
define('PHP_SAPI', '');
define('PHP_SHLIB_SUFFIX', '');
define('PHP_SYSCONFDIR', '');
define('PHP_URL_FRAGMENT', 0);
define('PHP_URL_HOST', 0);
define('PHP_URL_PASS', 0);
define('PHP_URL_PATH', 0);
define('PHP_URL_PORT', 0);
define('PHP_URL_QUERY', 0);
define('PHP_URL_SCHEME', 0);
define('PHP_URL_USER', 0);
define('PHP_VERSION', '');
define('PHP_VERSION_ID', 0);
define('PHP_WINDOWS_NT_DOMAIN_CONTROLLER', 0);
define('PHP_WINDOWS_NT_SERVER', 0);
define('PHP_WINDOWS_NT_WORKSTATION', 0);
define('PHP_WINDOWS_VERSION_BUILD', 0);
define('PHP_WINDOWS_VERSION_MAJOR', 0);
define('PHP_WINDOWS_VERSION_MINOR', 0);
define('PHP_WINDOWS_VERSION_PLATFORM', 0);
define('PHP_WINDOWS_VERSION_PRODUCTTYPE', 0);
define('PHP_WINDOWS_VERSION_SP_MAJOR', 0);
define('PHP_WINDOWS_VERSION_SP_MINOR', 0);
define('PHP_WINDOWS_VERSION_SUITEMASK', 0);
define('PHP_ZTS', 0);
define('PKCS7_BINARY', 0);
define('PKCS7_DETACHED', 0);
define('PKCS7_NOATTR', 0);
define('PKCS7_NOCERTS', 0);
define('PKCS7_NOCHAIN', 0);
define('PKCS7_NOINTERN', 0);
define('PKCS7_NOSIGS', 0);
define('PKCS7_NOVERIFY', 0);
define('PKCS7_TEXT', 0);
define('PM_STR', 0);
define('PNG_ALL_FILTERS', 0);
define('PNG_FILTER_AVG', 0);
define('PNG_FILTER_NONE', 0);
define('PNG_FILTER_PAETH', 0);
define('PNG_FILTER_SUB', 0);
define('PNG_FILTER_UP', 0);
define('PNG_NO_FILTER', 0);
define('POLL_ERR', 0);
define('POLL_HUP', 0);
define('POLL_IN', 0);
define('POLL_MSG', 0);
define('POLL_OUT', 0);
define('POLL_PRI', 0);
define('POSITIVE_SIGN', 0);
define('POSIX_F_OK', 0);
define('POSIX_R_OK', 0);
define('POSIX_S_IFBLK', 0);
define('POSIX_S_IFCHR', 0);
define('POSIX_S_IFIFO', 0);
define('POSIX_S_IFREG', 0);
define('POSIX_S_IFSOCK', 0);
define('POSIX_W_OK', 0);
define('POSIX_X_OK', 0);
define('PREG_BACKTRACK_LIMIT_ERROR', 0);
define('PREG_BAD_UTF8_ERROR', 0);
define('PREG_BAD_UTF8_OFFSET_ERROR', 0);
define('PREG_INTERNAL_ERROR', 0);
define('PREG_NO_ERROR', 0);
define('PREG_OFFSET_CAPTURE', 0);
define('PREG_PATTERN_ORDER', 0);
define('PREG_RECURSION_LIMIT_ERROR', 0);
define('PREG_SET_ORDER', 0);
define('PREG_SPLIT_DELIM_CAPTURE', 0);
define('PREG_SPLIT_NO_EMPTY', 0);
define('PREG_SPLIT_OFFSET_CAPTURE', 0);
define('PRINTER_BACKGROUND_COLOR', 0);
define('PRINTER_BRUSH_CROSS', 0);
define('PRINTER_BRUSH_CUSTOM', 0);
define('PRINTER_BRUSH_DIAGCROSS', 0);
define('PRINTER_BRUSH_DIAGONAL', 0);
define('PRINTER_BRUSH_FDIAGONAL', 0);
define('PRINTER_BRUSH_HORIZONTAL', 0);
define('PRINTER_BRUSH_SOLID', 0);
define('PRINTER_BRUSH_VERTICAL', 0);
define('PRINTER_COPIES', 0);
define('PRINTER_DEVICENAME', 0);
define('PRINTER_DRIVERVERSION', 0);
define('PRINTER_ENUM_CONNECTIONS', 0);
define('PRINTER_ENUM_DEFAULT', 0);
define('PRINTER_ENUM_LOCAL', 0);
define('PRINTER_ENUM_NAME', 0);
define('PRINTER_ENUM_NETWORK', 0);
define('PRINTER_ENUM_REMOTE', 0);
define('PRINTER_ENUM_SHARED', 0);
define('PRINTER_FORMAT_A3', 0);
define('PRINTER_FORMAT_A4', 0);
define('PRINTER_FORMAT_A5', 0);
define('PRINTER_FORMAT_B4', 0);
define('PRINTER_FORMAT_B5', 0);
define('PRINTER_FORMAT_CUSTOM', 0);
define('PRINTER_FORMAT_FOLIO', 0);
define('PRINTER_FORMAT_LEGAL', 0);
define('PRINTER_FORMAT_LETTER', 0);
define('PRINTER_FW_BOLD', 0);
define('PRINTER_FW_HEAVY', 0);
define('PRINTER_FW_LIGHT', 0);
define('PRINTER_FW_MEDIUM', 0);
define('PRINTER_FW_NORMAL', 0);
define('PRINTER_FW_THIN', 0);
define('PRINTER_FW_ULTRABOLD', 0);
define('PRINTER_FW_ULTRALIGHT', 0);
define('PRINTER_MODE', 0);
define('PRINTER_ORIENTATION', 0);
define('PRINTER_ORIENTATION_LANDSCAPE', 0);
define('PRINTER_ORIENTATION_PORTRAIT', 0);
define('PRINTER_OUTPUT_FILE', 0);
define('PRINTER_PAPER_FORMAT', 0);
define('PRINTER_PAPER_LENGTH', 0);
define('PRINTER_PAPER_WIDTH', 0);
define('PRINTER_PEN_DASH', 0);
define('PRINTER_PEN_DASHDOT', 0);
define('PRINTER_PEN_DASHDOTDOT', 0);
define('PRINTER_PEN_DOT', 0);
define('PRINTER_PEN_INVISIBLE', 0);
define('PRINTER_PEN_SOLID', 0);
define('PRINTER_RESOLUTION_X', 0);
define('PRINTER_RESOLUTION_Y', 0);
define('PRINTER_SCALE', 0);
define('PRINTER_TA_BASELINE', 0);
define('PRINTER_TA_BOTTOM', 0);
define('PRINTER_TA_CENTER', 0);
define('PRINTER_TA_LEFT', 0);
define('PRINTER_TA_RIGHT', 0);
define('PRINTER_TA_TOP', 0);
define('PRINTER_TEXT_ALIGN', 0);
define('PRINTER_TEXT_COLOR', 0);
define('PRINTER_TITLE', 0);
define('PROF_TRACE', 0);
define('PSFS_ERR_FATAL', 0);
define('PSFS_FEED_ME', 0);
define('PSFS_FLAG_FLUSH_CLOSE', 0);
define('PSFS_FLAG_FLUSH_INC', 0);
define('PSFS_FLAG_NORMAL', 0);
define('PSFS_PASS_ON', 0);
define('PSPELL_BAD_SPELLERS', 0);
define('PSPELL_FAST', 0);
define('PSPELL_NORMAL', 0);
define('PSPELL_RUN_TOGETHER', 0);
define('P_CS_PRECEDES', 0);
define('P_SEP_BY_SPACE', 0);
define('P_SIGN_POSN', 0);
define('RADIXCHAR', 0);
define('RAR_HOST_BEOS', 0);
define('RAR_HOST_MSDOS', 0);
define('RAR_HOST_OS2', 0);
define('RAR_HOST_UNIX', 0);
define('RAR_HOST_WIN32', 0);
define('RUNKIT_ACC_PRIVATE', 0);
define('RUNKIT_ACC_PROTECTED', 0);
define('RUNKIT_ACC_PUBLIC', 0);
define('RUNKIT_IMPORT_CLASSES', 0);
define('RUNKIT_IMPORT_CLASS_CONSTS', 0);
define('RUNKIT_IMPORT_CLASS_METHODS', 0);
define('RUNKIT_IMPORT_CLASS_PROPS', 0);
define('RUNKIT_IMPORT_FUNCTIONS', 0);
define('RUNKIT_IMPORT_OVERRIDE', 0);
define('RUNKIT_VERSION', '');
define('SAM_AUTO', '');
define('SAM_BOOLEAN', '');
define('SAM_BUS', '');
define('SAM_BYTE', '');
define('SAM_BYTES', '');
define('SAM_CORRELID', '');
define('SAM_DELIVERYMODE', '');
define('SAM_DOUBLE', '');
define('SAM_ENDPOINTS', '');
define('SAM_FLOAT', '');
define('SAM_HOST', '');
define('SAM_INT', '');
define('SAM_LONG', '');
define('SAM_MANUAL', '');
define('SAM_MESSAGEID', '');
define('SAM_MQTT', '');
define('SAM_MQTT_CLEANSTART', false);
define('SAM_NON_PERSISTENT', '');
define('SAM_PASSWORD', '');
define('SAM_PERSISTENT', '');
define('SAM_PORT', '');
define('SAM_PRIORITY', '');
define('SAM_REPLY_TO', '');
define('SAM_RTT', '');
define('SAM_STRING', '');
define('SAM_TARGETCHAIN', '');
define('SAM_TEXT', '');
define('SAM_TIMETOLIVE', '');
define('SAM_TRANSACTIONS', '');
define('SAM_USERID', '');
define('SAM_WAIT', '');
define('SAM_WMQ', '');
define('SAM_WMQ_BINDINGS', '');
define('SAM_WMQ_CLIENT', '');
define('SAM_WMQ_TARGET_CLIENT', '');
define('SAM_WPM', '');
define('SA_ALL', 0);
define('SA_MESSAGES', 0);
define('SA_RECENT', 0);
define('SA_UIDNEXT', 0);
define('SA_UIDVALIDITY', 0);
define('SA_UNSEEN', 0);
define('SEEK_CUR', 0);
define('SEEK_END', 0);
define('SEEK_SET', 0);
define('SEGV_ACCERR', 0);
define('SEGV_MAPERR', 0);
define('SE_FREE', 0);
define('SE_NOPREFETCH', 0);
define('SE_UID', 0);
define('SID', '');
define('SIGABRT', 0);
define('SIGALRM', 0);
define('SIGBABY', 0);
define('SIGBUS', 0);
define('SIGCHLD', 0);
define('SIGCLD', 0);
define('SIGCONT', 0);
define('SIGFPE', 0);
define('SIGHUP', 0);
define('SIGILL', 0);
define('SIGINT', 0);
define('SIGIO', 0);
define('SIGIOT', 0);
define('SIGKILL', 0);
define('SIGPIPE', 0);
define('SIGPOLL', 0);
define('SIGPROF', 0);
define('SIGPWR', 0);
define('SIGQUIT', 0);
define('SIGSEGV', 0);
define('SIGSTKFLT', 0);
define('SIGSTOP', 0);
define('SIGSYS', 0);
define('SIGTERM', 0);
define('SIGTRAP', 0);
define('SIGTSTP', 0);
define('SIGTTIN', 0);
define('SIGTTOU', 0);
define('SIGURG', 0);
define('SIGUSR1', 0);
define('SIGUSR2', 0);
define('SIGVTALRM', 0);
define('SIGWINCH', 0);
define('SIGXCPU', 0);
define('SIGXFSZ', 0);
define('SIG_BLOCK', 0);
define('SIG_DFL', 0);
define('SIG_ERR', 0);
define('SIG_IGN', 0);
define('SIG_SETMASK', 0);
define('SIG_UNBLOCK', 0);
define('SI_ASYNCIO', 0);
define('SI_KERNEL', 0);
define('SI_MSGGQ', 0);
define('SI_NOINFO', 0);
define('SI_QUEUE', 0);
define('SI_SIGIO', 0);
define('SI_TIMER', 0);
define('SI_TKILL', 0);
define('SI_USER', 0);
define('SNMP_BIT_STR', 0);
define('SNMP_COUNTER', 0);
define('SNMP_COUNTER64', 0);
define('SNMP_INTEGER', 0);
define('SNMP_IPADDRESS', 0);
define('SNMP_NULL', 0);
define('SNMP_OBJECT_ID', 0);
define('SNMP_OCTET_STR', 0);
define('SNMP_OID_OUTPUT_FULL', 0);
define('SNMP_OID_OUTPUT_NUMERIC', 0);
define('SNMP_OPAQUE', 0);
define('SNMP_TIMETICKS', 0);
define('SNMP_UINTEGER', 0);
define('SNMP_UNSIGNED', 0);
define('SNMP_VALUE_LIBRARY', 0);
define('SNMP_VALUE_OBJECT', 0);
define('SNMP_VALUE_PLAIN', 0);
define('SOCK_DGRAM', 0);
define('SOCK_RAW', 0);
define('SOCK_RDM', 0);
define('SOCK_SEQPACKET', 0);
define('SOCK_STREAM', 0);
define('SOL_SOCKET', 0);
define('SOL_TCP', 0);
define('SOL_UDP', 0);
define('SORTARRIVAL', 0);
define('SORTCC', 0);
define('SORTDATE', 0);
define('SORTFROM', 0);
define('SORTSIZE', 0);
define('SORTSUBJECT', 0);
define('SORTTO', 0);
define('SORT_ASC', 0);
define('SORT_DESC', 0);
define('SORT_NUMERIC', 0);
define('SORT_REGULAR', 0);
define('SORT_STRING', 0);
define('SO_BROADCAST', 0);
define('SO_DEBUG', 0);
define('SO_DONTROUTE', 0);
define('SO_ERROR', 0);
define('SO_FREE', 0);
define('SO_KEEPALIVE', 0);
define('SO_LINGER', 0);
define('SO_NOSERVER', 0);
define('SO_OOBINLINE', 0);
define('SO_RCVBUF', 0);
define('SO_RCVLOWAT', 0);
define('SO_RCVTIMEO', 0);
define('SO_REUSEADDR', 0);
define('SO_SNDBUF', 0);
define('SO_SNDLOWAT', 0);
define('SO_SNDTIMEO', 0);
define('SO_TYPE', 0);
define('SQLBIT', 0);
define('SQLCHAR', 0);
define('SQLFLT4', 0);
define('SQLFLT8', 0);
define('SQLINT1', 0);
define('SQLINT2', 0);
define('SQLINT4', 0);
define('SQLITE_ASSOC', 0);
define('SQLITE_BOTH', 0);
define('SQLITE_NUM', 0);
define('SQLTEXT', 0);
define('SQLT_AFC', 0);
define('SQLT_AVC', 0);
define('SQLT_BDOUBLE', 0);
define('SQLT_BFILEE', 0);
define('SQLT_BFLOAT', 0);
define('SQLT_BIN', 0);
define('SQLT_BLOB', 0);
define('SQLT_CFILEE', 0);
define('SQLT_CHR', 0);
define('SQLT_CLOB', 0);
define('SQLT_FLT', 0);
define('SQLT_INT', 0);
define('SQLT_LBI', 0);
define('SQLT_LNG', 0);
define('SQLT_LVC', 0);
define('SQLT_NTY', 0);
define('SQLT_NUM', 0);
define('SQLT_ODT', 0);
define('SQLT_RDD', 0);
define('SQLT_STR', 0);
define('SQLT_VCS', 0);
define('SQLVARCHAR', 0);
define('SQL_BEST_ROWID', 0);
define('SQL_BIGINT', 0);
define('SQL_BINARY', 0);
define('SQL_BIT', 0);
define('SQL_CHAR', 0);
define('SQL_CONCURRENCY', 0);
define('SQL_CONCUR_LOCK', 0);
define('SQL_CONCUR_READ_ONLY', 0);
define('SQL_CONCUR_ROWVER', 0);
define('SQL_CONCUR_VALUES', 0);
define('SQL_CURSOR_DYNAMIC', 0);
define('SQL_CURSOR_FORWARD_ONLY', 0);
define('SQL_CURSOR_KEYSET_DRIVEN', 0);
define('SQL_CURSOR_STATIC', 0);
define('SQL_CURSOR_TYPE', 0);
define('SQL_CUR_USE_DRIVER', 0);
define('SQL_CUR_USE_IF_NEEDED', 0);
define('SQL_CUR_USE_ODBC', 0);
define('SQL_DATE', 0);
define('SQL_DECIMAL', 0);
define('SQL_DOUBLE', 0);
define('SQL_ENSURE', 0);
define('SQL_FLOAT', 0);
define('SQL_INDEX_ALL', 0);
define('SQL_INDEX_UNIQUE', 0);
define('SQL_INTEGER', 0);
define('SQL_KEYSET_SIZE', 0);
define('SQL_LONGVARBINARY', 0);
define('SQL_LONGVARCHAR', 0);
define('SQL_NO_NULLS', 0);
define('SQL_NULLABLE', 0);
define('SQL_NUMERIC', 0);
define('SQL_ODBC_CURSORS', 0);
define('SQL_QUICK', 0);
define('SQL_REAL', 0);
define('SQL_ROWVER', 0);
define('SQL_SCOPE_CURROW', 0);
define('SQL_SCOPE_SESSION', 0);
define('SQL_SCOPE_TRANSACTION', 0);
define('SQL_SMALLINT', 0);
define('SQL_TIME', 0);
define('SQL_TIMESTAMP', 0);
define('SQL_TINYINT', 0);
define('SQL_TYPE_DATE', 0);
define('SQL_TYPE_TIME', 0);
define('SQL_TYPE_TIMESTAMP', 0);
define('SQL_VARBINARY', 0);
define('SQL_VARCHAR', 0);
define('SSH2_DEFAULT_TERMINAL', '');
define('SSH2_DEFAULT_TERM_HEIGHT', 0);
define('SSH2_DEFAULT_TERM_UNIT', 0);
define('SSH2_DEFAULT_TERM_WIDTH', 0);
define('SSH2_FINGERPRINT_HEX', 0);
define('SSH2_FINGERPRINT_MD5', 0);
define('SSH2_FINGERPRINT_RAW', 0);
define('SSH2_FINGERPRINT_SHA1', 0);
define('SSH2_STREAM_STDERR', 0);
define('SSH2_STREAM_STDIO', 0);
define('SSH2_TERM_UNIT_CHARS', 0);
define('SSH2_TERM_UNIT_PIXELS', 0);
define('STATEMENT_TRACE', 0);
define('STREAM_CAST_AS_STREAM', 0);
define('STREAM_CAST_FOR_SELECT', 0);
define('STREAM_CLIENT_ASYNC_CONNECT', 0);
define('STREAM_CLIENT_CONNECT', 0);
define('STREAM_CLIENT_PERSISTENT', 0);
define('STREAM_FILTER_ALL', 0);
define('STREAM_FILTER_READ', 0);
define('STREAM_FILTER_WRITE', 0);
define('STREAM_IPPROTO_ICMP', 0);
define('STREAM_IPPROTO_IP', 0);
define('STREAM_IPPROTO_RAW', 0);
define('STREAM_IPPROTO_TCP', 0);
define('STREAM_IPPROTO_UDP', 0);
define('STREAM_NOTIFY_AUTH_REQUIRED', 0);
define('STREAM_NOTIFY_AUTH_RESULT', 0);
define('STREAM_NOTIFY_COMPLETED', 0);
define('STREAM_NOTIFY_CONNECT', 0);
define('STREAM_NOTIFY_FAILURE', 0);
define('STREAM_NOTIFY_FILE_SIZE_IS', 0);
define('STREAM_NOTIFY_MIME_TYPE_IS', 0);
define('STREAM_NOTIFY_PROGRESS', 0);
define('STREAM_NOTIFY_REDIRECTED', 0);
define('STREAM_NOTIFY_RESOLVE', 0);
define('STREAM_NOTIFY_SEVERITY_ERR', 0);
define('STREAM_NOTIFY_SEVERITY_INFO', 0);
define('STREAM_NOTIFY_SEVERITY_WARN', 0);
define('STREAM_PF_INET', 0);
define('STREAM_PF_INET6', 0);
define('STREAM_PF_UNIX', 0);
define('STREAM_REPORT_ERRORS', 0);
define('STREAM_SERVER_BIND', 0);
define('STREAM_SERVER_LISTEN', 0);
define('STREAM_SHUT_RD', 0);
define('STREAM_SHUT_RDWR', 0);
define('STREAM_SHUT_WR', 0);
define('STREAM_SOCK_DGRAM', 0);
define('STREAM_SOCK_RAW', 0);
define('STREAM_SOCK_RDM', 0);
define('STREAM_SOCK_SEQPACKET', 0);
define('STREAM_SOCK_STREAM', 0);
define('STREAM_USE_PATH', 0);
define('STR_PAD_BOTH', 0);
define('STR_PAD_LEFT', 0);
define('STR_PAD_RIGHT', 0);
define('ST_SET', 0);
define('ST_SILENT', 0);
define('ST_UID', 0);
define('SUMMARY_TRACE', 0);
define('SUNFUNCS_RET_DOUBLE', 0);
define('SUNFUNCS_RET_STRING', 0);
define('SUNFUNCS_RET_TIMESTAMP', 0);
define('SVN_REVISION_HEAD', 0);
define('SWFACTION_DATA', 0);
define('SWFACTION_ENTERFRAME', 0);
define('SWFACTION_KEYDOWN', 0);
define('SWFACTION_KEYUP', 0);
define('SWFACTION_MOUSEDOWN', 0);
define('SWFACTION_MOUSEMOVE', 0);
define('SWFACTION_MOUSEUP', 0);
define('SWFACTION_ONLOAD', 0);
define('SWFACTION_UNLOAD', 0);
define('SWFBUTTON_DOWN', 0);
define('SWFBUTTON_DRAGOUT', 0);
define('SWFBUTTON_DRAGOVER', 0);
define('SWFBUTTON_HIT', 0);
define('SWFBUTTON_MOUSEDOWN', 0);
define('SWFBUTTON_MOUSEOUT', 0);
define('SWFBUTTON_MOUSEOVER', 0);
define('SWFBUTTON_MOUSEUP', 0);
define('SWFBUTTON_MOUSEUPOUTSIDE', 0);
define('SWFBUTTON_OVER', 0);
define('SWFBUTTON_UP', 0);
define('SWFFILL_CLIPPED_BITMAP', 0);
define('SWFFILL_LINEAR_GRADIENT', 0);
define('SWFFILL_RADIAL_GRADIENT', 0);
define('SWFFILL_TILED_BITMAP', 0);
define('SWFTEXTFIELD_ALIGN_CENTER', 0);
define('SWFTEXTFIELD_ALIGN_JUSTIFY', 0);
define('SWFTEXTFIELD_ALIGN_LEFT', 0);
define('SWFTEXTFIELD_ALIGN_RIGHT', 0);
define('SWFTEXTFIELD_DRAWBOX', 0);
define('SWFTEXTFIELD_HASLENGTH', 0);
define('SWFTEXTFIELD_HTML', 0);
define('SWFTEXTFIELD_MULTILINE', 0);
define('SWFTEXTFIELD_NOEDIT', 0);
define('SWFTEXTFIELD_NOSELECT', 0);
define('SWFTEXTFIELD_PASSWORD', 0);
define('SWFTEXTFIELD_WORDWRAP', 0);
define('S_IRGRP', 0);
define('S_IROTH', 0);
define('S_IRUSR', 0);
define('S_IRWXG', 0);
define('S_IRWXO', 0);
define('S_IRWXU', 0);
define('S_IWGRP', 0);
define('S_IWOTH', 0);
define('S_IWUSR', 0);
define('S_IXGRP', 0);
define('S_IXOTH', 0);
define('S_IXUSR', 0);
define('TCP_NODELAY', 0);
define('THOUSANDS_SEP', 0);
define('THOUSEP', 0);
define('TIDY_ATTR_ABBR', 0);
define('TIDY_ATTR_ACCEPT', 0);
define('TIDY_ATTR_ACCEPT_CHARSET', 0);
define('TIDY_ATTR_ACCESSKEY', 0);
define('TIDY_ATTR_ACTION', 0);
define('TIDY_ATTR_ADD_DATE', 0);
define('TIDY_ATTR_ALIGN', 0);
define('TIDY_ATTR_ALINK', 0);
define('TIDY_ATTR_ALT', 0);
define('TIDY_ATTR_ARCHIVE', 0);
define('TIDY_ATTR_AXIS', 0);
define('TIDY_ATTR_BACKGROUND', 0);
define('TIDY_ATTR_BGCOLOR', 0);
define('TIDY_ATTR_BGPROPERTIES', 0);
define('TIDY_ATTR_BORDER', 0);
define('TIDY_ATTR_BORDERCOLOR', 0);
define('TIDY_ATTR_BOTTOMMARGIN', 0);
define('TIDY_ATTR_CELLPADDING', 0);
define('TIDY_ATTR_CELLSPACING', 0);
define('TIDY_ATTR_CHAR', 0);
define('TIDY_ATTR_CHAROFF', 0);
define('TIDY_ATTR_CHARSET', 0);
define('TIDY_ATTR_CHECKED', 0);
define('TIDY_ATTR_CITE', 0);
define('TIDY_ATTR_CLASS', 0);
define('TIDY_ATTR_CLASSID', 0);
define('TIDY_ATTR_CLEAR', 0);
define('TIDY_ATTR_CODE', 0);
define('TIDY_ATTR_CODEBASE', 0);
define('TIDY_ATTR_CODETYPE', 0);
define('TIDY_ATTR_COLOR', 0);
define('TIDY_ATTR_COLS', 0);
define('TIDY_ATTR_COLSPAN', 0);
define('TIDY_ATTR_COMPACT', 0);
define('TIDY_ATTR_CONTENT', 0);
define('TIDY_ATTR_COORDS', 0);
define('TIDY_ATTR_DATA', 0);
define('TIDY_ATTR_DATAFLD', 0);
define('TIDY_ATTR_DATAPAGESIZE', 0);
define('TIDY_ATTR_DATASRC', 0);
define('TIDY_ATTR_DATETIME', 0);
define('TIDY_ATTR_DECLARE', 0);
define('TIDY_ATTR_DEFER', 0);
define('TIDY_ATTR_DIR', 0);
define('TIDY_ATTR_DISABLED', 0);
define('TIDY_ATTR_ENCODING', 0);
define('TIDY_ATTR_ENCTYPE', 0);
define('TIDY_ATTR_FACE', 0);
define('TIDY_ATTR_FOR', 0);
define('TIDY_ATTR_FRAME', 0);
define('TIDY_ATTR_FRAMEBORDER', 0);
define('TIDY_ATTR_FRAMESPACING', 0);
define('TIDY_ATTR_GRIDX', 0);
define('TIDY_ATTR_GRIDY', 0);
define('TIDY_ATTR_HEADERS', 0);
define('TIDY_ATTR_HEIGHT', 0);
define('TIDY_ATTR_HREF', 0);
define('TIDY_ATTR_HREFLANG', 0);
define('TIDY_ATTR_HSPACE', 0);
define('TIDY_ATTR_HTTP_EQUIV', 0);
define('TIDY_ATTR_ID', 0);
define('TIDY_ATTR_ISMAP', 0);
define('TIDY_ATTR_LABEL', 0);
define('TIDY_ATTR_LANG', 0);
define('TIDY_ATTR_LANGUAGE', 0);
define('TIDY_ATTR_LAST_MODIFIED', 0);
define('TIDY_ATTR_LAST_VISIT', 0);
define('TIDY_ATTR_LEFTMARGIN', 0);
define('TIDY_ATTR_LINK', 0);
define('TIDY_ATTR_LONGDESC', 0);
define('TIDY_ATTR_LOWSRC', 0);
define('TIDY_ATTR_MARGINHEIGHT', 0);
define('TIDY_ATTR_MARGINWIDTH', 0);
define('TIDY_ATTR_MAXLENGTH', 0);
define('TIDY_ATTR_MEDIA', 0);
define('TIDY_ATTR_METHOD', 0);
define('TIDY_ATTR_MULTIPLE', 0);
define('TIDY_ATTR_NAME', 0);
define('TIDY_ATTR_NOHREF', 0);
define('TIDY_ATTR_NORESIZE', 0);
define('TIDY_ATTR_NOSHADE', 0);
define('TIDY_ATTR_NOWRAP', 0);
define('TIDY_ATTR_OBJECT', 0);
define('TIDY_ATTR_OnAFTERUPDATE', 0);
define('TIDY_ATTR_OnBEFOREUNLOAD', 0);
define('TIDY_ATTR_OnBEFOREUPDATE', 0);
define('TIDY_ATTR_OnBLUR', 0);
define('TIDY_ATTR_OnCHANGE', 0);
define('TIDY_ATTR_OnCLICK', 0);
define('TIDY_ATTR_OnDATAAVAILABLE', 0);
define('TIDY_ATTR_OnDATASETCHANGED', 0);
define('TIDY_ATTR_OnDATASETCOMPLETE', 0);
define('TIDY_ATTR_OnDBLCLICK', 0);
define('TIDY_ATTR_OnERRORUPDATE', 0);
define('TIDY_ATTR_OnFOCUS', 0);
define('TIDY_ATTR_OnKEYDOWN', 0);
define('TIDY_ATTR_OnKEYPRESS', 0);
define('TIDY_ATTR_OnKEYUP', 0);
define('TIDY_ATTR_OnLOAD', 0);
define('TIDY_ATTR_OnMOUSEDOWN', 0);
define('TIDY_ATTR_OnMOUSEMOVE', 0);
define('TIDY_ATTR_OnMOUSEOUT', 0);
define('TIDY_ATTR_OnMOUSEOVER', 0);
define('TIDY_ATTR_OnMOUSEUP', 0);
define('TIDY_ATTR_OnRESET', 0);
define('TIDY_ATTR_OnROWENTER', 0);
define('TIDY_ATTR_OnROWEXIT', 0);
define('TIDY_ATTR_OnSELECT', 0);
define('TIDY_ATTR_OnSUBMIT', 0);
define('TIDY_ATTR_OnUNLOAD', 0);
define('TIDY_ATTR_PROFILE', 0);
define('TIDY_ATTR_PROMPT', 0);
define('TIDY_ATTR_RBSPAN', 0);
define('TIDY_ATTR_READONLY', 0);
define('TIDY_ATTR_REL', 0);
define('TIDY_ATTR_REV', 0);
define('TIDY_ATTR_RIGHTMARGIN', 0);
define('TIDY_ATTR_ROWS', 0);
define('TIDY_ATTR_ROWSPAN', 0);
define('TIDY_ATTR_RULES', 0);
define('TIDY_ATTR_SCHEME', 0);
define('TIDY_ATTR_SCOPE', 0);
define('TIDY_ATTR_SCROLLING', 0);
define('TIDY_ATTR_SELECTED', 0);
define('TIDY_ATTR_SHAPE', 0);
define('TIDY_ATTR_SHOWGRID', 0);
define('TIDY_ATTR_SHOWGRIDX', 0);
define('TIDY_ATTR_SHOWGRIDY', 0);
define('TIDY_ATTR_SIZE', 0);
define('TIDY_ATTR_SPAN', 0);
define('TIDY_ATTR_SRC', 0);
define('TIDY_ATTR_STANDBY', 0);
define('TIDY_ATTR_START', 0);
define('TIDY_ATTR_STYLE', 0);
define('TIDY_ATTR_SUMMARY', 0);
define('TIDY_ATTR_TABINDEX', 0);
define('TIDY_ATTR_TARGET', 0);
define('TIDY_ATTR_TEXT', 0);
define('TIDY_ATTR_TITLE', 0);
define('TIDY_ATTR_TOPMARGIN', 0);
define('TIDY_ATTR_TYPE', 0);
define('TIDY_ATTR_UNKNOWN', 0);
define('TIDY_ATTR_USEMAP', 0);
define('TIDY_ATTR_VALIGN', 0);
define('TIDY_ATTR_VALUE', 0);
define('TIDY_ATTR_VALUETYPE', 0);
define('TIDY_ATTR_VERSION', 0);
define('TIDY_ATTR_VLINK', 0);
define('TIDY_ATTR_VSPACE', 0);
define('TIDY_ATTR_WIDTH', 0);
define('TIDY_ATTR_WRAP', 0);
define('TIDY_ATTR_XMLNS', 0);
define('TIDY_ATTR_XML_LANG', 0);
define('TIDY_ATTR_XML_SPACE', 0);
define('TIDY_NODETYPE_ASP', 0);
define('TIDY_NODETYPE_CDATA', 0);
define('TIDY_NODETYPE_COMMENT', 0);
define('TIDY_NODETYPE_DOCTYPE', 0);
define('TIDY_NODETYPE_END', 0);
define('TIDY_NODETYPE_JSTE', 0);
define('TIDY_NODETYPE_PHP', 0);
define('TIDY_NODETYPE_PROCINS', 0);
define('TIDY_NODETYPE_ROOT', 0);
define('TIDY_NODETYPE_SECTION', 0);
define('TIDY_NODETYPE_START', 0);
define('TIDY_NODETYPE_STARTEND', 0);
define('TIDY_NODETYPE_TEXT', 0);
define('TIDY_NODETYPE_XMLDECL', 0);
define('TIDY_TAG_A', 0);
define('TIDY_TAG_ABBR', 0);
define('TIDY_TAG_ACRONYM', 0);
define('TIDY_TAG_ALIGN', 0);
define('TIDY_TAG_APPLET', 0);
define('TIDY_TAG_AREA', 0);
define('TIDY_TAG_B', 0);
define('TIDY_TAG_BASE', 0);
define('TIDY_TAG_BASEFONT', 0);
define('TIDY_TAG_BDO', 0);
define('TIDY_TAG_BGSOUND', 0);
define('TIDY_TAG_BIG', 0);
define('TIDY_TAG_BLINK', 0);
define('TIDY_TAG_BLOCKQUOTE', 0);
define('TIDY_TAG_BODY', 0);
define('TIDY_TAG_BR', 0);
define('TIDY_TAG_BUTTON', 0);
define('TIDY_TAG_CAPTION', 0);
define('TIDY_TAG_CENTER', 0);
define('TIDY_TAG_CITE', 0);
define('TIDY_TAG_CODE', 0);
define('TIDY_TAG_COL', 0);
define('TIDY_TAG_COLGROUP', 0);
define('TIDY_TAG_COMMENT', 0);
define('TIDY_TAG_DD', 0);
define('TIDY_TAG_DEL', 0);
define('TIDY_TAG_DFN', 0);
define('TIDY_TAG_DIR', 0);
define('TIDY_TAG_DIV', 0);
define('TIDY_TAG_DL', 0);
define('TIDY_TAG_DT', 0);
define('TIDY_TAG_EM', 0);
define('TIDY_TAG_EMBED', 0);
define('TIDY_TAG_FIELDSET', 0);
define('TIDY_TAG_FONT', 0);
define('TIDY_TAG_FORM', 0);
define('TIDY_TAG_FRAME', 0);
define('TIDY_TAG_FRAMESET', 0);
define('TIDY_TAG_H1', 0);
define('TIDY_TAG_H2', 0);
define('TIDY_TAG_H3', 0);
define('TIDY_TAG_H4', 0);
define('TIDY_TAG_H5', 0);
define('TIDY_TAG_H6', 0);
define('TIDY_TAG_HEAD', 0);
define('TIDY_TAG_HR', 0);
define('TIDY_TAG_HTML', 0);
define('TIDY_TAG_I', 0);
define('TIDY_TAG_IFRAME', 0);
define('TIDY_TAG_ILAYER', 0);
define('TIDY_TAG_IMG', 0);
define('TIDY_TAG_INPUT', 0);
define('TIDY_TAG_INS', 0);
define('TIDY_TAG_ISINDEX', 0);
define('TIDY_TAG_KBD', 0);
define('TIDY_TAG_KEYGEN', 0);
define('TIDY_TAG_LABEL', 0);
define('TIDY_TAG_LAYER', 0);
define('TIDY_TAG_LEGEND', 0);
define('TIDY_TAG_LI', 0);
define('TIDY_TAG_LINK', 0);
define('TIDY_TAG_LISTING', 0);
define('TIDY_TAG_MAP', 0);
define('TIDY_TAG_MARQUEE', 0);
define('TIDY_TAG_MENU', 0);
define('TIDY_TAG_META', 0);
define('TIDY_TAG_MULTICOL', 0);
define('TIDY_TAG_NOBR', 0);
define('TIDY_TAG_NOEMBED', 0);
define('TIDY_TAG_NOFRAMES', 0);
define('TIDY_TAG_NOLAYER', 0);
define('TIDY_TAG_NOSAVE', 0);
define('TIDY_TAG_NOSCRIPT', 0);
define('TIDY_TAG_OBJECT', 0);
define('TIDY_TAG_OL', 0);
define('TIDY_TAG_OPTGROUP', 0);
define('TIDY_TAG_OPTION', 0);
define('TIDY_TAG_P', 0);
define('TIDY_TAG_PARAM', 0);
define('TIDY_TAG_PLAINTEXT', 0);
define('TIDY_TAG_PRE', 0);
define('TIDY_TAG_Q', 0);
define('TIDY_TAG_RP', 0);
define('TIDY_TAG_RT', 0);
define('TIDY_TAG_RTC', 0);
define('TIDY_TAG_RUBY', 0);
define('TIDY_TAG_S', 0);
define('TIDY_TAG_SAMP', 0);
define('TIDY_TAG_SCRIPT', 0);
define('TIDY_TAG_SELECT', 0);
define('TIDY_TAG_SERVER', 0);
define('TIDY_TAG_SERVLET', 0);
define('TIDY_TAG_SMALL', 0);
define('TIDY_TAG_SPACER', 0);
define('TIDY_TAG_SPAN', 0);
define('TIDY_TAG_STRIKE', 0);
define('TIDY_TAG_STRONG', 0);
define('TIDY_TAG_STYLE', 0);
define('TIDY_TAG_SUB', 0);
define('TIDY_TAG_TABLE', 0);
define('TIDY_TAG_TBODY', 0);
define('TIDY_TAG_TD', 0);
define('TIDY_TAG_TEXTAREA', 0);
define('TIDY_TAG_TFOOT', 0);
define('TIDY_TAG_TH', 0);
define('TIDY_TAG_THEAD', 0);
define('TIDY_TAG_TITLE', 0);
define('TIDY_TAG_TR', 0);
define('TIDY_TAG_TT', 0);
define('TIDY_TAG_U', 0);
define('TIDY_TAG_UL', 0);
define('TIDY_TAG_UNKNOWN', 0);
define('TIDY_TAG_VAR', 0);
define('TIDY_TAG_WBR', 0);
define('TIDY_TAG_XMP', 0);
define('TIMING_TRACE', 0);
define('TRAP_BRKPT', 0);
define('TRAP_TRACE', 0);
define('TYPEAPPLICATION', 0);
define('TYPEAUDIO', 0);
define('TYPEIMAGE', 0);
define('TYPEMESSAGE', 0);
define('TYPEMODEL', 0);
define('TYPEMULTIPART', 0);
define('TYPEOTHER', 0);
define('TYPETEXT', 0);
define('TYPEVIDEO', 0);
define('TYPE_MENUBUTTON', 0);
define('TYPE_PUSHBUTTON', 0);
define('T_FMT', 0);
define('T_FMT_AMPM', 0);
define('UDM_CACHE_DISABLED', 0);
define('UDM_CACHE_ENABLED', 0);
define('UDM_CROSSWORDS_DISABLED', 0);
define('UDM_CROSSWORDS_ENABLED', 0);
define('UDM_CROSS_WORDS_DISABLED', 0);
define('UDM_CROSS_WORDS_ENABLED', 0);
define('UDM_FIELD_CATEGORY', 0);
define('UDM_FIELD_CHARSET', 0);
define('UDM_FIELD_CONTENT', 0);
define('UDM_FIELD_CRC', 0);
define('UDM_FIELD_DESC', 0);
define('UDM_FIELD_DESCRIPTION', 0);
define('UDM_FIELD_KEYWORDS', 0);
define('UDM_FIELD_LANG', 0);
define('UDM_FIELD_MODIFIED', 0);
define('UDM_FIELD_ORDER', 0);
define('UDM_FIELD_RATING', 0);
define('UDM_FIELD_SCORE', 0);
define('UDM_FIELD_SIZE', 0);
define('UDM_FIELD_TEXT', 0);
define('UDM_FIELD_TITLE', 0);
define('UDM_FIELD_URL', 0);
define('UDM_FIELD_URLID', 0);
define('UDM_ISPELL_PREFIXES_DISABLED', 0);
define('UDM_ISPELL_PREFIXES_ENABLED', 0);
define('UDM_ISPELL_PREFIX_DISABLED', 0);
define('UDM_ISPELL_PREFIX_ENABLED', 0);
define('UDM_ISPELL_TYPE_AFFIX', 0);
define('UDM_ISPELL_TYPE_DB', 0);
define('UDM_ISPELL_TYPE_SERVER', 0);
define('UDM_ISPELL_TYPE_SPELL', 0);
define('UDM_LIMIT_CAT', 0);
define('UDM_LIMIT_DATE', 0);
define('UDM_LIMIT_LANG', 0);
define('UDM_LIMIT_TAG', 0);
define('UDM_LIMIT_URL', 0);
define('UDM_MATCH_BEGIN', 0);
define('UDM_MATCH_END', 0);
define('UDM_MATCH_SUBSTR', 0);
define('UDM_MATCH_WORD', 0);
define('UDM_MODE_ALL', 0);
define('UDM_MODE_ANY', 0);
define('UDM_MODE_BOOL', 0);
define('UDM_MODE_PHRASE', 0);
define('UDM_PARAM_BROWSER_CHARSET', 0);
define('UDM_PARAM_CACHE_MODE', 0);
define('UDM_PARAM_CHARSET', 0);
define('UDM_PARAM_CROSSWORDS', 0);
define('UDM_PARAM_CROSS_WORDS', 0);
define('UDM_PARAM_DATADIR', 0);
define('UDM_PARAM_FIRST_DOC', 0);
define('UDM_PARAM_FOUND', 0);
define('UDM_PARAM_HLBEG', 0);
define('UDM_PARAM_HLEND', 0);
define('UDM_PARAM_ISPELL_PREFIX', 0);
define('UDM_PARAM_ISPELL_PREFIXES', 0);
define('UDM_PARAM_LAST_DOC', 0);
define('UDM_PARAM_LOCAL_CHARSET', 0);
define('UDM_PARAM_MAX_WORDLEN', 0);
define('UDM_PARAM_MAX_WORD_LEN', 0);
define('UDM_PARAM_MIN_WORDLEN', 0);
define('UDM_PARAM_MIN_WORD_LEN', 0);
define('UDM_PARAM_NUM_ROWS', 0);
define('UDM_PARAM_PAGE_NUM', 0);
define('UDM_PARAM_PAGE_SIZE', 0);
define('UDM_PARAM_PHRASE_MODE', 0);
define('UDM_PARAM_PREFIX', 0);
define('UDM_PARAM_PREFIXES', 0);
define('UDM_PARAM_QSTRING', 0);
define('UDM_PARAM_REMOTE_ADDR', 0);
define('UDM_PARAM_SEARCHD', 0);
define('UDM_PARAM_SEARCHTIME', 0);
define('UDM_PARAM_SEARCH_MODE', 0);
define('UDM_PARAM_SEARCH_TIME', 0);
define('UDM_PARAM_STOPFILE', 0);
define('UDM_PARAM_STOPTABLE', 0);
define('UDM_PARAM_STOP_FILE', 0);
define('UDM_PARAM_STOP_TABLE', 0);
define('UDM_PARAM_SYNONYM', 0);
define('UDM_PARAM_TRACK_MODE', 0);
define('UDM_PARAM_VARDIR', 0);
define('UDM_PARAM_WEIGHT_FACTOR', 0);
define('UDM_PARAM_WORDINFO', 0);
define('UDM_PARAM_WORD_INFO', 0);
define('UDM_PARAM_WORD_MATCH', 0);
define('UDM_PHRASE_DISABLED', 0);
define('UDM_PHRASE_ENABLED', 0);
define('UDM_PREFIXES_DISABLED', 0);
define('UDM_PREFIXES_ENABLED', 0);
define('UDM_PREFIX_DISABLED', 0);
define('UDM_PREFIX_ENABLED', 0);
define('UDM_TRACK_DISABLED', 0);
define('UDM_TRACK_ENABLED', 0);
define('VARCMP_EQ', 0);
define('VARCMP_GT', 0);
define('VARCMP_LT', 0);
define('VARCMP_NULL', 0);
define('VT_ARRAY', 0);
define('VT_BOOL', 0);
define('VT_BSTR', 0);
define('VT_BYREF', 0);
define('VT_CY', 0);
define('VT_DATE', 0);
define('VT_DECIMAL', 0);
define('VT_DISPATCH', 0);
define('VT_EMPTY', 0);
define('VT_ERROR', 0);
define('VT_I1', 0);
define('VT_I2', 0);
define('VT_I4', 0);
define('VT_INT', 0);
define('VT_NULL', 0);
define('VT_R4', 0);
define('VT_R8', 0);
define('VT_UI1', 0);
define('VT_UI2', 0);
define('VT_UI4', 0);
define('VT_UINT', 0);
define('VT_UNKNOWN', 0);
define('VT_VARIANT', 0);
define('WIN32_ERROR_CALL_NOT_IMPLEMENTED', 0);
define('WIN32_NO_ERROR', 0);
define('WIN32_SERVICE_ACCEPT_HARDWAREPROFILECHANGE', 0);
define('WIN32_SERVICE_ACCEPT_NETBINDCHANGE', 0);
define('WIN32_SERVICE_ACCEPT_PARAMCHANGE', 0);
define('WIN32_SERVICE_ACCEPT_PAUSE_CONTINUE', 0);
define('WIN32_SERVICE_ACCEPT_POWEREVENT', 0);
define('WIN32_SERVICE_ACCEPT_SESSIONCHANGE', 0);
define('WIN32_SERVICE_ACCEPT_SHUTDOWN', 0);
define('WIN32_SERVICE_ACCEPT_STOP', 0);
define('WIN32_SERVICE_CONTINUE_PENDING', 0);
define('WIN32_SERVICE_CONTROL_CONTINUE', 0);
define('WIN32_SERVICE_CONTROL_HARDWAREPROFILECHANGE', 0);
define('WIN32_SERVICE_CONTROL_INTERROGATE', 0);
define('WIN32_SERVICE_CONTROL_PAUSE', 0);
define('WIN32_SERVICE_CONTROL_POWEREVENT', 0);
define('WIN32_SERVICE_CONTROL_SESSIONCHANGE', 0);
define('WIN32_SERVICE_CONTROL_STOP', 0);
define('WIN32_SERVICE_FILE_SYSTEM_DRIVER', 0);
define('WIN32_SERVICE_INTERACTIVE_PROCESS', 0);
define('WIN32_SERVICE_KERNEL_DRIVER', 0);
define('WIN32_SERVICE_PAUSED', 0);
define('WIN32_SERVICE_PAUSE_PENDING', 0);
define('WIN32_SERVICE_RUNNING', 0);
define('WIN32_SERVICE_RUNS_IN_SYSTEM_PROCESS', 0);
define('WIN32_SERVICE_START_PENDING', 0);
define('WIN32_SERVICE_STOPPED', 0);
define('WIN32_SERVICE_STOP_PENDING', 0);
define('WIN32_SERVICE_WIN32_OWN_PROCESS', 0);
define('WIN32_SERVICE_WIN32_SHARE_PROCESS', 0);
define('WNOHANG', 0);
define('WUNTRACED', 0);
define('XATTR_CREATE', 0);
define('XATTR_DONTFOLLOW', 0);
define('XATTR_REPLACE', 0);
define('XATTR_ROOT', 0);
define('XDIFF_PATCH_NORMAL', 0);
define('XDIFF_PATCH_REVERSE', 0);
define('XML_ATTRIBUTE_CDATA', 0);
define('XML_ATTRIBUTE_DECL_NODE', 0);
define('XML_ATTRIBUTE_ENTITY', 0);
define('XML_ATTRIBUTE_ENUMERATION', 0);
define('XML_ATTRIBUTE_ID', 0);
define('XML_ATTRIBUTE_IDREF', 0);
define('XML_ATTRIBUTE_IDREFS', 0);
define('XML_ATTRIBUTE_NMTOKEN', 0);
define('XML_ATTRIBUTE_NMTOKENS', 0);
/**
 * Node is an attribute
 **/
define('XML_ATTRIBUTE_NODE', 0);
define('XML_ATTRIBUTE_NOTATION', 0);
define('XML_CDATA_SECTION_NODE', 0);
/**
 * Node is a comment
 **/
define('XML_COMMENT_NODE', 0);
define('XML_DOCUMENT_FRAG_NODE', 0);
/**
 * Node is a document
 **/
define('XML_DOCUMENT_NODE', 0);
define('XML_DOCUMENT_TYPE_NODE', 0);
define('XML_DTD_NODE', 0);
define('XML_ELEMENT_DECL_NODE', 0);
/**
 * Node is an element
 **/
define('XML_ELEMENT_NODE', 0);
define('XML_ENTITY_DECL_NODE', 0);
/**
 * Node is an entity like nbsp;
 **/
define('XML_ENTITY_NODE', 0);
define('XML_ENTITY_REF_NODE', 0);
define('XML_ERROR_ASYNC_ENTITY', 0);
define('XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF', 0);
define('XML_ERROR_BAD_CHAR_REF', 0);
define('XML_ERROR_BINARY_ENTITY_REF', 0);
define('XML_ERROR_DUPLICATE_ATTRIBUTE', 0);
define('XML_ERROR_EXTERNAL_ENTITY_HANDLING', 0);
define('XML_ERROR_INCORRECT_ENCODING', 0);
define('XML_ERROR_INVALID_TOKEN', 0);
define('XML_ERROR_JUNK_AFTER_DOC_ELEMENT', 0);
define('XML_ERROR_MISPLACED_XML_PI', 0);
define('XML_ERROR_NONE', 0);
define('XML_ERROR_NO_ELEMENTS', 0);
define('XML_ERROR_NO_MEMORY', 0);
define('XML_ERROR_PARAM_ENTITY_REF', 0);
define('XML_ERROR_PARTIAL_CHAR', 0);
define('XML_ERROR_RECURSIVE_ENTITY_REF', 0);
define('XML_ERROR_SYNTAX', 0);
define('XML_ERROR_TAG_MISMATCH', 0);
define('XML_ERROR_UNCLOSED_CDATA_SECTION', 0);
define('XML_ERROR_UNCLOSED_TOKEN', 0);
define('XML_ERROR_UNDEFINED_ENTITY', 0);
define('XML_ERROR_UNKNOWN_ENCODING', 0);
define('XML_GLOBAL_NAMESPACE', 0);
define('XML_HTML_DOCUMENT_NODE', 0);
define('XML_LOCAL_NAMESPACE', 0);
define('XML_NAMESPACE_DECL_NODE', 0);
define('XML_NOTATION_NODE', 0);
define('XML_OPTION_CASE_FOLDING', 0);
define('XML_OPTION_SKIP_TAGSTART', 0);
define('XML_OPTION_SKIP_WHITE', 0);
define('XML_OPTION_TARGET_ENCODING', 0);
/**
 * Node is a processing instruction
 **/
define('XML_PI_NODE', 0);
define('XML_SAX_IMPL', '');
/**
 * Node is a piece of text
 **/
define('XML_TEXT_NODE', 0);
define('XPATH_BOOLEAN', 0);
define('XPATH_LOCATIONSET', 0);
define('XPATH_NODESET', 0);
define('XPATH_NUMBER', 0);
define('XPATH_POINT', 0);
define('XPATH_RANGE', 0);
define('XPATH_STRING', 0);
define('XPATH_UNDEFINED', 0);
define('XPATH_USERS', 0);
define('XSLT_ERR_UNSUPPORTED_SCHEME', 0);
define('XSLT_OPT_SILENT', 0);
define('XSLT_SABOPT_DISABLE_ADDING_META', 0);
define('XSLT_SABOPT_DISABLE_STRIPPING', 0);
define('XSLT_SABOPT_FILES_TO_HANDLER', 0);
define('XSLT_SABOPT_IGNORE_DOC_NOT_FOUND', 0);
define('XSLT_SABOPT_PARSE_PUBLIC_ENTITIES', 0);
define('XSL_CLONE_ALWAYS', 0);
define('XSL_CLONE_AUTO', 0);
define('XSL_CLONE_NEVER', 0);
define('YESEXPR', 0);
define('YESSTR', 0);
define('YPERR_ACCESS', 0);
define('YPERR_BADARGS', 0);
define('YPERR_BADDB', 0);
define('YPERR_BUSY', 0);
define('YPERR_DOMAIN', 0);
define('YPERR_KEY', 0);
define('YPERR_MAP', 0);
define('YPERR_NODOM', 0);
define('YPERR_NOMORE', 0);
define('YPERR_PMAP', 0);
define('YPERR_RESRC', 0);
define('YPERR_RPC', 0);
define('YPERR_VERS', 0);
define('YPERR_YPBIND', 0);
define('YPERR_YPERR', 0);
define('YPERR_YPSERV', 0);
define('__COMPILER_HALT_OFFSET__', 0);
