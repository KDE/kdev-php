<?php
// THIS FILE IS GENERATED
// WARNING! All changes made in this file will be lost!

/**
 * The number of arguments passed to script
 **/
$argc = array();

/**
 * Array of arguments passed to script
 **/
$argv = array();

/**
 * References all variables available in global scope
 * 
 * @superglobal
 **/
$GLOBALS = array();

/**
 * HTTP Cookies
 * 
 * @deprecated
 **/
$HTTP_COOKIE_VARS = array();

/**
 * Environment variables
 * 
 * @deprecated
 **/
$HTTP_ENV_VARS = array();

/**
 * HTTP GET variables
 * 
 * @deprecated
 **/
$HTTP_GET_VARS = array();

/**
 * HTTP File Upload variables
 * 
 * @deprecated
 **/
$HTTP_POST_FILES = array();

/**
 * HTTP POST variables
 * 
 * @deprecated
 **/
$HTTP_POST_VARS = array();

/**
 * Raw POST data
 **/
$HTTP_RAW_POST_DATA = array();

/**
 * HTTP response headers
 **/
$http_response_header = array();

/**
 * Server and execution environment information
 * 
 * @deprecated
 **/
$HTTP_SERVER_VARS = array();

/**
 * Session variables
 * 
 * @deprecated
 **/
$HTTP_SESSION_VARS = array();

/**
 * The previous error message
 **/
$php_errormsg = array();

/**
 * HTTP Cookies
 * 
 * @superglobal
 **/
$_COOKIE = array();

/**
 * Environment variables
 * 
 * @superglobal
 **/
$_ENV = array();

/**
 * HTTP File Upload variables
 * 
 * @superglobal
 **/
$_FILES = array();

/**
 * HTTP GET variables
 * 
 * @superglobal
 **/
$_GET = array();

/**
 * HTTP POST variables
 * 
 * @superglobal
 **/
$_POST = array();

/**
 * HTTP Request variables
 * 
 * @superglobal
 **/
$_REQUEST = array();

/**
 * Server and execution environment information
 * 
 * @superglobal
 **/
$_SERVER = array();

/**
 * Session variables
 * 
 * @superglobal
 **/
$_SESSION = array();

/**
 * is the base class for all Exceptions.
 **/
class Exception extends Exception {
    /**
     * Returns the Exception code.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getCode(){}

    /**
     * Get the name of the file the exception was thrown from.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getFile(){}

    /**
     * Returns line number where the exception was thrown.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getLine(){}

    /**
     * Returns the Exception message.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getMessage(){}

    /**
     * Returns previous Exception (the third parameter of
     * Exception::__construct).
     * 
     * @return Exception
     * @since PHP 5 >= 5.3.0
     **/
    function getPrevious(){}

    /**
     * Returns the Exception stack trace.
     * 
     * @return array
     * @since PHP 5 >= 5.1.0
     **/
    function getTrace(){}

    /**
     * Returns the Exception stack trace as a string.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getTraceAsString(){}

    /**
     * Tries to clone the Exception, which results in Fatal error.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function __clone(){}

    /**
     * Returns the string representation of the exception.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function __toString(){}

}
/**
 * Represents a connection to an AMQP broker.
 **/
class AMQPConnection {
    /**
     * This method will check whether the connection to the AMQP broker is
     * still valid. It does so by checking the return status of the last
     * command.
     * 
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function isConnected(){}

    /**
     * Creates an AMQPConnection instance representing a connection to an
     * AMQP broker.
     * 
     * @param array $credentials The {@link credentials} is an optional
     *   array of credential information for connecting to the AMQP broker.
     *   The keys used in the {@link credentials} array are: host, port,
     *   vhost, login and password. All other keys will be ignored. For each
     *   missing credential, the extension will check the ini settings or use
     *   the default value.
     * @since PECL amqp >= Unknown
     **/
    function __construct($credentials){}

}
class AMQPConnectionException extends AMQPException {
}
class AMQPException extends Exception {
}
/**
 * Represents an AMQP exchange.
 **/
class AMQPExchange {
    /**
     * Bind an exchange to a queue using the specified routing key.
     * 
     * @param string $queue_name The name of the queue to which to bind.
     * @param string $routing_key The routing key to use as a binding.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function bind($queue_name, $routing_key){}

    /**
     * Delete and exchange from the broker.
     * 
     * @param string $exchange_name The name of the exchange to delete. If
     *   the AMQPExchange object is already bound to an existing exchange and
     *   then {@link exchange_name} is not specified, the exchange bound to
     *   the AMQPExchange object will be deleted.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function delete($exchange_name){}

    /**
     * Publish a message to the exchange represented by the AMQPExchange
     * object.
     * 
     * @param string $message The message to publish.
     * @param string $routing_key The routing key to which to publish.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function publish($message, $routing_key){}

    /**
     * Returns a new instance of an AMQPExchange object, associated with the
     * given AMQPConnection object. If the {@link exchange_name} parameter is
     * specified and the an exchange by that name exists on the broker, an
     * instance of that specific exchange will be returned. Otherwise, the
     * {@link exchange_name} is ignored.
     * 
     * @param AMQPConnection $connection A valid AMQPConnection object,
     *   connected to a broker.
     * @param string $exchange_name The name of an existing exchange to
     *   represent.
     * @since PECL amqp >= Unknown
     **/
    function __construct($connection, $exchange_name){}

}
class AMQPExchangeException extends AMQPException {
}
/**
 * Represents an AMQP queue.
 **/
class AMQPQueue {
    /**
     * This method allows the acknowledgement of a message that is retrieved
     * with the AMQP_NOACK flag through AMQPQueue::get or AMQPQueue::consume
     * 
     * @param int $delivery_tag The message delivery tag of which to
     *   acknowledge receipt.
     * @param int $flags The only valid flag that can be passed is
     *   AMQP_MULTIPLE.
     * @return void
     **/
    function ack($delivery_tag, $flags){}

    /**
     * The bind method will bind the given queue to the specified routing key
     * on the given exchange.
     * 
     * @param string $exchange_name The exchange name on which to bind.
     * @param string $routing_key The routing key to which to bind.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function bind($exchange_name, $routing_key){}

    /**
     * Cancel a queue that is already bound to an exchange and routing key.
     * 
     * @param string $consumer_tag The queue name to cancel, if the queue
     *   object is not already representative of a queue.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function cancel($consumer_tag){}

    /**
     * @param string $num_messages
     * @param string $flags
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function consume($num_messages, $flags){}

    /**
     * Delete a queue from the broker, including its entire contents of
     * unread or unacknowledged messages.
     * 
     * @param string $queue_name The name of the queue to delete.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function delete($queue_name){}

    /**
     * Retrieve the next message from the queue.
     * 
     * @param string $flags A bitmask of any of the flags: AMQP_NOACK.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function get($flags){}

    /**
     * Purge the contents of a queue.
     * 
     * @param string $queue_name The name of the queue to purge
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function purge($queue_name){}

    /**
     * Remove a routing key binding on an exchange from the given queue.
     * 
     * @param string $exchange_name The name of the exchange on which the
     *   queue is bound.
     * @param string $routing_key The binding routing key used by the
     *   queue.
     * @return void
     * @since PECL amqp >= Unknown
     **/
    function unbind($exchange_name, $routing_key){}

    /**
     * Creates an AMQPQueue instance representing an AMQP queue on the
     * broker.
     * 
     * @param string $amqp_connection A valid AMQPConnection object.
     * @param string $queue_name The name of the queue to construct. If no
     *   queue name is specified, the broker will generate one.
     * @since PECL amqp >= Unknown
     **/
    function __construct($amqp_connection, $queue_name){}

}
class AMQPQueueException extends AMQPException {
}
/**
 * The class makes it easier to iterate over large APC caches. This is
 * helpful as it allows iterating over large caches in steps, while
 * grabbing a defined number of entries per lock instance, so it frees
 * the cache locks for other activities rather than hold up the entire
 * cache to grab 100 (the default) entries. Also, using regular
 * expression matching is more efficient as it's been moved to the C
 * level.
 **/
class APCIterator implements Iterator, Traversable {
    /**
     * Gets the current item from the APCIterator stack.
     * 
     * @return mixed
     * @since PECL apc >= 3.1.1
     **/
    function current(){}

    /**
     * Get the total count.
     * 
     * @return integer
     * @since PECL apc >= 3.1.1
     **/
    function getTotalCount(){}

    /**
     * Gets the total number of cache hits.
     * 
     * @return integer
     * @since PECL apc >= 3.1.1
     **/
    function getTotalHits(){}

    /**
     * Gets the total cache size.
     * 
     * @return int
     * @since PECL apc >= 3.1.1
     **/
    function getTotalSize(){}

    /**
     * Gets the current iterator key.
     * 
     * @return string
     * @since PECL apc >= 3.1.1
     **/
    function key(){}

    /**
     * Moves the iterator pointer to the next element.
     * 
     * @return void
     * @since PECL apc >= 3.1.1
     **/
    function next(){}

    /**
     * Rewinds back the iterator to the first element.
     * 
     * @return void
     * @since PECL apc >= 3.1.1
     **/
    function rewind(){}

    /**
     * Checks if the current iterator position is valid.
     * 
     * @return void
     * @since PECL apc >= 3.1.1
     **/
    function valid(){}

    /**
     * Constructs an APCIterator object.
     * 
     * @param string $cache The cache type, which will be user or file.
     * @param mixed $search A PCRE regular expression that matches against
     *   APC key names, either as a string for a single regular expression,
     *   or as an array of regular expressions. Or, optionally pass in to
     *   skip the search.
     * @param int $format The desired format, as configured with one ore
     *   more of the APC_ITER_* constants.
     * @param int $chunk_size The chunk size. Must be a value greater than
     *   0. The default value is 100.
     * @param int $list The type to list. Either pass in APC_LIST_ACTIVE or
     *   APC_LIST_INACTIVE.
     * @since PECL apc >= 3.1.1
     **/
    function __construct($cache, $search, $format, $chunk_size, $list){}

}
/**
 * Iterate over multiple collections.
 **/
class AppendIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Appends an iterator.
     * 
     * @param Iterator $iterator The iterator to append.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function append($iterator){}

    /**
     * Gets the current value.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * The getArrayIterator method
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getArrayIterator(){}

    /**
     * Get an inner iterator
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator(){}

    /**
     * Get an index of iterators.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getIteratorIndex(){}

    /**
     * Get the current key
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Moves to the next element. If this means to another Iterator then it
     * rewinds that Iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Rewind to the first element of the first inner Iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Checks validity of the current element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

    /**
     * Constructs an AppendIterator.
     * 
     * @since PHP 5 >= 5.1.0
     **/
    function __construct(){}

}
/**
 * Interface to provide accessing objects as arrays.
 **/
interface ArrayAccess {
    /**
     * Whether or not an offset exists.
     * 
     * This method is executed when using {@link isset} or {@link empty} on
     * objects implementing ArrayAccess.
     * 
     * @param mixed $offset An offset to check for.
     * @return boolean
     * @since PHP 5 >= 5.1.0
     **/
    function offsetExists($offset);

    /**
     * Returns the value at specified offset.
     * 
     * This method is executed when checking if offset is {@link empty}.
     * 
     * @param mixed $offset The offset to retrieve.
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function offsetGet($offset);

    /**
     * Assigns a value to the specified offset.
     * 
     * @param mixed $offset The offset to assign the value to.
     * @param mixed $value The value to set.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function offsetSet($offset, $value);

    /**
     * Unsets an offset.
     * 
     * @param mixed $offset The offset to unset.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function offsetUnset($offset);

}
/**
 * This iterator allows to unset and modify values and keys while
 * iterating over Arrays and Objects.
 * 
 * When you want to iterate over the same array multiple times you need
 * to instantiate ArrayObject and let it create ArrayIterator instances
 * that refer to it either by using or by calling its getIterator()
 * method manually.
 **/
class ArrayIterator implements Iterator, Traversable, ArrayAccess, SeekableIterator, Countable {
    /**
     * Appends value as the last element.
     * 
     * @param mixed $value The value to append.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function append($value){}

    /**
     * Sorts an array by values.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function asort(){}

    /**
     * Gets the number of elements in the array, or the number of public
     * properties in the object.
     * 
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function count(){}

    /**
     * Get the current array entry.
     * 
     * @return mixed
     * @since PHP 5 >= 5.0.0
     **/
    function current(){}

    /**
     * Get a copy of an array.
     * 
     * @return array
     * @since PHP 5 >= 5.0.0
     **/
    function getArrayCopy(){}

    /**
     * Get the current flags.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getFlags(){}

    /**
     * This function returns the current array key
     * 
     * @return mixed
     * @since PHP 5 >= 5.0.0
     **/
    function key(){}

    /**
     * Sorts an array by the keys.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function ksort(){}

    /**
     * Sort the entries by values using a case insensitive "natural order"
     * algorithm.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function natcasesort(){}

    /**
     * Sort the entries by values using "natural order" algorithm.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function natsort(){}

    /**
     * The iterator to the next entry.
     * 
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function next(){}

    /**
     * Checks if the offset exists.
     * 
     * @param string $index The offset being checked.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function offsetExists($index){}

    /**
     * Gets the value from the provided offset.
     * 
     * @param string $index The offset to get the value from.
     * @return mixed
     * @since PHP 5 >= 5.0.0
     **/
    function offsetGet($index){}

    /**
     * Sets a value for a given offset.
     * 
     * @param string $index The index to set for.
     * @param string $newval The new value to store at the index.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function offsetSet($index, $newval){}

    /**
     * Unsets a value for an offset.
     * 
     * @param string $index The offset to unset.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function offsetUnset($index){}

    /**
     * This rewinds the iterator to the beginning.
     * 
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function rewind(){}

    /**
     * @param int $position The position to seek to.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function seek($position){}

    /**
     * Serialize.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function serialize(){}

    /**
     * Sets behaviour flags.
     * 
     * @param string $flags A bitmask as follows: 0 = Properties of the
     *   object have their normal functionality when accessed as list
     *   (var_dump, foreach, etc.). 1 = Array indices can be accessed as
     *   properties in read/write.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setFlags($flags){}

    /**
     * Sort the entries by values using user defined function.
     * 
     * @param string $cmp_function The compare function used for the sort.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function uasort($cmp_function){}

    /**
     * Sort the entries by key using user defined function.
     * 
     * @param string $cmp_function The compare function used for the sort.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function uksort($cmp_function){}

    /**
     * Unserialize.
     * 
     * @param string $serialized The serialized ArrayIterator object to be
     *   unserialized.
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function unserialize($serialized){}

    /**
     * Checks if the array contains any more entries.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.0
     **/
    function valid(){}

    /**
     * Constructs an ArrayIterator object.
     * 
     * @param mixed $array The array or object to be iterated on.
     * @since PHP 5 >= 5.0.0
     **/
    function __construct($array){}

}
/**
 * This class allows objects to work as arrays.
 **/
class ArrayObject implements IteratorAggregate, Traversable, ArrayAccess, Serializable, Countable {
    /**
     * Appends a new value as the last element.
     * 
     * @param mixed $value The value being appended.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function append($value){}

    /**
     * Sorts the entries such that the keys maintain their correlation with
     * the entries they are associated with. This is used mainly when sorting
     * associative arrays where the actual element order is significant.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function asort(){}

    /**
     * Get the number of public properties in the ArrayObject.
     * 
     * @return int
     * @since PHP 5 >= 5.0.0
     **/
    function count(){}

    /**
     * Exchange the current array with another array or object.
     * 
     * @param mixed $input The new array or object to exchange with the
     *   current array.
     * @return array
     * @since PHP 5 >= 5.1.0
     **/
    function exchangeArray($input){}

    /**
     * Exports the ArrayObject to an array.
     * 
     * @return array
     * @since PHP 5 >= 5.0.0
     **/
    function getArrayCopy(){}

    /**
     * Gets the behavior flags of the ArrayObject. See the
     * ArrayObject::setFlags method for a list of the available flags.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getFlags(){}

    /**
     * Create a new iterator from an ArrayObject instance.
     * 
     * @return ArrayIterator
     * @since PHP 5 >= 5.0.0
     **/
    function getIterator(){}

    /**
     * Gets the class name of the array iterator that is used by
     * ArrayObject::getIterator().
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getIteratorClass(){}

    /**
     * Sorts the entries by key, maintaining key to entry correlations. This
     * is useful mainly for associative arrays.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function ksort(){}

    /**
     * This method is a case insensitive version of ArrayObject::natsort.
     * 
     * This method implements a sort algorithm that orders alphanumeric
     * strings in the way a human being would while maintaining key/value
     * associations. This is described as a "natural ordering".
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function natcasesort(){}

    /**
     * This method implements a sort algorithm that orders alphanumeric
     * strings in the way a human being would while maintaining key/value
     * associations. This is described as a "natural ordering". An example of
     * the difference between this algorithm and the regular computer string
     * sorting algorithms (used in ArrayObject::asort) method can be seen in
     * the example below.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function natsort(){}

    /**
     * @param mixed $index The index being checked.
     * @return bool
     * @since PHP 5 >= 5.0.0
     **/
    function offsetExists($index){}

    /**
     * @param mixed $index The index with the value.
     * @return mixed
     * @since PHP 5 >= 5.0.0
     **/
    function offsetGet($index){}

    /**
     * Sets the value at the specified index to newval.
     * 
     * @param mixed $index The index being set.
     * @param mixed $newval The new value for the {@link index}.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function offsetSet($index, $newval){}

    /**
     * Unsets the value at the specified index.
     * 
     * @param mixed $index The index being unset.
     * @return void
     * @since PHP 5 >= 5.0.0
     **/
    function offsetUnset($index){}

    /**
     * Serializes an ArrayObject.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function serialize(){}

    /**
     * Set the flags that change the behavior of the ArrayObject.
     * 
     * @param int $flags The new ArrayObject behavior. It takes on either a
     *   bitmask, or named constants. Using named constants is strongly
     *   encouraged to ensure compatibility for future versions. The
     *   available behavior flags are listed below. The actual meanings of
     *   these flags are described in the predefined constants. ArrayObject
     *   behavior flags value constant 1 ArrayObject::STD_PROP_LIST 2
     *   ArrayObject::ARRAY_AS_PROPS
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setFlags($flags){}

    /**
     * Sets the classname of the array iterator that is used by
     * ArrayObject::getIterator().
     * 
     * @param string $iterator_class The classname of the array iterator to
     *   use when iterating over this object.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setIteratorClass($iterator_class){}

    /**
     * This function sorts the entries such that keys maintain their
     * correlation with the entry that they are associated with, using a
     * user-defined comparison function.
     * 
     * This is used mainly when sorting associative arrays where the actual
     * element order is significant.
     * 
     * @param callback $cmp_function Function {@link cmp_function} should
     *   accept two parameters which will be filled by pairs of entries. The
     *   comparison function must return an integer less than, equal to, or
     *   greater than zero if the first argument is considered to be
     *   respectively less than, equal to, or greater than the second.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function uasort($cmp_function){}

    /**
     * This function sorts the keys of the entries using a user-supplied
     * comparison function. The key to entry correlations will be maintained.
     * 
     * @param callback $cmp_function The callback comparison function.
     *   Function {@link cmp_function} should accept two parameters which
     *   will be filled by pairs of entry keys. The comparison function must
     *   return an integer less than, equal to, or greater than zero if the
     *   first argument is considered to be respectively less than, equal to,
     *   or greater than the second.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function uksort($cmp_function){}

    /**
     * Unserializes a serialized ArrayObject.
     * 
     * @param string $serialized The serialized ArrayObject.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function unserialize($serialized){}

}
/**
 * Exception thrown if a callback refers to an undefined function or if
 * some arguments are missing
 **/
class BadFunctionCallException extends LogicException {
}
/**
 * Exception thrown if a callback refers to an undefined method or if
 * some arguments are missing
 **/
class BadMethodCallException extends BadFunctionCallException {
}
/**
 * This object supports cached iteration over another iterator.
 **/
class CachingIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator, ArrayAccess, Countable {
    const CALL_TOSTRING = 0;
    const CATCH_GET_CHILD = 0;
    /**
     * May return the number of elements in the iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.2.2
     **/
    function count(){}

    /**
     * May return the current element in the iteration.
     * 
     * @return void
     * @since PHP 5
     **/
    function current(){}

    /**
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function getCache(){}

    /**
     * Get the bitmask of the flags used for this CachingIterator instance.
     * 
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function getFlags(){}

    /**
     * Returns the iterator sent to the constructor.
     * 
     * @return void
     * @since PHP 5
     **/
    function getInnerIterator(){}

    /**
     * @return void
     * @since PHP 5
     **/
    function hasNext(){}

    /**
     * This method may return a key for the current element.
     * 
     * @return void
     * @since PHP 5
     **/
    function key(){}

    /**
     * Move the iterator forward.
     * 
     * @return void
     * @since PHP 5
     **/
    function next(){}

    /**
     * @param string $index The index being checked.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function offsetExists($index){}

    /**
     * @param string $index Description...
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function offsetGet($index){}

    /**
     * @param string $index The index of the element to be set.
     * @param string $newval The new value for the {@link index}.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function offsetSet($index, $newval){}

    /**
     * @param string $index The index of the element to be unset.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function offsetUnset($index){}

    /**
     * Rewind the iterator.
     * 
     * @return void
     * @since PHP 5
     **/
    function rewind(){}

    /**
     * Set the flags for the CachingIterator object.
     * 
     * @param bitmask $flags Bitmask of the flags to set.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function setFlags($flags){}

    /**
     * Check whether the current element is valid.
     * 
     * @return void
     * @since PHP 5
     **/
    function valid(){}

    /**
     * @param Iterator $iterator Iterator to cache
     * @param string $flags Bitmask of flags.
     * @since PHP 5
     **/
    function __construct($iterator, $flags){}

    /**
     * Get the string representation of the current element.
     * 
     * @return void
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * Simple class with some static helper methods.
 **/
class Cairo {
    /**
     * Returns an array with the available font backends
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function availableFonts(){}

    /**
     * Returns an array with the available surface backends
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function availableSurfaces(){}

    /**
     * Retrieves the current status as a readable string
     * 
     * @param int $status A valid status code given by {@link cairo_status}
     *   or CairoContext::status
     * @return string
     * @since PECL cairo >= 0.1.0
     **/
    function statusToString($status){}

    /**
     * Retrieves the current version of the cairo library as an integer value
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function version(){}

    /**
     * Retrieves the current cairo library version as a string.
     * 
     * @return string
     * @since PECL cairo >= 0.1.0
     **/
    function versionString(){}

}
/**
 * Enum class that specifies the type of antialiasing to do when
 * rendering text or shapes.
 **/
class CairoAntialias {
}
/**
 * is used to describe the content that a surface will contain, whether
 * color information, alpha information (translucence vs. opacity), or
 * both.
 * 
 * Note: The large values here are designed to keep values distinct from
 * values so that the implementation can detect the error if users
 * confuse the two types.
 **/
class CairoContent {
}
/**
 * Context is the main object used when drawing with cairo. To draw with
 * cairo, you create a , set the target , and drawing options for the ,
 * create shapes with functions . like and , and then draw shapes with or
 * .
 * 
 * Contexts can be pushed to a stack via . They may then safely be
 * changed, without loosing the current state. Use to restore to the
 * saved state.
 **/
class CairoContext {
    /**
     * Appends the {@link path} onto the current path. The {@link path} may
     * be either the return value from one of CairoContext::copyPath or
     * CairoContext::copyPathFlat;
     * 
     * if {@link path} is not a valid CairoPath instance a CairoException
     * will be thrown
     * 
     * @param CairoPath $path CairoContext object
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function appendPath($path){}

    /**
     * Adds a circular arc of the given radius to the current path. The arc
     * is centered at ({@link x}, {@link y}), begins at {@link angle1} and
     * proceeds in the direction of increasing angles to end at {@link
     * angle2}. If {@link angle2} is less than {@link angle1} it will be
     * progressively increased by 2*M_PI until it is greater than {@link
     * angle1}. If there is a current point, an initial line segment will be
     * added to the path to connect the current point to the beginning of the
     * arc. If this initial line is undesired, it can be avoided by calling
     * CairoContext::newSubPath or procedural {@link cairo_new_sub_path}
     * before calling CairoContext::arc or {@link cairo_arc}.
     * 
     * Angles are measured in radians. An angle of 0.0 is in the direction of
     * the positive X axis (in user space). An angle of M_PI/2.0 radians (90
     * degrees) is in the direction of the positive Y axis (in user space).
     * Angles increase in the direction from the positive X axis toward the
     * positive Y axis. So with the default transformation matrix, angles
     * increase in a clockwise direction.
     * 
     * (To convert from degrees to radians, use degrees * (M_PI / 180.).)
     * This function gives the arc in the direction of increasing angles; see
     * CairoContext::arcNegative or {@link cairo_arc_negative} to get the arc
     * in the direction of decreasing angles.
     * 
     * @param float $x A valid CairoContext object
     * @param float $y x position
     * @param float $radius y position
     * @param float $angle1 Radius of the arc
     * @param float $angle2 start angle
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function arc($x, $y, $radius, $angle1, $angle2){}

    /**
     * Adds a circular arc of the given {@link radius} to the current path.
     * The arc is centered at ({@link x}, {@link y}), begins at {@link
     * angle1} and proceeds in the direction of decreasing angles to end at
     * {@link angle2}. If {@link angle2} is greater than {@link angle1} it
     * will be progressively decreased by 2*M_PI until it is less than {@link
     * angle1}.
     * 
     * See CairoContext::arc or {@link cairo_arc} for more details. This
     * function differs only in the direction of the arc between the two
     * angles.
     * 
     * @param float $x A valid CairoContext object
     * @param float $y double x position
     * @param float $radius double y position
     * @param float $angle1 The radius of the desired negative arc
     * @param float $angle2 Start angle of the arc
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function arcNegative($x, $y, $radius, $angle1, $angle2){}

    /**
     * Establishes a new clip region by intersecting the current clip region
     * with the current path as it would be filled by CairoContext::fill or
     * {@link cairo_fill} and according to the current fill rule (see
     * CairoContext::setFillRule or {@link cairo_set_fill_rule}).
     * 
     * After CairoContext::clip or {@link cairo_clip}, the current path will
     * be cleared from the cairo context.
     * 
     * The current clip region affects all drawing operations by effectively
     * masking out any changes to the surface that are outside the current
     * clip region.
     * 
     * Calling CairoContext::clip or {@link cairo_clip} can only make the
     * clip region smaller, never larger. But the current clip is part of the
     * graphics state, so a temporary restriction of the clip region can be
     * achieved by calling CairoContext::clip or {@link cairo_clip} within a
     * CairoContext::save/CairoContext::restore or {@link cairo_save}/{@link
     * cairo_restore} pair. The only other means of increasing the size of
     * the clip region is CairoContext::resetClip or procedural {@link
     * cairo_reset_clip}.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function clip(){}

    /**
     * Computes a bounding box in user coordinates covering the area inside
     * the current clip.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function clipExtents(){}

    /**
     * Establishes a new clip region by intersecting the current clip region
     * with the current path as it would be filled by Context.fill and
     * according to the current FILL RULE (see CairoContext::setFillRule or
     * {@link cairo_set_fill_rule}).
     * 
     * Unlike CairoContext::clip, CairoContext::clipPreserve preserves the
     * path within the Context. The current clip region affects all drawing
     * operations by effectively masking out any changes to the surface that
     * are outside the current clip region.
     * 
     * Calling CairoContext::clipPreserve can only make the clip region
     * smaller, never larger. But the current clip is part of the graphics
     * state, so a temporary restriction of the clip region can be achieved
     * by calling CairoContext::clipPreserve within a
     * CairoContext::save/CairoContext::restore pair. The only other means of
     * increasing the size of the clip region is CairoContext::resetClip.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function clipPreserve(){}

    /**
     * Returns a list-type array with the current clip region as a list of
     * rectangles in user coordinates
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function clipRectangleList(){}

    /**
     * Adds a line segment to the path from the current point to the
     * beginning of the current sub-path, (the most recent point passed to
     * CairoContext::moveTo), and closes this sub-path. After this call the
     * current point will be at the joined endpoint of the sub-path.
     * 
     * The behavior of close_path() is distinct from simply calling
     * CairoContext::lineTo with the equivalent coordinate in the case of
     * stroking. When a closed sub-path is stroked, there are no caps on the
     * ends of the sub-path. Instead, there is a line join connecting the
     * final and initial segments of the sub-path.
     * 
     * If there is no current point before the call to
     * CairoContext::closePath, this function will have no effect.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function closePath(){}

    /**
     * Emits the current page for backends that support multiple pages, but
     * doesn’t clear it, so, the contents of the current page will be
     * retained for the next page too. Use CairoContext::showPage if you want
     * to get an empty page after the emission.
     * 
     * This is a convenience function that simply calls
     * CairoSurface::copyPage on CairoContext’s target.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function copyPage(){}

    /**
     * Creates a copy of the current path and returns it to the user as a
     * CairoPath. See CairoPath for hints on how to iterate over the returned
     * data structure.
     * 
     * This function will always return a valid CairoPath object, but the
     * result will have no data, if either of the following conditions hold:
     * 1. If there is insufficient memory to copy the path. In this case
     * CairoPath->status will be set to CAIRO_STATUS_NO_MEMORY. 2. If {@link
     * context} is already in an error state. In this case CairoPath->status
     * will contain the same status that would be returned by {@link
     * cairo_status}.
     * 
     * In either case, CairoPath->status will be set to
     * CAIRO_STATUS_NO_MEMORY (regardless of what the error status in cr
     * might have been).
     * 
     * @return CairoPath
     * @since PECL cairo >= 0.1.0
     **/
    function copyPath(){}

    /**
     * A CairoContext object
     * 
     * @return CairoPath
     * @since PECL cairo >= 0.1.0
     **/
    function copyPathFlat(){}

    /**
     * Adds a cubic Bezier spline to the path from the current point to
     * position {@link x3} ,{@link y3} in user-space coordinates, using
     * {@link x1}, {@link y1} and {@link x2}, {@link y2} as the control
     * points. After this call the current point will be {@link x3}, {@link
     * y3}.
     * 
     * If there is no current point before the call to CairoContext::curveTo
     * this function will behave as if preceded by a call to
     * CairoContext::moveTo ({@link x1}, {@link y1}).
     * 
     * @param float $x1 A valid CairoContext object created with
     *   CairoContext::__construct or {@link cairo_create}
     * @param float $y1 First control point in the x axis for the curve
     * @param float $x2 First control point in the y axis for the curve
     * @param float $y2 Second control point in x axis for the curve
     * @param float $x3 Second control point in y axis for the curve
     * @param float $y3 Final point in the x axis for the curve
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function curveTo($x1, $y1, $x2, $y2, $x3, $y3){}

    /**
     * Transform a coordinate from device space to user space by multiplying
     * the given point by the inverse of the current transformation matrix
     * (CTM).
     * 
     * @param float $x A valid CairoContext object created with
     *   CairoContext::__construct or {@link cairo_create}
     * @param float $y x value of the coordinate
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function deviceToUser($x, $y){}

    /**
     * Transform a distance vector from device space to user space. This
     * function is similar to CairoContext::deviceToUser or {@link
     * cairo_device_to_user} except that the translation components of the
     * inverse Cairo Transformation Matrix will be ignored when transforming
     * ({@link x},{@link y}).
     * 
     * @param float $x A valid CairoContext object created with
     *   CairoContext::__construct or {@link cairo_create}
     * @param float $y X component of a distance vector
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function deviceToUserDistance($x, $y){}

    /**
     * A drawing operator that fills the current path according to the
     * current CairoFillRule, (each sub-path is implicitly closed before
     * being filled). After CairoContext::fill or {@link cairo_fill}, the
     * current path will be cleared from the CairoContext.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function fill(){}

    /**
     * Computes a bounding box in user coordinates covering the area that
     * would be affected, (the “inked” area), by a CairoContext::fill
     * operation given the current path and fill parameters. If the current
     * path is empty, returns an empty rectangle (0,0,0,0). Surface
     * dimensions and clipping are not taken into account.
     * 
     * Contrast with CairoContext::pathExtents, which is similar, but returns
     * non-zero extents for some paths with no inked area, (such as a simple
     * line segment).
     * 
     * Note that CairoContext::fillExtents must necessarily do more work to
     * compute the precise inked areas in light of the fill rule, so
     * CairoContext::pathExtents may be more desirable for sake of
     * performance if the non-inked path extents are desired.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function fillExtents(){}

    /**
     * A drawing operator that fills the current path according to the
     * current CairoFillRule, (each sub-path is implicitly closed before
     * being filled). Unlike CairoContext::fill, CairoContext::fillPreserve
     * (Procedural {@link cairo_fill}, {@link cairo_fill_preserve},
     * respectively) preserves the path within the Context.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function fillPreserve(){}

    /**
     * Gets the font extents for the currently selected font.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function fontExtents(){}

    /**
     * Returns the current CairoAntialias mode, as set by
     * CairoContext::setAntialias.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getAntialias(){}

    /**
     * Gets the current point of the current path, which is conceptually the
     * final point reached by the path so far.
     * 
     * The current point is returned in the user-space coordinate system. If
     * there is no defined current point or if cr is in an error status, x
     * and y will both be set to 0.0. It is possible to check this in advance
     * with CairoContext::hasCurrentPoint.
     * 
     * Most path construction functions alter the current point. See the
     * following for details on how they affect the current point:
     * CairoContext::newPath, CairoContext::newSubPath,
     * CairoContext::appendPath, CairoContext::closePath,
     * CairoContext::moveTo, CairoContext::lineTo, CairoContext::curveTo,
     * CairoContext::relMoveTo, CairoContext::relLineTo,
     * CairoContext::relCurveTo, CairoContext::arc,
     * CairoContext::arcNegative, CairoContext::rectangle,
     * CairoContext::textPath, CairoContext::glyphPath.
     * 
     * Some functions use and alter the current point but do not otherwise
     * change current path: CairoContext::showText.
     * 
     * Some functions unset the current path and as a result, current point:
     * CairoContext::fill, CairoContext::stroke.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getCurrentPoint(){}

    /**
     * Description here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getDash(){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getDashCount(){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getFillRule(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontFace(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontMatrix(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontOptions(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getGroupTarget(){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getLineCap(){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getLineJoin(){}

    /**
     * Description here.
     * 
     * @return float
     * @since PECL cairo >= 0.1.0
     **/
    function getLineWidth(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getMatrix(){}

    /**
     * Description here.
     * 
     * @return float
     * @since PECL cairo >= 0.1.0
     **/
    function getMiterLimit(){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getOperator(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getScaledFont(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getSource(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getTarget(){}

    /**
     * Description here.
     * 
     * @return float
     * @since PECL cairo >= 0.1.0
     **/
    function getTolerance(){}

    /**
     * Description here.
     * 
     * @param array $glyphs Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function glyphPath($glyphs){}

    /**
     * Returns whether a current point is defined on the current path. See
     * CairoContext::getCurrentPoint for details on the current point.
     * 
     * @return bool
     * @since PECL cairo >= 0.1.0
     **/
    function hasCurrentPoint(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function identityMatrix(){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return bool
     * @since PECL cairo >= 0.1.0
     **/
    function inFill($x, $y){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return bool
     * @since PECL cairo >= 0.1.0
     **/
    function inStroke($x, $y){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function lineTo($x, $y){}

    /**
     * Description here.
     * 
     * @param string $pattern Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function mask($pattern){}

    /**
     * Description here.
     * 
     * @param string $surface Description...
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function maskSurface($surface, $x, $y){}

    /**
     * Begin a new sub-path. After this call the current point will be (x,
     * y).
     * 
     * @param string $x A valid CairoContext object.
     * @param string $y The x coordinate of the new position.
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function moveTo($x, $y){}

    /**
     * Clears the current path. After this call there will be no path and no
     * current point.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function newPath(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function newSubPath(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function paint(){}

    /**
     * Description here.
     * 
     * @param string $alpha Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function paintWithAlpha($alpha){}

    /**
     * Description here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function pathExtents(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function popGroup(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function popGroupToSource(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function pushGroup(){}

    /**
     * Description here.
     * 
     * @param string $content Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function pushGroupWithContent($content){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @param string $width Description...
     * @param string $height Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function rectangle($x, $y, $width, $height){}

    /**
     * Description here.
     * 
     * @param string $x1 Description...
     * @param string $y1 Description...
     * @param string $x2 Description...
     * @param string $y2 Description...
     * @param string $x3 Description...
     * @param string $y3 Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function relCurveTo($x1, $y1, $x2, $y2, $x3, $y3){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function relLineTo($x, $y){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function relMoveTo($x, $y){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function resetClip(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function restore(){}

    /**
     * Description here.
     * 
     * @param string $angle Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function rotate($angle){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function save(){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function scale($x, $y){}

    /**
     * Description here.
     * 
     * @param string $family Description...
     * @param string $slant Description...
     * @param string $weight Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function selectFontFace($family, $slant, $weight){}

    /**
     * Description here.
     * 
     * @param string $antialias Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setAntialias($antialias){}

    /**
     * Description here.
     * 
     * @param string $dashes Description...
     * @param string $offset Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setDash($dashes, $offset){}

    /**
     * Description here.
     * 
     * @param string $setting Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFillRule($setting){}

    /**
     * Sets the font-face for a given context.
     * 
     * @param CairoFontFace $fontface A CairoContext object to change the
     *   font-face for.
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFontFace($fontface){}

    /**
     * Description here.
     * 
     * @param string $matrix Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFontMatrix($matrix){}

    /**
     * Description here.
     * 
     * @param string $fontoptions Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFontOptions($fontoptions){}

    /**
     * Description here.
     * 
     * @param string $size Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFontSize($size){}

    /**
     * Description here.
     * 
     * @param string $setting Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setLineCap($setting){}

    /**
     * Description here.
     * 
     * @param string $setting Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setLineJoin($setting){}

    /**
     * Description here.
     * 
     * @param string $width Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setLineWidth($width){}

    /**
     * Description here.
     * 
     * @param string $matrix Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setMatrix($matrix){}

    /**
     * Description here.
     * 
     * @param string $limit Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setMiterLimit($limit){}

    /**
     * Description here.
     * 
     * @param string $setting Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setOperator($setting){}

    /**
     * Description here.
     * 
     * @param string $scaledfont Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setScaledFont($scaledfont){}

    /**
     * Description here.
     * 
     * @param string $pattern Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSource($pattern){}

    /**
     * Description here.
     * 
     * @param string $red Description...
     * @param string $green Description...
     * @param string $blue Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSourceRGB($red, $green, $blue){}

    /**
     * Description here.
     * 
     * @param string $red Description...
     * @param string $green Description...
     * @param string $blue Description...
     * @param string $alpha Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSourceRGBA($red, $green, $blue, $alpha){}

    /**
     * Description here.
     * 
     * @param string $surface Description...
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSourceSurface($surface, $x, $y){}

    /**
     * Description here.
     * 
     * @param string $tolerance Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setTolerance($tolerance){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function showPage(){}

    /**
     * Description here.
     * 
     * @param string $text Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function showText($text){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function status(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function stroke(){}

    /**
     * Description here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function strokeExtents(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function strokePreserve(){}

    /**
     * Description here.
     * 
     * @param string $text Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function textExtents($text){}

    /**
     * Description here.
     * 
     * @param string $string Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function textPath($string){}

    /**
     * Description here.
     * 
     * @param string $matrix Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function transform($matrix){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function translate($x, $y){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function userToDevice($x, $y){}

    /**
     * Description here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function userToDeviceDistance($x, $y){}

    /**
     * Creates a new CairoContext object to draw
     * 
     * @param CairoSurface $surface A valid CairoSurface like
     *   CairoImageSurface or CairoPdfSurface
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($surface){}

}
/**
 * class throwed by functions and methods
 **/
class CairoException extends Exception {
}
/**
 * Description of the class.
 **/
class CairoExtend {
}
/**
 * A is used to select how paths are filled. For both fill rules, whether
 * or not a point is included in the fill is determined by taking a ray
 * from that point to infinity and looking at intersections with the
 * path. The ray can be in any direction, as long as it doesn't pass
 * through the end point of a segment or have a tricky intersection such
 * as intersecting tangent to the path. (Note that filling is not
 * actually implemented in this way. This is just a description of the
 * rule that is applied.)
 * 
 * The default fill rule is .
 **/
class CairoFillRule {
}
/**
 * A is used to indicate what filtering should be applied when reading
 * pixel values from patterns. See or for indicating the desired filter
 * to be used with a particular pattern.
 **/
class CairoFilter {
}
/**
 * CairoFontFace abstract class represents a particular font at a
 * particular weight, slant, and other characteristic but no
 * transformation or size.
 * 
 * Note: This class can not be instantiated directly, it is created by or
 * .
 **/
class CairoFontFace {
    /**
     * This function returns the type of the backend used to create a font
     * face. See CairoFontType class constants for available types.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getType(){}

    /**
     * Checks whether an error has previously occurred for this font face
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function status(){}

    /**
     * CairoFontFace class represents a particular font at a particular
     * weight, slant, and other characteristic but no transformation or size.
     * 
     * Note: This class can't be instantiated directly it is created by
     * CairoContext::getFontFace or {@link cairo_scaled_font_get_font_face}
     * 
     * @since PECL cairo >= 0.1.0
     **/
    function __construct(){}

}
/**
 * An opaque structure holding all options that are used when rendering
 * fonts.
 * 
 * Individual features of a cairo_font_options_t can be set or accessed
 * using functions named cairo_font_options_set_feature_name and
 * cairo_font_options_get_feature_name, like
 * cairo_font_options_set_antialias() and
 * cairo_font_options_get_antialias().
 * 
 * New features may be added to in the future. For this reason , , ,
 * (cairo_font_options_copy(), cairo_font_options_equal(),
 * cairo_font_options_merge(), and cairo_font_options_hash() in
 * procedural way) should be used to copy, check for equality, merge, or
 * compute a hash value of objects.
 **/
class CairoFontOptions {
    /**
     * The method description goes here.
     * 
     * @param string $other Description...
     * @return bool
     * @since PECL cairo >= 0.1.0
     **/
    function equal($other){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getAntialias(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getHintMetrics(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getHintStyle(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getSubpixelOrder(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function hash(){}

    /**
     * The method description goes here.
     * 
     * @param string $other Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function merge($other){}

    /**
     * Description here.
     * 
     * @param string $antialias Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setAntialias($antialias){}

    /**
     * The method description goes here.
     * 
     * @param string $hint_metrics Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setHintMetrics($hint_metrics){}

    /**
     * The method description goes here.
     * 
     * @param string $hint_style Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setHintStyle($hint_style){}

    /**
     * The method description goes here.
     * 
     * @param string $subpixel_order Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSubpixelOrder($subpixel_order){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function status(){}

    /**
     * The method description goes here.
     * 
     * @since PECL cairo >= 0.1.0
     **/
    function __construct(){}

}
/**
 * Specifies variants of a font face based on their slant.
 **/
class CairoFontSlant {
}
/**
 * CairoFontType class is an abstract final class that contains constants
 * used to describe the type of a given or . The font types are also
 * known as "font backends" within cairo.
 * 
 * The type of a CairoFontFace is determined by the how it is created, an
 * example would be the . The type can be queried with or
 * 
 * The various functions can be used with a font face of any type.
 * 
 * The type of a is determined by the type of the passed to or . The
 * scaled font type can be queried with or .
 **/
class CairoFontType {
}
/**
 * Specifies variants of a font face based on their weight.
 **/
class CairoFontWeight {
}
/**
 * CairoFormat enums are used to identify the memory format of the image
 * data.
 **/
class CairoFormat {
    /**
     * This method provides a stride value that will respect all alignment
     * requirements of the accelerated image-rendering code within cairo.
     * 
     * @param int $format The desired CairoFormat to use
     * @param int $width The width of the image
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function strideForWidth($format, $width){}

}
/**
 * is an abstract base class from which other Pattern classes derive. It
 * cannot be instantiated directly.
 **/
class CairoGradientPattern extends CairoPattern {
    /**
     * The method description goes here.
     * 
     * @param string $offset Description...
     * @param string $red Description...
     * @param string $green Description...
     * @param string $blue Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function addColorStopRgb($offset, $red, $green, $blue){}

    /**
     * The method description goes here.
     * 
     * @param string $offset Description...
     * @param string $red Description...
     * @param string $green Description...
     * @param string $blue Description...
     * @param string $alpha Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function addColorStopRgba($offset, $red, $green, $blue, $alpha){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getColorStopCount(){}

    /**
     * The method description goes here.
     * 
     * @param string $index Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getColorStopRgba($index){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getExtend(){}

    /**
     * The method description goes here.
     * 
     * @param int $extend Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setExtend($extend){}

}
/**
 * Specifies whether to hint font metrics; hinting font metrics means
 * quantizing them so that they are integer values in device space. Doing
 * this improves the consistency of letter and line spacing, however it
 * also means that text will be laid out differently at different zoom
 * factors.
 **/
class CairoHintMetrics {
}
/**
 * Specifies the type of hinting to do on font outlines. Hinting is the
 * process of fitting outlines to the pixel grid in order to improve the
 * appearance of the result. Since hinting outlines involves distorting
 * them, it also reduces the faithfulness to the original outline shapes.
 * Not all of the outline hinting styles are supported by all font
 * backends.
 **/
class CairoHintStyle {
}
/**
 * CairoImageSurface provide the ability to render to memory buffers
 * either allocated by cairo or by the calling code. The supported image
 * formats are those defined in .
 **/
class CairoImageSurface extends CairoSurface {
    /**
     * The method description goes here.
     * 
     * @param string $data Description...
     * @param int $format Description...
     * @param int $width Description...
     * @param int $height Description...
     * @param int $stride Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function createForData($data, $format, $width, $height, $stride){}

    /**
     * Creates a new CairoImageSurface form a png image file
     * 
     * This method should be called static
     * 
     * @param string $file Path to PNG image file
     * @return CairoImageSurface
     * @since PECL cairo >= 0.1.0
     **/
    function createFromPng($file){}

    /**
     * Returns the image data of this surface or NULL if surface is not an
     * image surface, or if CairoContext::finish, procedural : {@link
     * cairo_surface_finish}, has been called.
     * 
     * @return string
     * @since PECL cairo >= 0.1.0
     **/
    function getData(){}

    /**
     * Retrieves the image format, as one of the CairoFormat defined
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getFormat(){}

    /**
     * This methods returns the CairoImageSurface height.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getHeight(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getStride(){}

    /**
     * Gets the width of the CairoImageSurface
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getWidth(){}

    /**
     * Creates a new CairoImageSuface object of type {@link format}
     * 
     * @param int $format Can be any defined in CairoFormat
     * @param int $width The width of the image surface
     * @param int $height The height of the image surface
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($format, $width, $height){}

}
/**
 * Create a new CairoLinearGradient along the line defined
 **/
class CairoLinearGradient extends CairoGradientPattern {
    /**
     * The method description goes here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getPoints(){}

    /**
     * The method description goes here.
     * 
     * @param float $x0 Description...
     * @param float $y0 Description...
     * @param float $x1 Description...
     * @param float $y1 Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($x0, $y0, $x1, $y1){}

}
/**
 * Specifies how to render the endpoints of the path when stroking.
 * 
 * The default line cap style is .
 **/
class CairoLineCap {
}
/**
 * Description of the class.
 **/
class CairoLineJoin {
}
/**
 * Matrices are used throughout cairo to convert between different
 * coordinate spaces.
 **/
class CairoMatrix {
    /**
     * Creates a new matrix that is an identity transformation. An identity
     * transformation means the source data is copied into the destination
     * data without change
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function initIdentity(){}

    /**
     * Creats a new matrix to a transformation that rotates by radians
     * provided
     * 
     * @param float $radians angle of rotation, in radians. The direction
     *   of rotation is defined such that positive angles rotate in the
     *   direction from the positive X axis toward the positive Y axis. With
     *   the default axis orientation of cairo, positive angles rotate in a
     *   clockwise direction.
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function initRotate($radians){}

    /**
     * Creates a new matrix to a transformation that scales by sx and sy in
     * the X and Y dimensions, respectively.
     * 
     * @param float $sx scale factor in the X direction
     * @param float $sy scale factor in the Y direction
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function initScale($sx, $sy){}

    /**
     * Creates a new matrix to a transformation that translates by tx and ty
     * in the X and Y dimensions, respectively.
     * 
     * @param float $tx amount to translate in the X direction
     * @param float $ty amount to translate in the Y direction
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function initTranslate($tx, $ty){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function invert(){}

    /**
     * The method description goes here.
     * 
     * @param CairoMatrix $matrix1 Description...
     * @param CairoMatrix $matrix2 Description...
     * @return CairoMatrix
     * @since PECL cairo >= 0.1.0
     **/
    function multiply($matrix1, $matrix2){}

    /**
     * Description here.
     * 
     * @param string $sx Description...
     * @param string $sy Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function rotate($sx, $sy){}

    /**
     * Applies scaling by sx, sy to the transformation in the matrix. The
     * effect of the new transformation is to first scale the coordinates by
     * sx and sy, then apply the original transformation to the coordinates.
     * 
     * @param float $sx Procedural only - CairoMatrix instance
     * @param float $sy scale factor in the X direction
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function scale($sx, $sy){}

    /**
     * The method description goes here.
     * 
     * @param string $dx Description...
     * @param string $dy Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function transformDistance($dx, $dy){}

    /**
     * The method description goes here.
     * 
     * @param string $dx Description...
     * @param string $dy Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function transformPoint($dx, $dy){}

    /**
     * Description here.
     * 
     * @param string $tx Description...
     * @param string $ty Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function translate($tx, $ty){}

    /**
     * Returns new CairoMatrix object. Matrices are used throughout cairo to
     * convert between different coordinate spaces. Sets matrix to be the
     * affine transformation given by xx, yx, xy, yy, x0, y0. The
     * transformation is given by: x_new = xx * x + xy * y + x0; and y_new =
     * yx * x + yy * y + y0;
     * 
     * @param float $xx xx component of the affine transformation
     * @param float $yx yx component of the affine transformation
     * @param float $xy xy component of the affine transformation
     * @param float $yy yy component of the affine transformation
     * @param float $x0 X translation component of the affine
     *   transformation
     * @param float $y0 Y translation component of the affine
     *   transformation
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($xx, $yx, $xy, $yy, $x0, $y0){}

}
/**
 * This is used to set the compositing operator for all cairo drawing
 * operations.
 * 
 * The default operator is
 * 
 * The operators marked as unbounded modify their destination even
 * outside of the mask layer (that is, their effect is not bound by the
 * mask layer). However, their effect can still be limited by way of
 * clipping.
 * 
 * To keep things simple, the operator descriptions here document the
 * behavior for when both source and destination are either fully
 * transparent or fully opaque. The actual implementation works for
 * translucent layers too. For a more detailed explanation of the effects
 * of each operator, including the mathematical definitions, see
 * http://cairographics.org/operators/.
 **/
class CairoOperator {
}
/**
 * Description of the class.
 * 
 * Note: CairoPath class cannot be instantiated directly, doing so will
 * result in Fatal Error if used or passed
 **/
class CairoPath {
}
/**
 * is the abstract base class from which all the other pattern classes
 * derive. It cannot be instantiated directly
 **/
class CairoPattern {
    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getMatrix(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getType(){}

    /**
     * Description here.
     * 
     * @param string $matrix Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setMatrix($matrix){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function status(){}

    /**
     * The method description goes here.
     * 
     * @since PECL cairo >= 0.1.0
     **/
    function __construct(){}

}
/**
 * is used to describe the type of a given pattern.
 * 
 * The type of a pattern is determined by the function used to create it.
 * The and functions create patterns. The remaining
 * cairo_pattern_create_* functions map to pattern types in obvious ways.
 **/
class CairoPatternType {
}
/**
 * Description of the class.
 **/
class CairoPdfSurface extends CairoSurface {
    /**
     * The method description goes here.
     * 
     * @param string $width Description...
     * @param string $height Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSize($width, $height){}

    /**
     * The method description goes here.
     * 
     * @param string $file Description...
     * @param float $width Description...
     * @param float $height Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($file, $width, $height){}

}
/**
 * Description of the class.
 **/
class CairoPsLevel {
}
/**
 * Description of the class.
 **/
class CairoPsSurface extends CairoSurface {
    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function dscBeginPageSetup(){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function dscBeginSetup(){}

    /**
     * The method description goes here.
     * 
     * @param string $comment Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function dscComment($comment){}

    /**
     * The method description goes here.
     * 
     * @return bool
     * @since PECL cairo >= 0.1.0
     **/
    function getEps(){}

    /**
     * The method description goes here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getLevels(){}

    /**
     * The method description goes here.
     * 
     * @param string $level Description...
     * @return string
     * @since PECL cairo >= 0.1.0
     **/
    function levelToString($level){}

    /**
     * The method description goes here.
     * 
     * @param string $level Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function restrictToLevel($level){}

    /**
     * The method description goes here.
     * 
     * @param string $level Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setEps($level){}

    /**
     * The method description goes here.
     * 
     * @param string $width Description...
     * @param string $height Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setSize($width, $height){}

    /**
     * The method description goes here.
     * 
     * @param string $file Description...
     * @param float $width Description...
     * @param float $height Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($file, $width, $height){}

}
/**
 * Description of the class.
 **/
class CairoRadialGradient extends CairoGradientPattern {
    /**
     * The method description goes here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getCircles(){}

    /**
     * Creates a new radial gradient CairoPattern between the two circles
     * defined by (x0, y0, r0) and (x1, y1, r1). Before using the gradient
     * pattern, a number of color stops should be defined using
     * CairoRadialGradient::addColorStopRgb or
     * CairoRadialGradient::addColorStopRgba.
     * 
     * Note: The coordinates here are in pattern space. For a new pattern,
     * pattern space is identical to user space, but the relationship between
     * the spaces can be changed with CairoRadialGradient::setMatrix.
     * 
     * @param float $x0 x coordinate for the center of the start circle.
     * @param float $y0 y coordinate for the center of the start circle.
     * @param float $r0 radius of the start circle.
     * @param float $x1 x coordinate for the center of the end circle.
     * @param float $y1 y coordinate for the center of the end circle.
     * @param float $r1 radius of the end circle.
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($x0, $y0, $r0, $x1, $y1, $r1){}

}
/**
 * Description of the class.
 **/
class CairoScaledFont {
    /**
     * The method description goes here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function extents(){}

    /**
     * The method description goes here.
     * 
     * @return CairoMatrix
     * @since PECL cairo >= 0.1.0
     **/
    function getCtm(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontFace(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontMatrix(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontOptions(){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getScaleMatrix(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getType(){}

    /**
     * The method description goes here.
     * 
     * @param string $glyphs Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function glyphExtents($glyphs){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function status(){}

    /**
     * Description here.
     * 
     * @param string $text Description...
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function textExtents($text){}

    /**
     * The method description goes here.
     * 
     * @param CairoFontFace $font_face Description...
     * @param CairoMatrix $matrix Description...
     * @param CairoMatrix $ctm Description...
     * @param CairoFontOptions $options Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($font_face, $matrix, $ctm, $options){}

}
/**
 * Description of the class.
 **/
class CairoSolidPattern extends CairoPattern {
    /**
     * The method description goes here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getRgba(){}

    /**
     * The method description goes here.
     * 
     * @param float $red Description...
     * @param float $green Description...
     * @param float $blue Description...
     * @param float $alpha Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($red, $green, $blue, $alpha){}

}
/**
 * is used to indicate errors that can occur when using Cairo. In some
 * cases it is returned directly by functions. but when using , the last
 * error, if any, is stored in the object and can be retrieved with or .
 * New entries may be added in future versions. Use or to get a
 * human-readable representation of an error message.
 **/
class CairoStatus {
}
/**
 * Description of the class.
 **/
class CairoSubpixelOrder {
}
/**
 * This is the base-class for all other Surface types. CairoSurface is
 * the abstract type representing all different drawing targets that
 * cairo can render to. The actual drawings are performed using a
 * CairoContext.
 **/
class CairoSurface {
    /**
     * Emits the current page for backends that support multiple pages, but
     * doesn't clear it, so that the contents of the current page will be
     * retained for the next page. Use CairoSurface::showPage() if you want
     * to get an empty page after the emission.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function copyPage(){}

    /**
     * Create a new surface that is as compatible as possible with an
     * existing surface. For example the new surface will have the same
     * fallback resolution and font options as other. Generally, the new
     * surface will also use the same backend as other, unless that is not
     * possible for some reason. The type of the returned surface may be
     * examined with CairoSurface::getType(). Initially the surface contents
     * are all 0 (transparent if contents have transparency, black
     * otherwise.)
     * 
     * @param CairoSurface $other An existing surface used to select the
     *   backend of the new surface
     * @param int $content The content for the new surface. See the
     *   CairoContent class for possible values.
     * @param string $width Width of the new surface, (in device-space
     *   units).
     * @param string $height Height of the new surface, (in device-space
     *   units).
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function createSimilar($other, $content, $width, $height){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function finish(){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function flush(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getContent(){}

    /**
     * The method description goes here.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getDeviceOffset(){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getFontOptions(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getType(){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function markDirty(){}

    /**
     * The method description goes here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @param string $width Description...
     * @param string $height Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function markDirtyRectangle($x, $y, $width, $height){}

    /**
     * The method description goes here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setDeviceOffset($x, $y){}

    /**
     * The method description goes here.
     * 
     * @param string $x Description...
     * @param string $y Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFallbackResolution($x, $y){}

    /**
     * Description here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function showPage(){}

    /**
     * Description here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function status(){}

    /**
     * The method description goes here.
     * 
     * @param string $file Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function writeToPng($file){}

    /**
     * CairoSurface is an abstract type and, as such, should not be
     * instantiated in your PHP scripts.
     * 
     * @since PECL cairo >= 0.1.0
     **/
    function __construct(){}

}
/**
 * Description of the class.
 **/
class CairoSurfacePattern extends CairoPattern {
    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getExtend(){}

    /**
     * The method description goes here.
     * 
     * @return int
     * @since PECL cairo >= 0.1.0
     **/
    function getFilter(){}

    /**
     * The method description goes here.
     * 
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function getSurface(){}

    /**
     * The method description goes here.
     * 
     * @param int $extend Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setExtend($extend){}

    /**
     * The method description goes here.
     * 
     * @param string $filter Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function setFilter($filter){}

    /**
     * The method description goes here.
     * 
     * @param CairoSurface $surface Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($surface){}

}
/**
 * Description of the class.
 **/
class CairoSurfaceType {
}
/**
 * Svg specific surface class, uses the SVG (standard vector graphics)
 * surface backend.
 **/
class CairoSvgSurface extends CairoSurface {
    /**
     * Returns a numerically indexed array of currently available
     * CairoSvgVersion constants. In order to retreive the string values for
     * each item, use CairoSvgSurface::versionToString.
     * 
     * @return array
     * @since PECL cairo >= 0.1.0
     **/
    function getVersions(){}

    /**
     * The method description goes here.
     * 
     * @param string $version Description...
     * @return void
     * @since PECL cairo >= 0.1.0
     **/
    function restrictToVersion($version){}

    /**
     * The method description goes here.
     * 
     * @param int $version Description...
     * @return string
     * @since PECL cairo >= 0.1.0
     **/
    function versionToString($version){}

    /**
     * The method description goes here.
     * 
     * @param string $file Description...
     * @param float $width Description...
     * @param float $height Description...
     * @since PECL cairo >= 0.1.0
     **/
    function __construct($file, $width, $height){}

}
/**
 * Description of the class.
 **/
class CairoSvgVersion {
}
/**
 * The class can be used instead of to create a toy font independently of
 * a context.
 **/
class CairoToyFontFace extends CairoFontFace {
}
/**
 * Represents a loaded chdb file.
 **/
class chdb {
    /**
     * Gets the value associated with a key from a chdb database.
     * 
     * @param string $key The key for which to get the value.
     * @return string
     * @since PECL chdb >= 0.1.0
     **/
    function get($key){}

    /**
     * Loads a chdb file, by mapping it into memory. While some validity
     * checks are performed on the specified file, they are mostly there to
     * avoid the possibility of common mistakes (for example, loading a file
     * which is not a chdb database, or that is somehow incompatible with the
     * current system). A maliciously crafted chdb file can thus be dangerous
     * if loaded, so chdb files should be trusted and treated with the same
     * security protections used for PHP shared libraries.
     * 
     * @param string $pathname The name of the file to load.
     * @since PECL chdb >= 0.1.0
     **/
    function __construct($pathname){}

}
/**
 * Provides string comparison capability with support for appropriate
 * locale-sensitive sort orderings.
 **/
class Collator {
    /**
     * This function sorts an array such that array indices maintain their
     * correlation with the array elements they are associated with. This is
     * used mainly when sorting associative arrays where the actual element
     * order is significant. Array elements will have sort order according to
     * current locale rules.
     * 
     * Equivalent to standard PHP {@link asort}.
     * 
     * @param array $arr Collator object.
     * @param int $sort_flag Array of strings to sort.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function asort(&$arr, $sort_flag){}

    /**
     * Compare two Unicode strings according to collation rules.
     * 
     * @param string $str1 Collator object.
     * @param string $str2 The first string to compare.
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function compare($str1, $str2){}

    /**
     * The strings will be compared using the options already specified.
     * 
     * @param string $locale The locale containing the required collation
     *   rules. Special values for locales can be passed in - if null is
     *   passed for the locale, the default locale collation rules will be
     *   used. If empty string ("") or "root" are passed, UCA rules will be
     *   used.
     * @return Collator
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function create($locale){}

    /**
     * Get a value of an integer collator attribute.
     * 
     * @param int $attr Collator object.
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getAttribute($attr){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorCode(){}

    /**
     * Retrieves the message for the last error.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorMessage(){}

    /**
     * Get collector locale name.
     * 
     * @param int $type Collator object.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getLocale($type){}

    /**
     * Return collation key for a string.
     * 
     * @param string $str Collator object.
     * @return string
     **/
    function getSortKey($str){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getStrength(){}

    /**
     * @param int $attr Collator object.
     * @param int $val Attribute.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setAttribute($attr, $val){}

    /**
     * The ICU Collation Service supports many levels of comparison (named
     * "Levels", but also known as "Strengths"). Having these categories
     * enables ICU to sort strings precisely according to local conventions.
     * However, by allowing the levels to be selectively employed, searching
     * for a string in text can be performed with various matching
     * conditions.
     * 
     * Primary Level: Typically, this is used to denote differences between
     * base characters (for example, "a" < "b"). It is the strongest
     * difference. For example, dictionaries are divided into different
     * sections by base character. This is also called the level1 strength.
     * Secondary Level: Accents in the characters are considered secondary
     * differences (for example, "as" < "às" < "at"). Other differences
     * between letters can also be considered secondary differences,
     * depending on the language. A secondary difference is ignored when
     * there is a primary difference anywhere in the strings. This is also
     * called the level2 strength. Note: In some languages (such as Danish),
     * certain accented letters are considered to be separate base
     * characters. In most languages, however, an accented letter only has a
     * secondary difference from the unaccented version of that letter.
     * Tertiary Level: Upper and lower case differences in characters are
     * distinguished at the tertiary level (for example, "ao" < "Ao" <
     * "aò"). In addition, a variant of a letter differs from the base form
     * on the tertiary level (such as "A" and " "). Another example is the
     * difference between large and small Kana. A tertiary difference is
     * ignored when there is a primary or secondary difference anywhere in
     * the strings. This is also called the level3 strength. Quaternary
     * Level: When punctuation is ignored (see Ignoring Punctuations ) at
     * level 13, an additional level can be used to distinguish words with
     * and without punctuation (for example, "ab" < "a-b" < "aB"). This
     * difference is ignored when there is a primary, secondary or tertiary
     * difference. This is also known as the level4 strength. The quaternary
     * level should only be used if ignoring punctuation is required or when
     * processing Japanese text (see Hiragana processing). Identical Level:
     * When all other levels are equal, the identical level is used as a
     * tiebreaker. The Unicode code point values of the NFD form of each
     * string are compared at this level, just in case there is no difference
     * at levels 14. For example, Hebrew cantillation marks are only
     * distinguished at this level. This level should be used sparingly, as
     * only code point values differences between two strings is an extremely
     * rare occurrence. Using this level substantially decreases the
     * performance for both incremental comparison and sort key generation
     * (as well as increasing the sort key length). It is also known as level
     * 5 strength.
     * 
     * For example, people may choose to ignore accents or ignore accents and
     * case when searching for text. Almost all characters are distinguished
     * by the first three levels, and in most locales the default value is
     * thus Tertiary. However, if Alternate is set to be Shifted, then the
     * Quaternary strength can be used to break ties among whitespace,
     * punctuation, and symbols that would otherwise be ignored. If very fine
     * distinctions among characters are required, then the Identical
     * strength can be used (for example, Identical Strength distinguishes
     * between the Mathematical Bold Small A and the Mathematical Italic
     * Small A.). However, using levels higher than Tertiary the Identical
     * strength result in significantly longer sort keys, and slower string
     * comparison performance for equal strings.
     * 
     * @param int $strength Collator object.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setStrength($strength){}

    /**
     * This function sorts an array according to current locale rules.
     * 
     * Equivalent to standard PHP {@link sort} .
     * 
     * @param array $arr Collator object.
     * @param int $sort_flag Array of strings to sort.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function sort(&$arr, $sort_flag){}

    /**
     * Similar to {@link collator_sort} but uses ICU sorting keys produced by
     * ucol_getSortKey() to gain more speed on large arrays.
     * 
     * @param array $arr Collator object.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function sortWithSortKeys(&$arr){}

}
/**
 * Classes implementing can be used with the function.
 **/
interface Countable {
    /**
     * This method is executed when using the {@link count} function on an
     * object implementing Countable.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function count();

}
/**
 * Representation of date interval. A date interval stores either a fixed
 * amount of time (in years, months, days, hours etc) or a relative time
 * string in the format that DateTime's constructor supports.
 **/
class DateInterval {
    /**
     * Uses the normal date parsers and sets up a DateInterval from the
     * relative parts of the parsed string.
     * 
     * @param string $time Date with relative parts.
     * @return DateInterval
     * @since PHP 5 >= 5.3.0
     **/
    function createFromDateString($time){}

    /**
     * Formats the interval.
     * 
     * @param string $format The following characters are recognized in the
     *   {@link format} parameter string. Each format character must be
     *   proceeded by a percent sign (%). {@link format} character
     *   Description Example values % Literal % % Y Years, numeric, at least
     *   2 digits with leading 0 01, 03 y Years, numeric 1, 3 M Months,
     *   numeric, at least 2 digits with leading 0 01, 03, 12 m Months,
     *   numeric 1, 3, 12 D Days, numeric, at least 2 digits with leading 0
     *   01, 03, 31 d Days, numeric 1, 3, 31 a Total amount of days 4, 18,
     *   8123 H Hours, numeric, at least 2 digits with leading 0 01, 03, 23 h
     *   Hours, numeric 1, 3, 23 I Minutes, numeric, at least 2 digits with
     *   leading 0 01, 03, 59 i Minutes, numeric 1, 3, 59 S Seconds, numeric,
     *   at least 2 digits with leading 0 01, 03, 57 s Seconds, numeric 1, 3,
     *   57 R Sign "-" when negative, "+" when positive -, + r Sign "-" when
     *   negative, empty when positive -,
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function format($format){}

}
/**
 * Representation of date period.
 **/
class DatePeriod implements Traversable {
}
/**
 * Representation of date and time.
 **/
class DateTime {
    /**
     * Adds the specified DateInterval object to the specified DateTime
     * object.
     * 
     * @param DateInterval $interval A DateInterval object
     * @return DateTime
     * @since PHP 5 >= 5.3.0
     **/
    function add($interval){}

    /**
     * Returns new DateTime object formatted according to the specified
     * format.
     * 
     * @param string $format Format accepted by {@link date}. If {@link
     *   format} does not contain the character ! then portions of the
     *   generated time which are not specified in {@link format} will be set
     *   to the current system time. If {@link format} contains the character
     *   !, then portions of the generated time not provided in {@link
     *   format}, as well as values to the left-hand side of the !, will be
     *   set to corresponding values from the Unix epoch. The Unix epoch is
     *   1970-01-01 00:00:00 UTC.
     * @param string $time String representing the time.
     * @param DateTimeZone $timezone A DateTimeZone object representing the
     *   desired time zone.
     * @return DateTime
     * @since PHP 5 >= 5.3.0
     **/
    function createFromFormat($format, $time, $timezone){}

    /**
     * Returns the difference between two DateTime objects.
     * 
     * @param DateTime $datetime2 The date to compare to.
     * @param bool $absolute Whether to return absolute difference.
     * @return DateInterval
     * @since PHP 5 >= 5.3.0
     **/
    function diff($datetime2, $absolute){}

    /**
     * Returns date formatted according to given format.
     * 
     * @param string $format Format accepted by {@link date}.
     * @return string
     * @since PHP 5 >= 5.2.0
     **/
    function format($format){}

    /**
     * Returns an array of warnings and errors found while parsing a
     * date/time string.
     * 
     * @return array
     * @since PHP 5 >= 5.3.0
     **/
    function getLastErrors(){}

    /**
     * Returns the timezone offset.
     * 
     * @return int
     * @since PHP 5 >= 5.2.0
     **/
    function getOffset(){}

    /**
     * Gets the Unix timestamp.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function getTimestamp(){}

    /**
     * Return time zone relative to given DateTime.
     * 
     * @return DateTimeZone
     * @since PHP 5 >= 5.2.0
     **/
    function getTimezone(){}

    /**
     * Alter the timestamp of a DateTime object by incrementing or
     * decrementing in a format accepted by {@link strtotime}.
     * 
     * @param string $modify
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function modify($modify){}

    /**
     * Resets the current date of the DateTime object to a different date.
     * 
     * @param int $year Year of the date.
     * @param int $month Month of the date.
     * @param int $day Day of the date.
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function setDate($year, $month, $day){}

    /**
     * Set a date according to the ISO 8601 standard - using weeks and day
     * offsets rather than specific dates.
     * 
     * @param int $year Year of the date.
     * @param int $week Week of the date.
     * @param int $day Offset from the first day of the week.
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function setISODate($year, $week, $day){}

    /**
     * Resets the current time of the DateTime object to a different time.
     * 
     * @param int $hour Hour of the time.
     * @param int $minute Minute of the time.
     * @param int $second Second of the time.
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function setTime($hour, $minute, $second){}

    /**
     * Sets the date and time based on an Unix timestamp.
     * 
     * @param int $unixtimestamp Unix timestamp representing the date.
     * @return DateTime
     * @since PHP 5 >= 5.3.0
     **/
    function setTimestamp($unixtimestamp){}

    /**
     * @param DateTimeZone $timezone A DateTimeZone object representing the
     *   desired time zone.
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function setTimezone($timezone){}

    /**
     * Subtracts the specified DateInterval object from the specified
     * DateTime object.
     * 
     * @param DateInterval $interval A DateInterval object
     * @return DateTime
     * @since PHP 5 >= 5.3.0
     **/
    function sub($interval){}

    /**
     * The __set_state handler.
     * 
     * @param array $array Initialization array.
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function __set_state($array){}

    /**
     * The __wakeup handler.
     * 
     * @return DateTime
     * @since PHP 5 >= 5.2.0
     **/
    function __wakeup(){}

}
/**
 * Representation of time zone.
 **/
class DateTimeZone {
    /**
     * Returns location information for a timezone, including country code,
     * latitude/longitude and comments.
     * 
     * @return array
     * @since PHP 5 >= 5.3.0
     **/
    function getLocation(){}

    /**
     * Returns the name of the timezone.
     * 
     * @return string
     * @since PHP 5 >= 5.2.0
     **/
    function getName(){}

    /**
     * This function returns the offset to GMT for the date/time specified in
     * the {@link datetime} parameter. The GMT offset is calculated with the
     * timezone information contained in the DateTimeZone object being used.
     * 
     * @param DateTime $datetime DateTime that contains the date/time to
     *   compute the offset from.
     * @return int
     * @since PHP 5 >= 5.2.0
     **/
    function getOffset($datetime){}

    /**
     * @param int $timestamp_begin Begin timestamp.
     * @param int $timestamp_end End timestamp.
     * @return array
     * @since PHP 5 >= 5.2.0
     **/
    function getTransitions($timestamp_begin, $timestamp_end){}

    /**
     * @return array
     * @since PHP 5 >= 5.2.0
     **/
    function listAbbreviations(){}

    /**
     * @param int $what One of DateTimeZone class constants.
     * @param string $country A two-letter ISO 3166-1 compatible country
     *   code.
     * @return array
     * @since PHP 5 >= 5.2.0
     **/
    function listIdentifiers($what, $country){}

}
/**
 * The class from which dir is instantiated.
 **/
class Directory {
    /**
     * A pseudo-object oriented mechanism for reading a directory. The given
     * {@link directory} is opened. Two properties are available once the
     * directory has been opened. The handle property can be used with other
     * directory functions such as {@link readdir}, {@link rewinddir} and
     * {@link closedir}. The path property is set to path the directory that
     * was opened. Three methods are available: read, rewind and close.
     * 
     * @var resource
     **/
    var $handle;
    /**
     * A pseudo-object oriented mechanism for reading a directory. The given
     * {@link directory} is opened. Two properties are available once the
     * directory has been opened. The handle property can be used with other
     * directory functions such as {@link readdir}, {@link rewinddir} and
     * {@link closedir}. The path property is set to path the directory that
     * was opened. Three methods are available: read, rewind and close.
     * 
     * @var string
     **/
    var $path;
    /**
     * A pseudo-object oriented mechanism for reading a directory. The given
     * {@link directory} is opened. Two properties are available once the
     * directory has been opened. The handle property can be used with other
     * directory functions such as {@link readdir}, {@link rewinddir} and
     * {@link closedir}. The path property is set to path the directory that
     * was opened. Three methods are available: read, rewind and close.
     * 
     * @return string
     **/
    function read(){}

}
/**
 * The DirectoryIterator class provides a simple interface for viewing
 * the contents of filesystem directories.
 **/
class DirectoryIterator extends SplFileInfo implements Iterator, Traversable, SeekableIterator {
    /**
     * Get the current DirectoryIterator item.
     * 
     * @return DirectoryIterator
     * @since PHP 5
     **/
    function current(){}

    /**
     * Get the last access time of the current DirectoryIterator item.
     * 
     * @return int
     * @since PHP 5
     **/
    function getATime(){}

    /**
     * Get the base name of the current DirectoryIterator item.
     * 
     * @param string $suffix If the base name ends in {@link suffix}, this
     *   will be cut.
     * @return string
     * @since PHP 5 >= 5.2.2
     **/
    function getBasename($suffix){}

    /**
     * Get the inode change time for the current DirectoryIterator item.
     * 
     * @return int
     * @since PHP 5
     **/
    function getCTime(){}

    /**
     * Get the file name of the current DirectoryIterator item.
     * 
     * @return string
     * @since PHP 5
     **/
    function getFilename(){}

    /**
     * Get the group id of the file.
     * 
     * @return int
     * @since PHP 5
     **/
    function getGroup(){}

    /**
     * Get the inode number for the current DirectoryIterator item.
     * 
     * @return int
     * @since PHP 5
     **/
    function getInode(){}

    /**
     * Get the last modification time of the current DirectoryIterator item,
     * as a Unix timestamp.
     * 
     * @return int
     * @since PHP 5
     **/
    function getMTime(){}

    /**
     * Get the owner of the current DirectoryIterator item, in numerical
     * format.
     * 
     * @return int
     * @since PHP 5
     **/
    function getOwner(){}

    /**
     * Get the path to the current DirectoryIterator item.
     * 
     * @return string
     * @since PHP 5
     **/
    function getPath(){}

    /**
     * Get the path and file name of the current file.
     * 
     * @return string
     * @since PHP 5
     **/
    function getPathname(){}

    /**
     * Get the permissions of the current DirectoryIterator item.
     * 
     * @return int
     * @since PHP 5
     **/
    function getPerms(){}

    /**
     * Get the file size for the current DirectoryIterator item.
     * 
     * @return int
     * @since PHP 5
     **/
    function getSize(){}

    /**
     * Determines which file type the current DirectoryIterator item belongs
     * to. One of file, link, or dir.
     * 
     * @return string
     * @since PHP 5
     **/
    function getType(){}

    /**
     * Determines if the current DirectoryIterator item is a directory.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isDir(){}

    /**
     * Determines if the current DirectoryIterator item is a directory and
     * either . or ...
     * 
     * @return bool
     * @since PHP 5
     **/
    function isDot(){}

    /**
     * Determines if the current DirectoryIterator item is executable.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isExecutable(){}

    /**
     * Determines if the current DirectoryIterator item is a regular file.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isFile(){}

    /**
     * Determines if the current DirectoryIterator item is a symbolic link.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isLink(){}

    /**
     * Determines if the current DirectoryIterator item is readable.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isReadable(){}

    /**
     * Determines if the current DirectoryIterator item is writable.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isWritable(){}

    /**
     * Get the key for the current DirectoryIterator item.
     * 
     * @return string
     * @since PHP 5
     **/
    function key(){}

    /**
     * Move forward to the next DirectoryIterator item.
     * 
     * @return void
     * @since PHP 5
     **/
    function next(){}

    /**
     * Rewind the DirectoryIterator back to the start.
     * 
     * @return void
     * @since PHP 5
     **/
    function rewind(){}

    /**
     * Seek to a given position in the DirectoryIterator.
     * 
     * @param int $position The zero-based numeric position to seek to.
     * @return void
     **/
    function seek($position){}

    /**
     * Check whether current DirectoryIterator position is a valid file.
     * 
     * @return bool
     * @since PHP 5
     **/
    function valid(){}

    /**
     * Get the file name of the current DirectoryIterator item.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * Exception thrown if a value does not adhere to a defined valid data
 * domain
 **/
class DomainException extends LogicException {
}
/**
 * represents an attribute in the object.
 **/
class DomAttr extends DOMNode {
    /**
     * This function checks if the attribute is a defined ID.
     * 
     * According to the DOM standard this requires a DTD which defines the
     * attribute ID to be of type ID. You need to validate your document with
     * or DOMDocument::validateOnParse before using this function.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isId(){}

    /**
     * Creates a new DOMAttr object. This object is read only. It may be
     * appended to a document, but additional nodes may not be appended to
     * this node until the node is associated with a document. To create a
     * writable node, use .
     * 
     * @param string $name The tag name of the attribute.
     * @param string $value The value of the attribute.
     * @since PHP 5
     **/
    function __construct($name, $value){}

}
class DomAttribute {
    /**
     * Gets the name of the attribute.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function name(){}

    /**
     * This function sets the value of an attribute.
     * 
     * @param string $content The new value.
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function set_value($content){}

    /**
     * Checks if the attribute was explicitly given a value in the original
     * document.
     * 
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function specified(){}

    /**
     * This function returns the value of the attribute.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function value(){}

}
/**
 * Represents nodes with character data. No nodes directly correspond to
 * this class, but other nodes do inherit from it.
 **/
class DomCharacterData extends DOMNode {
    /**
     * Append the string {@link data} to the end of the character data of the
     * node.
     * 
     * @param string $data The string to append.
     * @return void
     * @since PHP 5
     **/
    function appendData($data){}

    /**
     * Deletes {@link count} characters starting from position {@link
     * offset}.
     * 
     * @param int $offset The offset from which to start removing.
     * @param int $count The number of characters to delete. If the sum of
     *   {@link offset} and {@link count} exceeds the length, then all
     *   characters to the end of the data are deleted.
     * @return void
     * @since PHP 5
     **/
    function deleteData($offset, $count){}

    /**
     * Inserts string {@link data} at position {@link offset}.
     * 
     * @param int $offset The character offset at which to insert.
     * @param string $data The string to insert.
     * @return void
     * @since PHP 5
     **/
    function insertData($offset, $data){}

    /**
     * Replace {@link count} characters starting from position {@link offset}
     * with {@link data}.
     * 
     * @param int $offset The offset from which to start replacing.
     * @param int $count The number of characters to replace. If the sum of
     *   {@link offset} and {@link count} exceeds the length, then all
     *   characters to the end of the data are replaced.
     * @param string $data The string with which the range must be
     *   replaced.
     * @return void
     * @since PHP 5
     **/
    function replaceData($offset, $count, $data){}

    /**
     * Returns the specified substring.
     * 
     * @param int $offset Start offset of substring to extract.
     * @param int $count The number of characters to extract.
     * @return string
     * @since PHP 5
     **/
    function substringData($offset, $count){}

}
/**
 * Represents comment nodes, characters delimited by and .
 **/
class DomComment extends DOMCharacterData {
    /**
     * Creates a new DOMComment object. This object is read only. It may be
     * appended to a document, but additional nodes may not be appended to
     * this node until the node is associated with a document. To create a
     * writeable node, use .
     * 
     * @param string $value The value of the comment.
     * @since PHP 5
     **/
    function __construct($value){}

}
/**
 * Represents an entire HTML or XML document; serves as the root of the
 * document tree.
 **/
class DomDocument extends DOMNode {
    /**
     * Adds a root element node to a dom document and returns the new node.
     * The element name is given in the passed parameter.
     * 
     * Creating a simple HTML document header
     * 
     * <?php $doc = domxml_new_doc("1.0"); $root = $doc->add_root("html");
     * $head = $root->new_child("head", ""); $head->new_child("title", "Hier
     * der Titel"); echo htmlentities($doc->dump_mem()); ?>
     * 
     * @param string $name
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function add_root($name){}

    /**
     * This function creates a new instance of class DOMAttr.
     * 
     * @param string $name The name of the attribute.
     * @return DOMAttr
     * @since PHP 5
     **/
    function createAttribute($name){}

    /**
     * This function creates a new instance of class DOMAttr.
     * 
     * @param string $namespaceURI The URI of the namespace.
     * @param string $qualifiedName The tag name and prefix of the
     *   attribute, as prefix:tagname.
     * @return DOMAttr
     * @since PHP 5
     **/
    function createAttributeNS($namespaceURI, $qualifiedName){}

    /**
     * This function creates a new instance of class DOMCDATASection.
     * 
     * @param string $data The content of the cdata.
     * @return DOMCDATASection
     * @since PHP 5
     **/
    function createCDATASection($data){}

    /**
     * This function creates a new instance of class DOMComment.
     * 
     * @param string $data The content of the comment.
     * @return DOMComment
     * @since PHP 5
     **/
    function createComment($data){}

    /**
     * This function creates a new instance of class DOMDocumentFragment.
     * 
     * @return DOMDocumentFragment
     * @since PHP 5
     **/
    function createDocumentFragment(){}

    /**
     * This function creates a new instance of class DOMElement.
     * 
     * @param string $name The tag name of the element.
     * @param string $value The value of the element. By default, an empty
     *   element will be created. The value can also be set later with
     *   DOMElement->nodeValue.
     * @return DOMElement
     * @since PHP 5
     **/
    function createElement($name, $value){}

    /**
     * This function creates a new element node with an associated namespace.
     * 
     * @param string $namespaceURI The URI of the namespace.
     * @param string $qualifiedName The qualified name of the element, as
     *   prefix:tagname.
     * @param string $value The value of the element. By default, an empty
     *   element will be created. You can also set the value later with
     *   DOMElement->nodeValue.
     * @return DOMElement
     * @since PHP 5
     **/
    function createElementNS($namespaceURI, $qualifiedName, $value){}

    /**
     * This function creates a new instance of class DOMEntityReference.
     * 
     * @param string $name The content of the entity reference, e.g. the
     *   entity reference minus the leading & and the trailing ; characters.
     * @return DOMEntityReference
     * @since PHP 5
     **/
    function createEntityReference($name){}

    /**
     * This function creates a new instance of class
     * DOMProcessingInstruction.
     * 
     * @param string $target The target of the processing instruction.
     * @param string $data The content of the processing instruction.
     * @return DOMProcessingInstruction
     * @since PHP 5
     **/
    function createProcessingInstruction($target, $data){}

    /**
     * This function creates a new instance of class DOMText.
     * 
     * @param string $content The content of the text.
     * @return DOMText
     * @since PHP 5
     **/
    function createTextNode($content){}

    /**
     * This function returns a new instance of class DomAttribute. The name
     * of the attribute is the value of the first parameter. The value of the
     * attribute is the value of the second parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domnode_append_child}, {@link
     * domdocument_create_element}, {@link domdocument_create_text}, {@link
     * domdocument_create_cdata_section}, {@link
     * domdocument_create_processing_instruction}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $name
     * @param string $value
     * @return domattribute
     * @since PHP 4 >= 4.1.0
     **/
    function create_attribute($name, $value){}

    /**
     * This function returns a new instance of class DomCData. The content of
     * the cdata is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domnode_append_child}, {@link
     * domdocument_create_element}, {@link domdocument_create_text}, {@link
     * domdocument_create_attribute}, {@link
     * domdocument_create_processing_instruction}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $content
     * @return domcdata
     * @since PHP 4 >= 4.1.0
     **/
    function create_cdata_section($content){}

    /**
     * This function returns a new instance of class DomComment. The content
     * of the comment is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domnode_append_child}, {@link
     * domdocument_create_element}, {@link domdocument_create_text}, {@link
     * domdocument_create_attribute}, {@link
     * domdocument_create_processing_instruction}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $content
     * @return domcomment
     * @since PHP 4 >= 4.1.0
     **/
    function create_comment($content){}

    /**
     * This function returns a new instance of class DomElement. The tag name
     * of the element is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domdocument_create_element_ns}, {@link
     * domnode_append_child}, {@link domdocument_create_text}, {@link
     * domdocument_create_comment}, {@link domdocument_create_attribute},
     * {@link domdocument_create_processing_instruction}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $name
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function create_element($name){}

    /**
     * This function returns a new instance of class DomElement. The tag name
     * of the element is the value of the passed parameter {@link name}. The
     * URI of the namespace is the value of the passed parameter {@link uri}.
     * If there is already a namespace declaration with the same uri in the
     * root-node of the document, the prefix of this is taken, otherwise it
     * will take the one provided in the optional parameter {@link prefix} or
     * generate a random one.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domdocument_create_element_ns}, {@link
     * domnode_add_namespace}, {@link domnode_set_namespace}, {@link
     * domnode_append_child}, {@link domdocument_create_text}, {@link
     * domdocument_create_comment}, {@link domdocument_create_attribute},
     * {@link domdocument_create_processing_instruction}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $uri
     * @param string $name
     * @param string $prefix
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function create_element_ns($uri, $name, $prefix){}

    /**
     * This function returns a new instance of class DomEntityReference. The
     * content of the entity reference is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domnode_append_child}, {@link
     * domdocument_create_element}, {@link domdocument_create_text}, {@link
     * domdocument_create_cdata_section}, {@link
     * domdocument_create_processing_instruction}, {@link
     * domdocument_create_attribute}, and {@link domnode_insert_before}.
     * 
     * @param string $content
     * @return domentityreference
     * @since PHP 4 >= 4.1.0
     **/
    function create_entity_reference($content){}

    /**
     * This function returns a new instance of class DomCData. The content of
     * the pi is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domnode_append_child}, {@link
     * domdocument_create_element}, {@link domdocument_create_text}, {@link
     * domdocument_create_cdata_section}, {@link
     * domdocument_create_attribute}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $content
     * @return domprocessinginstruction
     * @since PHP 4 >= 4.1.0
     **/
    function create_processing_instruction($content){}

    /**
     * This function returns a new instance of class DomText. The content of
     * the text is the value of the passed parameter.
     * 
     * The return value is if an error occurred.
     * 
     * See also {@link domnode_append_child}, {@link
     * domdocument_create_element}, {@link domdocument_create_comment},
     * {@link domdocument_create_text}, {@link domdocument_create_attribute},
     * {@link domdocument_create_processing_instruction}, {@link
     * domdocument_create_entity_reference}, and {@link
     * domnode_insert_before}.
     * 
     * @param string $content
     * @return domtext
     * @since PHP 4 >= 4.1.0
     **/
    function create_text_node($content){}

    /**
     * This function returns an object of class DomDocumentType. In versions
     * of PHP before 4.3 this has been the class Dtd, but the DOM Standard
     * does not know such a class.
     * 
     * See also the methods of class DomDocumentType.
     * 
     * @return domdocumenttype
     * @since PHP 4 >= 4.1.0
     **/
    function doctype(){}

    /**
     * This function returns the root element node of a document.
     * 
     * The following example returns just the element with name CHAPTER and
     * prints it. The other node -- the comment -- is not returned.
     * Retrieving root element
     * 
     * <?php include("example.inc");
     * 
     * if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while parsing the
     * document\n"; exit; }
     * 
     * $root = $dom->document_element(); print_r($root); ?>
     * 
     * domelement Object ( [type] => 1 [tagname] => chapter [0] => 6 [1] =>
     * 137960648 )
     * 
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function document_element(){}

    /**
     * Creates an XML document from the dom representation. This function
     * usually is called after building a new dom document from scratch as in
     * the example below. The {@link format} specifies whether the output
     * should be neatly formatted, or not. The first parameter specifies the
     * name of the filename and the second parameter, whether it should be
     * compressed or not.
     * 
     * Creating a simple HTML document header
     * 
     * <?php $doc = domxml_new_doc("1.0"); $root =
     * $doc->create_element("HTML"); $root = $doc->append_child($root); $head
     * = $doc->create_element("HEAD"); $head = $root->append_child($head);
     * $title = $doc->create_element("TITLE"); $title =
     * $head->append_child($title); $text = $doc->create_text_node("This is
     * the title"); $text = $title->append_child($text);
     * $doc->dump_file("/tmp/test.xml", false, true); ?>
     * 
     * See also {@link domdocument_dump_mem}, and {@link
     * domdocument_html_dump_mem}.
     * 
     * @param string $filename
     * @param bool $compressionmode
     * @param bool $format
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function dump_file($filename, $compressionmode, $format){}

    /**
     * Creates an XML document from the dom representation. This function
     * usually is called after building a new dom document from scratch as in
     * the example below. The {@link format} specifies whether the output
     * should be neatly formatted, or not.
     * 
     * Creating a simple HTML document header
     * 
     * <?php $doc = domxml_new_doc("1.0"); $root =
     * $doc->create_element("HTML"); $root = $doc->append_child($root); $head
     * = $doc->create_element("HEAD"); $head = $root->append_child($head);
     * $title = $doc->create_element("TITLE"); $title =
     * $head->append_child($title); $text = $doc->create_text_node("This is
     * the title"); $text = $title->append_child($text); echo "<PRE>"; echo
     * htmlentities($doc->dump_mem(true)); echo "</PRE>"; ?>
     * 
     * See also {@link domdocument_dump_file}, and {@link
     * domdocument_html_dump_mem}.
     * 
     * @param bool $format
     * @param string $encoding
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function dump_mem($format, $encoding){}

    /**
     * This function is similar to but searches for an element with a given
     * id.
     * 
     * For this function to work, you will need either to set some ID
     * attributes with or a DTD which defines an attribute to be of type ID.
     * In the later case, you will need to validate your document with or
     * DOMDocument->validateOnParse before using this function.
     * 
     * @param string $elementId The unique id value for an element.
     * @return DOMElement
     * @since PHP 5
     **/
    function getElementById($elementId){}

    /**
     * This function returns a new instance of class DOMNodeList containing
     * the elements with a given tag name.
     * 
     * @param string $name The name of the tag to match on. The special
     *   value * matches all tags.
     * @return DOMNodeList
     * @since PHP 5
     **/
    function getElementsByTagName($name){}

    /**
     * Returns a DOMNodeList of all elements with a given local name and a
     * namespace URI.
     * 
     * @param string $namespaceURI The namespace URI of the elements to
     *   match on. The special value * matches all namespaces.
     * @param string $localName The local name of the elements to match on.
     *   The special value * matches all local names.
     * @return DOMNodeList
     * @since PHP 5
     **/
    function getElementsByTagNameNS($namespaceURI, $localName){}

    /**
     * See also {@link domdocument_add_root}
     * 
     * @param string $name
     * @return array
     * @since PHP 4 >= 4.1.0
     **/
    function get_elements_by_tagname($name){}

    /**
     * This function is similar to {@link
     * domdocument_get_elements_by_tagname} but searches for an element with
     * a given id. According to the DOM standard this requires a DTD which
     * defines the attribute ID to be of type ID, though the current
     * implementation simply does an xpath search for "//*[@ID = '%s']". This
     * does not comply to the DOM standard which requires to return null if
     * it is not known which attribute is of type id. This behaviour is
     * likely to be fixed, so do not rely on the current behaviour.
     * 
     * See also {@link domdocument_get_elements_by_tagname}
     * 
     * @param string $id
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function get_element_by_id($id){}

    /**
     * Creates an HTML document from the dom representation. This function
     * usually is called after building a new dom document from scratch as in
     * the example below.
     * 
     * Creating a simple HTML document header
     * 
     * <?php
     * 
     * // Creates the document $doc = domxml_new_doc("1.0");
     * 
     * $root = $doc->create_element("html"); $root =
     * $doc->append_child($root);
     * 
     * $head = $doc->create_element("head"); $head =
     * $root->append_child($head);
     * 
     * $title = $doc->create_element("title"); $title =
     * $head->append_child($title);
     * 
     * $text = $doc->create_text_node("This is the title"); $text =
     * $title->append_child($text);
     * 
     * echo $doc->html_dump_mem(); ?>
     * 
     * <html><head><title>This is the title</title></head></html>
     * 
     * See also {@link domdocument_dump_file}, and {@link
     * domdocument_html_dump_mem}.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function html_dump_mem(){}

    /**
     * This function returns a copy of the node to import and associates it
     * with the current document.
     * 
     * @param DOMNode $importedNode The node to import.
     * @param bool $deep If set to , this method will recursively import
     *   the subtree under the {@link importedNode}.
     * @return DOMNode
     * @since PHP 5
     **/
    function importNode($importedNode, $deep){}

    /**
     * Loads an XML document from a file.
     * 
     * @param string $filename The path to the XML document.
     * @param int $options Bitwise OR of the libxml option constants.
     * @return mixed
     * @since PHP 5
     **/
    function load($filename, $options){}

    /**
     * The function parses the HTML contained in the string {@link source}.
     * Unlike loading XML, HTML does not have to be well-formed to load. This
     * function may also be called statically to load and create a
     * DOMDocument object. The static invocation may be used when no
     * DOMDocument properties need to be set prior to loading.
     * 
     * @param string $source The HTML string.
     * @return bool
     * @since PHP 5
     **/
    function loadHTML($source){}

    /**
     * The function parses the HTML document in the file named {@link
     * filename}. Unlike loading XML, HTML does not have to be well-formed to
     * load.
     * 
     * Though not recommended, this function may also be called statically to
     * load and create a DOMDocument object. The static invocation may be
     * used when no DOMDocument properties need to be set prior to loading.
     * However, doing so will result an in E_STRICT error being generated.
     * 
     * @param string $filename The path to the HTML file.
     * @return bool
     * @since PHP 5
     **/
    function loadHTMLFile($filename){}

    /**
     * Loads an XML document from a string.
     * 
     * This method may also be called statically to load and create a
     * DOMDocument object. The static invocation may be used when no
     * DOMDocument properties need to be set prior to loading.
     * 
     * @param string $source The string containing the XML.
     * @param int $options Bitwise OR of the libxml option constants.
     * @return mixed
     * @since PHP 5
     **/
    function loadXML($source, $options){}

    /**
     * This method acts as if you saved and then loaded the document, putting
     * the document in a "normal" form.
     * 
     * @return void
     * @since PHP 5
     **/
    function normalizeDocument(){}

    /**
     * This method allows you to register your own extended DOM class to be
     * used afterward by the PHP DOM extension.
     * 
     * This method is not part of the DOM standard.
     * 
     * @param string $baseclass The DOM class that you want to extend. You
     *   can find a list of these classes in the chapter introduction.
     * @param string $extendedclass Your extended class name. If is
     *   provided, any previously registered class extending {@link
     *   baseclass} will be removed.
     * @return bool
     * @since PHP 5 >= 5.2.0
     **/
    function registerNodeClass($baseclass, $extendedclass){}

    /**
     * Performs relaxNG validation on the document based on the given RNG
     * schema.
     * 
     * @param string $filename The RNG file.
     * @return bool
     * @since PHP 5
     **/
    function relaxNGValidate($filename){}

    /**
     * Performs relaxNG validation on the document based on the given RNG
     * source.
     * 
     * @param string $source A string containing the RNG schema.
     * @return bool
     * @since PHP 5
     **/
    function relaxNGValidateSource($source){}

    /**
     * Creates an XML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     * 
     * @param string $filename The path to the saved XML document.
     * @param int $options Additional Options. Currently only
     *   LIBXML_NOEMPTYTAG is supported.
     * @return int
     * @since PHP 5
     **/
    function save($filename, $options){}

    /**
     * Creates an HTML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     * 
     * @return string
     * @since PHP 5
     **/
    function saveHTML(){}

    /**
     * Creates an HTML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     * 
     * @param string $filename The path to the saved HTML document.
     * @return int
     * @since PHP 5
     **/
    function saveHTMLFile($filename){}

    /**
     * Creates an XML document from the DOM representation. This function is
     * usually called after building a new dom document from scratch as in
     * the example below.
     * 
     * @param DOMNode $node Use this parameter to output only a specific
     *   node without XML declaration rather than the entire document.
     * @param int $options Additional Options. Currently only
     *   LIBXML_NOEMPTYTAG is supported.
     * @return string
     * @since PHP 5
     **/
    function saveXML($node, $options){}

    /**
     * Validates a document based on the given schema file.
     * 
     * @param string $filename The path to the schema.
     * @return bool
     * @since PHP 5
     **/
    function schemaValidate($filename){}

    /**
     * Validates a document based on a schema defined in the given string.
     * 
     * @param string $source A string containing the schema.
     * @return bool
     * @since PHP 5
     **/
    function schemaValidateSource($source){}

    /**
     * Validates the document based on its DTD.
     * 
     * You can also use the validateOnParse property of DOMDocument to make a
     * DTD validation.
     * 
     * @return bool
     * @since PHP 5
     **/
    function validate(){}

    /**
     * This method substitutes XIncludes in a DOMDocument object.
     * 
     * @param int $options libxml parameters. Available since PHP 5.1.0 and
     *   Libxml 2.6.7.
     * @return int
     * @since PHP 5
     **/
    function xinclude($options){}

    /**
     * Creates a new DOMDocument object.
     * 
     * @param string $version The version number of the document as part of
     *   the XML declaration.
     * @param string $encoding The encoding of the document as part of the
     *   XML declaration.
     * @since PHP 5
     **/
    function __construct($version, $encoding){}

}
class DomDocumentFragment extends DOMNode {
    /**
     * Appends raw XML data to a DOMDocumentFragment.
     * 
     * This method is not part of the DOM standard. It was created as a
     * simpler approach for appending an XML DocumentFragment in a
     * DOMDocument.
     * 
     * If you want to stick to the standards, you will have to create a
     * temporary DOMDocument with a dummy root and then loop through the
     * child nodes of the root of your XML data to append them.
     * 
     * @param string $data XML to append.
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function appendXML($data){}

}
/**
 * Each has a attribute whose value is either or a object.
 **/
class DomDocumentType extends DOMNode {
    /**
     * @return array
     * @since PHP 4 >= 4.1.0
     **/
    function entities(){}

    /**
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function internal_subset(){}

    /**
     * This function returns the name of the document type.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function name(){}

    /**
     * @return array
     * @since PHP 4 >= 4.1.0
     **/
    function notations(){}

    /**
     * This function returns the public id of the document type.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function public_id(){}

    /**
     * Returns the system id of the document type.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function system_id(){}

}
class DomElement extends DOMNode {
    /**
     * Gets the value of the attribute with name {@link name} for the current
     * node.
     * 
     * @param string $name The name of the attribute.
     * @return string
     * @since PHP 5
     **/
    function getAttribute($name){}

    /**
     * Returns the attribute node with name {@link name} for the current
     * element.
     * 
     * @param string $name The name of the attribute.
     * @return DOMAttr
     * @since PHP 5
     **/
    function getAttributeNode($name){}

    /**
     * Returns the attribute node in namespace {@link namespaceURI} with
     * local name {@link localName} for the current node.
     * 
     * @param string $namespaceURI The namespace URI.
     * @param string $localName The local name.
     * @return DOMAttr
     * @since PHP 5
     **/
    function getAttributeNodeNS($namespaceURI, $localName){}

    /**
     * Gets the value of the attribute in namespace {@link namespaceURI} with
     * local name {@link localName} for the current node.
     * 
     * @param string $namespaceURI The namespace URI.
     * @param string $localName The local name.
     * @return string
     * @since PHP 5
     **/
    function getAttributeNS($namespaceURI, $localName){}

    /**
     * This function returns a new instance of the class DOMNodeList of all
     * descendant elements with a given tag {@link name}, in the order in
     * which they are encountered in a preorder traversal of this element
     * tree.
     * 
     * @param string $name The tag name. Use * to return all elements
     *   within the element tree.
     * @return DOMNodeList
     * @since PHP 5
     **/
    function getElementsByTagName($name){}

    /**
     * This function fetch all the descendant elements with a given {@link
     * localName} and {@link namespaceURI}.
     * 
     * @param string $namespaceURI The namespace URI.
     * @param string $localName The local name. Use * to return all
     *   elements within the element tree.
     * @return DOMNodeList
     * @since PHP 5
     **/
    function getElementsByTagNameNS($namespaceURI, $localName){}

    /**
     * Returns the value of the given attribute in the current element.
     * 
     * Since PHP 4.3, if no attribute with given {@link name} is found, an
     * empty string is returned.
     * 
     * @param string $name The name of the seeked attribute. This parameter
     *   is case sensitive.
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function get_attribute($name){}

    /**
     * Returns the node of the given attribute in the current element.
     * 
     * @param string $name The name of the seeked attribute. This parameter
     *   is case sensitive.
     * @return DomAttribute
     * @since PHP 4 >= 4.1.0
     **/
    function get_attribute_node($name){}

    /**
     * Gets all the sub elements with the specific {@link name} within the
     * current element.
     * 
     * @param string $name The name of the seeked element.
     * @return array
     * @since PHP 4 >= 4.1.0
     **/
    function get_elements_by_tagname($name){}

    /**
     * Indicates whether attribute named {@link name} exists as a member of
     * the element.
     * 
     * @param string $name The attribute name.
     * @return bool
     * @since PHP 5
     **/
    function hasAttribute($name){}

    /**
     * Indicates whether attribute in namespace {@link namespaceURI} named
     * {@link localName} exists as a member of the element.
     * 
     * @param string $namespaceURI The namespace URI.
     * @param string $localName The local name.
     * @return bool
     * @since PHP 5
     **/
    function hasAttributeNS($namespaceURI, $localName){}

    /**
     * This functions checks to see if an attribute named {@link name} exists
     * in the current node.
     * 
     * @param string $name The name of the tested attribute.
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function has_attribute($name){}

    /**
     * Removes attribute named {@link name} from the element.
     * 
     * @param string $name The name of the attribute.
     * @return bool
     * @since PHP 5
     **/
    function removeAttribute($name){}

    /**
     * Removes attribute {@link oldnode} from the element.
     * 
     * @param DOMAttr $oldnode The attribute node.
     * @return bool
     * @since PHP 5
     **/
    function removeAttributeNode($oldnode){}

    /**
     * Removes attribute is namespace {@link namespaceURI} named {@link
     * localName} from the element.
     * 
     * @param string $namespaceURI The namespace URI.
     * @param string $localName The local name.
     * @return bool
     * @since PHP 5
     **/
    function removeAttributeNS($namespaceURI, $localName){}

    /**
     * Removes an attribute from the current DomElement node.
     * 
     * @param string $name The name of the attribute to remove.
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function remove_attribute($name){}

    /**
     * Sets an attribute with name {@link name} to the given value. If the
     * attribute does not exist, it will be created.
     * 
     * @param string $name The name of the attribute.
     * @param string $value The value of the attribute.
     * @return DOMAttr
     * @since PHP 5
     **/
    function setAttribute($name, $value){}

    /**
     * Adds new attribute node {@link attr} to element.
     * 
     * @param DOMAttr $attr The attribute node.
     * @return DOMAttr
     * @since PHP 5
     **/
    function setAttributeNode($attr){}

    /**
     * Adds new attribute node {@link attr} to element.
     * 
     * @param DOMAttr $attr The attribute node.
     * @return DOMAttr
     * @since PHP 5
     **/
    function setAttributeNodeNS($attr){}

    /**
     * Sets an attribute with namespace {@link namespaceURI} and name {@link
     * name} to the given value. If the attribute does not exist, it will be
     * created.
     * 
     * @param string $namespaceURI The namespace URI.
     * @param string $qualifiedName The qualified name of the attribute, as
     *   prefix:tagname.
     * @param string $value The value of the attribute.
     * @return void
     * @since PHP 5
     **/
    function setAttributeNS($namespaceURI, $qualifiedName, $value){}

    /**
     * Declares the attribute {@link name} to be of type ID.
     * 
     * @param string $name The name of the attribute.
     * @param bool $isId Set it to if you want {@link name} to be of type
     *   ID, otherwise.
     * @return void
     * @since PHP 5
     **/
    function setIdAttribute($name, $isId){}

    /**
     * Declares the attribute specified by {@link attr} to be of type ID.
     * 
     * @param DOMAttr $attr The attribute node.
     * @param bool $isId Set it to if you want {@link name} to be of type
     *   ID, otherwise.
     * @return void
     * @since PHP 5
     **/
    function setIdAttributeNode($attr, $isId){}

    /**
     * Declares the attribute specified by {@link localName} and {@link
     * namespaceURI} to be of type ID.
     * 
     * @param string $namespaceURI The namespace URI of the attribute.
     * @param string $localName The local name of the attribute, as
     *   prefix:tagname.
     * @param bool $isId Set it to if you want {@link name} to be of type
     *   ID, otherwise.
     * @return void
     * @since PHP 5
     **/
    function setIdAttributeNS($namespaceURI, $localName, $isId){}

    /**
     * Sets an attribute with name {@link name} to the given {@link value}.
     * 
     * @param string $name The name of the attribute. If this attribute
     *   doesn't exist, it will be created.
     * @param string $value The value of the attribute.
     * @return DomAttribute
     * @since PHP 4 >= 4.1.0
     **/
    function set_attribute($name, $value){}

    /**
     * @param DomNode $attr
     * @return DomNode
     * @since PHP 4 >= 4.1.0
     **/
    function set_attribute_node($attr){}

    /**
     * Returns the name of the current node. Calling this function is the
     * same as accessing the tagname property, or calling on the current
     * node.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function tagname(){}

    /**
     * Creates a new DOMElement object. This object is read only. It may be
     * appended to a document, but additional nodes may not be appended to
     * this node until the node is associated with a document. To create a
     * writeable node, use or .
     * 
     * @param string $name The tag name of the element. When also passing
     *   in namespaceURI, the element name may take a prefix to be associated
     *   with the URI.
     * @param string $value The value of the element.
     * @param string $namespaceURI A namespace URI to create the element
     *   within a specific namespace.
     * @since PHP 5
     **/
    function __construct($name, $value, $namespaceURI){}

}
/**
 * This interface represents a known entity, either parsed or unparsed,
 * in an XML document.
 **/
class DOMEntity extends DOMNode {
}
class DomEntityReference extends DOMNode {
    /**
     * Creates a new DOMEntityReference object.
     * 
     * @param string $name The name of the entity reference.
     * @since PHP 5
     **/
    function __construct($name){}

}
/**
 * DOM operations raise exceptions under particular circumstances, i.e.,
 * when an operation is impossible to perform for logical reasons.
 * 
 * See also .
 **/
class DOMException extends Exception {
}
/**
 * The interface provides a number of methods for performing operations
 * that are independent of any particular instance of the document object
 * model.
 **/
class DomImplementation {
    /**
     * Creates a DOMDocument object of the specified type with its document
     * element.
     * 
     * @param string $namespaceURI The namespace URI of the document
     *   element to create.
     * @param string $qualifiedName The qualified name of the document
     *   element to create.
     * @param DOMDocumentType $doctype The type of document to create or .
     * @return DOMDocument
     * @since PHP 5
     **/
    function createDocument($namespaceURI, $qualifiedName, $doctype){}

    /**
     * Creates an empty DOMDocumentType object. Entity declarations and
     * notations are not made available. Entity reference expansions and
     * default attribute additions do not occur.
     * 
     * @param string $qualifiedName The qualified name of the document type
     *   to create.
     * @param string $publicId The external subset public identifier.
     * @param string $systemId The external subset system identifier.
     * @return DOMDocumentType
     * @since PHP 5
     **/
    function createDocumentType($qualifiedName, $publicId, $systemId){}

    /**
     * Test if the DOM implementation implements a specific {@link feature}.
     * 
     * You can find a list of all features in the Conformance section of the
     * DOM specification.
     * 
     * @param string $feature The feature to test.
     * @param string $version The version number of the {@link feature} to
     *   test. In level 2, this can be either 2.0 or 1.0.
     * @return bool
     * @since PHP 5
     **/
    function hasFeature($feature, $version){}

    /**
     * Creates a new DOMImplementation object.
     * 
     * @since PHP 5
     **/
    function __construct(){}

}
class DOMNamedNodeMap {
    /**
     * Retrieves a node specified by its nodeName.
     * 
     * @param string $name The nodeName of the node to retrieve.
     * @return DOMNode
     * @since PHP 5
     **/
    function getNamedItem($name){}

    /**
     * Retrieves a node specified by {@link localName} and {@link
     * namespaceURI}.
     * 
     * @param string $namespaceURI The namespace URI of the node to
     *   retrieve.
     * @param string $localName The local name of the node to retrieve.
     * @return DOMNode
     * @since PHP 5
     **/
    function getNamedItemNS($namespaceURI, $localName){}

    /**
     * Retrieves a node specified by {@link index} within the DOMNamedNodeMap
     * object.
     * 
     * @param int $index Index into this map.
     * @return DOMNode
     * @since PHP 5
     **/
    function item($index){}

}
class DomNode {
    /**
     * This method adds a namespace declaration to a node.
     * 
     * @param string $uri The namespace URI of the node.
     * @param string $prefix The namespace prefix of the node.
     * @return bool
     * @since PHP 4 >= 4.3.0
     **/
    function add_namespace($uri, $prefix){}

    /**
     * This functions appends a child to an existing list of children or
     * creates a new list of children. The child can be created with e.g.
     * DOMDocument::createElement, DOMDocument::createTextNode etc. or simply
     * by using any other node.
     * 
     * @param DOMNode $newnode The appended child.
     * @return DOMNode
     * @since PHP 5
     **/
    function appendChild($newnode){}

    /**
     * This functions appends a child to an existing list of children or
     * creates a new list of children.
     * 
     * @param DOMNode $newnode The node being appended. It can be created
     *   with e.g. , etc. or simply by using any other node.
     * @return DOMNode
     * @since PHP 4 >= 4.1.0
     **/
    function append_child($newnode){}

    /**
     * This functions appends a sibling to an existing node. The child can be
     * created with e.g. {@link domdocument_create_element}, {@link
     * domdocument_create_text} etc. or simply by using any other node.
     * 
     * Before a new sibling is added it is first duplicated. Therefore the
     * new child is a completely new copy which can be modified without
     * changing the node which was passed to this function. If the node
     * passed has children itself, they will be duplicated as well, which
     * makes it quite easy to duplicate large parts of an XML document. The
     * return value is the added sibling. If you plan to do further
     * modifications on the added sibling you must use the returned node.
     * 
     * This function has been added to provide the behaviour of {@link
     * domnode_append_child} as it works till PHP 4.2.
     * 
     * See also {@link domnode_append_before}.
     * 
     * @param domelement $newnode
     * @return domelement
     * @since PHP 4 >= 4.2.0
     **/
    function append_sibling($newnode){}

    /**
     * This function only returns an array of attributes if the node is of
     * type XML_ELEMENT_NODE.
     * 
     * (PHP >= 4.3 only) If no attributes are found, NULL is returned.
     * 
     * @return array
     * @since PHP 4 >= 4.1.0
     **/
    function attributes(){}

    /**
     * Returns all children of the node.
     * 
     * See also {@link domnode_next_sibling}, and {@link
     * domnode_previous_sibling}.
     * 
     * @return array
     * @since PHP 4 >= 4.1.0
     **/
    function child_nodes(){}

    /**
     * Creates a copy of the node.
     * 
     * @param bool $deep Indicates whether to copy all descendant nodes.
     *   This parameter is defaulted to .
     * @return DOMNode
     * @since PHP 5
     **/
    function cloneNode($deep){}

    /**
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function clone_node(){}

    /**
     * See also {@link domdocument_dump_mem}.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function dump_node(){}

    /**
     * Returns the first child of the node.
     * 
     * (PHP >= 4.3 only) If no first child is found, NULL is returned.
     * 
     * See also {@link domnode_last_child}, and {@link domnode_next_sibling},
     * {@link domnode_previous_sibling}.
     * 
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function first_child(){}

    /**
     * Gets line number for where the node is defined.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function getLineNo(){}

    /**
     * This function returns the content of the actual node.
     * 
     * Getting a content
     * 
     * <?php if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while
     * parsing the document\n"; exit; }
     * 
     * $root = $dom->document_element();
     * 
     * $node_array = $root->get_elements_by_tagname("element");
     * 
     * for ($i = 0; $i<count($node_array); $i++) { $node = $node_array[$i];
     * echo "The element[$i] is: " . $node->get_content(); }
     * 
     * ?>
     * 
     * @return string
     * @since PHP 4 >= 4.2.0
     **/
    function get_content(){}

    /**
     * This method checks if the node has attributes. The tested node have to
     * be an XML_ELEMENT_NODE.
     * 
     * @return bool
     * @since PHP 5
     **/
    function hasAttributes(){}

    /**
     * This function checks if the node has children.
     * 
     * @return bool
     * @since PHP 5
     **/
    function hasChildNodes(){}

    /**
     * This function checks if the node has attributes.
     * 
     * See also {@link domnode_has_child_nodes}.
     * 
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function has_attributes(){}

    /**
     * This function checks if the node has children.
     * 
     * See also {@link domnode_child_nodes}.
     * 
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function has_child_nodes(){}

    /**
     * This function inserts a new node right before the reference node. If
     * you plan to do further modifications on the appended child you must
     * use the returned node.
     * 
     * @param DOMNode $newnode The new node.
     * @param DOMNode $refnode The reference node. If not supplied, {@link
     *   newnode} is appended to the children.
     * @return DOMNode
     * @since PHP 5
     **/
    function insertBefore($newnode, $refnode){}

    /**
     * This function inserts the new node {@link newnode} right before the
     * node {@link refnode}. The return value is the inserted node. If you
     * plan to do further modifications on the appended child you must use
     * the returned node.
     * 
     * (PHP >= 4.3 only) If {@link newnode} already is part of a document, it
     * will be first unlinked from its existing context. If {@link refnode}
     * is NULL, then {@link newnode} will be inserted at the end of the list
     * of children.
     * 
     * {@link domnode_insert_before} is very similar to {@link
     * domnode_append_child} as the following example shows which does the
     * same as the example at {@link domnode_append_child}.
     * 
     * Adding a child
     * 
     * <?php include("example.inc");
     * 
     * if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while parsing the
     * document\n"; exit; }
     * 
     * $elements = $dom->get_elements_by_tagname("informaltable");
     * print_r($elements); $element = $elements[0];
     * 
     * $newnode = $element->insert_before($element, $element); $children =
     * $newnode->children(); $attr = $children[1]->set_attribute("align",
     * "left");
     * 
     * echo "<pre>"; $xmlfile = $dom->dump_mem(); echo
     * htmlentities($xmlfile); echo "</pre>"; ?>
     * 
     * See also {@link domnode_append_child}.
     * 
     * @param domelement $newnode
     * @param domelement $refnode
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function insert_before($newnode, $refnode){}

    /**
     * Tells whether {@link namespaceURI} is the default namespace.
     * 
     * @param string $namespaceURI The namespace URI to look for.
     * @return bool
     * @since PHP 5
     **/
    function isDefaultNamespace($namespaceURI){}

    /**
     * This function indicates if two nodes are the same node. The comparison
     * is not based on content
     * 
     * @param DOMNode $node The compared node.
     * @return bool
     * @since PHP 5
     **/
    function isSameNode($node){}

    /**
     * Checks if the asked {@link feature} is supported for the specified
     * {@link version}.
     * 
     * @param string $feature The feature to test. See the example of
     *   DOMImplementation::hasFeature for a list of features.
     * @param string $version The version number of the {@link feature} to
     *   test.
     * @return bool
     * @since PHP 5
     **/
    function isSupported($feature, $version){}

    /**
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function is_blank_node(){}

    /**
     * Returns the last child of the node.
     * 
     * (PHP >= 4.3 only) If no last child is found, NULL is returned.
     * 
     * See also {@link domnode_first_child}, and {@link
     * domnode_next_sibling}, {@link domnode_previous_sibling}.
     * 
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function last_child(){}

    /**
     * Gets the namespace URI of the node based on the {@link prefix}.
     * 
     * @param string $prefix The prefix of the namespace.
     * @return string
     * @since PHP 5
     **/
    function lookupNamespaceURI($prefix){}

    /**
     * Gets the namespace prefix of the node based on the namespace URI.
     * 
     * @param string $namespaceURI The namespace URI.
     * @return string
     * @since PHP 5
     **/
    function lookupPrefix($namespaceURI){}

    /**
     * This function returns the next sibling of the current node. If there
     * is no next sibling it returns (< 4.3) or null (>= 4.3). You can use
     * this function to iterate over all children of a node as shown in the
     * example.
     * 
     * Iterate over children
     * 
     * <?php include("example.inc");
     * 
     * if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while parsing the
     * document\n"; exit; }
     * 
     * $elements = $dom->get_elements_by_tagname("tbody"); $element =
     * $elements[0]; $child = $element->first_child();
     * 
     * while ($child) { print_r($child); $child = $child->next_sibling(); }
     * ?>
     * 
     * See also {@link domnode_previous_sibling}.
     * 
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function next_sibling(){}

    /**
     * Returns name of the node. The name has different meanings for the
     * different types of nodes as illustrated in the following table.
     * Meaning of value Type Meaning DomAttribute value of attribute
     * DomAttribute DomCDataSection #cdata-section DomComment #comment
     * DomDocument #document DomDocumentType document type name DomElement
     * tag name DomEntity name of entity DomEntityReference name of entity
     * reference DomNotation notation name DomProcessingInstruction target
     * DomText #text
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function node_name(){}

    /**
     * Returns the type of the node. All possible types are listed in the
     * table in the introduction.
     * 
     * @return int
     * @since PHP 4 >= 4.1.0
     **/
    function node_type(){}

    /**
     * Returns value of the node. The value has different meanings for the
     * different types of nodes as illustrated in the following table.
     * Meaning of value Type Meaning DomAttribute value of attribute
     * DomAttribute DomCDataSection content DomComment content of comment
     * DomDocument null DomDocumentType null DomElement null DomEntity null
     * DomEntityReference null DomNotation null DomProcessingInstruction
     * entire content without target DomText content of text
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function node_value(){}

    /**
     * Normalizes the node.
     * 
     * @return void
     * @since PHP 5
     **/
    function normalize(){}

    /**
     * This function returns the document the current node belongs to.
     * 
     * The following example will create two identical lists of children.
     * Finding the document of a node
     * 
     * <?php $doc = domxml_new_doc("1.0"); $node =
     * $doc->create_element("para"); $node = $doc->append_child($node);
     * $children = $doc->children(); print_r($children);
     * 
     * $doc2 = $node->owner_document(); $children = $doc2->children();
     * print_r($children); ?>
     * 
     * See also {@link domnode_insert_before}.
     * 
     * @return domdocument
     * @since PHP 4 >= 4.1.0
     **/
    function owner_document(){}

    /**
     * This function returns the parent node.
     * 
     * (PHP >= 4.3 only) If no parent is found, NULL is returned.
     * 
     * The following example will show two identical lists of children.
     * Finding the document of a node
     * 
     * <?php $doc = domxml_new_doc("1.0"); $node =
     * $doc->create_element("para"); $node = $doc->append_child($node);
     * $children = $doc->children(); print_r($children);
     * 
     * $doc2 = $node->parent_node(); $children = $doc2->children();
     * print_r($children); ?>
     * 
     * @return domnode
     * @since PHP 4 >= 4.1.0
     **/
    function parent_node(){}

    /**
     * Returns the name space prefix of the node.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function prefix(){}

    /**
     * This function returns the previous sibling of the current node. If
     * there is no previous sibling it returns (< 4.3) or (>= 4.3). You can
     * use this function to iterate over all children of a node as shown in
     * the example.
     * 
     * See also {@link domnode_next_sibling}.
     * 
     * @return domelement
     * @since PHP 4 >= 4.1.0
     **/
    function previous_sibling(){}

    /**
     * This functions removes a child from a list of children.
     * 
     * @param DOMNode $oldnode The removed child.
     * @return DOMNode
     * @since PHP 5
     **/
    function removeChild($oldnode){}

    /**
     * This functions removes a child from a list of children. If child
     * cannot be removed or is not a child the function will return . If the
     * child could be removed the functions returns the old child.
     * 
     * Removing a child
     * 
     * <?php include("example.inc");
     * 
     * if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while parsing the
     * document\n"; exit; }
     * 
     * $elements = $dom->get_elements_by_tagname("tbody"); $element =
     * $elements[0]; $children = $element->child_nodes(); $child =
     * $element->remove_child($children[0]);
     * 
     * echo "<PRE>"; $xmlfile = $dom->dump_mem(true); echo
     * htmlentities($xmlfile); echo "</PRE>"; ?>
     * 
     * See also {@link domnode_append_child}.
     * 
     * @param domtext $oldchild
     * @return domtext
     * @since PHP 4 >= 4.2.0
     **/
    function remove_child($oldchild){}

    /**
     * This function replaces the child {@link oldnode} with the passed new
     * node. If the new node is already a child it will not be added a second
     * time. If the replacement succeeds the old node is returned.
     * 
     * @param DOMNode $newnode The new node. It must be a member of the
     *   target document, i.e. created by one of the DOMDocument->createXXX()
     *   methods or imported in the document by .
     * @param DOMNode $oldnode The old node.
     * @return DOMNode
     * @since PHP 5
     **/
    function replaceChild($newnode, $oldnode){}

    /**
     * (PHP 4.2) This function replaces the child {@link oldnode} with the
     * passed new node. If the new node is already a child it will not be
     * added a second time. If the old node cannot be found the function
     * returns . If the replacement succeeds the old node is returned.
     * 
     * (PHP 4.3) This function replaces the child {@link oldnode} with the
     * passed {@link newnode}, even if the new node already is a child of the
     * DomNode. If {@link newnode} was already inserted in the document it is
     * first unlinked from its existing context. If the old node cannot be
     * found the function returns . If the replacement succeeds the old node
     * is returned. (This behaviour is according to the W3C specs).
     * 
     * See also {@link domnode_append_child}
     * 
     * @param domelement $newnode
     * @param domelement $oldnode
     * @return domelement
     * @since PHP 4 >= 4.2.0
     **/
    function replace_child($newnode, $oldnode){}

    /**
     * (PHP 4.2) This function replaces an existing node with the passed new
     * node. Before the replacement {@link newnode} is copied if it has a
     * parent to make sure a node which is already in the document will not
     * be inserted a second time. This behaviour enforces doing all
     * modifications on the node before the replacement or to refetch the
     * inserted node afterwards with functions like {@link
     * domnode_first_child}, {@link domnode_child_nodes} etc..
     * 
     * (PHP 4.3) This function replaces an existing node with the passed new
     * node. It is not copied anymore. If {@link newnode} was already
     * inserted in the document it is first unlinked from its existing
     * context. If the replacement succeeds the old node is returned.
     * 
     * See also {@link domnode_append_child}
     * 
     * @param domelement $newnode
     * @return domelement
     * @since PHP 4 >= 4.2.0
     **/
    function replace_node($newnode){}

    /**
     * @param string $content
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function set_content($content){}

    /**
     * Sets name of node.
     * 
     * See also {@link domnode_node_name}.
     * 
     * @return bool
     * @since PHP 4 >= 4.1.0
     **/
    function set_name(){}

    /**
     * Sets the namespace of a node to {@link uri}. If there is already a
     * namespace declaration with the same uri in one of the parent nodes of
     * the node, the prefix of this is taken, otherwise it will take the one
     * provided in the optional parameter {@link prefix} or generate a random
     * one.
     * 
     * See also {@link domdocument_create_element_ns}, and {@link
     * domnode_add_namespace}
     * 
     * @param string $uri
     * @param string $prefix
     * @return void
     * @since PHP 4 >= 4.3.0
     **/
    function set_namespace($uri, $prefix){}

    /**
     * @return void
     * @since PHP 4 >= 4.1.0
     **/
    function unlink_node(){}

}
class DOMNodeList {
    /**
     * Retrieves a node specified by {@link index} within the DOMNodeList
     * object.
     * 
     * @param int $index Index of the node into the collection.
     * @return DOMNode
     * @since PHP 5
     **/
    function item($index){}

}
class DOMNotation extends DOMNode {
}
class DomProcessingInstruction extends DOMNode {
    /**
     * This method gets the data of the ProcessingInstruction node.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function data(){}

    /**
     * This method gets the target of the ProcessingInstruction node.
     * 
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function target(){}

    /**
     * Creates a new DOMProcessingInstruction object. This object is read
     * only. It may be appended to a document, but additional nodes may not
     * be appended to this node until the node is associated with a document.
     * To create a writeable node, use .
     * 
     * @param string $name The tag name of the processing instruction.
     * @param string $value The value of the processing instruction.
     * @since PHP 5
     **/
    function __construct($name, $value){}

}
/**
 * The class inherits from and represents the textual content of a or .
 **/
class DOMText extends DOMCharacterData {
    /**
     * Indicates whether this text node contains whitespace. The text node is
     * determined to contain whitespace in element content during the load of
     * the document.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isWhitespaceInElementContent(){}

    /**
     * Breaks this node into two nodes at the specified {@link offset},
     * keeping both in the tree as siblings.
     * 
     * After being split, this node will contain all the content up to the
     * {@link offset}. If the original node had a parent node, the new node
     * is inserted as the next sibling of the original node. When the {@link
     * offset} is equal to the length of this node, the new node has no data.
     * 
     * @param int $offset The offset at which to split, starting from 0.
     * @return DOMText
     * @since PHP 5
     **/
    function splitText($offset){}

    /**
     * Creates a new DOMText object.
     * 
     * @param string $value The value of the text node. If not supplied an
     *   empty text node is created.
     * @since PHP 5
     **/
    function __construct($value){}

}
/**
 * Supports XPath 1.0
 **/
class DomXPath {
    /**
     * Executes the given XPath {@link expression} and returns a typed result
     * if possible.
     * 
     * @param string $expression The XPath expression to execute.
     * @param DOMNode $contextnode The optional {@link contextnode} can be
     *   specified for doing relative XPath queries. By default, the queries
     *   are relative to the root element.
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function evaluate($expression, $contextnode){}

    /**
     * Executes the given XPath {@link expression}.
     * 
     * @param string $expression The XPath expression to execute.
     * @param DOMNode $contextnode The optional {@link contextnode} can be
     *   specified for doing relative XPath queries. By default, the queries
     *   are relative to the root element.
     * @return DOMNodeList
     * @since PHP 5
     **/
    function query($expression, $contextnode){}

    /**
     * Registers the {@link namespaceURI} and {@link prefix} with the
     * DOMXPath object.
     * 
     * @param string $prefix The prefix.
     * @param string $namespaceURI The URI of the namespace.
     * @return bool
     * @since PHP 5
     **/
    function registerNamespace($prefix, $namespaceURI){}

    /**
     * This method enables the ability to use PHP functions within XPath
     * expressions.
     * 
     * @param mixed $restrict Use this parameter to only allow certain
     *   functions to be called from XPath. This parameter can be either a
     *   string (a function name) or an array of function names.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function registerPhpFunctions($restrict){}

    /**
     * Creates a new DOMXPath object.
     * 
     * @param DOMDocument $doc The DOMDocument associated with the
     *   DOMXPath.
     * @since PHP 5
     **/
    function __construct($doc){}

}
class DomXsltStylesheet {
    /**
     * Applies an XSLT Transformation on the given DomDocument object.
     * 
     * @param DomDocument $xml_doc The XML document being transformed, as a
     *   DomDocument object.
     * @param array $xslt_params An associative array that takes pairs of
     *   parameter names and values.
     * @param bool $is_xpath_param If set to the values of the {@link
     *   xslt_params} will be quoted. This is the default behavior. It allows
     *   you to pass the values as PHP strings.
     * @param string $profile_filename Set this to the path of a filename,
     *   if you want profiling information.
     * @return DomDocument
     * @since PHP 4 >= 4.1.0
     **/
    function process($xml_doc, $xslt_params, $is_xpath_param, $profile_filename){}

    /**
     * Since always returns a well-formed XML DomDocument, no matter what
     * output method was declared in <xsl:output> and similar
     * attributes/elements, it's of not much use, if you want to output HTML
     * 4 or text data.
     * 
     * This function on the contrary honors <xsl:output method="html|text">
     * and other output control directives. See the example for instruction
     * on how to use it.
     * 
     * @param DomDocument $xmldoc
     * @param string $filename
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function result_dump_file($xmldoc, $filename){}

    /**
     * Since always returns a well-formed XML DomDocument, no matter what
     * output method was declared in <xsl:output> and similar
     * attributes/elements, it's of not much use, if you want to output HTML
     * 4 or text data.
     * 
     * This function on the contrary honors <xsl:output method="html|text">
     * and other output control directives. See the example for instruction
     * on how to use it.
     * 
     * @param DomDocument $xmldoc
     * @return string
     * @since PHP 4 >= 4.1.0
     **/
    function result_dump_mem($xmldoc){}

}
/**
 * The EmptyIterator class for an empty iterator.
 **/
class EmptyIterator implements Iterator, Traversable {
    /**
     * This function must not be called. It throws an exception upon access.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * This function must not be called. It throws an exception upon access.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * No operation, nothing to do.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * No operation, nothing to do.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * The EmptyIterator valid() method.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

}
/**
 * An Error Exception.
 **/
class ErrorException extends Exception {
    /**
     * Returns the severity of the exception.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getSeverity(){}

}
/**
 * The Filesystem iterator
 **/
class FilesystemIterator extends DirectoryIterator implements SeekableIterator, Traversable, Iterator {
    /**
     * Get file information of the current element.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * Gets the handling flags, as set in FilesystemIterator::__construct or
     * FilesystemIterator::setFlags.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function getFlags(){}

    /**
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Move to the next file.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * Rewinds the directory back to the start.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * Sets handling flags.
     * 
     * @param int $flags The handling flags to set. See the
     *   FilesystemIterator constants.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setFlags($flags){}

    /**
     * Constructs a new filesystem iterator from the {@link path}.
     * 
     * @param string $path The path of the filesystem item to be iterated
     *   over.
     * @param int $flags Flags may be provided which will affect the
     *   behavior of some methods. A list of the flags can found under
     *   FilesystemIterator predefined constants. They can also be set later
     *   with FilesystemIterator::setFlags
     * @since PHP 5 >= 5.3.0
     **/
    function __construct($path, $flags){}

}
/**
 * This abstract iterator filters out unwanted values. This class should
 * be extended to implement custom iterator filters. The must be
 * implemented in the subclass.
 **/
class FilterIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Returns whether the current element of the iterator is acceptable
     * through this filter.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function accept(){}

    /**
     * Get the current element value.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * Get the inner iterator.
     * 
     * @return Iterator
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator(){}

    /**
     * Get the current key.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Move the iterator forward.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Rewind the iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Checks whether the current element is valid.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

    /**
     * Constructs a new FilterIterator, which consists of a passed in {@link
     * iterator} with filters applied to it.
     * 
     * @param Iterator $iterator The iterator that is being filtered.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator){}

}
class finfo {
    /**
     * This function is used to get information about binary data in a
     * string.
     * 
     * @param string $string Fileinfo resource returned by {@link
     *   finfo_open}.
     * @param int $options Content of a file to be checked.
     * @param resource $context One or disjunction of more Fileinfo
     *   constants.
     * @return string
     **/
    function buffer($string, $options, $context){}

    /**
     * This function is used to get information about a file.
     * 
     * @param string $file_name Fileinfo resource returned by {@link
     *   finfo_open}.
     * @param int $options Name of a file to be checked.
     * @param resource $context One or disjunction of more Fileinfo
     *   constants.
     * @return string
     **/
    function file($file_name, $options, $context){}

    /**
     * This function sets various Fileinfo options. Options can be set also
     * directly in {@link finfo_open} or other Fileinfo functions.
     * 
     * @param int $options Fileinfo resource returned by {@link
     *   finfo_open}.
     * @return bool
     **/
    function set_flags($options){}

}
/**
 * Represents a class for connecting to a Gearman job server and making
 * requests to perform some function on provided data. The function
 * performed must be one registerd by a Gearman worker and the data
 * passed is opaque to the job server.
 **/
class GearmanClient {
    /**
     * Adds one or more options to those already set.
     * 
     * @param int $options The options to add
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function addOptions($options){}

    /**
     * Adds a job server to a list of servers that can be used to run a task.
     * No socket I/O happens here; the server is simply added to the list.
     * 
     * @param string $host
     * @param int $port
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function addServer($host, $port){}

    /**
     * Adds a list of job servers that can be used to run a task. No socket
     * I/O happens here; the servers are simply added to the full list of
     * servers.
     * 
     * @param string $servers A comma-separated list of servers, each
     *   server specified in the format host:port.
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function addServers($servers){}

    /**
     * Adds a task to be run in parallel with other tasks. Call this method
     * for all the tasks to be run in parallel, then call
     * GearmanClient::runTasks to perform the work. Note that enough workers
     * need to be available for the tasks to all run in parallel.
     * 
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTask($function_name, $workload, &$context, $unique){}

    /**
     * Adds a background task to be run in parallel with other tasks. Call
     * this method for all the tasks to be run in parallel, then call
     * GearmanClient::runTasks to perform the work.
     * 
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTaskBackground($function_name, $workload, &$context, $unique){}

    /**
     * Adds a high priority task to be run in parallel with other tasks. Call
     * this method for all the high priority tasks to be run in parallel,
     * then call GearmanClient::runTasks to perform the work. Tasks with a
     * high priority will be selected from the queue before those of normal
     * or low priority.
     * 
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTaskHigh($function_name, $workload, &$context, $unique){}

    /**
     * Adds a high priority background task to be run in parallel with other
     * tasks. Call this method for all the tasks to be run in parallel, then
     * call GearmanClient::runTasks to perform the work. Tasks with a high
     * priority will be selected from the queue before those of normal or low
     * priority.
     * 
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTaskHighBackground($function_name, $workload, &$context, $unique){}

    /**
     * Adds a low priority background task to be run in parallel with other
     * tasks. Call this method for all the tasks to be run in parallel, then
     * call GearmanClient::runTasks to perform the work. Tasks with a low
     * priority will be selected from the queue after those of normal or low
     * priority.
     * 
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTaskLow($function_name, $workload, &$context, $unique){}

    /**
     * Adds a low priority background task to be run in parallel with other
     * tasks. Call this method for all the tasks to be run in parallel, then
     * call GearmanClient::runTasks to perform the work. Tasks with a low
     * priority will be selected from the queue after those of normal or high
     * priority.
     * 
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTaskLowBackground($function_name, $workload, &$context, $unique){}

    /**
     * Used to request status information from the Gearman server, which will
     * call the specified status callback (set using
     * GearmanClient::setStatusCallback).
     * 
     * @param string $job_handle The job handle for the task to get status
     *   for
     * @param string $context Data to be passed to the status callback,
     *   generally a reference to an array or object
     * @return GearmanTask
     * @since PECL gearman >= 0.5.0
     **/
    function addTaskStatus($job_handle, &$context){}

    /**
     * Clears all the task callback functions that have previously been set.
     * 
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function clearCallbacks(){}

    /**
     * Get the application context previously set with
     * GearmanClient::setContext.
     * 
     * @return string
     * @since PECL gearman >= 0.6.0
     **/
    function context(){}

    /**
     * Get the application data previously set with GearmanClient::setData.
     * 
     * @return string
     * @since PECL gearman
     **/
    function data(){}

    /**
     * Runs a task in the background, returning a job handle which can be
     * used to get the status of the running task.
     * 
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function doBackground($function_name, $workload, $unique){}

    /**
     * Runs a single high priority task and returns a string representation
     * of the result. It is up to the GearmanClient and GearmanWorker to
     * agree on the format of the result. High priority tasks will get
     * precedence over normal and low priority tasks in the job queue.
     * 
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function doHigh($function_name, $workload, $unique){}

    /**
     * Runs a high priority task in the background, returning a job handle
     * which can be used to get the status of the running task. High priority
     * tasks take precedence over normal and low priority tasks in the job
     * queue.
     * 
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function doHighBackground($function_name, $workload, $unique){}

    /**
     * Gets that job handle for a running task. This should be used between
     * repeated GearmanClient::do calls. The job handle can then be used to
     * get information on the task.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function doJobHandle(){}

    /**
     * Runs a single low priority task and returns a string representation of
     * the result. It is up to the GearmanClient and GearmanWorker to agree
     * on the format of the result. Normal and high priority tasks will get
     * precedence over low priority tasks in the job queue.
     * 
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function doLow($function_name, $workload, $unique){}

    /**
     * Runs a low priority task in the background, returning a job handle
     * which can be used to get the status of the running task. Normal and
     * high priority tasks take precedence over low priority tasks in the job
     * queue.
     * 
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function doLowBackground($function_name, $workload, $unique){}

    /**
     * Returns the status for the running task. This should be used between
     * repeated GearmanClient::do calls.
     * 
     * @return array
     * @since PECL gearman >= 0.5.0
     **/
    function doStatus(){}

    /**
     * Returns an error string for the last error encountered.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function error(){}

    /**
     * Value of errno in the case of a GEARMAN_ERRNO return value.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function getErrno(){}

    /**
     * Gets the status for a background job given a job handle. The status
     * information will specify whether the job is known, whether the job is
     * currently running, and the percentage completion.
     * 
     * @param string $job_handle
     * @return array
     * @since PECL gearman >= 0.5.0
     **/
    function jobStatus($job_handle){}

    /**
     * Removes (unsets) one or more options.
     * 
     * @param int $options The options to be removed (unset)
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function removeOptions($options){}

    /**
     * Returns the last Gearman return code.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function returnCode(){}

    /**
     * For a set of tasks previously added with GearmanClient::addTask,
     * GearmanClient::addTaskHigh, GearmanClient::addTaskLow,
     * GearmanClient::addTaskBackground,
     * GearmanClient::addTaskHighBackground, or
     * GearmanClient::addTaskLowBackground, this call starts running the
     * tasks in parallel.
     * 
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function runTasks(){}

    /**
     * Sets the callback function for accepting data packets for a task. The
     * callback function should take a single argument, a GearmanTask object.
     * 
     * @param callback $callback A function or method to call
     * @return void
     * @since PECL gearman
     **/
    function setClientCallback($callback){}

    /**
     * Use to set a function to be called when a task is completed. The
     * callback function should accept a single argument, a GearmanTask
     * oject.
     * 
     * @param callback $callback A function to be called
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setCompleteCallback($callback){}

    /**
     * Sets an arbitrary string to provide application context that can later
     * be retrieved by GearmanClient::context.
     * 
     * @param string $context Arbitrary context data
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function setContext($context){}

    /**
     * Sets a function to be called when a task is received and queued by the
     * Gearman job server. The callback should accept a single argument, a
     * GearmanClient oject.
     * 
     * @param string $callback A function to call
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setCreatedCallback($callback){}

    /**
     * Sets some arbitrary application data that can later be retrieved by
     * GearmanClient::data.
     * 
     * @param string $data
     * @return bool
     * @since PECL gearman
     **/
    function setData($data){}

    /**
     * Sets the callback function for accepting data packets for a task. The
     * callback function should take a single argument, a GearmanTask object.
     * 
     * @param callback $callback A function or method to call
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function setDataCallback($callback){}

    /**
     * Specifies a function to call when a worker for a task sends an
     * exception.
     * 
     * @param callback $callback Function to call when the worker throws an
     *   exception
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setExceptionCallback($callback){}

    /**
     * Sets the callback function to be used when a task does not complete
     * successfully. The function should accept a single argument, a
     * GearmanTask object.
     * 
     * @param callback $callback A function to call
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setFailCallback($callback){}

    /**
     * Sets one or more client options.
     * 
     * @param int $options The options to be set
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setOptions($options){}

    /**
     * Sets a callback function used for getting updated status information
     * from a worker. The function should accept a single argument, a
     * GearmanTask object.
     * 
     * @param callback $callback A function to call
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setStatusCallback($callback){}

    /**
     * Sets the timeout for socket I/O activity.
     * 
     * @param int $timeout An interval of time in milliseconds
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function setTimeout($timeout){}

    /**
     * Sets a function to be called when a worker sends a warning. The
     * callback should accept a single argument, a GearmanTask object.
     * 
     * @param callback $callback A function to call
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setWarningCallback($callback){}

    /**
     * Sets a function to be called when a worker needs to send back data
     * prior to job completion. A worker can do this when it needs to send
     * updates, send partial results, or flush data during long running jobs.
     * The callback should accept a single argument, a GearmanTask object.
     * 
     * @param callback $callback A function to call
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setWorkloadCallback($callback){}

    /**
     * Returns the timeout in milliseconds to wait for I/O activity.
     * 
     * @return int
     * @since PECL gearman >= 0.6.0
     **/
    function timeout(){}

    /**
     * Creates a GearmanClient instance representing a client that connects
     * to the job server and submits tasks to complete.
     * 
     * @since PECL gearman >= 0.5.0
     **/
    function __construct(){}

}
/**
 * Description of the class.
 **/
class GearmanException extends Exception {
}
/**
 * Description of the class.
 **/
class GearmanJob {
    /**
     * Sends result data and the complete status update for this job.
     * 
     * @param string $result Serialized result data.
     * @return bool
     * @since PECL gearman
     **/
    function complete($result){}

    /**
     * Sends data to the job server (and any listening clients) for this job.
     * 
     * @param string $data Arbitrary serialized data.
     * @return bool
     * @since PECL gearman
     **/
    function data($data){}

    /**
     * Sends the supplied exception when this job is running.
     * 
     * @param string $exception An exception description.
     * @return bool
     * @since PECL gearman
     **/
    function exception($exception){}

    /**
     * Sends failure status for this job, indicating that the job failed in a
     * known way (as opposed to failing due to a thrown exception).
     * 
     * @return bool
     * @since PECL gearman
     **/
    function fail(){}

    /**
     * Returns the function name for this job. This is the function the work
     * will execute to perform the job.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function functionName(){}

    /**
     * Returns the opaque job handle assigned by the job server.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function handle(){}

    /**
     * Returns the last return code issued by the job server.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function returnCode(){}

    /**
     * Sends result data and the complete status update for this job.
     * 
     * @param string $result Serialized result data.
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function sendComplete($result){}

    /**
     * Sends data to the job server (and any listening clients) for this job.
     * 
     * @param string $data Arbitrary serialized data.
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function sendData($data){}

    /**
     * Sends the supplied exception when this job is running.
     * 
     * @param string $exception An exception description.
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function sendException($exception){}

    /**
     * Sends failure status for this job, indicating that the job failed in a
     * known way (as opposed to failing due to a thrown exception).
     * 
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function sendFail(){}

    /**
     * Sends status information to the job server and any listening clients.
     * Use this to specify what percentage of the job has been completed.
     * 
     * @param int $numerator The numerator of the precentage completed
     *   expressed as a fraction.
     * @param int $denominator The denominator of the precentage completed
     *   expressed as a fraction.
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function sendStatus($numerator, $denominator){}

    /**
     * Sends a warning for this job while it is running.
     * 
     * @param string $warning A warning messages.
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function sendWarning($warning){}

    /**
     * Sets the return value for this job, indicates how the job completed.
     * 
     * @param string $gearman_return_t A valid Gearman return value.
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setReturn($gearman_return_t){}

    /**
     * Sends status information to the job server and any listening clients.
     * Use this to specify what percentage of the job has been completed.
     * 
     * @param int $numerator The numerator of the precentage completed
     *   expressed as a fraction.
     * @param int $denominator The denominator of the precentage completed
     *   expressed as a fraction.
     * @return bool
     * @since PECL gearman
     **/
    function status($numerator, $denominator){}

    /**
     * Returns the unique identifiter for this job. The identifier is
     * assigned by the client.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function unique(){}

    /**
     * Sends a warning for this job while it is running.
     * 
     * @param string $warning A warning messages.
     * @return bool
     * @since PECL gearman
     **/
    function warning($warning){}

    /**
     * Returns the workload for the job. This is serialized data that is to
     * be processed by the worker.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function workload(){}

    /**
     * Returns the size of the job's work load (the data the worker is to
     * process) in bytes.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function workloadSize(){}

    /**
     * Creates a GearmanJob instance representing a job the worker is to
     * complete.
     * 
     * @since PECL gearman >= 0.5.0
     **/
    function __construct(){}

}
/**
 * Description of the class.
 **/
class GearmanTask {
    /**
     * Returns a new GearmanTask object.
     * 
     * @return GearmanTask
     * @since PECL gearman
     **/
    function create(){}

    /**
     * Returns data being returned for a task by a worker.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function data(){}

    /**
     * Returns the size of the data being returned for a task.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function dataSize(){}

    /**
     * Returns the name of the function this task is associated with, i.e.,
     * the function the Gearman worker calls.
     * 
     * @return string
     * @since PECL gearman >= 0.6.0
     **/
    function functionName(){}

    /**
     * Gets the status information for whether or not this task is known to
     * the job server.
     * 
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function isKnown(){}

    /**
     * Indicates whether or not this task is currently running.
     * 
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function isRunning(){}

    /**
     * Returns the job handle for this task.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function jobHandle(){}

    /**
     * @param int $data_len Length of data to be read.
     * @return array
     * @since PECL gearman >= 0.5.0
     **/
    function recvData($data_len){}

    /**
     * Returns the last Gearman return code for this task.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function returnCode(){}

    /**
     * @param string $data Data to send to the worker.
     * @return int
     * @since PECL gearman
     **/
    function sendData($data){}

    /**
     * @param string $data Data to send to the worker.
     * @return int
     * @since PECL gearman >= 0.6.0
     **/
    function sendWorkload($data){}

    /**
     * Returns the denominator of the percentage of the task that is complete
     * expressed as a fraction.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function taskDenominator(){}

    /**
     * Returns the numerator of the percentage of the task that is complete
     * expressed as a fraction.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function taskNumerator(){}

    /**
     * Returns the unique identifier for this task. This is assigned by the
     * GearmanClient, as opposed to the job handle which is set by the
     * Gearman job server.
     * 
     * @return string
     * @since PECL gearman >= 0.6.0
     **/
    function unique(){}

    /**
     * Returns the unique identifier for this task. This is assigned by the
     * GearmanClient, as opposed to the job handle which is set by the
     * Gearman job server.
     * 
     * @return string
     * @since PECL gearman
     **/
    function uuid(){}

    /**
     * Creates a GearmanTask instance representing a task to be submitted to
     * a job server.
     * 
     * @since PECL gearman >= 0.5.0
     **/
    function __construct(){}

}
/**
 * Description of the class.
 **/
class GearmanWorker {
    /**
     * Registers a function name with the job server and specifies a callback
     * corresponding to that function. Optionally specify extra application
     * context data to be used when the callback is called and a timeout.
     * 
     * @param string $function_name The name of a function to register with
     *   the job server
     * @param callback $function A callback that gets called when a job for
     *   the registered function name is submitted
     * @param mixed $context A reference to arbitrary application context
     *   data that can be modified by the worker function
     * @param int $timeout An interval of time in seconds
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function addFunction($function_name, $function, &$context, $timeout){}

    /**
     * Adds one or more options to the options previously set.
     * 
     * @param int $option The options to be added
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function addOptions($option){}

    /**
     * Adds a job server to this worker. This goes into a list of servers
     * than can be used to run jobs. No socket I/O happens here.
     * 
     * @param string $host
     * @param int $port
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function addServer($host, $port){}

    /**
     * Adds one or more job servers to this worker. These go into a list of
     * servers that can be used to run jobs. No socket I/O happens here.
     * 
     * @param string $servers A comma separated list of job servers in the
     *   format host:port. If no port is specified, it defaults to 4730.
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function addServers($servers){}

    /**
     * Returns an error string for the last error encountered.
     * 
     * @return string
     * @since PECL gearman >= 0.5.0
     **/
    function error(){}

    /**
     * Returns the value of errno in the case of a GEARMAN_ERRNO return
     * value.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function getErrno(){}

    /**
     * Gets the options previously set for the worker.
     * 
     * @return int
     * @since PECL gearman >= 0.6.0
     **/
    function options(){}

    /**
     * Registers a function name with the job server with an optional
     * timeout. The timeout specifies how many seconds the server will wait
     * before marking a job as failed. If the timeout is set to zero, there
     * is no timeout.
     * 
     * @param string $function_name The name of a function to register with
     *   the job server
     * @param int $timeout An interval of time in seconds
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function register($function_name, $timeout){}

    /**
     * Removes (unsets) one or more worker options.
     * 
     * @param int $option The options to be removed (unset)
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function removeOptions($option){}

    /**
     * Returns the last Gearman return code.
     * 
     * @return int
     * @since PECL gearman >= 0.5.0
     **/
    function returnCode(){}

    /**
     * Sets one or more options to the supplied value.
     * 
     * @param int $option The options to be set
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function setOptions($option){}

    /**
     * Sets the interval of time to wait for socket I/O activity.
     * 
     * @param int $timeout An interval of time in milliseconds. A negative
     *   value indicates an infinite timeout.
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function setTimeout($timeout){}

    /**
     * Returns the current time to wait, in milliseconds, for socket I/O
     * activity.
     * 
     * @return int
     * @since PECL gearman >= 0.6.0
     **/
    function timeout(){}

    /**
     * Unregisters a function name with the job servers ensuring that no more
     * jobs (for that function) are sent to this worker.
     * 
     * @param string $function_name The name of a function to register with
     *   the job server
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function unregister($function_name){}

    /**
     * Unregisters all previously registered functions, ensuring that no more
     * jobs are sent to this worker.
     * 
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function unregisterAll(){}

    /**
     * Causes the worker to wait for activity from one of the Gearman job
     * servers when operating in non-blocking I/O mode. On failure, issues a
     * E_WARNING with the last Gearman error encountered.
     * 
     * @return bool
     * @since PECL gearman >= 0.6.0
     **/
    function wait(){}

    /**
     * Waits for a job to be assigned and then calls the appropriate callback
     * function. Issues an E_WARNING with the last Gearman error if the
     * return code is not one of GEARMAN_SUCCESS, GEARMAN_IO_WAIT, or
     * GEARMAN_WORK_FAIL.
     * 
     * @return bool
     * @since PECL gearman >= 0.5.0
     **/
    function work(){}

    /**
     * Creates a GearmanWorker instance representing a worker that connects
     * to the job server and accepts tasks to run.
     * 
     * @since PECL gearman >= 0.5.0
     **/
    function __construct(){}

}
/**
 * Returns the absolute value of {@link number}.
 * 
 * @param mixed $number The numeric value to process
 * @return number
 * @since PHP 4, PHP 5
 **/
function abs($number){}

/**
 * Returns the arc cosine of {@link arg} in radians. {@link acos} is the
 * complementary function of {@link cos}, which means that
 * a==cos(acos(a)) for every value of a that is within {@link acos}'
 * range.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4, PHP 5
 **/
function acos($arg){}

/**
 * Returns the inverse hyperbolic cosine of {@link arg}, i.e. the value
 * whose hyperbolic cosine is {@link arg}.
 * 
 * @param float $arg The value to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function acosh($arg){}

/**
 * Returns a string with backslashes before characters that are listed in
 * {@link charlist} parameter.
 * 
 * @param string $str The string to be escaped.
 * @param string $charlist A list of characters to be escaped. If
 *   {@link charlist} contains characters \n, \r etc., they are converted
 *   in C-like style, while other non-alphanumeric characters with ASCII
 *   codes lower than 32 and higher than 126 converted to octal
 *   representation. When you define a sequence of characters in the
 *   charlist argument make sure that you know what characters come
 *   between the characters that you set as the start and end of the
 *   range.
 *   
 *   <?php echo addcslashes('foo[ ]', 'A..z'); // output: \f\o\o\[ \] //
 *   All upper and lower-case letters will be escaped // ... but so will
 *   the [\]^_` ?>
 *   
 *   Also, if the first character in a range has a higher ASCII value
 *   than the second character in the range, no range will be
 *   constructed. Only the start, end and period characters will be
 *   escaped. Use the {@link ord} function to find the ASCII value for a
 *   character.
 *   
 *   <?php echo addcslashes("zoo['.']", 'z..A'); // output: \zoo['\.'] ?>
 *   
 *   Be careful if you choose to escape characters 0, a, b, f, n, r, t
 *   and v. They will be converted to \0, \a, \b, \f, \n, \r, \t and \v.
 *   In PHP \0 (NULL), \r (carriage return), \n (newline), \f (form
 *   feed), \v (vertical tab) and \t (tab) are predefined escape
 *   sequences, while in C all of these are predefined escape sequences.
 * @return string
 * @since PHP 4, PHP 5
 **/
function addcslashes($str, $charlist){}

/**
 * Returns a string with backslashes before characters that need to be
 * quoted in database queries etc. These characters are single quote ('),
 * double quote ("), backslash (\) and NUL (the byte).
 * 
 * An example use of {@link addslashes} is when you're entering data into
 * a database. For example, to insert the name O'reilly into a database,
 * you will need to escape it. It's highly recommeneded to use DBMS
 * specific escape function (e.g. {@link mysqli_real_escape_string} for
 * MySQL or {@link pg_escape_string} for PostgreSQL), but if the DBMS
 * you're using does't have an escape function and the DBMS uses \ to
 * escape special chars, you can use this function. This would only be to
 * get the data into the database, the extra \ will not be inserted.
 * Having the PHP directive magic_quotes_sybase set to on will mean ' is
 * instead escaped with another '.
 * 
 * The PHP directive magic_quotes_gpc is on by default, and it
 * essentially runs {@link addslashes} on all GET, POST, and COOKIE data.
 * Do not use {@link addslashes} on strings that have already been
 * escaped with magic_quotes_gpc as you'll then do double escaping. The
 * function {@link get_magic_quotes_gpc} may come in handy for checking
 * this.
 * 
 * @param string $str The string to be escaped.
 * @return string
 * @since PHP 4, PHP 5
 **/
function addslashes($str){}

/**
 * Aggregates methods and properties defined in a class to an existing
 * object. Methods and properties with names starting with an underscore
 * character (_) are considered private to the aggregated class and are
 * not used, constructors are also excluded from the aggregation
 * procedure.
 * 
 * @param object $object
 * @param string $class_name
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate($object, $class_name){}

/**
 * Gets the aggregation information for the given {@link object}.
 * 
 * @param object $object
 * @return array
 * @since PHP 4 >= 4.3.0
 **/
function aggregate_info($object){}

/**
 * Aggregates all methods defined in a class to an existing object,
 * except for the class constructor, or methods whose names start with an
 * underscore character (_) which are considered private to the
 * aggregated class.
 * 
 * @param object $object
 * @param string $class_name
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate_methods($object, $class_name){}

/**
 * Aggregates methods from a class to an existing object using a list of
 * method names.
 * 
 * The class constructor or methods whose names start with an underscore
 * character (_), which are considered private to the aggregated class,
 * are always excluded.
 * 
 * @param object $object
 * @param string $class_name
 * @param array $methods_list
 * @param bool $exclude The optional parameter {@link exclude} is used
 *   to decide whether the list contains the names of methods to include
 *   in the aggregation (i.e. {@link exclude} is ), or to exclude from
 *   the aggregation ({@link exclude} is ).
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate_methods_by_list($object, $class_name, $methods_list, $exclude){}

/**
 * Aggregates methods from a class to an existing object using a regular
 * expression to match method names.
 * 
 * The class constructor or methods whose names start with an underscore
 * character (_), which are considered private to the aggregated class,
 * are always excluded.
 * 
 * @param object $object
 * @param string $class_name
 * @param string $regexp
 * @param bool $exclude The optional parameter {@link exclude} is used
 *   to decide whether the regular expression will select the names of
 *   methods to include in the aggregation (i.e. {@link exclude} is ), or
 *   to exclude from the aggregation ({@link exclude} is ).
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate_methods_by_regexp($object, $class_name, $regexp, $exclude){}

/**
 * Aggregates all properties defined in a class to an existing object,
 * except for properties whose names start with an underscore character
 * (_) which are considered private to the aggregated class.
 * 
 * @param object $object
 * @param string $class_name
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate_properties($object, $class_name){}

/**
 * Aggregates properties from a class to an existing object using a list
 * of property names.
 * 
 * The properties whose names start with an underscore character (_),
 * which are considered private to the aggregated class, are always
 * excluded.
 * 
 * @param object $object
 * @param string $class_name
 * @param array $properties_list
 * @param bool $exclude The optional parameter {@link exclude} is used
 *   to decide whether the list contains the names of class properties to
 *   include in the aggregation (i.e. {@link exclude} is ), or to exclude
 *   from the aggregation ({@link exclude} is ).
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate_properties_by_list($object, $class_name, $properties_list, $exclude){}

/**
 * Aggregates properties from a class to an existing object using a
 * regular expression to match their names.
 * 
 * The properties whose names start with an underscore character (_),
 * which are considered private to the aggregated class, are always
 * excluded.
 * 
 * @param object $object
 * @param string $class_name
 * @param string $regexp
 * @param bool $exclude The optional parameter {@link exclude} is used
 *   to decide whether the regular expression will select the names of
 *   class properties to include in the aggregation (i.e. {@link exclude}
 *   is ), or to exclude from the aggregation ({@link exclude} is ).
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function aggregate_properties_by_regexp($object, $class_name, $regexp, $exclude){}

/**
 * Gets the aggregation information for the given {@link object}.
 * 
 * @param object $object
 * @return array
 * @since PHP 4 >= 4.2.0 and < 4.3.0
 **/
function aggregation_info($object){}

/**
 * {@link apache_child_terminate} will register the Apache process
 * executing the current PHP request for termination once execution of
 * PHP code is completed. It may be used to terminate a process after a
 * script with high memory consumption has been run as memory will
 * usually only be freed internally but not given back to the operating
 * system.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function apache_child_terminate(){}

/**
 * Get an Apache environment variable as specified by {@link variable}.
 * 
 * This function requires Apache 2 otherwise it's undefined.
 * 
 * @param string $variable The Apache environment variable
 * @param bool $walk_to_top Whether to get the top-level variable
 *   available to all Apache layers.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function apache_getenv($variable, $walk_to_top){}

/**
 * Get a list of loaded Apache modules.
 * 
 * @return array
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function apache_get_modules(){}

/**
 * Fetch the Apache version.
 * 
 * @return string
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function apache_get_version(){}

/**
 * This performs a partial request for a URI. It goes just far enough to
 * obtain all the important information about the given resource.
 * 
 * @param string $filename The filename (URI) that's being requested.
 * @return object
 * @since PHP 4, PHP 5
 **/
function apache_lookup_uri($filename){}

/**
 * This function is a wrapper for Apache's table_get and table_set. It
 * edits the table of notes that exists during a request. The table's
 * purpose is to allow Apache modules to communicate.
 * 
 * The main use for {@link apache_note} is to pass information from one
 * module to another within the same request.
 * 
 * @param string $note_name The name of the note.
 * @param string $note_value The value of the note.
 * @return string
 * @since PHP 4, PHP 5
 **/
function apache_note($note_name, $note_value){}

/**
 * Fetches all HTTP request headers from the current request.
 * 
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function apache_request_headers(){}

/**
 * {@link apache_reset_timeout} resets the Apache write timer, which
 * defaults to 300 seconds. With set_time_limit(0);
 * ignore_user_abort(true) and periodic {@link apache_reset_timeout}
 * calls, Apache can theoretically run forever.
 * 
 * This function requires Apache 1.
 * 
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function apache_reset_timeout(){}

/**
 * Fetch all HTTP response headers.
 * 
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function apache_response_headers(){}

/**
 * {@link apache_setenv} sets the value of the Apache environment
 * variable specified by {@link variable}.
 * 
 * @param string $variable The environment variable that's being set.
 * @param string $value The new {@link variable} value.
 * @param bool $walk_to_top Whether to set the top-level variable
 *   available to all Apache layers.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function apache_setenv($variable, $value, $walk_to_top){}

/**
 * Caches a variable in the data store, only if it's not already stored.
 * 
 * @param string $key Store the variable using this name. {@link key}s
 *   are cache-unique, so attempting to use {@link apc_add} to store data
 *   with a key that already exists will not overwrite the existing data,
 *   and will instead return . (This is the only difference between
 *   {@link apc_add} and {@link apc_store}.)
 * @param mixed $var The variable to store
 * @param int $ttl Time To Live; store {@link var} in the cache for
 *   {@link ttl} seconds. After the {@link ttl} has passed, the stored
 *   variable will be expunged from the cache (on the next request). If
 *   no {@link ttl} is supplied (or if the {@link ttl} is 0), the value
 *   will persist until it is removed from the cache manually, or
 *   otherwise fails to exist in the cache (clear, restart, etc.).
 * @return bool
 * @since PECL apc >= 3.0.13
 **/
function apc_add($key, $var, $ttl){}

/**
 * Returns a binary dump of the given files and user variables from the
 * APC cache. A for files or user_vars signals a dump of every entry,
 * whereas array() will dump nothing.
 * 
 * @param array $files The files. Passing in signals a dump of every
 *   entry, while passing in {@link array} will dump nothing.
 * @param array $user_vars The user vars. Passing in signals a dump of
 *   every entry, while passing in {@link array} will dump nothing.
 * @return string
 * @since PECL apc >= 3.1.4
 **/
function apc_bin_dump($files, $user_vars){}

/**
 * Outputs a binary dump of the given files and user variables from the
 * APC cache to the named file.
 * 
 * @param array $files The file names being dumped.
 * @param array $user_vars The user variables being dumped.
 * @param string $filename The filename where the dump is being saved.
 * @param int $flags Flags passed to the {@link filename} stream. See
 *   the {@link file_put_contents} documentation for details.
 * @param resource $context The context passed to the {@link filename}
 *   stream. See the {@link file_put_contents} documentation for details.
 * @return int
 * @since PECL apc >= 3.1.4
 **/
function apc_bin_dumpfile($files, $user_vars, $filename, $flags, $context){}

/**
 * Loads the given binary dump into the APC file/user cache.
 * 
 * @param string $data The binary dump being loaded, likely from {@link
 *   apc_bin_dump}.
 * @param int $flags Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5,
 *   or both.
 * @return bool
 * @since PECL apc >= 3.1.4
 **/
function apc_bin_load($data, $flags){}

/**
 * Loads a binary dump from a file into the APC file/user cache.
 * 
 * @param string $filename The file name containing the dump, likely
 *   from {@link apc_bin_dumpfile}.
 * @param resource $context The files context.
 * @param int $flags Either APC_BIN_VERIFY_CRC32, APC_BIN_VERIFY_MD5,
 *   or both.
 * @return bool
 * @since PECL apc >= 3.1.4
 **/
function apc_bin_loadfile($filename, $context, $flags){}

/**
 * Retrieves cached information and meta-data from APC's data store.
 * 
 * @param string $cache_type If {@link cache_type} is "user",
 *   information about the user cache will be returned. If {@link
 *   cache_type} is "filehits", information about which files have been
 *   served from the bytecode cache for the current request will be
 *   returned. This feature must be enabled at compile time using
 *   --enable-filehits. If an invalid or no {@link cache_type} is
 *   specified, information about the system cache (cached files) will be
 *   returned.
 * @param bool $limited If {@link limited} is , the return value will
 *   exclude the individual list of cache entries. This is useful when
 *   trying to optimize calls for statistics gathering.
 * @return array
 * @since PECL apc >= 2.0.0
 **/
function apc_cache_info($cache_type, $limited){}

/**
 * apc_cas
 * 
 * @param string $key
 * @param int $old
 * @param int $new
 * @return int
 * @since PECL apc >= 3.1.1
 **/
function apc_cas($key, $old, $new){}

/**
 * Clears the user/system cache.
 * 
 * @param string $cache_type If {@link cache_type} is "user", the user
 *   cache will be cleared; otherwise, the system cache (cached files)
 *   will be cleared.
 * @return bool
 * @since PECL apc >= 2.0.0
 **/
function apc_clear_cache($cache_type){}

/**
 * Stores a file in the bytecode cache, bypassing all filters.
 * 
 * @param string $filename Full or relative path to a PHP file that
 *   will be compiled and stored in the bytecode cache.
 * @return bool
 * @since PECL apc >= 3.0.13
 **/
function apc_compile_file($filename){}

/**
 * Decreases a stored integer value.
 * 
 * @param string $key The key of the value being decreased.
 * @param int $step The step, or value to decrease.
 * @param bool $success Optionally pass the success or fail boolean
 *   value to this referenced variable.
 * @return int
 * @since PECL apc >= 3.1.1
 **/
function apc_dec($key, $step, &$success){}

/**
 * {@link define} is notoriously slow. Since the main benefit of APC is
 * to increase the performance of scripts/applications, this mechanism is
 * provided to streamline the process of mass constant definition.
 * However, this function does not perform as well as anticipated.
 * 
 * For a better-performing solution, try the hidef extension from PECL.
 * 
 * @param string $key The {@link key} serves as the name of the
 *   constant set being stored. This {@link key} is used to retrieve the
 *   stored constants in {@link apc_load_constants}.
 * @param array $constants An associative array of constant_name =>
 *   value pairs. The constant_name must follow the normal constant
 *   naming rules. value must evaluate to a scalar value.
 * @param bool $case_sensitive The default behaviour for constants is
 *   to be declared case-sensitive; i.e. CONSTANT and Constant represent
 *   different values. If this parameter evaluates to the constants will
 *   be declared as case-insensitive symbols.
 * @return bool
 * @since PECL apc >= 3.0.0
 **/
function apc_define_constants($key, $constants, $case_sensitive){}

/**
 * Removes a stored variable from the cache.
 * 
 * @param string $key The {@link key} used to store the value (with
 *   {@link apc_store}).
 * @return bool
 * @since PECL apc >= 3.0.0
 **/
function apc_delete($key){}

/**
 * Deletes the given files from the opcode cache.
 * 
 * @param mixed $keys The files to be deleted. Accepts a string, array
 *   of strings, or an APCIterator object.
 * @return mixed
 * @since PECL apc >= 3.1.1
 **/
function apc_delete_file($keys){}

/**
 * Checks if one ore more APC keys exist.
 * 
 * @param mixed $keys A string, or an array of strings, that contain
 *   keys.
 * @return mixed
 * @since PECL apc >= 3.1.4
 **/
function apc_exists($keys){}

/**
 * Fetchs a stored variable from the cache.
 * 
 * @param mixed $key The {@link key} used to store the value (with
 *   {@link apc_store}). If an array is passed then each element is
 *   fetched and returned.
 * @param bool $success Set to in success and in failure.
 * @return mixed
 * @since PECL apc >= 3.0.0
 **/
function apc_fetch($key, &$success){}

/**
 * Increases a stored number.
 * 
 * @param string $key The key of the value being increased.
 * @param int $step The step, or value to increase.
 * @param bool $success Optionally pass the success or fail boolean
 *   value to this referenced variable.
 * @return int
 * @since PECL apc >= 3.1.1
 **/
function apc_inc($key, $step, &$success){}

/**
 * Loads a set of constants from the cache.
 * 
 * @param string $key The name of the constant set (that was stored
 *   with {@link apc_define_constants}) to be retrieved.
 * @param bool $case_sensitive The default behaviour for constants is
 *   to be declared case-sensitive; i.e. CONSTANT and Constant represent
 *   different values. If this parameter evaluates to the constants will
 *   be declared as case-insensitive symbols.
 * @return bool
 * @since PECL apc >= 3.0.0
 **/
function apc_load_constants($key, $case_sensitive){}

/**
 * Retrieves APC's Shared Memory Allocation information.
 * 
 * @param bool $limited When set to (default) {@link apc_sma_info} will
 *   return a detailed information about each segment.
 * @return array
 * @since PECL apc >= 2.0.0
 **/
function apc_sma_info($limited){}

/**
 * Cache a variable in the data store.
 * 
 * @param string $key Store the variable using this name. {@link key}s
 *   are cache-unique, so storing a second value with the same {@link
 *   key} will overwrite the original value.
 * @param mixed $var The variable to store
 * @param int $ttl Time To Live; store {@link var} in the cache for
 *   {@link ttl} seconds. After the {@link ttl} has passed, the stored
 *   variable will be expunged from the cache (on the next request). If
 *   no {@link ttl} is supplied (or if the {@link ttl} is 0), the value
 *   will persist until it is removed from the cache manually, or
 *   otherwise fails to exist in the cache (clear, restart, etc.).
 * @return bool
 * @since PECL apc >= 3.0.0
 **/
function apc_store($key, $var, $ttl){}

/**
 * This can be used to stop the running of your script, and await
 * responses on the connected socket. To step the program, just send
 * enter (a blank line), or enter a php command to be executed.
 * 
 * @param int $debug_level
 * @return bool
 * @since PECL apd >= 0.2
 **/
function apd_breakpoint($debug_level){}

/**
 * Returns the current call stack as an array
 * 
 * @return array
 * @since PECL apd 0.2-0.4
 **/
function apd_callstack(){}

/**
 * Behaves like perl's Carp::cluck. Throw a warning and a callstack.
 * 
 * @param string $warning The warning to throw.
 * @param string $delimiter The delimiter. Default to <BR />.
 * @return void
 * @since PECL apd 0.2-0.4
 **/
function apd_clunk($warning, $delimiter){}

/**
 * Usually sent via the socket to restart the interpreter.
 * 
 * @param int $debug_level
 * @return bool
 * @since PECL apd >= 0.2
 **/
function apd_continue($debug_level){}

/**
 * Behaves like perl's Carp::croak. Throw an error, a callstack and then
 * exit.
 * 
 * @param string $warning The warning to throw.
 * @param string $delimiter The delimiter. Default to <BR />.
 * @return void
 * @since PECL apd 0.2-0.4
 **/
function apd_croak($warning, $delimiter){}

/**
 * Outputs the current function table.
 * 
 * @return void
 * @since Unknown
 **/
function apd_dump_function_table(){}

/**
 * Return all persistent resources as an array.
 * 
 * @return array
 * @since PECL apd 0.2-0.4
 **/
function apd_dump_persistent_resources(){}

/**
 * Return all current regular resources as an array.
 * 
 * @return array
 * @since PECL apd 0.2-0.4
 **/
function apd_dump_regular_resources(){}

/**
 * Usually sent via the socket to request information about the running
 * script.
 * 
 * @param string $output The debugged variable.
 * @return bool
 * @since PECL apd >= 0.2
 **/
function apd_echo($output){}

/**
 * Returns the names of all the variables defined in the active scope,
 * (not their values).
 * 
 * @return array
 * @since PECL apd 0.2
 **/
function apd_get_active_symbols(){}

/**
 * Starts debugging to pprof_{process_id} in the dump directory.
 * 
 * @param string $dump_directory The directory in which the profile
 *   dump file is written. If not set, the apd.dumpdir setting from the
 *   file is used.
 * @param string $fragment
 * @return string
 * @since PECL apd >= 0.2
 **/
function apd_set_pprof_trace($dump_directory, $fragment){}

/**
 * This can be used to increase or decrease debugging in a different area
 * of your application.
 * 
 * @param int $debug_level
 * @return void
 * @since PECL apd 0.2-0.4
 **/
function apd_set_session($debug_level){}

/**
 * Starts debugging to apd_dump_{process_id} in the dump directory.
 * 
 * @param int $debug_level The directory in which the profile dump file
 *   is written. If not set, the apd.dumpdir setting from the file is
 *   used.
 * @param string $dump_directory
 * @return void
 * @since PECL apd 0.2-0.4
 **/
function apd_set_session_trace($debug_level, $dump_directory){}

/**
 * Connects to the specified {@link tcp_server} (eg. tcplisten) and sends
 * debugging data to the socket.
 * 
 * @param string $tcp_server IP or Unix Domain socket (like a file) of
 *   the TCP server.
 * @param int $socket_type Can be AF_UNIX for file based sockets or
 *   APD_AF_INET for standard tcp/ip.
 * @param int $port You can use any port, but higher numbers are better
 *   as most of the lower numbers may be used by other system services.
 * @param int $debug_level
 * @return bool
 * @since PECL apd >= 0.2
 **/
function apd_set_session_trace_socket($tcp_server, $socket_type, $port, $debug_level){}

/**
 * Returns an array with all keys from {@link input} lowercased or
 * uppercased. Numbered indices are left as is.
 * 
 * @param array $input The array to work on
 * @param int $case Either CASE_UPPER or CASE_LOWER (default)
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function array_change_key_case($input, $case){}

/**
 * Chunks an array into {@link size} large chunks. The last chunk may
 * contain less than {@link size} elements.
 * 
 * @param array $input The array to work on
 * @param int $size The size of each chunk
 * @param bool $preserve_keys When set to keys will be preserved.
 *   Default is which will reindex the chunk numerically
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function array_chunk($input, $size, $preserve_keys){}

/**
 * Creates an array by using the values from the {@link keys} array as
 * keys and the values from the {@link values} array as the corresponding
 * values.
 * 
 * @param array $keys Array of keys to be used. Illegal values for key
 *   will be converted to string.
 * @param array $values Array of values to be used
 * @return array
 * @since PHP 5
 **/
function array_combine($keys, $values){}

/**
 * {@link array_count_values} returns an array using the values of the
 * {@link input} array as keys and their frequency in {@link input} as
 * values.
 * 
 * @param array $input The array of values to count
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_count_values($input){}

/**
 * Compares {@link array1} against {@link array2} and returns the
 * difference.
 * 
 * @param array $array1 The array to compare from
 * @param array $array2 An array to compare against
 * @return array
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function array_diff($array1, $array2){}

/**
 * Compares {@link array1} against {@link array2} and returns the
 * difference. Unlike {@link array_diff} the array keys are used in the
 * comparison.
 * 
 * @param array $array1 The array to compare from
 * @param array $array2 An array to compare against
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function array_diff_assoc($array1, $array2){}

/**
 * Compares the keys from {@link array1} against the keys from {@link
 * array2} and returns the difference. This function is like {@link
 * array_diff} except the comparison is done on the keys instead of the
 * values.
 * 
 * @param array $array1 The array to compare from
 * @param array $array2 An array to compare against
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function array_diff_key($array1, $array2){}

/**
 * Compares {@link array1} against {@link array2} and returns the
 * difference. Unlike {@link array_diff} the array keys are used in the
 * comparison.
 * 
 * Unlike {@link array_diff_assoc} an user supplied callback function is
 * used for the indices comparison, not internal function.
 * 
 * @param array $array1 The array to compare from
 * @param array $array2 An array to compare against
 * @param callback $key_compare_func More arrays to compare against
 * @return array
 * @since PHP 5
 **/
function array_diff_uassoc($array1, $array2, $key_compare_func){}

/**
 * Compares the keys from {@link array1} against the keys from {@link
 * array2} and returns the difference. This function is like {@link
 * array_diff} except the comparison is done on the keys instead of the
 * values.
 * 
 * Unlike {@link array_diff_key} an user supplied callback function is
 * used for the indices comparison, not internal function.
 * 
 * @param array $array1 The array to compare from
 * @param array $array2 An array to compare against
 * @param callback $key_compare_func More arrays to compare against
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function array_diff_ukey($array1, $array2, $key_compare_func){}

/**
 * Fills an array with {@link num} entries of the value of the {@link
 * value} parameter, keys starting at the {@link start_index} parameter.
 * 
 * @param int $start_index The first index of the returned array.
 *   Supports non-negative indexes only.
 * @param int $num Number of elements to insert
 * @param mixed $value Value to use for filling
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function array_fill($start_index, $num, $value){}

/**
 * Fills an array with the value of the {@link value} parameter, using
 * the values of the {@link keys} array as keys.
 * 
 * @param array $keys Array of values that will be used as keys.
 *   Illegal values for key will be converted to string.
 * @param mixed $value Value to use for filling
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function array_fill_keys($keys, $value){}

/**
 * Iterates over each value in the {@link input} array passing them to
 * the {@link callback} function. If the callback function returns true,
 * the current value from {@link input} is returned into the result
 * array. Array keys are preserved.
 * 
 * @param array $input The array to iterate over
 * @param callback $callback The callback function to use If no {@link
 *   callback} is supplied, all entries of {@link input} equal to (see
 *   converting to boolean) will be removed.
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function array_filter($input, $callback){}

/**
 * {@link array_flip} returns an array in flip order, i.e. keys from
 * {@link trans} become values and values from {@link trans} become keys.
 * 
 * Note that the values of {@link trans} need to be valid keys, i.e. they
 * need to be either integer or string. A warning will be emitted if a
 * value has the wrong type, and the key/value pair in question will not
 * be flipped.
 * 
 * If a value has several occurrences, the latest key will be used as its
 * values, and all others will be lost.
 * 
 * @param array $trans An array of key/value pairs to be flipped.
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_flip($trans){}

/**
 * {@link array_intersect} returns an array containing all the values of
 * {@link array1} that are present in all the arguments. Note that keys
 * are preserved.
 * 
 * @param array $array1 The array with master values to check.
 * @param array $array2 An array to compare values against.
 * @return array
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function array_intersect($array1, $array2){}

/**
 * @param array $array1 The array with master values to check.
 * @param array $array2 An array to compare values against.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function array_intersect_assoc($array1, $array2){}

/**
 * {@link array_intersect_key} returns an array containing all the
 * entries of {@link array1} which have keys that are present in all the
 * arguments.
 * 
 * @param array $array1 The array with master keys to check.
 * @param array $array2 An array to compare keys against.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function array_intersect_key($array1, $array2){}

/**
 * {@link array_intersect_uassoc} returns an array containing all the
 * values of {@link array1} that are present in all the arguments. Note
 * that the keys are used in the comparison unlike in {@link
 * array_intersect}.
 * 
 * The index comparison is done by a user supplied callback function. It
 * must return an integer less than, equal to, or greater than zero if
 * the first argument is considered to be respectively less than, equal
 * to, or greater than the second.
 * 
 * @param array $array1 Initial array for comparison of the arrays.
 * @param array $array2 First array to compare keys against.
 * @param callback $key_compare_func Variable list of array arguments
 *   to compare values against.
 * @return array
 * @since PHP 5
 **/
function array_intersect_uassoc($array1, $array2, $key_compare_func){}

/**
 * {@link array_intersect_ukey} returns an array containing all the
 * values of {@link array1} which have matching keys that are present in
 * all the arguments.
 * 
 * This comparison is done by a user supplied callback function. It must
 * return an integer less than, equal to, or greater than zero if the
 * first key is considered to be respectively less than, equal to, or
 * greater than the second.
 * 
 * @param array $array1 Initial array for comparison of the arrays.
 * @param array $array2 First array to compare keys against.
 * @param callback $key_compare_func Variable list of array arguments
 *   to compare keys against.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function array_intersect_ukey($array1, $array2, $key_compare_func){}

/**
 * {@link array_keys} returns the keys, numeric and string, from the
 * {@link input} array.
 * 
 * If the optional {@link search_value} is specified, then only the keys
 * for that value are returned. Otherwise, all the keys from the {@link
 * input} are returned.
 * 
 * @param array $input An array containing keys to return.
 * @param mixed $search_value If specified, then only keys containing
 *   these values are returned.
 * @param bool $strict Determines if strict comparison (===) should be
 *   used during the search.
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_keys($input, $search_value, $strict){}

/**
 * {@link array_key_exists} returns if the given {@link key} is set in
 * the array. {@link key} can be any value possible for an array index.
 * 
 * @param mixed $key Value to check.
 * @param array $search An array with keys to check.
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function array_key_exists($key, $search){}

/**
 * {@link array_map} returns an array containing all the elements of
 * {@link arr1} after applying the {@link callback} function to each one.
 * The number of parameters that the {@link callback} function accepts
 * should match the number of arrays passed to the {@link array_map}
 * 
 * @param callback $callback Callback function to run for each element
 *   in each array.
 * @param array $arr1 An array to run through the {@link callback}
 *   function.
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function array_map($callback, $arr1){}

/**
 * Merges the elements of one or more arrays together so that the values
 * of one are appended to the end of the previous one. It returns the
 * resulting array.
 * 
 * If the input arrays have the same string keys, then the later value
 * for that key will overwrite the previous one. If, however, the arrays
 * contain numeric keys, the later value will not overwrite the original
 * value, but will be appended.
 * 
 * If all of the arrays contain only numeric keys, the resulting array is
 * given incrementing keys starting from zero.
 * 
 * @param array $array1 Initial array to merge.
 * @param array $array2 Variable list of arrays to recursively merge.
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_merge($array1, $array2){}

/**
 * {@link array_merge_recursive} merges the elements of one or more
 * arrays together so that the values of one are appended to the end of
 * the previous one. It returns the resulting array.
 * 
 * If the input arrays have the same string keys, then the values for
 * these keys are merged together into an array, and this is done
 * recursively, so that if one of the values is an array itself, the
 * function will merge it with a corresponding entry in another array
 * too. If, however, the arrays have the same numeric key, the later
 * value will not overwrite the original value, but will be appended.
 * 
 * @param array $array1 Initial array to merge.
 * @return array
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function array_merge_recursive($array1){}

/**
 * {@link array_multisort} can be used to sort several arrays at once, or
 * a multi-dimensional array by one or more dimensions.
 * 
 * Associative (string) keys will be maintained, but numeric keys will be
 * re-indexed.
 * 
 * @param array $arr An array being sorted.
 * @param mixed $arg Optionally another array, or sort options for the
 *   previous array argument: SORT_ASC, SORT_DESC, SORT_REGULAR,
 *   SORT_NUMERIC, SORT_STRING.
 * @param mixed $arg Additional {@link arg}'s.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function array_multisort(&$arr, $arg, $arg){}

/**
 * {@link array_pad} returns a copy of the {@link input} padded to size
 * specified by {@link pad_size} with value {@link pad_value}. If {@link
 * pad_size} is positive then the array is padded on the right, if it's
 * negative then on the left. If the absolute value of {@link pad_size}
 * is less than or equal to the length of the {@link input} then no
 * padding takes place. It is possible to add most 1048576 elements at a
 * time.
 * 
 * @param array $input Initial array of values to pad.
 * @param int $pad_size New size of the array.
 * @param mixed $pad_value Value to pad if {@link input} is less than
 *   {@link pad_size}.
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_pad($input, $pad_size, $pad_value){}

/**
 * {@link array_pop} pops and returns the last value of the {@link
 * array}, shortening the {@link array} by one element. If {@link array}
 * is empty (or is not an array), will be returned. Will additionally
 * produce a Warning when called on a non-array.
 * 
 * @param array $array The array to get the value from.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function array_pop(&$array){}

/**
 * {@link array_product} returns the product of values in an array.
 * 
 * @param array $array The array.
 * @return number
 * @since PHP 5 >= 5.1.0
 **/
function array_product($array){}

/**
 * {@link array_push} treats {@link array} as a stack, and pushes the
 * passed variables onto the end of {@link array}. The length of {@link
 * array} increases by the number of variables pushed. Has the same
 * effect as:
 * 
 * <?php $array[] = $var; ?>
 * 
 * repeated for each {@link var}.
 * 
 * @param array $array The input array.
 * @param mixed $var The pushed value.
 * @return int
 * @since PHP 4, PHP 5
 **/
function array_push(&$array, $var){}

/**
 * {@link array_rand} is rather useful when you want to pick one or more
 * random entries out of an array.
 * 
 * @param array $input The input array.
 * @param int $num_req Specifies how many entries you want to pick.
 *   Trying to pick more elements than there are in the array will result
 *   in an E_WARNING level error.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function array_rand($input, $num_req){}

/**
 * {@link array_reduce} applies iteratively the {@link function} function
 * to the elements of the array {@link input}, so as to reduce the array
 * to a single value.
 * 
 * @param array $input The input array.
 * @param callback $function The callback function.
 * @param mixed $initial If the optional {@link initial} is available,
 *   it will be used at the beginning of the process, or as a final
 *   result in case the array is empty.
 * @return mixed
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function array_reduce($input, $function, $initial){}

/**
 * {@link array_replace} replaces the values of the first {@link array}
 * with the same values from all the following arrays. If a key from the
 * first array exists in the second array, its value will be replaced by
 * the value from the second array. If the key exists in the second
 * array, and not the first, it will be created in the first array. If a
 * key only exists in the first array, it will be left as is. If several
 * arrays are passed for replacement, they will be processed in order,
 * the later arrays overwriting the previous values.
 * 
 * {@link array_replace} is not recursive : it will replace values in the
 * first array by whatever type is in the second array.
 * 
 * @param array $array The array in which elements are replaced.
 * @param array $array1 The array from which elements will be
 *   extracted.
 * @param array $array2
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function array_replace(&$array, &$array1, &$array2){}

/**
 * {@link array_replace_recursive} replaces the values of the first
 * {@link array} with the same values from all the following arrays. If a
 * key from the first array exists in the second array, its value will be
 * replaced by the value from the second array. If the key exists in the
 * second array, and not the first, it will be created in the first
 * array. If a key only exists in the first array, it will be left as is.
 * If several arrays are passed for replacement, they will be processed
 * in order, the later array overwriting the previous values.
 * 
 * {@link array_replace_recursive} is recursive : it will recurse into
 * arrays and apply the same process to the inner value.
 * 
 * When the value in {@link array} is scalar, it will be replaced by the
 * value in {@link array1}, may it be scalar or array. When the value in
 * {@link array} and {@link array1} are both arrays, {@link
 * array_replace_recursive} will replace their respective value
 * recursively.
 * 
 * @param array $array The array in which elements are replaced.
 * @param array $array1 The array from which elements will be
 *   extracted.
 * @param array $array2
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function array_replace_recursive(&$array, &$array1, &$array2){}

/**
 * Takes an input {@link array} and returns a new array with the order of
 * the elements reversed.
 * 
 * @param array $array The input array.
 * @param bool $preserve_keys If set to keys are preserved.
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_reverse($array, $preserve_keys){}

/**
 * Searches {@link haystack} for {@link needle}.
 * 
 * @param mixed $needle The searched value.
 * @param array $haystack The array.
 * @param bool $strict If the third parameter {@link strict} is set to
 *   then the {@link array_search} function will search for identical
 *   elements in the {@link haystack}. This means it will also check the
 *   types of the {@link needle} in the {@link haystack}, and objects
 *   must be the same instance.
 * @return mixed
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function array_search($needle, $haystack, $strict){}

/**
 * {@link array_shift} shifts the first value of the {@link array} off
 * and returns it, shortening the {@link array} by one element and moving
 * everything down. All numerical array keys will be modified to start
 * counting from zero while literal keys won't be touched.
 * 
 * @param array $array The input array.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function array_shift(&$array){}

/**
 * {@link array_slice} returns the sequence of elements from the array
 * {@link array} as specified by the {@link offset} and {@link length}
 * parameters.
 * 
 * @param array $array The input array.
 * @param int $offset If {@link offset} is non-negative, the sequence
 *   will start at that offset in the {@link array}. If {@link offset} is
 *   negative, the sequence will start that far from the end of the
 *   {@link array}.
 * @param int $length If {@link length} is given and is positive, then
 *   the sequence will have that many elements in it. If {@link length}
 *   is given and is negative then the sequence will stop that many
 *   elements from the end of the array. If it is omitted, then the
 *   sequence will have everything from {@link offset} up until the end
 *   of the {@link array}.
 * @param bool $preserve_keys Note that {@link array_slice} will
 *   reorder and reset the array indices by default. You can change this
 *   behaviour by setting {@link preserve_keys} to .
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_slice($array, $offset, $length, $preserve_keys){}

/**
 * Removes the elements designated by {@link offset} and {@link length}
 * from the {@link input} array, and replaces them with the elements of
 * the {@link replacement} array, if supplied.
 * 
 * Note that numeric keys in {@link input} are not preserved.
 * 
 * @param array $input The input array.
 * @param int $offset If {@link offset} is positive then the start of
 *   removed portion is at that offset from the beginning of the {@link
 *   input} array. If {@link offset} is negative then it starts that far
 *   from the end of the {@link input} array.
 * @param int $length If {@link length} is omitted, removes everything
 *   from {@link offset} to the end of the array. If {@link length} is
 *   specified and is positive, then that many elements will be removed.
 *   If {@link length} is specified and is negative then the end of the
 *   removed portion will be that many elements from the end of the
 *   array. Tip: to remove everything from {@link offset} to the end of
 *   the array when {@link replacement} is also specified, use
 *   count($input) for {@link length}.
 * @param mixed $replacement If {@link replacement} array is specified,
 *   then the removed elements are replaced with elements from this
 *   array. If {@link offset} and {@link length} are such that nothing is
 *   removed, then the elements from the {@link replacement} array are
 *   inserted in the place specified by the {@link offset}. Note that
 *   keys in replacement array are not preserved. If {@link replacement}
 *   is just one element it is not necessary to put array() around it,
 *   unless the element is an array itself, an object or .
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_splice(&$input, $offset, $length, $replacement){}

/**
 * {@link array_sum} returns the sum of values in an array.
 * 
 * @param array $array The input array.
 * @return number
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function array_sum($array){}

/**
 * Computes the difference of arrays by using a callback function for
 * data comparison. This is unlike {@link array_diff} which uses an
 * internal function for comparing the data.
 * 
 * @param array $array1 The first array.
 * @param array $array2 The second array.
 * @param callback $data_compare_func The callback comparison function.
 *   The user supplied callback function is used for comparison. It must
 *   return an integer less than, equal to, or greater than zero if the
 *   first argument is considered to be respectively less than, equal to,
 *   or greater than the second.
 * @return array
 * @since PHP 5
 **/
function array_udiff($array1, $array2, $data_compare_func){}

/**
 * Computes the difference of arrays with additional index check,
 * compares data by a callback function.
 * 
 * @param array $array1 The first array.
 * @param array $array2 The second array.
 * @param callback $data_compare_func The callback comparison function.
 *   The user supplied callback function is used for comparison. It must
 *   return an integer less than, equal to, or greater than zero if the
 *   first argument is considered to be respectively less than, equal to,
 *   or greater than the second.
 * @return array
 * @since PHP 5
 **/
function array_udiff_assoc($array1, $array2, $data_compare_func){}

/**
 * Computes the difference of arrays with additional index check,
 * compares data and indexes by a callback function.
 * 
 * Note that the keys are used in the comparison unlike {@link
 * array_diff} and {@link array_udiff}.
 * 
 * @param array $array1 The first array.
 * @param array $array2 The second array.
 * @param callback $data_compare_func The callback comparison function.
 *   The user supplied callback function is used for comparison. It must
 *   return an integer less than, equal to, or greater than zero if the
 *   first argument is considered to be respectively less than, equal to,
 *   or greater than the second. The comparison of arrays' data is
 *   performed by using an user-supplied callback : {@link
 *   data_compare_func}. In this aspect the behaviour is opposite to the
 *   behaviour of {@link array_diff_assoc} which uses internal function
 *   for comparison.
 * @param callback $key_compare_func The comparison of keys (indices)
 *   is done also by the callback function {@link key_compare_func}. This
 *   behaviour is unlike what {@link array_udiff_assoc} does, since the
 *   latter compares the indices by using an internal function.
 * @return array
 * @since PHP 5
 **/
function array_udiff_uassoc($array1, $array2, $data_compare_func, $key_compare_func){}

/**
 * Computes the intersection of arrays, compares data by a callback
 * function.
 * 
 * @param array $array1 The first array.
 * @param array $array2 The second array.
 * @param callback $data_compare_func The callback comparison function.
 *   The user supplied callback function is used for comparison. It must
 *   return an integer less than, equal to, or greater than zero if the
 *   first argument is considered to be respectively less than, equal to,
 *   or greater than the second.
 * @return array
 * @since PHP 5
 **/
function array_uintersect($array1, $array2, $data_compare_func){}

/**
 * Computes the intersection of arrays with additional index check,
 * compares data by a callback function.
 * 
 * Note that the keys are used in the comparison unlike in {@link
 * array_uintersect}. The data is compared by using a callback function.
 * 
 * @param array $array1 The first array.
 * @param array $array2 The second array.
 * @param callback $data_compare_func For comparison is used the user
 *   supplied callback function. It must return an integer less than,
 *   equal to, or greater than zero if the first argument is considered
 *   to be respectively less than, equal to, or greater than the second.
 * @return array
 * @since PHP 5
 **/
function array_uintersect_assoc($array1, $array2, $data_compare_func){}

/**
 * Computes the intersection of arrays with additional index check,
 * compares data and indexes by a callback functions Note that the keys
 * are used in the comparison unlike in {@link array_uintersect}. Both
 * the data and the indexes are compared by using separate callback
 * functions.
 * 
 * @param array $array1 The first array.
 * @param array $array2 The second array.
 * @param callback $data_compare_func For comparison is used the user
 *   supplied callback function. It must return an integer less than,
 *   equal to, or greater than zero if the first argument is considered
 *   to be respectively less than, equal to, or greater than the second.
 * @param callback $key_compare_func Key comparison callback function.
 * @return array
 * @since PHP 5
 **/
function array_uintersect_uassoc($array1, $array2, $data_compare_func, $key_compare_func){}

/**
 * Takes an input {@link array} and returns a new array without duplicate
 * values.
 * 
 * Note that keys are preserved. {@link array_unique} sorts the values
 * treated as string at first, then will keep the first key encountered
 * for every value, and ignore all following keys. It does not mean that
 * the key of the first related value from the unsorted {@link array}
 * will be kept.
 * 
 * @param array $array The input array.
 * @param int $sort_flags The optional second parameter {@link
 *   sort_flags} may be used to modify the sorting behavior using these
 *   values: Sorting type flags: SORT_REGULAR - compare items normally
 *   (don't change types) SORT_NUMERIC - compare items numerically
 *   SORT_STRING - compare items as strings SORT_LOCALE_STRING - compare
 *   items as strings, based on the current locale. Added in PHP 4.4.0
 *   and 5.0.2.
 * @return array
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function array_unique($array, $sort_flags){}

/**
 * {@link array_unshift} prepends passed elements to the front of the
 * {@link array}. Note that the list of elements is prepended as a whole,
 * so that the prepended elements stay in the same order. All numerical
 * array keys will be modified to start counting from zero while literal
 * keys won't be touched.
 * 
 * @param array $array The input array.
 * @param mixed $var The prepended variable.
 * @return int
 * @since PHP 4, PHP 5
 **/
function array_unshift(&$array, $var){}

/**
 * {@link array_values} returns all the values from the {@link input}
 * array and indexes numerically the array.
 * 
 * @param array $input The array.
 * @return array
 * @since PHP 4, PHP 5
 **/
function array_values($input){}

/**
 * {@link array_walk} is not affected by the internal array pointer of
 * {@link array}. {@link array_walk} will walk through the entire array
 * regardless of pointer position.
 * 
 * @param array $array The input array.
 * @param callback $funcname Typically, {@link funcname} takes on two
 *   parameters. The {@link array} parameter's value being the first, and
 *   the key/index second. Users may not change the {@link array} itself
 *   from the callback function. e.g. Add/delete elements, unset
 *   elements, etc. If the array that {@link array_walk} is applied to is
 *   changed, the behavior of this function is undefined, and
 *   unpredictable.
 * @param mixed $userdata If the optional {@link userdata} parameter is
 *   supplied, it will be passed as the third parameter to the callback
 *   {@link funcname}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function array_walk(&$array, $funcname, $userdata){}

/**
 * Applies the user-defined function {@link funcname} to each element of
 * the {@link input} array. This function will recur into deeper arrays.
 * 
 * @param array $input The input array.
 * @param callback $funcname Typically, {@link funcname} takes on two
 *   parameters. The {@link input} parameter's value being the first, and
 *   the key/index second.
 * @param mixed $userdata If the optional {@link userdata} parameter is
 *   supplied, it will be passed as the third parameter to the callback
 *   {@link funcname}.
 * @return bool
 * @since PHP 5
 **/
function array_walk_recursive(&$input, $funcname, $userdata){}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with.
 * 
 * This is used mainly when sorting associative arrays where the actual
 * element order is significant.
 * 
 * @param array $array The input array.
 * @param int $sort_flags You may modify the behavior of the sort using
 *   the optional parameter {@link sort_flags}, for details see {@link
 *   sort}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function arsort(&$array, $sort_flags){}

/**
 * Returns the arc sine of {@link arg} in radians. {@link asin} is the
 * complementary function of {@link sin}, which means that
 * a==sin(asin(a)) for every value of a that is within {@link asin}'s
 * range.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4, PHP 5
 **/
function asin($arg){}

/**
 * Returns the inverse hyperbolic sine of {@link arg}, i.e. the value
 * whose hyperbolic sine is {@link arg}.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function asinh($arg){}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with. This is
 * used mainly when sorting associative arrays where the actual element
 * order is significant.
 * 
 * @param array $array The input array.
 * @param int $sort_flags You may modify the behavior of the sort using
 *   the optional parameter {@link sort_flags}, for details see {@link
 *   sort}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function asort(&$array, $sort_flags){}

/**
 * {@link assert} will check the given {@link assertion} and take
 * appropriate action if its result is .
 * 
 * If the {@link assertion} is given as a string it will be evaluated as
 * PHP code by {@link assert}. The advantages of a string {@link
 * assertion} are less overhead when assertion checking is off and
 * messages containing the {@link assertion} expression when an assertion
 * fails. This means that if you pass a boolean condition as {@link
 * assertion} this condition will not show up as parameter to the
 * assertion function which you may have defined with the {@link
 * assert_options} function, the condition is converted to a string
 * before calling that handler function, and the boolean is converted as
 * the empty string.
 * 
 * Assertions should be used as a debugging feature only. You may use
 * them for sanity-checks that test for conditions that should always be
 * and that indicate some programming errors if not or to check for the
 * presence of certain features like extension functions or certain
 * system limits and features.
 * 
 * Assertions should not be used for normal runtime operations like input
 * parameter checks. As a rule of thumb your code should always be able
 * to work correctly if assertion checking is not activated.
 * 
 * The behavior of {@link assert} may be configured by {@link
 * assert_options} or by .ini-settings described in that functions manual
 * page.
 * 
 * The {@link assert_options} function and/or ASSERT_CALLBACK
 * configuration directive allow a callback function to be set to handle
 * failed assertions.
 * 
 * {@link assert} callbacks are particularly useful for building
 * automated test suites because they allow you to easily capture the
 * code passed to the assertion, along with information on where the
 * assertion was made. While this information can be captured via other
 * methods, using assertions makes it much faster and easier!
 * 
 * The callback function should accept three arguments. The first
 * argument will contain the file the assertion failed in. The second
 * argument will contain the line the assertion failed on and the third
 * argument will contain the expression that failed (if any - literal
 * values such as 1 or "two" will not be passed via this argument)
 * 
 * @param mixed $assertion The assertion.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function assert($assertion){}

/**
 * Set the various {@link assert} control options or just query their
 * current settings.
 * 
 * @param int $what Assert Options Option INI Setting Default value
 *   Description ASSERT_ACTIVE assert.active 1 enable {@link assert}
 *   evaluation ASSERT_WARNING assert.warning 1 issue a PHP warning for
 *   each failed assertion ASSERT_BAIL assert.bail 0 terminate execution
 *   on failed assertions ASSERT_QUIET_EVAL assert.quiet_eval 0 disable
 *   error_reporting during assertion expression evaluation
 *   ASSERT_CALLBACK assert.callback () Callback to call on failed
 *   assertions
 * @param mixed $value An optional new value for the option.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function assert_options($what, $value){}

/**
 * Returns the arc tangent of {@link arg} in radians. {@link atan} is the
 * complementary function of {@link tan}, which means that
 * a==tan(atan(a)) for every value of a that is within {@link atan}'s
 * range.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4, PHP 5
 **/
function atan($arg){}

/**
 * @param float $y Dividend parameter
 * @param float $x Divisor parameter
 * @return float
 * @since PHP 4, PHP 5
 **/
function atan2($y, $x){}

/**
 * Returns the inverse hyperbolic tangent of {@link arg}, i.e. the value
 * whose hyperbolic tangent is {@link arg}.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function atanh($arg){}

/**
 * Decodes a base64 encoded {@link data}.
 * 
 * @param string $data The encoded data.
 * @param bool $strict Returns if input contains character from outside
 *   the base64 alphabet.
 * @return string
 * @since PHP 4, PHP 5
 **/
function base64_decode($data, $strict){}

/**
 * Encodes the given {@link data} with base64.
 * 
 * This encoding is designed to make binary data survive transport
 * through transport layers that are not 8-bit clean, such as mail
 * bodies.
 * 
 * Base64-encoded data takes about 33% more space than the original data.
 * 
 * @param string $data The data to encode.
 * @return string
 * @since PHP 4, PHP 5
 **/
function base64_encode($data){}

/**
 * Given a string containing a path to a file, this function will return
 * the base name of the file.
 * 
 * @param string $path A path. On Windows, both slash (/) and backslash
 *   (\) are used as directory separator character. In other
 *   environments, it is the forward slash (/).
 * @param string $suffix If the filename ends in {@link suffix} this
 *   will also be cut off.
 * @return string
 * @since PHP 4, PHP 5
 **/
function basename($path, $suffix){}

/**
 * Returns a string containing {@link number} represented in base {@link
 * tobase}. The base in which {@link number} is given is specified in
 * {@link frombase}. Both {@link frombase} and {@link tobase} have to be
 * between 2 and 36, inclusive. Digits in numbers with a base higher than
 * 10 will be represented with the letters a-z, with a meaning 10, b
 * meaning 11 and z meaning 35.
 * 
 * @param string $number The number to convert
 * @param int $frombase The base {@link number} is in
 * @param int $tobase The base to convert {@link number} to
 * @return string
 * @since PHP 4, PHP 5
 **/
function base_convert($number, $frombase, $tobase){}

/**
 * Adds a tag to an existing BBCode_Container tag_set using tag_rules.
 * 
 * @param resource $bbcode_container BBCode_Container resource,
 *   returned by {@link bbcode_create}.
 * @param string $tag_name The new tag to add to the BBCode_Container
 *   tag_set.
 * @param array $tag_rules An associative array containing the parsing
 *   rules; see {@link bbcode_create} for the available keys.
 * @return bool
 * @since PECL bbcode >= 0.9.0
 **/
function bbcode_add_element($bbcode_container, $tag_name, $tag_rules){}

/**
 * Adds a smiley to the parser
 * 
 * @param resource $bbcode_container BBCode_Container resource,
 *   returned by {@link bbcode_create}.
 * @param string $smiley The string that will be replaced when found.
 * @param string $replace_by The string that replace smiley when found.
 * @return bool
 * @since PECL bbcode >= 0.10.2
 **/
function bbcode_add_smiley($bbcode_container, $smiley, $replace_by){}

/**
 * This function returns a new BBCode Resource used to parse BBCode
 * strings.
 * 
 * @param array $bbcode_initial_tags An associative array containing
 *   the tag names as keys and parameters required to correctly parse
 *   BBCode as their value. The following key/value pairs are supported:
 *   flags optional - a flag set based on the BBCODE_FLAGS_* constants.
 *   type required - an int indicating the type of tag. Use the
 *   BBCODE_TYPE_* constants. open_tag required - the HTML replacement
 *   string for the open tag. close_tag required - the HTML replacement
 *   string for the close tag. default_arg optional - use this value as
 *   the default argument if none is provided and tag_type is of type
 *   OPTARG. content_handling optional - Gives the callback used for
 *   modification of the content. Object Oriented Notation supported only
 *   since 0.10.1 callback prototype is string name(string $content,
 *   string $argument) param_handling optional - Gives the callback used
 *   for modification of the argument. Object Oriented Notation supported
 *   only since 0.10.1 callback prototype is string name(string $content,
 *   string $argument) childs optional - List of accepted children for
 *   the tag. The format of the list is a comma separated string. If the
 *   list starts with ! it will be the list of rejected children for the
 *   tag. parent optional - List of accepted parents for the tag. The
 *   format of the list is a comma separated string.
 * @return resource
 * @since PECL bbcode >= 0.9.0
 **/
function bbcode_create($bbcode_initial_tags){}

/**
 * This function closes the resource opened by {@link bbcode_create}.
 * 
 * @param resource $bbcode_container BBCode_Container resource returned
 *   by {@link bbcode_create}.
 * @return bool
 * @since PECL bbcode >= 0.9.0
 **/
function bbcode_destroy($bbcode_container){}

/**
 * This function parse the string to_parse following the rules in the
 * bbcode_container created by {@link bbcode_create}
 * 
 * @param resource $bbcode_container BBCode_Container resource returned
 *   by {@link bbcode_create}.
 * @param string $to_parse The string we need to parse.
 * @return string
 * @since PECL bbcode >= 0.9.0
 **/
function bbcode_parse($bbcode_container, $to_parse){}

/**
 * Attaches another parser to the bbcode_container. This parser is used
 * only when arguments must be parsed. If this function is not used, the
 * default argument parser is the parser itself.
 * 
 * @param resource $bbcode_container BBCode_Container resource,
 *   returned by {@link bbcode_create}.
 * @param resource $bbcode_arg_parser BBCode_Container resource,
 *   returned by {@link bbcode_create}. It will be used only for parsed
 *   arguments
 * @return bool
 * @since PECL bbcode >= 0.10.2
 **/
function bbcode_set_arg_parser($bbcode_container, $bbcode_arg_parser){}

/**
 * Set or alter parser options
 * 
 * @param resource $bbcode_container BBCode_Container resource,
 *   returned by {@link bbcode_create}.
 * @param int $flags The flag set that must be applied to the
 *   bbcode_container options
 * @param int $mode One of the BBCODE_SET_FLAGS_* constant to set,
 *   unset a specific flag set or to replace the flag set by flags.
 * @return bool
 * @since PECL bbcode >= 0.10.2
 **/
function bbcode_set_flags($bbcode_container, $flags, $mode){}

/**
 * Sums {@link left_operand} and {@link right_operand}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param int $scale
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcadd($left_operand, $right_operand, $scale){}

/**
 * Compares the {@link left_operand} to the {@link right_operand} and
 * returns the result as an integer.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param int $scale The optional {@link scale} parameter is used to
 *   set the number of digits after the decimal place which will be used
 *   in the comparison.
 * @return int
 * @since PHP 4, PHP 5
 **/
function bccomp($left_operand, $right_operand, $scale){}

/**
 * Divides the {@link left_operand} by the {@link right_operand}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param int $scale
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcdiv($left_operand, $right_operand, $scale){}

/**
 * Get the modulus of the {@link left_operand} using {@link modulus}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $modulus The modulus, as a string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcmod($left_operand, $modulus){}

/**
 * Multiply the {@link left_operand} by the {@link right_operand}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param int $scale
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcmul($left_operand, $right_operand, $scale){}

/**
 * Reads data from a bzcompressed file and creates classes from the
 * bytecodes.
 * 
 * @param string $filename The bzcompressed file path, as a string.
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_load($filename){}

/**
 * Reads data from a bcompiler exe file and creates classes from the
 * bytecodes.
 * 
 * @param string $filename The exe file path, as a string.
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_load_exe($filename){}

/**
 * Reads the bytecodes of a class and calls back to a user function.
 * 
 * @param string $class The class name, as a string.
 * @param string $callback
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_parse_class($class, $callback){}

/**
 * Reads data from a open file handle and creates classes from the
 * bytecodes.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_read($filehandle){}

/**
 * Reads the bytecodes from PHP for an existing class, and writes them to
 * the open file handle.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param string $className The class name, as a string.
 * @param string $extends
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_write_class($filehandle, $className, $extends){}

/**
 * Reads the bytecodes from PHP for an existing constant, and writes them
 * to the open file handle.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param string $constantName The name of the defined constant, as a
 *   string.
 * @return bool
 * @since PECL bcompiler >= 0.5
 **/
function bcompiler_write_constant($filehandle, $constantName){}

/**
 * An EXE (or self executable) file consists of 3 parts: The stub
 * (executable code, e.g. a compiled C program) that loads PHP
 * interpreter, bcompiler extension, stored Bytecodes and initiates a
 * call for the specified function (e.g. main) or class method (e.g.
 * main::main) The Bytecodes (uncompressed only for the moment) The
 * bcompiler EXE footer
 * 
 * To obtain a suitable stub you can compile php_embed-based stub phpe.c
 * located in the examples/embed directory on bcompiler's CVS.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param int $startpos The file position at which the Bytecodes start,
 *   and can be obtained using {@link ftell}.
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_write_exe_footer($filehandle, $startpos){}

/**
 * This function complies specified source file into bytecodes, and
 * writes them to the open file handle.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param string $filename The source file path, as a string.
 * @return bool
 * @since PECL bcompiler >= 0.6
 **/
function bcompiler_write_file($filehandle, $filename){}

/**
 * Writes the single character \x00 to indicate End of compiled data.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @return bool
 * @since PECL bcompiler >= 0.4
 **/
function bcompiler_write_footer($filehandle){}

/**
 * Reads the bytecodes from PHP for an existing function, and writes them
 * to the open file handle. Order is not important, (eg. if function b
 * uses function a, and you compile it like the example below, it will
 * work perfectly OK).
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param string $functionName The function name, as a string.
 * @return bool
 * @since PECL bcompiler >= 0.5
 **/
function bcompiler_write_function($filehandle, $functionName){}

/**
 * Searches for all functions declared in the given file, and writes
 * their correspondent bytecodes to the open file handle.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param string $fileName The file to be compiled. You must always
 *   include or require the file you intend to compile.
 * @return bool
 * @since PECL bcompiler >= 0.5
 **/
function bcompiler_write_functions_from_file($filehandle, $fileName){}

/**
 * Writes the header part of a bcompiler file.
 * 
 * @param resource $filehandle A file handle as returned by {@link
 *   fopen}.
 * @param string $write_ver Can be used to write bytecode in a
 *   previously used format, so that you can use it with older versions
 *   of bcompiler.
 * @return bool
 * @since PECL bcompiler >= 0.3
 **/
function bcompiler_write_header($filehandle, $write_ver){}

/**
 * @param resource $filehandle
 * @param string $filename
 * @return bool
 * @since PECL bcompiler >= 0.5
 **/
function bcompiler_write_included_filename($filehandle, $filename){}

/**
 * Raise {@link left_operand} to the power {@link right_operand}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param int $scale
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcpow($left_operand, $right_operand, $scale){}

/**
 * Use the fast-exponentiation method to raise {@link left_operand} to
 * the power {@link right_operand} with respect to the modulus {@link
 * modulus}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param string $modulus The modulus, as a string.
 * @param int $scale
 * @return string
 * @since PHP 5
 **/
function bcpowmod($left_operand, $right_operand, $modulus, $scale){}

/**
 * Sets the default scale parameter for all subsequent bc math functions
 * that do not explicitly specify a scale parameter.
 * 
 * @param int $scale The scale factor.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function bcscale($scale){}

/**
 * Return the square root of the {@link operand}.
 * 
 * @param string $operand The operand, as a string.
 * @param int $scale
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcsqrt($operand, $scale){}

/**
 * Subtracts the {@link right_operand} from the {@link left_operand}.
 * 
 * @param string $left_operand The left operand, as a string.
 * @param string $right_operand The right operand, as a string.
 * @param int $scale
 * @return string
 * @since PHP 4, PHP 5
 **/
function bcsub($left_operand, $right_operand, $scale){}

/**
 * Returns an ASCII string containing the hexadecimal representation of
 * {@link str}. The conversion is done byte-wise with the high-nibble
 * first.
 * 
 * @param string $str A character.
 * @return string
 * @since PHP 4, PHP 5
 **/
function bin2hex($str){}

/**
 * Returns the decimal equivalent of the binary number represented by the
 * {@link binary_string} argument.
 * 
 * {@link bindec} converts a binary number to an integer or, if needed
 * for size reasons, float.
 * 
 * {@link bindec} interprets all {@link binary_string} values as unsigned
 * integers. This is because {@link bindec} sees the most significant bit
 * as another order of magnitude rather than as the sign bit.
 * 
 * @param string $binary_string The binary string to convert
 * @return number
 * @since PHP 4, PHP 5
 **/
function bindec($binary_string){}

/**
 * The {@link bindtextdomain} function sets the path for a domain.
 * 
 * @param string $domain The domain
 * @param string $directory The directory path
 * @return string
 * @since PHP 4, PHP 5
 **/
function bindtextdomain($domain, $directory){}

/**
 * With {@link bind_textdomain_codeset}, you can set in which encoding
 * will be messages from {@link domain} returned by {@link gettext} and
 * similar functions.
 * 
 * @param string $domain The domain
 * @param string $codeset The code set
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function bind_textdomain_codeset($domain, $codeset){}

/**
 * This function is very beta and entirely useless for 99% of users. It
 * is only useful if you're doing something weird, such as writing your
 * own driver on top of the PHP driver.
 * 
 * @param string $bson The BSON to be deserialized.
 * @return array
 * @since PECL mongo >=1.0.1
 **/
function bson_decode($bson){}

/**
 * This function is very beta and entirely useless for 99% of users. It
 * is only useful if you're doing something weird, such as writing your
 * own driver on top of the PHP driver.
 * 
 * @param mixed $anything The variable to be serialized.
 * @return string
 * @since PECL mongo >=1.0.1
 **/
function bson_encode($anything){}

/**
 * Closes the given bzip2 file pointer.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzclose($bz){}

/**
 * {@link bzcompress} compresses the given string and returns it as bzip2
 * encoded data.
 * 
 * @param string $source The string to compress.
 * @param int $blocksize Specifies the blocksize used during
 *   compression and should be a number from 1 to 9 with 9 giving the
 *   best compression, but using more resources to do so.
 * @param int $workfactor Controls how the compression phase behaves
 *   when presented with worst case, highly repetitive, input data. The
 *   value can be between 0 and 250 with 0 being a special case.
 *   Regardless of the {@link workfactor}, the generated output is the
 *   same.
 * @return mixed
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzcompress($source, $blocksize, $workfactor){}

/**
 * {@link bzdecompress} decompresses the given string containing bzip2
 * encoded data.
 * 
 * @param string $source The string to decompress.
 * @param int $small If , an alternative decompression algorithm will
 *   be used which uses less memory (the maximum memory requirement drops
 *   to around 2300K) but works at roughly half the speed. See the bzip2
 *   documentation for more information about this feature.
 * @return mixed
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzdecompress($source, $small){}

/**
 * Returns the error number of any bzip2 error returned by the given file
 * pointer.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzerrno($bz){}

/**
 * Returns the error number and error string of any bzip2 error returned
 * by the given file pointer.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @return array
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzerror($bz){}

/**
 * Gets the error string of any bzip2 error returned by the given file
 * pointer.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzerrstr($bz){}

/**
 * Forces a write of all buffered bzip2 data for the file pointer {@link
 * bz}.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzflush($bz){}

/**
 * {@link bzopen} opens a bzip2 (.bz2) file for reading or writing.
 * 
 * @param string $filename The name of the file to open.
 * @param string $mode Similar to the {@link fopen} function, only 'r'
 *   (read) and 'w' (write) are supported. Everything else will cause
 *   bzopen to return .
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzopen($filename, $mode){}

/**
 * {@link bzread} reads from the given bzip2 file pointer.
 * 
 * Reading stops when {@link length} (uncompressed) bytes have been read
 * or EOF is reached, whichever comes first.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @param int $length If not specified, {@link bzread} will read 1024
 *   (uncompressed) bytes at a time.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzread($bz, $length){}

/**
 * {@link bzwrite} writes a string into the given bzip2 file stream.
 * 
 * @param resource $bz The file pointer. It must be valid and must
 *   point to a file successfully opened by {@link bzopen}.
 * @param string $data The written data.
 * @param int $length If supplied, writing will stop after {@link
 *   length} (uncompressed) bytes have been written or the end of {@link
 *   data} is reached, whichever comes first.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function bzwrite($bz, $data, $length){}

/**
 * Appends the {@link path} onto the current path. The {@link path} may
 * be either the return value from one of CairoContext::copyPath or
 * CairoContext::copyPathFlat;
 * 
 * if {@link path} is not a valid CairoPath instance a CairoException
 * will be thrown
 * 
 * @param CairoContext $context CairoContext object
 * @param CairoPath $path CairoPath object
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_append_path($context, $path){}

/**
 * Adds a circular arc of the given radius to the current path. The arc
 * is centered at ({@link x}, {@link y}), begins at {@link angle1} and
 * proceeds in the direction of increasing angles to end at {@link
 * angle2}. If {@link angle2} is less than {@link angle1} it will be
 * progressively increased by 2*M_PI until it is greater than {@link
 * angle1}. If there is a current point, an initial line segment will be
 * added to the path to connect the current point to the beginning of the
 * arc. If this initial line is undesired, it can be avoided by calling
 * CairoContext::newSubPath or procedural {@link cairo_new_sub_path}
 * before calling CairoContext::arc or {@link cairo_arc}.
 * 
 * Angles are measured in radians. An angle of 0.0 is in the direction of
 * the positive X axis (in user space). An angle of M_PI/2.0 radians (90
 * degrees) is in the direction of the positive Y axis (in user space).
 * Angles increase in the direction from the positive X axis toward the
 * positive Y axis. So with the default transformation matrix, angles
 * increase in a clockwise direction.
 * 
 * (To convert from degrees to radians, use degrees * (M_PI / 180.).)
 * This function gives the arc in the direction of increasing angles; see
 * CairoContext::arcNegative or {@link cairo_arc_negative} to get the arc
 * in the direction of decreasing angles.
 * 
 * @param CairoContext $context A valid CairoContext object
 * @param float $x x position
 * @param float $y y position
 * @param float $radius Radius of the arc
 * @param float $angle1 start angle
 * @param float $angle2 end angle
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_arc($context, $x, $y, $radius, $angle1, $angle2){}

/**
 * Adds a circular arc of the given {@link radius} to the current path.
 * The arc is centered at ({@link x}, {@link y}), begins at {@link
 * angle1} and proceeds in the direction of decreasing angles to end at
 * {@link angle2}. If {@link angle2} is greater than {@link angle1} it
 * will be progressively decreased by 2*M_PI until it is less than {@link
 * angle1}.
 * 
 * See CairoContext::arc or {@link cairo_arc} for more details. This
 * function differs only in the direction of the arc between the two
 * angles.
 * 
 * @param CairoContext $context A valid CairoContext object
 * @param float $x double x position
 * @param float $y double y position
 * @param float $radius The radius of the desired negative arc
 * @param float $angle1 Start angle of the arc
 * @param float $angle2 End angle of the arc
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_arc_negative($context, $x, $y, $radius, $angle1, $angle2){}

/**
 * Returns an array with the available font backends
 * 
 * @return array
 **/
function cairo_available_fonts(){}

/**
 * Returns an array with the available surface backends
 * 
 * @return array
 **/
function cairo_available_surfaces(){}

/**
 * Establishes a new clip region by intersecting the current clip region
 * with the current path as it would be filled by CairoContext::fill or
 * {@link cairo_fill} and according to the current fill rule (see
 * CairoContext::setFillRule or {@link cairo_set_fill_rule}).
 * 
 * After CairoContext::clip or {@link cairo_clip}, the current path will
 * be cleared from the cairo context.
 * 
 * The current clip region affects all drawing operations by effectively
 * masking out any changes to the surface that are outside the current
 * clip region.
 * 
 * Calling CairoContext::clip or {@link cairo_clip} can only make the
 * clip region smaller, never larger. But the current clip is part of the
 * graphics state, so a temporary restriction of the clip region can be
 * achieved by calling CairoContext::clip or {@link cairo_clip} within a
 * CairoContext::save/CairoContext::restore or {@link cairo_save}/{@link
 * cairo_restore} pair. The only other means of increasing the size of
 * the clip region is CairoContext::resetClip or procedural {@link
 * cairo_reset_clip}.
 * 
 * @param CairoContext $context A valid CairoContext object
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_clip($context){}

/**
 * Computes a bounding box in user coordinates covering the area inside
 * the current clip.
 * 
 * @param CairoContext $context A valid CairoContext object
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_clip_extents($context){}

/**
 * Establishes a new clip region by intersecting the current clip region
 * with the current path as it would be filled by Context.fill and
 * according to the current FILL RULE (see CairoContext::setFillRule or
 * {@link cairo_set_fill_rule}).
 * 
 * Unlike CairoContext::clip, CairoContext::clipPreserve preserves the
 * path within the Context. The current clip region affects all drawing
 * operations by effectively masking out any changes to the surface that
 * are outside the current clip region.
 * 
 * Calling CairoContext::clipPreserve can only make the clip region
 * smaller, never larger. But the current clip is part of the graphics
 * state, so a temporary restriction of the clip region can be achieved
 * by calling CairoContext::clipPreserve within a
 * CairoContext::save/CairoContext::restore pair. The only other means of
 * increasing the size of the clip region is CairoContext::resetClip.
 * 
 * @param CairoContext $context A valid CairoContext object
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_clip_preserve($context){}

/**
 * Returns a list-type array with the current clip region as a list of
 * rectangles in user coordinates
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_clip_rectangle_list($context){}

/**
 * Adds a line segment to the path from the current point to the
 * beginning of the current sub-path, (the most recent point passed to
 * CairoContext::moveTo), and closes this sub-path. After this call the
 * current point will be at the joined endpoint of the sub-path.
 * 
 * The behavior of close_path() is distinct from simply calling
 * CairoContext::lineTo with the equivalent coordinate in the case of
 * stroking. When a closed sub-path is stroked, there are no caps on the
 * ends of the sub-path. Instead, there is a line join connecting the
 * final and initial segments of the sub-path.
 * 
 * If there is no current point before the call to
 * CairoContext::closePath, this function will have no effect.
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_close_path($context){}

/**
 * Emits the current page for backends that support multiple pages, but
 * doesn't clear it, so that the contents of the current page will be
 * retained for the next page. Use CairoSurface::showPage() if you want
 * to get an empty page after the emission.
 * 
 * @param CairoContext $context A CairoContext object
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_copy_page($context){}

/**
 * Creates a copy of the current path and returns it to the user as a
 * CairoPath. See CairoPath for hints on how to iterate over the returned
 * data structure.
 * 
 * This function will always return a valid CairoPath object, but the
 * result will have no data, if either of the following conditions hold:
 * 1. If there is insufficient memory to copy the path. In this case
 * CairoPath->status will be set to CAIRO_STATUS_NO_MEMORY. 2. If {@link
 * context} is already in an error state. In this case CairoPath->status
 * will contain the same status that would be returned by {@link
 * cairo_status}.
 * 
 * In either case, CairoPath->status will be set to
 * CAIRO_STATUS_NO_MEMORY (regardless of what the error status in cr
 * might have been).
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @return CairoPath
 * @since PECL cairo >= 0.1.0
 **/
function cairo_copy_path($context){}

/**
 * A CairoContext object
 * 
 * @param CairoContext $context Description...
 * @return CairoPath
 * @since PECL cairo >= 0.1.0
 **/
function cairo_copy_path_flat($context){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return CairoContext
 * @since PECL cairo >= 0.1.0
 **/
function cairo_create($surface){}

/**
 * Adds a cubic Bezier spline to the path from the current point to
 * position {@link x3} ,{@link y3} in user-space coordinates, using
 * {@link x1}, {@link y1} and {@link x2}, {@link y2} as the control
 * points. After this call the current point will be {@link x3}, {@link
 * y3}.
 * 
 * If there is no current point before the call to CairoContext::curveTo
 * this function will behave as if preceded by a call to
 * CairoContext::moveTo ({@link x1}, {@link y1}).
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @param float $x1 First control point in the x axis for the curve
 * @param float $y1 First control point in the y axis for the curve
 * @param float $x2 Second control point in x axis for the curve
 * @param float $y2 Second control point in y axis for the curve
 * @param float $x3 Final point in the x axis for the curve
 * @param float $y3 Final point in the y axis for the curve
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_curve_to($context, $x1, $y1, $x2, $y2, $x3, $y3){}

/**
 * Transform a coordinate from device space to user space by multiplying
 * the given point by the inverse of the current transformation matrix
 * (CTM).
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @param float $x x value of the coordinate
 * @param float $y y value of the coordinate
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_device_to_user($context, $x, $y){}

/**
 * Transform a distance vector from device space to user space. This
 * function is similar to CairoContext::deviceToUser or {@link
 * cairo_device_to_user} except that the translation components of the
 * inverse Cairo Transformation Matrix will be ignored when transforming
 * ({@link x},{@link y}).
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @param float $x X component of a distance vector
 * @param float $y Y component of a distance vector
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_device_to_user_distance($context, $x, $y){}

/**
 * A drawing operator that fills the current path according to the
 * current CairoFillRule, (each sub-path is implicitly closed before
 * being filled). After CairoContext::fill or {@link cairo_fill}, the
 * current path will be cleared from the CairoContext.
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_fill($context){}

/**
 * Computes a bounding box in user coordinates covering the area that
 * would be affected, (the “inked” area), by a CairoContext::fill
 * operation given the current path and fill parameters. If the current
 * path is empty, returns an empty rectangle (0,0,0,0). Surface
 * dimensions and clipping are not taken into account.
 * 
 * Contrast with CairoContext::pathExtents, which is similar, but returns
 * non-zero extents for some paths with no inked area, (such as a simple
 * line segment).
 * 
 * Note that CairoContext::fillExtents must necessarily do more work to
 * compute the precise inked areas in light of the fill rule, so
 * CairoContext::pathExtents may be more desirable for sake of
 * performance if the non-inked path extents are desired.
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_fill_extents($context){}

/**
 * A drawing operator that fills the current path according to the
 * current CairoFillRule, (each sub-path is implicitly closed before
 * being filled). Unlike CairoContext::fill, CairoContext::fillPreserve
 * (Procedural {@link cairo_fill}, {@link cairo_fill_preserve},
 * respectively) preserves the path within the Context.
 * 
 * @param CairoContext $context A valid CairoContext object created
 *   with CairoContext::__construct or {@link cairo_create}
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_fill_preserve($context){}

/**
 * Gets the font extents for the currently selected font.
 * 
 * @param CairoContext $context Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_extents($context){}

/**
 * The function description goes here.
 * 
 * @param CairoFontFace $fontface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_face_get_type($fontface){}

/**
 * The function description goes here.
 * 
 * @param CairoFontFace $fontface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_face_status($fontface){}

/**
 * The function description goes here.
 * 
 * @return CairoFontOptions
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_create(){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @param CairoFontOptions $other Description...
 * @return bool
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_equal($options, $other){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_get_antialias($options){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_get_hint_metrics($options){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_get_hint_style($options){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_get_subpixel_order($options){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_hash($options){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @param CairoFontOptions $other Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_merge($options, $other){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @param string $antialias Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_set_antialias($options, $antialias){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @param string $hint_metrics Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_set_hint_metrics($options, $hint_metrics){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @param string $hint_style Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_set_hint_style($options, $hint_style){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @param string $subpixel_order Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_set_subpixel_order($options, $subpixel_order){}

/**
 * The function description goes here.
 * 
 * @param CairoFontOptions $options Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_font_options_status($options){}

/**
 * The function description goes here.
 * 
 * @param int $format Description...
 * @param int $width Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_format_stride_for_width($format, $width){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_antialias($context){}

/**
 * Gets the current point of the current path, which is conceptually the
 * final point reached by the path so far.
 * 
 * The current point is returned in the user-space coordinate system. If
 * there is no defined current point or if cr is in an error status, x
 * and y will both be set to 0.0. It is possible to check this in advance
 * with CairoContext::hasCurrentPoint.
 * 
 * Most path construction functions alter the current point. See the
 * following for details on how they affect the current point:
 * CairoContext::newPath, CairoContext::newSubPath,
 * CairoContext::appendPath, CairoContext::closePath,
 * CairoContext::moveTo, CairoContext::lineTo, CairoContext::curveTo,
 * CairoContext::relMoveTo, CairoContext::relLineTo,
 * CairoContext::relCurveTo, CairoContext::arc,
 * CairoContext::arcNegative, CairoContext::rectangle,
 * CairoContext::textPath, CairoContext::glyphPath.
 * 
 * Some functions use and alter the current point but do not otherwise
 * change current path: CairoContext::showText.
 * 
 * Some functions unset the current path and as a result, current point:
 * CairoContext::fill, CairoContext::stroke.
 * 
 * @param CairoContext $context A valid CairoContext object.
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_current_point($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_dash($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_dash_count($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_fill_rule($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_font_face($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_font_matrix($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_font_options($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_group_target($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_line_cap($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_line_join($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return float
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_line_width($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_matrix($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return float
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_miter_limit($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_operator($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_scaled_font($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_source($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_target($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return float
 * @since PECL cairo >= 0.1.0
 **/
function cairo_get_tolerance($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param array $glyphs Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_glyph_path($context, $glyphs){}

/**
 * Returns whether a current point is defined on the current path. See
 * CairoContext::getCurrentPoint for details on the current point.
 * 
 * @param CairoContext $context A valid CairoContext object.
 * @return bool
 * @since PECL cairo >= 0.1.0
 **/
function cairo_has_current_point($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_identity_matrix($context){}

/**
 * The function description goes here.
 * 
 * @param int $format Description...
 * @param int $width Description...
 * @param int $height Description...
 * @return CairoImageSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_create($format, $width, $height){}

/**
 * The function description goes here.
 * 
 * @param string $data Description...
 * @param int $format Description...
 * @param int $width Description...
 * @param int $height Description...
 * @param int $stride Description...
 * @return CairoImageSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_create_for_data($data, $format, $width, $height, $stride){}

/**
 * The function description goes here.
 * 
 * @param string $file Description...
 * @return CairoImageSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_create_from_png($file){}

/**
 * The function description goes here.
 * 
 * @param CairoImageSurface $surface Description...
 * @return string
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_get_data($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoImageSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_get_format($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoImageSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_get_height($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoImageSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_get_stride($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoImageSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_image_surface_get_width($surface){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return bool
 * @since PECL cairo >= 0.1.0
 **/
function cairo_in_fill($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return bool
 * @since PECL cairo >= 0.1.0
 **/
function cairo_in_stroke($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_line_to($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoPattern $pattern Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_mask($context, $pattern){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoSurface $surface Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_mask_surface($context, $surface, $x, $y){}

/**
 * Returns new CairoMatrix object. Matrices are used throughout cairo to
 * convert between different coordinate spaces. Sets matrix to be the
 * affine transformation given by xx, yx, xy, yy, x0, y0. The
 * transformation is given by: x_new = xx * x + xy * y + x0; and y_new =
 * yx * x + yy * y + y0;
 * 
 * @param float $xx xx component of the affine transformation
 * @param float $yx yx component of the affine transformation
 * @param float $xy xy component of the affine transformation
 * @param float $yy yy component of the affine transformation
 * @param float $x0 X translation component of the affine
 *   transformation
 * @param float $y0 Y translation component of the affine
 *   transformation
 * @return object
 **/
function cairo_matrix_init($xx, $yx, $xy, $yy, $x0, $y0){}

/**
 * Creates a new matrix that is an identity transformation. An identity
 * transformation means the source data is copied into the destination
 * data without change
 * 
 * @return object
 **/
function cairo_matrix_init_identity(){}

/**
 * Creats a new matrix to a transformation that rotates by radians
 * provided
 * 
 * @param float $radians angle of rotation, in radians. The direction
 *   of rotation is defined such that positive angles rotate in the
 *   direction from the positive X axis toward the positive Y axis. With
 *   the default axis orientation of cairo, positive angles rotate in a
 *   clockwise direction.
 * @return object
 **/
function cairo_matrix_init_rotate($radians){}

/**
 * Creates a new matrix to a transformation that scales by sx and sy in
 * the X and Y dimensions, respectively.
 * 
 * @param float $sx scale factor in the X direction
 * @param float $sy scale factor in the Y direction
 * @return object
 **/
function cairo_matrix_init_scale($sx, $sy){}

/**
 * Creates a new matrix to a transformation that translates by tx and ty
 * in the X and Y dimensions, respectively.
 * 
 * @param float $tx amount to translate in the X direction
 * @param float $ty amount to translate in the Y direction
 * @return object
 **/
function cairo_matrix_init_translate($tx, $ty){}

/**
 * The function description goes here.
 * 
 * @param CairoMatrix $matrix Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_invert($matrix){}

/**
 * The function description goes here.
 * 
 * @param CairoMatrix $matrix1 Description...
 * @param CairoMatrix $matrix2 Description...
 * @return CairoMatrix
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_multiply($matrix1, $matrix2){}

/**
 * The function description goes here.
 * 
 * @param CairoMatrix $matrix Description...
 * @param string $radians Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_rotate($matrix, $radians){}

/**
 * Applies scaling by sx, sy to the transformation in the matrix. The
 * effect of the new transformation is to first scale the coordinates by
 * sx and sy, then apply the original transformation to the coordinates.
 * 
 * @param CairoContext $context Procedural only - CairoMatrix instance
 * @param float $sx scale factor in the X direction
 * @param float $sy scale factor in the Y direction
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_scale($context, $sx, $sy){}

/**
 * The function description goes here.
 * 
 * @param CairoMatrix $matrix Description...
 * @param string $dx Description...
 * @param string $dy Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_transform_distance($matrix, $dx, $dy){}

/**
 * The function description goes here.
 * 
 * @param CairoMatrix $matrix Description...
 * @param string $dx Description...
 * @param string $dy Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_transform_point($matrix, $dx, $dy){}

/**
 * The function description goes here.
 * 
 * @param CairoMatrix $matrix Description...
 * @param string $tx Description...
 * @param string $ty Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_matrix_translate($matrix, $tx, $ty){}

/**
 * Begin a new sub-path. After this call the current point will be (x,
 * y).
 * 
 * @param CairoContext $context A valid CairoContext object.
 * @param string $x The x coordinate of the new position.
 * @param string $y The y coordinate of the new position
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_move_to($context, $x, $y){}

/**
 * Clears the current path. After this call there will be no path and no
 * current point.
 * 
 * @param CairoContext $context A valid CairoContext object.
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_new_path($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_new_sub_path($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_paint($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $alpha Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_paint_with_alpha($context, $alpha){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_path_extents($context){}

/**
 * The function description goes here.
 * 
 * @param CairoGradientPattern $pattern Description...
 * @param string $offset Description...
 * @param string $red Description...
 * @param string $green Description...
 * @param string $blue Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_add_color_stop_rgb($pattern, $offset, $red, $green, $blue){}

/**
 * The function description goes here.
 * 
 * @param CairoGradientPattern $pattern Description...
 * @param string $offset Description...
 * @param string $red Description...
 * @param string $green Description...
 * @param string $blue Description...
 * @param string $alpha Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_add_color_stop_rgba($pattern, $offset, $red, $green, $blue, $alpha){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return CairoPattern
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_create_for_surface($surface){}

/**
 * The function description goes here.
 * 
 * @param float $x0 Description...
 * @param float $y0 Description...
 * @param float $x1 Description...
 * @param float $y1 Description...
 * @return CairoPattern
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_create_linear($x0, $y0, $x1, $y1){}

/**
 * The function description goes here.
 * 
 * @param float $x0 Description...
 * @param float $y0 Description...
 * @param float $r0 Description...
 * @param float $x1 Description...
 * @param float $y1 Description...
 * @param float $r1 Description...
 * @return CairoPattern
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_create_radial($x0, $y0, $r0, $x1, $y1, $r1){}

/**
 * The function description goes here.
 * 
 * @param float $red Description...
 * @param float $green Description...
 * @param float $blue Description...
 * @return CairoPattern
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_create_rgb($red, $green, $blue){}

/**
 * The function description goes here.
 * 
 * @param float $red Description...
 * @param float $green Description...
 * @param float $blue Description...
 * @param float $alpha Description...
 * @return CairoPattern
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_create_rgba($red, $green, $blue, $alpha){}

/**
 * The function description goes here.
 * 
 * @param CairoGradientPattern $pattern Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_color_stop_count($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoGradientPattern $pattern Description...
 * @param string $index Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_color_stop_rgba($pattern, $index){}

/**
 * The function description goes here.
 * 
 * @param string $pattern Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_extend($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoSurfacePattern $pattern Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_filter($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoLinearGradient $pattern Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_linear_points($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoPattern $pattern Description...
 * @return CairoMatrix
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_matrix($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoRadialGradient $pattern Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_radial_circles($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoSolidPattern $pattern Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_rgba($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoSurfacePattern $pattern Description...
 * @return CairoSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_surface($pattern){}

/**
 * The function description goes here.
 * 
 * @param CairoPattern $pattern Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_get_type($pattern){}

/**
 * The function description goes here.
 * 
 * @param string $pattern Description...
 * @param string $extend Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_set_extend($pattern, $extend){}

/**
 * The function description goes here.
 * 
 * @param CairoSurfacePattern $pattern Description...
 * @param string $filter Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_set_filter($pattern, $filter){}

/**
 * The function description goes here.
 * 
 * @param CairoPattern $pattern Description...
 * @param CairoMatrix $matrix Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_set_matrix($pattern, $matrix){}

/**
 * The function description goes here.
 * 
 * @param CairoPattern $pattern Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pattern_status($pattern){}

/**
 * The function description goes here.
 * 
 * @param string $file Description...
 * @param float $width Description...
 * @param float $height Description...
 * @return CairoPdfSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pdf_surface_create($file, $width, $height){}

/**
 * The function description goes here.
 * 
 * @param CairoPdfSurface $surface Description...
 * @param string $width Description...
 * @param string $height Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pdf_surface_set_size($surface, $width, $height){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pop_group($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_pop_group_to_source($context){}

/**
 * The function description goes here.
 * 
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_get_levels(){}

/**
 * The function description goes here.
 * 
 * @param string $level Description...
 * @return string
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_level_to_string($level){}

/**
 * The function description goes here.
 * 
 * @param string $file Description...
 * @param float $width Description...
 * @param float $height Description...
 * @return CairoPsSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_create($file, $width, $height){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_dsc_begin_page_setup($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_dsc_begin_setup($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @param string $comment Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_dsc_comment($surface, $comment){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @return bool
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_get_eps($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @param string $level Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_restrict_to_level($surface, $level){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @param string $level Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_set_eps($surface, $level){}

/**
 * The function description goes here.
 * 
 * @param CairoPsSurface $surface Description...
 * @param string $width Description...
 * @param string $height Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_ps_surface_set_size($surface, $width, $height){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_push_group($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $content Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_push_group_with_content($context, $content){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @param string $width Description...
 * @param string $height Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_rectangle($context, $x, $y, $width, $height){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x1 Description...
 * @param string $y1 Description...
 * @param string $x2 Description...
 * @param string $y2 Description...
 * @param string $x3 Description...
 * @param string $y3 Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_rel_curve_to($context, $x1, $y1, $x2, $y2, $x3, $y3){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_rel_line_to($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_rel_move_to($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_reset_clip($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_restore($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $angle Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_rotate($context, $angle){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_save($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scale($context, $x, $y){}

/**
 * The function description goes here.
 * 
 * @param CairoFontFace $fontface Description...
 * @param CairoMatrix $matrix Description...
 * @param CairoMatrix $ctm Description...
 * @param CairoFontOptions $fontoptions Description...
 * @return CairoScaledFont
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_create($fontface, $matrix, $ctm, $fontoptions){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_extents($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return CairoMatrix
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_get_ctm($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return CairoFontFace
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_get_font_face($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return CairoFontOptions
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_get_font_matrix($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return CairoFontOptions
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_get_font_options($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return CairoMatrix
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_get_scale_matrix($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_get_type($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @param string $glyphs Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_glyph_extents($scaledfont, $glyphs){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_status($scaledfont){}

/**
 * The function description goes here.
 * 
 * @param CairoScaledFont $scaledfont Description...
 * @param string $text Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_scaled_font_text_extents($scaledfont, $text){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $family Description...
 * @param string $slant Description...
 * @param string $weight Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_select_font_face($context, $family, $slant, $weight){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $antialias Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_antialias($context, $antialias){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param array $dashes Description...
 * @param string $offset Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_dash($context, $dashes, $offset){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $setting Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_fill_rule($context, $setting){}

/**
 * Sets the font-face for a given context.
 * 
 * @param CairoContext $context A CairoContext object to change the
 *   font-face for.
 * @param CairoFontFace $fontface A CairoFontFace object
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_font_face($context, $fontface){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoMatrix $matrix Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_font_matrix($context, $matrix){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoFontOptions $fontoptions Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_font_options($context, $fontoptions){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $size Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_font_size($context, $size){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $setting Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_line_cap($context, $setting){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $setting Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_line_join($context, $setting){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $width Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_line_width($context, $width){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoMatrix $matrix Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_matrix($context, $matrix){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $limit Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_miter_limit($context, $limit){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $setting Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_operator($context, $setting){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoScaledFont $scaledfont Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_scaled_font($context, $scaledfont){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoPattern $pattern Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_source($context, $pattern){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoSurface $surface Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_source_surface($context, $surface, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $tolerance Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_set_tolerance($context, $tolerance){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_show_page($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $text Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_show_text($context, $text){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_status($context){}

/**
 * Retrieves the current status as a readable string
 * 
 * @param int $status A valid status code given by {@link cairo_status}
 *   or CairoContext::status
 * @return string
 **/
function cairo_status_to_string($status){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_stroke($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_stroke_extents($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_stroke_preserve($context){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_copy_page($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @param string $content Description...
 * @param string $width Description...
 * @param string $height Description...
 * @return CairoSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_create_similar($surface, $content, $width, $height){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_finish($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_flush($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_get_content($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_get_device_offset($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return CairoFontOptions
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_get_font_options($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_get_type($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_mark_dirty($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @param string $x Description...
 * @param string $y Description...
 * @param string $width Description...
 * @param string $height Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_mark_dirty_rectangle($surface, $x, $y, $width, $height){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_set_device_offset($surface, $x, $y){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_set_fallback_resolution($surface, $x, $y){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_show_page($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @return int
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_status($surface){}

/**
 * The function description goes here.
 * 
 * @param CairoSurface $surface Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_surface_write_to_png($surface, $x, $y){}

/**
 * Returns a numerically indexed array of currently available
 * CairoSvgVersion constants. In order to retreive the string values for
 * each item, use CairoSvgSurface::versionToString.
 * 
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_svg_get_versions(){}

/**
 * The function description goes here.
 * 
 * @param string $file Description...
 * @param float $width Description...
 * @param float $height Description...
 * @return CairoSvgSurface
 * @since PECL cairo >= 0.1.0
 **/
function cairo_svg_surface_create($file, $width, $height){}

/**
 * The function description goes here.
 * 
 * @param CairoSvgSurface $surface Description...
 * @param string $version Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_svg_surface_restrict_to_version($surface, $version){}

/**
 * The function description goes here.
 * 
 * @param int $version Description...
 * @return string
 * @since PECL cairo >= 0.1.0
 **/
function cairo_svg_version_to_string($version){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_text_extents($context){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $text Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_text_path($context, $text){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param CairoMatrix $matrix Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_transform($context, $matrix){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return void
 * @since PECL cairo >= 0.1.0
 **/
function cairo_translate($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_user_to_device($context, $x, $y){}

/**
 * Description here.
 * 
 * @param CairoContext $context Description...
 * @param string $x Description...
 * @param string $y Description...
 * @return array
 * @since PECL cairo >= 0.1.0
 **/
function cairo_user_to_device_distance($context, $x, $y){}

/**
 * Retrieves the current version of the cairo library as an integer value
 * 
 * @return int
 **/
function cairo_version(){}

/**
 * Retrieves the current cairo library version as a string.
 * 
 * @return string
 **/
function cairo_version_string(){}

/**
 * @param string $clent
 * @param string $data
 * @return string
 * @since PECL spplus >= 1.0.0
 **/
function calculhmac($clent, $data){}

/**
 * @param string $clent
 * @param string $siretcode
 * @param string $price
 * @param string $reference
 * @param string $validity
 * @param string $taxation
 * @param string $devise
 * @param string $language
 * @return string
 * @since PECL spplus >= 1.0.0
 **/
function calcul_hmac($clent, $siretcode, $price, $reference, $validity, $taxation, $devise, $language){}

/**
 * Call a user defined function given by the {@link function} parameter.
 * 
 * @param callback $function The function to be called. Class methods
 *   may also be invoked statically using this function by passing
 *   array($classname, $methodname) to this parameter. Additionally class
 *   methods of an object instance may be called by passing
 *   array($objectinstance, $methodname) to this parameter.
 * @param mixed $parameter Zero or more parameters to be passed to the
 *   function.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function call_user_func($function, $parameter){}

/**
 * Call a user defined {@link function} with the parameters in {@link
 * param_arr}.
 * 
 * @param callback $function The function to be called.
 * @param array $param_arr The parameters to be passed to the function,
 *   as an indexed array.
 * @return mixed
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function call_user_func_array($function, $param_arr){}

/**
 * @param string $method_name The method name being called.
 * @param object $obj The object that {@link method_name} is being
 *   called on.
 * @param mixed $parameter The optional parameters.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function call_user_method($method_name, &$obj, $parameter){}

/**
 * @param string $method_name The method name being called.
 * @param object $obj The object that {@link method_name} is being
 *   called on.
 * @param array $params An array of parameters.
 * @return mixed
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function call_user_method_array($method_name, &$obj, $params){}

/**
 * This function will return the number of days in the {@link month} of
 * {@link year} for the specified {@link calendar}.
 * 
 * @param int $calendar Calendar to use for calculation
 * @param int $month Month in the selected calendar
 * @param int $year Year in the selected calendar
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function cal_days_in_month($calendar, $month, $year){}

/**
 * {@link cal_from_jd} converts the Julian day given in {@link jd} into a
 * date of the specified {@link calendar}. Supported {@link calendar}
 * values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
 * 
 * @param int $jd Julian day as integer
 * @param int $calendar Calendar to convert to
 * @return array
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function cal_from_jd($jd, $calendar){}

/**
 * {@link cal_info} returns information on the specified {@link
 * calendar}.
 * 
 * Calendar information is returned as an array containing the elements
 * calname, calsymbol, month, abbrevmonth and maxdaysinmonth. The names
 * of the different calendars which can be used as {@link calendar} are
 * as follows: 0 or CAL_GREGORIAN - Gregorian Calendar 1 or CAL_JULIAN -
 * Julian Calendar 2 or CAL_JEWISH - Jewish Calendar 3 or CAL_FRENCH -
 * French Revolutionary Calendar
 * 
 * If no {@link calendar} is specified information on all supported
 * calendars is returned as an array.
 * 
 * @param int $calendar Calendar to return information for. If no
 *   calendar is specified information about all calendars is returned.
 * @return array
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function cal_info($calendar){}

/**
 * {@link cal_to_jd} calculates the Julian day count for a date in the
 * specified {@link calendar}. Supported {@link calendar}s are
 * CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
 * 
 * @param int $calendar Calendar to convert from, one of CAL_GREGORIAN,
 *   CAL_JULIAN, CAL_JEWISH or CAL_FRENCH.
 * @param int $month The month as a number, the valid range depends on
 *   the {@link calendar}
 * @param int $day The day as a number, the valid range depends on the
 *   {@link calendar}
 * @param int $year The year as a number, the valid range depends on
 *   the {@link calendar}
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function cal_to_jd($calendar, $month, $day, $year){}

/**
 * @param float $value The value to round
 * @return float
 * @since PHP 4, PHP 5
 **/
function ceil($value){}

/**
 * {@link chdb_create} creates a chdb file containing the specified
 * key-value pairs.
 * 
 * @param string $pathname The name of the file to create. If a file
 *   with the same name already exists, it is overwritten.
 * @param array $data An array containing the key-value pairs to store
 *   in the chdb file. Keys and values are converted to strings before
 *   being written to the file, as chdb only support the string type.
 *   Note that binary strings are supported as well, both as keys and
 *   values.
 * @return void
 * @since PECL chdb >= 0.1.0
 **/
function chdb_create($pathname, $data){}

/**
 * Changes PHP's current directory to {@link directory}.
 * 
 * @param string $directory The new current directory
 * @return bool
 * @since PHP 4, PHP 5
 **/
function chdir($directory){}

/**
 * Checks the validity of the date formed by the arguments. A date is
 * considered valid if each parameter is properly defined.
 * 
 * @param int $month The month is between 1 and 12 inclusive.
 * @param int $day The day is within the allowed number of days for the
 *   given {@link month}. Leap {@link year}s are taken into
 *   consideration.
 * @param int $year The year is between 1 and 32767 inclusive.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function checkdate($month, $day, $year){}

/**
 * Searches DNS for records of type {@link type} corresponding to {@link
 * host}.
 * 
 * @param string $host {@link host} may either be the IP address in
 *   dotted-quad notation or the host name.
 * @param string $type {@link type} may be any one of: A, MX, NS, SOA,
 *   PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function checkdnsrr($host, $type){}

/**
 * Attempts to change the group of the file {@link filename} to {@link
 * group}.
 * 
 * Only the superuser may change the group of a file arbitrarily; other
 * users may change the group of a file to any group of which that user
 * is a member.
 * 
 * @param string $filename Path to the file.
 * @param mixed $group A group name or number.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function chgrp($filename, $group){}

/**
 * Attempts to change the mode of the specified file to that given in
 * {@link mode}.
 * 
 * @param string $filename Path to the file.
 * @param int $mode Note that {@link mode} is not automatically assumed
 *   to be an octal value, so strings (such as "g+w") will not work
 *   properly. To ensure the expected operation, you need to prefix
 *   {@link mode} with a zero (0):
 *   
 *   <?php chmod("/somedir/somefile", 755); // decimal; probably
 *   incorrect chmod("/somedir/somefile", "u+rwx,go+rx"); // string;
 *   incorrect chmod("/somedir/somefile", 0755); // octal; correct value
 *   of mode ?>
 *   
 *   The {@link mode} parameter consists of three octal number components
 *   specifying access restrictions for the owner, the user group in
 *   which the owner is in, and to everybody else in this order. One
 *   component can be computed by adding up the needed permissions for
 *   that target user base. Number 1 means that you grant execute rights,
 *   number 2 means that you make the file writeable, number 4 means that
 *   you make the file readable. Add up these numbers to specify needed
 *   rights. You can also read more about modes on Unix systems with 'man
 *   1 chmod' and 'man 2 chmod'.
 *   
 *   <?php // Read and write for owner, nothing for everybody else
 *   chmod("/somedir/somefile", 0600);
 *   
 *   // Read and write for owner, read for everybody else
 *   chmod("/somedir/somefile", 0644);
 *   
 *   // Everything for owner, read and execute for others
 *   chmod("/somedir/somefile", 0755);
 *   
 *   // Everything for owner, read and execute for owner's group
 *   chmod("/somedir/somefile", 0750); ?>
 * @return bool
 * @since PHP 4, PHP 5
 **/
function chmod($filename, $mode){}

/**
 * This function returns a string with whitespace stripped from the end
 * of {@link str}.
 * 
 * Without the second parameter, {@link chop} will strip these
 * characters: " " (ASCII 32 (0x20)), an ordinary space. "\t" (ASCII 9
 * (0x09)), a tab. "\n" (ASCII 10 (0x0A)), a new line (line feed). "\r"
 * (ASCII 13 (0x0D)), a carriage return. "\0" (ASCII 0 (0x00)), the
 * NUL-byte. "\x0B" (ASCII 11 (0x0B)), a vertical tab.
 * 
 * @param string $str The input string.
 * @param string $charlist You can also specify the characters you want
 *   to strip, by means of the {@link charlist} parameter. Simply list
 *   all characters that you want to be stripped. With .. you can specify
 *   a range of characters.
 * @return string
 * @since PHP 4, PHP 5
 **/
function chop($str, $charlist){}

/**
 * Attempts to change the owner of the file {@link filename} to user
 * {@link user}. Only the superuser may change the owner of a file.
 * 
 * @param string $filename Path to the file.
 * @param mixed $user A user name or number.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function chown($filename, $user){}

/**
 * Returns a one-character string containing the character specified by
 * {@link ascii}.
 * 
 * This function complements {@link ord}.
 * 
 * @param int $ascii The ascii code.
 * @return string
 * @since PHP 4, PHP 5
 **/
function chr($ascii){}

/**
 * Changes the root directory of the current process to {@link
 * directory}.
 * 
 * This function is only available if your system supports it and you're
 * using the CLI, CGI or Embed SAPI. Also, this function requires root
 * privileges.
 * 
 * @param string $directory The new directory
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function chroot($directory){}

/**
 * Can be used to split a string into smaller chunks which is useful for
 * e.g. converting {@link base64_encode} output to match RFC 2045
 * semantics. It inserts {@link end} every {@link chunklen} characters.
 * 
 * @param string $body The string to be chunked.
 * @param int $chunklen The chunk length.
 * @param string $end The line ending sequence.
 * @return string
 * @since PHP 4, PHP 5
 **/
function chunk_split($body, $chunklen, $end){}

/**
 * @param string $filename The filename of the class method definitions
 *   to import
 * @return array
 * @since PECL classkit >= 0.3
 **/
function classkit_import($filename){}

/**
 * @param string $classname The class to which this method will be
 *   added
 * @param string $methodname The name of the method to add
 * @param string $args Comma-delimited list of arguments for the
 *   newly-created method
 * @param string $code The code to be evaluated when {@link methodname}
 *   is called
 * @param int $flags The type of method to create, can be
 *   CLASSKIT_ACC_PUBLIC, CLASSKIT_ACC_PROTECTED or CLASSKIT_ACC_PRIVATE
 * @return bool
 * @since PECL classkit >= 0.1
 **/
function classkit_method_add($classname, $methodname, $args, $code, $flags){}

/**
 * @param string $dClass Destination class for copied method
 * @param string $dMethod Destination method name
 * @param string $sClass Source class of the method to copy
 * @param string $sMethod Name of the method to copy from the source
 *   class. If this parameter is omitted, the value of {@link dMethod} is
 *   assumed.
 * @return bool
 * @since PECL classkit >= 0.2
 **/
function classkit_method_copy($dClass, $dMethod, $sClass, $sMethod){}

/**
 * @param string $classname The class in which to redefine the method
 * @param string $methodname The name of the method to redefine
 * @param string $args Comma-delimited list of arguments for the
 *   redefined method
 * @param string $code The new code to be evaluated when {@link
 *   methodname} is called
 * @param int $flags The redefined method can be CLASSKIT_ACC_PUBLIC,
 *   CLASSKIT_ACC_PROTECTED or CLASSKIT_ACC_PRIVATE
 * @return bool
 * @since PECL classkit >= 0.1
 **/
function classkit_method_redefine($classname, $methodname, $args, $code, $flags){}

/**
 * @param string $classname The class in which to remove the method
 * @param string $methodname The name of the method to remove
 * @return bool
 * @since PECL classkit >= 0.1
 **/
function classkit_method_remove($classname, $methodname){}

/**
 * @param string $classname The class in which to rename the method
 * @param string $methodname The name of the method to rename
 * @param string $newname The new name to give to the renamed method
 * @return bool
 * @since PECL classkit >= 0.1
 **/
function classkit_method_rename($classname, $methodname, $newname){}

/**
 * Creates an alias named {@link alias} based on the defined class {@link
 * original}. The aliased class is exactly the same as the original
 * class.
 * 
 * @param string $original The original class.
 * @param string $alias The alias name for the class.
 * @return boolean
 * @since PHP 5 >= 5.3.0
 **/
function class_alias($original, $alias){}

/**
 * This function checks whether or not the given class has been defined.
 * 
 * @param string $class_name The class name. The name is matched in a
 *   case-insensitive manner.
 * @param bool $autoload Whether or not to call by default.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function class_exists($class_name, $autoload){}

/**
 * This function returns an array with the names of the interfaces that
 * the given {@link class} and its parents implement.
 * 
 * @param mixed $class An object (class instance) or a string (class
 *   name).
 * @param bool $autoload Whether to allow this function to load the
 *   class automatically through the __autoload magic method.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function class_implements($class, $autoload){}

/**
 * This function returns an array with the name of the parent classes of
 * the given {@link class}.
 * 
 * @param mixed $class An object (class instance) or a string (class
 *   name).
 * @param bool $autoload Whether to allow this function to load the
 *   class automatically through the __autoload magic method.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function class_parents($class, $autoload){}

/**
 * When you use {@link stat}, {@link lstat}, or any of the other
 * functions listed in the affected functions list (below), PHP caches
 * the information those functions return in order to provide faster
 * performance. However, in certain cases, you may want to clear the
 * cached information. For instance, if the same file is being checked
 * multiple times within a single script, and that file is in danger of
 * being removed or changed during that script's operation, you may elect
 * to clear the status cache. In these cases, you can use the {@link
 * clearstatcache} function to clear the information that PHP caches
 * about a file.
 * 
 * You should also note that PHP doesn't cache information about
 * non-existent files. So, if you call {@link file_exists} on a file that
 * doesn't exist, it will return until you create the file. If you create
 * the file, it will return even if you then delete the file. However
 * {@link unlink} clears the cache automatically.
 * 
 * Affected functions include {@link stat}, {@link lstat}, {@link
 * file_exists}, {@link is_writable}, {@link is_readable}, {@link
 * is_executable}, {@link is_file}, {@link is_dir}, {@link is_link},
 * {@link filectime}, {@link fileatime}, {@link filemtime}, {@link
 * fileinode}, {@link filegroup}, {@link fileowner}, {@link filesize},
 * {@link filetype}, and {@link fileperms}.
 * 
 * @param bool $clear_realpath_cache Whether to clear the realpath
 *   cache or not.
 * @param string $filename Clear the realpath cache for a specific
 *   filename; only used if {@link clear_realpath_cache} is .
 * @return void
 * @since PHP 4, PHP 5
 **/
function clearstatcache($clear_realpath_cache, $filename){}

/**
 * Closes the directory stream indicated by {@link dir_handle}. The
 * stream must have previously been opened by {@link opendir}.
 * 
 * @param resource $dir_handle The directory handle resource previously
 *   opened with {@link opendir}. If the directory handle is not
 *   specified, the last link opened by {@link opendir} is assumed.
 * @return void
 * @since PHP 4, PHP 5
 **/
function closedir($dir_handle){}

/**
 * {@link closelog} closes the descriptor being used to write to the
 * system logger. The use of {@link closelog} is optional.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function closelog(){}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with. This is
 * used mainly when sorting associative arrays where the actual element
 * order is significant. Array elements will have sort order according to
 * current locale rules.
 * 
 * Equivalent to standard PHP {@link asort}.
 * 
 * @param Collator $coll Collator object.
 * @param array $arr Array of strings to sort.
 * @param int $sort_flag Optional sorting type, one of the following:
 *   Collator::SORT_REGULAR - compare items normally (don't change types)
 *   Collator::SORT_NUMERIC - compare items numerically
 *   Collator::SORT_STRING - compare items as strings Default $sort_flag
 *   value is Collator::SORT_REGULAR. It is also used if an invalid
 *   $sort_flag value has been specified.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_asort($coll, &$arr, $sort_flag){}

/**
 * Compare two Unicode strings according to collation rules.
 * 
 * @param Collator $coll Collator object.
 * @param string $str1 The first string to compare.
 * @param string $str2 The second string to compare.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_compare($coll, $str1, $str2){}

/**
 * The strings will be compared using the options already specified.
 * 
 * @param string $locale The locale containing the required collation
 *   rules. Special values for locales can be passed in - if null is
 *   passed for the locale, the default locale collation rules will be
 *   used. If empty string ("") or "root" are passed, UCA rules will be
 *   used.
 * @return Collator
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_create($locale){}

/**
 * Get a value of an integer collator attribute.
 * 
 * @param Collator $coll Collator object.
 * @param int $attr Attribute to get value for.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_get_attribute($coll, $attr){}

/**
 * @param Collator $coll Collator object.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_get_error_code($coll){}

/**
 * Retrieves the message for the last error.
 * 
 * @param Collator $coll Collator object.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_get_error_message($coll){}

/**
 * Get collector locale name.
 * 
 * @param Collator $coll Collator object.
 * @param int $type You can choose between valid and actual locale (
 *   Locale::VALID_LOCALE and Locale::ACTUAL_LOCALE, respectively). The
 *   default is the actual locale.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_get_locale($coll, $type){}

/**
 * Return collation key for a string.
 * 
 * @param Collator $coll Collator object.
 * @param string $str The string to produce the key from.
 * @return string
 **/
function collator_get_sort_key($coll, $str){}

/**
 * @param Collator $coll Collator object.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_get_strength($coll){}

/**
 * @param Collator $coll Collator object.
 * @param int $attr Attribute.
 * @param int $val Attribute value.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_set_attribute($coll, $attr, $val){}

/**
 * The ICU Collation Service supports many levels of comparison (named
 * "Levels", but also known as "Strengths"). Having these categories
 * enables ICU to sort strings precisely according to local conventions.
 * However, by allowing the levels to be selectively employed, searching
 * for a string in text can be performed with various matching
 * conditions.
 * 
 * Primary Level: Typically, this is used to denote differences between
 * base characters (for example, "a" < "b"). It is the strongest
 * difference. For example, dictionaries are divided into different
 * sections by base character. This is also called the level1 strength.
 * Secondary Level: Accents in the characters are considered secondary
 * differences (for example, "as" < "às" < "at"). Other differences
 * between letters can also be considered secondary differences,
 * depending on the language. A secondary difference is ignored when
 * there is a primary difference anywhere in the strings. This is also
 * called the level2 strength. Note: In some languages (such as Danish),
 * certain accented letters are considered to be separate base
 * characters. In most languages, however, an accented letter only has a
 * secondary difference from the unaccented version of that letter.
 * Tertiary Level: Upper and lower case differences in characters are
 * distinguished at the tertiary level (for example, "ao" < "Ao" <
 * "aò"). In addition, a variant of a letter differs from the base form
 * on the tertiary level (such as "A" and " "). Another example is the
 * difference between large and small Kana. A tertiary difference is
 * ignored when there is a primary or secondary difference anywhere in
 * the strings. This is also called the level3 strength. Quaternary
 * Level: When punctuation is ignored (see Ignoring Punctuations ) at
 * level 13, an additional level can be used to distinguish words with
 * and without punctuation (for example, "ab" < "a-b" < "aB"). This
 * difference is ignored when there is a primary, secondary or tertiary
 * difference. This is also known as the level4 strength. The quaternary
 * level should only be used if ignoring punctuation is required or when
 * processing Japanese text (see Hiragana processing). Identical Level:
 * When all other levels are equal, the identical level is used as a
 * tiebreaker. The Unicode code point values of the NFD form of each
 * string are compared at this level, just in case there is no difference
 * at levels 14. For example, Hebrew cantillation marks are only
 * distinguished at this level. This level should be used sparingly, as
 * only code point values differences between two strings is an extremely
 * rare occurrence. Using this level substantially decreases the
 * performance for both incremental comparison and sort key generation
 * (as well as increasing the sort key length). It is also known as level
 * 5 strength.
 * 
 * For example, people may choose to ignore accents or ignore accents and
 * case when searching for text. Almost all characters are distinguished
 * by the first three levels, and in most locales the default value is
 * thus Tertiary. However, if Alternate is set to be Shifted, then the
 * Quaternary strength can be used to break ties among whitespace,
 * punctuation, and symbols that would otherwise be ignored. If very fine
 * distinctions among characters are required, then the Identical
 * strength can be used (for example, Identical Strength distinguishes
 * between the Mathematical Bold Small A and the Mathematical Italic
 * Small A.). However, using levels higher than Tertiary the Identical
 * strength result in significantly longer sort keys, and slower string
 * comparison performance for equal strings.
 * 
 * @param Collator $coll Collator object.
 * @param int $strength Strength to set. Possible values are:
 *   Collator::PRIMARY Collator::SECONDARY Collator::TERTIARY
 *   Collator::QUATERNARY Collator::IDENTICAL Collator::DEFAULT
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_set_strength($coll, $strength){}

/**
 * This function sorts an array according to current locale rules.
 * 
 * Equivalent to standard PHP {@link sort} .
 * 
 * @param Collator $coll Collator object.
 * @param array $arr Array of strings to sort.
 * @param int $sort_flag Optional sorting type, one of the following:
 *   
 *   Collator::SORT_REGULAR - compare items normally (don't change types)
 *   Collator::SORT_NUMERIC - compare items numerically
 *   Collator::SORT_STRING - compare items as strings Default sorting
 *   type is Collator::SORT_REGULAR.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_sort($coll, &$arr, $sort_flag){}

/**
 * Similar to {@link collator_sort} but uses ICU sorting keys produced by
 * ucol_getSortKey() to gain more speed on large arrays.
 * 
 * @param Collator $coll Collator object.
 * @param array $arr Array of strings to sort
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function collator_sort_with_sort_keys($coll, &$arr){}

/**
 * Creates an array containing variables and their values.
 * 
 * For each of these, {@link compact} looks for a variable with that name
 * in the current symbol table and adds it to the output array such that
 * the variable name becomes the key and the contents of the variable
 * become the value for that key. In short, it does the opposite of
 * {@link extract}.
 * 
 * Any strings that are not set will simply be skipped.
 * 
 * @param mixed $varname {@link compact} takes a variable number of
 *   parameters. Each parameter can be either a string containing the
 *   name of the variable, or an array of variable names. The array can
 *   contain other arrays of variable names inside it; {@link compact}
 *   handles it recursively.
 * @return array
 * @since PHP 4, PHP 5
 **/
function compact($varname){}

/**
 * Increases the components reference counter.
 * 
 * @return void
 * @since PHP 4 >= 4.1.0
 **/
function com_addref(){}

/**
 * Generates a Globally Unique Identifier (GUID).
 * 
 * A GUID is generated in the same way as DCE UUID's, except that the
 * Microsoft convention is to enclose a GUID in curly braces.
 * 
 * @return string
 * @since PHP 5
 **/
function com_create_guid(){}

/**
 * Instructs COM to sink events generated by {@link comobject} into the
 * PHP object {@link sinkobject}.
 * 
 * Be careful how you use this feature; if you are doing something
 * similar to the example below, then it doesn't really make sense to run
 * it in a web server context.
 * 
 * @param variant $comobject
 * @param object $sinkobject {@link sinkobject} should be an instance
 *   of a class with methods named after those of the desired
 *   dispinterface; you may use {@link com_print_typeinfo} to help
 *   generate a template class for this purpose.
 * @param mixed $sinkinterface PHP will attempt to use the default
 *   dispinterface type specified by the typelibrary associated with
 *   {@link comobject}, but you may override this choice by setting
 *   {@link sinkinterface} to the name of the dispinterface that you want
 *   to use.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function com_event_sink($comobject, $sinkobject, $sinkinterface){}

/**
 * {@link com_get_active_object} is similar to creating a new instance of
 * a object, except that it will only return an object to your script if
 * the object is already running. OLE applications use something known as
 * the Running Object Table to allow well-known applications to be
 * launched only once; this function exposes the COM library function
 * GetActiveObject() to get a handle on a running instance.
 * 
 * @param string $progid {@link progid} must be either the ProgID or
 *   CLSID for the object that you want to access (for example
 *   Word.Application).
 * @param int $code_page Acts in precisely the same way that it does
 *   for the class.
 * @return variant
 * @since PHP 5
 **/
function com_get_active_object($progid, $code_page){}

/**
 * {@link com_invoke} invokes the method named {@link function_name} of
 * the COM component referenced by {@link com_object}. {@link com_invoke}
 * returns on error, returns the {@link function_name}'s return value on
 * success. All the extra parameters {@link function_parameters} are
 * passed to the method {@link function_name}.
 * 
 * Don't use com_invoke(), use OO syntax instead
 * 
 * <?php // do this $val = $obj->method($one, $two); // instead of this:
 * $val = com_invoke($obj, 'method', $one, $two); ?>
 * 
 * @param resource $com_object
 * @param string $function_name
 * @param mixed $function_parameters
 * @return mixed
 * @since PHP 4
 **/
function com_invoke($com_object, $function_name, $function_parameters){}

/**
 * Checks to see if a COM object can be enumerated using the Next()
 * method hack. See class for more details on these methods.
 * 
 * @param variant $com_module The COM object.
 * @return bool
 * @since PHP 4 >= 4.1.0
 **/
function com_isenum($com_module){}

/**
 * Loads a type-library and registers its constants in the engine, as
 * though they were defined using {@link define}.
 * 
 * Note that it is much more efficient to use the configuration setting
 * to pre-load and register the constants, although not so flexible.
 * 
 * If you have turned on , then PHP will attempt to automatically
 * register the constants associated with a COM object when you
 * instantiate it. This depends on the interfaces provided by the COM
 * object itself, and may not always be possible.
 * 
 * @param string $typelib_name {@link typelib_name} can be one of the
 *   following: The filename of a .tlb file or the executable module that
 *   contains the type library. The type library GUID, followed by its
 *   version number, for example
 *   {00000200-0000-0010-8000-00AA006D2EA4},2,0. The type library name,
 *   e.g. Microsoft OLE DB ActiveX Data Objects 1.0 Library. PHP will
 *   attempt to resolve the type library in this order, as the process
 *   gets more and more expensive as you progress down the list;
 *   searching for the type library by name is handled by physically
 *   enumerating the registry until we find a match.
 * @param bool $case_insensitive The {@link case_insensitive} behaves
 *   in the same way as the parameter with the same name in the {@link
 *   define} function.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function com_load_typelib($typelib_name, $case_insensitive){}

/**
 * This function will sleep for up to {@link timeoutms} milliseconds, or
 * until a message arrives in the queue.
 * 
 * The purpose of this function is to route COM calls between apartments
 * and handle various synchronization issues. This allows your script to
 * wait efficiently for events to be triggered, while still handling
 * other events or running other code in the background. You should use
 * it in a loop, as demonstrated by the example in the {@link
 * com_event_sink} function, until you are finished using event bound COM
 * objects.
 * 
 * @param int $timeoutms The timeout, in milliseconds. If you do not
 *   specify a value for {@link timeoutms}, then 0 will be assumed. A 0
 *   value means that no waiting will be performed; if there are messages
 *   pending they will be dispatched as before; if there are no messages
 *   pending, the function will return immediately without sleeping.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function com_message_pump($timeoutms){}

/**
 * The purpose of this function is to help generate a skeleton class for
 * use as an event sink. You may also use it to generate a dump of any
 * COM object, provided that it supports enough of the introspection
 * interfaces, and that you know the name of the interface you want to
 * display.
 * 
 * @param object $comobject {@link comobject} should be either an
 *   instance of a COM object, or be the name of a typelibrary (which
 *   will be resolved according to the rules set out in {@link
 *   com_load_typelib}).
 * @param string $dispinterface The name of an IDispatch descendant
 *   interface that you want to display.
 * @param bool $wantsink If set to , the corresponding sink interface
 *   will be displayed instead.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function com_print_typeinfo($comobject, $dispinterface, $wantsink){}

/**
 * Decreases the components reference counter.
 * 
 * @return void
 * @since PHP 4 >= 4.1.0
 **/
function com_release(){}

/**
 * Checks whether the client disconnected.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function connection_aborted(){}

/**
 * Gets the connection status bitfield.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function connection_status(){}

/**
 * Determines whether the script timed out.
 * 
 * @return int
 * @since PHP 4
 **/
function connection_timeout(){}

/**
 * @param string $name The constant name.
 * @return mixed
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function constant($name){}

/**
 * Converts from one Cyrillic character set to another.
 * 
 * @param string $str The string to be converted.
 * @param string $from The source Cyrillic character set, as a single
 *   character.
 * @param string $to The target Cyrillic character set, as a single
 *   character.
 * @return string
 * @since PHP 4, PHP 5
 **/
function convert_cyr_string($str, $from, $to){}

/**
 * {@link convert_uudecode} decodes a uuencoded string.
 * 
 * @param string $data The uuencoded data.
 * @return string
 * @since PHP 5
 **/
function convert_uudecode($data){}

/**
 * {@link convert_uuencode} encodes a string using the uuencode
 * algorithm.
 * 
 * Uuencode translates all strings (including binary's ones) into
 * printable characters, making them safe for network transmissions.
 * Uuencoded data is about 35% larger than the original.
 * 
 * @param string $data The data to be encoded.
 * @return string
 * @since PHP 5
 **/
function convert_uuencode($data){}

/**
 * Makes a copy of the file {@link source} to {@link dest}.
 * 
 * If you wish to move a file, use the {@link rename} function.
 * 
 * @param string $source Path to the source file.
 * @param string $dest The destination path. If {@link dest} is a URL,
 *   the copy operation may fail if the wrapper does not support
 *   overwriting of existing files.
 * @param resource $context A valid context resource created with
 *   {@link stream_context_create}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function copy($source, $dest, $context){}

/**
 * {@link cos} returns the cosine of the {@link arg} parameter. The
 * {@link arg} parameter is in radians.
 * 
 * @param float $arg An angle in radians
 * @return float
 * @since PHP 4, PHP 5
 **/
function cos($arg){}

/**
 * Returns the hyperbolic cosine of {@link arg}, defined as (exp(arg) +
 * exp(-arg))/2.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function cosh($arg){}

/**
 * Counts all elements in an array, or properties in an object.
 * 
 * For objects, if you have SPL installed, you can hook into {@link
 * count} by implementing interface Countable. The interface has exactly
 * one method, {@link count}, which returns the return value for the
 * {@link count} function.
 * 
 * Please see the Array section of the manual for a detailed explanation
 * of how arrays are implemented and used in PHP.
 * 
 * @param mixed $var The array.
 * @param int $mode If the optional {@link mode} parameter is set to
 *   COUNT_RECURSIVE (or 1), {@link count} will recursively count the
 *   array. This is particularly useful for counting all the elements of
 *   a multidimensional array. {@link count} does not detect infinite
 *   recursion.
 * @return int
 * @since PHP 4, PHP 5
 **/
function count($var, $mode){}

/**
 * Counts the number of occurrences of every byte-value (0..255) in
 * {@link string} and returns it in various ways.
 * 
 * @param string $string The examined string.
 * @param int $mode See return values.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function count_chars($string, $mode){}

/**
 * Performs an obscure check with the given password on the specified
 * dictionary.
 * 
 * @param resource $dictionary The crack lib dictionary. If not
 *   specified, the last opened dictionary is used.
 * @param string $password The tested password.
 * @return bool
 * @since PECL crack >= 0.1
 **/
function crack_check($dictionary, $password){}

/**
 * {@link crack_closedict} closes the specified {@link dictionary}
 * identifier.
 * 
 * @param resource $dictionary The dictionary to close. If not
 *   specified, the current dictionary is closed.
 * @return bool
 * @since PECL crack >= 0.1
 **/
function crack_closedict($dictionary){}

/**
 * {@link crack_getlastmessage} returns the message from the last obscure
 * check.
 * 
 * @return string
 * @since PECL crack >= 0.1
 **/
function crack_getlastmessage(){}

/**
 * {@link crack_opendict} opens the specified CrackLib {@link dictionary}
 * for use with {@link crack_check}.
 * 
 * @param string $dictionary The path to the Cracklib dictionary.
 * @return resource
 * @since PECL crack >= 0.1
 **/
function crack_opendict($dictionary){}

/**
 * Generates the cyclic redundancy checksum polynomial of 32-bit lengths
 * of the {@link str}. This is usually used to validate the integrity of
 * data being transmitted.
 * 
 * Because PHP's integer type is signed, and many crc32 checksums will
 * result in negative integers, you need to use the "%u" formatter of
 * {@link sprintf} or {@link printf} to get the string representation of
 * the unsigned crc32 checksum.
 * 
 * @param string $str The data.
 * @return int
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function crc32($str){}

/**
 * Creates an anonymous function from the parameters passed, and returns
 * a unique name for it.
 * 
 * @param string $args The function arguments.
 * @param string $code The function code.
 * @return string
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function create_function($args, $code){}

/**
 * {@link crypt} will return a hashed string using the standard Unix
 * DES-based algorithm or alternative algorithms that may be available on
 * the system.
 * 
 * Some operating systems support more than one type of hash. In fact,
 * sometimes the standard DES-based algorithm is replaced by an MD5-based
 * algorithm. The hash type is triggered by the salt argument. Prior to
 * 5.3, PHP would determine the available algorithms at install-time
 * based on the system's crypt(). If no salt is provided, PHP will
 * auto-generate either a standard two character (DES) salt, or a twelve
 * character (MD5), depending on the availability of MD5 crypt(). PHP
 * sets a constant named CRYPT_SALT_LENGTH which indicates the longest
 * valid salt allowed by the available hashes.
 * 
 * The standard DES-based {@link crypt} returns the salt as the first two
 * characters of the output. It also only uses the first eight characters
 * of {@link str}, so longer strings that start with the same eight
 * characters will generate the same result (when the same salt is used).
 * 
 * @param string $str The string to be hashed.
 * @param string $salt An optional salt string to base the hashing on.
 *   If not provided, the behaviour is defined by the algorithm
 *   implementation and can lead to unexpected results.
 * @return string
 * @since PHP 4, PHP 5
 **/
function crypt($str, $salt){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are alphanumeric. In the standard C locale letters are just [A-Za-z].
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_alnum($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are alphabetic. In the standard C locale letters are just [A-Za-z] and
 * {@link ctype_alpha} is equivalent to (ctype_upper($text) ||
 * ctype_lower($text)) if $text is just a single character, but other
 * languages have letters that are considered neither upper nor lower
 * case.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_alpha($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are control characters. Control characters are e.g. line feed, tab,
 * escape.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_cntrl($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are numerical.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_digit($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * creates visible output.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_graph($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are lowercase letters.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_lower($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are printable.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_print($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are punctuation character.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_punct($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * creates whitespace.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_space($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are uppercase characters.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_upper($text){}

/**
 * Checks if all of the characters in the provided string, {@link text},
 * are hexadecimal 'digits'.
 * 
 * @param string $text The tested string.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ctype_xdigit($text){}

/**
 * Closes a cURL session and frees all resources. The cURL handle, {@link
 * ch}, is also deleted.
 * 
 * @param resource $ch
 * @return void
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function curl_close($ch){}

/**
 * Copies a cURL handle keeping the same preferences.
 * 
 * @param resource $ch
 * @return resource
 * @since PHP 5
 **/
function curl_copy_handle($ch){}

/**
 * Returns the error number for the last cURL operation.
 * 
 * @param resource $ch
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function curl_errno($ch){}

/**
 * Returns a clear text error message for the last cURL operation.
 * 
 * @param resource $ch
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function curl_error($ch){}

/**
 * Execute the given cURL session.
 * 
 * This function should be called after initializing a cURL session and
 * all the options for the session are set.
 * 
 * @param resource $ch
 * @return mixed
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function curl_exec($ch){}

/**
 * Gets information about the last transfer.
 * 
 * @param resource $ch This may be one of the following constants:
 *   CURLINFO_EFFECTIVE_URL - Last effective URL CURLINFO_HTTP_CODE -
 *   Last received HTTP code CURLINFO_FILETIME - Remote time of the
 *   retrieved document, if -1 is returned the time of the document is
 *   unknown CURLINFO_TOTAL_TIME - Total transaction time in seconds for
 *   last transfer CURLINFO_NAMELOOKUP_TIME - Time in seconds until name
 *   resolving was complete CURLINFO_CONNECT_TIME - Time in seconds it
 *   took to establish the connection CURLINFO_PRETRANSFER_TIME - Time in
 *   seconds from start until just before file transfer begins
 *   CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte
 *   is about to be transferred CURLINFO_REDIRECT_TIME - Time in seconds
 *   of all redirection steps before final transaction was started
 *   CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded
 *   CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded
 *   CURLINFO_SPEED_DOWNLOAD - Average download speed
 *   CURLINFO_SPEED_UPLOAD - Average upload speed CURLINFO_HEADER_SIZE -
 *   Total size of all headers received CURLINFO_HEADER_OUT - The request
 *   string sent CURLINFO_REQUEST_SIZE - Total size of issued requests,
 *   currently only for HTTP requests CURLINFO_SSL_VERIFYRESULT - Result
 *   of SSL certification verification requested by setting
 *   CURLOPT_SSL_VERIFYPEER CURLINFO_CONTENT_LENGTH_DOWNLOAD -
 *   content-length of download, read from Content-Length: field
 *   CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload
 *   CURLINFO_CONTENT_TYPE - Content-Type: of downloaded object, NULL
 *   indicates server did not send valid Content-Type: header
 * @param int $opt
 * @return mixed
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function curl_getinfo($ch, $opt){}

/**
 * Initializes a new session and return a cURL handle for use with the
 * {@link curl_setopt}, {@link curl_exec}, and {@link curl_close}
 * functions.
 * 
 * @param string $url If provided, the CURLOPT_URL option will be set
 *   to its value. You can manually set this using the {@link
 *   curl_setopt} function.
 * @return resource
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function curl_init($url){}

/**
 * Adds the {@link ch} handle to the multi handle {@link mh}
 * 
 * @param resource $mh
 * @param resource $ch
 * @return int
 * @since PHP 5
 **/
function curl_multi_add_handle($mh, $ch){}

/**
 * Closes a set of cURL handles.
 * 
 * @param resource $mh
 * @return void
 * @since PHP 5
 **/
function curl_multi_close($mh){}

/**
 * Processes each of the handles in the stack. This method can be called
 * whether or not a handle needs to read or write data.
 * 
 * @param resource $mh A reference to a flag to tell whether the
 *   operations are still running.
 * @param int $still_running
 * @return int
 * @since PHP 5
 **/
function curl_multi_exec($mh, &$still_running){}

/**
 * If CURLOPT_RETURNTRANSFER is an option that is set for a specific
 * handle, then this function will return the content of that cURL handle
 * in the form of a string.
 * 
 * @param resource $ch
 * @return string
 * @since PHP 5
 **/
function curl_multi_getcontent($ch){}

/**
 * Ask the multi handle if there are any messages or information from the
 * individual transfers. Messages may include information such as an
 * error code from the transfer or just the fact that a transfer is
 * completed.
 * 
 * Repeated calls to this function will return a new result each time,
 * until a is returned as a signal that there is no more to get at this
 * point. The integer pointed to with {@link msgs_in_queue} will contain
 * the number of remaining messages after this function was called.
 * 
 * @param resource $mh Number of messages that are still in the queue
 * @param int $msgs_in_queue
 * @return array
 * @since PHP 5
 **/
function curl_multi_info_read($mh, &$msgs_in_queue){}

/**
 * Allows the processing of multiple cURL handles in parallel.
 * 
 * @return resource
 * @since PHP 5
 **/
function curl_multi_init(){}

/**
 * Removes a given {@link ch} handle from the given {@link mh} handle.
 * When the {@link ch} handle has been removed, it is again perfectly
 * legal to run {@link curl_exec} on this handle. Removing a handle while
 * being used, will effectively halt all transfers in progress.
 * 
 * @param resource $mh
 * @param resource $ch
 * @return int
 * @since PHP 5
 **/
function curl_multi_remove_handle($mh, $ch){}

/**
 * Blocks until there is activity on any of the curl_multi connections.
 * 
 * @param resource $mh Time, in seconds, to wait for a response.
 * @param float $timeout
 * @return int
 * @since PHP 5
 **/
function curl_multi_select($mh, $timeout){}

/**
 * Sets an option on the given cURL session handle.
 * 
 * @param resource $ch The CURLOPT_XXX option to set.
 * @param int $option The value to be set on {@link option}. {@link
 *   value} should be a bool for the following values of the {@link
 *   option} parameter: Option Set {@link value} to Notes
 *   CURLOPT_AUTOREFERER to automatically set the Referer: field in
 *   requests where it follows a Location: redirect.
 *   CURLOPT_BINARYTRANSFER to return the raw output when
 *   CURLOPT_RETURNTRANSFER is used. CURLOPT_COOKIESESSION to mark this
 *   as a new cookie "session". It will force libcurl to ignore all
 *   cookies it is about to load that are "session cookies" from the
 *   previous session. By default, libcurl always stores and loads all
 *   cookies, independent if they are session cookies or not. Session
 *   cookies are cookies without expiry date and they are meant to be
 *   alive and existing for this "session" only. CURLOPT_CRLF to convert
 *   Unix newlines to CRLF newlines on transfers.
 *   CURLOPT_DNS_USE_GLOBAL_CACHE to use a global DNS cache. This option
 *   is not thread-safe and is enabled by default. CURLOPT_FAILONERROR to
 *   fail silently if the HTTP code returned is greater than or equal to
 *   400. The default behavior is to return the page normally, ignoring
 *   the code. CURLOPT_FILETIME to attempt to retrieve the modification
 *   date of the remote document. This value can be retrieved using the
 *   {@link CURLINFO_FILETIME} option with {@link curl_getinfo}.
 *   CURLOPT_FOLLOWLOCATION to follow any "Location: " header that the
 *   server sends as part of the HTTP header (note this is recursive, PHP
 *   will follow as many "Location: " headers that it is sent, unless
 *   CURLOPT_MAXREDIRS is set). CURLOPT_FORBID_REUSE to force the
 *   connection to explicitly close when it has finished processing, and
 *   not be pooled for reuse. CURLOPT_FRESH_CONNECT to force the use of a
 *   new connection instead of a cached one. CURLOPT_FTP_USE_EPRT to use
 *   EPRT (and LPRT) when doing active FTP downloads. Use to disable EPRT
 *   and LPRT and use PORT only. CURLOPT_FTP_USE_EPSV to first try an
 *   EPSV command for FTP transfers before reverting back to PASV. Set to
 *   to disable EPSV. CURLOPT_FTPAPPEND to append to the remote file
 *   instead of overwriting it. CURLOPT_FTPASCII An alias of
 *   CURLOPT_TRANSFERTEXT. Use that instead. CURLOPT_FTPLISTONLY to only
 *   list the names of an FTP directory. CURLOPT_HEADER to include the
 *   header in the output. CURLINFO_HEADER_OUT to track the handle's
 *   request string. Available since PHP 5.1.3. The CURLINFO_ prefix is
 *   intentional. CURLOPT_HTTPGET to reset the HTTP request method to
 *   GET. Since GET is the default, this is only necessary if the request
 *   method has been changed. CURLOPT_HTTPPROXYTUNNEL to tunnel through a
 *   given HTTP proxy. CURLOPT_MUTE to be completely silent with regards
 *   to the cURL functions. CURLOPT_NETRC to scan the ~/.netrc file to
 *   find a username and password for the remote site that a connection
 *   is being established with. CURLOPT_NOBODY to exclude the body from
 *   the output. Request method is then set to HEAD. Changing this to
 *   does not change it to GET. CURLOPT_NOPROGRESS to disable the
 *   progress meter for cURL transfers. PHP automatically sets this
 *   option to , this should only be changed for debugging purposes.
 *   CURLOPT_NOSIGNAL to ignore any cURL function that causes a signal to
 *   be sent to the PHP process. This is turned on by default in
 *   multi-threaded SAPIs so timeout options can still be used. Added in
 *   cURL 7.10. CURLOPT_POST to do a regular HTTP POST. This POST is the
 *   normal application/x-www-form-urlencoded kind, most commonly used by
 *   HTML forms. CURLOPT_PUT to HTTP PUT a file. The file to PUT must be
 *   set with CURLOPT_INFILE and CURLOPT_INFILESIZE.
 *   CURLOPT_RETURNTRANSFER to return the transfer as a string of the
 *   return value of {@link curl_exec} instead of outputting it out
 *   directly. CURLOPT_SSL_VERIFYPEER to stop cURL from verifying the
 *   peer's certificate. Alternate certificates to verify against can be
 *   specified with the CURLOPT_CAINFO option or a certificate directory
 *   can be specified with the CURLOPT_CAPATH option.
 *   CURLOPT_SSL_VERIFYHOST may also need to be or if
 *   CURLOPT_SSL_VERIFYPEER is disabled (it defaults to 2). by default as
 *   of cURL 7.10. Default bundle installed as of cURL 7.10.
 *   CURLOPT_TRANSFERTEXT to use ASCII mode for FTP transfers. For LDAP,
 *   it retrieves data in plain text instead of HTML. On Windows systems,
 *   it will not set STDOUT to binary mode. CURLOPT_UNRESTRICTED_AUTH to
 *   keep sending the username and password when following locations
 *   (using CURLOPT_FOLLOWLOCATION), even when the hostname has changed.
 *   CURLOPT_UPLOAD to prepare for an upload. CURLOPT_VERBOSE to output
 *   verbose information. Writes output to STDERR, or the file specified
 *   using CURLOPT_STDERR. {@link value} should be an integer for the
 *   following values of the {@link option} parameter: Option Set {@link
 *   value} to Notes CURLOPT_BUFFERSIZE The size of the buffer to use for
 *   each read. There is no guarantee this request will be fulfilled,
 *   however. Added in cURL 7.10. CURLOPT_CLOSEPOLICY Either {@link
 *   CURLCLOSEPOLICY_LEAST_RECENTLY_USED} or {@link
 *   CURLCLOSEPOLICY_OLDEST}. There are three other CURLCLOSEPOLICY_
 *   constants, but cURL does not support them yet.
 *   CURLOPT_CONNECTTIMEOUT The number of seconds to wait while trying to
 *   connect. Use 0 to wait indefinitely. CURLOPT_CONNECTTIMEOUT_MS The
 *   number of milliseconds to wait while trying to connect. Use 0 to
 *   wait indefinitely. Added in cURL 7.16.2. Available since PHP 5.2.3.
 *   CURLOPT_DNS_CACHE_TIMEOUT The number of seconds to keep DNS entries
 *   in memory. This option is set to 120 (2 minutes) by default.
 *   CURLOPT_FTPSSLAUTH The FTP authentication method (when is
 *   activated): CURLFTPAUTH_SSL (try SSL first), CURLFTPAUTH_TLS (try
 *   TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide). Added in cURL
 *   7.12.2. CURLOPT_HTTP_VERSION {@link CURL_HTTP_VERSION_NONE}
 *   (default, lets CURL decide which version to use), {@link
 *   CURL_HTTP_VERSION_1_0} (forces HTTP/1.0), or {@link
 *   CURL_HTTP_VERSION_1_1} (forces HTTP/1.1). CURLOPT_HTTPAUTH The HTTP
 *   authentication method(s) to use. The options are: {@link
 *   CURLAUTH_BASIC}, {@link CURLAUTH_DIGEST}, {@link
 *   CURLAUTH_GSSNEGOTIATE}, {@link CURLAUTH_NTLM}, {@link CURLAUTH_ANY},
 *   and {@link CURLAUTH_ANYSAFE}. The bitwise | (or) operator can be
 *   used to combine more than one method. If this is done, cURL will
 *   poll the server to see what methods it supports and pick the best
 *   one. {@link CURLAUTH_ANY} is an alias for CURLAUTH_BASIC |
 *   CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM. {@link
 *   CURLAUTH_ANYSAFE} is an alias for CURLAUTH_DIGEST |
 *   CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM. CURLOPT_INFILESIZE The
 *   expected size, in bytes, of the file when uploading a file to a
 *   remote site. CURLOPT_LOW_SPEED_LIMIT The transfer speed, in bytes
 *   per second, that the transfer should be below during the count of
 *   CURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too
 *   slow and aborts. CURLOPT_LOW_SPEED_TIME The number of seconds the
 *   transfer speed should be below CURLOPT_LOW_SPEED_LIMIT before PHP
 *   considers the transfer too slow and aborts. CURLOPT_MAXCONNECTS The
 *   maximum amount of persistent connections that are allowed. When the
 *   limit is reached, CURLOPT_CLOSEPOLICY is used to determine which
 *   connection to close. CURLOPT_MAXREDIRS The maximum amount of HTTP
 *   redirections to follow. Use this option alongside
 *   CURLOPT_FOLLOWLOCATION. CURLOPT_PORT An alternative port number to
 *   connect to. CURLOPT_PROTOCOLS Bitmask of CURLPROTO_* values. If
 *   used, this bitmask limits what protocols libcurl may use in the
 *   transfer. This allows you to have a libcurl built to support a wide
 *   range of protocols but still limit specific transfers to only be
 *   allowed to use a subset of them. By default libcurl will accept all
 *   protocols it supports. See also CURLOPT_REDIR_PROTOCOLS. Valid
 *   protocol options are: {@link CURLPROTO_HTTP}, {@link
 *   CURLPROTO_HTTPS}, {@link CURLPROTO_FTP}, {@link CURLPROTO_FTPS},
 *   {@link CURLPROTO_SCP}, {@link CURLPROTO_SFTP}, {@link
 *   CURLPROTO_TELNET}, {@link CURLPROTO_LDAP}, {@link CURLPROTO_LDAPS},
 *   {@link CURLPROTO_DICT}, {@link CURLPROTO_FILE}, {@link
 *   CURLPROTO_TFTP}, {@link CURLPROTO_ALL} Added in cURL 7.19.4.
 *   CURLOPT_PROXYAUTH The HTTP authentication method(s) to use for the
 *   proxy connection. Use the same bitmasks as described in
 *   CURLOPT_HTTPAUTH. For proxy authentication, only {@link
 *   CURLAUTH_BASIC} and {@link CURLAUTH_NTLM} are currently supported.
 *   Added in cURL 7.10.7. CURLOPT_PROXYPORT The port number of the proxy
 *   to connect to. This port number can also be set in CURLOPT_PROXY.
 *   CURLOPT_PROXYTYPE Either {@link CURLPROXY_HTTP} (default) or {@link
 *   CURLPROXY_SOCKS5}. Added in cURL 7.10. CURLOPT_REDIR_PROTOCOLS
 *   Bitmask of CURLPROTO_* values. If used, this bitmask limits what
 *   protocols libcurl may use in a transfer that it follows to in a
 *   redirect when CURLOPT_FOLLOWLOCATION is enabled. This allows you to
 *   limit specific transfers to only be allowed to use a subset of
 *   protocols in redirections. By default libcurl will allow all
 *   protocols except for FILE and SCP. This is a difference compared to
 *   pre-7.19.4 versions which unconditionally would follow to all
 *   protocols supported. See also CURLOPT_PROTOCOLS for protocol
 *   constant values. Added in cURL 7.19.4. CURLOPT_RESUME_FROM The
 *   offset, in bytes, to resume a transfer from. CURLOPT_SSL_VERIFYHOST
 *   1 to check the existence of a common name in the SSL peer
 *   certificate. 2 to check the existence of a common name and also
 *   verify that it matches the hostname provided. CURLOPT_SSLVERSION The
 *   SSL version (2 or 3) to use. By default PHP will try to determine
 *   this itself, although in some cases this must be set manually.
 *   CURLOPT_TIMECONDITION How CURLOPT_TIMEVALUE is treated. Use {@link
 *   CURL_TIMECOND_IFMODSINCE} to return the page only if it has been
 *   modified since the time specified in CURLOPT_TIMEVALUE. If it hasn't
 *   been modified, a "304 Not Modified" header will be returned assuming
 *   CURLOPT_HEADER is . Use {@link CURL_TIMECOND_IFUNMODSINCE} for the
 *   reverse effect. {@link CURL_TIMECOND_IFMODSINCE} is the default.
 *   CURLOPT_TIMEOUT The maximum number of seconds to allow cURL
 *   functions to execute. CURLOPT_TIMEOUT_MS The maximum number of
 *   milliseconds to allow cURL functions to execute. Added in cURL
 *   7.16.2. Available since PHP 5.2.3. CURLOPT_TIMEVALUE The time in
 *   seconds since January 1st, 1970. The time will be used by
 *   CURLOPT_TIMECONDITION. By default, {@link CURL_TIMECOND_IFMODSINCE}
 *   is used. {@link value} should be a string for the following values
 *   of the {@link option} parameter: Option Set {@link value} to Notes
 *   CURLOPT_CAINFO The name of a file holding one or more certificates
 *   to verify the peer with. This only makes sense when used in
 *   combination with CURLOPT_SSL_VERIFYPEER. CURLOPT_CAPATH A directory
 *   that holds multiple CA certificates. Use this option alongside
 *   CURLOPT_SSL_VERIFYPEER. CURLOPT_COOKIE The contents of the "Cookie:
 *   " header to be used in the HTTP request. Note that multiple cookies
 *   are separated with a semicolon followed by a space (e.g.,
 *   "fruit=apple; colour=red") CURLOPT_COOKIEFILE The name of the file
 *   containing the cookie data. The cookie file can be in Netscape
 *   format, or just plain HTTP-style headers dumped into a file.
 *   CURLOPT_COOKIEJAR The name of a file to save all internal cookies to
 *   when the connection closes. CURLOPT_CUSTOMREQUEST A custom request
 *   method to use instead of "GET" or "HEAD" when doing a HTTP request.
 *   This is useful for doing "DELETE" or other, more obscure HTTP
 *   requests. Valid values are things like "GET", "POST", "CONNECT" and
 *   so on; i.e. Do not enter a whole HTTP request line here. For
 *   instance, entering "GET /index.html HTTP/1.0\r\n\r\n" would be
 *   incorrect. Don't do this without making sure the server supports the
 *   custom request method first. CURLOPT_EGDSOCKET Like
 *   CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering
 *   Daemon socket. CURLOPT_ENCODING The contents of the
 *   "Accept-Encoding: " header. This enables decoding of the response.
 *   Supported encodings are "identity", "deflate", and "gzip". If an
 *   empty string, "", is set, a header containing all supported encoding
 *   types is sent. Added in cURL 7.10. CURLOPT_FTPPORT The value which
 *   will be used to get the IP address to use for the FTP "POST"
 *   instruction. The "POST" instruction tells the remote server to
 *   connect to our specified IP address. The string may be a plain IP
 *   address, a hostname, a network interface name (under Unix), or just
 *   a plain '-' to use the systems default IP address. CURLOPT_INTERFACE
 *   The name of the outgoing network interface to use. This can be an
 *   interface name, an IP address or a host name. CURLOPT_KRB4LEVEL The
 *   KRB4 (Kerberos 4) security level. Any of the following values (in
 *   order from least to most powerful) are valid: "clear", "safe",
 *   "confidential", "private".. If the string does not match one of
 *   these, "private" is used. Setting this option to will disable KRB4
 *   security. Currently KRB4 security only works with FTP transactions.
 *   CURLOPT_POSTFIELDS The full data to post in a HTTP "POST" operation.
 *   To post a file, prepend a filename with @ and use the full path.
 *   This can either be passed as a urlencoded string like
 *   'para1=val1&para2=val2&...' or as an array with the field name as
 *   key and field data as value. If {@link value} is an array, the
 *   Content-Type header will be set to multipart/form-data.
 *   CURLOPT_PROXY The HTTP proxy to tunnel requests through.
 *   CURLOPT_PROXYUSERPWD A username and password formatted as
 *   "[username]:[password]" to use for the connection to the proxy.
 *   CURLOPT_RANDOM_FILE A filename to be used to seed the random number
 *   generator for SSL. CURLOPT_RANGE Range(s) of data to retrieve in the
 *   format "X-Y" where X or Y are optional. HTTP transfers also support
 *   several intervals, separated with commas in the format "X-Y,N-M".
 *   CURLOPT_REFERER The contents of the "Referer: " header to be used in
 *   a HTTP request. CURLOPT_SSL_CIPHER_LIST A list of ciphers to use for
 *   SSL. For example, RC4-SHA and TLSv1 are valid cipher lists.
 *   CURLOPT_SSLCERT The name of a file containing a PEM formatted
 *   certificate. CURLOPT_SSLCERTPASSWD The password required to use the
 *   CURLOPT_SSLCERT certificate. CURLOPT_SSLCERTTYPE The format of the
 *   certificate. Supported formats are "PEM" (default), "DER", and
 *   "ENG". Added in cURL 7.9.3. CURLOPT_SSLENGINE The identifier for the
 *   crypto engine of the private SSL key specified in CURLOPT_SSLKEY.
 *   CURLOPT_SSLENGINE_DEFAULT The identifier for the crypto engine used
 *   for asymmetric crypto operations. CURLOPT_SSLKEY The name of a file
 *   containing a private SSL key. CURLOPT_SSLKEYPASSWD The secret
 *   password needed to use the private SSL key specified in
 *   CURLOPT_SSLKEY. Since this option contains a sensitive password,
 *   remember to keep the PHP script it is contained within safe.
 *   CURLOPT_SSLKEYTYPE The key type of the private SSL key specified in
 *   CURLOPT_SSLKEY. Supported key types are "PEM" (default), "DER", and
 *   "ENG". CURLOPT_URL The URL to fetch. This can also be set when
 *   initializing a session with {@link curl_init}. CURLOPT_USERAGENT The
 *   contents of the "User-Agent: " header to be used in a HTTP request.
 *   CURLOPT_USERPWD A username and password formatted as
 *   "[username]:[password]" to use for the connection. {@link value}
 *   should be an array for the following values of the {@link option}
 *   parameter: Option Set {@link value} to Notes CURLOPT_HTTP200ALIASES
 *   An array of HTTP 200 responses that will be treated as valid
 *   responses and not as errors. Added in cURL 7.10.3.
 *   CURLOPT_HTTPHEADER An array of HTTP header fields to set, in the
 *   format array('Content-type: text/plain', 'Content-length: 100')
 *   CURLOPT_POSTQUOTE An array of FTP commands to execute on the server
 *   after the FTP request has been performed. CURLOPT_QUOTE An array of
 *   FTP commands to execute on the server prior to the FTP request.
 *   {@link value} should be a stream resource (using {@link fopen}, for
 *   example) for the following values of the {@link option} parameter:
 *   Option Set {@link value} to CURLOPT_FILE The file that the transfer
 *   should be written to. The default is STDOUT (the browser window).
 *   CURLOPT_INFILE The file that the transfer should be read from when
 *   uploading. CURLOPT_STDERR An alternative location to output errors
 *   to instead of STDERR. CURLOPT_WRITEHEADER The file that the header
 *   part of the transfer is written to. {@link value} should be a string
 *   that is the name of a valid callback function for the following
 *   values of the {@link option} parameter: Option Set {@link value} to
 *   CURLOPT_HEADERFUNCTION The name of a callback function where the
 *   callback function takes two parameters. The first is the cURL
 *   resource, the second is a string with the header data to be written.
 *   The header data must be written when using this callback function.
 *   Return the number of bytes written. CURLOPT_PASSWDFUNCTION The name
 *   of a callback function where the callback function takes three
 *   parameters. The first is the cURL resource, the second is a string
 *   containing a password prompt, and the third is the maximum password
 *   length. Return the string containing the password.
 *   CURLOPT_PROGRESSFUNCTION The name of a callback function where the
 *   callback function takes three parameters. The first is the cURL
 *   resource, the second is a file-descriptor resource, and the third is
 *   length. Return the string containing the data. CURLOPT_READFUNCTION
 *   The name of a callback function where the callback function takes
 *   two parameters. The first is the cURL resource, and the second is a
 *   string with the data to be read. The data must be read by using this
 *   callback function. Return the number of bytes read. Return 0 to
 *   signal EOF. CURLOPT_WRITEFUNCTION The name of a callback function
 *   where the callback function takes two parameters. The first is the
 *   cURL resource, and the second is a string with the data to be
 *   written. The data must be written by using this callback function.
 *   Must return the exact number of bytes written or this will fail.
 * @param mixed $value
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function curl_setopt($ch, $option, $value){}

/**
 * Sets multiple options for a cURL session. This function is useful for
 * setting a large amount of cURL options without repetitively calling
 * {@link curl_setopt}.
 * 
 * @param resource $ch An array specifying which options to set and
 *   their values. The keys should be valid {@link curl_setopt} constants
 *   or their integer equivalents.
 * @param array $options
 * @return bool
 * @since PHP 5 >= 5.1.3
 **/
function curl_setopt_array($ch, $options){}

/**
 * Returns information about the cURL version.
 * 
 * @param int $age
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function curl_version($age){}

/**
 * Every array has an internal pointer to its "current" element, which is
 * initialized to the first element inserted into the array.
 * 
 * @param array $array The array.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function current(&$array){}

/**
 * @param resource $connection
 * @param string $mechlist
 * @param string $service
 * @param string $user
 * @param int $minssf
 * @param int $maxssf
 * @param string $authname
 * @param string $password
 * @return void
 * @since PHP 4 >= 4.1.0, PECL cyrus 1.0
 **/
function cyrus_authenticate($connection, $mechlist, $service, $user, $minssf, $maxssf, $authname, $password){}

/**
 * Binds callbacks to a Cyrus IMAP connection.
 * 
 * @param resource $connection The connection handle.
 * @param array $callbacks An array of callbacks.
 * @return bool
 * @since PHP 4 >= 4.1.0, PECL cyrus 1.0
 **/
function cyrus_bind($connection, $callbacks){}

/**
 * Closes the connection to a Cyrus IMAP server.
 * 
 * @param resource $connection The connection handle.
 * @return bool
 * @since PHP 4 >= 4.1.0, PECL cyrus 1.0
 **/
function cyrus_close($connection){}

/**
 * Connects to a Cyrus IMAP server.
 * 
 * @param string $host The Cyrus IMAP host name.
 * @param string $port The port number.
 * @param int $flags
 * @return resource
 * @since PHP 4 >= 4.1.0, PECL cyrus 1.0
 **/
function cyrus_connect($host, $port, $flags){}

/**
 * Sends a query to a Cyrus IMAP server.
 * 
 * @param resource $connection The connection handle.
 * @param string $query The query string.
 * @return array
 * @since PHP 4 >= 4.1.0, PECL cyrus 1.0
 **/
function cyrus_query($connection, $query){}

/**
 * @param resource $connection The connection handle.
 * @param string $trigger_name The trigger name.
 * @return bool
 * @since PHP 4 >= 4.1.0, PECL cyrus 1.0
 **/
function cyrus_unbind($connection, $trigger_name){}

/**
 * Returns a string formatted according to the given format string using
 * the given integer {@link timestamp} or the current time if no
 * timestamp is given. In other words, {@link timestamp} is optional and
 * defaults to the value of {@link time}.
 * 
 * @param string $format The format of the outputted date string. See
 *   the formatting options below. There are also several predefined date
 *   constants that may be used instead, so for example DATE_RSS contains
 *   the format string 'D, d M Y H:i:s'.
 *   
 *   The following characters are recognized in the {@link format}
 *   parameter string {@link format} character Description Example
 *   returned values Day --- --- d Day of the month, 2 digits with
 *   leading zeros 01 to 31 D A textual representation of a day, three
 *   letters Mon through Sun j Day of the month without leading zeros 1
 *   to 31 l (lowercase 'L') A full textual representation of the day of
 *   the week Sunday through Saturday N ISO-8601 numeric representation
 *   of the day of the week (added in PHP 5.1.0) 1 (for Monday) through 7
 *   (for Sunday) S English ordinal suffix for the day of the month, 2
 *   characters st, nd, rd or th. Works well with j w Numeric
 *   representation of the day of the week 0 (for Sunday) through 6 (for
 *   Saturday) z The day of the year (starting from 0) 0 through 365 Week
 *   --- --- W ISO-8601 week number of year, weeks starting on Monday
 *   (added in PHP 4.1.0) Example: 42 (the 42nd week in the year) Month
 *   --- --- F A full textual representation of a month, such as January
 *   or March January through December m Numeric representation of a
 *   month, with leading zeros 01 through 12 M A short textual
 *   representation of a month, three letters Jan through Dec n Numeric
 *   representation of a month, without leading zeros 1 through 12 t
 *   Number of days in the given month 28 through 31 Year --- --- L
 *   Whether it's a leap year 1 if it is a leap year, 0 otherwise. o
 *   ISO-8601 year number. This has the same value as Y, except that if
 *   the ISO week number (W) belongs to the previous or next year, that
 *   year is used instead. (added in PHP 5.1.0) Examples: 1999 or 2003 Y
 *   A full numeric representation of a year, 4 digits Examples: 1999 or
 *   2003 y A two digit representation of a year Examples: 99 or 03 Time
 *   --- --- a Lowercase Ante meridiem and Post meridiem am or pm A
 *   Uppercase Ante meridiem and Post meridiem AM or PM B Swatch Internet
 *   time 000 through 999 g 12-hour format of an hour without leading
 *   zeros 1 through 12 G 24-hour format of an hour without leading zeros
 *   0 through 23 h 12-hour format of an hour with leading zeros 01
 *   through 12 H 24-hour format of an hour with leading zeros 00 through
 *   23 i Minutes with leading zeros 00 to 59 s Seconds, with leading
 *   zeros 00 through 59 u Microseconds (added in PHP 5.2.2) Example:
 *   654321 Timezone --- --- e Timezone identifier (added in PHP 5.1.0)
 *   Examples: UTC, GMT, Atlantic/Azores I (capital i) Whether or not the
 *   date is in daylight saving time 1 if Daylight Saving Time, 0
 *   otherwise. O Difference to Greenwich time (GMT) in hours Example:
 *   +0200 P Difference to Greenwich time (GMT) with colon between hours
 *   and minutes (added in PHP 5.1.3) Example: +02:00 T Timezone
 *   abbreviation Examples: EST, MDT ... Z Timezone offset in seconds.
 *   The offset for timezones west of UTC is always negative, and for
 *   those east of UTC is always positive. -43200 through 50400 Full
 *   Date/Time --- --- c ISO 8601 date (added in PHP 5)
 *   2004-02-12T15:19:21+00:00 r RFC 2822 formatted date Example: Thu, 21
 *   Dec 2000 16:01:07 +0200 U Seconds since the Unix Epoch (January 1
 *   1970 00:00:00 GMT) See also {@link time} Unrecognized characters in
 *   the format string will be printed as-is. The Z format will always
 *   return 0 when using {@link gmdate}.
 * @param int $timestamp
 * @return string
 * @since PHP 4, PHP 5
 **/
function date($format, $timestamp){}

/**
 * Create a date formatter
 * 
 * @param string $locale Locale to use when formatting or parsing.
 * @param int $datetype Date type to use (none, short, medium, long,
 *   full). This is one of the IntlDateFormatter constants.
 * @param int $timetype Time type to use (none, short, medium, long,
 *   full). This is one of the IntlDateFormatter constants.
 * @param string $timezone Time zone ID, default is system default.
 * @param int $calendar Calendar to use for formatting or parsing;
 *   default is Gregorian. This is one of the IntlDateFormatter calendar
 *   constants.
 * @param string $pattern Optional pattern to use when formatting or
 *   parsing. Possible patterns are documented at .
 * @return IntlDateFormatter
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_create($locale, $datetype, $timetype, $timezone, $calendar, $pattern){}

/**
 * Formats the time value as a string.
 * 
 * @param IntlDateFormatter $fmt The date formatter resource.
 * @param mixed $value Value to format. Can be integer for an Unix
 *   timestamp value (seconds since epoch, UTC) or array for a {@link
 *   localtime} array.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_format($fmt, $value){}

/**
 * @param IntlDateFormatter $fmt The formatter resource
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_calendar($fmt){}

/**
 * Returns date type used by the formatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_datetype($fmt){}

/**
 * Get the error code from last operation. Returns error code from the
 * last number formatting operation.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_error_code($fmt){}

/**
 * Get the error text from the last operation.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_error_message($fmt){}

/**
 * Get locale used by the formatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource
 * @param int $which You can choose between valid and actual locale (
 *   Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). The
 *   default is the actual locale.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_locale($fmt, $which){}

/**
 * Get pattern used by the formatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_pattern($fmt){}

/**
 * Return time type used by the formatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_timetype($fmt){}

/**
 * Get the timezone-id used for the IntlDateFormatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_get_timezone_id($fmt){}

/**
 * Check if the parser is strict or lenient in interpreting inputs that
 * do not match the pattern exactly.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_is_lenient($fmt){}

/**
 * Converts string $value to a field-based time value ( an array of
 * various fields), starting at $parse_pos and consuming as much of the
 * input value as possible.
 * 
 * @param IntlDateFormatter $fmt The formatter resource
 * @param string $value string to convert to a time
 * @param int $position Position at which to start the parsing in
 *   $value (zero-based). If no error occurs before $value is consumed,
 *   $parse_pos will contain -1 otherwise it will contain the position at
 *   which parsing ended . If $parse_pos > strlen($value), the parse
 *   fails immediately.
 * @return array
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_localtime($fmt, $value, &$position){}

/**
 * Converts string $value to an incremental time value, starting at
 * $parse_pos and consuming as much of the input value as possible.
 * 
 * @param IntlDateFormatter $fmt The formatter resource
 * @param string $value string to convert to a time
 * @param int $position Position at which to start the parsing in
 *   $value (zero-based). If no error occurs before $value is consumed,
 *   $parse_pos will contain -1 otherwise it will contain the position at
 *   which parsing ended (and the error occurred). This variable will
 *   contain the end position if the parse fails. If $parse_pos >
 *   strlen($value), the parse fails immediately.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_parse($fmt, $value, &$position){}

/**
 * Sets the calendar used by the formatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @param int $which The calendar to use. Default is
 *   IntlDateFormatter::GREGORIAN.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_set_calendar($fmt, $which){}

/**
 * Define if the parser is strict or lenient in interpreting inputs that
 * do not match the pattern exactly. Enabling lenient parsing allows the
 * parser to accept otherwise flawed date or time patterns, parsing as
 * much as possible to obtain a value. Extra space, unrecognized tokens,
 * or invalid values ("February 30th") are not accepted.
 * 
 * @param IntlDateFormatter $fmt The formatter resource
 * @param bool $lenient Sets whether the parser is lenient or not,
 *   default is (strict).
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_set_lenient($fmt, $lenient){}

/**
 * Set the pattern used for the IntlDateFormatter.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @param string $pattern New pattern string to use. Possible patterns
 *   are documented at .
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_set_pattern($fmt, $pattern){}

/**
 * Sets the time zone to use.
 * 
 * @param IntlDateFormatter $fmt The formatter resource.
 * @param string $zone The time zone ID string of the time zone to use.
 *   If or the empty string, the default time zone for the runtime is
 *   used.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function datefmt_set_timezone_id($fmt, $zone){}

/**
 * Adds the specified DateInterval object to the specified DateTime
 * object.
 * 
 * @param DateTime $object A DateInterval object
 * @param DateInterval $interval
 * @return DateTime
 * @since PHP 5 >= 5.3.0
 **/
function date_add($object, $interval){}

/**
 * Returns new DateTime object.
 * 
 * @param string $time Enter here to obtain the current time when using
 *   the {@link $timezone} parameter.
 * @param DateTimeZone $timezone A DateTimeZone object representing the
 *   desired time zone. If {@link $timezone} is omitted, the current
 *   timezone will be used.
 * @return DateTime
 * @since PHP 5 >= 5.2.0
 **/
function date_create($time, $timezone){}

/**
 * Returns new DateTime object formatted according to the specified
 * format.
 * 
 * @param string $format Format accepted by {@link date}. If {@link
 *   format} does not contain the character ! then portions of the
 *   generated time which are not specified in {@link format} will be set
 *   to the current system time. If {@link format} contains the character
 *   !, then portions of the generated time not provided in {@link
 *   format}, as well as values to the left-hand side of the !, will be
 *   set to corresponding values from the Unix epoch. The Unix epoch is
 *   1970-01-01 00:00:00 UTC.
 * @param string $time String representing the time.
 * @param DateTimeZone $timezone A DateTimeZone object representing the
 *   desired time zone.
 * @return DateTime
 * @since PHP 5 >= 5.3.0
 **/
function date_create_from_format($format, $time, $timezone){}

/**
 * Resets the current date of the DateTime object to a different date.
 * 
 * @param DateTime $object Year of the date.
 * @param int $year Month of the date.
 * @param int $month Day of the date.
 * @param int $day
 * @return DateTime
 * @since PHP 5 >= 5.2.0
 **/
function date_date_set($object, $year, $month, $day){}

/**
 * In order of preference, this function returns the default timezone by:
 * Reading the timezone set using the {@link date_default_timezone_set}
 * function (if any) Reading the TZ environment variable (if non empty)
 * (Prior to PHP 5.3.0) Reading the value of the date.timezone ini option
 * (if set) Querying the host operating system (if supported and allowed
 * by the OS)
 * 
 * If none of the above succeed, date_default_timezone_get will return a
 * default timezone of UTC.
 * 
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function date_default_timezone_get(){}

/**
 * {@link date_default_timezone_set} sets the default timezone used by
 * all date/time functions.
 * 
 * Instead of using this function to set the default timezone in your
 * script, you can also use the INI setting date.timezone to set the
 * default timezone.
 * 
 * @param string $timezone_identifier The timezone identifier, like UTC
 *   or Europe/Lisbon. The list of valid identifiers is available in the
 *   .
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function date_default_timezone_set($timezone_identifier){}

/**
 * Returns the difference between two DateTime objects.
 * 
 * @param DateTime $datetime1 The date to compare to.
 * @param DateTime $datetime2 Whether to return absolute difference.
 * @param bool $absolute
 * @return DateInterval
 * @since PHP 5 >= 5.3.0
 **/
function date_diff($datetime1, $datetime2, $absolute){}

/**
 * Returns date formatted according to given format.
 * 
 * @param DateTime $object Format accepted by {@link date}.
 * @param string $format
 * @return string
 * @since PHP 5 >= 5.2.0
 **/
function date_format($object, $format){}

/**
 * Returns an array of warnings and errors found while parsing a
 * date/time string.
 * 
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function date_get_last_errors(){}

/**
 * Set a date according to the ISO 8601 standard - using weeks and day
 * offsets rather than specific dates.
 * 
 * @param DateTime $object Year of the date.
 * @param int $year Week of the date.
 * @param int $week Offset from the first day of the week.
 * @param int $day
 * @return DateTime
 * @since PHP 5 >= 5.2.0
 **/
function date_isodate_set($object, $year, $week, $day){}

/**
 * Alter the timestamp of a DateTime object by incrementing or
 * decrementing in a format accepted by {@link strtotime}.
 * 
 * @param DateTime $object
 * @param string $modify
 * @return DateTime
 * @since PHP 5 >= 5.2.0
 **/
function date_modify($object, $modify){}

/**
 * Returns the timezone offset.
 * 
 * @param DateTime $object
 * @return int
 * @since PHP 5 >= 5.2.0
 **/
function date_offset_get($object){}

/**
 * @param string $date Date in format accepted by {@link strtotime}.
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function date_parse($date){}

/**
 * Returns associative array with detailed info about given date.
 * 
 * @param string $format Format accepted by {@link date} with some
 *   extras.
 * @param string $date String representing the date.
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function date_parse_from_format($format, $date){}

/**
 * Subtracts the specified DateInterval object from the specified
 * DateTime object.
 * 
 * @param DateTime $object A DateInterval object
 * @param DateInterval $interval
 * @return DateTime
 * @since PHP 5 >= 5.3.0
 **/
function date_sub($object, $interval){}

/**
 * {@link date_sunrise} returns the sunrise time for a given day
 * (specified as a {@link timestamp}) and location.
 * 
 * @param int $timestamp The {@link timestamp} of the day from which
 *   the sunrise time is taken.
 * @param int $format {@link format} constants constant description
 *   example SUNFUNCS_RET_STRING returns the result as string 16:46
 *   SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132
 *   SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp)
 *   1095034606
 * @param float $latitude Defaults to North, pass in a negative value
 *   for South. See also: date.default_latitude
 * @param float $longitude Defaults to East, pass in a negative value
 *   for West. See also: date.default_longitude
 * @param float $zenith Default: date.sunrise_zenith
 * @param float $gmt_offset Specified in hours.
 * @return mixed
 * @since PHP 5
 **/
function date_sunrise($timestamp, $format, $latitude, $longitude, $zenith, $gmt_offset){}

/**
 * {@link date_sunset} returns the sunset time for a given day (specified
 * as a {@link timestamp}) and location.
 * 
 * @param int $timestamp The {@link timestamp} of the day from which
 *   the sunset time is taken.
 * @param int $format {@link format} constants constant description
 *   example SUNFUNCS_RET_STRING returns the result as string 16:46
 *   SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132
 *   SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp)
 *   1095034606
 * @param float $latitude Defaults to North, pass in a negative value
 *   for South. See also: date.default_latitude
 * @param float $longitude Defaults to East, pass in a negative value
 *   for West. See also: date.default_longitude
 * @param float $zenith Default: date.sunset_zenith
 * @param float $gmt_offset Specified in hours.
 * @return mixed
 * @since PHP 5
 **/
function date_sunset($timestamp, $format, $latitude, $longitude, $zenith, $gmt_offset){}

/**
 * @param int $time Timestamp.
 * @param float $latitude Latitude in degrees.
 * @param float $longitude Longitude in degrees.
 * @return array
 * @since PHP 5 >= 5.1.2
 **/
function date_sun_info($time, $latitude, $longitude){}

/**
 * Gets the Unix timestamp.
 * 
 * @param DateTime $object
 * @return int
 * @since PHP 5 >= 5.3.0
 **/
function date_timestamp_get($object){}

/**
 * Sets the date and time based on an Unix timestamp.
 * 
 * @param DateTime $object Unix timestamp representing the date.
 * @param int $unixtimestamp
 * @return DateTime
 * @since PHP 5 >= 5.3.0
 **/
function date_timestamp_set($object, $unixtimestamp){}

/**
 * Return time zone relative to given DateTime.
 * 
 * @param DateTime $object
 * @return DateTimeZone
 * @since PHP 5 >= 5.2.0
 **/
function date_timezone_get($object){}

/**
 * @param DateTime $object A DateTimeZone object representing the
 *   desired time zone.
 * @param DateTimeZone $timezone
 * @return DateTime
 * @since PHP 5 >= 5.2.0
 **/
function date_timezone_set($object, $timezone){}

/**
 * Resets the current time of the DateTime object to a different time.
 * 
 * @param DateTime $object Hour of the time.
 * @param int $hour Minute of the time.
 * @param int $minute Second of the time.
 * @param int $second
 * @return DateTime
 * @since PHP 5 >= 5.2.0
 **/
function date_time_set($object, $hour, $minute, $second){}

/**
 * Sets or gets the AUTOCOMMIT behavior of the specified connection
 * resource.
 * 
 * @param resource $connection A valid database connection resource
 *   variable as returned from {@link db2_connect} or {@link
 *   db2_pconnect}.
 * @param bool $value One of the following constants:
 *   DB2_AUTOCOMMIT_OFF Turns AUTOCOMMIT off. DB2_AUTOCOMMIT_ON Turns
 *   AUTOCOMMIT on.
 * @return mixed
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_autocommit($connection, $value){}

/**
 * Binds a PHP variable to an SQL statement parameter in a statement
 * resource returned by {@link db2_prepare}. This function gives you more
 * control over the parameter type, data type, precision, and scale for
 * the parameter than simply passing the variable as part of the optional
 * input array to {@link db2_execute}.
 * 
 * @param resource $stmt A prepared statement returned from {@link
 *   db2_prepare}.
 * @param int $parameternumber Specifies the 1-indexed position of the
 *   parameter in the prepared statement.
 * @param string $variablename A string specifying the name of the PHP
 *   variable to bind to the parameter specified by {@link
 *   parameter-number}.
 * @param int $parametertype A constant specifying whether the PHP
 *   variable should be bound to the SQL parameter as an input parameter
 *   (DB2_PARAM_IN), an output parameter (DB2_PARAM_OUT), or as a
 *   parameter that accepts input and returns output (DB2_PARAM_INOUT).
 *   To avoid memory overhead, you can also specify DB2_PARAM_FILE to
 *   bind the PHP variable to the name of a file that contains large
 *   object (BLOB, CLOB, or DBCLOB) data.
 * @param int $datatype A constant specifying the SQL data type that
 *   the PHP variable should be bound as: one of DB2_BINARY, DB2_CHAR,
 *   DB2_DOUBLE, or DB2_LONG .
 * @param int $precision Specifies the precision with which the
 *   variable should be bound to the database. This parameter can also be
 *   used for retrieving XML output values from stored procedures. A
 *   non-negative value specifies the maximum size of the XML data that
 *   will be retrieved from the database. If this parameter is not used,
 *   a default of 1MB will be assumed for retrieving the XML output value
 *   from the stored procedure.
 * @param int $scale Specifies the scale with which the variable should
 *   be bound to the database.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_bind_param($stmt, $parameternumber, $variablename, $parametertype, $datatype, $precision, $scale){}

/**
 * This function returns an object with read-only properties that return
 * information about the DB2 database client. The following table lists
 * the DB2 client properties: DB2 client properties Property name Return
 * type Description APPL_CODEPAGE int The application code page.
 * CONN_CODEPAGE int The code page for the current connection.
 * DATA_SOURCE_NAME string The data source name (DSN) used to create the
 * current connection to the database. DRIVER_NAME string The name of the
 * library that implements the DB2 Call Level Interface (CLI)
 * specification. DRIVER_ODBC_VER string The version of ODBC that the DB2
 * client supports. This returns a string "MM.mm" where MM is the major
 * version and mm is the minor version. The DB2 client always returns
 * "03.51". DRIVER_VER string The version of the client, in the form of a
 * string "MM.mm.uuuu" where MM is the major version, mm is the minor
 * version, and uuuu is the update. For example, "08.02.0001" represents
 * major version 8, minor version 2, update 1. ODBC_SQL_CONFORMANCE
 * string The level of ODBC SQL grammar supported by the client: MINIMUM
 * Supports the minimum ODBC SQL grammar. CORE Supports the core ODBC SQL
 * grammar. EXTENDED Supports extended ODBC SQL grammar. ODBC_VER string
 * The version of ODBC that the ODBC driver manager supports. This
 * returns a string "MM.mm.rrrr" where MM is the major version, mm is the
 * minor version, and rrrr is the release. The DB2 client always returns
 * "03.01.0000".
 * 
 * @param resource $connection Specifies an active DB2 client
 *   connection.
 * @return object
 * @since PECL ibm_db2 >= 1.1.1
 **/
function db2_client_info($connection){}

/**
 * This function closes a DB2 client connection created with {@link
 * db2_connect} and returns the corresponding resources to the database
 * server.
 * 
 * If you attempt to close a persistent DB2 client connection created
 * with {@link db2_pconnect}, the close request is ignored and the
 * persistent DB2 client connection remains available for the next
 * caller.
 * 
 * @param resource $connection Specifies an active DB2 client
 *   connection.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_close($connection){}

/**
 * Returns a result set listing the columns and associated metadata for a
 * table.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables. To match
 *   all schemas, pass '%'.
 * @param string $tablename The name of the table or view. To match all
 *   tables in the database, pass or an empty string.
 * @param string $columnname The name of the column. To match all
 *   columns in the table, pass or an empty string.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_columns($connection, $qualifier, $schema, $tablename, $columnname){}

/**
 * Returns a result set listing the columns and associated privileges for
 * a table.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables. To match
 *   all schemas, pass or an empty string.
 * @param string $tablename The name of the table or view. To match all
 *   tables in the database, pass or an empty string.
 * @param string $columnname The name of the column. To match all
 *   columns in the table, pass or an empty string.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_column_privileges($connection, $qualifier, $schema, $tablename, $columnname){}

/**
 * Commits an in-progress transaction on the specified connection
 * resource and begins a new transaction. PHP applications normally
 * default to AUTOCOMMIT mode, so {@link db2_commit} is not necessary
 * unless AUTOCOMMIT has been turned off for the connection resource.
 * 
 * @param resource $connection A valid database connection resource
 *   variable as returned from {@link db2_connect} or {@link
 *   db2_pconnect}.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_commit($connection){}

/**
 * Creates a new connection to an IBM DB2 Universal Database, IBM
 * Cloudscape, or Apache Derby database.
 * 
 * @param string $database For a cataloged connection to a database,
 *   {@link database} represents the database alias in the DB2 client
 *   catalog. For an uncataloged connection to a database, {@link
 *   database} represents a complete connection string in the following
 *   format: DATABASE={@link database};HOSTNAME={@link
 *   hostname};PORT={@link port};PROTOCOL=TCPIP;UID={@link
 *   username};PWD={@link password}; where the parameters represent the
 *   following values: {@link database} The name of the database. {@link
 *   hostname} The hostname or IP address of the database server. {@link
 *   port} The TCP/IP port on which the database is listening for
 *   requests. {@link username} The username with which you are
 *   connecting to the database. {@link password} The password with which
 *   you are connecting to the database.
 * @param string $username The name of the database.
 * @param string $password The hostname or IP address of the database
 *   server.
 * @param array $options The TCP/IP port on which the database is
 *   listening for requests.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_connect($database, $username, $password, $options){}

/**
 * {@link db2_conn_error} returns an SQLSTATE value representing the
 * reason the last attempt to connect to a database failed. As {@link
 * db2_connect} returns in the event of a failed connection attempt, you
 * do not pass any parameters to {@link db2_conn_error} to retrieve the
 * SQLSTATE value.
 * 
 * If, however, the connection was successful but becomes invalid over
 * time, you can pass the {@link connection} parameter to retrieve the
 * SQLSTATE value for a specific connection.
 * 
 * To learn what the SQLSTATE value means, you can issue the following
 * command at a DB2 Command Line Processor prompt: db2 '? {@link
 * sqlstate-value}'. You can also call {@link db2_conn_errormsg} to
 * retrieve an explicit error message and the associated SQLCODE value.
 * 
 * @param resource $connection A connection resource associated with a
 *   connection that initially succeeded, but which over time became
 *   invalid.
 * @return string
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_conn_error($connection){}

/**
 * {@link db2_conn_errormsg} returns an error message and SQLCODE value
 * representing the reason the last database connection attempt failed.
 * As {@link db2_connect} returns in the event of a failed connection
 * attempt, do not pass any parameters to {@link db2_conn_errormsg} to
 * retrieve the associated error message and SQLCODE value.
 * 
 * If, however, the connection was successful but becomes invalid over
 * time, you can pass the {@link connection} parameter to retrieve the
 * associated error message and SQLCODE value for a specific connection.
 * 
 * @param resource $connection A connection resource associated with a
 *   connection that initially succeeded, but which over time became
 *   invalid.
 * @return string
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_conn_errormsg($connection){}

/**
 * Returns the cursor type used by a statement resource. Use this to
 * determine if you are working with a forward-only cursor or scrollable
 * cursor.
 * 
 * @param resource $stmt A valid statement resource.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_cursor_type($stmt){}

/**
 * Prepends backslashes to special characters in the string argument.
 * 
 * @param string $string_literal The string that contains special
 *   characters that need to be modified. Characters that are prepended
 *   with a backslash are \x00, \n, \r, \, ', " and \x1a.
 * @return string
 * @since PECL ibm_db2 >= 1.6.0
 **/
function db2_escape_string($string_literal){}

/**
 * Executes an SQL statement directly.
 * 
 * If you plan to interpolate PHP variables into the SQL statement,
 * understand that this is one of the more common security exposures.
 * Consider calling {@link db2_prepare} to prepare an SQL statement with
 * parameter markers for input values. Then you can call {@link
 * db2_execute} to pass in the input values and avoid SQL injection
 * attacks.
 * 
 * If you plan to repeatedly issue the same SQL statement with different
 * parameters, consider calling {@link db2_prepare} and {@link
 * db2_execute} to enable the database server to reuse its access plan
 * and increase the efficiency of your database access.
 * 
 * @param resource $connection A valid database connection resource
 *   variable as returned from {@link db2_connect} or {@link
 *   db2_pconnect}.
 * @param string $statement An SQL statement. The statement cannot
 *   contain any parameter markers.
 * @param array $options An associative array containing statement
 *   options. You can use this parameter to request a scrollable cursor
 *   on database servers that support this functionality. For a
 *   description of valid statement options, see {@link db2_set_option}.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_exec($connection, $statement, $options){}

/**
 * {@link db2_execute} executes an SQL statement that was prepared by
 * {@link db2_prepare}.
 * 
 * If the SQL statement returns a result set, for example, a SELECT
 * statement or a CALL to a stored procedure that returns one or more
 * result sets, you can retrieve a row as an array from the stmt resource
 * using {@link db2_fetch_assoc}, {@link db2_fetch_both}, or {@link
 * db2_fetch_array}. Alternatively, you can use {@link db2_fetch_row} to
 * move the result set pointer to the next row and fetch a column at a
 * time from that row with {@link db2_result}.
 * 
 * Refer to {@link db2_prepare} for a brief discussion of the advantages
 * of using {@link db2_prepare} and {@link db2_execute} rather than
 * {@link db2_exec}.
 * 
 * @param resource $stmt A prepared statement returned from {@link
 *   db2_prepare}.
 * @param array $parameters An array of input parameters matching any
 *   parameter markers contained in the prepared statement.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_execute($stmt, $parameters){}

/**
 * Returns an array, indexed by column position, representing a row in a
 * result set. The columns are 0-indexed.
 * 
 * @param resource $stmt A valid stmt resource containing a result set.
 * @param int $row_number Requests a specific 1-indexed row from the
 *   result set. Passing this parameter results in a PHP warning if the
 *   result set uses a forward-only cursor.
 * @return array
 * @since PECL ibm_db2 >= 1.0.1
 **/
function db2_fetch_array($stmt, $row_number){}

/**
 * Returns an array, indexed by column name, representing a row in a
 * result set.
 * 
 * @param resource $stmt A valid stmt resource containing a result set.
 * @param int $row_number Requests a specific 1-indexed row from the
 *   result set. Passing this parameter results in a PHP warning if the
 *   result set uses a forward-only cursor.
 * @return array
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_fetch_assoc($stmt, $row_number){}

/**
 * Returns an array, indexed by both column name and position,
 * representing a row in a result set. Note that the row returned by
 * {@link db2_fetch_both} requires more memory than the single-indexed
 * arrays returned by {@link db2_fetch_assoc} or {@link db2_fetch_array}.
 * 
 * @param resource $stmt A valid stmt resource containing a result set.
 * @param int $row_number Requests a specific 1-indexed row from the
 *   result set. Passing this parameter results in a PHP warning if the
 *   result set uses a forward-only cursor.
 * @return array
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_fetch_both($stmt, $row_number){}

/**
 * Returns an object in which each property represents a column returned
 * in the row fetched from a result set.
 * 
 * @param resource $stmt A valid stmt resource containing a result set.
 * @param int $row_number Requests a specific 1-indexed row from the
 *   result set. Passing this parameter results in a PHP warning if the
 *   result set uses a forward-only cursor.
 * @return object
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_fetch_object($stmt, $row_number){}

/**
 * Use {@link db2_fetch_row} to iterate through a result set, or to point
 * to a specific row in a result set if you requested a scrollable
 * cursor.
 * 
 * To retrieve individual fields from the result set, call the {@link
 * db2_result} function.
 * 
 * Rather than calling {@link db2_fetch_row} and {@link db2_result}, most
 * applications will call one of {@link db2_fetch_assoc}, {@link
 * db2_fetch_both}, or {@link db2_fetch_array} to advance the result set
 * pointer and return a complete row as an array.
 * 
 * @param resource $stmt A valid stmt resource.
 * @param int $row_number With scrollable cursors, you can request a
 *   specific row number in the result set. Row numbering is 1-indexed.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_fetch_row($stmt, $row_number){}

/**
 * Returns the maximum number of bytes required to display a column in a
 * result set.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_display_size($stmt, $column){}

/**
 * Returns the name of the specified column in the result set.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return string
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_name($stmt, $column){}

/**
 * Returns the position of the named column in a result set.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_num($stmt, $column){}

/**
 * Returns the precision of the indicated column in a result set.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_precision($stmt, $column){}

/**
 * Returns the scale of the indicated column in a result set.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_scale($stmt, $column){}

/**
 * Returns the data type of the indicated column in a result set.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return string
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_type($stmt, $column){}

/**
 * Returns the width of the current value of the indicated column in a
 * result set. This is the maximum width of the column for a fixed-length
 * data type, or the actual width of the column for a variable-length
 * data type.
 * 
 * @param resource $stmt Specifies a statement resource containing a
 *   result set.
 * @param mixed $column Specifies the column in the result set. This
 *   can either be an integer representing the 0-indexed position of the
 *   column, or a string containing the name of the column.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_field_width($stmt, $column){}

/**
 * Returns a result set listing the foreign keys for a table.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables. If
 *   {@link schema} is , {@link db2_foreign_keys} matches the schema for
 *   the current connection.
 * @param string $tablename The name of the table.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_foreign_keys($connection, $qualifier, $schema, $tablename){}

/**
 * Frees the system and database resources that are associated with a
 * result set. These resources are freed implicitly when a script
 * finishes, but you can call {@link db2_free_result} to explicitly free
 * the result set resources before the end of the script.
 * 
 * @param resource $stmt A valid statement resource.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_free_result($stmt){}

/**
 * Frees the system and database resources that are associated with a
 * statement resource. These resources are freed implicitly when a script
 * finishes, but you can call {@link db2_free_stmt} to explicitly free
 * the statement resources before the end of the script.
 * 
 * @param resource $stmt A valid statement resource.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_free_stmt($stmt){}

/**
 * Retrieves the value of a specified option value for a statement
 * resource or a connection resource.
 * 
 * @param resource $resource A valid statement resource as returned
 *   from {@link db2_prepare} or a valid connection resource as returned
 *   from {@link db2_connect} or {@link db2_pconnect}.
 * @param string $option A valid statement or connection options. The
 *   following new options are available as of ibm_db2 version 1.6.0.
 *   They provide useful tracking information that can be set during
 *   execution with {@link db2_get_option}. Prior versions of ibm_db2 do
 *   not support these new options. When the value in each option is
 *   being set, some servers might not handle the entire length provided
 *   and might truncate the value. To ensure that the data specified in
 *   each option is converted correctly when transmitted to a host
 *   system, use only the characters A through Z, 0 through 9, and the
 *   underscore (_) or period (.). {@link userid} SQL_ATTR_INFO_USERID -
 *   A pointer to a null-terminated character string used to identify the
 *   client user ID sent to the host database server when using DB2
 *   Connect. DB2 for z/OS and OS/390 servers support up to a length of
 *   16 characters. This user-id is not to be confused with the
 *   authentication user-id, it is for identification purposes only and
 *   is not used for any authorization. {@link acctstr}
 *   SQL_ATTR_INFO_ACCTSTR - A pointer to a null-terminated character
 *   string used to identify the client accounting string sent to the
 *   host database server when using DB2 Connect. DB2 for z/OS and OS/390
 *   servers support up to a length of 200 characters. {@link applname}
 *   SQL_ATTR_INFO_APPLNAME - A pointer to a null-terminated character
 *   string used to identify the client application name sent to the host
 *   database server when using DB2 Connect. DB2 for z/OS and OS/390
 *   servers support up to a length of 32 characters. {@link wrkstnname}
 *   SQL_ATTR_INFO_WRKSTNNAME - A pointer to a null-terminated character
 *   string used to identify the client workstation name sent to the host
 *   database server when using DB2 Connect. DB2 for z/OS and OS/390
 *   servers support up to a length of 18 characters.
 * @return string
 * @since PECL ibm_db2 >= 1.6.0
 **/
function db2_get_option($resource, $option){}

/**
 * Returns the auto generated ID of the last insert query that
 * successfully executed on this connection.
 * 
 * The result of this function is not affected by any of the following: A
 * single row INSERT statement with a VALUES clause for a table without
 * an identity column. A multiple row INSERT statement with a VALUES
 * clause. An INSERT statement with a fullselect. A ROLLBACK TO SAVEPOINT
 * statement.
 * 
 * @param resource $resource A valid connection resource as returned
 *   from {@link db2_connect} or {@link db2_pconnect}. The value of this
 *   parameter cannot be a statement resource or result set resource.
 * @return int
 * @since PECL ibm_db2 >= 1.7.1
 **/
function db2_last_insert_id($resource){}

/**
 * Use {@link db2_lob_read} to iterate through a specified column of a
 * result set and retrieve a user defined size of LOB data.
 * 
 * @param resource $stmt A valid stmt resource containing LOB data.
 * @param int $colnum A valid column number in the result set of the
 *   stmt resource.
 * @param int $length The size of the LOB data to be retrieved from the
 *   stmt resource.
 * @return string
 * @since PECL ibm_db2 >= 1.6.0
 **/
function db2_lob_read($stmt, $colnum, $length){}

/**
 * A stored procedure can return zero or more result sets. While you
 * handle the first result set in exactly the same way you would handle
 * the results returned by a simple SELECT statement, to fetch the second
 * and subsequent result sets from a stored procedure you must call the
 * {@link db2_next_result} function and return the result to a uniquely
 * named PHP variable.
 * 
 * @param resource $stmt A prepared statement returned from {@link
 *   db2_exec} or {@link db2_execute}.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_next_result($stmt){}

/**
 * Returns the number of fields contained in a result set. This is most
 * useful for handling the result sets returned by dynamically generated
 * queries, or for result sets returned by stored procedures, where your
 * application cannot otherwise know how to retrieve and use the results.
 * 
 * @param resource $stmt A valid statement resource containing a result
 *   set.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_num_fields($stmt){}

/**
 * Returns the number of rows deleted, inserted, or updated by an SQL
 * statement.
 * 
 * To determine the number of rows that will be returned by a SELECT
 * statement, issue SELECT COUNT(*) with the same predicates as your
 * intended SELECT statement and retrieve the value.
 * 
 * If your application logic checks the number of rows returned by a
 * SELECT statement and branches if the number of rows is 0, consider
 * modifying your application to attempt to return the first row with one
 * of {@link db2_fetch_assoc}, {@link db2_fetch_both}, {@link
 * db2_fetch_array}, or {@link db2_fetch_row}, and branch if the fetch
 * function returns .
 * 
 * @param resource $stmt A valid stmt resource containing a result set.
 * @return int
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_num_rows($stmt){}

/**
 * This function closes a DB2 client connection created with {@link
 * db2_pconnect} and returns the corresponding resources to the database
 * server. This function is only available on i5/OS in response to i5/OS
 * system administration requests.
 * 
 * If you have a persistent DB2 client connection created with {@link
 * db2_pconnect}, you may use this function to close the connection. To
 * avoid substantial connection performance penalties, this function
 * should only be used in rare cases when the persistent connection has
 * become unresponsive or the persistent connection will not be needed
 * for a long period of time.
 * 
 * @param resource $resource Specifies an active DB2 client connection.
 * @return bool
 * @since PECL ibm_db2 >= 1.8.0
 **/
function db2_pclose($resource){}

/**
 * Returns a persistent connection to an IBM DB2 Universal Database, IBM
 * Cloudscape, or Apache Derby database. For more information on
 * persistent connections, refer to .
 * 
 * Calling {@link db2_close} on a persistent connection always returns ,
 * but the underlying DB2 client connection remains open and waiting to
 * serve the next matching {@link db2_pconnect} request.
 * 
 * @param string $database The database alias in the DB2 client
 *   catalog.
 * @param string $username The username with which you are connecting
 *   to the database.
 * @param string $password The password with which you are connecting
 *   to the database.
 * @param array $options An associative array of connection options
 *   that affect the behavior of the connection, where valid array keys
 *   include: {@link autocommit} Passing the DB2_AUTOCOMMIT_ON value
 *   turns autocommit on for this connection handle. Passing the
 *   DB2_AUTOCOMMIT_OFF value turns autocommit off for this connection
 *   handle. {@link DB2_ATTR_CASE} Passing the DB2_CASE_NATURAL value
 *   specifies that column names are returned in natural case. Passing
 *   the DB2_CASE_LOWER value specifies that column names are returned in
 *   lower case. Passing the DB2_CASE_UPPER value specifies that column
 *   names are returned in upper case. {@link CURSOR} Passing the
 *   DB2_FORWARD_ONLY value specifies a forward-only cursor for a
 *   statement resource. This is the default cursor type and is supported
 *   on all database servers. Passing the DB2_SCROLLABLE value specifies
 *   a scrollable cursor for a statement resource. This mode enables
 *   random access to rows in a result set, but currently is supported
 *   only by IBM DB2 Universal Database. The following new option is
 *   available in ibm_db2 version 1.7.0 and later. {@link trustedcontext}
 *   Passing the DB2_TRUSTED_CONTEXT_ENABLE value turns trusted context
 *   on for this connection handle. This parameter cannot be set using
 *   {@link db2_set_option}. This key works only if the database is
 *   cataloged (even if the database is local), or if you specify the
 *   full DSN when you create the connection. To catalog the database,
 *   use following commands: db2 catalog tcpip node loopback remote
 *   <SERVERNAME> server <SERVICENAME> db2 catalog database <LOCALDBNAME>
 *   as <REMOTEDBNAME> at node loopback db2 "update dbm cfg using
 *   svcename <SERVICENAME>" db2set DB2COMM=TCPIP The following new i5/OS
 *   options are available in ibm_db2 version 1.5.1 and later.
 *   Conflicting connection attributes used in conjunction with
 *   persistent connections can produce indeterminate results on i5/OS.
 *   Site policies should be establish for all applications using each
 *   persistent connection user profile. The default DB2_AUTOCOMMIT_ON is
 *   suggested when using persistent connections. {@link i5_lib} A
 *   character value that indicates the default library that will be used
 *   for resolving unqualified file references. This is not valid if the
 *   connection is using system naming mode. {@link i5_naming}
 *   DB2_I5_NAMING_ON value turns on DB2 UDB CLI iSeries system naming
 *   mode. Files are qualified using the slash (/) delimiter. Unqualified
 *   files are resolved using the library list for the job.
 *   DB2_I5_NAMING_OFF value turns off DB2 UDB CLI default naming mode,
 *   which is SQL naming. Files are qualified using the period (.)
 *   delimiter. Unqualified files are resolved using either the default
 *   library or the current user ID. {@link i5_commit} The {@link
 *   i5_commit} attribute should be set before the {@link db2_pconnect}.
 *   If the value is changed after the connection has been established,
 *   and the connection is to a remote data source, the change does not
 *   take effect until the next successful {@link db2_pconnect} for the
 *   connection handle. The php.ini setting {@link
 *   ibm_db2.i5_allow_commit}==0 or DB2_I5_TXN_NO_COMMIT is the default,
 *   but may be overridden with the {@link i5_commit} option.
 *   DB2_I5_TXN_NO_COMMIT - Commitment control is not used.
 *   DB2_I5_TXN_READ_UNCOMMITTED - Dirty reads, nonrepeatable reads, and
 *   phantoms are possible. DB2_I5_TXN_READ_COMMITTED - Dirty reads are
 *   not possible. Nonrepeatable reads, and phantoms are possible.
 *   DB2_I5_TXN_REPEATABLE_READ - Dirty reads and nonrepeatable reads are
 *   not possible. Phantoms are possible. DB2_I5_TXN_SERIALIZABLE -
 *   Transactions are serializable. Dirty reads, non-repeatable reads,
 *   and phantoms are not possible {@link i5_query_optimize} DB2_FIRST_IO
 *   All queries are optimized with the goal of returning the first page
 *   of output as fast as possible. This goal works well when the output
 *   is controlled by a user who is most likely to cancel the query after
 *   viewing the first page of output data. Queries coded with an
 *   OPTIMIZE FOR nnn ROWS clause honor the goal specified by the clause.
 *   DB2_ALL_IO All queries are optimized with the goal of running the
 *   entire query to completion in the shortest amount of elapsed time.
 *   This is a good option when the output of a query is being written to
 *   a file or report, or the interface is queuing the output data.
 *   Queries coded with an OPTIMIZE FOR nnn ROWS clause honor the goal
 *   specified by the clause. This is the default. {@link i5_dbcs_alloc}
 *   DB2_I5_DBCS_ALLOC_ON value turns on DB2 6X allocation scheme for
 *   DBCS translation column size growth. DB2_I5_DBCS_ALLOC_OFF value
 *   turns off DB2 6X allocation scheme for DBCS translation column size
 *   growth. The php.ini setting {@link ibm_db2.i5_dbcs_alloc}==0 or
 *   DB2_I5_DBCS_ALLOC_OFF is the default, but may be overridden with the
 *   {@link i5_dbcs_alloc} option. {@link i5_date_fmt} DB2_I5_FMT_ISO -
 *   The International Organization for Standardization (ISO) date format
 *   yyyy-mm-dd is used. This is the default. DB2_I5_FMT_USA - The United
 *   States date format mm/dd/yyyy is used. DB2_I5_FMT_EUR - The European
 *   date format dd.mm.yyyy is used. DB2_I5_FMT_JIS - The Japanese
 *   Industrial Standard date format yyyy-mm-dd is used. DB2_I5_FMT_MDY -
 *   The date format mm/dd/yyyy is used. DB2_I5_FMT_DMY - The date format
 *   dd/mm/yyyy is used. DB2_I5_FMT_YMD - The date format yy/mm/dd is
 *   used. DB2_I5_FMT_JUL - The Julian date format yy/ddd is used.
 *   DB2_I5_FMT_JOB - The job default is used. {@link i5_date_sep}
 *   DB2_I5_SEP_SLASH - A slash ( / ) is used as the date separator. This
 *   is the default. DB2_I5_SEP_DASH - A dash ( - ) is used as the date
 *   separator. DB2_I5_SEP_PERIOD - A period ( . ) is used as the date
 *   separator. DB2_I5_SEP_COMMA - A comma ( , ) is used as the date
 *   separator. DB2_I5_SEP_BLANK - A blank is used as the date separator.
 *   DB2_I5_SEP_JOB - The job default is used {@link i5_time_fmt}
 *   DB2_I5_FMT_ISO - The International Organization for Standardization
 *   (ISO) time format hh.mm.ss is used. This is the default.
 *   DB2_I5_FMT_USA - The United States time format hh:mmxx is used,
 *   where xx is AM or PM. DB2_I5_FMT_EUR - The European time format
 *   hh.mm.ss is used. DB2_I5_FMT_JIS - The Japanese Industrial Standard
 *   time format hh:mm:ss is used. DB2_I5_FMT_HMS - The hh:mm:ss format
 *   is used. {@link i5_time_sep} DB2_I5_SEP_COLON - A colon ( : ) is
 *   used as the time separator. This is the default. DB2_I5_SEP_PERIOD -
 *   A period ( . ) is used as the time separator. DB2_I5_SEP_COMMA - A
 *   comma ( , ) is used as the time separator. DB2_I5_SEP_BLANK - A
 *   blank is used as the time separator. DB2_I5_SEP_JOB - The job
 *   default is used. {@link i5_decimal_sep} DB2_I5_SEP_PERIOD - A period
 *   ( . ) is used as the decimal separator. This is the default.
 *   DB2_I5_SEP_COMMA - A comma ( , ) is used as the decimal separator.
 *   DB2_I5_SEP_JOB - The job default is used. The following new i5/OS
 *   option is available in ibm_db2 version 1.8.0 and later. {@link
 *   i5_libl} A character value that indicates the library list that will
 *   be used for resolving unqualified file references. Specify the
 *   library list elements separated by blanks 'i5_libl'=>"MYLIB YOURLIB
 *   ANYLIB". i5_libl calls qsys2/qcmdexc('cmd',cmdlen), which is only
 *   available in i5/OS V5R4 and later.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_pconnect($database, $username, $password, $options){}

/**
 * {@link db2_prepare} creates a prepared SQL statement which can include
 * 0 or more parameter markers (? characters) representing parameters for
 * input, output, or input/output. You can pass parameters to the
 * prepared statement using {@link db2_bind_param}, or for input values
 * only, as an array passed to {@link db2_execute}.
 * 
 * There are three main advantages to using prepared statements in your
 * application: Performance: when you prepare a statement, the database
 * server creates an optimized access plan for retrieving data with that
 * statement. Subsequently issuing the prepared statement with {@link
 * db2_execute} enables the statements to reuse that access plan and
 * avoids the overhead of dynamically creating a new access plan for
 * every statement you issue. Security: when you prepare a statement, you
 * can include parameter markers for input values. When you execute a
 * prepared statement with input values for placeholders, the database
 * server checks each input value to ensure that the type matches the
 * column definition or parameter definition. Advanced functionality:
 * Parameter markers not only enable you to pass input values to prepared
 * SQL statements, they also enable you to retrieve OUT and INOUT
 * parameters from stored procedures using {@link db2_bind_param}.
 * 
 * @param resource $connection A valid database connection resource
 *   variable as returned from {@link db2_connect} or {@link
 *   db2_pconnect}.
 * @param string $statement An SQL statement, optionally containing one
 *   or more parameter markers..
 * @param array $options An associative array containing statement
 *   options. You can use this parameter to request a scrollable cursor
 *   on database servers that support this functionality. For a
 *   description of valid statement options, see {@link db2_set_option}.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_prepare($connection, $statement, $options){}

/**
 * Returns a result set listing the primary keys for a table.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables. If
 *   {@link schema} is , {@link db2_primary_keys} matches the schema for
 *   the current connection.
 * @param string $tablename The name of the table.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_primary_keys($connection, $qualifier, $schema, $tablename){}

/**
 * Returns a result set listing the stored procedures registered in a
 * database.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the procedures. This
 *   parameter accepts a search pattern containing _ and % as wildcards.
 * @param string $procedure The name of the procedure. This parameter
 *   accepts a search pattern containing _ and % as wildcards.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_procedures($connection, $qualifier, $schema, $procedure){}

/**
 * Returns a result set listing the parameters for one or more stored
 * procedures.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the procedures. This
 *   parameter accepts a search pattern containing _ and % as wildcards.
 * @param string $procedure The name of the procedure. This parameter
 *   accepts a search pattern containing _ and % as wildcards.
 * @param string $parameter The name of the parameter. This parameter
 *   accepts a search pattern containing _ and % as wildcards. If this
 *   parameter is , all parameters for the specified stored procedures
 *   are returned.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_procedure_columns($connection, $qualifier, $schema, $procedure, $parameter){}

/**
 * Use {@link db2_result} to return the value of a specified column in
 * the current row of a result set. You must call {@link db2_fetch_row}
 * before calling {@link db2_result} to set the location of the result
 * set pointer.
 * 
 * @param resource $stmt A valid stmt resource.
 * @param mixed $column Either an integer mapping to the 0-indexed
 *   field in the result set, or a string matching the name of the
 *   column.
 * @return mixed
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_result($stmt, $column){}

/**
 * Rolls back an in-progress transaction on the specified connection
 * resource and begins a new transaction. PHP applications normally
 * default to AUTOCOMMIT mode, so {@link db2_rollback} normally has no
 * effect unless AUTOCOMMIT has been turned off for the connection
 * resource.
 * 
 * @param resource $connection A valid database connection resource
 *   variable as returned from {@link db2_connect} or {@link
 *   db2_pconnect}.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_rollback($connection){}

/**
 * This function returns an object with read-only properties that return
 * information about the IBM DB2, Cloudscape, or Apache Derby database
 * server. The following table lists the database server properties:
 * Database server properties Property name Return type Description
 * DBMS_NAME string The name of the database server to which you are
 * connected. For DB2 servers this is a combination of DB2 followed by
 * the operating system on which the database server is running. DBMS_VER
 * string The version of the database server, in the form of a string
 * "MM.mm.uuuu" where MM is the major version, mm is the minor version,
 * and uuuu is the update. For example, "08.02.0001" represents major
 * version 8, minor version 2, update 1. DB_CODEPAGE int The code page of
 * the database to which you are connected. DB_NAME string The name of
 * the database to which you are connected. DFT_ISOLATION string The
 * default transaction isolation level supported by the server: UR
 * Uncommitted read: changes are immediately visible by all concurrent
 * transactions. CS Cursor stability: a row read by one transaction can
 * be altered and committed by a second concurrent transaction. RS Read
 * stability: a transaction can add or remove rows matching a search
 * condition or a pending transaction. RR Repeatable read: data affected
 * by pending transaction is not available to other transactions. NC No
 * commit: any changes are visible at the end of a successful operation.
 * Explicit commits and rollbacks are not allowed. IDENTIFIER_QUOTE_CHAR
 * string The character used to delimit an identifier. INST_NAME string
 * The instance on the database server that contains the database.
 * ISOLATION_OPTION array An array of the isolation options supported by
 * the database server. The isolation options are described in the
 * DFT_ISOLATION property. KEYWORDS array An array of the keywords
 * reserved by the database server. LIKE_ESCAPE_CLAUSE bool if the
 * database server supports the use of % and _ wildcard characters. if
 * the database server does not support these wildcard characters.
 * MAX_COL_NAME_LEN int Maximum length of a column name supported by the
 * database server, expressed in bytes. MAX_IDENTIFIER_LEN int Maximum
 * length of an SQL identifier supported by the database server,
 * expressed in characters. MAX_INDEX_SIZE int Maximum size of columns
 * combined in an index supported by the database server, expressed in
 * bytes. MAX_PROC_NAME_LEN int Maximum length of a procedure name
 * supported by the database server, expressed in bytes. MAX_ROW_SIZE int
 * Maximum length of a row in a base table supported by the database
 * server, expressed in bytes. MAX_SCHEMA_NAME_LEN int Maximum length of
 * a schema name supported by the database server, expressed in bytes.
 * MAX_STATEMENT_LEN int Maximum length of an SQL statement supported by
 * the database server, expressed in bytes. MAX_TABLE_NAME_LEN int
 * Maximum length of a table name supported by the database server,
 * expressed in bytes. NON_NULLABLE_COLUMNS bool if the database server
 * supports columns that can be defined as NOT NULL, if the database
 * server does not support columns defined as NOT NULL. PROCEDURES bool
 * if the database server supports the use of the CALL statement to call
 * stored procedures, if the database server does not support the CALL
 * statement. SPECIAL_CHARS string A string containing all of the
 * characters other than a-Z, 0-9, and underscore that can be used in an
 * identifier name. SQL_CONFORMANCE string The level of conformance to
 * the ANSI/ISO SQL-92 specification offered by the database server:
 * ENTRY Entry-level SQL-92 compliance. FIPS127 FIPS-127-2 transitional
 * compliance. FULL Full level SQL-92 compliance. INTERMEDIATE
 * Intermediate level SQL-92 compliance.
 * 
 * @param resource $connection Specifies an active DB2 client
 *   connection.
 * @return object
 * @since PECL ibm_db2 >= 1.1.1
 **/
function db2_server_info($connection){}

/**
 * Sets options for a statement resource or a connection resource. You
 * cannot set options for result set resources.
 * 
 * @param resource $resource A valid statement resource as returned
 *   from {@link db2_prepare} or a valid connection resource as returned
 *   from {@link db2_connect} or {@link db2_pconnect}.
 * @param array $options An associative array containing valid
 *   statement or connection options. This parameter can be used to
 *   change autocommit values, cursor types (scrollable or forward), and
 *   to specify the case of the column names (lower, upper, or natural)
 *   that will appear in a result set. {@link autocommit} Passing
 *   DB2_AUTOCOMMIT_ON turns autocommit on for the specified connection
 *   resource. Passing DB2_AUTOCOMMIT_OFF turns autocommit off for the
 *   specified connection resource. {@link cursor} Passing
 *   DB2_FORWARD_ONLY specifies a forward-only cursor for a statement
 *   resource. This is the default cursor type, and is supported by all
 *   database servers. Passing DB2_SCROLLABLE specifies a scrollable
 *   cursor for a statement resource. Scrollable cursors enable result
 *   set rows to be accessed in non-sequential order, but are only
 *   supported by IBM DB2 Universal Database databases. {@link binmode}
 *   Passing DB2_BINARY specifies that binary data will be returned as
 *   is. This is the default mode. This is the equivalent of setting
 *   ibm_db2.binmode=1 in . Passing DB2_CONVERT specifies that binary
 *   data will be converted to hexadecimal encoding, and will be returned
 *   as such. This is the equivalent of setting ibm_db2.binmode=2 in .
 *   Passing DB2_PASSTHRU specifies that binary data will be converted to
 *   . This is the equivalent of setting ibm_db2.binmode=3 in . {@link
 *   db2_attr_case} Passing DB2_CASE_LOWER specifies that column names of
 *   the result set are returned in lower case. Passing DB2_CASE_UPPER
 *   specifies that column names of the result set are returned in upper
 *   case. Passing DB2_CASE_NATURAL specifies that column names of the
 *   result set are returned in natural case. {@link deferred_prepare}
 *   Passing DB2_DEFERRED_PREPARE_ON turns deferred prepare on for the
 *   specified statement resource. Passing DB2_DEFERRED_PREPARE_OFF turns
 *   deferred prepare off for the specified statement resource. The
 *   following new i5/OS options are available in ibm_db2 version 1.5.1
 *   and later. These options apply only when running PHP and ibm_db2
 *   natively on i5 systems. {@link i5_fetch_only} DB2_I5_FETCH_ON -
 *   Cursors are read-only and cannot be used for positioned updates or
 *   deletes. This is the default unless SQL_ATTR_FOR_FETCH_ONLY
 *   environment has been set to SQL_FALSE. DB2_I5_FETCH_OFF - Cursors
 *   can be used for positioned updates and deletes. The following new
 *   option is available in ibm_db2 version 1.8.0 and later. {@link
 *   rowcount} DB2_ROWCOUNT_PREFETCH_ON - Client can request the full row
 *   count prior to fetching, which means that {@link db2_num_rows}
 *   returns the number of rows selected even when a ROLLFORWARD_ONLY
 *   cursor is used. DB2_ROWCOUNT_PREFETCH_OFF - Client cannot request
 *   the full row count prior to fetching. The following new options are
 *   available in ibm_db2 version 1.7.0 and later. {@link trusted_user}
 *   To switch the user to a trusted user, pass the User ID (String) of
 *   the trusted user as the value of this key. This option can be set on
 *   a connection resource only. To use this option, trusted context must
 *   be enabled on the connection resource. {@link trusted_password} The
 *   password (String) that corresponds to the user specified by the
 *   trusted_user key. The following new options are available in ibm_db2
 *   version 1.6.0 and later. These options provide useful tracking
 *   information that can be accessed during execution with {@link
 *   db2_get_option}. When the value in each option is being set, some
 *   servers might not handle the entire length provided and might
 *   truncate the value. To ensure that the data specified in each option
 *   is converted correctly when transmitted to a host system, use only
 *   the characters A through Z, 0 through 9, and the underscore (_) or
 *   period (.). {@link userid} SQL_ATTR_INFO_USERID - A pointer to a
 *   null-terminated character string used to identify the client user ID
 *   sent to the host database server when using DB2 Connect. DB2 for
 *   z/OS and OS/390 servers support up to a length of 16 characters.
 *   This user-id is not to be confused with the authentication user-id,
 *   it is for identification purposes only and is not used for any
 *   authorization. {@link acctstr} SQL_ATTR_INFO_ACCTSTR - A pointer to
 *   a null-terminated character string used to identify the client
 *   accounting string sent to the host database server when using DB2
 *   Connect. DB2 for z/OS and OS/390 servers support up to a length of
 *   200 characters. {@link applname} SQL_ATTR_INFO_APPLNAME - A pointer
 *   to a null-terminated character string used to identify the client
 *   application name sent to the host database server when using DB2
 *   Connect. DB2 for z/OS and OS/390 servers support up to a length of
 *   32 characters. {@link wrkstnname} SQL_ATTR_INFO_WRKSTNNAME - A
 *   pointer to a null-terminated character string used to identify the
 *   client workstation name sent to the host database server when using
 *   DB2 Connect. DB2 for z/OS and OS/390 servers support up to a length
 *   of 18 characters.
 * @param int $type Passing DB2_AUTOCOMMIT_ON turns autocommit on for
 *   the specified connection resource. Passing DB2_AUTOCOMMIT_OFF turns
 *   autocommit off for the specified connection resource.
 * @return bool
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_set_option($resource, $options, $type){}

/**
 * Returns a result set listing the unique row identifier columns for a
 * table.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables.
 * @param string $table_name The name of the table.
 * @param int $scope Integer value representing the minimum duration
 *   for which the unique row identifier is valid. This can be one of the
 *   following values: Integer value SQL constant Description 0
 *   SQL_SCOPE_CURROW Row identifier is valid only while the cursor is
 *   positioned on the row. 1 SQL_SCOPE_TRANSACTION Row identifier is
 *   valid for the duration of the transaction. 2 SQL_SCOPE_SESSION Row
 *   identifier is valid for the duration of the connection.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_special_columns($connection, $qualifier, $schema, $table_name, $scope){}

/**
 * Returns a result set listing the index and statistics for a table.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema that contains the targeted table.
 *   If this parameter is , the statistics and indexes are returned for
 *   the schema of the current user.
 * @param string $tablename The name of the table.
 * @param bool $unique An integer value representing the type of index
 *   information to return. {@link 0} Return only the information for
 *   unique indexes on the table. {@link 1} Return the information for
 *   all indexes on the table.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_statistics($connection, $qualifier, $schema, $tablename, $unique){}

/**
 * Returns a string containing the SQLSTATE value returned by an SQL
 * statement.
 * 
 * If you do not pass a statement resource as an argument to {@link
 * db2_stmt_error}, the driver returns the SQLSTATE value associated with
 * the last attempt to return a statement resource, for example, from
 * {@link db2_prepare} or {@link db2_exec}.
 * 
 * To learn what the SQLSTATE value means, you can issue the following
 * command at a DB2 Command Line Processor prompt: db2 '? {@link
 * sqlstate-value}'. You can also call {@link db2_stmt_errormsg} to
 * retrieve an explicit error message and the associated SQLCODE value.
 * 
 * @param resource $stmt A valid statement resource.
 * @return string
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_stmt_error($stmt){}

/**
 * Returns a string containing the last SQL statement error message.
 * 
 * If you do not pass a statement resource as an argument to {@link
 * db2_stmt_errormsg}, the driver returns the error message associated
 * with the last attempt to return a statement resource, for example,
 * from {@link db2_prepare} or {@link db2_exec}.
 * 
 * @param resource $stmt A valid statement resource.
 * @return string
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_stmt_errormsg($stmt){}

/**
 * Returns a result set listing the tables and associated metadata in a
 * database.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables. This
 *   parameter accepts a search pattern containing _ and % as wildcards.
 * @param string $tablename The name of the table. This parameter
 *   accepts a search pattern containing _ and % as wildcards.
 * @param string $tabletype A list of comma-delimited table type
 *   identifiers. To match all table types, pass or an empty string.
 *   Valid table type identifiers include: ALIAS, HIERARCHY TABLE,
 *   INOPERATIVE VIEW, NICKNAME, MATERIALIZED QUERY TABLE, SYSTEM TABLE,
 *   TABLE, TYPED TABLE, TYPED VIEW, and VIEW.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_tables($connection, $qualifier, $schema, $tablename, $tabletype){}

/**
 * Returns a result set listing the tables and associated privileges in a
 * database.
 * 
 * @param resource $connection A valid connection to an IBM DB2,
 *   Cloudscape, or Apache Derby database.
 * @param string $qualifier A qualifier for DB2 databases running on
 *   OS/390 or z/OS servers. For other databases, pass or an empty
 *   string.
 * @param string $schema The schema which contains the tables. This
 *   parameter accepts a search pattern containing _ and % as wildcards.
 * @param string $table_name The name of the table. This parameter
 *   accepts a search pattern containing _ and % as wildcards.
 * @return resource
 * @since PECL ibm_db2 >= 1.0.0
 **/
function db2_table_privileges($connection, $qualifier, $schema, $table_name){}

/**
 * Adds the given data to the database.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @param array $record An indexed array of data. The number of items
 *   must be equal to the number of fields in the database, otherwise
 *   {@link dbase_add_record} will fail.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dbase_add_record($dbase_identifier, $record){}

/**
 * Closes the given database link identifier.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dbase_close($dbase_identifier){}

/**
 * {@link dbase_create} creates a dBase database with the given
 * definition.
 * 
 * @param string $filename The name of the database. It can be a
 *   relative or absolute path to the file where dBase will store your
 *   data.
 * @param array $fields An array of arrays, each array describing the
 *   format of one field of the database. Each field consists of a name,
 *   a character indicating the field type, and optionally, a length, and
 *   a precision.
 * @return int
 * @since PHP 4, PHP 5
 **/
function dbase_create($filename, $fields){}

/**
 * Marks the given record to be deleted from the database.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @param int $record_number An integer which spans from 1 to the
 *   number of records in the database (as returned by {@link
 *   dbase_numrecords}).
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dbase_delete_record($dbase_identifier, $record_number){}

/**
 * Returns information on the column structure of the given database link
 * identifier.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @return array
 * @since PHP 5
 **/
function dbase_get_header_info($dbase_identifier){}

/**
 * Gets a record from a database as an indexed array.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @param int $record_number The index of the record.
 * @return array
 * @since PHP 4, PHP 5
 **/
function dbase_get_record($dbase_identifier, $record_number){}

/**
 * Gets a record from a dBase database as an associative array.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @param int $record_number The index of the record.
 * @return array
 * @since PHP 4, PHP 5
 **/
function dbase_get_record_with_names($dbase_identifier, $record_number){}

/**
 * Gets the number of fields (columns) in the specified database.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function dbase_numfields($dbase_identifier){}

/**
 * Gets the number of records (rows) in the specified database.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function dbase_numrecords($dbase_identifier){}

/**
 * {@link dbase_open} opens a dBase database with the given access mode.
 * 
 * @param string $filename The name of the database. It can be a
 *   relative or absolute path to the file where dBase will store your
 *   data.
 * @param int $mode An integer which correspond to those for the open()
 *   system call (Typically 0 means read-only, 1 means write-only, and 2
 *   means read and write).
 * @return int
 * @since PHP 4, PHP 5
 **/
function dbase_open($filename, $mode){}

/**
 * Packs the specified database by permanently deleting all records
 * marked for deletion using {@link dbase_delete_record}.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dbase_pack($dbase_identifier){}

/**
 * Replaces the given record in the database with the given data.
 * 
 * @param int $dbase_identifier The database link identifier, returned
 *   by {@link dbase_open} or {@link dbase_create}.
 * @param array $record An indexed array of data. The number of items
 *   must be equal to the number of fields in the database, otherwise
 *   {@link dbase_replace_record} will fail.
 * @param int $record_number An integer which spans from 1 to the
 *   number of records in the database (as returned by {@link
 *   dbase_numrecords}).
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dbase_replace_record($dbase_identifier, $record, $record_number){}

/**
 * {@link dba_close} closes the established database and frees all
 * resources of the specified database handle.
 * 
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return void
 * @since PHP 4, PHP 5
 **/
function dba_close($handle){}

/**
 * {@link dba_delete} deletes the specified entry from the database.
 * 
 * @param string $key The key of the entry which is deleted.
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dba_delete($key, $handle){}

/**
 * {@link dba_exists} checks whether the specified {@link key} exists in
 * the database.
 * 
 * @param string $key The key the check is performed for.
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dba_exists($key, $handle){}

/**
 * {@link dba_fetch} fetches the data specified by {@link key} from the
 * database specified with {@link handle}.
 * 
 * @param string $key The key the data is specified by.
 * @param resource $handle The number of key-value pairs to ignore when
 *   using cdb databases. This value is ignored for all other databases
 *   which do not support multiple keys with the same name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function dba_fetch($key, $handle){}

/**
 * {@link dba_firstkey} returns the first key of the database and resets
 * the internal key pointer. This permits a linear search through the
 * whole database.
 * 
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function dba_firstkey($handle){}

/**
 * {@link dba_handlers} list all the handlers supported by this
 * extension.
 * 
 * @param bool $full_info Turns on/off full information display in the
 *   result.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function dba_handlers($full_info){}

/**
 * {@link dba_insert} inserts the entry described with {@link key} and
 * {@link value} into the database.
 * 
 * @param string $key The key of the entry to be inserted. If this key
 *   already exist in the database, this function will fail. Use {@link
 *   dba_replace} if you need to replace an existent key.
 * @param string $value The value to be inserted.
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dba_insert($key, $value, $handle){}

/**
 * {@link dba_key_split} splits a key (string representation) into an
 * array representation.
 * 
 * @param mixed $key The key in string representation.
 * @return mixed
 * @since PHP 5
 **/
function dba_key_split($key){}

/**
 * {@link dba_list} list all open database files.
 * 
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function dba_list(){}

/**
 * {@link dba_nextkey} returns the next key of the database and advances
 * the internal key pointer.
 * 
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function dba_nextkey($handle){}

/**
 * {@link dba_open} establishes a database instance for {@link path} with
 * {@link mode} using {@link handler}.
 * 
 * @param string $path Commonly a regular path in your filesystem.
 * @param string $mode It is r for read access, w for read/write access
 *   to an already existing database, c for read/write access and
 *   database creation if it doesn't currently exist, and n for create,
 *   truncate and read/write access. The database is created in BTree
 *   mode, other modes (like Hash or Queue) are not supported.
 *   Additionally you can set the database lock method with the next
 *   char. Use l to lock the database with a .lck file or d to lock the
 *   databasefile itself. It is important that all of your applications
 *   do this consistently. If you want to test the access and do not want
 *   to wait for the lock you can add t as third character. When you are
 *   absolutely sure that you do not require database locking you can do
 *   so by using - instead of l or d. When none of d, l or - is used, dba
 *   will lock on the database file as it would with d.
 * @param string $handler The name of the handler which shall be used
 *   for accessing {@link path}. It is passed all optional parameters
 *   given to {@link dba_open} and can act on behalf of them.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function dba_open($path, $mode, $handler){}

/**
 * {@link dba_optimize} optimizes the underlying database.
 * 
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dba_optimize($handle){}

/**
 * {@link dba_popen} establishes a persistent database instance for
 * {@link path} with {@link mode} using {@link handler}.
 * 
 * @param string $path Commonly a regular path in your filesystem.
 * @param string $mode It is r for read access, w for read/write access
 *   to an already existing database, c for read/write access and
 *   database creation if it doesn't currently exist, and n for create,
 *   truncate and read/write access.
 * @param string $handler The name of the handler which shall be used
 *   for accessing {@link path}. It is passed all optional parameters
 *   given to {@link dba_popen} and can act on behalf of them.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function dba_popen($path, $mode, $handler){}

/**
 * {@link dba_replace} replaces or inserts the entry described with
 * {@link key} and {@link value} into the database specified by {@link
 * handle}.
 * 
 * @param string $key The key of the entry to be replaced.
 * @param string $value The value to be replaced.
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dba_replace($key, $value, $handle){}

/**
 * {@link dba_sync} synchronizes the database. This will probably trigger
 * a physical write to the disk, if supported.
 * 
 * @param resource $handle The database handler, returned by {@link
 *   dba_open} or {@link dba_popen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dba_sync($handle){}

/**
 * Adds a tuple to a {@link relation}.
 * 
 * @param resource $relation
 * @param array $tuple An array of attribute/value pairs to be inserted
 *   into the given {@link relation}. After successful execution this
 *   array will contain the complete data of the newly created tuple,
 *   including all implicitly set domain fields like sequences.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_add($relation, $tuple){}

/**
 * Executes an AQL {@link query} on the given {@link server} and {@link
 * dbpath}.
 * 
 * @param string $query The AQL query to be executed. Further
 *   information on the AQL A... Query Language is provided in the
 *   original db++ manual.
 * @param string $server
 * @param string $dbpath
 * @return resource
 * @since PHP 4 = 0.9
 **/
function dbplus_aql($query, $server, $dbpath){}

/**
 * Changes the virtual current directory where relation files will be
 * looked for by {@link dbplus_open}.
 * 
 * @param string $newdir The new directory for relation files. You can
 *   omit this parameter to query the current working directory.
 * @return string
 * @since PHP 4 = 0.9
 **/
function dbplus_chdir($newdir){}

/**
 * Closes a relation previously opened by {@link dbplus_open}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return mixed
 * @since PHP 4 = 0.9
 **/
function dbplus_close($relation){}

/**
 * Reads the data for the current tuple for the given {@link relation}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple The data will be passed back in this parameter,
 *   as an associative array.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_curr($relation, &$tuple){}

/**
 * Returns a clear error string for the given error code.
 * 
 * @param int $errno The error code. If not provided, the result code
 *   of the last db++ operation is assumed.
 * @return string
 * @since PHP 4 = 0.9
 **/
function dbplus_errcode($errno){}

/**
 * Returns the error code returned by the last db++ operation.
 * 
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_errno(){}

/**
 * Places a constraint on the given {@link relation}.
 * 
 * Further calls to functions like {@link dbplus_curr} or {@link
 * dbplus_next} will only return tuples matching the given constraints.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $constraints Constraints are triplets of strings
 *   containing of a domain name, a comparison operator and a comparison
 *   value. The {@link constraints} parameter array may consist of a
 *   collection of string arrays, each of which contains a domain, an
 *   operator and a value, or of a single string array containing a
 *   multiple of three elements. The comparison operator may be one of
 *   the following strings: '==', '>', '>=', '<', '<=', '!=', '~' for a
 *   regular expression match and 'BAND' or 'BOR' for bitwise operations.
 * @param mixed $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_find($relation, $constraints, $tuple){}

/**
 * Reads the data for the first tuple for the given {@link relation},
 * makes it the current tuple and pass it back as an associative array in
 * {@link tuple}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_first($relation, &$tuple){}

/**
 * Writes all changes applied to {@link relation} since the last flush to
 * disk.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_flush($relation){}

/**
 * Frees all tuple locks held by this client.
 * 
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_freealllocks(){}

/**
 * Releases a write lock on the given {@link tuple} previously obtained
 * by {@link dbplus_getlock}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param string $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_freelock($relation, $tuple){}

/**
 * Frees all tuple locks held on the given {@link relation}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_freerlocks($relation){}

/**
 * Requests a write lock on the specified {@link tuple}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param string $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_getlock($relation, $tuple){}

/**
 * Obtains a number guaranteed to be unique for the given {@link
 * relation} and will pass it back in the variable given as {@link
 * uniqueid}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param int $uniqueid
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_getunique($relation, $uniqueid){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param string $key
 * @param array $result
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_info($relation, $key, &$result){}

/**
 * Reads the data for the last tuple for the given {@link relation},
 * makes it the current tuple and pass it back as an associative array in
 * {@link tuple}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_last($relation, &$tuple){}

/**
 * Requests a write lock on the given {@link relation}.
 * 
 * Other clients may still query the relation, but can't alter it while
 * it is locked.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_lockrel($relation){}

/**
 * Reads the data for the next tuple for the given {@link relation},
 * makes it the current tuple and will pass it back as an associative
 * array in {@link tuple}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_next($relation, &$tuple){}

/**
 * Opens the given relation file.
 * 
 * @param string $name Can be either a file name or a relative or
 *   absolute path name. This will be mapped in any case to an absolute
 *   relation file path on a specific host machine and server.
 * @return resource
 * @since PHP 4 = 0.9
 **/
function dbplus_open($name){}

/**
 * Reads the data for the previous tuple for the given {@link relation},
 * makes it the current tuple and will pass it back as an associative
 * array in {@link tuple}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_prev($relation, &$tuple){}

/**
 * Changes access permissions as specified by {@link mask}, {@link user}
 * and {@link group}. The values for these are operating system specific.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param int $mask
 * @param string $user
 * @param string $group
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_rchperm($relation, $mask, $user, $group){}

/**
 * Creates a new relation. Any existing relation sharing the same {@link
 * name} will be overwritten if the relation is currently not in use and
 * {@link overwrite} is set to TRUE.
 * 
 * @param string $name
 * @param mixed $domlist A combination of domains. May be passed as a
 *   single domain name string or as an array of domain names. This
 *   parameter should contain the domain specification for the new
 *   relation within an array of domain description strings. A domain
 *   description string consists of a domain name unique to this
 *   relation, a slash and a type specification character. See the db++
 *   documentation, especially the dbcreate(1) manpage, for a description
 *   of available type specifiers and their meanings.
 * @param bool $overwrite
 * @return resource
 * @since PHP 4 = 0.9
 **/
function dbplus_rcreate($name, $domlist, $overwrite){}

/**
 * {@link dbplus_rcrtexact} will create an exact but empty copy of the
 * given {@link relation} under a new {@link name}.
 * 
 * @param string $name
 * @param resource $relation The copied relation, opened by {@link
 *   dbplus_open}.
 * @param bool $overwrite An existing relation by the same {@link name}
 *   will only be overwritten if this parameter is set to and no other
 *   process is currently using the relation.
 * @return mixed
 * @since PHP 4 = 0.9
 **/
function dbplus_rcrtexact($name, $relation, $overwrite){}

/**
 * {@link dbplus_rcrtexact} will create an empty copy of the given {@link
 * relation} under a new {@link name}, but with default indices.
 * 
 * @param string $name
 * @param resource $relation The copied relation, opened by {@link
 *   dbplus_open}.
 * @param int $overwrite An existing relation by the same {@link name}
 *   will only be overwritten if this parameter is set to and no other
 *   process is currently using the relation.
 * @return mixed
 * @since PHP 4 = 0.9
 **/
function dbplus_rcrtlike($name, $relation, $overwrite){}

/**
 * {@link dbplus_resolve} will try to resolve the given {@link
 * relation_name} and find out internal server id, real hostname and the
 * database path on this host.
 * 
 * @param string $relation_name The relation name.
 * @return array
 * @since PHP 4 = 0.9
 **/
function dbplus_resolve($relation_name){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_restorepos($relation, $tuple){}

/**
 * {@link dbplus_rkeys} will replace the current primary key for {@link
 * relation} with the combination of domains specified by {@link
 * domlist}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param mixed $domlist A combination of domains. May be passed as a
 *   single domain name string or as an array of domain names.
 * @return mixed
 * @since PHP 4 = 0.9
 **/
function dbplus_rkeys($relation, $domlist){}

/**
 * {@link dbplus_ropen} will open the relation {@link file} locally for
 * quick access without any client/server overhead. Access is read only
 * and only {@link dbplus_curr} and {@link dbplus_next} may be applied to
 * the returned relation.
 * 
 * @param string $name
 * @return resource
 * @since PHP 4 = 0.9
 **/
function dbplus_ropen($name){}

/**
 * {@link dbplus_rquery} performs a local (raw) AQL query using an AQL
 * interpreter embedded into the db++ client library. {@link
 * dbplus_rquery} is faster than {@link dbplus_aql} but will work on
 * local data only.
 * 
 * @param string $query
 * @param string $dbpath
 * @return resource
 * @since PHP 4 = 0.9
 **/
function dbplus_rquery($query, $dbpath){}

/**
 * {@link dbplus_rrename} will change the name of {@link relation} to
 * {@link name}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param string $name
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_rrename($relation, $name){}

/**
 * {@link dbplus_rsecindex} will create a new secondary index for {@link
 * relation} with consists of the domains specified by {@link domlist}
 * and is of type {@link type}
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param mixed $domlist A combination of domains. May be passed as a
 *   single domain name string or as an array of domain names.
 * @param int $type
 * @return mixed
 * @since PHP 4 = 0.9
 **/
function dbplus_rsecindex($relation, $domlist, $type){}

/**
 * {@link dbplus_runlink} will close and remove the {@link relation}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_runlink($relation){}

/**
 * {@link dbplus_rzap} will remove all tuples from {@link relation}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_rzap($relation){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_savepos($relation){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param string $idx_name
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_setindex($relation, $idx_name){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param int $idx_number
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_setindexbynumber($relation, $idx_number){}

/**
 * @param string $query
 * @param string $server
 * @param string $dbpath
 * @return resource
 * @since PHP 4 = 0.9
 **/
function dbplus_sql($query, $server, $dbpath){}

/**
 * A db++ server will prepare a TCL interpreter for each client
 * connection. This interpreter will enable the server to execute TCL
 * code provided by the client as a sort of stored procedures to improve
 * the performance of database operations by avoiding client/server data
 * transfers and context switches.
 * 
 * {@link dbplus_tcl} needs to pass the client connection id the TCL
 * {@link script} code should be executed by. {@link dbplus_resolve} will
 * provide this connection id. The function will return whatever the TCL
 * code returns or a TCL error message if the TCL code fails.
 * 
 * @param int $sid
 * @param string $script
 * @return string
 * @since PHP 4 = 0.9
 **/
function dbplus_tcl($sid, $script){}

/**
 * {@link dbplus_tremove} removes {@link tuple} from {@link relation} if
 * it perfectly matches a tuple within the relation. {@link current}, if
 * given, will contain the data of the new current tuple after calling
 * {@link dbplus_tremove}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $tuple
 * @param array $current
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_tremove($relation, $tuple, &$current){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_undo($relation){}

/**
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_undoprepare($relation){}

/**
 * Release a write lock previously obtained by {@link dbplus_lockrel}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_unlockrel($relation){}

/**
 * Calling {@link dbplus_unselect} will remove a constraint previously
 * set by {@link dbplus_find} on {@link relation}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_unselect($relation){}

/**
 * {@link dbplus_update} replaces the {@link old} tuple with the data
 * from the {@link new} one, only if the {@link old} completely matches a
 * tuple within {@link relation}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @param array $old The old tuple.
 * @param array $new The new tuple.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_update($relation, $old, $new){}

/**
 * Request an exclusive lock on {@link relation} preventing even read
 * access from other clients.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_xlockrel($relation){}

/**
 * Releases an exclusive lock previously obtained by {@link
 * dbplus_xlockrel}.
 * 
 * @param resource $relation A relation opened by {@link dbplus_open}.
 * @return int
 * @since PHP 4 = 0.9
 **/
function dbplus_xunlockrel($relation){}

/**
 * @param object $link_identifier The DBX link object to close.
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.1.0
 **/
function dbx_close($link_identifier){}

/**
 * {@link dbx_compare} is a helper function for {@link dbx_sort} to ease
 * the make and use of the custom sorting function.
 * 
 * @param array $row_a First row
 * @param array $row_b Second row
 * @param string $column_key The compared column
 * @param int $flags The {@link flags} can be set to specify comparison
 *   direction: DBX_CMP_ASC - ascending order DBX_CMP_DESC - descending
 *   order and the preferred comparison type: DBX_CMP_NATIVE - no type
 *   conversion DBX_CMP_TEXT - compare items as strings DBX_CMP_NUMBER -
 *   compare items numerically One of the direction and one of the type
 *   constant can be combined with bitwise OR operator (|).
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5 = 1.1.0
 **/
function dbx_compare($row_a, $row_b, $column_key, $flags){}

/**
 * Opens a connection to a database.
 * 
 * @param mixed $module The {@link module} parameter can be either a
 *   string or a constant, though the latter form is preferred. The
 *   possible values are given below, but keep in mind that they only
 *   work if the module is actually loaded.
 *   
 *   DBX_MYSQL or "mysql" DBX_ODBC or "odbc" DBX_PGSQL or "pgsql"
 *   DBX_MSSQL or "mssql" DBX_FBSQL or "fbsql" DBX_SYBASECT or
 *   "sybase_ct" DBX_OCI8 or "oci8" DBX_SQLITE or "sqlite"
 * @param string $host The SQL server host
 * @param string $database The database name
 * @param string $username The username
 * @param string $password The password
 * @param int $persistent The {@link persistent} parameter can be set
 *   to DBX_PERSISTENT, if so, a persistent connection will be created.
 * @return object
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.1.0
 **/
function dbx_connect($module, $host, $database, $username, $password, $persistent){}

/**
 * {@link dbx_error} returns the last error message.
 * 
 * @param object $link_identifier The DBX link object returned by
 *   {@link dbx_connect}
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.1.0
 **/
function dbx_error($link_identifier){}

/**
 * Escape the given string so that it can safely be used in an
 * sql-statement.
 * 
 * @param object $link_identifier The DBX link object returned by
 *   {@link dbx_connect}
 * @param string $text The string to escape.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5 = 1.1.0
 **/
function dbx_escape_string($link_identifier, $text){}

/**
 * {@link dbx_fetch_row} fetches rows from a result identifier that had
 * the DBX_RESULT_UNBUFFERED flag set.
 * 
 * When the DBX_RESULT_UNBUFFERED is not set in the query, {@link
 * dbx_fetch_row} will fail as all rows have already been fetched into
 * the results data property.
 * 
 * As a side effect, the rows property of the query-result object is
 * incremented for each successful call to {@link dbx_fetch_row}.
 * 
 * @param object $result_identifier A result set returned by {@link
 *   dbx_query}.
 * @return mixed
 * @since PHP 5 = 1.1.0
 **/
function dbx_fetch_row($result_identifier){}

/**
 * Sends a query and fetch all results.
 * 
 * @param object $link_identifier The DBX link object returned by
 *   {@link dbx_connect}
 * @param string $sql_statement SQL statement. Data inside the query
 *   should be properly escaped.
 * @param int $flags The {@link flags} parameter is used to control the
 *   amount of information that is returned. It may be any combination of
 *   the following constants with the bitwise OR operator (|). The
 *   DBX_COLNAMES_* flags override the dbx.colnames_case setting from .
 *   DBX_RESULT_INDEX It is always set, that is, the returned object has
 *   a data property which is a 2 dimensional array indexed numerically.
 *   For example, in the expression data[2][3] 2 stands for the row (or
 *   record) number and 3 stands for the column (or field) number. The
 *   first row and column are indexed at 0. If DBX_RESULT_ASSOC is also
 *   specified, the returning object contains the information related to
 *   DBX_RESULT_INFO too, even if it was not specified. DBX_RESULT_INFO
 *   It provides info about columns, such as field names and field types.
 *   DBX_RESULT_ASSOC It effects that the field values can be accessed
 *   with the respective column names used as keys to the returned
 *   object's data property. Associated results are actually references
 *   to the numerically indexed data, so modifying data[0][0] causes that
 *   data[0]['field_name_for_first_column'] is modified as well.
 *   DBX_RESULT_UNBUFFERED This flag will not create the data property,
 *   and the rows property will initially be 0. Use this flag for large
 *   datasets, and use {@link dbx_fetch_row} to retrieve the results row
 *   by row. The {@link dbx_fetch_row} function will return rows that are
 *   conformant to the flags set with this query. Incidentally, it will
 *   also update the rows each time it is called. DBX_COLNAMES_UNCHANGED
 *   The case of the returned column names will not be changed.
 *   DBX_COLNAMES_UPPERCASE The case of the returned column names will be
 *   changed to uppercase. DBX_COLNAMES_LOWERCASE The case of the
 *   returned column names will be changed to lowercase. Note that
 *   DBX_RESULT_INDEX is always used, regardless of the actual value of
 *   {@link flags} parameter. This means that only the following
 *   combinations are effective: DBX_RESULT_INDEX DBX_RESULT_INDEX |
 *   DBX_RESULT_INFO DBX_RESULT_INDEX | DBX_RESULT_INFO |
 *   DBX_RESULT_ASSOC - this is the default, if {@link flags} is not
 *   specified.
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.1.0
 **/
function dbx_query($link_identifier, $sql_statement, $flags){}

/**
 * Sort a result from a {@link dbx_query} call with a custom sort
 * function.
 * 
 * @param object $result A result set returned by {@link dbx_query}.
 * @param string $user_compare_function The user-defined comparison
 *   function. It must accept two arguments and return an integer less
 *   than, equal to, or greater than zero if the first argument is
 *   considered to be respectively less than, equal to, or greater than
 *   the second.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.1.0
 **/
function dbx_sort($result, $user_compare_function){}

/**
 * This function allows you to override the current domain for a single
 * message lookup.
 * 
 * @param string $domain The domain
 * @param string $message The message
 * @param int $category The category
 * @return string
 * @since PHP 4, PHP 5
 **/
function dcgettext($domain, $message, $category){}

/**
 * This function allows you to override the current domain for a single
 * plural message lookup.
 * 
 * @param string $domain The domain
 * @param string $msgid1
 * @param string $msgid2
 * @param int $n
 * @param int $category
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dcngettext($domain, $msgid1, $msgid2, $n, $category){}

/**
 * Removes the methods and properties from classes that were aggregated
 * to an object.
 * 
 * @param object $object
 * @param string $class_name If the optional {@link class_name}
 *   parameters is passed, only those methods and properties defined in
 *   that class are removed, otherwise all aggregated methods and
 *   properties are eliminated.
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function deaggregate($object, $class_name){}

/**
 * {@link debug_backtrace} generates a PHP backtrace.
 * 
 * @param bool $provide_object Whether or not to populate the "object"
 *   index.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function debug_backtrace($provide_object){}

/**
 * {@link debug_print_backtrace} prints a PHP backtrace. It prints the
 * function calls, included/required files and {@link eval}ed stuff.
 * 
 * @return void
 * @since PHP 5
 **/
function debug_print_backtrace(){}

/**
 * Dumps a string representation of an internal zend value to output.
 * 
 * @param mixed $variable The variable being evaluated.
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function debug_zval_dump($variable){}

/**
 * Returns a string containing a binary representation of the given
 * {@link number} argument.
 * 
 * @param int $number Decimal value to convert
 * @return string
 * @since PHP 4, PHP 5
 **/
function decbin($number){}

/**
 * Returns a string containing a hexadecimal representation of the given
 * {@link number} argument. The largest number that can be converted is
 * 4294967295 in decimal resulting to "ffffffff".
 * 
 * @param int $number Decimal value to convert
 * @return string
 * @since PHP 4, PHP 5
 **/
function dechex($number){}

/**
 * Returns a string containing an octal representation of the given
 * {@link number} argument. The largest number that can be converted is
 * 4294967295 in decimal resulting to "37777777777".
 * 
 * @param int $number Decimal value to convert
 * @return string
 * @since PHP 4, PHP 5
 **/
function decoct($number){}

/**
 * Defines a named constant at runtime.
 * 
 * @param string $name The name of the constant.
 * @param mixed $value The value of the constant; only scalar and null
 *   values are allowed. Scalar values are integer, float, string or
 *   boolean values. It is possible to define resource constants, however
 *   it is not recommended and may cause unpredictable behavior.
 * @param bool $case_insensitive If set to , the constant will be
 *   defined case-insensitive. The default behavior is case-sensitive;
 *   i.e. CONSTANT and Constant represent different values.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function define($name, $value, $case_insensitive){}

/**
 * Checks whether the given constant exists and is defined.
 * 
 * @param string $name The constant name.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function defined($name){}

/**
 * Initializes all variables used in the syslog functions.
 * 
 * @return void
 * @since PHP 4, PHP 5
 **/
function define_syslog_variables(){}

/**
 * This function converts {@link number} from degrees to the radian
 * equivalent.
 * 
 * @param float $number Angular value in degrees
 * @return float
 * @since PHP 4, PHP 5
 **/
function deg2rad($number){}

/**
 * The {@link dgettext} function allows you to override the current
 * {@link domain} for a single message lookup.
 * 
 * @param string $domain The domain
 * @param string $message The message
 * @return string
 * @since PHP 4, PHP 5
 **/
function dgettext($domain, $message){}

/**
 * The function {@link dio_close} closes the file descriptor {@link fd}.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_close($fd){}

/**
 * The {@link dio_fcntl} function performs the operation specified by
 * {@link cmd} on the file descriptor {@link fd}. Some commands require
 * additional arguments {@link args} to be supplied.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @param int $cmd Can be one of the following operations: F_SETLK -
 *   Lock is set or cleared. If the lock is held by someone else {@link
 *   dio_fcntl} returns -1. F_SETLKW - like F_SETLK, but in case the lock
 *   is held by someone else, {@link dio_fcntl} waits until the lock is
 *   released. F_GETLK - {@link dio_fcntl} returns an associative array
 *   (as described above) if someone else prevents lock. If there is no
 *   obstruction key "type" will set to F_UNLCK. F_DUPFD - finds the
 *   lowest numbered available file descriptor greater than or equal to
 *   {@link args} and returns them. F_SETFL - Sets the file descriptors
 *   flags to the value specified by {@link args}, which can be O_APPEND,
 *   O_NONBLOCK or O_ASYNC. To use O_ASYNC you will need to use the PCNTL
 *   extension.
 * @param mixed $args {@link args} is an associative array, when {@link
 *   cmd} is F_SETLK or F_SETLLW, with the following keys: "start" -
 *   offset where lock begins "length" - size of locked area. zero means
 *   to end of file "wenth" - Where l_start is relative to: can be
 *   SEEK_SET, SEEK_END and SEEK_CUR "type" - type of lock: can be
 *   F_RDLCK (read lock), F_WRLCK (write lock) or F_UNLCK (unlock)
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_fcntl($fd, $cmd, $args){}

/**
 * {@link dio_open} opens a file and returns a new file descriptor for
 * it.
 * 
 * @param string $filename The pathname of the file to open.
 * @param int $flags The {@link flags} parameter is a bitwise-ORed
 *   value comprising flags from the following list. This value must
 *   include one of O_RDONLY, O_WRONLY, or O_RDWR. Additionally, it may
 *   include any combination of the other flags from this list. O_RDONLY
 *   - opens the file for read access. O_WRONLY - opens the file for
 *   write access. O_RDWR - opens the file for both reading and writing.
 *   O_CREAT - creates the file, if it doesn't already exist. O_EXCL - if
 *   both O_CREAT and O_EXCL are set and the file already exists, causes
 *   {@link dio_open} to fail. O_TRUNC - if the file exists and is opened
 *   for write access, the file will be truncated to zero length.
 *   O_APPEND - write operations write data at the end of the file.
 *   O_NONBLOCK - sets non blocking mode. O_NOCTTY - prevent the OS from
 *   assigning the opened file as the process's controlling terminal when
 *   opening a TTY device file.
 * @param int $mode If {@link flags} contains O_CREAT, {@link mode}
 *   will set the permissions of the file (creation permissions). {@link
 *   Mode} is required for correct operation when O_CREAT is specified in
 *   mode and is ignored otherwise. The actual permissions assigned to
 *   the created file will be affected by the process's umask setting as
 *   per usual.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_open($filename, $flags, $mode){}

/**
 * The function {@link dio_read} reads and returns {@link len} bytes from
 * file with descriptor {@link fd}.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @param int $len The number of bytes to read. If not specified,
 *   {@link dio_read} reads 1K sized block.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_read($fd, $len){}

/**
 * The function {@link dio_seek} is used to change the file position of
 * the given file descriptor.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @param int $pos The new position.
 * @param int $whence Specifies how the position {@link pos} should be
 *   interpreted: SEEK_SET (default) - specifies that {@link pos} is
 *   specified from the beginning of the file. SEEK_CUR - Specifies that
 *   {@link pos} is a count of characters from the current file position.
 *   This count may be positive or negative. SEEK_END - Specifies that
 *   {@link pos} is a count of characters from the end of the file. A
 *   negative count specifies a position within the current extent of the
 *   file; a positive count specifies a position past the current end. If
 *   you set the position past the current end, and actually write data,
 *   you will extend the file with zeros up to that position.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_seek($fd, $pos, $whence){}

/**
 * {@link dio_stat} returns information about the given file descriptor.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_stat($fd){}

/**
 * {@link dio_tcsetattr} sets the terminal attributes and baud rate of
 * the open {@link fd}.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @param array $options The currently available options are: 'baud' -
 *   baud rate of the port - can be 38400,19200,9600,4800,2400,1800,
 *   1200,600,300,200,150,134,110,75 or 50, default value is 9600. 'bits'
 *   - data bits - can be 8,7,6 or 5. Default value is 8. 'stop' - stop
 *   bits - can be 1 or 2. Default value is 1. 'parity' - can be 0,1 or
 *   2. Default value is 0.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function dio_tcsetattr($fd, $options){}

/**
 * {@link dio_truncate} truncates a file to at most {@link offset} bytes
 * in size.
 * 
 * If the file previously was larger than this size, the extra data is
 * lost. If the file previously was shorter, it is unspecified whether
 * the file is left unchanged or is extended. In the latter case the
 * extended part reads as zero bytes.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @param int $offset The offset in bytes.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_truncate($fd, $offset){}

/**
 * {@link dio_write} writes up to {@link len} bytes from {@link data} to
 * file {@link fd}.
 * 
 * @param resource $fd The file descriptor returned by {@link
 *   dio_open}.
 * @param string $data The written data.
 * @param int $len The length of data to write in bytes. If not
 *   specified, the function writes all the data to the specified file.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dio_write($fd, $data, $len){}

/**
 * Return an instance of the Directory class
 * 
 * @param string $path
 * @return Directory
 * @since PHP 4, PHP 5
 **/
function dir($path){}

/**
 * Given a string containing a path to a file, this function will return
 * the name of the directory.
 * 
 * @param string $path A path. On Windows, both slash (/) and backslash
 *   (\) are used as directory separator character. In other
 *   environments, it is the forward slash (/).
 * @return string
 * @since PHP 4, PHP 5
 **/
function dirname($path){}

/**
 * Given a string containing a directory, this function will return the
 * number of bytes available on the corresponding filesystem or disk
 * partition.
 * 
 * @param string $directory A directory of the filesystem or disk
 *   partition.
 * @return float
 * @since PHP 4, PHP 5
 **/
function diskfreespace($directory){}

/**
 * Given a string containing a directory, this function will return the
 * number of bytes available on the corresponding filesystem or disk
 * partition.
 * 
 * @param string $directory A directory of the filesystem or disk
 *   partition.
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function disk_free_space($directory){}

/**
 * Given a string containing a directory, this function will return the
 * total number of bytes on the corresponding filesystem or disk
 * partition.
 * 
 * @param string $directory A directory of the filesystem or disk
 *   partition.
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function disk_total_space($directory){}

/**
 * Loads the PHP extension given by the parameter {@link library}.
 * 
 * Use {@link extension_loaded} to test whether a given extension is
 * already available or not. This works on both built-in extensions and
 * dynamically loaded ones (either through or {@link dl}).
 * 
 * @param string $library This parameter is only the filename of the
 *   extension to load which also depends on your platform. For example,
 *   the sockets extension (if compiled as a shared module, not the
 *   default!) would be called sockets.so on Unix platforms whereas it is
 *   called php_sockets.dll on the Windows platform. The directory where
 *   the extension is loaded from depends on your platform: Windows - If
 *   not explicitly set in the , the extension is loaded from
 *   C:\php4\extensions\ (PHP4) or C:\php5\ (PHP5) by default. Unix - If
 *   not explicitly set in the , the default extension directory depends
 *   on whether PHP has been built with --enable-debug or not whether PHP
 *   has been built with (experimental) ZTS (Zend Thread Safety) support
 *   or not the current internal ZEND_MODULE_API_NO (Zend internal module
 *   API number, which is basically the date on which a major module API
 *   change happened, e.g. 20010901) Taking into account the above, the
 *   directory then defaults to <install-dir>/lib/php/extensions/
 *   <debug-or-not>-<zts-or-not>-ZEND_MODULE_API_NO, e.g.
 *   /usr/local/php/lib/php/extensions/debug-non-zts-20010901 or
 *   /usr/local/php/lib/php/extensions/no-debug-zts-20010901.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function dl($library){}

/**
 * The {@link dngettext} function allows you to override the current
 * {@link domain} for a single plural message lookup.
 * 
 * @param string $domain The domain
 * @param string $msgid1
 * @param string $msgid2
 * @param int $n
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function dngettext($domain, $msgid1, $msgid2, $n){}

/**
 * Searches DNS for records of type {@link type} corresponding to {@link
 * host}.
 * 
 * @param string $host {@link host} may either be the IP address in
 *   dotted-quad notation or the host name.
 * @param string $type {@link type} may be any one of: A, MX, NS, SOA,
 *   PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.
 * @return bool
 * @since PHP 5
 **/
function dns_check_record($host, $type){}

/**
 * Searches DNS for MX records corresponding to {@link hostname}.
 * 
 * @param string $hostname The Internet host name.
 * @param array $mxhosts A list of the MX records found is placed into
 *   the array {@link mxhosts}.
 * @param array $weight If the {@link weight} array is given, it will
 *   be filled with the weight information gathered.
 * @return bool
 * @since PHP 5
 **/
function dns_get_mx($hostname, &$mxhosts, &$weight){}

/**
 * Fetch DNS Resource Records associated with the given {@link hostname}.
 * 
 * @param string $hostname {@link hostname} should be a valid DNS
 *   hostname such as "www.example.com". Reverse lookups can be generated
 *   using in-addr.arpa notation, but {@link gethostbyaddr} is more
 *   suitable for the majority of reverse lookups.
 * @param int $type By default, {@link dns_get_record} will search for
 *   any resource records associated with {@link hostname}. To limit the
 *   query, specify the optional {@link type} parameter. May be any one
 *   of the following: DNS_A, DNS_CNAME, DNS_HINFO, DNS_MX, DNS_NS,
 *   DNS_PTR, DNS_SOA, DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR, DNS_A6,
 *   DNS_ALL or DNS_ANY.
 * @param array $authns Passed by reference and, if given, will be
 *   populated with Resource Records for the Authoritative Name Servers.
 * @param array $addtl Passed by reference and, if given, will be
 *   populated with any Additional Records.
 * @return array
 * @since PHP 5
 **/
function dns_get_record($hostname, $type, &$authns, &$addtl){}

/**
 * Creates a new Dom document from scratch and returns it.
 * 
 * @param string $version The XML version number of the document.
 * @return DomDocument
 * @since PHP 4 >= 4.2.0
 **/
function domxml_new_doc($version){}

/**
 * The function parses the XML document in the given file.
 * 
 * @param string $filename The path to the XML file. The file is
 *   accessed in read-only mode.
 * @param int $mode This optional parameter can be used to change the
 *   behavior of this function. You can use one of the following
 *   constants for it: DOMXML_LOAD_PARSING (default),
 *   DOMXML_LOAD_VALIDATING or DOMXML_LOAD_RECOVERING. You can add to it
 *   also DOMXML_LOAD_DONT_KEEP_BLANKS, DOMXML_LOAD_SUBSTITUTE_ENTITIES
 *   and DOMXML_LOAD_COMPLETE_ATTRS by bitwise or.
 * @param array $error If used, it will contain the error messages.
 *   {@link error} must be passed in by reference.
 * @return DomDocument
 * @since PHP 4 >= 4.2.0
 **/
function domxml_open_file($filename, $mode, &$error){}

/**
 * The function parses the XML document in the given string.
 * 
 * @param string $str The contents of the XML file.
 * @param int $mode This optional parameter can be used to change the
 *   behavior of this function. You can use one of the following
 *   constants for it: DOMXML_LOAD_PARSING (default),
 *   DOMXML_LOAD_VALIDATING or DOMXML_LOAD_RECOVERING. You can add to it
 *   also DOMXML_LOAD_DONT_KEEP_BLANKS, DOMXML_LOAD_SUBSTITUTE_ENTITIES
 *   and DOMXML_LOAD_COMPLETE_ATTRS by bitwise or.
 * @param array $error If used, it will contain the error messages.
 *   {@link error} must be passed in by reference.
 * @return DomDocument
 * @since PHP 4 >= 4.2.0
 **/
function domxml_open_mem($str, $mode, &$error){}

/**
 * Gets the version of the XML library currently used.
 * 
 * @return string
 * @since PHP 4 >= 4.1.0
 **/
function domxml_version(){}

/**
 * The function parses the XML document in {@link str} and returns a tree
 * PHP objects as the parsed document.
 * 
 * This function is isolated from the other functions, which means you
 * cannot access the tree with any of the other functions. Modifying it,
 * for example by adding nodes, makes no sense since there is currently
 * no way to dump it as an XML file.
 * 
 * However this function may be valuable if you want to read a file and
 * investigate the content.
 * 
 * @param string $str The contents of the XML file.
 * @return DomDocument
 * @since PHP 4 >= 4.2.0
 **/
function domxml_xmltree($str){}

/**
 * Creates a DomXsltStylesheet object from the given XSL buffer.
 * 
 * @param string $xsl_buf The XSL document, as a string.
 * @return DomXsltStylesheet
 * @since PHP 4 >= 4.2.0
 **/
function domxml_xslt_stylesheet($xsl_buf){}

/**
 * Creates a DomXsltStylesheet object from the given XSL document.
 * 
 * @param DomDocument $xsl_doc The XSL document, as a DomDocument
 *   object.
 * @return DomXsltStylesheet
 * @since PHP 4 >= 4.2.0
 **/
function domxml_xslt_stylesheet_doc($xsl_doc){}

/**
 * Creates a DomXsltStylesheet object from the given XSL file.
 * 
 * @param string $xsl_file The path to the XSL document, as a string.
 * @return DomXsltStylesheet
 * @since PHP 4 >= 4.2.0
 **/
function domxml_xslt_stylesheet_file($xsl_file){}

/**
 * Gets the XSLT library version.
 * 
 * @return int
 * @since PHP 4 >= 4.2.0
 **/
function domxml_xslt_version(){}

/**
 * This function takes the node {@link node} of class SimpleXML and makes
 * it into a DOMElement node. This new object can then be used as a
 * native DOMElement node.
 * 
 * @param SimpleXMLElement $node The SimpleXMLElement node.
 * @return DOMElement
 * @since PHP 5
 **/
function dom_import_simplexml($node){}

/**
 * @param string $assembly_name
 * @param string $datatype_name
 * @param int $codepage
 * @return int
 * @since PHP 4
 **/
function dotnet_load($assembly_name, $datatype_name, $codepage){}

/**
 * Gets the float value of {@link var}.
 * 
 * @param mixed $var May be any scalar type. {@link floatval} should
 *   not be used on objects, as doing so will emit an E_NOTICE level
 *   error and return 1.
 * @return float
 * @since PHP 4, PHP 5
 **/
function doubleval($var){}

/**
 * Return the current key and value pair from an array and advance the
 * array cursor.
 * 
 * After {@link each} has executed, the array cursor will be left on the
 * next element of the array, or past the last element if it hits the end
 * of the array. You have to use {@link reset} if you want to traverse
 * the array again using each.
 * 
 * @param array $array The input array.
 * @return array
 * @since PHP 4, PHP 5
 **/
function each(&$array){}

/**
 * Returns the Unix timestamp corresponding to midnight on Easter of the
 * given year.
 * 
 * The date of Easter Day was defined by the Council of Nicaea in AD325
 * as the Sunday after the first full moon which falls on or after the
 * Spring Equinox. The Equinox is assumed to always fall on 21st March,
 * so the calculation reduces to determining the date of the full moon
 * and the date of the following Sunday. The algorithm used here was
 * introduced around the year 532 by Dionysius Exiguus. Under the Julian
 * Calendar (for years before 1753) a simple 19-year cycle is used to
 * track the phases of the Moon. Under the Gregorian Calendar (for years
 * after 1753 - devised by Clavius and Lilius, and introduced by Pope
 * Gregory XIII in October 1582, and into Britain and its then colonies
 * in September 1752) two correction factors are added to make the cycle
 * more accurate.
 * 
 * @param int $year The year as a number between 1970 an 2037
 * @return int
 * @since PHP 4, PHP 5
 **/
function easter_date($year){}

/**
 * Returns the number of days after March 21 on which Easter falls for a
 * given year. If no year is specified, the current year is assumed.
 * 
 * This function can be used instead of {@link easter_date} to calculate
 * Easter for years which fall outside the range of Unix timestamps (i.e.
 * before 1970 or after 2037).
 * 
 * The date of Easter Day was defined by the Council of Nicaea in AD325
 * as the Sunday after the first full moon which falls on or after the
 * Spring Equinox. The Equinox is assumed to always fall on 21st March,
 * so the calculation reduces to determining the date of the full moon
 * and the date of the following Sunday. The algorithm used here was
 * introduced around the year 532 by Dionysius Exiguus. Under the Julian
 * Calendar (for years before 1753) a simple 19-year cycle is used to
 * track the phases of the Moon. Under the Gregorian Calendar (for years
 * after 1753 - devised by Clavius and Lilius, and introduced by Pope
 * Gregory XIII in October 1582, and into Britain and its then colonies
 * in September 1752) two correction factors are added to make the cycle
 * more accurate.
 * 
 * @param int $year The year as a positive number
 * @param int $method Allows to calculate easter dates based on the
 *   Gregorian calendar during the years 1582 - 1752 when set to
 *   CAL_EASTER_ROMAN. See the calendar constants for more valid
 *   constants.
 * @return int
 * @since PHP 4, PHP 5
 **/
function easter_days($year, $method){}

/**
 * Enumerates the Enchant providers and tells you some rudimentary
 * information about them. The same info is provided through phpinfo().
 * 
 * @param resource $broker Broker resource
 * @return array
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_describe($broker){}

/**
 * Tells if a dictionary exists or not, using a non-empty tags
 * 
 * @param resource $broker Broker resource
 * @param string $tag non-empty tag in the LOCALE format, ex: us_US,
 *   ch_DE, etc.
 * @return bool
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_dict_exists($broker, $tag){}

/**
 * Free a broker resource with all its dictionaries.
 * 
 * @param resource $broker Broker resource
 * @return bool
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_free($broker){}

/**
 * Free a dictionary resource.
 * 
 * @param resource $dict Dictionary resource.
 * @return bool
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_free_dict($dict){}

/**
 * Returns the last error which occurred in this broker.
 * 
 * @param resource $broker Broker resource.
 * @return string
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_get_error($broker){}

/**
 * @return resource
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_init(){}

/**
 * Returns a list of available dictionaries with their details.
 * 
 * @param resource $broker Broker resource
 * @return mixed
 * @since PECL enchant >= 1.0.1
 **/
function enchant_broker_list_dicts($broker){}

/**
 * create a new dictionary using tag, the non-empty language tag you wish
 * to request a dictionary for ("en_US", "de_DE", ...)
 * 
 * @param resource $broker Broker resource
 * @param string $tag A tag describing the locale, for example en_US,
 *   de_DE
 * @return resource
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_request_dict($broker, $tag){}

/**
 * Creates a dictionary using a PWL file. A PWL file is personal word
 * file one word per line.
 * 
 * @param resource $broker Broker resource
 * @param string $filename Path to the PWL file.
 * @return resource
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_request_pwl_dict($broker, $filename){}

/**
 * Declares a preference of dictionaries to use for the language
 * described/referred to by 'tag'. The ordering is a comma delimited list
 * of provider names. As a special exception, the "*" tag can be used as
 * a language tag to declare a default ordering for any language that
 * does not explicitly declare an ordering.
 * 
 * @param resource $broker Broker resource
 * @param string $tag Language tag. The special "*" tag can be used as
 *   a language tag to declare a default ordering for any language that
 *   does not explicitly declare an ordering.
 * @param string $ordering Comma delimited list of provider names
 * @return bool
 * @since PECL enchant >= 0.1.0
 **/
function enchant_broker_set_ordering($broker, $tag, $ordering){}

/**
 * Add a word to personal word list of the given dictionary.
 * 
 * @param resource $dict Dictionary resource
 * @param string $word The word to add
 * @return void
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_add_to_personal($dict, $word){}

/**
 * Add a word to the given dictionary. It will be added only for the
 * active spell-checking session.
 * 
 * @param resource $dict Dictionary resource
 * @param string $word The word to add
 * @return void
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_add_to_session($dict, $word){}

/**
 * If the word is correctly spelled return , otherwise return
 * 
 * @param resource $dict Dictionary resource
 * @param string $word The word to check
 * @return bool
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_check($dict, $word){}

/**
 * Returns the details of the dictionary.
 * 
 * @param resource $dict Dictinaray resource
 * @return mixed
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_describe($dict){}

/**
 * Returns the last error of the current spelling-session
 * 
 * @param resource $dict Dictinaray resource
 * @return string
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_get_error($dict){}

/**
 * Tells whether or not a word already exists in the current session.
 * 
 * @param resource $dict Dictionary resource
 * @param string $word The word to lookup
 * @return bool
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_is_in_session($dict, $word){}

/**
 * If the word is correctly spelled return , otherwise return , if
 * suggestions variable is provided, fill it with spelling alternatives.
 * 
 * @param resource $dict Dictionary resource
 * @param string $word The word to check
 * @param array $suggestions If the word is not correctly spelled, this
 *   variable will contain an array of suggestions.
 * @return bool
 * @since PECL enchant:0.2.0-1.0.1
 **/
function enchant_dict_quick_check($dict, $word, &$suggestions){}

/**
 * Add a correction for 'mis' using 'cor'. Notes that you replaced @mis
 * with @cor, so it's possibly more likely that future occurrences of
 * @mis will be replaced with @cor. So it might bump @cor up in the
 * suggestion list.
 * 
 * @param resource $dict Dictionary resource
 * @param string $mis The work to fix
 * @param string $cor The correct word
 * @return void
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_store_replacement($dict, $mis, $cor){}

/**
 * @param resource $dict Dictionary resource
 * @param string $word Word to use for the suggestions.
 * @return array
 * @since PECL enchant >= 0.1.0
 **/
function enchant_dict_suggest($dict, $word){}

/**
 * {@link end} advances {@link array}'s internal pointer to the last
 * element, and returns its value.
 * 
 * @param array $array The array. This array is passed by reference
 *   because it is modified by the function. This means you must pass it
 *   a real variable and not a function returning an array because only
 *   actual variables may be passed by reference.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function end(&$array){}

/**
 * @param string $pattern Case sensitive regular expression.
 * @param string $string The input string.
 * @param array $regs If matches are found for parenthesized substrings
 *   of {@link pattern} and the function is called with the third
 *   argument {@link regs}, the matches will be stored in the elements of
 *   the array {@link regs}. $regs[1] will contain the substring which
 *   starts at the first left parenthesis; $regs[2] will contain the
 *   substring starting at the second, and so on. $regs[0] will contain a
 *   copy of the complete string matched.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ereg($pattern, $string, &$regs){}

/**
 * This function is identical to {@link ereg} except that it ignores case
 * distinction when matching alphabetic characters.
 * 
 * @param string $pattern Case insensitive regular expression.
 * @param string $string The input string.
 * @param array $regs If matches are found for parenthesized substrings
 *   of {@link pattern} and the function is called with the third
 *   argument {@link regs}, the matches will be stored in the elements of
 *   the array {@link regs}. $regs[1] will contain the substring which
 *   starts at the first left parenthesis; $regs[2] will contain the
 *   substring starting at the second, and so on. $regs[0] will contain a
 *   copy of the complete string matched.
 * @return int
 * @since PHP 4, PHP 5
 **/
function eregi($pattern, $string, &$regs){}

/**
 * This function is identical to {@link ereg_replace} except that this
 * ignores case distinction when matching alphabetic characters.
 * 
 * @param string $pattern A POSIX extended regular expression.
 * @param string $replacement If {@link pattern} contains parenthesized
 *   substrings, {@link replacement} may contain substrings of the form
 *   \\digit, which will be replaced by the text matching the digit'th
 *   parenthesized substring; \\0 will produce the entire contents of
 *   string. Up to nine substrings may be used. Parentheses may be
 *   nested, in which case they are counted by the opening parenthesis.
 * @param string $string The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function eregi_replace($pattern, $replacement, $string){}

/**
 * @param string $pattern A POSIX extended regular expression.
 * @param string $replacement If {@link pattern} contains parenthesized
 *   substrings, {@link replacement} may contain substrings of the form
 *   \\digit, which will be replaced by the text matching the digit'th
 *   parenthesized substring; \\0 will produce the entire contents of
 *   string. Up to nine substrings may be used. Parentheses may be
 *   nested, in which case they are counted by the opening parenthesis.
 * @param string $string The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ereg_replace($pattern, $replacement, $string){}

/**
 * Gets information about the last error that occurred.
 * 
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function error_get_last(){}

/**
 * Sends an error message to the web server's error log, a TCP port or to
 * a file.
 * 
 * @param string $message The error message that should be logged.
 * @param int $message_type Says where the error should go. The
 *   possible message types are as follows:
 *   
 *   {@link error_log} log types 0 {@link message} is sent to PHP's
 *   system logger, using the Operating System's system logging mechanism
 *   or a file, depending on what the error_log configuration directive
 *   is set to. This is the default option. 1 {@link message} is sent by
 *   email to the address in the {@link destination} parameter. This is
 *   the only message type where the fourth parameter, {@link
 *   extra_headers} is used. 2 No longer an option. 3 {@link message} is
 *   appended to the file {@link destination}. A newline is not
 *   automatically added to the end of the {@link message} string. 4
 *   {@link message} is sent directly to the SAPI logging handler.
 * @param string $destination The destination. Its meaning depends on
 *   the {@link message_type} parameter as described above.
 * @param string $extra_headers The extra headers. It's used when the
 *   {@link message_type} parameter is set to 1. This message type uses
 *   the same internal function as {@link mail} does.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function error_log($message, $message_type, $destination, $extra_headers){}

/**
 * The {@link error_reporting} function sets the error_reporting
 * directive at runtime. PHP has many levels of errors, using this
 * function sets that level for the duration (runtime) of your script. If
 * the optional {@link level} is not set, {@link error_reporting} will
 * just return the current error reporting level.
 * 
 * @param int $level The new error_reporting level. It takes on either
 *   a bitmask, or named constants. Using named constants is strongly
 *   encouraged to ensure compatibility for future versions. As error
 *   levels are added, the range of integers increases, so older
 *   integer-based error levels will not always behave as expected. The
 *   available error level constants and the actual meanings of these
 *   error levels are described in the predefined constants.
 * @return int
 * @since PHP 4, PHP 5
 **/
function error_reporting($level){}

/**
 * {@link escapeshellarg} adds single quotes around a string and
 * quotes/escapes any existing single quotes allowing you to pass a
 * string directly to a shell function and having it be treated as a
 * single safe argument. This function should be used to escape
 * individual arguments to shell functions coming from user input. The
 * shell functions include {@link exec}, {@link system} and the backtick
 * operator.
 * 
 * @param string $arg The argument that will be escaped.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function escapeshellarg($arg){}

/**
 * {@link escapeshellcmd} escapes any characters in a string that might
 * be used to trick a shell command into executing arbitrary commands.
 * This function should be used to make sure that any data coming from
 * user input is escaped before this data is passed to the {@link exec}
 * or {@link system} functions, or to the backtick operator.
 * 
 * Following characters are preceded by a backslash: #&;`|*?~<>^()[]{}$\,
 * \x0A and \xFF. ' and " are escaped only if they are not paired. In
 * Windows, all these characters plus % are replaced by a space instead.
 * 
 * @param string $command The command that will be escaped.
 * @return string
 * @since PHP 4, PHP 5
 **/
function escapeshellcmd($command){}

/**
 * {@link event_add} schedules the execution of the {@link event} when
 * the event specified in {@link event_set} occurs or in at least the
 * time specified by the {@link timeout} argument. If {@link timeout} was
 * not specified, not timeout is set. The {@link event} must be already
 * initalized by {@link event_set} and {@link event_base_set} functions.
 * If the {@link event} already has a timeout set, it is replaced by the
 * new one.
 * 
 * @param resource $event Valid event resource.
 * @param int $timeout Optional timeout (in microseconds).
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_add($event, $timeout){}

/**
 * Destroys the specified {@link event_base} and frees all the resources
 * associated. Note that it's not possible to destroy an event base with
 * events attached to it.
 * 
 * @param resource $event_base Valid event base resource.
 * @return void
 * @since PECL libevent >= 0.0.1
 **/
function event_base_free($event_base){}

/**
 * Starts event loop for the specified event base.
 * 
 * @param resource $event_base Valid event base resource.
 * @param int $flags Optional parameter, which can take any combination
 *   of EVLOOP_ONCE and EVLOOP_NONBLOCK.
 * @return int
 * @since PECL libevent >= 0.0.1
 **/
function event_base_loop($event_base, $flags){}

/**
 * Abort the active event loop immediately. The behaviour is similar to
 * break statement.
 * 
 * @param resource $event_base Valid event base resource.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_base_loopbreak($event_base){}

/**
 * The next event loop iteration after the given timer expires will
 * complete normally, then exit without blocking for events again.
 * 
 * @param resource $event_base Valid event base resource.
 * @param int $timeout Optional timeout parameter (in microseconds).
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_base_loopexit($event_base, $timeout){}

/**
 * Returns new event base, which can be used later in {@link
 * event_base_set}, {@link event_base_loop} and other functions.
 * 
 * @return resource
 * @since PECL libevent >= 0.0.1
 **/
function event_base_new(){}

/**
 * Sets the number of different event priority levels.
 * 
 * By default all events are scheduled with the same priority ({@link
 * npriorities}/2). Using {@link event_base_priority_init} you can change
 * the number of event priority levels and then set a desired priority
 * for each event.
 * 
 * @param resource $event_base Valid event base resource.
 * @param int $npriorities The number of event priority levels.
 * @return bool
 * @since PECL libevent >= 0.0.2
 **/
function event_base_priority_init($event_base, $npriorities){}

/**
 * Associates the {@link event_base} with the {@link event}.
 * 
 * @param resource $event Valid event resource.
 * @param resource $event_base Valid event base resource.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_base_set($event, $event_base){}

/**
 * Assign the specified {@link bevent} to the {@link event_base}.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param resource $event_base Valid event base resource.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_base_set($bevent, $event_base){}

/**
 * Disables the specified buffered event.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param int $events Any combination of EV_READ and EV_WRITE.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_disable($bevent, $events){}

/**
 * Enables the specified buffered event.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param int $events Any combination of EV_READ and EV_WRITE.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_enable($bevent, $events){}

/**
 * Changes the file descriptor on which the buffered event operates.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param resource $fd Valid PHP stream, must be castable to file
 *   descriptor.
 * @return void
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_fd_set($bevent, $fd){}

/**
 * Destroys the specified buffered event and frees all the resources
 * associated.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @return void
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_free($bevent){}

/**
 * Libevent provides an abstraction layer on top of the regular event
 * API. Using buffered event you don't need to deal with the I/O
 * manually, instead it provides input and output buffers that get filled
 * and drained automatically.
 * 
 * @param resource $stream Valid PHP stream resource. Must be castable
 *   to file descriptor.
 * @param mixed $readcb Callback to invoke where there is data to read,
 *   or NULL if no callback is desired.
 * @param mixed $writecb Callback to invoke where the descriptor is
 *   ready for writing, or NULL if no callback is desired.
 * @param mixed $errorcb Callback to invoke where there is an error on
 *   the descriptor, cannot be NULL.
 * @param mixed $arg An argument that will be passed to each of the
 *   callbacks (optional).
 * @return resource
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_new($stream, $readcb, $writecb, $errorcb, $arg){}

/**
 * Assign a priority to the {@link bevent}.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param int $priority Priority level. Cannot be less than zero and
 *   cannot exceed maximum priority level of the event base (see {@link
 *   event_base_priority_init}).
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_priority_set($bevent, $priority){}

/**
 * Reads data from the input buffer of the buffered event.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param int $data_size Data size in bytes.
 * @return string
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_read($bevent, $data_size){}

/**
 * Sets or changes existing callbacks for the buffered {@link event}.
 * 
 * @param resource $event Valid buffered event resource.
 * @param mixed $readcb Callback to invoke where there is data to read,
 *   or NULL if no callback is desired.
 * @param mixed $writecb Callback to invoke where the descriptor is
 *   ready for writing, or NULL if no callback is desired.
 * @param mixed $errorcb Callback to invoke where there is an error on
 *   the descriptor, cannot be NULL.
 * @param mixed $arg An argument that will be passed to each of the
 *   callbacks (optional).
 * @return resource
 * @since PECL libevent >= 0.0.4
 **/
function event_buffer_set_callback($event, $readcb, $writecb, $errorcb, $arg){}

/**
 * Sets the read and write timeouts for the specified buffered event.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param int $read_timeout Read timeout (in seconds).
 * @param int $write_timeout Write timeout (in seconds).
 * @return void
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_timeout_set($bevent, $read_timeout, $write_timeout){}

/**
 * Sets the watermarks for read and write events. Libevent does not
 * invoke read callback unless there is at least {@link lowmark} bytes in
 * the input buffer; if the read buffer is beyond the {@link highmark},
 * reading is stopped. On output, the write callback is invoked whenever
 * the buffered data falls below the {@link lowmark}.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param int $events Any combination of EV_READ and EV_WRITE.
 * @param int $lowmark Low watermark.
 * @param int $highmark High watermark.
 * @return void
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_watermark_set($bevent, $events, $lowmark, $highmark){}

/**
 * Writes data to the specified buffered event. The data is appended to
 * the output buffer and written to the descriptor when it becomes
 * available for writing.
 * 
 * @param resource $bevent Valid buffered event resource.
 * @param string $data The data to be written.
 * @param int $data_size Optional size parameter. {@link
 *   event_buffer_write} writes all the {@link data} by default.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_buffer_write($bevent, $data, $data_size){}

/**
 * Cancels the {@link event}.
 * 
 * @param resource $event Valid event resource.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_del($event){}

/**
 * Frees previously created event resource.
 * 
 * @param resource $event Valid event resource.
 * @return void
 * @since PECL libevent >= 0.0.1
 **/
function event_free($event){}

/**
 * Creates and returns a new event resource.
 * 
 * @return resource
 * @since PECL libevent >= 0.0.1
 **/
function event_new(){}

/**
 * Prepares the event to be used in {@link event_add}. The event is
 * prepared to call the function specified by the {@link callback} on the
 * events specified in parameter {@link events}, which is a set of the
 * following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE, EV_PERSIST
 * and EV_SIGNAL.
 * 
 * If EV_SIGNAL bit is set in parameter {@link events}, the {@link fd} is
 * interpreted as signal number.
 * 
 * After initializing the event, use {@link event_base_set} to associate
 * the event with its event base.
 * 
 * In case of matching event, these three arguments are passed to the
 * {@link callback} function: {@link fd} Signal number or resource
 * indicating the stream. {@link events} A flag indicating the event.
 * Consists of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ,
 * EV_WRITE, EV_PERSIST and EV_SIGNAL. {@link arg} Optional parameter,
 * previously passed to {@link event_set} as {@link arg}.
 * 
 * @param resource $event Valid event resource.
 * @param mixed $fd Valid PHP stream resource. The stream must be
 *   castable to file descriptor, so you most likely won't be able to use
 *   any of filtered streams.
 * @param int $events A set of flags indicating the desired event, can
 *   be EV_READ and/or EV_WRITE. The additional flag EV_PERSIST makes the
 *   event to persist until {@link event_del} is called, otherwise the
 *   callback is invoked only once.
 * @param mixed $callback Callback function to be called when the
 *   matching event occurs.
 * @param mixed $arg Optional callback parameter.
 * @return bool
 * @since PECL libevent >= 0.0.1
 **/
function event_set($event, $fd, $events, $callback, $arg){}

/**
 * {@link exec} executes the given {@link command}.
 * 
 * @param string $command The command that will be executed.
 * @param array $output If the {@link output} argument is present, then
 *   the specified array will be filled with every line of output from
 *   the command. Trailing whitespace, such as \n, is not included in
 *   this array. Note that if the array already contains some elements,
 *   {@link exec} will append to the end of the array. If you do not want
 *   the function to append elements, call {@link unset} on the array
 *   before passing it to {@link exec}.
 * @param int $return_var If the {@link return_var} argument is present
 *   along with the {@link output} argument, then the return status of
 *   the executed command will be written to this variable.
 * @return string
 * @since PHP 4, PHP 5
 **/
function exec($command, &$output, &$return_var){}

/**
 * {@link exif_imagetype} reads the first bytes of an image and checks
 * its signature.
 * 
 * {@link exif_imagetype} can be used to avoid calls to other exif
 * functions with unsupported file types or in conjunction with
 * $_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is able to
 * see a specific image in the browser.
 * 
 * @param string $filename
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function exif_imagetype($filename){}

/**
 * {@link exif_read_data} reads the EXIF headers from a JPEG or TIFF
 * image file. This way you can read meta data generated by digital
 * cameras.
 * 
 * EXIF headers tend to be present in JPEG/TIFF images generated by
 * digital cameras, but unfortunately each digital camera maker has a
 * different idea of how to actually tag their images, so you can't
 * always rely on a specific Exif header being present.
 * 
 * Height and Width are computed the same way {@link getimagesize} does
 * so their values must not be part of any header returned. Also, html is
 * a height/width text string to be used inside normal HTML.
 * 
 * When an Exif header contains a Copyright note, this itself can contain
 * two values. As the solution is inconsistent in the Exif 2.10 standard,
 * the COMPUTED section will return both entries Copyright.Photographer
 * and Copyright.Editor while the IFD0 sections contains the byte array
 * with the NULL character that splits both entries. Or just the first
 * entry if the datatype was wrong (normal behaviour of Exif). The
 * COMPUTED will also contain the entry Copyright which is either the
 * original copyright string, or a comma separated list of the photo and
 * editor copyright.
 * 
 * The tag UserComment has the same problem as the Copyright tag. It can
 * store two values. First the encoding used, and second the value
 * itself. If so the IFD section only contains the encoding or a byte
 * array. The COMPUTED section will store both in the entries
 * UserCommentEncoding and UserComment. The entry UserComment is
 * available in both cases so it should be used in preference to the
 * value in IFD0 section.
 * 
 * {@link exif_read_data} also validates EXIF data tags according to the
 * EXIF specification (, page 20).
 * 
 * @param string $filename The name of the image file being read. This
 *   cannot be an URL.
 * @param string $sections Is a comma separated list of sections that
 *   need to be present in file to produce a result array. If none of the
 *   requested sections could be found the return value is . FILE
 *   FileName, FileSize, FileDateTime, SectionsFound COMPUTED html,
 *   Width, Height, IsColor, and more if available. Height and Width are
 *   computed the same way {@link getimagesize} does so their values must
 *   not be part of any header returned. Also, html is a height/width
 *   text string to be used inside normal HTML. ANY_TAG Any information
 *   that has a Tag e.g. IFD0, EXIF, ... IFD0 All tagged data of IFD0. In
 *   normal imagefiles this contains image size and so forth. THUMBNAIL A
 *   file is supposed to contain a thumbnail if it has a second IFD. All
 *   tagged information about the embedded thumbnail is stored in this
 *   section. COMMENT Comment headers of JPEG images. EXIF The EXIF
 *   section is a sub section of IFD0. It contains more detailed
 *   information about an image. Most of these entries are digital camera
 *   related.
 * @param bool $arrays Specifies whether or not each section becomes an
 *   array. The {@link sections} COMPUTED, THUMBNAIL, and COMMENT always
 *   become arrays as they may contain values whose names conflict with
 *   other sections.
 * @param bool $thumbnail When set to the thumbnail itself is read.
 *   Otherwise, only the tagged data is read.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function exif_read_data($filename, $sections, $arrays, $thumbnail){}

/**
 * @param int $index The image index
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function exif_tagname($index){}

/**
 * {@link exif_thumbnail} reads the embedded thumbnail of a TIFF or JPEG
 * image.
 * 
 * If you want to deliver thumbnails through this function, you should
 * send the mimetype information using the {@link header} function.
 * 
 * It is possible that {@link exif_thumbnail} cannot create an image but
 * can determine its size. In this case, the return value is but {@link
 * width} and {@link height} are set.
 * 
 * @param string $filename The name of the image file being read. This
 *   image contains an embedded thumbnail.
 * @param int $width The return width of the returned thumbnail.
 * @param int $height The returned height of the returned thumbnail.
 * @param int $imagetype The returned image type of the returned
 *   thumbnail. This is either TIFF or JPEG.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function exif_thumbnail($filename, &$width, &$height, &$imagetype){}

/**
 * Returns e raised to the power of {@link arg}.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4, PHP 5
 **/
function exp($arg){}

/**
 * Waits until the output from a process matches one of the patterns, a
 * specified time period has passed, or an EOF is seen.
 * 
 * If {@link match} is provided, then it is filled with the result of
 * search. The matched string can be found in {@link match[0]}. The match
 * substrings (according to the parentheses) in the original pattern can
 * be found in {@link match[1]}, {@link match[2]}, and so on, up to
 * {@link match[9]} (the limitation of libexpect).
 * 
 * @param resource $expect An Expect stream, previously opened with
 *   {@link expect_popen}.
 * @param array $cases An array of expect cases. Each expect case is an
 *   indexed array, as described in the following table: Expect Case
 *   Array Index Key Value Type Description Is Mandatory Default Value 0
 *   string pattern, that will be matched against the output from the
 *   stream yes 1 mixed value, that will be returned by this function, if
 *   the pattern matches yes 2 integer pattern type, one of: EXP_GLOB,
 *   EXP_EXACT or EXP_REGEXP no EXP_GLOB
 * @param array $match
 * @return int
 * @since PECL expect >= 0.1.0
 **/
function expect_expectl($expect, $cases, &$match){}

/**
 * Execute command via Bourne shell, and open the PTY stream to the
 * process.
 * 
 * @param string $command Command to execute.
 * @return resource
 * @since PECL expect >= 0.1.0
 **/
function expect_popen($command){}

/**
 * Returns an array of strings, each of which is a substring of {@link
 * string} formed by splitting it on boundaries formed by the string
 * {@link delimiter}.
 * 
 * @param string $delimiter The boundary string.
 * @param string $string The input string.
 * @param int $limit If {@link limit} is set and positive, the returned
 *   array will contain a maximum of {@link limit} elements with the last
 *   element containing the rest of {@link string}. If the {@link limit}
 *   parameter is negative, all components except the last -{@link limit}
 *   are returned. If the {@link limit} parameter is zero, then this is
 *   treated as 1.
 * @return array
 * @since PHP 4, PHP 5
 **/
function explode($delimiter, $string, $limit){}

/**
 * {@link expm1} returns the equivalent to 'exp({@link arg}) - 1'
 * computed in a way that is accurate even if the value of {@link arg} is
 * near zero, a case where 'exp ({@link arg}) - 1' would be inaccurate
 * due to subtraction of two numbers that are nearly equal.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function expm1($arg){}

/**
 * Finds out whether the extension is loaded.
 * 
 * @param string $name The extension name. You can see the names of
 *   various extensions by using {@link phpinfo} or if you're using the
 *   CGI or CLI version of PHP you can use the -m switch to list all
 *   available extensions:
 *   
 *   $ php -m [PHP Modules] xml tokenizer standard sockets session posix
 *   pcre overload mysql mbstring ctype
 *   
 *   [Zend Modules]
 * @return bool
 * @since PHP 4, PHP 5
 **/
function extension_loaded($name){}

/**
 * Import variables from an array into the current symbol table.
 * 
 * Checks each key to see whether it has a valid variable name. It also
 * checks for collisions with existing variables in the symbol table.
 * 
 * @param array $var_array An associative array. This function treats
 *   keys as variable names and values as variable values. For each
 *   key/value pair it will create a variable in the current symbol
 *   table, subject to {@link extract_type} and {@link prefix}
 *   parameters. You must use an associative array; a numerically indexed
 *   array will not produce results unless you use EXTR_PREFIX_ALL or
 *   EXTR_PREFIX_INVALID.
 * @param int $extract_type The way invalid/numeric keys and collisions
 *   are treated is determined by the {@link extract_type}. It can be one
 *   of the following values: EXTR_OVERWRITE If there is a collision,
 *   overwrite the existing variable. EXTR_SKIP If there is a collision,
 *   don't overwrite the existing variable. EXTR_PREFIX_SAME If there is
 *   a collision, prefix the variable name with {@link prefix}.
 *   EXTR_PREFIX_ALL Prefix all variable names with {@link prefix}.
 *   EXTR_PREFIX_INVALID Only prefix invalid/numeric variable names with
 *   {@link prefix}. EXTR_IF_EXISTS Only overwrite the variable if it
 *   already exists in the current symbol table, otherwise do nothing.
 *   This is useful for defining a list of valid variables and then
 *   extracting only those variables you have defined out of $_REQUEST,
 *   for example. EXTR_PREFIX_IF_EXISTS Only create prefixed variable
 *   names if the non-prefixed version of the same variable exists in the
 *   current symbol table. EXTR_REFS Extracts variables as references.
 *   This effectively means that the values of the imported variables are
 *   still referencing the values of the {@link var_array} parameter. You
 *   can use this flag on its own or combine it with any other flag by
 *   OR'ing the {@link extract_type}. If {@link extract_type} is not
 *   specified, it is assumed to be EXTR_OVERWRITE.
 * @param string $prefix
 * @return int
 * @since PHP 4, PHP 5
 **/
function extract($var_array, $extract_type, $prefix){}

/**
 * @param string $addr The email address that's being hashed.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function ezmlm_hash($addr){}

/**
 * Terminates monitoring on a resource.
 * 
 * In addition an FAMAcknowledge event occurs.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @param resource $fam_monitor A resource returned by one of the
 *   fam_monitor_XXX functions
 * @return bool
 * @since PHP 5
 **/
function fam_cancel_monitor($fam, $fam_monitor){}

/**
 * Closes a connection to the FAM service.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @return void
 * @since PHP 5
 **/
function fam_close($fam){}

/**
 * Requests monitoring for a collection of files within a directory.
 * 
 * A FAM event will be generated whenever the status of the files change.
 * The possible event codes are described in detail in the constants part
 * of this section.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @param string $dirname Directory path to the monitored files
 * @param int $depth The maximum search {@link depth} starting from
 *   this directory
 * @param string $mask A shell pattern {@link mask} restricting the
 *   file names to look for
 * @return resource
 * @since PHP 5
 **/
function fam_monitor_collection($fam, $dirname, $depth, $mask){}

/**
 * Requests monitoring for a directory and all contained files.
 * 
 * A FAM event will be generated whenever the status of the directory
 * (i.e. the result of function {@link stat} on that directory) or its
 * content (i.e. the results of {@link readdir}) changes.
 * 
 * The possible event codes are described in detail in the constants part
 * of this section.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @param string $dirname Path to the monitored directory
 * @return resource
 * @since PHP 5
 **/
function fam_monitor_directory($fam, $dirname){}

/**
 * Requests monitoring for a single file. A FAM event will be generated
 * whenever the file status changes (i.e. the result of function {@link
 * stat} on that file).
 * 
 * The possible event codes are described in detail in the constants part
 * of this section.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @param string $filename Path to the monitored file
 * @return resource
 * @since PHP 5
 **/
function fam_monitor_file($fam, $filename){}

/**
 * Returns the next pending FAM event.
 * 
 * The function will block until an event is available which can be
 * checked for using {@link fam_pending}.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @return array
 * @since PHP 5
 **/
function fam_next_event($fam){}

/**
 * Opens a connection to the FAM service daemon.
 * 
 * @param string $appname A string identifying the application for
 *   logging reasons
 * @return resource
 * @since PHP 5
 **/
function fam_open($appname){}

/**
 * Checks for pending FAM events.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @return int
 * @since PHP 5
 **/
function fam_pending($fam){}

/**
 * Resumes monitoring of a resource previously suspended using {@link
 * fam_suspend_monitor}.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @param resource $fam_monitor A resource returned by one of the
 *   fam_monitor_XXX functions
 * @return bool
 * @since PHP 5
 **/
function fam_resume_monitor($fam, $fam_monitor){}

/**
 * {@link fam_suspend_monitor} temporarily suspend monitoring of a
 * resource.
 * 
 * Monitoring can later be continued using {@link fam_resume_monitor}
 * without the need of requesting a complete new monitor.
 * 
 * @param resource $fam A resource representing a connection to the FAM
 *   service returned by {@link fam_open}
 * @param resource $fam_monitor A resource returned by one of the
 *   fam_monitor_XXX functions
 * @return bool
 * @since PHP 5
 **/
function fam_suspend_monitor($fam, $fam_monitor){}

/**
 * {@link fbsql_affected_rows} returns the number of rows affected by the
 * last INSERT, UPDATE or DELETE query associated with {@link
 * link_identifier}.
 * 
 * If the last query was a DELETE query with no WHERE clause, all of the
 * records will have been deleted from the table but this function will
 * return zero.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_affected_rows($link_identifier){}

/**
 * Returns the current autocommit status.
 * 
 * @param resource $link_identifier If this optional parameter is given
 *   the auto commit status will be changed. With {@link OnOff} set to
 *   each statement will be committed automatically, if no errors was
 *   found. With OnOff set to the user must commit or rollback the
 *   transaction using either {@link fbsql_commit} or {@link
 *   fbsql_rollback}.
 * @param bool $OnOff
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_autocommit($link_identifier, $OnOff){}

/**
 * Returns the size of the given BLOB.
 * 
 * @param string $blob_handle A BLOB handle, returned by {@link
 *   fbsql_create_blob}.
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_blob_size($blob_handle, $link_identifier){}

/**
 * {@link fbsql_change_user} changes the logged in user of the specified
 * connection. If the new user and password authorization fails, the
 * current connected user stays active.
 * 
 * @param string $user The new user name.
 * @param string $password The new user password.
 * @param string $database If specified, this will be the default or
 *   current database after the user has been changed.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_change_user($user, $password, $database, $link_identifier){}

/**
 * Returns the size of the given CLOB.
 * 
 * @param string $clob_handle A CLOB handle, returned by {@link
 *   fbsql_create_clob}.
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_clob_size($clob_handle, $link_identifier){}

/**
 * Closes the connection to the FrontBase server that's associated with
 * the specified link identifier.
 * 
 * Using {@link fbsql_close} isn't usually necessary, as non-persistent
 * open links are automatically closed at the end of the script's
 * execution.
 * 
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_close($link_identifier){}

/**
 * Ends the current transaction by writing all inserts, updates and
 * deletes to the disk and unlocking all row and table locks held by the
 * transaction. This command is only needed if autocommit is set to
 * false.
 * 
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_commit($link_identifier){}

/**
 * {@link fbsql_connect} establishes a connection to a FrontBase server.
 * 
 * If a second call is made to {@link fbsql_connect} with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling {@link
 * fbsql_close}.
 * 
 * @param string $hostname The server host name.
 * @param string $username The user name for the connection.
 * @param string $password The password for the connection.
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_connect($hostname, $username, $password){}

/**
 * Creates a BLOB from the given data.
 * 
 * @param string $blob_data The BLOB data.
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_create_blob($blob_data, $link_identifier){}

/**
 * Creates a CLOB from the given data.
 * 
 * @param string $clob_data The CLOB data.
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_create_clob($clob_data, $link_identifier){}

/**
 * Attempts to create a new database on the specified server.
 * 
 * @param string $database_name The database name, as a string.
 * @param resource $link_identifier
 * @param string $database_options
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_create_db($database_name, $link_identifier, $database_options){}

/**
 * Get or set the database name used with the connection.
 * 
 * @param resource $link_identifier The database name. If given, the
 *   default database of the connexion will be changed to {@link
 *   database}.
 * @param string $database
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_database($link_identifier, $database){}

/**
 * Sets and retrieves the database password used by the connection. If a
 * database is protected by a database password, the user must call this
 * function before calling {@link fbsql_select_db}.
 * 
 * If no link is open, the function will try to establish a link as if
 * {@link fbsql_connect} was called, and use it.
 * 
 * This function does not change the database password in the database
 * nor can it be used to retrieve the database password for a database.
 * 
 * @param resource $link_identifier The database password, as a string.
 *   If given, the function sets the database password for the specified
 *   link identifier.
 * @param string $database_password
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_database_password($link_identifier, $database_password){}

/**
 * Moves the internal row pointer of the FrontBase result associated with
 * the specified result identifier to point to the specified row number.
 * 
 * The next call to {@link fbsql_fetch_row} would return that row.
 * 
 * @param resource $result The row number. Starts at 0.
 * @param int $row_number
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_data_seek($result, $row_number){}

/**
 * Selects a database and executes a query on it.
 * 
 * @param string $database The database to be selected.
 * @param string $query The SQL query to be executed.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_db_query($database, $query, $link_identifier){}

/**
 * Gets the current status of the specified database.
 * 
 * @param string $database_name The database name.
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function fbsql_db_status($database_name, $link_identifier){}

/**
 * {@link fbsql_drop_db} attempts to drop (remove) an entire database
 * from the server associated with the specified link identifier.
 * 
 * @param string $database_name The database name, as a string.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_drop_db($database_name, $link_identifier){}

/**
 * Returns the numerical value of the error message from previous
 * FrontBase operation.
 * 
 * Errors coming back from the fbsql database backend don't issue
 * warnings. Instead, use {@link fbsql_errno} to retrieve the error code.
 * Note that this function only returns the error code from the most
 * recently executed fbsql function (not including {@link fbsql_error}
 * and {@link fbsql_errno}), so if you want to use it, make sure you
 * check the value before calling another fbsql function.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_errno($link_identifier){}

/**
 * Returns the error message from previous FrontBase operation.
 * 
 * Errors coming back from the fbsql database backend don't issue
 * warnings. Instead, use {@link fbsql_error} to retrieve the error text.
 * Note that this function only returns the error code from the most
 * recently executed fbsql function (not including {@link fbsql_error}
 * and {@link fbsql_errno}), so if you want to use it, make sure you
 * check the value before calling another fbsql function.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_error($link_identifier){}

/**
 * {@link fbsql_fetch_array} is a combination of {@link fbsql_fetch_row}
 * and {@link fbsql_fetch_assoc}.
 * 
 * An important thing to note is that using {@link fbsql_fetch_array} is
 * NOT significantly slower than using {@link fbsql_fetch_row}, while it
 * provides a significant added value.
 * 
 * @param resource $result A constant and can take the following
 *   values: FBSQL_ASSOC, FBSQL_NUM, or FBSQL_BOTH. When using
 *   FBSQL_BOTH, in addition to storing the data in the numeric indices
 *   of the result array, it also stores the data in associative indices,
 *   using the field names as keys.
 * @param int $result_type
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_fetch_array($result, $result_type){}

/**
 * Calling {@link fbsql_fetch_assoc} is equivalent to calling {@link
 * fbsql_fetch_array} with FBSQL_ASSOC as second parameter. It only
 * returns an associative array.
 * 
 * This is the way {@link fbsql_fetch_array} originally worked. If you
 * need the numeric indices as well as the associative, use {@link
 * fbsql_fetch_array}.
 * 
 * An important thing to note is that using {@link fbsql_fetch_assoc} is
 * NOT significantly slower than using {@link fbsql_fetch_row}, while it
 * provides a significant added value.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_fetch_assoc($result){}

/**
 * Used in order to obtain information about fields in a certain query
 * result.
 * 
 * @param resource $result The numerical offset of the field. The field
 *   index starts at 0. If not specified, the next field that wasn't yet
 *   retrieved by {@link fbsql_fetch_field} is retrieved.
 * @param int $field_offset
 * @return object
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_fetch_field($result, $field_offset){}

/**
 * Stores the lengths of each result column in the last row returned by
 * {@link fbsql_fetch_row}, {@link fbsql_fetch_array} and {@link
 * fbsql_fetch_object} in an array.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_fetch_lengths($result){}

/**
 * {@link fbsql_fetch_object} is similar to {@link fbsql_fetch_array},
 * with one difference - an object is returned, instead of an array.
 * Indirectly, that means that you can only access the data by the field
 * names, and not by their offsets (numbers are illegal property names).
 * 
 * Speed-wise, the function is identical to {@link fbsql_fetch_array},
 * and almost as quick as {@link fbsql_fetch_row} (the difference is
 * insignificant).
 * 
 * @param resource $result
 * @return object
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_fetch_object($result){}

/**
 * {@link fbsql_fetch_row} fetches one row of data from the result
 * associated with the specified result identifier.
 * 
 * Subsequent call to {@link fbsql_fetch_row} would return the next row
 * in the result set, or if there are no more rows.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_fetch_row($result){}

/**
 * Gets the flags associated with the specified field in a result.
 * 
 * @param resource $result A result pointer returned by {@link
 *   fbsql_list_fields}.
 * @param int $field_offset The numerical offset of the field. The
 *   field index starts at 0.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_field_flags($result, $field_offset){}

/**
 * Returns the length of the specified field.
 * 
 * @param resource $result A result pointer returned by {@link
 *   fbsql_list_fields}.
 * @param int $field_offset The numerical offset of the field. The
 *   field index starts at 0.
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_field_len($result, $field_offset){}

/**
 * Returns the name of the specified field index.
 * 
 * @param resource $result A result pointer returned by {@link
 *   fbsql_list_fields}.
 * @param int $field_index The numerical offset of the field. The field
 *   index starts at 0.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_field_name($result, $field_index){}

/**
 * Seeks to the specified field offset. If the next call to {@link
 * fbsql_fetch_field} doesn't include a field offset, the field offset
 * specified in {@link fbsql_field_seek} will be returned.
 * 
 * @param resource $result The numerical offset of the field. The field
 *   index starts at 0.
 * @param int $field_offset
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_field_seek($result, $field_offset){}

/**
 * Returns the name of the table that the specified field is in.
 * 
 * @param resource $result The numerical offset of the field. The field
 *   index starts at 0.
 * @param int $field_offset
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_field_table($result, $field_offset){}

/**
 * {@link fbsql_field_type} is similar to the {@link fbsql_field_name}
 * function, but the field type is returned instead.
 * 
 * @param resource $result The numerical offset of the field. The field
 *   index starts at 0.
 * @param int $field_offset
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_field_type($result, $field_offset){}

/**
 * Frees all memory associated with the given {@link result} identifier.
 * 
 * {@link fbsql_free_result} only needs to be called if you are concerned
 * about how much memory is being used for queries that return large
 * result sets. All associated result memory is automatically freed at
 * the end of the script's execution.
 * 
 * @param resource $result
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_free_result($result){}

/**
 * @param resource $link_identifier
 * @return array
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function fbsql_get_autostart_info($link_identifier){}

/**
 * Gets or sets the host name used with a connection.
 * 
 * @param resource $link_identifier If provided, this will be the new
 *   connection host name.
 * @param string $host_name
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_hostname($link_identifier, $host_name){}

/**
 * Gets the id generated from the previous INSERT operation which created
 * a DEFAULT UNIQUE value.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_insert_id($link_identifier){}

/**
 * Return a result pointer containing the databases available from the
 * current fbsql daemon. Use the {@link fbsql_tablename} to traverse this
 * result pointer.
 * 
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_list_dbs($link_identifier){}

/**
 * Retrieves information about the given table.
 * 
 * @param string $database_name The database name.
 * @param string $table_name The table name.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_list_fields($database_name, $table_name, $link_identifier){}

/**
 * Returns a result pointer describing the {@link database}.
 * 
 * @param string $database The database name.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_list_tables($database, $link_identifier){}

/**
 * When sending more than one SQL statement to the server or executing a
 * stored procedure with multiple results will cause the server to return
 * multiple result sets. This function will test for additional results
 * available form the server. If an additional result set exists it will
 * free the existing result set and prepare to fetch the words from the
 * new result set.
 * 
 * @param resource $result
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_next_result($result){}

/**
 * Returns the number of fields in the given {@link result} set.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_num_fields($result){}

/**
 * Gets the number of rows in the given {@link result} set.
 * 
 * This function is only valid for SELECT statements. To retrieve the
 * number of rows returned from a INSERT, UPDATE or DELETE query, use
 * {@link fbsql_affected_rows}.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_num_rows($result){}

/**
 * Get or set the user password used with a connection.
 * 
 * @param resource $link_identifier If provided, this will be the new
 *   connection password.
 * @param string $password
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_password($link_identifier, $password){}

/**
 * Establishes a persistent connection to a FrontBase server.
 * 
 * To set the server port number, use {@link fbsql_select_db}.
 * 
 * {@link fbsql_pconnect} acts very much like {@link fbsql_connect} with
 * two major differences:
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use.
 * 
 * This type of links is therefore called 'persistent'.
 * 
 * @param string $hostname The server host name.
 * @param string $username The user name for the connection.
 * @param string $password The password for the connection.
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_pconnect($hostname, $username, $password){}

/**
 * Sends a {@link query} to the currently active database on the server.
 * 
 * If the query succeeds, you can call {@link fbsql_num_rows} to find out
 * how many rows were returned for a SELECT statement or {@link
 * fbsql_affected_rows} to find out how many rows were affected by a
 * DELETE, INSERT, REPLACE, or UPDATE statement.
 * 
 * @param string $query The SQL query to be executed.
 * @param resource $link_identifier
 * @param int $batch_size
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_query($query, $link_identifier, $batch_size){}

/**
 * Reads BLOB data from the database.
 * 
 * If a select statement contains BLOB and/or CLOB columns FrontBase will
 * return the data directly when data is fetched. This default behavior
 * can be changed with {@link fbsql_set_lob_mode} so the fetch functions
 * will return handles to BLOB and CLOB data. If a handle is fetched a
 * user must call {@link fbsql_read_blob} to get the actual BLOB data
 * from the database.
 * 
 * @param string $blob_handle A BLOB handle, returned by {@link
 *   fbsql_create_blob}.
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_read_blob($blob_handle, $link_identifier){}

/**
 * Reads CLOB data from the database.
 * 
 * If a select statement contains BLOB and/or CLOB columns FrontBase will
 * return the data directly when data is fetched. This default behavior
 * can be changed with {@link fbsql_set_lob_mode} so the fetch functions
 * will return handles to BLOB and CLOB data. If a handle is fetched a
 * user must call {@link fbsql_read_clob} to get the actual CLOB data
 * from the database.
 * 
 * @param string $clob_handle A CLOB handle, returned by {@link
 *   fbsql_create_clob}.
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_read_clob($clob_handle, $link_identifier){}

/**
 * Returns the contents of one cell from a FrontBase {@link result} set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they're MUCH quicker than {@link fbsql_result}.
 * 
 * Calls to {@link fbsql_result} should not be mixed with calls to other
 * functions that deal with the result set.
 * 
 * @param resource $result
 * @param int $row Can be the field's offset, or the field's name, or
 *   the field's table dot field's name (tablename.fieldname). If the
 *   column name has been aliased ('select foo as bar from...'), use the
 *   alias instead of the column name.
 * @param mixed $field
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_result($result, $row, $field){}

/**
 * Ends the current transaction by rolling back all statements issued
 * since last commit.
 * 
 * This command is only needed if autocommit is set to false.
 * 
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_rollback($link_identifier){}

/**
 * Gets the number of rows affected by the last statement.
 * 
 * @param resource $result
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function fbsql_rows_fetched($result){}

/**
 * Sets the current active database on the given link identifier.
 * 
 * The client contacts FBExec to obtain the port number to use for the
 * connection to the database. If the database name is a number the
 * system will use that as a port number and it will not ask FBExec for
 * the port number. The FrontBase server can be stared as FRontBase
 * -FBExec=No -port=<port number> <database name>.
 * 
 * Every subsequent call to {@link fbsql_query} will be made on the
 * active database.
 * 
 * @param string $database_name The name of the database to be
 *   selected. If the database is protected with a database password, the
 *   you must call {@link fbsql_database_password} before selecting the
 *   database.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_select_db($database_name, $link_identifier){}

/**
 * @param resource $link_identifier
 * @param int $characterset
 * @param int $in_out_both
 * @return void
 * @since PHP 5 >= 5.1.0
 **/
function fbsql_set_characterset($link_identifier, $characterset, $in_out_both){}

/**
 * Sets the mode for retrieving LOB data from the database.
 * 
 * When BLOB and CLOB data is retrieved in FrontBase it can be retrieved
 * direct or indirect. Direct retrieved LOB data will always be fetched
 * no matter the setting of the lob mode. If the LOB data is less than
 * 512 bytes it will always be retrieved directly.
 * 
 * @param resource $result Can be one of: FBSQL_LOB_DIRECT - LOB data
 *   is retrieved directly. When data is fetched from the database with
 *   {@link fbsql_fetch_row}, and other fetch functions, all CLOB and
 *   BLOB columns will be returned as ordinary columns. This is the
 *   default value on a new FrontBase result. FBSQL_LOB_HANDLE - LOB data
 *   is retrieved as handles to the data. When data is fetched from the
 *   database with {@link fbsql_fetch_row}, and other fetch functions,
 *   LOB data will be returned as a handle to the data if the data is
 *   stored indirect or the data if it is stored direct. If a handle is
 *   returned it will be a 27 byte string formatted as
 *   @'000000000000000000000000'.
 * @param int $lob_mode
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_set_lob_mode($result, $lob_mode){}

/**
 * Changes the password for the given {@link user}.
 * 
 * @param resource $link_identifier The user name.
 * @param string $user The new password to be set.
 * @param string $password The old password to be replaced.
 * @param string $old_password
 * @return bool
 * @since PHP 5
 **/
function fbsql_set_password($link_identifier, $user, $password, $old_password){}

/**
 * Sets the transaction {@link locking} and {@link isolation}.
 * 
 * @param resource $link_identifier The type of locking to be set. It
 *   can be one of the following constants: FBSQL_LOCK_DEFERRED,
 *   FBSQL_LOCK_OPTIMISTIC, or FBSQL_LOCK_PESSIMISTIC.
 * @param int $locking The type of isolation to be set. It can be one
 *   of the following constants: FBSQL_ISO_READ_UNCOMMITTED,
 *   FBSQL_ISO_READ_COMMITTED, FBSQL_ISO_REPEATABLE_READ,
 *   FBSQL_ISO_SERIALIZABLE, or FBSQL_ISO_VERSIONED.
 * @param int $isolation
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_set_transaction($link_identifier, $locking, $isolation){}

/**
 * Start a database on local or remote server.
 * 
 * @param string $database_name The database name.
 * @param resource $link_identifier
 * @param string $database_options
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_start_db($database_name, $link_identifier, $database_options){}

/**
 * Stops a database on local or remote server.
 * 
 * @param string $database_name The database name.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_stop_db($database_name, $link_identifier){}

/**
 * {@link fbsql_tablename} gets the name of the current table in the
 * given {@link result} set.
 * 
 * The {@link fbsql_num_rows} function may be used to determine the
 * number of tables in the result pointer.
 * 
 * @param resource $result A result pointer returned by {@link
 *   fbsql_list_tables}.
 * @param int $index Integer index for the current table.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_tablename($result, $index){}

/**
 * {@link fbsql_table_name} gets the name of the current table in the
 * given {@link result} set.
 * 
 * The {@link fbsql_num_rows} function may be used to determine the
 * number of tables in the result pointer.
 * 
 * @param resource $result A result pointer returned by {@link
 *   fbsql_list_tables}.
 * @param int $index Integer index for the current table.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fbsql_table_name($result, $index){}

/**
 * Get or set the username used for the connection.
 * 
 * @param resource $link_identifier If provided, this is the new
 *   username to set.
 * @param string $username
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_username($link_identifier, $username){}

/**
 * Enables or disables FrontBase warnings.
 * 
 * @param bool $OnOff Whether to enable warnings or no.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function fbsql_warnings($OnOff){}

/**
 * The file pointed to by {@link handle} is closed.
 * 
 * @param resource $handle The file pointer must be valid, and must
 *   point to a file successfully opened by {@link fopen} or {@link
 *   fsockopen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fclose($handle){}

/**
 * Adds a script to the FDF, which Acrobat then adds to the doc-level
 * scripts of a document, once the FDF is imported into it.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $script_name The script name.
 * @param string $script_code The script code. It is strongly suggested
 *   to use \r for linebreaks within the script code.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_add_doc_javascript($fdf_document, $script_name, $script_code){}

/**
 * @param resource $fdf_document
 * @param int $newpage
 * @param string $filename
 * @param string $template
 * @param int $rename
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fdf_add_template($fdf_document, $newpage, $filename, $template, $rename){}

/**
 * Closes the FDF document.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @return void
 * @since PHP 4, PHP 5
 **/
function fdf_close($fdf_document){}

/**
 * Creates a new FDF document.
 * 
 * This function is needed if one would like to populate input fields in
 * a PDF document with data.
 * 
 * @return resource
 * @since PHP 4, PHP 5
 **/
function fdf_create(){}

/**
 * @param resource $fdf_document
 * @param callback $function
 * @param mixed $userdata
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_enum_values($fdf_document, $function, $userdata){}

/**
 * Gets the error code set by the last FDF function call.
 * 
 * A textual description of the error may be obtained using with {@link
 * fdf_error}.
 * 
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_errno(){}

/**
 * Gets a textual description for the FDF error code given in {@link
 * error_code}.
 * 
 * @param int $error_code An error code obtained with {@link
 *   fdf_errno}. If not provided, this function uses the internal error
 *   code set by the last operation.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_error($error_code){}

/**
 * Gets the appearance of a {@link field} (i.e. the value of the /AP key)
 * and stores it in a file.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $field
 * @param int $face The possible values are FDFNormalAP, FDFRolloverAP
 *   and FDFDownAP.
 * @param string $filename The appearance will be stored in this
 *   parameter.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_get_ap($fdf_document, $field, $face, $filename){}

/**
 * Extracts a file uploaded by means of the "file selection" field {@link
 * fieldname} and stores it under {@link savepath}.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname
 * @param string $savepath May be the name of a plain file or an
 *   existing directory in which the file is to be created under its
 *   original name. Any existing file under the same name will be
 *   overwritten.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_get_attachment($fdf_document, $fieldname, $savepath){}

/**
 * Gets the value of the /Encoding key.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_get_encoding($fdf_document){}

/**
 * Gets the value of the /F key.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function fdf_get_file($fdf_document){}

/**
 * @param resource $fdf_document
 * @param string $fieldname
 * @param int $whichflags
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_get_flags($fdf_document, $fieldname, $whichflags){}

/**
 * @param resource $fdf_document
 * @param string $fieldname
 * @param int $element
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_get_opt($fdf_document, $fieldname, $element){}

/**
 * Gets the value of the /STATUS key.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function fdf_get_status($fdf_document){}

/**
 * Gets the value for the requested field.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string.
 * @param int $which Elements of an array field can be retrieved by
 *   passing this optional parameter, starting at zero. For non-array
 *   fields, this parameter will be ignored.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function fdf_get_value($fdf_document, $fieldname, $which){}

/**
 * Return the FDF version for the given document, or the toolkit API
 * version number if no parameter is given.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_get_version($fdf_document){}

/**
 * This is a convenience function to set appropriate HTTP headers for FDF
 * output. It sets the Content-type: to application/vnd.fdf.
 * 
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_header(){}

/**
 * Gets the name of the field after the given field. This name can be
 * used with several functions.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string. If not
 *   given, the first field will be assumed.
 * @return string
 * @since PHP 4, PHP 5
 **/
function fdf_next_field_name($fdf_document, $fieldname){}

/**
 * Opens a file with form data.
 * 
 * You can also use {@link fdf_open_string} to process the results of a
 * PDF form POST request.
 * 
 * @param string $filename Path to the FDF file. This file must contain
 *   the data as returned from a PDF form or created using {@link
 *   fdf_create} and {@link fdf_save}.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function fdf_open($filename){}

/**
 * Reads form data from a string.
 * 
 * You can use {@link fdf_open_string} together with $HTTP_FDF_DATA to
 * process FDF form input from a remote client.
 * 
 * @param string $fdf_data The data as returned from a PDF form or
 *   created using {@link fdf_create} and {@link fdf_save_string}.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_open_string($fdf_data){}

/**
 * @param resource $fdf_document
 * @param string $fieldname
 * @param int $item
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_remove_item($fdf_document, $fieldname, $item){}

/**
 * Saves a FDF document.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $filename If provided, the resulting FDF will be
 *   written in this parameter. Otherwise, this function will write the
 *   FDF to the default PHP output stream.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fdf_save($fdf_document, $filename){}

/**
 * Returns the FDF document as a string.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_save_string($fdf_document){}

/**
 * Sets the appearance of a field (i.e. the value of the /AP key).
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $field_name
 * @param int $face The possible values FDFNormalAP, FDFRolloverAP and
 *   FDFDownAP.
 * @param string $filename
 * @param int $page_number
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fdf_set_ap($fdf_document, $field_name, $face, $filename, $page_number){}

/**
 * Sets the character encoding for the FDF document.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $encoding The encoding name. The following values are
 *   supported: "Shift-JIS", "UHC", "GBK" and "BigFive". An empty string
 *   resets the encoding to the default PDFDocEncoding/Unicode scheme.
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function fdf_set_encoding($fdf_document, $encoding){}

/**
 * Selects a different PDF document to display the form results in then
 * the form it originated from.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $url Should be given as an absolute URL.
 * @param string $target_frame Use this parameter to specify the frame
 *   in which the document will be displayed. You can also set the
 *   default value for this parameter using {@link fdf_set_target_frame}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fdf_set_file($fdf_document, $url, $target_frame){}

/**
 * Sets certain flags of the given field.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string.
 * @param int $whichFlags
 * @param int $newFlags
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function fdf_set_flags($fdf_document, $fieldname, $whichFlags, $newFlags){}

/**
 * Sets a javascript action for the given field.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string.
 * @param int $trigger
 * @param string $script
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function fdf_set_javascript_action($fdf_document, $fieldname, $trigger, $script){}

/**
 * @param resource $fdf_document
 * @param string $script
 * @param bool $before_data_import
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_set_on_import_javascript($fdf_document, $script, $before_data_import){}

/**
 * Sets options of the given field.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string.
 * @param int $element
 * @param string $str1
 * @param string $str2
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function fdf_set_opt($fdf_document, $fieldname, $element, $str1, $str2){}

/**
 * Sets the value of the /STATUS key. When a client receives a FDF with a
 * status set it will present the value in an alert box.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $status
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fdf_set_status($fdf_document, $status){}

/**
 * Sets a submit form action for the given field.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string.
 * @param int $trigger
 * @param string $script
 * @param int $flags
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function fdf_set_submit_form_action($fdf_document, $fieldname, $trigger, $script, $flags){}

/**
 * Sets the target frame to display a result PDF defined with {@link
 * fdf_save_file} in.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $frame_name The frame name, as a string.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_set_target_frame($fdf_document, $frame_name){}

/**
 * Sets the {@link value} for the given field.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $fieldname Name of the FDF field, as a string.
 * @param mixed $value This parameter will be stored as a string unless
 *   it is an array. In this case all array elements will be stored as a
 *   value array.
 * @param int $isName
 * @return bool
 * @since PHP 4, PHP 5
 **/
function fdf_set_value($fdf_document, $fieldname, $value, $isName){}

/**
 * Sets the FDF {@link version} for the given document.
 * 
 * Some features supported by this extension are only available in newer
 * FDF versions.
 * 
 * @param resource $fdf_document The FDF document handle, returned by
 *   {@link fdf_create}, {@link fdf_open} or {@link fdf_open_string}.
 * @param string $version The version number. For the current FDF
 *   toolkit 5.0, this may be either 1.2, 1.3 or 1.4.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fdf_set_version($fdf_document, $version){}

/**
 * Tests for end-of-file on a file pointer.
 * 
 * @param resource $handle
 * @return bool
 * @since PHP 4, PHP 5
 **/
function feof($handle){}

/**
 * This function forces a write of all buffered output to the resource
 * pointed to by the file {@link handle}.
 * 
 * @param resource $handle
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function fflush($handle){}

/**
 * Gets a character from the given file pointer.
 * 
 * @param resource $handle
 * @return string
 * @since PHP 4, PHP 5
 **/
function fgetc($handle){}

/**
 * Similar to {@link fgets} except that {@link fgetcsv} parses the line
 * it reads for fields in CSV format and returns an array containing the
 * fields read.
 * 
 * @param resource $handle A valid file pointer to a file successfully
 *   opened by {@link fopen}, {@link popen}, or {@link fsockopen}.
 * @param int $length Must be greater than the longest line (in
 *   characters) to be found in the CSV file (allowing for trailing
 *   line-end characters). It became optional in PHP 5. Omitting this
 *   parameter (or setting it to 0 in PHP 5.0.4 and later) the maximum
 *   line length is not limited, which is slightly slower.
 * @param string $delimiter Set the field delimiter (one character
 *   only).
 * @param string $enclosure Set the field enclosure character (one
 *   character only).
 * @param string $escape Set the escape character (one character only).
 *   Defaults as a backslash.
 * @return array
 * @since PHP 4, PHP 5
 **/
function fgetcsv($handle, $length, $delimiter, $enclosure, $escape){}

/**
 * Gets a line from file pointer.
 * 
 * @param resource $handle
 * @param int $length Reading ends when {@link length} - 1 bytes have
 *   been read, on a newline (which is included in the return value), or
 *   on EOF (whichever comes first). If no length is specified, it will
 *   keep reading from the stream until it reaches the end of the line.
 * @return string
 * @since PHP 4, PHP 5
 **/
function fgets($handle, $length){}

/**
 * Identical to {@link fgets}, except that {@link fgetss} attempts to
 * strip any NUL bytes, HTML and PHP tags from the text it reads.
 * 
 * @param resource $handle
 * @param int $length Length of the data to be retrieved.
 * @param string $allowable_tags You can use the optional third
 *   parameter to specify tags which should not be stripped.
 * @return string
 * @since PHP 4, PHP 5
 **/
function fgetss($handle, $length, $allowable_tags){}

/**
 * Reads an entire file into an array.
 * 
 * @param string $filename Path to the file.
 * @param int $flags The optional parameter {@link flags} can be one,
 *   or more, of the following constants: FILE_USE_INCLUDE_PATH Search
 *   for the file in the include_path. FILE_IGNORE_NEW_LINES Do not add
 *   newline at the end of each array element FILE_SKIP_EMPTY_LINES Skip
 *   empty lines
 * @param resource $context
 * @return array
 * @since PHP 4, PHP 5
 **/
function file($filename, $flags, $context){}

/**
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fileatime($filename){}

/**
 * Gets the inode change time of a file.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function filectime($filename){}

/**
 * Gets the file group. The group ID is returned in numerical format, use
 * {@link posix_getgrgid} to resolve it to a group name.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function filegroup($filename){}

/**
 * Gets the file inode.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fileinode($filename){}

/**
 * This function returns the time when the data blocks of a file were
 * being written to, that is, the time when the content of the file was
 * changed.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function filemtime($filename){}

/**
 * Gets the file owner.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fileowner($filename){}

/**
 * Gets permissions for the given file.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fileperms($filename){}

/**
 * This reads and verifies the map file, storing the field count and
 * info.
 * 
 * No locking is done, so you should avoid modifying your filePro
 * database while it may be opened in PHP.
 * 
 * @param string $directory The map directory.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function filepro($directory){}

/**
 * Returns the number of fields (columns) in the opened filePro database.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function filepro_fieldcount(){}

/**
 * Returns the name of the field corresponding to {@link field_number}.
 * 
 * @param int $field_number The field number.
 * @return string
 * @since PHP 4, PHP 5
 **/
function filepro_fieldname($field_number){}

/**
 * Returns the edit type of the field corresponding to {@link
 * field_number}.
 * 
 * @param int $field_number The field number.
 * @return string
 * @since PHP 4, PHP 5
 **/
function filepro_fieldtype($field_number){}

/**
 * Returns the width of the field corresponding to {@link field_number}.
 * 
 * @param int $field_number The field number.
 * @return int
 * @since PHP 4, PHP 5
 **/
function filepro_fieldwidth($field_number){}

/**
 * Returns the data from the specified location in the database.
 * 
 * @param int $row_number The row number. Must be between zero and the
 *   total number of rows minus one (0..{@link filepro_rowcount} - 1)
 * @param int $field_number The field number. Accepts values between
 *   zero and the total number of fields minus one (0..{@link
 *   filepro_fieldcount} - 1)
 * @return string
 * @since PHP 4, PHP 5
 **/
function filepro_retrieve($row_number, $field_number){}

/**
 * Returns the number of rows in the opened filePro database.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function filepro_rowcount(){}

/**
 * Gets the size for the given file.
 * 
 * @param string $filename Path to the file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function filesize($filename){}

/**
 * Returns the type of the given file.
 * 
 * @param string $filename Path to the file.
 * @return string
 * @since PHP 4, PHP 5
 **/
function filetype($filename){}

/**
 * Checks whether a file or directory exists.
 * 
 * @param string $filename Path to the file or directory. On windows,
 *   use //computername/share/filename or \\computername\share\filename
 *   to check files on network shares.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function file_exists($filename){}

/**
 * This function is similar to {@link file}, except that {@link
 * file_get_contents} returns the file in a string, starting at the
 * specified {@link offset} up to {@link maxlen} bytes. On failure,
 * {@link file_get_contents} will return .
 * 
 * {@link file_get_contents} is the preferred way to read the contents of
 * a file into a string. It will use memory mapping techniques if
 * supported by your OS to enhance performance.
 * 
 * @param string $filename Name of the file to read.
 * @param bool $use_include_path
 * @param resource $context A valid context resource created with
 *   {@link stream_context_create}. If you don't need to use a custom
 *   context, you can skip this parameter by .
 * @param int $offset The offset where the reading starts on the
 *   original stream.
 * @param int $maxlen Maximum length of data read. The default is to
 *   read until end of file is reached. Note that this parameter is
 *   applied to the stream processed by the filters.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function file_get_contents($filename, $use_include_path, $context, $offset, $maxlen){}

/**
 * This function is identical to calling {@link fopen}, {@link fwrite}
 * and {@link fclose} successively to write data to a file.
 * 
 * If {@link filename} does not exist, the file is created. Otherwise,
 * the existing file is overwritten, unless the FILE_APPEND flags is set.
 * 
 * @param string $filename Path to the file where to write the data.
 * @param mixed $data The data to write. Can be either a string, an
 *   array or a stream resource. If {@link data} is a stream resource,
 *   the remaining buffer of that stream will be copied to the specified
 *   file. This is similar with using {@link stream_copy_to_stream}. You
 *   can also specify the {@link data} parameter as a single dimension
 *   array. This is equivalent to file_put_contents($filename,
 *   implode('', $array)).
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following flags (with some restrictions), joined with the
 *   binary OR (|) operator.
 *   
 *   Available flags Flag Description FILE_USE_INCLUDE_PATH Search for
 *   {@link filename} in the include directory. See include_path for more
 *   information. FILE_APPEND If file {@link filename} already exists,
 *   append the data to the file instead of overwriting it. Mutually
 *   exclusive with LOCK_EX since appends are atomic and thus there is no
 *   reason to lock. LOCK_EX Acquire an exclusive lock on the file while
 *   proceeding to the writing. Mutually exclusive with FILE_APPEND.
 * @param resource $context A valid context resource created with
 *   {@link stream_context_create}.
 * @return int
 * @since PHP 5
 **/
function file_put_contents($filename, $data, $flags, $context){}

/**
 * @param int $type One of INPUT_GET, INPUT_POST, INPUT_COOKIE,
 *   INPUT_SERVER, or INPUT_ENV.
 * @param string $variable_name Name of a variable to check.
 * @return bool
 * @since PHP 5 >= 5.2.0
 **/
function filter_has_var($type, $variable_name){}

/**
 * @param string $filtername Name of a filter to get.
 * @return int
 * @since PHP 5 >= 5.2.0
 **/
function filter_id($filtername){}

/**
 * @param int $type One of INPUT_GET, INPUT_POST, INPUT_COOKIE,
 *   INPUT_SERVER, or INPUT_ENV.
 * @param string $variable_name Name of a variable to get.
 * @param int $filter Filter to apply.
 * @param mixed $options Associative array of options or bitwise
 *   disjunction of flags. If filter accepts options, flags can be
 *   provided in "flags" field of array.
 * @return mixed
 * @since PHP 5 >= 5.2.0
 **/
function filter_input($type, $variable_name, $filter, $options){}

/**
 * This function is useful for retrieving many values without
 * repetitively calling {@link filter_input}.
 * 
 * @param int $type One of INPUT_GET, INPUT_POST, INPUT_COOKIE,
 *   INPUT_SERVER, or INPUT_ENV.
 * @param mixed $definition An array defining the arguments. A valid
 *   key is a string containing a variable name and a valid value is
 *   either a filter type, or an array optionally specifying the filter,
 *   flags and options. If the value is an array, valid keys are filter
 *   which specifies the filter type, flags which specifies any flags
 *   that apply to the filter, and options which specifies any options
 *   that apply to the filter. See the example below for a better
 *   understanding. This parameter can be also an integer holding a
 *   filter constant. Then all values in the input array are filtered by
 *   this filter.
 * @return mixed
 * @since PHP 5 >= 5.2.0
 **/
function filter_input_array($type, $definition){}

/**
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function filter_list(){}

/**
 * @param mixed $variable Value to filter.
 * @param int $filter ID of a filter to use (see the manual page).
 * @param mixed $options Associative array of options or bitwise
 *   disjunction of flags. If filter accepts options, flags can be
 *   provided in "flags" field of array. For the "callback" filter,
 *   callback type should be passed. The callback must accept one
 *   argument, the value to be filtered, and return the value after
 *   filtering/sanitizing it.
 *   
 *   <?php // for filters that accept options, use this format $options =
 *   array( 'options' => array( 'default' => 3, // value to return if the
 *   filter fails // other options here 'min_range' => 0 ), 'flags' =>
 *   FILTER_FLAG_ALLOW_OCTAL, ); $var = filter_var('0755',
 *   FILTER_VALIDATE_INT, $options);
 *   
 *   // for filter that only accept flags, you can pass them directly
 *   $var = filter_var('oops', FILTER_VALIDATE_BOOLEAN,
 *   FILTER_NULL_ON_FAILURE);
 *   
 *   // for filter that only accept flags, you can also pass as an array
 *   $var = filter_var('oops', FILTER_VALIDATE_BOOLEAN, array('flags' =>
 *   FILTER_NULL_ON_FAILURE));
 *   
 *   // callback filter function foo($value) { $ret = new stdClass;
 *   $ret->value = filter_var($value, FILTER_VALIDATE_BOOLEAN,
 *   array('flags' => FILTER_NULL_ON_FAILURE)); return $ret; } $var =
 *   filter_var('yes', FILTER_CALLBACK, array('options' => 'foo')); ?>
 * @return mixed
 * @since PHP 5 >= 5.2.0
 **/
function filter_var($variable, $filter, $options){}

/**
 * This function is useful for retrieving many values without
 * repetitively calling {@link filter_var}.
 * 
 * @param array $data An array with string keys containing the data to
 *   filter.
 * @param mixed $definition An array defining the arguments. A valid
 *   key is a string containing a variable name and a valid value is
 *   either a filter type, or an array optionally specifying the filter,
 *   flags and options. If the value is an array, valid keys are filter
 *   which specifies the filter type, flags which specifies any flags
 *   that apply to the filter, and options which specifies any options
 *   that apply to the filter. See the example below for a better
 *   understanding. This parameter can be also an integer holding a
 *   filter constant. Then all values in the input array are filtered by
 *   this filter.
 * @return mixed
 * @since PHP 5 >= 5.2.0
 **/
function filter_var_array($data, $definition){}

/**
 * This function is used to get information about binary data in a
 * string.
 * 
 * @param resource $finfo Fileinfo resource returned by {@link
 *   finfo_open}.
 * @param string $string Content of a file to be checked.
 * @param int $options One or disjunction of more Fileinfo constants.
 * @param resource $context
 * @return string
 * @since PHP 5 >= 5.3.0, PECL fileinfo >= 0.1.0
 **/
function finfo_buffer($finfo, $string, $options, $context){}

/**
 * This function closes the resource opened by {@link finfo_open}.
 * 
 * @param resource $finfo Fileinfo resource returned by {@link
 *   finfo_open}.
 * @return bool
 * @since PHP >= 5.3.0, PECL fileinfo >= 0.1.0
 **/
function finfo_close($finfo){}

/**
 * This function is used to get information about a file.
 * 
 * @param resource $finfo Fileinfo resource returned by {@link
 *   finfo_open}.
 * @param string $file_name Name of a file to be checked.
 * @param int $options One or disjunction of more Fileinfo constants.
 * @param resource $context For a description of contexts, refer to .
 * @return string
 * @since PHP >= 5.3.0, PECL fileinfo >= 0.1.0
 **/
function finfo_file($finfo, $file_name, $options, $context){}

/**
 * This function opens a magic database and returns its resource.
 * 
 * @param int $options One or disjunction of more Fileinfo constants.
 * @param string $magic_file Name of a magic database file, usually
 *   something like /path/to/magic.mime. If not specified, the MAGIC
 *   environment variable is used. If this variable is not set either,
 *   /usr/share/misc/magic is used by default. A .mime and/or .mgc suffix
 *   is added if needed. Passing NULL or an empty string will be
 *   equivalent to the default value.
 * @return resource
 * @since PHP >= 5.3.0, PECL fileinfo >= 0.1.0
 **/
function finfo_open($options, $magic_file){}

/**
 * This function sets various Fileinfo options. Options can be set also
 * directly in {@link finfo_open} or other Fileinfo functions.
 * 
 * @param resource $finfo Fileinfo resource returned by {@link
 *   finfo_open}.
 * @param int $options One or disjunction of more Fileinfo constants.
 * @return bool
 * @since PHP >= 5.3.0, PECL fileinfo >= 0.1.0
 **/
function finfo_set_flags($finfo, $options){}

/**
 * Gets the float value of {@link var}.
 * 
 * @param mixed $var May be any scalar type. {@link floatval} should
 *   not be used on objects, as doing so will emit an E_NOTICE level
 *   error and return 1.
 * @return float
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function floatval($var){}

/**
 * {@link flock} allows you to perform a simple reader/writer model which
 * can be used on virtually every platform (including most Unix
 * derivatives and even Windows).
 * 
 * The lock is released also by {@link fclose} (which is also called
 * automatically when script finished).
 * 
 * PHP supports a portable way of locking complete files in an advisory
 * way (which means all accessing programs have to use the same way of
 * locking or it will not work). By default, this function will block
 * until the requested lock is acquired; this may be controlled (on
 * non-Windows platforms) with the LOCK_NB option documented below.
 * 
 * @param resource $handle An open file pointer.
 * @param int $operation {@link operation} is one of the following:
 *   LOCK_SH to acquire a shared lock (reader). LOCK_EX to acquire an
 *   exclusive lock (writer). LOCK_UN to release a lock (shared or
 *   exclusive). It is also possible to add LOCK_NB as a bitmask to one
 *   of the above operations if you don't want {@link flock} to block
 *   while locking. (not supported on Windows)
 * @param int $wouldblock The optional third argument is set to if the
 *   lock would block (EWOULDBLOCK errno condition). (not supported on
 *   Windows)
 * @return bool
 * @since PHP 4, PHP 5
 **/
function flock($handle, $operation, &$wouldblock){}

/**
 * @param float $value The numeric value to round
 * @return float
 * @since PHP 4, PHP 5
 **/
function floor($value){}

/**
 * Flushes the write buffers of PHP and whatever backend PHP is using
 * (CGI, a web server, etc). This attempts to push current output all the
 * way to the browser with a few caveats.
 * 
 * {@link flush} may not be able to override the buffering scheme of your
 * web server and it has no effect on any client-side buffering in the
 * browser. It also doesn't affect PHP's userspace output buffering
 * mechanism. This means you will have to call both {@link ob_flush} and
 * {@link flush} to flush the ob output buffers if you are using those.
 * 
 * Several servers, especially on Win32, will still buffer the output
 * from your script until it terminates before transmitting the results
 * to the browser.
 * 
 * Server modules for Apache like mod_gzip may do buffering of their own
 * that will cause {@link flush} to not result in data being sent
 * immediately to the client.
 * 
 * Even the browser may buffer its input before displaying it. Netscape,
 * for example, buffers text until it receives an end-of-line or the
 * beginning of a tag, and it won't render tables until the </table> tag
 * of the outermost table is seen.
 * 
 * Some versions of Microsoft Internet Explorer will only start to
 * display the page after they have received 256 bytes of output, so you
 * may need to send extra whitespace before flushing to get those
 * browsers to display the page.
 * 
 * @return void
 * @since PHP 4, PHP 5
 **/
function flush(){}

/**
 * Returns the floating point remainder of dividing the dividend ({@link
 * x}) by the divisor ({@link y}). The reminder (r) is defined as: x = i
 * * y + r, for some integer i. If {@link y} is non-zero, r has the same
 * sign as {@link x} and a magnitude less than the magnitude of {@link
 * y}.
 * 
 * @param float $x The dividend
 * @param float $y The divisor
 * @return float
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function fmod($x, $y){}

/**
 * {@link fnmatch} checks if the passed {@link string} would match the
 * given shell wildcard {@link pattern}.
 * 
 * @param string $pattern The shell wildcard pattern.
 * @param string $string The tested string. This function is especially
 *   useful for filenames, but may also be used on regular strings. The
 *   average user may be used to shell patterns or at least in their
 *   simplest form to '?' and '*' wildcards so using {@link fnmatch}
 *   instead of {@link preg_match} for frontend search expression input
 *   may be way more convenient for non-programming users.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following flags, joined with the binary OR (|) operator. A
 *   list of possible flags for {@link fnmatch} {@link Flag} Description
 *   FNM_NOESCAPE Disable backslash escaping. FNM_PATHNAME Slash in
 *   string only matches slash in the given pattern. FNM_PERIOD Leading
 *   period in string must be exactly matched by period in the given
 *   pattern. FNM_CASEFOLD Caseless match. Part of the GNU extension.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function fnmatch($pattern, $string, $flags){}

/**
 * {@link fopen} binds a named resource, specified by {@link filename},
 * to a stream.
 * 
 * @param string $filename If {@link filename} is of the form
 *   "scheme://...", it is assumed to be a URL and PHP will search for a
 *   protocol handler (also known as a wrapper) for that scheme. If no
 *   wrappers for that protocol are registered, PHP will emit a notice to
 *   help you track potential problems in your script and then continue
 *   as though {@link filename} specifies a regular file. If PHP has
 *   decided that {@link filename} specifies a local file, then it will
 *   try to open a stream on that file. The file must be accessible to
 *   PHP, so you need to ensure that the file access permissions allow
 *   this access. If you have enabled , or open_basedir further
 *   restrictions may apply. If PHP has decided that {@link filename}
 *   specifies a registered protocol, and that protocol is registered as
 *   a network URL, PHP will check to make sure that allow_url_fopen is
 *   enabled. If it is switched off, PHP will emit a warning and the
 *   fopen call will fail. On the Windows platform, be careful to escape
 *   any backslashes used in the path to the file, or use forward
 *   slashes.
 *   
 *   <?php $handle = fopen("c:\\folder\\resource.txt", "r"); ?>
 * @param string $mode The {@link mode} parameter specifies the type of
 *   access you require to the stream. It may be any of the following: A
 *   list of possible modes for {@link fopen} using {@link mode} {@link
 *   mode} Description 'r' Open for reading only; place the file pointer
 *   at the beginning of the file. 'r+' Open for reading and writing;
 *   place the file pointer at the beginning of the file. 'w' Open for
 *   writing only; place the file pointer at the beginning of the file
 *   and truncate the file to zero length. If the file does not exist,
 *   attempt to create it. 'w+' Open for reading and writing; place the
 *   file pointer at the beginning of the file and truncate the file to
 *   zero length. If the file does not exist, attempt to create it. 'a'
 *   Open for writing only; place the file pointer at the end of the
 *   file. If the file does not exist, attempt to create it. 'a+' Open
 *   for reading and writing; place the file pointer at the end of the
 *   file. If the file does not exist, attempt to create it. 'x' Create
 *   and open for writing only; place the file pointer at the beginning
 *   of the file. If the file already exists, the {@link fopen} call will
 *   fail by returning and generating an error of level E_WARNING. If the
 *   file does not exist, attempt to create it. This is equivalent to
 *   specifying O_EXCL|O_CREAT flags for the underlying open(2) system
 *   call. 'x+' Create and open for reading and writing; place the file
 *   pointer at the beginning of the file. If the file already exists,
 *   the {@link fopen} call will fail by returning and generating an
 *   error of level E_WARNING. If the file does not exist, attempt to
 *   create it. This is equivalent to specifying O_EXCL|O_CREAT flags for
 *   the underlying open(2) system call.
 * @param bool $use_include_path The optional third {@link
 *   use_include_path} parameter can be set to '1' or if you want to
 *   search for the file in the include_path, too.
 * @param resource $context
 * @return resource
 * @since PHP 4, PHP 5
 **/
function fopen($filename, $mode, $use_include_path, $context){}

/**
 * Calls a user defined function or method given by the {@link function}
 * parameter, with the following arguments. This function must be called
 * within a method context, it can't be used outside a class.
 * 
 * @param callback $function The function or method to be called. This
 *   parameter may be an array, with the name of the class, and the
 *   method, or a string, with a function name.
 * @param mixed $parameter Zero or more parameters to be passed to the
 *   function.
 * @return mixed
 * @since PHP 5 >= 5.3.0
 **/
function forward_static_call($function, $parameter){}

/**
 * Calls a user defined function or method given by the {@link function}
 * parameter. This function must be called within a method context, it
 * can't be used outside a class. All arguments of the forwarded method
 * are passed as values, and as an array, similarly to {@link
 * call_user_func_array}.
 * 
 * @param callback $function The function or method to be called. This
 *   parameter may be an , with the name of the class, and the method, or
 *   a , with a function name.
 * @param array $parameters One parameter, gathering all the method
 *   parameter in one array.
 * @return mixed
 * @since PHP 5 >= 5.3.0
 **/
function forward_static_call_array($function, $parameters){}

/**
 * Reads to EOF on the given file pointer from the current position and
 * writes the results to the output buffer.
 * 
 * You may need to call {@link rewind} to reset the file pointer to the
 * beginning of the file if you have already written data to the file.
 * 
 * If you just want to dump the contents of a file to the output buffer,
 * without first modifying it or seeking to a particular offset, you may
 * want to use the {@link readfile}, which saves you the {@link fopen}
 * call.
 * 
 * @param resource $handle
 * @return int
 * @since PHP 4, PHP 5
 **/
function fpassthru($handle){}

/**
 * Write a string produced according to {@link format} to the stream
 * resource specified by {@link handle}.
 * 
 * @param resource $handle
 * @param string $format See {@link sprintf} for a description of
 *   {@link format}.
 * @param mixed $args
 * @return int
 * @since PHP 5
 **/
function fprintf($handle, $format, $args){}

/**
 * {@link fputcsv} formats a line (passed as a {@link fields} array) as
 * CSV and write it (terminated by a newline) to the specified file
 * {@link handle}.
 * 
 * @param resource $handle
 * @param array $fields An array of values.
 * @param string $delimiter The optional {@link delimiter} parameter
 *   sets the field delimiter (one character only).
 * @param string $enclosure The optional {@link enclosure} parameter
 *   sets the field enclosure (one character only).
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function fputcsv($handle, $fields, $delimiter, $enclosure){}

/**
 * @param resource $handle
 * @param string $string The string that is to be written.
 * @param int $length If the {@link length} argument is given, writing
 *   will stop after {@link length} bytes have been written or the end of
 *   {@link string} is reached, whichever comes first. Note that if the
 *   {@link length} argument is given, then the magic_quotes_runtime
 *   configuration option will be ignored and no slashes will be stripped
 *   from {@link string}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fputs($handle, $string, $length){}

/**
 * {@link fread} reads up to {@link length} bytes from the file pointer
 * referenced by {@link handle}. Reading stops as soon as one of the
 * following conditions is met: {@link length} bytes have been read EOF
 * (end of file) is reached a packet becomes available (for network
 * streams) 8192 bytes have been read (after opening userspace stream)
 * 
 * @param resource $handle
 * @param int $length Up to {@link length} number of bytes read.
 * @return string
 * @since PHP 4, PHP 5
 **/
function fread($handle, $length){}

/**
 * Converts a date from the French Republican Calendar to a Julian Day
 * Count.
 * 
 * These routines only convert dates in years 1 through 14 (Gregorian
 * dates 22 September 1792 through 22 September 1806). This more than
 * covers the period when the calendar was in use.
 * 
 * @param int $month The month as a number from 1 (for Vendémiaire) to
 *   13 (for the period of 5-6 days at the end of each year)
 * @param int $day The day as a number from 1 to 30
 * @param int $year The year as a number between 1 and 14
 * @return int
 * @since PHP 4, PHP 5
 **/
function frenchtojd($month, $day, $year){}

/**
 * Converts a logical string to a visual one.
 * 
 * @param string $str The logical string.
 * @param string $direction One of FRIBIDI_RTL, FRIBIDI_LTR or
 *   FRIBIDI_AUTO.
 * @param int $charset One of the FRIBIDI_CHARSET_XXX constants.
 * @return string
 * @since PHP 4 >= 4.0.4 and PHP 4 = 1.0
 **/
function fribidi_log2vis($str, $direction, $charset){}

/**
 * The function {@link fscanf} is similar to {@link sscanf}, but it takes
 * its input from a file associated with {@link handle} and interprets
 * the input according to the specified {@link format}, which is
 * described in the documentation for {@link sprintf}.
 * 
 * Any whitespace in the format string matches any whitespace in the
 * input stream. This means that even a tab \t in the format string can
 * match a single space character in the input stream.
 * 
 * Each call to {@link fscanf} reads one line from the file.
 * 
 * @param resource $handle
 * @param string $format The specified format as described in the
 *   {@link sprintf} documentation.
 * @return mixed
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function fscanf($handle, $format){}

/**
 * Sets the file position indicator for the file referenced by {@link
 * handle}. The new position, measured in bytes from the beginning of the
 * file, is obtained by adding {@link offset} to the position specified
 * by {@link whence}.
 * 
 * @param resource $handle
 * @param int $offset The offset. To move to a position before the
 *   end-of-file, you need to pass a negative value in {@link offset} and
 *   set {@link whence} to SEEK_END.
 * @param int $whence {@link whence} values are: SEEK_SET - Set
 *   position equal to {@link offset} bytes. SEEK_CUR - Set position to
 *   current location plus {@link offset}. SEEK_END - Set position to
 *   end-of-file plus {@link offset}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fseek($handle, $offset, $whence){}

/**
 * Initiates a socket connection to the resource specified by {@link
 * hostname}.
 * 
 * PHP supports targets in the Internet and Unix domains as described in
 * . A list of supported transports can also be retrieved using {@link
 * stream_get_transports}.
 * 
 * The socket will by default be opened in blocking mode. You can switch
 * it to non-blocking mode by using {@link stream_set_blocking}.
 * 
 * @param string $hostname If you have compiled in OpenSSL support, you
 *   may prefix the {@link hostname} with either ssl:// or tls:// to use
 *   an SSL or TLS client connection over TCP/IP to connect to the remote
 *   host.
 * @param int $port The port number.
 * @param int $errno If provided, holds the system level error number
 *   that occurred in the system-level connect() call. If the value
 *   returned in {@link errno} is 0 and the function returned , it is an
 *   indication that the error occurred before the connect() call. This
 *   is most likely due to a problem initializing the socket.
 * @param string $errstr The error message as a string.
 * @param float $timeout The connection timeout, in seconds.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function fsockopen($hostname, $port, &$errno, &$errstr, $timeout){}

/**
 * Gathers the statistics of the file opened by the file pointer {@link
 * handle}. This function is similar to the {@link stat} function except
 * that it operates on an open file pointer instead of a filename.
 * 
 * @param resource $handle
 * @return array
 * @since PHP 4, PHP 5
 **/
function fstat($handle){}

/**
 * Returns the position of the file pointer referenced by {@link handle}.
 * 
 * @param resource $handle The file pointer must be valid, and must
 *   point to a file successfully opened by {@link fopen} or {@link
 *   popen}. {@link ftell} gives undefined results for append-only
 *   streams (opened with "a" flag).
 * @return int
 * @since PHP 4, PHP 5
 **/
function ftell($handle){}

/**
 * The function converts the {@link pathname} of an existing accessible
 * file and a project identifier into an integer for use with for example
 * {@link shmop_open} and other System V IPC keys.
 * 
 * @param string $pathname Path to an accessible file.
 * @param string $proj Project identifier. This must be a one character
 *   string.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ftok($pathname, $proj){}

/**
 * Sends an ALLO command to the remote FTP server to allocate space for a
 * file to be uploaded.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param int $filesize The number of bytes to allocate.
 * @param string $result A textual representation of the servers
 *   response will be returned by reference in {@link result} if a
 *   variable is provided.
 * @return bool
 * @since PHP 5
 **/
function ftp_alloc($ftp_stream, $filesize, &$result){}

/**
 * Changes to the parent directory.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_cdup($ftp_stream){}

/**
 * Changes the current directory to the specified one.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $directory The target directory.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_chdir($ftp_stream, $directory){}

/**
 * Sets the permissions on the specified remote file to {@link mode}.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param int $mode The new permissions, given as an octal value.
 * @param string $filename The remote file.
 * @return int
 * @since PHP 5
 **/
function ftp_chmod($ftp_stream, $mode, $filename){}

/**
 * {@link ftp_close} closes the given link identifier and releases the
 * resource.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ftp_close($ftp_stream){}

/**
 * {@link ftp_connect} opens an FTP connection to the specified {@link
 * host}.
 * 
 * @param string $host The FTP server address. This parameter shouldn't
 *   have any trailing slashes and shouldn't be prefixed with ftp://.
 * @param int $port This parameter specifies an alternate port to
 *   connect to. If it is omitted or set to zero, then the default FTP
 *   port, 21, will be used.
 * @param int $timeout This parameter specifies the timeout for all
 *   subsequent network operations. If omitted, the default value is 90
 *   seconds. The timeout can be changed and queried at any time with
 *   {@link ftp_set_option} and {@link ftp_get_option}.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ftp_connect($host, $port, $timeout){}

/**
 * {@link ftp_delete} deletes the file specified by {@link path} from the
 * FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $path The file to delete.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_delete($ftp_stream, $path){}

/**
 * Sends a SITE EXEC {@link command} request to the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $command The command to execute.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ftp_exec($ftp_stream, $command){}

/**
 * {@link ftp_fget} retrieves {@link remote_file} from the FTP server,
 * and writes it to the given file pointer.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param resource $handle An open file pointer in which we store the
 *   data.
 * @param string $remote_file The remote file path.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $resumepos The position in the remote file to start
 *   downloading from.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos){}

/**
 * {@link ftp_fput} uploads the data from a file pointer to a remote file
 * on the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $remote_file The remote file path.
 * @param resource $handle An open file pointer on the local file.
 *   Reading stops at end of file.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $startpos
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_fput($ftp_stream, $remote_file, $handle, $mode, $startpos){}

/**
 * {@link ftp_get} retrieves a remote file from the FTP server, and saves
 * it into a local file.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $local_file The local file path (will be overwritten
 *   if the file already exists).
 * @param string $remote_file The remote file path.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $resumepos The position in the remote file to start
 *   downloading from.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos){}

/**
 * This function returns the value for the requested {@link option} from
 * the specified FTP connection.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param int $option Currently, the following options are supported:
 *   Supported runtime FTP options FTP_TIMEOUT_SEC Returns the current
 *   timeout used for network related operations. FTP_AUTOSEEK Returns if
 *   this option is on, otherwise.
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ftp_get_option($ftp_stream, $option){}

/**
 * Logs in to the given FTP stream.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $username The username (USER).
 * @param string $password The password (PASS).
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_login($ftp_stream, $username, $password){}

/**
 * {@link ftp_mdtm} gets the last modified time for a remote file.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $remote_file The file from which to extract the last
 *   modification time.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ftp_mdtm($ftp_stream, $remote_file){}

/**
 * Creates the specified {@link directory} on the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $directory The name of the directory that will be
 *   created.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ftp_mkdir($ftp_stream, $directory){}

/**
 * Continues retrieving/sending a file non-blocking.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ftp_nb_continue($ftp_stream){}

/**
 * {@link ftp_nb_fget} retrieves a remote file from the FTP server.
 * 
 * The difference between this function and {@link ftp_fget} is that this
 * function retrieves the file asynchronously, so your program can
 * perform other operations while the file is being downloaded.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param resource $handle An open file pointer in which we store the
 *   data.
 * @param string $remote_file The remote file path.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $resumepos
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ftp_nb_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos){}

/**
 * {@link ftp_nb_fput} uploads the data from a file pointer to a remote
 * file on the FTP server.
 * 
 * The difference between this function and the {@link ftp_fput} is that
 * this function uploads the file asynchronously, so your program can
 * perform other operations while the file is being uploaded.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $remote_file The remote file path.
 * @param resource $handle An open file pointer on the local file.
 *   Reading stops at end of file.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $startpos
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ftp_nb_fput($ftp_stream, $remote_file, $handle, $mode, $startpos){}

/**
 * {@link ftp_nb_get} retrieves a remote file from the FTP server, and
 * saves it into a local file.
 * 
 * The difference between this function and {@link ftp_get} is that this
 * function retrieves the file asynchronously, so your program can
 * perform other operations while the file is being downloaded.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $local_file The local file path (will be overwritten
 *   if the file already exists).
 * @param string $remote_file The remote file path.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $resumepos
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ftp_nb_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos){}

/**
 * {@link ftp_nb_put} stores a local file on the FTP server.
 * 
 * The difference between this function and the {@link ftp_put} is that
 * this function uploads the file asynchronously, so your program can
 * perform other operations while the file is being uploaded.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $remote_file The remote file path.
 * @param string $local_file The local file path.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $startpos
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ftp_nb_put($ftp_stream, $remote_file, $local_file, $mode, $startpos){}

/**
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $directory The directory to be listed. This parameter
 *   can also include arguments, eg. ftp_nlist($conn_id, "-la
 *   /your/dir"); Note that this parameter isn't escaped so there may be
 *   some issues with filenames containing spaces and other characters.
 * @return array
 * @since PHP 4, PHP 5
 **/
function ftp_nlist($ftp_stream, $directory){}

/**
 * {@link ftp_pasv} turns on or off passive mode. In passive mode, data
 * connections are initiated by the client, rather than by the server. It
 * may be needed if the client is behind firewall.
 * 
 * Please note that {@link ftp_pasv} can only be called after a
 * successfull login or otherwise it will fail.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param bool $pasv If , the passive mode is turned on, else it's
 *   turned off.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_pasv($ftp_stream, $pasv){}

/**
 * {@link ftp_put} stores a local file on the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $remote_file The remote file path.
 * @param string $local_file The local file path.
 * @param int $mode The transfer mode. Must be either FTP_ASCII or
 *   FTP_BINARY.
 * @param int $startpos
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_put($ftp_stream, $remote_file, $local_file, $mode, $startpos){}

/**
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ftp_pwd($ftp_stream){}

/**
 * {@link ftp_quit} closes the given link identifier and releases the
 * resource.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_quit($ftp_stream){}

/**
 * Sends an arbitrary {@link command} to the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $command The command to execute.
 * @return array
 * @since PHP 5
 **/
function ftp_raw($ftp_stream, $command){}

/**
 * {@link ftp_rawlist} executes the FTP LIST command, and returns the
 * result as an array.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $directory The directory path.
 * @param bool $recursive If set to , the issued command will be LIST
 *   -R.
 * @return array
 * @since PHP 4, PHP 5
 **/
function ftp_rawlist($ftp_stream, $directory, $recursive){}

/**
 * {@link ftp_rename} renames a file or a directory on the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $oldname The old file/directory name.
 * @param string $newname The new name.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_rename($ftp_stream, $oldname, $newname){}

/**
 * Removes the specified {@link directory} on the FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $directory The directory to delete. This must be
 *   either an absolute or relative path to an empty directory.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_rmdir($ftp_stream, $directory){}

/**
 * This function controls various runtime options for the specified FTP
 * stream.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param int $option Currently, the following options are supported:
 *   Supported runtime FTP options FTP_TIMEOUT_SEC Changes the timeout in
 *   seconds used for all network related functions. {@link value} must
 *   be an integer that is greater than 0. The default timeout is 90
 *   seconds. FTP_AUTOSEEK When enabled, GET or PUT requests with a
 *   {@link resumepos} or {@link startpos} parameter will first seek to
 *   the requested position within the file. This is enabled by default.
 * @param mixed $value This parameter depends on which {@link option}
 *   is chosen to be altered.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ftp_set_option($ftp_stream, $option, $value){}

/**
 * {@link ftp_site} sends the given SITE command to the FTP server.
 * 
 * SITE commands are not standardized, and vary from server to server.
 * They are useful for handling such things as file permissions and group
 * membership.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $command The SITE command. Note that this parameter
 *   isn't escaped so there may be some issues with filenames containing
 *   spaces and other characters.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftp_site($ftp_stream, $command){}

/**
 * {@link ftp_size} returns the size of the given file in bytes.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @param string $remote_file The remote file.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ftp_size($ftp_stream, $remote_file){}

/**
 * {@link ftp_ssl_connect} opens a SSL-FTP connection to the specified
 * {@link host}.
 * 
 * @param string $host The FTP server address. This parameter shouldn't
 *   have any trailing slashes and shouldn't be prefixed with ftp://.
 * @param int $port This parameter specifies an alternate port to
 *   connect to. If it is omitted or set to zero, then the default FTP
 *   port, 21, will be used.
 * @param int $timeout This parameter specifies the timeout for all
 *   subsequent network operations. If omitted, the default value is 90
 *   seconds. The timeout can be changed and queried at any time with
 *   {@link ftp_set_option} and {@link ftp_get_option}.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ftp_ssl_connect($host, $port, $timeout){}

/**
 * Returns the system type identifier of the remote FTP server.
 * 
 * @param resource $ftp_stream The link identifier of the FTP
 *   connection.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ftp_systype($ftp_stream){}

/**
 * Takes the filepointer, {@link handle}, and truncates the file to
 * length, {@link size}.
 * 
 * @param resource $handle The file pointer.
 * @param int $size The size to truncate to.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ftruncate($handle, $size){}

/**
 * Checks the list of defined functions, both built-in (internal) and
 * user-defined, for {@link function_name}.
 * 
 * @param string $function_name The function name, as a string.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function function_exists($function_name){}

/**
 * Gets the specified argument from a user-defined function's argument
 * list.
 * 
 * This function may be used in conjunction with {@link func_get_args}
 * and {@link func_num_args} to allow user-defined functions to accept
 * variable-length argument lists.
 * 
 * @param int $arg_num The argument offset. Function arguments are
 *   counted starting from zero.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function func_get_arg($arg_num){}

/**
 * Gets an array of the function's argument list.
 * 
 * This function may be used in conjunction with {@link func_get_arg} and
 * {@link func_num_args} to allow user-defined functions to accept
 * variable-length argument lists.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function func_get_args(){}

/**
 * Gets the number of arguments passed to the function.
 * 
 * This function may be used in conjunction with {@link func_get_arg} and
 * {@link func_get_args} to allow user-defined functions to accept
 * variable-length argument lists.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function func_num_args(){}

/**
 * @param resource $handle
 * @param string $string The string that is to be written.
 * @param int $length If the {@link length} argument is given, writing
 *   will stop after {@link length} bytes have been written or the end of
 *   {@link string} is reached, whichever comes first. Note that if the
 *   {@link length} argument is given, then the magic_quotes_runtime
 *   configuration option will be ignored and no slashes will be stripped
 *   from {@link string}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function fwrite($handle, $string, $length){}

/**
 * Forces collection of any existing garbage cycles.
 * 
 * @return int
 **/
function gc_collect_cycles(){}

/**
 * Deactivates the circular reference collector.
 * 
 * @return void
 **/
function gc_disable(){}

/**
 * Activates the circular reference collector.
 * 
 * @return void
 **/
function gc_enable(){}

/**
 * Returns status of the circular reference collector.
 * 
 * @return bool
 **/
function gc_enabled(){}

/**
 * Gets information about the version and capabilities of the installed
 * GD library.
 * 
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function gd_info(){}

/**
 * The {@link geoip_continent_code_by_name} function will return the two
 * letter continent code corresponding to a hostname or an IP address.
 * 
 * @param string $hostname The hostname or IP address whose location is
 *   to be looked-up.
 * @return string
 * @since PECL geoip >= 1.0.3
 **/
function geoip_continent_code_by_name($hostname){}

/**
 * The {@link geoip_country_code3_by_name} function will return the three
 * letter country code corresponding to a hostname or an IP address.
 * 
 * @param string $hostname The hostname or IP address whose location is
 *   to be looked-up.
 * @return string
 * @since PECL geoip >= 0.2.0
 **/
function geoip_country_code3_by_name($hostname){}

/**
 * The {@link geoip_country_code_by_name} function will return the two
 * letter country code corresponding to a hostname or an IP address.
 * 
 * @param string $hostname The hostname or IP address whose location is
 *   to be looked-up.
 * @return string
 * @since PECL geoip >= 0.2.0
 **/
function geoip_country_code_by_name($hostname){}

/**
 * The {@link geoip_country_name_by_name} function will return the full
 * country name corresponding to a hostname or an IP address.
 * 
 * @param string $hostname The hostname or IP address whose location is
 *   to be looked-up.
 * @return string
 * @since PECL geoip >= 0.2.0
 **/
function geoip_country_name_by_name($hostname){}

/**
 * The {@link geoip_database_info} function returns the corresponding
 * GeoIP Database version as it is defined inside the binary file.
 * 
 * If this function is called without arguments, it returns the version
 * of the GeoIP Free Country Edition.
 * 
 * @param int $database The database type as an integer. You can use
 *   the various constants defined with this extension (ie:
 *   GEOIP_*_EDITION).
 * @return string
 * @since PECL geoip >= 0.2.0
 **/
function geoip_database_info($database){}

/**
 * The {@link geoip_db_avail} function returns if the corresponding GeoIP
 * Database is available and can be opened on disk.
 * 
 * It does not indicate if the file is a proper database, only if it is
 * readable.
 * 
 * @param int $database The database type as an integer. You can use
 *   the various constants defined with this extension (ie:
 *   GEOIP_*_EDITION).
 * @return bool
 * @since PECL geoip >= 1.0.1
 **/
function geoip_db_avail($database){}

/**
 * The {@link geoip_db_filename} function returns the filename of the
 * corresponding GeoIP Database.
 * 
 * It does not indicate if the file exists or not on disk, only where the
 * library is looking for the database.
 * 
 * @param int $database The database type as an integer. You can use
 *   the various constants defined with this extension (ie:
 *   GEOIP_*_EDITION).
 * @return string
 * @since PECL geoip >= 1.0.1
 **/
function geoip_db_filename($database){}

/**
 * The {@link geoip_db_get_all_info} function will return detailed
 * information as a multi-dimensional array about all the GeoIP database
 * types.
 * 
 * This function is available even if no databases are installed. It will
 * simply list them as non-available.
 * 
 * The names of the different keys of the returning associative array are
 * as follows:
 * 
 * "available" -- Boolean, indicate if DB is available (see {@link
 * geoip_db_avail}) "description" -- The database description "filename"
 * -- The database filename on disk (see {@link geoip_db_filename})
 * 
 * @return array
 * @since PECL geoip >= 1.0.1
 **/
function geoip_db_get_all_info(){}

/**
 * The {@link geoip_id_by_name} function will return the country and
 * region corresponding to a hostname or an IP address.
 * 
 * The return value is numeric and can be compared to the following
 * constants:
 * 
 * GEOIP_UNKNOWN_SPEED GEOIP_DIALUP_SPEED GEOIP_CABLEDSL_SPEED
 * GEOIP_CORPORATE_SPEED
 * 
 * @param string $hostname The hostname or IP address whose net speed
 *   is to be looked-up.
 * @return int
 * @since PECL geoip >= 0.2.0
 **/
function geoip_id_by_name($hostname){}

/**
 * The {@link geoip_isp_by_name} function will return the name of the
 * Internet Service Provider (ISP) that an IP is assigned to.
 * 
 * This function is currently only available to users who have bought a
 * commercial GeoIP ISP Edition. A warning will be issued if the proper
 * database cannot be located.
 * 
 * @param string $hostname The hostname or IP address.
 * @return string
 * @since PECL geoip >= 1.0.2
 **/
function geoip_isp_by_name($hostname){}

/**
 * The {@link geoip_org_by_name} function will return the name of the
 * organization that an IP is assigned to.
 * 
 * This function is currently only available to users who have bought a
 * commercial GeoIP Organization, ISP or AS Edition. A warning will be
 * issued if the proper database cannot be located.
 * 
 * @param string $hostname The hostname or IP address.
 * @return string
 * @since PECL geoip >= 0.2.0
 **/
function geoip_org_by_name($hostname){}

/**
 * The {@link geoip_record_by_name} function will return the record
 * information corresponding to a hostname or an IP address.
 * 
 * This function is available for both GeoLite City Edition and
 * commercial GeoIP City Edition. A warning will be issued if the proper
 * database cannot be located.
 * 
 * The names of the different keys of the returning associative array are
 * as follows:
 * 
 * "continent_code" -- Two letter continent code (as of version 1.0.4
 * with libgeoip 1.4.3 or newer) "country_code" -- Two letter country
 * code (see {@link geoip_country_code_by_name}) "country_code3" -- Three
 * letter country code (see {@link geoip_country_code3_by_name})
 * "country_name" -- The country name (see {@link
 * geoip_country_name_by_name}) "region" -- The region code (ex: CA for
 * California) "city" -- The city. "postal_code" -- The Postal Code, FSA
 * or Zip Code. "latitude" -- The Latitude as signed double. "longitude"
 * -- The Longitude as signed double. "dma_code" -- Designated Market
 * Area code (USA and Canada only) "area_code" -- The PSTN area code (ex:
 * 212)
 * 
 * @param string $hostname The hostname or IP address whose record is
 *   to be looked-up.
 * @return array
 * @since PECL geoip >= 0.2.0
 **/
function geoip_record_by_name($hostname){}

/**
 * The {@link geoip_region_by_name} function will return the country and
 * region corresponding to a hostname or an IP address.
 * 
 * This function is currently only available to users who have bought a
 * commercial GeoIP Region Edition. A warning will be issued if the
 * proper database cannot be located.
 * 
 * The names of the different keys of the returning associative array are
 * as follows:
 * 
 * "country_code" -- Two letter country code (see {@link
 * geoip_country_code_by_name}) "region" -- The region code (ex: CA for
 * California)
 * 
 * @param string $hostname The hostname or IP address whose region is
 *   to be looked-up.
 * @return array
 * @since PECL geoip >= 0.2.0
 **/
function geoip_region_by_name($hostname){}

/**
 * The {@link geoip_region_name_by_code} function will return the region
 * name corresponding to a country and region code combo.
 * 
 * In the United States, the region code corresponds to the two-letter
 * abbreviation of each state. In Canada, the region code corresponds to
 * the two-letter province or territory code as attributed by Canada
 * Post.
 * 
 * For the rest of the world, GeoIP uses FIPS 10-4 codes to represent
 * regions. You can check for a detailed list of FIPS 10-4 codes.
 * 
 * This function is always available if using GeoIP Library version 1.4.1
 * or newer. The data is taken directly from the GeoIP Library and not
 * from any database.
 * 
 * @param string $country_code The two-letter country code (see {@link
 *   geoip_country_code_by_name})
 * @param string $region_code The two-letter (or digit) region code
 *   (see {@link geoip_region_by_name})
 * @return string
 * @since PECL geoip >= 1.0.4
 **/
function geoip_region_name_by_code($country_code, $region_code){}

/**
 * The {@link geoip_time_zone_by_country_and_region} function will return
 * the time zone corresponding to a country and region code combo.
 * 
 * In the United States, the region code corresponds to the two-letter
 * abbreviation of each state. In Canada, the region code corresponds to
 * the two-letter province or territory code as attributed by Canada
 * Post.
 * 
 * For the rest of the world, GeoIP uses FIPS 10-4 codes to represent
 * regions. You can check for a detailed list of FIPS 10-4 codes.
 * 
 * This function is always available if using GeoIP Library version 1.4.1
 * or newer. The data is taken directly from the GeoIP Library and not
 * from any database.
 * 
 * @param string $country_code The two-letter country code (see {@link
 *   geoip_country_code_by_name})
 * @param string $region_code The two-letter (or digit) region code
 *   (see {@link geoip_region_by_name})
 * @return string
 * @since PECL geoip >= 1.0.4
 **/
function geoip_time_zone_by_country_and_region($country_code, $region_code){}

/**
 * Fetches all HTTP headers from the current request.
 * 
 * This function is an alias for {@link apache_request_headers}. Please
 * read the {@link apache_request_headers} documentation for more
 * information on how this function works.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function getallheaders(){}

/**
 * Gets the current working directory.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function getcwd(){}

/**
 * Returns an associative array containing the date information of the
 * {@link timestamp}, or the current local time if no {@link timestamp}
 * is given.
 * 
 * @param int $timestamp
 * @return array
 * @since PHP 4, PHP 5
 **/
function getdate($timestamp){}

/**
 * Gets the value of an environment variable.
 * 
 * You can see a list of all the environmental variables by using {@link
 * phpinfo}. You can find out what many of them mean by taking a look at
 * the CGI specification, specifically the page on environmental
 * variables.
 * 
 * @param string $varname The variable name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function getenv($varname){}

/**
 * Returns the host name of the Internet host specified by {@link
 * ip_address}.
 * 
 * @param string $ip_address The host IP address.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gethostbyaddr($ip_address){}

/**
 * Returns the IPv4 address of the Internet host specified by {@link
 * hostname}.
 * 
 * @param string $hostname The host name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gethostbyname($hostname){}

/**
 * Returns a list of IPv4 addresses to which the Internet host specified
 * by {@link hostname} resolves.
 * 
 * @param string $hostname The host name.
 * @return array
 * @since PHP 4, PHP 5
 **/
function gethostbynamel($hostname){}

/**
 * {@link gethostname} gets the standard host name for the local machine.
 * 
 * @return string
 * @since PHP >= 5.3.0
 **/
function gethostname(){}

/**
 * The {@link getimagesize} function will determine the size of any given
 * image file and return the dimensions along with the file type and a
 * height/width text string to be used inside a normal HTML IMG tag and
 * the correspondant HTTP content type.
 * 
 * {@link getimagesize} can also return some more information in {@link
 * imageinfo} parameter.
 * 
 * @param string $filename This parameter specifies the file you wish
 *   to retrieve information about. It can reference a local file or
 *   (configuration permitting) a remote file using one of the supported
 *   streams.
 * @param array $imageinfo This optional parameter allows you to
 *   extract some extended information from the image file. Currently,
 *   this will return the different JPG APP markers as an associative
 *   array. Some programs use these APP markers to embed text information
 *   in images. A very common one is to embed IPTC information in the
 *   APP13 marker. You can use the {@link iptcparse} function to parse
 *   the binary APP13 marker into something readable.
 * @return array
 * @since PHP 4, PHP 5
 **/
function getimagesize($filename, &$imageinfo){}

/**
 * Gets the time of the last modification of the current page.
 * 
 * If you're interested in getting the last modification time of a
 * different file, consider using {@link filemtime}.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function getlastmod(){}

/**
 * Searches DNS for MX records corresponding to {@link hostname}.
 * 
 * @param string $hostname The Internet host name.
 * @param array $mxhosts A list of the MX records found is placed into
 *   the array {@link mxhosts}.
 * @param array $weight If the {@link weight} array is given, it will
 *   be filled with the weight information gathered.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function getmxrr($hostname, &$mxhosts, &$weight){}

/**
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function getmygid(){}

/**
 * Gets the inode of the current script.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function getmyinode(){}

/**
 * Gets the current PHP process ID.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function getmypid(){}

/**
 * @return int
 * @since PHP 4, PHP 5
 **/
function getmyuid(){}

/**
 * Parses options passed to the script.
 * 
 * @param string $options
 * @param array $longopts
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function getopt($options, $longopts){}

/**
 * {@link getprotobyname} returns the protocol number associated with the
 * protocol {@link name} as per /etc/protocols.
 * 
 * @param string $name The protocol name.
 * @return int
 * @since PHP 4, PHP 5
 **/
function getprotobyname($name){}

/**
 * {@link getprotobynumber} returns the protocol name associated with
 * protocol {@link number} as per /etc/protocols.
 * 
 * @param int $number The protocol number.
 * @return string
 * @since PHP 4, PHP 5
 **/
function getprotobynumber($number){}

/**
 * @return int
 * @since PHP 4, PHP 5
 **/
function getrandmax(){}

/**
 * This is an interface to getrusage(2). It gets data returned from the
 * system call.
 * 
 * @param int $who If {@link who} is 1, getrusage will be called with
 *   RUSAGE_CHILDREN.
 * @return array
 * @since PHP 4, PHP 5
 **/
function getrusage($who){}

/**
 * {@link getservbyname} returns the Internet port which corresponds to
 * {@link service} for the specified {@link protocol} as per
 * /etc/services.
 * 
 * @param string $service The Internet service name, as a string.
 * @param string $protocol {@link protocol} is either "tcp" or "udp"
 *   (in lowercase).
 * @return int
 * @since PHP 4, PHP 5
 **/
function getservbyname($service, $protocol){}

/**
 * {@link getservbyport} returns the Internet service associated with
 * {@link port} for the specified {@link protocol} as per /etc/services.
 * 
 * @param int $port The port number.
 * @param string $protocol {@link protocol} is either "tcp" or "udp"
 *   (in lowercase).
 * @return string
 * @since PHP 4, PHP 5
 **/
function getservbyport($port, $protocol){}

/**
 * Looks up a message in the current domain.
 * 
 * @param string $message The message being translated.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gettext($message){}

/**
 * This is an interface to gettimeofday(2). It returns an associative
 * array containing the data returned from the system call.
 * 
 * @param bool $return_float When set to , a float instead of an array
 *   is returned.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function gettimeofday($return_float){}

/**
 * Returns the type of the PHP variable {@link var}.
 * 
 * @param mixed $var The variable being type checked.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gettype($var){}

/**
 * Attempts to determine the capabilities of the user's browser, by
 * looking up the browser's information in the browscap.ini file.
 * 
 * @param string $user_agent The User Agent to be analyzed. By default,
 *   the value of HTTP User-Agent header is used; however, you can alter
 *   this (i.e., look up another browser's info) by passing this
 *   parameter. You can bypass this parameter with a value.
 * @param bool $return_array If set to , this function will return an
 *   array instead of an object.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function get_browser($user_agent, $return_array){}

/**
 * Gets the name of the class the static method is called in.
 * 
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function get_called_class(){}

/**
 * Gets the value of a PHP configuration {@link option}.
 * 
 * This function will not return configuration information set when the
 * PHP was compiled, or read from an Apache configuration file.
 * 
 * To check whether the system is using a configuration file, try
 * retrieving the value of the cfg_file_path configuration setting. If
 * this is available, a configuration file is being used.
 * 
 * @param string $option The configuration option name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function get_cfg_var($option){}

/**
 * Gets the name of the class of the given {@link object}.
 * 
 * @param object $object The tested object
 * @return string
 * @since PHP 4, PHP 5
 **/
function get_class($object){}

/**
 * Gets the class methods names.
 * 
 * @param mixed $class_name The class name or an object instance
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_class_methods($class_name){}

/**
 * Get the default properties of the given class.
 * 
 * @param string $class_name The class name
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_class_vars($class_name){}

/**
 * @return string
 * @since PHP 4, PHP 5
 **/
function get_current_user(){}

/**
 * Gets the declared classes.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_declared_classes(){}

/**
 * Gets the declared interfaces.
 * 
 * @return array
 * @since PHP 5
 **/
function get_declared_interfaces(){}

/**
 * Returns the names and values of all the constants currently defined.
 * This includes those created by extensions as well as those created
 * with the {@link define} function.
 * 
 * @param bool $categorize Causing this function to return a
 *   multi-dimensional array with categories in the keys of the first
 *   dimension and constants and their values in the second dimension.
 *   
 *   <?php define("MY_CONSTANT", 1);
 *   print_r(get_defined_constants(true)); ?>
 *   
 *   Array ( [Core] => Array ( [E_ERROR] => 1 [E_WARNING] => 2 [E_PARSE]
 *   => 4 [E_NOTICE] => 8 [E_CORE_ERROR] => 16 [E_CORE_WARNING] => 32
 *   [E_COMPILE_ERROR] => 64 [E_COMPILE_WARNING] => 128 [E_USER_ERROR] =>
 *   256 [E_USER_WARNING] => 512 [E_USER_NOTICE] => 1024 [E_ALL] => 2047
 *   [TRUE] => 1 )
 *   
 *   [pcre] => Array ( [PREG_PATTERN_ORDER] => 1 [PREG_SET_ORDER] => 2
 *   [PREG_OFFSET_CAPTURE] => 256 [PREG_SPLIT_NO_EMPTY] => 1
 *   [PREG_SPLIT_DELIM_CAPTURE] => 2 [PREG_SPLIT_OFFSET_CAPTURE] => 4
 *   [PREG_GREP_INVERT] => 1 )
 *   
 *   [user] => Array ( [MY_CONSTANT] => 1 )
 *   
 *   )
 * @return array
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function get_defined_constants($categorize){}

/**
 * Gets an array of all defined functions.
 * 
 * @return array
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function get_defined_functions(){}

/**
 * This function returns a multidimensional array containing a list of
 * all defined variables, be them environment, server or user-defined
 * variables, within the scope that {@link get_defined_vars} is called.
 * 
 * @return array
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function get_defined_vars(){}

/**
 * This function returns the names of all the functions defined in the
 * module indicated by {@link module_name}.
 * 
 * @param string $module_name The module name.
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_extension_funcs($module_name){}

/**
 * {@link get_headers} returns an array with the headers sent by the
 * server in response to a HTTP request.
 * 
 * @param string $url The target URL.
 * @param int $format If the optional {@link format} parameter is set
 *   to non-zero, {@link get_headers} parses the response and sets the
 *   array's keys.
 * @return array
 * @since PHP 5
 **/
function get_headers($url, $format){}

/**
 * {@link get_html_translation_table} will return the translation table
 * that is used internally for {@link htmlspecialchars} and {@link
 * htmlentities} with the default charset.
 * 
 * @param int $table There are two new constants (HTML_ENTITIES,
 *   HTML_SPECIALCHARS) that allow you to specify the table you want.
 * @param int $quote_style Like the {@link htmlspecialchars} and {@link
 *   htmlentities} functions you can optionally specify the {@link
 *   quote_style} you are working with. See the description of these
 *   modes in {@link htmlspecialchars}.
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_html_translation_table($table, $quote_style){}

/**
 * Gets the names of all files that have been included using {@link
 * include}, {@link include_once}, {@link require} or {@link
 * require_once}.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_included_files(){}

/**
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function get_include_path(){}

/**
 * This function returns the names of all the modules compiled and loaded
 * in the PHP interpreter.
 * 
 * @param bool $zend_extensions Return zend_extensions or not, defaults
 *   to (do not list zend_extensions).
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_loaded_extensions($zend_extensions){}

/**
 * Returns the current configuration setting of magic_quotes_gpc
 * 
 * Keep in mind that attempting to set magic_quotes_gpc at runtime will
 * not work.
 * 
 * For more information about magic_quotes, see this security section.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function get_magic_quotes_gpc(){}

/**
 * @return int
 * @since PHP 4, PHP 5
 **/
function get_magic_quotes_runtime(){}

/**
 * Opens {@link filename} and parses it line by line for <meta> tags in
 * the file. The parsing stops at </head>.
 * 
 * @param string $filename The path to the HTML file, as a string. This
 *   can be a local file or an URL.
 *   
 *   What {@link get_meta_tags} parses
 *   
 *   <meta name="author" content="name"> <meta name="keywords"
 *   content="php documentation"> <meta name="DESCRIPTION" content="a php
 *   manual"> <meta name="geo.position" content="49.33;-86.59"> </head>
 *   <!-- parsing stops here -->
 *   
 *   (pay attention to line endings - PHP uses a native function to parse
 *   the input, so a Mac file won't work on Unix).
 * @param bool $use_include_path Setting {@link use_include_path} to
 *   will result in PHP trying to open the file along the standard
 *   include path as per the include_path directive. This is used for
 *   local files, not URLs.
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_meta_tags($filename, $use_include_path){}

/**
 * Gets the accessible non-static properties of the given {@link object}
 * according to scope.
 * 
 * @param object $object An object instance.
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_object_vars($object){}

/**
 * Retrieves the parent class name for object or class.
 * 
 * @param mixed $object The tested object or class name
 * @return string
 * @since PHP 4, PHP 5
 **/
function get_parent_class($object){}

/**
 * Gets the names of all files that have been included using {@link
 * include}, {@link include_once}, {@link require} or {@link
 * require_once}.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function get_required_files(){}

/**
 * This function gets the type of the given resource.
 * 
 * @param resource $handle The evaluated resource handle.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function get_resource_type($handle){}

/**
 * The {@link glob} function searches for all the pathnames matching
 * {@link pattern} according to the rules used by the libc glob()
 * function, which is similar to the rules used by common shells.
 * 
 * @param string $pattern The pattern. No tilde expansion or parameter
 *   substitution is done.
 * @param int $flags Valid flags: GLOB_MARK - Adds a slash to each
 *   directory returned GLOB_NOSORT - Return files as they appear in the
 *   directory (no sorting) GLOB_NOCHECK - Return the search pattern if
 *   no files matching it were found GLOB_NOESCAPE - Backslashes do not
 *   quote metacharacters GLOB_BRACE - Expands {a,b,c} to match 'a', 'b',
 *   or 'c' GLOB_ONLYDIR - Return only directory entries which match the
 *   pattern GLOB_ERR - Stop on read errors (like unreadable
 *   directories), by default errors are ignored.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function glob($pattern, $flags){}

/**
 * Identical to the {@link date} function except that the time returned
 * is Greenwich Mean Time (GMT).
 * 
 * @param string $format The format of the outputted date string. See
 *   the formatting options for the {@link date} function.
 * @param int $timestamp
 * @return string
 * @since PHP 4, PHP 5
 **/
function gmdate($format, $timestamp){}

/**
 * Identical to {@link mktime} except the passed parameters represents a
 * GMT date. {@link gmmktime} internally uses {@link mktime} so only
 * times valid in derived local time can be used.
 * 
 * Like {@link mktime}, arguments may be left out in order from right to
 * left, with any omitted arguments being set to the current
 * corresponding GMT value.
 * 
 * @param int $hour The hour
 * @param int $minute The minute
 * @param int $second The second
 * @param int $month The month
 * @param int $day The day
 * @param int $year The year
 * @param int $is_dst Parameters always represent a GMT date so {@link
 *   is_dst} doesn't influence the result.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gmmktime($hour, $minute, $second, $month, $day, $year, $is_dst){}

/**
 * Get the absolute value of a number.
 * 
 * @param resource $a
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_abs($a){}

/**
 * Add two numbers.
 * 
 * @param resource $a A number that will be added.
 * @param resource $b A number that will be added.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_add($a, $b){}

/**
 * Calculates bitwise AND of two GMP numbers.
 * 
 * @param resource $a
 * @param resource $b
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_and($a, $b){}

/**
 * Clears (sets to 0) bit {@link index} in {@link a}. The index starts at
 * 0.
 * 
 * @param resource $a
 * @param int $index
 * @return void
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_clrbit($a, $index){}

/**
 * Compares two numbers.
 * 
 * @param resource $a
 * @param resource $b
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_cmp($a, $b){}

/**
 * Returns the one's complement of {@link a}.
 * 
 * @param resource $a
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_com($a){}

/**
 * Divides {@link a} by {@link b} and returns the integer result.
 * 
 * @param resource $a The number being divided.
 * @param resource $b The number that {@link a} is being divided by.
 * @param int $round The result rounding is defined by the {@link
 *   round}, which can have the following values: GMP_ROUND_ZERO: The
 *   result is truncated towards 0. GMP_ROUND_PLUSINF: The result is
 *   rounded towards +infinity. GMP_ROUND_MINUSINF: The result is rounded
 *   towards -infinity.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_div($a, $b, $round){}

/**
 * Divides {@link n} by {@link d}, using fast "exact division" algorithm.
 * This function produces correct results only when it is known in
 * advance that {@link d} divides {@link n}.
 * 
 * @param resource $n The number being divided.
 * @param resource $d The number that {@link a} is being divided by.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_divexact($n, $d){}

/**
 * Divides {@link a} by {@link b} and returns the integer result.
 * 
 * @param resource $a The number being divided.
 * @param resource $b The number that {@link a} is being divided by.
 * @param int $round The result rounding is defined by the {@link
 *   round}, which can have the following values: GMP_ROUND_ZERO: The
 *   result is truncated towards 0. GMP_ROUND_PLUSINF: The result is
 *   rounded towards +infinity. GMP_ROUND_MINUSINF: The result is rounded
 *   towards -infinity.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_div_q($a, $b, $round){}

/**
 * The function divides {@link n} by {@link d}.
 * 
 * @param resource $n The number being divided.
 * @param resource $d The number that {@link n} is being divided by.
 * @param int $round See the {@link gmp_div_q} function for description
 *   of the {@link round} argument.
 * @return array
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_div_qr($n, $d, $round){}

/**
 * Calculates remainder of the integer division of {@link n} by {@link
 * d}. The remainder has the sign of the {@link n} argument, if not zero.
 * 
 * @param resource $n The number being divided.
 * @param resource $d The number that {@link n} is being divided by.
 * @param int $round See the {@link gmp_div_q} function for description
 *   of the {@link round} argument.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_div_r($n, $d, $round){}

/**
 * Calculates factorial (a!) of {@link a}.
 * 
 * @param mixed $a The factorial number.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_fact($a){}

/**
 * Calculate greatest common divisor of {@link a} and {@link b}. The
 * result is always positive even if either of, or both, input operands
 * are negative.
 * 
 * @param resource $a
 * @param resource $b
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_gcd($a, $b){}

/**
 * Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd
 * is the greatest common divisor. Returns an array with respective
 * elements g, s and t.
 * 
 * This function can be used to solve linear Diophantine equations in two
 * variables. These are equations that allow only integer solutions and
 * have the form: a*x + b*y = c. For more information, go to the
 * "Diophantine Equation" page at MathWorld
 * 
 * @param resource $a
 * @param resource $b
 * @return array
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_gcdext($a, $b){}

/**
 * Returns the hamming distance between {@link a} and {@link b}. Both
 * operands should be non-negative.
 * 
 * @param resource $a It should be positive.
 * @param resource $b It should be positive.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_hamdist($a, $b){}

/**
 * Creates a GMP number from an integer or string.
 * 
 * @param mixed $number An integer or a string. The string
 *   representation can be decimal, hexadecimal or octal.
 * @param int $base The base. The base may vary from 2 to 36. If base
 *   is 0 (default value), the actual base is determined from the leading
 *   characters: if the first two characters are 0x or 0X, hexadecimal is
 *   assumed, otherwise if the first character is "0", octal is assumed,
 *   otherwise decimal is assumed.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_init($number, $base){}

/**
 * This function allows to convert GMP number to integer.
 * 
 * @param resource $gmpnumber A GMP number.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_intval($gmpnumber){}

/**
 * Computes the inverse of {@link a} modulo {@link b}.
 * 
 * @param resource $a
 * @param resource $b
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_invert($a, $b){}

/**
 * Computes Jacobi symbol of {@link a} and {@link p}. {@link p} should be
 * odd and must be positive.
 * 
 * @param resource $a
 * @param resource $p Should be odd and must be positive.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_jacobi($a, $p){}

/**
 * Compute the Legendre symbol of {@link a} and {@link p}. {@link p}
 * should be odd and must be positive.
 * 
 * @param resource $a
 * @param resource $p Should be odd and must be positive.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_legendre($a, $p){}

/**
 * Calculates {@link n} modulo {@link d}. The result is always
 * non-negative, the sign of {@link d} is ignored.
 * 
 * @param resource $n
 * @param resource $d The modulo that is being evaluated.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_mod($n, $d){}

/**
 * Multiplies {@link a} by {@link b} and returns the result.
 * 
 * @param resource $a A number that will be multiplied by {@link b}.
 * @param resource $b A number that will be multiplied by {@link a}.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_mul($a, $b){}

/**
 * Returns the negative value of a number.
 * 
 * @param resource $a
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_neg($a){}

/**
 * Find next prime number
 * 
 * @param int $a
 * @return resource
 * @since PHP 5 >= 5.2.0
 **/
function gmp_nextprime($a){}

/**
 * Calculates bitwise inclusive OR of two GMP numbers.
 * 
 * @param resource $a
 * @param resource $b
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_or($a, $b){}

/**
 * Check if a number is a perfect square.
 * 
 * @param resource $a The number being checked as a perfect square.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_perfect_square($a){}

/**
 * Get the population count.
 * 
 * @param resource $a
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_popcount($a){}

/**
 * Raise {@link base} into power {@link exp}.
 * 
 * @param resource $base The base number.
 * @param int $exp The positive power to raise the {@link base}.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_pow($base, $exp){}

/**
 * Calculate ({@link base} raised into power {@link exp}) modulo {@link
 * mod}. If {@link exp} is negative, result is undefined.
 * 
 * @param resource $base The base number.
 * @param resource $exp The positive power to raise the {@link base}.
 * @param resource $mod The modulo.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_powm($base, $exp, $mod){}

/**
 * The function uses Miller-Rabin's probabilistic test to check if a
 * number is a prime.
 * 
 * @param resource $a The number being checked as a prime.
 * @param int $reps Reasonable values of {@link reps} vary from 5 to 10
 *   (default being 10); a higher value lowers the probability for a
 *   non-prime to pass as a "probable" prime.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_prob_prime($a, $reps){}

/**
 * Generate a random number. The number will be between zero and the
 * number of bits per limb multiplied by {@link limiter}. If {@link
 * limiter} is negative, negative numbers are generated.
 * 
 * A limb is an internal GMP mechanism. The number of bits in a limb is
 * not static, and can vary from system to system. Generally, the number
 * of bits in a limb is either 16 or 32, but this is not guaranteed.
 * 
 * @param int $limiter The limiter.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_random($limiter){}

/**
 * Scans {@link a}, starting with bit {@link start}, towards more
 * significant bits, until the first clear bit is found.
 * 
 * @param resource $a The number to scan.
 * @param int $start The starting bit.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_scan0($a, $start){}

/**
 * Scans {@link a}, starting with bit {@link start}, towards more
 * significant bits, until the first set bit is found.
 * 
 * @param resource $a The number to scan.
 * @param int $start The starting bit.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_scan1($a, $start){}

/**
 * Sets bit {@link index} in {@link a}.
 * 
 * @param resource $a The number being set to.
 * @param int $index The set bit.
 * @param bool $set_clear Defines if the bit is set to 0 or 1. By
 *   default the bit is set to 1. Index starts at 0.
 * @return void
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_setbit($a, $index, $set_clear){}

/**
 * Checks the sign of a number.
 * 
 * @param resource $a
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_sign($a){}

/**
 * Calculates square root of {@link a}.
 * 
 * @param resource $a
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_sqrt($a){}

/**
 * Calculate the square root of a number, with remainder.
 * 
 * @param resource $a The number being square rooted.
 * @return array
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_sqrtrem($a){}

/**
 * Convert GMP number to string representation in base {@link base}. The
 * default base is 10.
 * 
 * @param resource $gmpnumber The GMP number that will be converted to
 *   a string.
 * @param int $base The base of the returned number. The default base
 *   is 10. Allowed values for the base are from 2 to 62 and -2 to -36.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_strval($gmpnumber, $base){}

/**
 * Subtracts {@link b} from {@link a} and returns the result.
 * 
 * @param resource $a The number being subtracted from.
 * @param resource $b The number subtracted from {@link a}.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_sub($a, $b){}

/**
 * Tests if the specified bit is set.
 * 
 * @param resource $a
 * @param int $index The bit to test
 * @return bool
 * @since PHP 5 >= 5.3.0
 **/
function gmp_testbit($a, $index){}

/**
 * Calculates bitwise exclusive OR (XOR) of two GMP numbers.
 * 
 * @param resource $a
 * @param resource $b
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gmp_xor($a, $b){}

/**
 * Behaves the same as {@link strftime} except that the time returned is
 * Greenwich Mean Time (GMT). For example, when run in Eastern Standard
 * Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00",
 * while the second prints "Jan 01 1999 01:00:00".
 * 
 * @param string $format See description in {@link strftime}.
 * @param int $timestamp
 * @return string
 * @since PHP 4, PHP 5
 **/
function gmstrftime($format, $timestamp){}

/**
 * @param resource $identifier
 * @param string $fingerprint
 * @param string $passphrase The pass phrase.
 * @return bool
 * @since PECL gnupg >= 0.5
 **/
function gnupg_adddecryptkey($identifier, $fingerprint, $passphrase){}

/**
 * @param resource $identifier
 * @param string $fingerprint
 * @return bool
 * @since PECL gnupg >= 0.5
 **/
function gnupg_addencryptkey($identifier, $fingerprint){}

/**
 * @param resource $identifier
 * @param string $fingerprint
 * @param string $passphrase The pass phrase.
 * @return bool
 * @since PECL gnupg >= 0.5
 **/
function gnupg_addsignkey($identifier, $fingerprint, $passphrase){}

/**
 * @param resource $identifier
 * @return bool
 * @since PECL gnupg >= 0.5
 **/
function gnupg_cleardecryptkeys($identifier){}

/**
 * @param resource $identifier
 * @return bool
 * @since PECL gnupg >= 0.5
 **/
function gnupg_clearencryptkeys($identifier){}

/**
 * @param resource $identifier
 * @return bool
 * @since PECL gnupg >= 0.5
 **/
function gnupg_clearsignkeys($identifier){}

/**
 * Decrypts the given text with the keys, which were set with
 * gnupg_adddecryptkey before.
 * 
 * @param resource $identifier
 * @param string $text The text being decrypted.
 * @return string
 * @since PECL gnupg >= 0.1
 **/
function gnupg_decrypt($identifier, $text){}

/**
 * Decrypts and verifies a given text and returns information about the
 * signature.
 * 
 * @param resource $identifier
 * @param string $text The text being decrypted.
 * @param string $plaintext The parameter {@link plaintext} gets filled
 *   with the decrypted text.
 * @return array
 * @since PECL gnupg >= 0.2
 **/
function gnupg_decryptverify($identifier, $text, &$plaintext){}

/**
 * Encrypts the given {@link plaintext} with the keys, which were set
 * with gnupg_addencryptkey before and returns the encrypted text.
 * 
 * @param resource $identifier
 * @param string $plaintext The text being encrypted.
 * @return string
 * @since PECL gnupg >= 0.1
 **/
function gnupg_encrypt($identifier, $plaintext){}

/**
 * Encrypts and signs the given {@link plaintext} with the keys, which
 * were set with gnupg_addsignkey and gnupg_addencryptkey before and
 * returns the encrypted and signed text.
 * 
 * @param resource $identifier
 * @param string $plaintext The text being encrypted.
 * @return string
 * @since PECL gnupg >= 0.2
 **/
function gnupg_encryptsign($identifier, $plaintext){}

/**
 * Exports the key {@link fingerprint}.
 * 
 * @param resource $identifier
 * @param string $fingerprint
 * @return string
 * @since PECL gnupg >= 0.1
 **/
function gnupg_export($identifier, $fingerprint){}

/**
 * @param resource $identifier
 * @return string
 * @since PECL gnupg >= 0.1
 **/
function gnupg_geterror($identifier){}

/**
 * @param resource $identifier
 * @return int
 * @since PECL gnupg >= 0.1
 **/
function gnupg_getprotocol($identifier){}

/**
 * Imports the key {@link keydata} and returns an array with information
 * about the importprocess.
 * 
 * @param resource $identifier
 * @param string $keydata The data key that is being imported.
 * @return array
 * @since PECL gnupg >= 0.3
 **/
function gnupg_import($identifier, $keydata){}

/**
 * @return resource
 * @since PECL gnupg >= 0.4
 **/
function gnupg_init(){}

/**
 * @param resource $identifier
 * @param string $pattern The pattern being checked against the keys.
 * @return array
 * @since PECL gnupg >= 0.1
 **/
function gnupg_keyinfo($identifier, $pattern){}

/**
 * Toggle the armored output.
 * 
 * @param resource $identifier
 * @param int $armor Pass a non-zero integer-value to this function to
 *   enable armored-output (default). Pass 0 to disable armored output.
 * @return bool
 * @since PECL gnupg >= 0.1
 **/
function gnupg_setarmor($identifier, $armor){}

/**
 * Sets the mode for error_reporting.
 * 
 * @param resource $identifier
 * @param int $errormode The error mode. {@link errormode} takes a
 *   constant indicating what type of error_reporting should be used. The
 *   possible values are GNUPG_ERROR_WARNING, GNUPG_ERROR_EXCEPTION and
 *   GNUPG_ERROR_SILENT. By default GNUPG_ERROR_SILENT is used.
 * @return void
 * @since PECL gnupg >= 0.6
 **/
function gnupg_seterrormode($identifier, $errormode){}

/**
 * Sets the mode for signing.
 * 
 * @param resource $identifier
 * @param int $signmode The mode for signing. {@link signmode} takes a
 *   constant indicating what type of signature should be produced. The
 *   possible values are GNUPG_SIG_MODE_NORMAL, GNUPG_SIG_MODE_DETACH and
 *   GNUPG_SIG_MODE_CLEAR. By default GNUPG_SIG_MODE_CLEAR is used.
 * @return bool
 * @since PECL gnupg >= 0.1
 **/
function gnupg_setsignmode($identifier, $signmode){}

/**
 * Signs the given {@link plaintext} with the keys, which were set with
 * gnupg_addsignkey before and returns the signed text or the signature,
 * depending on what was set with gnupg_setsignmode.
 * 
 * @param resource $identifier
 * @param string $plaintext The plain text being signed.
 * @return string
 * @since PECL gnupg >= 0.1
 **/
function gnupg_sign($identifier, $plaintext){}

/**
 * Verifies the given {@link signed_text} and returns information about
 * the signature.
 * 
 * @param resource $identifier
 * @param string $signed_text The signed text.
 * @param string $signature The signature. To verify a clearsigned
 *   text, set signature to .
 * @param string $plaintext The plain text. If this optional parameter
 *   is passed, it is filled with the plain text.
 * @return array
 * @since PECL gnupg >= 0.1
 **/
function gnupg_verify($identifier, $signed_text, $signature, &$plaintext){}

/**
 * {@link gopher_parsedir} parses a gopher formatted directory entry into
 * an associative array.
 * 
 * While gopher returns text/plain documents for actual document
 * requests. A request to a directory (such as /) will return specially
 * encoded series of lines with each line being one directory entry or
 * information line.
 * 
 * @param string $dirent The directory entry.
 * @return array
 * @since PECL net_gopher >= 0.1
 **/
function gopher_parsedir($dirent){}

/**
 * Function to extract a sequence of default grapheme clusters from a
 * text buffer, which must be encoded in UTF-8.
 * 
 * @param string $haystack String to search.
 * @param int $size Maximum number items - based on the $extract_type -
 *   to return.
 * @param int $extract_type Defines the type of units referred to by
 *   the $size parameter:
 *   
 *   GRAPHEME_EXTR_COUNT (default) - $size is the number of default
 *   grapheme clusters to extract. GRAPHEME_EXTR_MAXBYTES - $size is the
 *   maximum number of bytes returned. GRAPHEME_EXTR_MAXCHARS - $size is
 *   the maximum number of UTF-8 characters returned.
 * @param int $start Starting position in $haystack in bytes - if
 *   given, it must be zero or a positive value that is less than or
 *   equal to the length of $haystack in bytes. If $start does not point
 *   to the first byte of a UTF-8 character, the start position is moved
 *   to the next character boundary.
 * @param int $next Reference to a value that will be set to the next
 *   starting position. When the call returns, this may point to the
 *   first byte position past the end of the string.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_extract($haystack, $size, $extract_type, $start, &$next){}

/**
 * Find position (in grapheme units) of first occurrence of a
 * case-insensitive string
 * 
 * @param string $haystack The string to look in. Must be valid UTF-8.
 * @param string $needle The string to look for. Must be valid UTF-8.
 * @param int $offset The optional $offset parameter allows you to
 *   specify where in haystack to start searching as an offset in
 *   grapheme units (not bytes or characters). The position returned is
 *   still relative to the beginning of haystack regardless of the value
 *   of $offset.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_stripos($haystack, $needle, $offset){}

/**
 * Returns part of haystack string from the first occurrence of
 * case-insensitive needle to the end of haystack.
 * 
 * @param string $haystack The input string. Must be valid UTF-8.
 * @param string $needle The string to look for. Must be valid UTF-8.
 * @param bool $before_needle If , grapheme_strstr() returns the part
 *   of the haystack before the first occurrence of the needle.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_stristr($haystack, $needle, $before_needle){}

/**
 * Get string length in grapheme units (not bytes or characters)
 * 
 * @param string $input The string being measured for length. It must
 *   be a valid UTF-8 string.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_strlen($input){}

/**
 * Find position (in grapheme units) of first occurrence of a string
 * 
 * @param string $haystack The string to look in. Must be valid UTF-8.
 * @param string $needle The string to look for. Must be valid UTF-8.
 * @param int $offset The optional $offset parameter allows you to
 *   specify where in $haystack to start searching as an offset in
 *   grapheme units (not bytes or characters). The position returned is
 *   still relative to the beginning of haystack regardless of the value
 *   of $offset.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_strpos($haystack, $needle, $offset){}

/**
 * Find position (in grapheme units) of last occurrence of a
 * case-insensitive string
 * 
 * @param string $haystack The string to look in. Must be valid UTF-8.
 * @param string $needle The string to look for. Must be valid UTF-8.
 * @param int $offset The optional $offset parameter allows you to
 *   specify where in $haystack to start searching as an offset in
 *   grapheme units (not bytes or characters). The position returned is
 *   still relative to the beginning of haystack regardless of the value
 *   of $offset.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_strripos($haystack, $needle, $offset){}

/**
 * Find position (in grapheme units) of last occurrence of a string
 * 
 * @param string $haystack The string to look in. Must be valid UTF-8.
 * @param string $needle The string to look for. Must be valid UTF-8.
 * @param int $offset The optional $offset parameter allows you to
 *   specify where in $haystack to start searching as an offset in
 *   grapheme units (not bytes or characters). The position returned is
 *   still relative to the beginning of haystack regardless of the value
 *   of $offset.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_strrpos($haystack, $needle, $offset){}

/**
 * Returns part of haystack string from the first occurrence of needle to
 * the end of haystack.
 * 
 * @param string $haystack The input string. Must be valid UTF-8.
 * @param string $needle The string to look for. Must be valid UTF-8.
 * @param bool $before_needle If , grapheme_strstr() returns the part
 *   of the haystack before the first occurrence of the needle.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_strstr($haystack, $needle, $before_needle){}

/**
 * Return part of a string
 * 
 * @param string $string The input string. Must be valid UTF-8.
 * @param int $start Start position in default grapheme units. If
 *   $start is non-negative, the returned string will start at the
 *   $start'th position in $string, counting from zero. If $start is
 *   negative, the returned string will start at the $start'th grapheme
 *   unit from the end of string.
 * @param int $length Length in grapheme units. If $length is given and
 *   is positive, the string returned will contain at most $length
 *   grapheme units beginning from $start (depending on the length of
 *   string). If $string is less than or equal to $start grapheme units
 *   long, FALSE will be returned. If $length is given and is negative,
 *   then that many grapheme units will be omitted from the end of string
 *   (after the start position has been calculated when a start is
 *   negative). If $start denotes a position beyond this truncation, an
 *   empty string will be returned.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function grapheme_substr($string, $start, $length){}

/**
 * Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.
 * 
 * Although this function can handle dates all the way back to 4714 B.C.,
 * such use may not be meaningful. The Gregorian calendar was not
 * instituted until October 15, 1582 (or October 5, 1582 in the Julian
 * calendar). Some countries did not accept it until much later. For
 * example, Britain converted in 1752, The USSR in 1918 and Greece in
 * 1923. Most European countries used the Julian calendar prior to the
 * Gregorian.
 * 
 * @param int $month The month as a number from 1 (for January) to 12
 *   (for December)
 * @param int $day The day as a number from 1 to 31
 * @param int $year The year as a number between -4714 and 9999
 * @return int
 * @since PHP 4, PHP 5
 **/
function gregoriantojd($month, $day, $year){}

/**
 * Get the IP address we advertise ourselves as using.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @return string
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_get_host_ip($context){}

/**
 * Get the port that the SOAP server is running on.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @return int
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_get_port($context){}

/**
 * Get the event subscription timeout (in seconds), or 0 meaning there is
 * no timeout.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @return int
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_get_subscription_timeout($context){}

/**
 * Start hosting {@link local_path} at {@link server_path}. Files with
 * the path {@link local_path}.LOCALE (if they exist) will be served up
 * when LOCALE is specified in the request's Accept-Language header.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @param string $local_path Path to the local file or folder to be
 *   hosted.
 * @param string $server_path Web server path where {@link local_path}
 *   should be hosted.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_host_path($context, $local_path, $server_path){}

/**
 * Create a new context with the specified host_ip and port.
 * 
 * @param string $host_ip The local host's IP address, or NULL to use
 *   the IP address of the first non-loopback network interface.
 * @param int $port Port to run on, or 0 if you don't care what port is
 *   used.
 * @return resource
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_new($host_ip, $port){}

/**
 * Sets the event subscription timeout (in seconds) to time out. Note
 * that any client side subscriptions will automatically be renewed.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @param int $timeout The event subscription timeout in seconds. Use 0
 *   if you don't want subscriptions to time out.
 * @return void
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_set_subscription_timeout($context, $timeout){}

/**
 * Sets a function to be called at regular intervals.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @param int $timeout A timeout in miliseconds.
 * @param mixed $callback The callback function calling every {@link
 *   timeout} period of time. Typically, callback function takes on
 *   {@link arg} parameter.
 * @param mixed $arg User data for {@link callback}.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_timeout_add($context, $timeout, $callback, $arg){}

/**
 * Stop hosting the file or folder at {@link server_path}.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @param string $server_path Web server path where the file or folder
 *   is hosted.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_context_unhost_path($context, $server_path){}

/**
 * Start the search and calls user-defined callback.
 * 
 * @param resource $cpoint A control point identifier, returned by
 *   {@link gupnp_control_point_new}.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_control_point_browse_start($cpoint){}

/**
 * Stop the search and calls user-defined callback.
 * 
 * @param resource $cpoint A control point identifier, returned by
 *   {@link gupnp_control_point_new}.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_control_point_browse_stop($cpoint){}

/**
 * Set control point callback function for signal.
 * 
 * @param resource $cpoint A control point identifier, returned by
 *   {@link gupnp_control_point_new}.
 * @param int $signal The value of signal. Signal can be one of the
 *   following values: GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE Emitted
 *   whenever a new device has become available.
 *   GUPNP_SIGNAL_DEVICE_PROXY_UNAVAILABLE Emitted whenever a device is
 *   not available any more. GUPNP_SIGNAL_SERVICE_PROXY_AVAILABLE Emitted
 *   whenever a new service has become available.
 *   GUPNP_SIGNAL_SERVICE_PROXY_UNAVAILABLE Emitted whenever a service is
 *   not available any more.
 * @param mixed $callback
 * @param mixed $arg
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_control_point_callback_set($cpoint, $signal, $callback, $arg){}

/**
 * Create a new control point with the specified target.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @param string $target The search target. {@link target} should be a
 *   service or device name, such as
 *   urn:schemas-upnp-org:service:WANIPConnection:1 or
 *   urn:schemas-upnp-org:device:MediaRenderer:1.
 * @return resource
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_control_point_new($context, $target){}

/**
 * Set device callback function for signal and action.
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @param int $signal The value of signal. Signal can be one of the
 *   following values: GUPNP_SIGNAL_ACTION_INVOKED Emitted whenever an
 *   action is invoked. Handler should process action and must call
 *   either {@link gupnp_service_action_return} or {@link
 *   gupnp_service_action_return_error}. GUPNP_SIGNAL_NOTIFY_FAILED
 *   Emitted whenever notification of a client fails.
 * @param string $action_name
 * @param mixed $callback
 * @param mixed $arg The name of action.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_device_action_callback_set($root_device, $signal, $action_name, $callback, $arg){}

/**
 * Get info of root device.
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @return array
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_device_info_get($root_device){}

/**
 * Get the service with type or false if no such device was found.
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @param string $type The type of the service to be retrieved.
 * @return resource
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_device_info_get_service($root_device, $type){}

/**
 * Get whether or not {@link root_device} is available (announcing its
 * presence).
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_root_device_get_available($root_device){}

/**
 * Get the relative location of root device.
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @return string
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_root_device_get_relative_location($root_device){}

/**
 * Create a new root device, automatically downloading and parsing
 * location.
 * 
 * @param resource $context A context identifier, returned by {@link
 *   gupnp_context_new}.
 * @param string $location Location of the description file for this
 *   device, relative to the HTTP root
 * @return resource
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_root_device_new($context, $location){}

/**
 * Controls whether or not root_device is available (announcing its
 * presence).
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @param bool $available Set if {@link root_device} should be
 *   available.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_root_device_set_available($root_device, $available){}

/**
 * Start root server's main loop.
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_root_device_start($root_device){}

/**
 * Stop root server's main loop.
 * 
 * @param resource $root_device A root device identifier, returned by
 *   {@link gupnp_root_device_new}.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_root_device_stop($root_device){}

/**
 * Retrieves the specified action arguments.
 * 
 * @param resource $action A service action identifier.
 * @param string $name The name of the variable to retrieve.
 * @param int $type The type of the variable to retrieve. Type can be
 *   one of the following values: GUPNP_TYPE_BOOLEAN Type of the variable
 *   is boolean. GUPNP_TYPE_INT Type of the variable is integer.
 *   GUPNP_TYPE_LONG Type of the variable is long. GUPNP_TYPE_DOUBLE Type
 *   of the variable is double. GUPNP_TYPE_FLOAT Type of the variable is
 *   float. GUPNP_TYPE_STRING Type of the variable is string.
 * @return mixed
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_action_get($action, $name, $type){}

/**
 * Return succesfully.
 * 
 * @param resource $action A service action identifier.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_action_return($action){}

/**
 * Return error code.
 * 
 * @param resource $action A service action identifier.
 * @param int $error_code The error code. Signal can be one of the
 *   following values or user defined: GUPNP_CONTROL_ERROR_INVALID_ACTION
 *   The action name was invalid. GUPNP_CONTROL_ERROR_INVALID_ARGS The
 *   action arguments were invalid. GUPNP_CONTROL_ERROR_OUT_OF_SYNC Out
 *   of sync (deprecated). GUPNP_CONTROL_ERROR_ACTION_FAILED The action
 *   failed.
 * @param string $error_description
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_action_return_error($action, $error_code, $error_description){}

/**
 * Sets the specified action return values.
 * 
 * @param resource $action A service action identifier.
 * @param string $name The name of the variable to retrieve.
 * @param int $type The type of the variable to retrieve. Type can be
 *   one of the following values: GUPNP_TYPE_BOOLEAN Type of the variable
 *   is boolean. GUPNP_TYPE_INT Type of the variable is integer.
 *   GUPNP_TYPE_LONG Type of the variable is long. GUPNP_TYPE_DOUBLE Type
 *   of the variable is double. GUPNP_TYPE_FLOAT Type of the variable is
 *   float. GUPNP_TYPE_STRING Type of the variable is string.
 * @param mixed $value
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_action_set($action, $name, $type, $value){}

/**
 * Causes new notifications to be queued up until {@link
 * gupnp_service_thaw_notify} is called.
 * 
 * @param resource $service A service identifier.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_freeze_notify($service){}

/**
 * Get full info of service.
 * 
 * @param resource $proxy A service proxy identifier.
 * @return array
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_info_get($proxy){}

/**
 * Get resource introspection of service or register callback if
 * corresponding parameter was passed.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param mixed $callback The callback function to be called when
 *   introspection object is ready. Typically, callback function takes on
 *   three parameters. The {@link introspection} parameter's identifier
 *   being the first, {@link error} parameter's message being the second,
 *   and the {@link arg} is third.
 * @param mixed $arg User data for {@link callback}.
 * @return mixed
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_info_get_introspection($proxy, $callback, $arg){}

/**
 * Returns the state variable data by the name {@link variable_name} in
 * this service.
 * 
 * @param resource $introspection A introspection identifier.
 * @param string $variable_name The name of the variable to retreive.
 * @return array
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_introspection_get_state_variable($introspection, $variable_name){}

/**
 * Notifies listening clients that the property have changed to the
 * specified values.
 * 
 * @param resource $service A service identifier.
 * @param string $name The name of the variable.
 * @param int $type The type of the variable. Type can be one of the
 *   following values: GUPNP_TYPE_BOOLEAN Type of the variable is
 *   boolean. GUPNP_TYPE_INT Type of the variable is integer.
 *   GUPNP_TYPE_LONG Type of the variable is long. GUPNP_TYPE_DOUBLE Type
 *   of the variable is double. GUPNP_TYPE_FLOAT Type of the variable is
 *   float. GUPNP_TYPE_STRING Type of the variable is string.
 * @param mixed $value
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_notify($service, $name, $type, $value){}

/**
 * Send action with parameters to the service exposed by proxy
 * synchronously and get value.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param string $action An action.
 * @param string $name The action name.
 * @param int $type The type of the variable to retrieve. Type can be
 *   one of the following values: GUPNP_TYPE_BOOLEAN Type of the variable
 *   is boolean. GUPNP_TYPE_INT Type of the variable is integer.
 *   GUPNP_TYPE_LONG Type of the variable is long. GUPNP_TYPE_DOUBLE Type
 *   of the variable is double. GUPNP_TYPE_FLOAT Type of the variable is
 *   float. GUPNP_TYPE_STRING Type of the variable is string.
 * @return mixed
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_action_get($proxy, $action, $name, $type){}

/**
 * Send action with parameters to the service exposed by proxy
 * synchronously and set value.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param string $action An action.
 * @param string $name The action name.
 * @param mixed $value The action value.
 * @param int $type The type of the action. Type can be one of the
 *   following values: GUPNP_TYPE_BOOLEAN Type of the variable is
 *   boolean. GUPNP_TYPE_INT Type of the variable is integer.
 *   GUPNP_TYPE_LONG Type of the variable is long. GUPNP_TYPE_DOUBLE Type
 *   of the variable is double. GUPNP_TYPE_FLOAT Type of the variable is
 *   float. GUPNP_TYPE_STRING Type of the variable is string.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_action_set($proxy, $action, $name, $value, $type){}

/**
 * Sets up callback to be called whenever a change notification for
 * variable is recieved.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param string $value The variable to add notification for.
 * @param int $type The type of the variable. Type can be one of the
 *   following values: GUPNP_TYPE_BOOLEAN Type of the variable is
 *   boolean. GUPNP_TYPE_INT Type of the variable is integer.
 *   GUPNP_TYPE_LONG Type of the variable is long. GUPNP_TYPE_DOUBLE Type
 *   of the variable is double. GUPNP_TYPE_FLOAT Type of the variable is
 *   float. GUPNP_TYPE_STRING Type of the variable is string.
 * @param mixed $callback
 * @param mixed $arg
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_add_notify($proxy, $value, $type, $callback, $arg){}

/**
 * Set service proxy callback for signal.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param int $signal The value of signal.
 *   GUPNP_SIGNAL_SUBSCRIPTION_LOST Emitted whenever the subscription to
 *   this service has been lost due to an error condition.
 * @param mixed $callback
 * @param mixed $arg The callback function for the certain signal.
 *   Typically, callback function takes on two parameters. {@link error}
 *   parameter's message being the first, and the {@link arg} is second.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_callback_set($proxy, $signal, $callback, $arg){}

/**
 * Check whether subscription is valid to the service.
 * 
 * @param resource $proxy A service proxy identifier.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_get_subscribed($proxy){}

/**
 * Cancels the variable change notification.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param string $value The variable to add notification for.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_remove_notify($proxy, $value){}

/**
 * Send action action with parameters {@link in_params} to the service
 * exposed by proxy synchronously and return {@link out_params} with
 * values or on error.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param string $action An action.
 * @param array $in_params An array of in parameters. Each entry in
 *   {@link in_params} is supposed to an array containing name, type and
 *   value of the parameters.
 * @param array $out_params An array of out parameters. Each entry in
 *   {@link out_params} is supposed to an array containing name and type
 *   of the parameters.
 * @return array
 * @since PECL gupnp >= 0.2.0
 **/
function gupnp_service_proxy_send_action($proxy, $action, $in_params, $out_params){}

/**
 * (Un)subscribes to the service.
 * 
 * @param resource $proxy A service proxy identifier.
 * @param bool $subscribed Set to subscribe to this service.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_proxy_set_subscribed($proxy, $subscribed){}

/**
 * Sends out any pending notifications and stops queuing of new ones.
 * 
 * @param resource $service A service identifier.
 * @return bool
 * @since PECL gupnp >= 0.1.0
 **/
function gupnp_service_thaw_notify($service){}

/**
 * Closes the given gz-file pointer.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function gzclose($zp){}

/**
 * This function compress the given string using the ZLIB data format.
 * 
 * For details on the ZLIB compression algorithm see the document "ZLIB
 * Compressed Data Format Specification version 3.3" (RFC 1950).
 * 
 * @param string $data The data to compress.
 * @param int $level The level of compression. Can be given as 0 for no
 *   compression up to 9 for maximum compression.
 * @return string
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function gzcompress($data, $level){}

/**
 * This function returns a decoded version of the input {@link data}.
 * 
 * @param string $data The data to decode, encoded by {@link gzencode}.
 * @param int $length The maximum length of data to decode.
 * @return string
 **/
function gzdecode($data, $length){}

/**
 * This function compress the given string using the DEFLATE data format.
 * 
 * For details on the DEFLATE compression algorithm see the document
 * "DEFLATE Compressed Data Format Specification version 1.3" (RFC 1951).
 * 
 * @param string $data The data to deflate.
 * @param int $level The level of compression. Can be given as 0 for no
 *   compression up to 9 for maximum compression. If not given, the
 *   default compression level will be the default compression level of
 *   the zlib library.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gzdeflate($data, $level){}

/**
 * This function returns a compressed version of the input {@link data}
 * compatible with the output of the gzip program.
 * 
 * For more information on the GZIP file format, see the document: GZIP
 * file format specification version 4.3 (RFC 1952).
 * 
 * @param string $data The data to encode.
 * @param int $level The level of compression. Can be given as 0 for no
 *   compression up to 9 for maximum compression. If not given, the
 *   default compression level will be the default compression level of
 *   the zlib library.
 * @param int $encoding_mode The encoding mode. Can be FORCE_GZIP (the
 *   default) or FORCE_DEFLATE. If you use FORCE_DEFLATE, you get a
 *   standard zlib deflated string (inclusive zlib headers) after the
 *   gzip file header but without the trailing crc32 checksum.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gzencode($data, $level, $encoding_mode){}

/**
 * Tests the given GZ file pointer for EOF.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gzeof($zp){}

/**
 * This function is identical to {@link readgzfile}, except that it
 * returns the file in an array.
 * 
 * @param string $filename The file name.
 * @param int $use_include_path You can set this optional parameter to
 *   1, if you want to search for the file in the include_path too.
 * @return array
 * @since PHP 4, PHP 5
 **/
function gzfile($filename, $use_include_path){}

/**
 * Returns a string containing a single (uncompressed) character read
 * from the given gz-file pointer.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gzgetc($zp){}

/**
 * Gets a (uncompressed) string of up to length - 1 bytes read from the
 * given file pointer. Reading ends when length - 1 bytes have been read,
 * on a newline, or on EOF (whichever comes first).
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @param int $length The length of data to get.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gzgets($zp, $length){}

/**
 * Identical to {@link gzgets}, except that {@link gzgetss} attempts to
 * strip any HTML and PHP tags from the text it reads.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @param int $length The length of data to get.
 * @param string $allowable_tags You can use this optional parameter to
 *   specify tags which should not be stripped.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gzgetss($zp, $length, $allowable_tags){}

/**
 * This function inflate a deflated string.
 * 
 * @param string $data The data compressed by {@link gzdeflate}.
 * @param int $length The maximum length of data to decode.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function gzinflate($data, $length){}

/**
 * Opens a gzip (.gz) file for reading or writing.
 * 
 * {@link gzopen} can be used to read a file which is not in gzip format;
 * in this case {@link gzread} will directly read from the file without
 * decompression.
 * 
 * @param string $filename The file name.
 * @param string $mode As in {@link fopen} (rb or wb) but can also
 *   include a compression level (wb9) or a strategy: f for filtered data
 *   as in wb6f, h for Huffman only compression as in wb1h. (See the
 *   description of deflateInit2 in zlib.h for more information about the
 *   strategy parameter.)
 * @param int $use_include_path You can set this optional parameter to
 *   1, if you want to search for the file in the include_path too.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function gzopen($filename, $mode, $use_include_path){}

/**
 * Reads to EOF on the given gz-file pointer from the current position
 * and writes the (uncompressed) results to standard output.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gzpassthru($zp){}

/**
 * {@link gzputs} writes the contents of {@link string} to the given
 * gz-file.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @param string $string The string to write.
 * @param int $length The number of uncompressed bytes to write. If
 *   supplied, writing will stop after {@link length} (uncompressed)
 *   bytes have been written or the end of {@link string} is reached,
 *   whichever comes first.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gzputs($zp, $string, $length){}

/**
 * {@link gzread} reads up to {@link length} bytes from the given gz-file
 * pointer. Reading stops when {@link length} (uncompressed) bytes have
 * been read or EOF is reached, whichever comes first.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @param int $length The number of bytes to read.
 * @return string
 * @since PHP 4, PHP 5
 **/
function gzread($zp, $length){}

/**
 * Sets the file position indicator of the given gz-file pointer to the
 * beginning of the file stream.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function gzrewind($zp){}

/**
 * Sets the file position indicator for the given file pointer to the
 * given offset byte into the file stream. Equivalent to calling (in C)
 * gzseek(zp, offset, SEEK_SET).
 * 
 * If the file is opened for reading, this function is emulated but can
 * be extremely slow. If the file is opened for writing, only forward
 * seeks are supported; {@link gzseek} then compresses a sequence of
 * zeroes up to the new starting position.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @param int $offset The seeked offset.
 * @param int $whence {@link whence} values are: SEEK_SET - Set
 *   position equal to {@link offset} bytes. SEEK_CUR - Set position to
 *   current location plus {@link offset}. If {@link whence} is not
 *   specified, it is assumed to be SEEK_SET.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gzseek($zp, $offset, $whence){}

/**
 * Gets the position of the given file pointer; i.e., its offset into the
 * uncompressed file stream.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gztell($zp){}

/**
 * This function uncompress a compressed string.
 * 
 * @param string $data The data compressed by {@link gzcompress}.
 * @param int $length The maximum length of data to decode.
 * @return string
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function gzuncompress($data, $length){}

/**
 * {@link gzwrite} writes the contents of {@link string} to the given
 * gz-file.
 * 
 * @param resource $zp The gz-file pointer. It must be valid, and must
 *   point to a file successfully opened by {@link gzopen}.
 * @param string $string The string to write.
 * @param int $length The number of uncompressed bytes to write. If
 *   supplied, writing will stop after {@link length} (uncompressed)
 *   bytes have been written or the end of {@link string} is reached,
 *   whichever comes first.
 * @return int
 * @since PHP 4, PHP 5
 **/
function gzwrite($zp, $string, $length){}

/**
 * @param string $algo Name of selected hashing algorithm (i.e. "md5",
 *   "sha256", "haval160,4", etc..)
 * @param string $data Message to be hashed.
 * @param bool $raw_output When set to , outputs raw binary data.
 *   outputs lowercase hexits.
 * @return string
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash($algo, $data, $raw_output){}

/**
 * @return array
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_algos(){}

/**
 * @param resource $context Hashing context returned by {@link
 *   hash_init}.
 * @return resource
 * @since PHP 5 >= 5.3.0
 **/
function hash_copy($context){}

/**
 * @param string $algo Name of selected hashing algorithm (i.e. "md5",
 *   "sha256", "haval160,4", etc..)
 * @param string $filename URL describing location of file to be
 *   hashed; Supports fopen wrappers.
 * @param bool $raw_output When set to , outputs raw binary data.
 *   outputs lowercase hexits.
 * @return string
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_file($algo, $filename, $raw_output){}

/**
 * @param resource $context Hashing context returned by {@link
 *   hash_init}.
 * @param bool $raw_output When set to , outputs raw binary data.
 *   outputs lowercase hexits.
 * @return string
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_final($context, $raw_output){}

/**
 * @param string $algo Name of selected hashing algorithm (i.e. "md5",
 *   "sha256", "haval160,4", etc..) See {@link hash_algos} for a list of
 *   supported algorithms.
 * @param string $data Message to be hashed.
 * @param string $key Shared secret key used for generating the HMAC
 *   variant of the message digest.
 * @param bool $raw_output When set to , outputs raw binary data.
 *   outputs lowercase hexits.
 * @return string
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_hmac($algo, $data, $key, $raw_output){}

/**
 * @param string $algo Name of selected hashing algorithm (i.e. "md5",
 *   "sha256", "haval160,4", etc..) See {@link hash_algos} for a list of
 *   supported algorithms.
 * @param string $filename URL describing location of file to be
 *   hashed; Supports fopen wrappers.
 * @param string $key Shared secret key used for generating the HMAC
 *   variant of the message digest.
 * @param bool $raw_output When set to , outputs raw binary data.
 *   outputs lowercase hexits.
 * @return string
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_hmac_file($algo, $filename, $key, $raw_output){}

/**
 * @param string $algo Name of selected hashing algorithm (i.e. "md5",
 *   "sha256", "haval160,4", etc..)
 * @param int $options Optional settings for hash generation, currently
 *   supports only one option: HASH_HMAC. When specified, the {@link key}
 *   must be specified.
 * @param string $key When HASH_HMAC is specified for {@link options},
 *   a shared secret key to be used with the HMAC hashing method must be
 *   supplied in this parameter.
 * @return resource
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_init($algo, $options, $key){}

/**
 * @param resource $context Hashing context returned by {@link
 *   hash_init}.
 * @param string $data Message to be included in the hash digest.
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_update($context, $data){}

/**
 * @param resource $context Hashing context returned by {@link
 *   hash_init}.
 * @param string $filename URL describing location of file to be
 *   hashed; Supports fopen wrappers.
 * @param resource $context Stream context as returned by {@link
 *   stream_context_create}.
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_update_file($context, $filename, $context){}

/**
 * @param resource $context Hashing context returned by {@link
 *   hash_init}.
 * @param resource $handle Open file handle as returned by any stream
 *   creation function.
 * @param int $length Maximum number of characters to copy from {@link
 *   handle} into the hashing context.
 * @return int
 * @since PHP 5 >= 5.1.2, PECL hash >= 1.1
 **/
function hash_update_stream($context, $handle, $length){}

/**
 * {@link header} is used to send a raw HTTP header. See the HTTP/1.1
 * specification for more information on HTTP headers.
 * 
 * Remember that {@link header} must be called before any actual output
 * is sent, either by normal HTML tags, blank lines in a file, or from
 * PHP. It is a very common error to read code with {@link include}, or
 * {@link require}, functions, or another file access function, and have
 * spaces or empty lines that are output before {@link header} is called.
 * The same problem exists when using a single PHP/HTML file.
 * 
 * <html> <?php /* This will give an error. Note the output * above,
 * which is before the header() call * / header('Location:
 * http://www.example.com/'); ?>
 * 
 * @param string $string The header string. There are two special-case
 *   header calls. The first is a header that starts with the string
 *   "HTTP/" (case is not significant), which will be used to figure out
 *   the HTTP status code to send. For example, if you have configured
 *   Apache to use a PHP script to handle requests for missing files
 *   (using the ErrorDocument directive), you may want to make sure that
 *   your script generates the proper status code.
 *   
 *   <?php header("HTTP/1.0 404 Not Found"); ?>
 *   
 *   The second special case is the "Location:" header. Not only does it
 *   send this header back to the browser, but it also returns a REDIRECT
 *   (302) status code to the browser unless the 201 or a 3xx status code
 *   has already been set.
 *   
 *   <?php header("Location: http://www.example.com/"); /* Redirect
 *   browser * /
 *   
 *   /* Make sure that code below does not get executed when we redirect.
 *   * / exit; ?>
 * @param bool $replace The optional {@link replace} parameter
 *   indicates whether the header should replace a previous similar
 *   header, or add a second header of the same type. By default it will
 *   replace, but if you pass in as the second argument you can force
 *   multiple headers of the same type. For example:
 *   
 *   <?php header('WWW-Authenticate: Negotiate');
 *   header('WWW-Authenticate: NTLM', false); ?>
 * @param int $http_response_code Forces the HTTP response code to the
 *   specified value.
 * @return void
 * @since PHP 4, PHP 5
 **/
function header($string, $replace, $http_response_code){}

/**
 * {@link headers_list} will return a list of headers to be sent to the
 * browser / client. To determine whether or not these headers have been
 * sent yet, use {@link headers_sent}.
 * 
 * @return array
 * @since PHP 5
 **/
function headers_list(){}

/**
 * Checks if or where headers have been sent.
 * 
 * You can't add any more header lines using the {@link header} function
 * once the header block has already been sent. Using this function you
 * can at least prevent getting HTTP header related error messages.
 * Another option is to use Output Buffering.
 * 
 * @param string $file If the optional {@link file} and {@link line}
 *   parameters are set, {@link headers_sent} will put the PHP source
 *   file name and line number where output started in the {@link file}
 *   and {@link line} variables.
 * @param int $line The line number where the output started.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function headers_sent(&$file, &$line){}

/**
 * Removes an HTTP header previously set using {@link header}.
 * 
 * @param string $name The header name to be removed.
 * @return void
 * @since PHP 5 >= 5.3.0
 **/
function header_remove($name){}

/**
 * Converts logical Hebrew text to visual text.
 * 
 * The function tries to avoid breaking words.
 * 
 * @param string $hebrew_text A Hebrew input string.
 * @param int $max_chars_per_line This optional parameter indicates
 *   maximum number of characters per line that will be returned.
 * @return string
 * @since PHP 4, PHP 5
 **/
function hebrev($hebrew_text, $max_chars_per_line){}

/**
 * This function is similar to {@link hebrev} with the difference that it
 * converts newlines (\n) to "<br>\n".
 * 
 * The function tries to avoid breaking words.
 * 
 * @param string $hebrew_text A Hebrew input string.
 * @param int $max_chars_per_line This optional parameter indicates
 *   maximum number of characters per line that will be returned.
 * @return string
 * @since PHP 4, PHP 5
 **/
function hebrevc($hebrew_text, $max_chars_per_line){}

/**
 * Returns the decimal equivalent of the hexadecimal number represented
 * by the {@link hex_string} argument. {@link hexdec} converts a
 * hexadecimal string to a decimal number.
 * 
 * {@link hexdec} will ignore any non-hexadecimal characters it
 * encounters.
 * 
 * @param string $hex_string The hexadecimal string to convert
 * @return number
 * @since PHP 4, PHP 5
 **/
function hexdec($hex_string){}

/**
 * Prints out or returns a syntax highlighted version of the code
 * contained in {@link filename} using the colors defined in the built-in
 * syntax highlighter for PHP.
 * 
 * Many servers are configured to automatically highlight files with a
 * phps extension. For example, example.phps when viewed will show the
 * syntax highlighted source of the file. To enable this, add this line
 * to the :
 * 
 * @param string $filename Path to the PHP file to be highlighted.
 * @param bool $return Set this parameter to to make this function
 *   return the highlighted code.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function highlight_file($filename, $return){}

/**
 * @param string $str The PHP code to be highlighted. This should
 *   include the opening tag.
 * @param bool $return Set this parameter to to make this function
 *   return the highlighted code.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function highlight_string($str, $return){}

/**
 * This function is identical to {@link htmlspecialchars} in all ways,
 * except with {@link htmlentities}, all characters which have HTML
 * character entity equivalents are translated into these entities.
 * 
 * If you're wanting to decode instead (the reverse) you can use {@link
 * html_entity_decode}.
 * 
 * @param string $string The input string.
 * @param int $quote_style Like {@link htmlspecialchars}, the optional
 *   second {@link quote_style} parameter lets you define what will be
 *   done with 'single' and "double" quotes. It takes on one of three
 *   constants with the default being ENT_COMPAT: Available {@link
 *   quote_style} constants Constant Name Description ENT_COMPAT Will
 *   convert double-quotes and leave single-quotes alone. ENT_QUOTES Will
 *   convert both double and single quotes. ENT_NOQUOTES Will leave both
 *   double and single quotes unconverted.
 * @param string $charset Like {@link htmlspecialchars}, it takes an
 *   optional third argument {@link charset} which defines character set
 *   used in conversion. Presently, the ISO-8859-1 character set is used
 *   as the default.
 * @param bool $double_encode When {@link double_encode} is turned off
 *   PHP will not encode existing html entities. The default is to
 *   convert everything.
 * @return string
 * @since PHP 4, PHP 5
 **/
function htmlentities($string, $quote_style, $charset, $double_encode){}

/**
 * Certain characters have special significance in HTML, and should be
 * represented by HTML entities if they are to preserve their meanings.
 * This function returns a string with some of these conversions made;
 * the translations made are those most useful for everyday web
 * programming. If you require all HTML character entities to be
 * translated, use {@link htmlentities} instead.
 * 
 * The translations performed are: '&' (ampersand) becomes '&amp;' ''
 * (double quote) becomes '&quot;' when ENT_NOQUOTES is not set. '''
 * (single quote) becomes '&#039;' only when ENT_QUOTES is set. '<' (less
 * than) becomes '&lt;' '>' (greater than) becomes '&gt;'
 * 
 * @param string $string The string being converted.
 * @param int $quote_style The optional second argument, {@link
 *   quote_style}, tells the function what to do with single and double
 *   quote characters. The default mode, ENT_COMPAT, is the backwards
 *   compatible mode which only translates the double-quote character and
 *   leaves the single-quote untranslated. If ENT_QUOTES is set, both
 *   single and double quotes are translated and if ENT_NOQUOTES is set
 *   neither single nor double quotes are translated.
 * @param string $charset Defines character set used in conversion. The
 *   default character set is ISO-8859-1. For the purposes of this
 *   function, the charsets ISO-8859-1, ISO-8859-15, UTF-8, cp866,
 *   cp1251, cp1252, and KOI8-R are effectively equivalent, as the
 *   characters affected by {@link htmlspecialchars} occupy the same
 *   positions in all of these charsets.
 * @param bool $double_encode When {@link double_encode} is turned off
 *   PHP will not encode existing html entities, the default is to
 *   convert everything.
 * @return string
 * @since PHP 4, PHP 5
 **/
function htmlspecialchars($string, $quote_style, $charset, $double_encode){}

/**
 * This function is the opposite of {@link htmlspecialchars}. It converts
 * special HTML entities back to characters.
 * 
 * The converted entities are: &amp;, &quot; (when ENT_NOQUOTES is not
 * set), &#039; (when ENT_QUOTES is set), &lt; and &gt;.
 * 
 * @param string $string The string to decode
 * @param int $quote_style The quote style. One of the following
 *   constants: quote_style constants Constant Name Description
 *   ENT_COMPAT Will convert double-quotes and leave single-quotes alone
 *   (default) ENT_QUOTES Will convert both double and single quotes
 *   ENT_NOQUOTES Will leave both double and single quotes unconverted
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function htmlspecialchars_decode($string, $quote_style){}

/**
 * {@link html_entity_decode} is the opposite of {@link htmlentities} in
 * that it converts all HTML entities to their applicable characters from
 * {@link string}.
 * 
 * @param string $string The input string.
 * @param int $quote_style The optional second {@link quote_style}
 *   parameter lets you define what will be done with 'single' and
 *   "double" quotes. It takes on one of three constants with the default
 *   being ENT_COMPAT: Available {@link quote_style} constants Constant
 *   Name Description ENT_COMPAT Will convert double-quotes and leave
 *   single-quotes alone. ENT_QUOTES Will convert both double and single
 *   quotes. ENT_NOQUOTES Will leave both double and single quotes
 *   unconverted.
 * @param string $charset The ISO-8859-1 character set is used as
 *   default for the optional third {@link charset}. This defines the
 *   character set used in conversion.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function html_entity_decode($string, $quote_style, $charset){}

/**
 * Build a cookie string from an array/object like returned by {@link
 * http_parse_cookie}.
 * 
 * @param array $cookie a cookie list like returned from {@link
 *   http_parse_cookie}
 * @return string
 * @since PECL pecl_http >= 1.2.0
 **/
function http_build_cookie($cookie){}

/**
 * Generates a URL-encoded query string from the associative (or indexed)
 * array provided.
 * 
 * @param array $formdata May be an array or object containing
 *   properties. The array form may be a simple one-dimensional
 *   structure, or an array of arrays (who in turn may contain other
 *   arrays).
 * @param string $numeric_prefix If numeric indices are used in the
 *   base array and this parameter is provided, it will be prepended to
 *   the numeric index for elements in the base array only. This is meant
 *   to allow for legal variable names when the data is decoded by PHP or
 *   another CGI application later on.
 * @param string $arg_separator arg_separator.output is used to
 *   separate arguments, unless this parameter is specified, and is then
 *   used.
 * @return string
 * @since PHP 5
 **/
function http_build_query($formdata, $numeric_prefix, $arg_separator){}

/**
 * Opponent to parse_str().
 * 
 * @param array $query associative array of query string parameters
 * @param string $prefix top level prefix
 * @param string $arg_separator argument separator to use (by default
 *   the INI setting arg_separator.output will be used, or & if neither
 *   is set
 * @return string
 * @since PECL pecl_http >= 0.23.0
 **/
function http_build_str($query, $prefix, $arg_separator){}

/**
 * Build a URL.
 * 
 * The parts of the second URL will be merged into the first according to
 * the flags argument.
 * 
 * @param mixed $url (part(s) of) an URL in form of a string or
 *   associative array like {@link parse_url} returns
 * @param mixed $parts same as the first argument
 * @param int $flags a bitmask of binary or'ed HTTP_URL constants;
 *   HTTP_URL_REPLACE is the default
 * @param array $new_url if set, it will be filled with the parts of
 *   the composed url like {@link parse_url} would return
 * @return string
 * @since PECL pecl_http >= 0.21.0
 **/
function http_build_url($url, $parts, $flags, &$new_url){}

/**
 * Attempts to cache the sent entity by its ETag, either supplied or
 * generated by the hash algorithm specified by the http.etag.mode.
 * 
 * If the clients If-None-Match header matches the supplied/calculated
 * ETag, the body is considered cached on the clients side and a 304 Not
 * Modified status code is issued.
 * 
 * A log entry is written to the cache log if the http.log.cache is set
 * and the cache attempt was successful.
 * 
 * If this function is used outside the http_send_*() API, it facilitates
 * the {@link ob_etaghandler}.
 * 
 * @param string $etag custom ETag
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_cache_etag($etag){}

/**
 * Attempts to cache the sent entity by its last modification date.
 * 
 * If the supplied argument is greater than 0, it is handled as timestamp
 * and will be sent as date of last modification. If it is 0 or omitted,
 * the current time will be sent as Last-Modified date. If it's negative,
 * it is handled as expiration time in seconds, which means that if the
 * requested last modification date is not between the calculated
 * timespan, the Last-Modified header is updated and the actual body will
 * be sent.
 * 
 * A log entry will be written to the cache log if the http.log.cache is
 * set and the cache attempt was successful.
 * 
 * @param int $timestamp_or_expires Unix timestamp
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_cache_last_modified($timestamp_or_expires){}

/**
 * Decodes a string which is HTTP-chunked encoded.
 * 
 * @param string $encoded chunked encoded string
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_chunked_decode($encoded){}

/**
 * Compose a valid HTTP date regarding RFC 1123 looking like: Wed, 22 Dec
 * 2004 11:34:47 GMT.
 * 
 * @param int $timestamp Unix timestamp; current time if omitted
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_date($timestamp){}

/**
 * Compress data with gzip, zlib AKA deflate or raw deflate encoding.
 * 
 * See the deflate constants table for possible values for the flags
 * parameter.
 * 
 * @param string $data String containing the data that should be
 *   encoded
 * @param int $flags deflate options
 * @return string
 * @since PECL pecl_http >= 0.15.0
 **/
function http_deflate($data, $flags){}

/**
 * Performs an HTTP GET request on the supplied url.
 * 
 * @param string $url URL
 * @param array $options
 * @param array $info Will be filled with request/response information
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_get($url, $options, &$info){}

/**
 * Get the raw request body (e.g. POST or PUT data).
 * 
 * This function can not be used after {@link
 * http_get_request_body_stream} if the request method was another than
 * POST.
 * 
 * @return string
 * @since PECL pecl_http >= 0.10.0
 **/
function http_get_request_body(){}

/**
 * Create a stream to read the raw request body (e.g. POST or PUT data).
 * 
 * This function can only be used once if the request method was another
 * than POST.
 * 
 * @return resource
 * @since PECL pecl_http >= 0.22.0
 **/
function http_get_request_body_stream(){}

/**
 * Get a list of incoming HTTP headers.
 * 
 * @return array
 * @since PECL pecl_http >= 0.10.0
 **/
function http_get_request_headers(){}

/**
 * Performs an HTTP HEAD request on the supplied url.
 * 
 * @param string $url URL
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_head($url, $options, &$info){}

/**
 * Decompress data compressed with either gzip, deflate AKA zlib or raw
 * deflate encoding.
 * 
 * @param string $data string containing the compressed data
 * @return string
 * @since PECL pecl_http >= 0.15.0
 **/
function http_inflate($data){}

/**
 * Matches the given ETag against the clients If-Match resp.
 * If-None-Match HTTP headers.
 * 
 * @param string $etag the ETag to match
 * @param bool $for_range if set to , the header usually used to
 *   validate HTTP ranges will be checked
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_match_etag($etag, $for_range){}

/**
 * Matches the given Unix timestamp against the clients If-Modified-Since
 * resp. If-Unmodified-Since HTTP headers.
 * 
 * @param int $timestamp Unix timestamp; current time, if omitted
 * @param bool $for_range if set to , the header usually used to
 *   validate HTTP ranges will be checked
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_match_modified($timestamp, $for_range){}

/**
 * Match an incoming HTTP header.
 * 
 * @param string $header the header name (case-insensitive)
 * @param string $value the header value that should be compared
 * @param bool $match_case whether the value should be compared case
 *   sensitively
 * @return bool
 * @since PECL pecl_http >= 0.10.0
 **/
function http_match_request_header($header, $value, $match_case){}

/**
 * This function negotiates the clients preferred charset based on its
 * Accept-Charset HTTP header. The qualifier is recognized and charsets
 * without qualifier are rated highest.
 * 
 * @param array $supported array containing the supported charsets as
 *   values
 * @param array $result will be filled with an array containing the
 *   negotiation results
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_negotiate_charset($supported, &$result){}

/**
 * This function negotiates the clients preferred content type based on
 * its Accept HTTP header. The qualifier is recognized and content types
 * without qualifier are rated highest.
 * 
 * @param array $supported array containing the supported content types
 *   as values
 * @param array $result will be filled with an array containing the
 *   negotiation results
 * @return string
 * @since PECL pecl_http >= 0.19.0
 **/
function http_negotiate_content_type($supported, &$result){}

/**
 * This function negotiates the clients preferred language based on its
 * Accept-Language HTTP header. The qualifier is recognized and languages
 * without qualifier are rated highest. The qualifier will be decreased
 * by 10% for partial matches (i.e. matching primary language).
 * 
 * @param array $supported array containing the supported languages as
 *   values
 * @param array $result will be filled with an array containing the
 *   negotiation results
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_negotiate_language($supported, &$result){}

/**
 * Parses HTTP cookies like sent in a response into a struct.
 * 
 * @param string $cookie string containing the value of a Set-Cookie
 *   response header
 * @param int $flags parse flags (HTTP_COOKIE_PARSE_RAW)
 * @param array $allowed_extras array containing recognized extra keys;
 *   by default all unknown keys will be treated as cookie names
 * @return object
 * @since PECL pecl_http >= 0.20.0
 **/
function http_parse_cookie($cookie, $flags, $allowed_extras){}

/**
 * Parses HTTP headers into an associative array.
 * 
 * @param string $header string containing HTTP headers
 * @return array
 * @since PECL pecl_http >= 0.10.0
 **/
function http_parse_headers($header){}

/**
 * Parses the HTTP {@link message} into a simple recursive object.
 * 
 * @param string $message string containing a single HTTP message or
 *   several consecutive HTTP messages
 * @return object
 * @since PECL pecl_http >= 0.12.0
 **/
function http_parse_message($message){}

/**
 * Parse parameter list.
 * 
 * See the params parsing constants table for possible values of the
 * {@link flags} argument.
 * 
 * @param string $param Parameters
 * @param int $flags Parse flags
 * @return object
 * @since PECL pecl_http >= 1.0.0
 **/
function http_parse_params($param, $flags){}

/**
 * Clean up (close) persistent handles, optionally identified with ident.
 * 
 * @param string $ident the identification string
 * @return string
 * @since PECL pecl_http >= 1.5.0
 **/
function http_persistent_handles_clean($ident){}

/**
 * List statistics about persistent handles usage.
 * 
 * @return object
 * @since PECL pecl_http >= 1.5.0
 **/
function http_persistent_handles_count(){}

/**
 * Query or define the ident of persistent handles.
 * 
 * @param string $ident the identification string
 * @return string
 * @since PECL pecl_http >= 1.5.0
 **/
function http_persistent_handles_ident($ident){}

/**
 * Performs an HTTP POST request on the supplied url.
 * 
 * @param string $url URL
 * @param string $data String containing the pre-encoded post data
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 0.1.0
 **/
function http_post_data($url, $data, $options, &$info){}

/**
 * Performs an HTTP POST request on the supplied url.
 * 
 * @param string $url URL
 * @param array $data Associative array of POST values
 * @param array $files Array of files to post
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 0.10.0
 **/
function http_post_fields($url, $data, $files, $options, &$info){}

/**
 * Performs an HTTP PUT request on the supplied url.
 * 
 * @param string $url URL
 * @param string $data PUT request body
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 0.25.0
 **/
function http_put_data($url, $data, $options, &$info){}

/**
 * Performs an HTTP PUT request on the supplied url.
 * 
 * @param string $url URL
 * @param string $file The file to put
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 0.10.0
 **/
function http_put_file($url, $file, $options, &$info){}

/**
 * Performs an HTTP PUT request on the supplied url.
 * 
 * @param string $url URL
 * @param resource $stream The stream to read the PUT request body from
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 0.10.0
 **/
function http_put_stream($url, $stream, $options, &$info){}

/**
 * Redirect to the given url.
 * 
 * The supplied {@link url} will be expanded with {@link http_build_url},
 * the {@link params} array will be treated with {@link http_build_str}
 * and the session identification will be appended if {@link session} is
 * true. The HTTP response code will be set according to {@link status}.
 * You can use one of the redirect constants for convenience. Please see
 * RFC 2616 for which redirect response code to use in which situation.
 * By default PHP will decide which response status fits best.
 * 
 * To be RFC compliant, Redirecting to <a>URL</a>. will be displayed, if
 * the client doesn't redirect immediately, and the request method was
 * another one than HEAD.
 * 
 * A log entry will be written to the redirect log, if the
 * http.log.redirect is set and the redirect attempt was successful.
 * 
 * @param string $url the URL to redirect to
 * @param array $params associative array of query parameters
 * @param bool $session whether to append session information
 * @param int $status custom response status code
 * @return void
 * @since PECL pecl_http >= 0.1.0
 **/
function http_redirect($url, $params, $session, $status){}

/**
 * Performs a custom HTTP request on the supplied url.
 * 
 * @param int $method Request method
 * @param string $url URL
 * @param string $body Request body
 * @param array $options
 * @param array $info
 * @return string
 * @since PECL pecl_http >= 1.0.0
 **/
function http_request($method, $url, $body, $options, &$info){}

/**
 * Generate x-www-form-urlencoded resp. form-data encoded request body.
 * 
 * @param array $fields POST fields
 * @param array $files POST files
 * @return string
 * @since PECL pecl_http >= 1.0.0
 **/
function http_request_body_encode($fields, $files){}

/**
 * Check if a request method is registered (or available by default).
 * 
 * @param mixed $method request method name or ID
 * @return int
 * @since PECL pecl_http >= 0.10.0
 **/
function http_request_method_exists($method){}

/**
 * Get the literal string representation of a standard or registered
 * request method.
 * 
 * @param int $method request method ID
 * @return string
 * @since PECL pecl_http >= 0.10.0
 **/
function http_request_method_name($method){}

/**
 * Register a custom request method.
 * 
 * @param string $method the request method name to register
 * @return int
 * @since PECL pecl_http >= 0.10.0
 **/
function http_request_method_register($method){}

/**
 * Unregister a previously registered custom request method.
 * 
 * @param mixed $method The request method name or ID
 * @return bool
 * @since PECL pecl_http >= 0.10.0
 **/
function http_request_method_unregister($method){}

/**
 * Send the Content-Disposition.
 * 
 * @param string $filename the file name the Save as... dialog should
 *   display
 * @param bool $inline if set to and the user agent knows how to handle
 *   the content type, it will probably not cause the popup window to be
 *   shown
 * @return bool
 * @since PECL pecl_http >= 0.10.0
 **/
function http_send_content_disposition($filename, $inline){}

/**
 * Send the Content-Type of the sent entity.
 * 
 * @param string $content_type the desired content type
 *   (primary/secondary)
 * @return bool
 * @since PECL pecl_http >= 0.10.0
 **/
function http_send_content_type($content_type){}

/**
 * Sends raw data with support for (multiple) range requests.
 * 
 * @param string $data data to send
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_send_data($data){}

/**
 * Sends a file with support for (multiple) range requests.
 * 
 * This functions behaviour and further action is dependent on the
 * following s: http.send.not_found_404 http.log.not_found.
 * 
 * If the http.send.not_found_404 is enabled and the http.log.not_found
 * points to a writable file, a log message is written when the {@link
 * file} was not found.
 * 
 * @param string $file the file to send
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_send_file($file){}

/**
 * Send a Last-Modified header with a valid HTTP date.
 * 
 * @param int $timestamp a Unix timestamp, converted to a valid HTTP
 *   date; if omitted, the current time will be sent
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_send_last_modified($timestamp){}

/**
 * Send HTTP status code.
 * 
 * @param int $status HTTP status code (100-599)
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_send_status($status){}

/**
 * Sends an already opened stream with support for (multiple) range
 * requests.
 * 
 * @param resource $stream stream to read from (must be seekable)
 * @return bool
 * @since PECL pecl_http >= 0.1.0
 **/
function http_send_stream($stream){}

/**
 * Check for features that require external libraries.
 * 
 * See the feature support constants table for possible values for the
 * {@link feature} argument.
 * 
 * @param int $feature feature to probe for
 * @return int
 * @since PECL pecl_http >= 0.15.0
 **/
function http_support($feature){}

/**
 * Sets the throttle delay and send buffer size.
 * 
 * @param float $sec seconds to sleep after each chunk sent
 * @param int $bytes the chunk size in bytes
 * @return void
 * @since PECL pecl_http >= 0.10.0
 **/
function http_throttle($sec, $bytes){}

/**
 * Opens a connection to the Hyperwave server on host {@link hostname}.
 * The protocol used is HGCSP.
 * 
 * @param string $hostname The host name.
 * @param int $port If you do not pass a port number, 418 is used.
 * @return HW_API
 * @since PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN
 **/
function hwapi_hgcsp($hostname, $port){}

/**
 * Creates a new instance of hw_api_attribute with the given name and
 * value.
 * 
 * @param string $name The attribute name.
 * @param string $value The attribute value.
 * @return HW_API_Attribute
 * @since PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN
 **/
function hw_api_attribute($name, $value){}

/**
 * Creates a new content object from the string {@link content}.
 * 
 * @param string $content
 * @param string $mimetype The mimetype for the contents.
 * @return HW_API_Content
 * @since PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN
 **/
function hw_api_content($content, $mimetype){}

/**
 * Creates a new instance of the class hw_api_object.
 * 
 * @param array $parameter
 * @return hw_api_object
 * @since PHP 4, PHP 5 < 5.2.0, PECL hwapi SVN
 **/
function hw_api_object($parameter){}

/**
 * Converts an {@link object_array} into an object record. Multiple
 * attributes like 'Title' in different languages are treated properly.
 * 
 * @param array $object_array The array.
 * @return string
 * @since PHP 4
 **/
function hw_array2objrec($object_array){}

/**
 * @param int $link
 * @param int $objid
 * @param array $attributes
 * @return bool
 * @since PHP 4
 **/
function hw_changeobject($link, $objid, $attributes){}

/**
 * Returns the identifiers of the collection children.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_children($connection, $objectID){}

/**
 * Returns the object records of the collection children.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_childrenobj($connection, $objectID){}

/**
 * Closes down the connection to a Hyperwave server.
 * 
 * @param int $connection The connection identifier.
 * @return bool
 * @since PHP 4
 **/
function hw_close($connection){}

/**
 * Opens a connection to a Hyperwave server. You can have multiple
 * connections open at once.
 * 
 * @param string $host The server host name.
 * @param int $port The server port number.
 * @param string $username The Hyperwave user name. If omitted, no
 *   identification with the server will be done. It is similar to
 *   identify as user anonymous.
 * @param string $password The password for {@link username}. Keep in
 *   mind, that the password is not encrypted.
 * @return int
 * @since PHP 4
 **/
function hw_connect($host, $port, $username, $password){}

/**
 * @param int $link
 * @return void
 * @since PHP 4
 **/
function hw_connection_info($link){}

/**
 * Copies the objects with object ids as specified in the second
 * parameter to the collection with the id {@link destination id}.
 * 
 * @param int $connection The connection identifier.
 * @param array $object_id_array An array of object ids.
 * @param int $destination_id The target collection id.
 * @return int
 * @since PHP 4
 **/
function hw_cp($connection, $object_id_array, $destination_id){}

/**
 * Deletes the object with the given object id in the second parameter.
 * It will delete all instances of the object.
 * 
 * @param int $connection The connection identifier.
 * @param int $object_to_delete The object identifier.
 * @return bool
 * @since PHP 4
 **/
function hw_deleteobject($connection, $object_to_delete){}

/**
 * Returns an th object id of the document to which {@link anchorID}
 * belongs.
 * 
 * @param int $connection The connection identifier.
 * @param int $anchorID The anchor identifier.
 * @return int
 * @since PHP 4
 **/
function hw_docbyanchor($connection, $anchorID){}

/**
 * Returns an th object record of the document to which {@link anchorID}
 * belongs.
 * 
 * @param int $connection The connection identifier.
 * @param int $anchorID The anchor identifier.
 * @return string
 * @since PHP 4
 **/
function hw_docbyanchorobj($connection, $anchorID){}

/**
 * Returns the object record of the document.
 * 
 * For backward compatibility, {@link hw_documentattributes} is also
 * accepted. This is deprecated, however.
 * 
 * @param int $hw_document The document identifier.
 * @return string
 * @since PHP 4
 **/
function hw_document_attributes($hw_document){}

/**
 * Returns the BODY tag of the document. If the document is an HTML
 * document the BODY tag should be printed before the document.
 * 
 * For backward compatibility, {@link hw_documentbodytag} is also
 * accepted. This is deprecated, however.
 * 
 * @param int $hw_document The document identifier.
 * @param string $prefix
 * @return string
 * @since PHP 4
 **/
function hw_document_bodytag($hw_document, $prefix){}

/**
 * Gets the content of the document.
 * 
 * @param int $hw_document The document identifier.
 * @return string
 * @since PHP 4
 **/
function hw_document_content($hw_document){}

/**
 * Sets or replaces the content of the document. If the document is an
 * HTML document the content is everything after the BODY tag.
 * Information from the HEAD and BODY tag is in the stored in the object
 * record. If you provide this information in the content of the document
 * too, the Hyperwave server will change the object record accordingly
 * when the document is inserted. Probably not a very good idea. If this
 * functions fails the document will retain its old content.
 * 
 * @param int $hw_document The document identifier.
 * @param string $content
 * @return bool
 * @since PHP 4
 **/
function hw_document_setcontent($hw_document, $content){}

/**
 * Gets the size of the document.
 * 
 * For backward compatibility, {@link hw_documentsize} is also accepted.
 * This is deprecated, however.
 * 
 * @param int $hw_document The document identifier.
 * @return int
 * @since PHP 4
 **/
function hw_document_size($hw_document){}

/**
 * @param int $link
 * @param int $id
 * @param int $msgid
 * @return string
 * @since PHP 4
 **/
function hw_dummy($link, $id, $msgid){}

/**
 * Uploads the text document to the server. The object record of the
 * document may not be modified while the document is edited.
 * 
 * This function will only works for pure text documents. It will not
 * open a special data connection and therefore blocks the control
 * connection during the transfer.
 * 
 * @param int $connection The connection identifier.
 * @param int $hw_document The document identifier.
 * @return bool
 * @since PHP 4
 **/
function hw_edittext($connection, $hw_document){}

/**
 * Returns the last error number, for the last command.
 * 
 * @param int $connection The connection identifier.
 * @return int
 * @since PHP 4
 **/
function hw_error($connection){}

/**
 * Returns a string containing the last error message related to the last
 * command.
 * 
 * @param int $connection The connection identifier.
 * @return string
 * @since PHP 4
 **/
function hw_errormsg($connection){}

/**
 * Frees the memory occupied by the Hyperwave document.
 * 
 * @param int $hw_document The document identifier.
 * @return bool
 * @since PHP 4
 **/
function hw_free_document($hw_document){}

/**
 * Returns an array of object ids with anchors of the specified document.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The document object id.
 * @return array
 * @since PHP 4
 **/
function hw_getanchors($connection, $objectID){}

/**
 * Returns records with anchors of the document with object ID {@link
 * objectID}.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getanchorsobj($connection, $objectID){}

/**
 * Returns the object record for the object with ID {@link objectID}. It
 * will also lock the object, so other users cannot access it until it is
 * unlocked.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return string
 * @since PHP 4
 **/
function hw_getandlock($connection, $objectID){}

/**
 * Returns object ids. Each object ID belongs to a child collection of
 * the collection with ID {@link objectID}. The function will not return
 * child documents.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getchildcoll($connection, $objectID){}

/**
 * Returns object records. Each object records belongs to a child
 * collection of the collection with ID {@link objectID}. The function
 * will not return child documents.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getchildcollobj($connection, $objectID){}

/**
 * Returns array of object ids for child documents of a collection.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getchilddoccoll($connection, $objectID){}

/**
 * Returns an array of object records for child documents of a
 * collection.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getchilddoccollobj($connection, $objectID){}

/**
 * Gets an object record. If the second parameter is an array of integer
 * the function will
 * 
 * @param int $connection The connection identifier.
 * @param mixed $objectID The object identifier, or an array of
 *   identifiers.
 * @param string $query The query string has the following syntax:
 *   
 *   <expr> ::= "(" <expr> ")" | "!" &lt;expr> | /* NOT * / <expr> "||"
 *   <expr> | /* OR * / <expr> "&amp;&amp;" <expr> | /* AND * /
 *   <attribute> <operator> <value>
 *   
 *   <attribute> ::= /* any attribute name (Title, Author, DocumentType
 *   ...) * /
 *   
 *   <operator> ::= "=" | /* equal * / "<" | /* less than (string
 *   compare) * / ">" | /* greater than (string compare) * / "~" /*
 *   regular expression matching * /
 *   
 *   The query allows to further select certain objects from the list of
 *   given objects. Unlike the other query functions, this query may use
 *   not indexed attributes. How many object records are returned depends
 *   on the query and if access to the object is allowed.
 * @return mixed
 * @since PHP 4
 **/
function hw_getobject($connection, $objectID, $query){}

/**
 * Searches for objects on the whole server and returns an array of
 * object ids.
 * 
 * @param int $connection The connection identifier.
 * @param string $query The query will only work with indexed
 *   attributes.
 * @param int $max_hits The maximum number of matches is limited to
 *   {@link max_hits}. If {@link max_hits} is set to -1 the maximum
 *   number of matches is unlimited.
 * @return array
 * @since PHP 4
 **/
function hw_getobjectbyquery($connection, $query, $max_hits){}

/**
 * Searches for objects in collection with ID {@link objectID} and
 * returns an array of object ids.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The collection id.
 * @param string $query The query will only work with indexed
 *   attributes.
 * @param int $max_hits The maximum number of matches is limited to
 *   {@link max_hits}. If {@link max_hits} is set to -1 the maximum
 *   number of matches is unlimited.
 * @return array
 * @since PHP 4
 **/
function hw_getobjectbyquerycoll($connection, $objectID, $query, $max_hits){}

/**
 * Searches for objects in collection with ID {@link objectID} and
 * returns an array of object records.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The collection id.
 * @param string $query The query will only work with indexed
 *   attributes.
 * @param int $max_hits The maximum number of matches is limited to
 *   {@link max_hits}. If {@link max_hits} is set to -1 the maximum
 *   number of matches is unlimited.
 * @return array
 * @since PHP 4
 **/
function hw_getobjectbyquerycollobj($connection, $objectID, $query, $max_hits){}

/**
 * Searches for objects on the whole server and returns an array of
 * object records.
 * 
 * @param int $connection The connection identifier.
 * @param string $query The query will only work with indexed
 *   attributes.
 * @param int $max_hits The maximum number of matches is limited to
 *   {@link max_hits}. If {@link max_hits} is set to -1 the maximum
 *   number of matches is unlimited.
 * @return array
 * @since PHP 4
 **/
function hw_getobjectbyqueryobj($connection, $query, $max_hits){}

/**
 * Returns the object identifiers of the parents of an object.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getparents($connection, $objectID){}

/**
 * Returns object records and statistical information about the object
 * records. Each object record belongs to a parent of the object with ID
 * {@link objectID}.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return array
 * @since PHP 4
 **/
function hw_getparentsobj($connection, $objectID){}

/**
 * @param int $link
 * @param int $rootid
 * @param int $sourceid
 * @param int $destid
 * @return string
 * @since PHP 4
 **/
function hw_getrellink($link, $rootid, $sourceid, $destid){}

/**
 * Gets a remote document.
 * 
 * Remote documents in Hyperwave notation are documents retrieved from an
 * external source. Common remote documents are for example external web
 * pages or queries in a database.
 * 
 * In order to be able to access external sources through remote
 * documents Hyperwave introduces the HGI (Hyperwave Gateway Interface)
 * which is similar to the CGI. Currently, only ftp, http-servers and
 * some databases can be accessed by the HGI.
 * 
 * Calling {@link hw_getremote} returns the document from the external
 * source. If you want to use this function you should be very familiar
 * with HGIs. You should also consider to use PHP instead of Hyperwave to
 * access external sources. Adding database support by a Hyperwave
 * gateway should be more difficult than doing it in PHP.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @return int
 * @since PHP 4
 **/
function hw_getremote($connection, $objectID){}

/**
 * Returns the children of a remote document. Children of a remote
 * document are remote documents itself. This makes sense if a database
 * query has to be narrowed and is explained in Hyperwave Programmers'
 * Guide.
 * 
 * If you want to use this function you should be very familiar with
 * HGIs. You should also consider to use PHP instead of Hyperwave to
 * access external sources. Adding database support by a Hyperwave
 * gateway should be more difficult than doing it in PHP.
 * 
 * @param int $connection The connection identifier.
 * @param string $object_record The object record.
 * @return mixed
 * @since PHP 4
 **/
function hw_getremotechildren($connection, $object_record){}

/**
 * Gets the object records of all anchors pointing to the object with ID
 * {@link objectID}.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier. The object can either be
 *   a document or an anchor of type destination.
 * @return array
 * @since PHP 4
 **/
function hw_getsrcbydestobj($connection, $objectID){}

/**
 * Returns the document with object ID {@link objectID}. If the document
 * has anchors which can be inserted, they will be inserted already.
 * 
 * This function will only work for pure text documents. It will not open
 * a special data connection and therefore blocks the control connection
 * during the transfer.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @param mixed $rootIDprefix The optional parameter {@link
 *   rootID/prefix} can be a string or an integer. If it is an integer it
 *   determines how links are inserted into the document. The default is
 *   0 and will result in links that are constructed from the name of the
 *   link's destination object. This is useful for web applications. If a
 *   link points to an object with name 'internet_movie' the HTML link
 *   will be <A href="/internet_movie">. The actual location of the
 *   source and destination object in the document hierarchy is
 *   disregarded. You will have to set up your web browser, to rewrite
 *   that URL to for example '/my_script.php/internet_movie'.
 *   'my_script.php' will have to evaluate $PATH_INFO and retrieve the
 *   document. All links will have the prefix '/my_script.php/'. If you
 *   do not want this you can set the optional parameter {@link
 *   rootID/prefix} to any prefix which is used instead. Is this case it
 *   has to be a string. If {@link rootID/prefix} is an integer and
 *   unequal to 0 the link is constructed from all the names starting at
 *   the object with the id {@link rootID/prefix} separated by a slash
 *   relative to the current object. If for example the above document
 *   'internet_movie' is located at 'a-b-c-internet_movie' with '-' being
 *   the separator between hierarchy levels on the Hyperwave server and
 *   the source document is located at 'a-b-d-source' the resulting HTML
 *   link would be: <A HREF="../c/internet_movie">. This is useful if you
 *   want to download the whole server content onto disk and map the
 *   document hierarchy onto the file system.
 * @return int
 * @since PHP 4
 **/
function hw_gettext($connection, $objectID, $rootIDprefix){}

/**
 * Returns the username of the connection.
 * 
 * @param int $connection The connection identifier.
 * @return string
 * @since PHP 4
 **/
function hw_getusername($connection){}

/**
 * Identifies as user with {@link username} and {@link password}.
 * Identification is only valid for the current session. I do not think
 * this function will be needed very often. In most cases it will be
 * easier to identify with the opening of the connection.
 * 
 * @param int $link The connection identifier.
 * @param string $username The username.
 * @param string $password The password.
 * @return string
 * @since PHP 4
 **/
function hw_identify($link, $username, $password){}

/**
 * Checks whether a set of objects (documents or collections) specified
 * by the {@link object_id_array} is part of the collections listed in
 * {@link collection_id_array}.
 * 
 * @param int $connection The connection identifier.
 * @param array $object_id_array An array of object ids.
 * @param array $collection_id_array An array of collection ids.
 * @param int $return_collections When set to 0, the subset of object
 *   ids that is part of the collections (i.e., the documents or
 *   collections that are children of one or more collections of
 *   collection ids or their subcollections, recursively) is returned as
 *   an array. When set to 1, the set of collections that have one or
 *   more objects of this subset as children are returned as an array.
 *   This option allows a client to, e.g., highlight the part of the
 *   collection hierarchy that contains the matches of a previous query,
 *   in a graphical overview.
 * @return array
 * @since PHP 4
 **/
function hw_incollections($connection, $object_id_array, $collection_id_array, $return_collections){}

/**
 * Returns information about the current connection.
 * 
 * @param int $connection The connection identifier.
 * @return string
 * @since PHP 4
 **/
function hw_info($connection){}

/**
 * Inserts a new collection with attributes as in {@link object_array}
 * into collection with object ID {@link objectID}.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID
 * @param array $object_array
 * @return int
 * @since PHP 4
 **/
function hw_inscoll($connection, $objectID, $object_array){}

/**
 * Inserts a new document with attributes as in {@link object_record}
 * into acollection.
 * 
 * If you want to insert a general document of any kind use {@link
 * hw_insertdocument} instead.
 * 
 * @param resource $connection The connection identifier.
 * @param int $parentID The collection id.
 * @param string $object_record Object attributes.
 * @param string $text If provided, this ascii text will be inserted
 *   too.
 * @return int
 * @since PHP 4
 **/
function hw_insdoc($connection, $parentID, $object_record, $text){}

/**
 * @param int $hwdoc
 * @param array $anchorecs
 * @param array $dest
 * @param array $urlprefixes
 * @return bool
 * @since PHP 4 >= 4.0.4
 **/
function hw_insertanchors($hwdoc, $anchorecs, $dest, $urlprefixes){}

/**
 * Uploads a document into the given collection.
 * 
 * The document has to be created before with {@link hw_new_document}.
 * Make sure that the object record of the new document contains at least
 * the attributes: Type, DocumentType, Title and Name. Possibly you also
 * want to set the MimeType.
 * 
 * @param int $connection The connection identifier.
 * @param int $parent_id The collection identifier.
 * @param int $hw_document The document identifier.
 * @return int
 * @since PHP 4
 **/
function hw_insertdocument($connection, $parent_id, $hw_document){}

/**
 * Inserts an object into the server.
 * 
 * Note: If you want to insert an Anchor, the attribute Position has
 * always been set either to a start/end value or to 'invisible'.
 * Invisible positions are needed if the annotation has no corresponding
 * link in the annotation text.
 * 
 * @param int $connection The connection identifier.
 * @param string $object_rec The object can be any valid hyperwave
 *   object.
 * @param string $parameter See the HG-CSP documentation for a detailed
 *   information on how the parameters have to be.
 * @return int
 * @since PHP 4
 **/
function hw_insertobject($connection, $object_rec, $parameter){}

/**
 * Maps a global object id on any hyperwave server, even those you did
 * not connect to with {@link hw_connect}, onto a virtual object id.
 * 
 * This virtual object id can then be used as any other object id, e.g.
 * to obtain the object record with {@link hw_getobject}.
 * 
 * Note: In order to use this function you will have to set the
 * F_DISTRIBUTED flag, which can currently only be set at compile time in
 * hg_comm.c. It is not set by default. Read the comment at the beginning
 * of hg_comm.c
 * 
 * @param int $connection The connection identifier.
 * @param int $server_id The server id is the first part of the global
 *   object id (GOid) of the object which is actually the IP number as an
 *   integer.
 * @param int $object_id The object identifier.
 * @return int
 * @since PHP 4
 **/
function hw_mapid($connection, $server_id, $object_id){}

/**
 * This command allows to remove, add, or modify individual attributes of
 * an object record. The object is specified by the Object ID {@link
 * object_to_change}. In order to modify an attribute one will have to
 * remove the old one and add a new one. {@link hw_modifyobject} will
 * always remove the attributes before it adds attributes unless the
 * value of the attribute to remove is not a string or array.
 * 
 * The keys of both arrays are the attributes name. The value of each
 * array element can either be an array, a string or anything else. If it
 * is an array each attribute value is constructed by the key of each
 * element plus a colon and the value of each element. If it is a string
 * it is taken as the attribute value. An empty string will result in a
 * complete removal of that attribute. If the value is neither a string
 * nor an array but something else, e.g. an integer, no operation at all
 * will be performed on the attribute. This is necessary if you want to
 * add a completely new attribute not just a new value for an existing
 * attribute. If the remove array contained an empty string for that
 * attribute, the attribute would be tried to be removed which would fail
 * since it doesn't exist. The following addition of a new value for that
 * attribute would also fail. Setting the value for that attribute to
 * e.g. 0 would not even try to remove it and the addition will work.
 * 
 * If you would like to change the attribute 'Name' with the current
 * value 'books' into 'articles' you will have to create two arrays and
 * call {@link hw_modifyobject}. modifying an attribute
 * 
 * <?php // $connect is an existing connection to the Hyperwave server //
 * $objid is the ID of the object to modify $remarr = array("Name" =>
 * "books"); $addarr = array("Name" => "articles");
 * $hw_modifyobject($connect, $objid, $remarr, $addarr); ?>
 * 
 * In order to delete/add a name=value pair from/to the object record
 * just pass the remove/add array and set the last/third parameter to an
 * empty array. If the attribute is the first one with that name to add,
 * set attribute value in the remove array to an integer. adding a
 * completely new attribute
 * 
 * <?php // $connect is an existing connection to the Hyperwave server //
 * $objid is the ID of the object to modify $remarr = array("Name" => 0);
 * $addarr = array("Name" => "articles"); $hw_modifyobject($connect,
 * $objid, $remarr, $addarr); ?>
 * 
 * Multilingual attributes, e.g. 'Title', can be modified in two ways.
 * Either by providing the attributes value in its native form
 * 'language':'title' or by providing an array with elements for each
 * language as described above. The above example would than be:
 * modifying Title attribute
 * 
 * <?php $remarr = array("Title" => "en:Books"); $addarr = array("Title"
 * => "en:Articles"); $hw_modifyobject($connect, $objid, $remarr,
 * $addarr); ?>
 * 
 * or modifying Title attribute
 * 
 * <?php $remarr = array("Title" => array("en" => "Books")); $addarr =
 * array("Title" => array("en" => "Articles", "ge"=>"Artikel"));
 * $hw_modifyobject($connect, $objid, $remarr, $addarr); ?>
 * 
 * This removes the English title 'Books' and adds the English title
 * 'Articles' and the German title 'Artikel'. removing attribute
 * 
 * <?php $remarr = array("Title" => ""); $addarr = array("Title" =>
 * "en:Articles"); $hw_modifyobject($connect, $objid, $remarr, $addarr);
 * ?>
 * 
 * This will remove all attributes with the name 'Title' and adds a new
 * 'Title' attribute. This comes in handy if you want to remove
 * attributes recursively. If you need to delete all attributes with a
 * certain name you will have to pass an empty string as the attribute
 * value. Only the attributes 'Title', 'Description' and 'Keyword' will
 * properly handle the language prefix. If those attributes don't carry a
 * language prefix, the prefix 'xx' will be assigned. The 'Name'
 * attribute is somewhat special. In some cases it cannot be complete
 * removed. You will get an error message 'Change of base attribute' (not
 * clear when this happens). Therefore you will always have to add a new
 * Name first and than remove the old one. You may not surround this
 * function by calls to {@link hw_getandlock} and {@link hw_unlock}.
 * {@link hw_modifyobject} does this internally.
 * 
 * @param int $connection The connection identifier.
 * @param int $object_to_change The object to be changed.
 * @param array $remove An array of attributes to remove.
 * @param array $add An array of attributes to add.
 * @param int $mode The last parameter determines if the modification
 *   is performed recursively. 1 means recursive modification. If some of
 *   the objects cannot be modified they will be skipped without notice.
 *   {@link hw_error} may not indicate an error though some of the
 *   objects could not be modified.
 * @return bool
 * @since PHP 4
 **/
function hw_modifyobject($connection, $object_to_change, $remove, $add, $mode){}

/**
 * Moves the specified objects from a collection to another.
 * 
 * @param int $connection The connection identifier.
 * @param array $object_id_array An array of object ids.
 * @param int $source_id The source collection id.
 * @param int $destination_id The target collection id. If set to 0 the
 *   objects will be unlinked from the source collection. If this is the
 *   last instance of that object it will be deleted. If you want to
 *   delete all instances at once, use {@link hw_deleteobject}.
 * @return int
 * @since PHP 4
 **/
function hw_mv($connection, $object_id_array, $source_id, $destination_id){}

/**
 * Returns a new Hyperwave document with the given document data and
 * object record.
 * 
 * This function does not insert the document into the Hyperwave server.
 * 
 * @param string $object_record The object record.
 * @param string $document_data The document data.
 * @param int $document_size The document size. Must be the length of
 *   {@link document_data}.
 * @return int
 * @since PHP 4
 **/
function hw_new_document($object_record, $document_data, $document_size){}

/**
 * Converts an {@link object_record} into an object array.
 * 
 * @param string $object_record The object record.
 * @param array $format An associative array with the attribute name as
 *   its key and the value being one of HW_ATTR_LANG or HW_ATTR_NONE.
 * @return array
 * @since PHP 4
 **/
function hw_objrec2array($object_record, $format){}

/**
 * Prints the document without the BODY tag.
 * 
 * For backward compatibility, {@link hw_outputdocument} is also
 * accepted. This is deprecated, however.
 * 
 * @param int $hw_document The document identifier.
 * @return bool
 * @since PHP 4
 **/
function hw_output_document($hw_document){}

/**
 * Opens a persistent connection to a Hyperwave server. You can have
 * multiple persistent connections open at once.
 * 
 * @param string $host The server host name.
 * @param int $port The server port number.
 * @param string $username The Hyperwave user name. If omitted, no
 *   identification with the server will be done. It is similar to
 *   identify as user anonymous.
 * @param string $password The password for {@link username}. Keep in
 *   mind, that the password is not encrypted.
 * @return int
 * @since PHP 4
 **/
function hw_pconnect($host, $port, $username, $password){}

/**
 * Gets the Hyperwave document with the given object ID. If the document
 * has anchors which can be inserted, they will have been inserted
 * already.
 * 
 * The document will be transferred via a special data connection which
 * does not block the control connection.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The object identifier.
 * @param array $url_prefixes
 * @return int
 * @since PHP 4
 **/
function hw_pipedocument($connection, $objectID, $url_prefixes){}

/**
 * Returns the object ID of the hyperroot collection. Currently this is
 * always 0. The child collection of the hyperroot is the root collection
 * of the connected server.
 * 
 * @return int
 * @since PHP 4
 **/
function hw_root(){}

/**
 * @param int $link
 * @param int $rootid
 * @return int
 * @since PHP 4
 **/
function hw_setlinkroot($link, $rootid){}

/**
 * @param int $link
 * @return string
 * @since PHP 4
 **/
function hw_stat($link){}

/**
 * Unlocks a document, so other users regain access.
 * 
 * @param int $connection The connection identifier.
 * @param int $objectID The document object identifier.
 * @return bool
 * @since PHP 4
 **/
function hw_unlock($connection, $objectID){}

/**
 * Gets the list of currently logged in users.
 * 
 * @param int $connection The connection identifier.
 * @return array
 * @since PHP 4
 **/
function hw_who($connection){}

/**
 * {@link hypot} returns the length of the hypotenuse of a right-angle
 * triangle with sides of length {@link x} and {@link y}, or the distance
 * of the point ({@link x}, {@link y}) from the origin. This is
 * equivalent to sqrt(x*x + y*y).
 * 
 * @param float $x Length of first side
 * @param float $y Length of second side
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function hypot($x, $y){}

/**
 * PHP 4 uses {@link server}, {@link dba_user_name} and {@link
 * dba_user_password} instead of {@link service_handle} parameter.
 * 
 * @param resource $service_handle
 * @param string $user_name
 * @param string $password
 * @param string $first_name
 * @param string $middle_name
 * @param string $last_name
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ibase_add_user($service_handle, $user_name, $password, $first_name, $middle_name, $last_name){}

/**
 * This function returns the number of rows that were affected by the
 * previous query (INSERT, UPDATE or DELETE) that was executed from
 * within the specified transaction context.
 * 
 * @param resource $link_identifier A transaction context. If {@link
 *   link_identifier} is a connection resource, its default transaction
 *   is used.
 * @return int
 * @since PHP 5
 **/
function ibase_affected_rows($link_identifier){}

/**
 * @param resource $service_handle
 * @param string $source_db
 * @param string $dest_file
 * @param int $options
 * @param bool $verbose
 * @return mixed
 * @since PHP 5
 **/
function ibase_backup($service_handle, $source_db, $dest_file, $options, $verbose){}

/**
 * {@link ibase_blob_add} adds data into a blob created with {@link
 * ibase_blob_create}.
 * 
 * @param resource $blob_handle A blob handle opened with {@link
 *   ibase_blob_create}.
 * @param string $data The data to be added.
 * @return void
 * @since PHP 4, PHP 5
 **/
function ibase_blob_add($blob_handle, $data){}

/**
 * This function will discard a BLOB if it has not yet been closed by
 * {@link ibase_blob_close}.
 * 
 * @param resource $blob_handle A BLOB handle opened with {@link
 *   ibase_blob_create}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_blob_cancel($blob_handle){}

/**
 * This function closes a BLOB that has either been opened for reading by
 * {@link ibase_blob_open} or has been opened for writing by {@link
 * ibase_blob_create}.
 * 
 * @param resource $blob_handle A BLOB handle opened with {@link
 *   ibase_blob_create} or {@link ibase_blob_open}.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function ibase_blob_close($blob_handle){}

/**
 * {@link ibase_blob_create} creates a new BLOB for filling with data.
 * 
 * @param resource $link_identifier An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_blob_create($link_identifier){}

/**
 * This function opens a BLOB for reading and sends its contents directly
 * to standard output (the browser, in most cases).
 * 
 * @param string $blob_id An InterBase link identifier. If omitted, the
 *   last opened link is assumed.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_blob_echo($blob_id){}

/**
 * This function returns at most {@link len} bytes from a BLOB that has
 * been opened for reading by {@link ibase_blob_open}.
 * 
 * @param resource $blob_handle A BLOB handle opened with {@link
 *   ibase_blob_open}.
 * @param int $len Size of returned data.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ibase_blob_get($blob_handle, $len){}

/**
 * This function creates a BLOB, reads an entire file into it, closes it
 * and returns the assigned BLOB id.
 * 
 * @param resource $link_identifier An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @param resource $file_handle The file handle is a handle returned by
 *   {@link fopen}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ibase_blob_import($link_identifier, $file_handle){}

/**
 * Returns the BLOB length and other useful information.
 * 
 * @param resource $link_identifier An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @param string $blob_id A BLOB id.
 * @return array
 * @since PHP 4, PHP 5
 **/
function ibase_blob_info($link_identifier, $blob_id){}

/**
 * Opens an existing BLOB for reading.
 * 
 * @param resource $link_identifier An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @param string $blob_id A BLOB id.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_blob_open($link_identifier, $blob_id){}

/**
 * Closes the link to an InterBase database that's associated with a
 * connection id returned from {@link ibase_connect}. Default transaction
 * on link is committed, other transactions are rolled back.
 * 
 * @param resource $connection_id An InterBase link identifier returned
 *   from {@link ibase_connect}. If omitted, the last opened link is
 *   assumed.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_close($connection_id){}

/**
 * Commits a transaction.
 * 
 * @param resource $link_or_trans_identifier If called without an
 *   argument, this function commits the default transaction of the
 *   default link. If the argument is a connection identifier, the
 *   default transaction of the corresponding connection will be
 *   committed. If the argument is a transaction identifier, the
 *   corresponding transaction will be committed.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_commit($link_or_trans_identifier){}

/**
 * Commits a transaction without closing it.
 * 
 * @param resource $link_or_trans_identifier If called without an
 *   argument, this function commits the default transaction of the
 *   default link. If the argument is a connection identifier, the
 *   default transaction of the corresponding connection will be
 *   committed. If the argument is a transaction identifier, the
 *   corresponding transaction will be committed. The transaction context
 *   will be retained, so statements executed from within this
 *   transaction will not be invalidated.
 * @return bool
 * @since PHP 5
 **/
function ibase_commit_ret($link_or_trans_identifier){}

/**
 * Establishes a connection to an InterBase server.
 * 
 * In case a second call is made to {@link ibase_connect} with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned. The link to
 * the server will be closed as soon as the execution of the script ends,
 * unless it's closed earlier by explicitly calling {@link ibase_close}.
 * 
 * @param string $database The {@link database} argument has to be a
 *   valid path to database file on the server it resides on. If the
 *   server is not local, it must be prefixed with either 'hostname:'
 *   (TCP/IP), '//hostname/' (NetBEUI) or 'hostname@' (IPX/SPX),
 *   depending on the connection protocol used.
 * @param string $username The user name. Can be set with the
 *   ibase.default_user directive.
 * @param string $password The password for {@link username}. Can be
 *   set with the ibase.default_password directive.
 * @param string $charset {@link charset} is the default character set
 *   for a database.
 * @param int $buffers {@link buffers} is the number of database
 *   buffers to allocate for the server-side cache. If 0 or omitted,
 *   server chooses its own default.
 * @param int $dialect {@link dialect} selects the default SQL dialect
 *   for any statement executed within a connection, and it defaults to
 *   the highest one supported by client libraries. Functional only with
 *   InterBase 6 and up.
 * @param string $role Functional only with InterBase 5 and up.
 * @param int $sync
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_connect($database, $username, $password, $charset, $buffers, $dialect, $role, $sync){}

/**
 * @param resource $service_handle
 * @param string $db
 * @param int $action
 * @param int $argument
 * @return string
 * @since PHP 5
 **/
function ibase_db_info($service_handle, $db, $action, $argument){}

/**
 * PHP 4 uses {@link server}, {@link dba_user_name} and {@link
 * dba_user_password} instead of {@link service_handle} parameter.
 * 
 * @param resource $service_handle
 * @param string $user_name
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ibase_delete_user($service_handle, $user_name){}

/**
 * This functions drops a database that was opened by either {@link
 * ibase_connect} or {@link ibase_pconnect}. The database is closed and
 * deleted from the server.
 * 
 * @param resource $connection An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @return bool
 * @since PHP 5
 **/
function ibase_drop_db($connection){}

/**
 * Returns the error code that resulted from the most recent InterBase
 * function call.
 * 
 * @return int
 * @since PHP 5
 **/
function ibase_errcode(){}

/**
 * @return string
 * @since PHP 4, PHP 5
 **/
function ibase_errmsg(){}

/**
 * Execute a query prepared by {@link ibase_prepare}.
 * 
 * This is a lot more effective than using {@link ibase_query} if you are
 * repeating a same kind of query several times with only some parameters
 * changing.
 * 
 * @param resource $query An InterBase query prepared by {@link
 *   ibase_prepare}.
 * @param mixed $bind_arg
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_execute($query, $bind_arg){}

/**
 * Fetch a result row from a query as an associative array.
 * 
 * {@link ibase_fetch_assoc} fetches one row of data from the {@link
 * result}. If two or more columns of the result have the same field
 * names, the last column will take precedence. To access the other
 * column(s) of the same name, you either need to access the result with
 * numeric indices by using {@link ibase_fetch_row} or use alias names in
 * your query.
 * 
 * @param resource $result The result handle.
 * @param int $fetch_flag {@link fetch_flag} is a combination of the
 *   constants IBASE_TEXT and IBASE_UNIXTIME ORed together. Passing
 *   IBASE_TEXT will cause this function to return BLOB contents instead
 *   of BLOB ids. Passing IBASE_UNIXTIME will cause this function to
 *   return date/time values as Unix timestamps instead of as formatted
 *   strings.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ibase_fetch_assoc($result, $fetch_flag){}

/**
 * Fetches a row as a pseudo-object from a given result identifier.
 * 
 * Subsequent calls to {@link ibase_fetch_object} return the next row in
 * the result set.
 * 
 * @param resource $result_id An InterBase result identifier obtained
 *   either by {@link ibase_query} or {@link ibase_execute}.
 * @param int $fetch_flag {@link fetch_flag} is a combination of the
 *   constants IBASE_TEXT and IBASE_UNIXTIME ORed together. Passing
 *   IBASE_TEXT will cause this function to return BLOB contents instead
 *   of BLOB ids. Passing IBASE_UNIXTIME will cause this function to
 *   return date/time values as Unix timestamps instead of as formatted
 *   strings.
 * @return object
 * @since PHP 4, PHP 5
 **/
function ibase_fetch_object($result_id, $fetch_flag){}

/**
 * {@link ibase_fetch_row} fetches one row of data from the given result
 * set.
 * 
 * Subsequent calls to {@link ibase_fetch_row} return the next row in the
 * result set, or if there are no more rows.
 * 
 * @param resource $result_identifier An InterBase result identifier.
 * @param int $fetch_flag {@link fetch_flag} is a combination of the
 *   constants IBASE_TEXT and IBASE_UNIXTIME ORed together. Passing
 *   IBASE_TEXT will cause this function to return BLOB contents instead
 *   of BLOB ids. Passing IBASE_UNIXTIME will cause this function to
 *   return date/time values as Unix timestamps instead of as formatted
 *   strings.
 * @return array
 * @since PHP 4, PHP 5
 **/
function ibase_fetch_row($result_identifier, $fetch_flag){}

/**
 * Returns an array with information about a field after a select query
 * has been run.
 * 
 * @param resource $result An InterBase result identifier.
 * @param int $field_number Field offset.
 * @return array
 * @since PHP 4, PHP 5
 **/
function ibase_field_info($result, $field_number){}

/**
 * This function causes the registered event handler specified by {@link
 * event} to be cancelled. The callback function will no longer be called
 * for the events it was registered to handle.
 * 
 * @param resource $event An event resource, created by {@link
 *   ibase_set_event_handler}.
 * @return bool
 * @since PHP 5
 **/
function ibase_free_event_handler($event){}

/**
 * Frees a prepared query.
 * 
 * @param resource $query A query prepared with {@link ibase_prepare}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_free_query($query){}

/**
 * Frees a result set.
 * 
 * @param resource $result_identifier A result set created by {@link
 *   ibase_query} or {@link ibase_execute}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_free_result($result_identifier){}

/**
 * @param string $generator
 * @param int $increment
 * @param resource $link_identifier
 * @return mixed
 * @since PHP 5
 **/
function ibase_gen_id($generator, $increment, $link_identifier){}

/**
 * @param resource $service_handle
 * @param string $db
 * @param int $action
 * @param int $argument
 * @return bool
 * @since PHP 5
 **/
function ibase_maintain_db($service_handle, $db, $action, $argument){}

/**
 * PHP 4 uses {@link server}, {@link dba_user_name} and {@link
 * dba_user_password} instead of {@link service_handle} parameter.
 * 
 * @param resource $service_handle
 * @param string $user_name
 * @param string $password
 * @param string $first_name
 * @param string $middle_name
 * @param string $last_name
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ibase_modify_user($service_handle, $user_name, $password, $first_name, $middle_name, $last_name){}

/**
 * This function assigns a name to a result set. This name can be used
 * later in UPDATE|DELETE ... WHERE CURRENT OF {@link name} statements.
 * 
 * @param resource $result An InterBase result set.
 * @param string $name The name to be assigned.
 * @return bool
 * @since PHP 5
 **/
function ibase_name_result($result, $name){}

/**
 * Get the number of fields in a result set.
 * 
 * @param resource $result_id An InterBase result identifier.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ibase_num_fields($result_id){}

/**
 * This function returns the number of parameters in the prepared query
 * specified by {@link query}. This is the number of binding arguments
 * that must be present when calling {@link ibase_execute}.
 * 
 * @param resource $query The prepared query handle.
 * @return int
 * @since PHP 5
 **/
function ibase_num_params($query){}

/**
 * Returns an array with information about a parameter after a query has
 * been prepared.
 * 
 * @param resource $query An InterBase prepared query handle.
 * @param int $param_number Parameter offset.
 * @return array
 * @since PHP 5
 **/
function ibase_param_info($query, $param_number){}

/**
 * Opens a persistent connection to an InterBase database.
 * 
 * {@link ibase_pconnect} acts very much like {@link ibase_connect} with
 * two major differences.
 * 
 * First, when connecting, the function will first try to find a
 * (persistent) link that's already opened with the same parameters. If
 * one is found, an identifier for it will be returned instead of opening
 * a new connection.
 * 
 * Second, the connection to the InterBase server will not be closed when
 * the execution of the script ends. Instead, the link will remain open
 * for future use ({@link ibase_close} will not close links established
 * by {@link ibase_pconnect}). This type of link is therefore called
 * 'persistent'.
 * 
 * @param string $database The {@link database} argument has to be a
 *   valid path to database file on the server it resides on. If the
 *   server is not local, it must be prefixed with either 'hostname:'
 *   (TCP/IP), '//hostname/' (NetBEUI) or 'hostname@' (IPX/SPX),
 *   depending on the connection protocol used.
 * @param string $username The user name. Can be set with the
 *   ibase.default_user directive.
 * @param string $password The password for {@link username}. Can be
 *   set with the ibase.default_password directive.
 * @param string $charset {@link charset} is the default character set
 *   for a database.
 * @param int $buffers {@link buffers} is the number of database
 *   buffers to allocate for the server-side cache. If 0 or omitted,
 *   server chooses its own default.
 * @param int $dialect {@link dialect} selects the default SQL dialect
 *   for any statement executed within a connection, and it defaults to
 *   the highest one supported by client libraries. Functional only with
 *   InterBase 6 and up.
 * @param string $role Functional only with InterBase 5 and up.
 * @param int $sync
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_pconnect($database, $username, $password, $charset, $buffers, $dialect, $role, $sync){}

/**
 * @param string $query An InterBase query.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_prepare($query){}

/**
 * @param resource $link_identifier An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @param string $query An InterBase query.
 * @param int $bind_args
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_query($link_identifier, $query, $bind_args){}

/**
 * @param resource $service_handle
 * @param string $source_file
 * @param string $dest_db
 * @param int $options
 * @param bool $verbose
 * @return mixed
 * @since PHP 5
 **/
function ibase_restore($service_handle, $source_file, $dest_db, $options, $verbose){}

/**
 * Rolls back a transaction.
 * 
 * @param resource $link_or_trans_identifier If called without an
 *   argument, this function rolls back the default transaction of the
 *   default link. If the argument is a connection identifier, the
 *   default transaction of the corresponding connection will be rolled
 *   back. If the argument is a transaction identifier, the corresponding
 *   transaction will be rolled back.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ibase_rollback($link_or_trans_identifier){}

/**
 * Rolls back a transaction without closing it.
 * 
 * @param resource $link_or_trans_identifier If called without an
 *   argument, this function rolls back the default transaction of the
 *   default link. If the argument is a connection identifier, the
 *   default transaction of the corresponding connection will be rolled
 *   back. If the argument is a transaction identifier, the corresponding
 *   transaction will be rolled back. The transaction context will be
 *   retained, so statements executed from within this transaction will
 *   not be invalidated.
 * @return bool
 * @since PHP 5
 **/
function ibase_rollback_ret($link_or_trans_identifier){}

/**
 * @param resource $service_handle
 * @param int $action
 * @return string
 * @since PHP 5
 **/
function ibase_server_info($service_handle, $action){}

/**
 * @param string $host
 * @param string $dba_username
 * @param string $dba_password
 * @return resource
 * @since PHP 5
 **/
function ibase_service_attach($host, $dba_username, $dba_password){}

/**
 * @param resource $service_handle
 * @return bool
 * @since PHP 5
 **/
function ibase_service_detach($service_handle){}

/**
 * This function registers a PHP user function as event handler for the
 * specified events.
 * 
 * @param callback $event_handler The callback is called with the event
 *   name and the link resource as arguments whenever one of the
 *   specified events is posted by the database. The callback must return
 *   if the event handler should be canceled. Any other return value is
 *   ignored. This function accepts up to 15 event arguments.
 * @param string $event_name1 An event name.
 * @param string $event_name2 At most 15 events allowed.
 * @return resource
 * @since PHP 5
 **/
function ibase_set_event_handler($event_handler, $event_name1, $event_name2){}

/**
 * Sets the format of timestamp, date or time type columns returned from
 * queries.
 * 
 * You can set defaults for these formats with the PHP configuration
 * directives ibase.timestampformat, ibase.dateformat and
 * ibase.timeformat.
 * 
 * @param string $format Internally, the columns are formatted by
 *   c-function strftime(), so refer to its documentation regarding to
 *   the format of the string.
 * @param int $columntype {@link columntype} is one of the constants
 *   IBASE_TIMESTAMP, IBASE_DATE and IBASE_TIME. If omitted, defaults to
 *   IBASE_TIMESTAMP for backwards compatibility.
 * @return bool
 * @since PHP 4
 **/
function ibase_timefmt($format, $columntype){}

/**
 * Begins a transaction.
 * 
 * @param int $trans_args {@link trans_args} can be a combination of
 *   IBASE_READ, IBASE_WRITE, IBASE_COMMITTED, IBASE_CONSISTENCY,
 *   IBASE_CONCURRENCY, IBASE_REC_VERSION, IBASE_REC_NO_VERSION,
 *   IBASE_WAIT and IBASE_NOWAIT.
 * @param resource $link_identifier An InterBase link identifier. If
 *   omitted, the last opened link is assumed.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ibase_trans($trans_args, $link_identifier){}

/**
 * This function suspends execution of the script until one of the
 * specified events is posted by the database. The name of the event that
 * was posted is returned. This function accepts up to 15 event
 * arguments.
 * 
 * @param string $event_name1 The event name.
 * @param string $event_name2
 * @return string
 * @since PHP 5
 **/
function ibase_wait_event($event_name1, $event_name2){}

/**
 * Performs a character set conversion on the string {@link str} from
 * {@link in_charset} to {@link out_charset}.
 * 
 * @param string $in_charset The input charset.
 * @param string $out_charset The output charset. If you append the
 *   string //TRANSLIT to {@link out_charset} transliteration is
 *   activated. This means that when a character can't be represented in
 *   the target charset, it can be approximated through one or several
 *   similarly looking characters. If you append the string //IGNORE,
 *   characters that cannot be represented in the target charset are
 *   silently discarded. Otherwise, {@link str} is cut from the first
 *   illegal character and an E_NOTICE is generated.
 * @param string $str The string to be converted.
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function iconv($in_charset, $out_charset, $str){}

/**
 * Retrieve internal configuration variables of iconv extension.
 * 
 * @param string $type The value of the optional {@link type} can be:
 *   all input_encoding output_encoding internal_encoding
 * @return mixed
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function iconv_get_encoding($type){}

/**
 * Decodes a MIME header field.
 * 
 * @param string $encoded_header The encoded header, as a string.
 * @param int $mode {@link mode} determines the behaviour in the event
 *   {@link iconv_mime_decode} encounters a malformed MIME header field.
 *   You can specify any combination of the following bitmasks. Bitmasks
 *   acceptable to {@link iconv_mime_decode} Value Constant Description 1
 *   ICONV_MIME_DECODE_STRICT If set, the given header is decoded in full
 *   conformance with the standards defined in RFC2047. This option is
 *   disabled by default because there are a lot of broken mail user
 *   agents that don't follow the specification and don't produce correct
 *   MIME headers. 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set, {@link
 *   iconv_mime_decode_headers} attempts to ignore any grammatical errors
 *   and continue to process a given header.
 * @param string $charset The optional {@link charset} parameter
 *   specifies the character set to represent the result by. If omitted,
 *   iconv.internal_encoding will be used.
 * @return string
 * @since PHP 5
 **/
function iconv_mime_decode($encoded_header, $mode, $charset){}

/**
 * Decodes multiple MIME header fields at once.
 * 
 * @param string $encoded_headers The encoded headers, as a string.
 * @param int $mode {@link mode} determines the behaviour in the event
 *   {@link iconv_mime_decode_headers} encounters a malformed MIME header
 *   field. You can specify any combination of the following bitmasks.
 *   Bitmasks acceptable to {@link iconv_mime_decode_headers} Value
 *   Constant Description 1 ICONV_MIME_DECODE_STRICT If set, the given
 *   header is decoded in full conformance with the standards defined in
 *   RFC2047. This option is disabled by default because there are a lot
 *   of broken mail user agents that don't follow the specification and
 *   don't produce correct MIME headers. 2
 *   ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set, {@link
 *   iconv_mime_decode_headers} attempts to ignore any grammatical errors
 *   and continue to process a given header.
 * @param string $charset The optional {@link charset} parameter
 *   specifies the character set to represent the result by. If omitted,
 *   iconv.internal_encoding will be used.
 * @return array
 * @since PHP 5
 **/
function iconv_mime_decode_headers($encoded_headers, $mode, $charset){}

/**
 * Composes and returns a string that represents a valid MIME header
 * field, which looks like the following:
 * 
 * Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME
 * kopfzeile
 * 
 * In the above example, "Subject" is the field name and the portion that
 * begins with "=?ISO-8859-1?..." is the field value.
 * 
 * @param string $field_name The field name.
 * @param string $field_value The field value.
 * @param array $preferences You can control the behaviour of {@link
 *   iconv_mime_encode} by specifying an associative array that contains
 *   configuration items to the optional third parameter {@link
 *   preferences}. The items supported by {@link iconv_mime_encode} are
 *   listed below. Note that item names are treated case-sensitive.
 *   Configuration items supported by {@link iconv_mime_encode} Item Type
 *   Description Default value Example scheme string Specifies the method
 *   to encode a field value by. The value of this item may be either "B"
 *   or "Q", where "B" stands for base64 encoding scheme and "Q" stands
 *   for quoted-printable encoding scheme. B B input-charset string
 *   Specifies the character set in which the first parameter {@link
 *   field_name} and the second parameter {@link field_value} are
 *   presented. If not given, {@link iconv_mime_encode} assumes those
 *   parameters are presented to it in the iconv.internal_encoding ini
 *   setting. iconv.internal_encoding ISO-8859-1 output-charset string
 *   Specifies the character set to use to compose the MIME header. If
 *   not given, the same value as input-charset will be used.
 *   iconv.internal_encoding UTF-8 line-length integer Specifies the
 *   maximum length of the header lines. The resulting header is "folded"
 *   to a set of multiple lines in case the resulting header field would
 *   be longer than the value of this parameter, according to RFC2822 -
 *   Internet Message Format. If not given, the length will be limited to
 *   76 characters. 76 996 line-break-chars string Specifies the sequence
 *   of characters to append to each line as an end-of-line sign when
 *   "folding" is performed on a long header field. If not given, this
 *   defaults to "\r\n" (CR LF). Note that this parameter is always
 *   treated as an ASCII string regardless of the value of input-charset.
 *   \r\n \n
 * @return string
 * @since PHP 5
 **/
function iconv_mime_encode($field_name, $field_value, $preferences){}

/**
 * Changes the value of the internal configuration variable specified by
 * {@link type} to {@link charset}.
 * 
 * @param string $type The value of {@link type} can be any one of
 *   those: input_encoding output_encoding internal_encoding
 * @param string $charset The character set.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function iconv_set_encoding($type, $charset){}

/**
 * In contrast to {@link strlen}, {@link iconv_strlen} counts the
 * occurrences of characters in the given byte sequence {@link str} on
 * the basis of the specified character set, the result of which is not
 * necessarily identical to the length of the string in byte.
 * 
 * @param string $str The string.
 * @param string $charset If {@link charset} parameter is omitted,
 *   {@link str} is assumed to be encoded in iconv.internal_encoding.
 * @return int
 * @since PHP 5
 **/
function iconv_strlen($str, $charset){}

/**
 * Finds position of first occurrence of a needle within a haystack.
 * 
 * In contrast to {@link strpos}, the return value of {@link
 * iconv_strpos} is the number of characters that appear before the
 * needle, rather than the offset in bytes to the position where the
 * needle has been found. The characters are counted on the basis of the
 * specified character set {@link charset}.
 * 
 * @param string $haystack The entire string.
 * @param string $needle The searched substring.
 * @param int $offset The optional {@link offset} parameter specifies
 *   the position from which the search should be performed.
 * @param string $charset If {@link charset} parameter is omitted,
 *   {@link string} are assumed to be encoded in iconv.internal_encoding.
 * @return int
 * @since PHP 5
 **/
function iconv_strpos($haystack, $needle, $offset, $charset){}

/**
 * In contrast to {@link strpos}, the return value of {@link
 * iconv_strrpos} is the number of characters that appear before the
 * needle, rather than the offset in bytes to the position where the
 * needle has been found.
 * 
 * @param string $haystack The entire string.
 * @param string $needle The searched substring.
 * @param string $charset If {@link charset} parameter is omitted,
 *   {@link string} are assumed to be encoded in iconv.internal_encoding.
 * @return int
 * @since PHP 5
 **/
function iconv_strrpos($haystack, $needle, $charset){}

/**
 * Cuts a portion of {@link str} specified by the {@link offset} and
 * {@link length} parameters.
 * 
 * @param string $str The original string.
 * @param int $offset If {@link offset} is non-negative, {@link
 *   iconv_substr} cuts the portion out of {@link str} beginning at
 *   {@link offset}'th character, counting from zero. If {@link offset}
 *   is negative, {@link iconv_substr} cuts out the portion beginning at
 *   the position, {@link offset} characters away from the end of {@link
 *   str}.
 * @param int $length If {@link length} is given and is positive, the
 *   return value will contain at most {@link length} characters of the
 *   portion that begins at {@link offset} (depending on the length of
 *   {@link string}). If negative {@link length} is passed, {@link
 *   iconv_substr} cuts the portion out of {@link str} from the {@link
 *   offset}'th character up to the character that is {@link length}
 *   characters away from the end of the string. In case {@link offset}
 *   is also negative, the start position is calculated beforehand
 *   according to the rule explained above.
 * @param string $charset If {@link charset} parameter is omitted,
 *   {@link string} are assumed to be encoded in iconv.internal_encoding.
 *   Note that {@link offset} and {@link length} parameters are always
 *   deemed to represent offsets that are calculated on the basis of the
 *   character set determined by {@link charset}, whilst the counterpart
 *   {@link substr} always takes these for byte offsets.
 * @return string
 * @since PHP 5
 **/
function iconv_substr($str, $offset, $length, $charset){}

/**
 * {@link id3_get_frame_long_name} returns the long name for an ID3v2
 * frame.
 * 
 * @param string $frameId An ID3v2 frame
 * @return string
 * @since PECL id3 >= 0.2
 **/
function id3_get_frame_long_name($frameId){}

/**
 * {@link id3_get_frame_short_name} returns the short name for an ID3v2
 * frame.
 * 
 * @param string $frameId An ID3v2 frame
 * @return string
 * @since PECL id3 >= 0.2
 **/
function id3_get_frame_short_name($frameId){}

/**
 * {@link id3_get_genre_id} returns the id for a genre.
 * 
 * @param string $genre An integer ranging from 0 to 147
 * @return int
 * @since PECL id3 >= 0.1
 **/
function id3_get_genre_id($genre){}

/**
 * {@link id3_get_genre_list} returns an array containing all possible
 * genres that may be stored in an ID3 tag. This list has been created by
 * Eric Kemp and later extended by WinAmp.
 * 
 * This function is useful to provide you users a list of genres from
 * which they may choose one. When updating the ID3 tag you will always
 * have to specify the genre as an integer ranging from 0 to 147.
 * 
 * @return array
 * @since PECL id3 >= 0.1
 **/
function id3_get_genre_list(){}

/**
 * {@link id3_get_genre_name} returns the name for a genre id.
 * 
 * @param int $genre_id An integer ranging from 0 to 147
 * @return string
 * @since PECL id3 >= 0.1
 **/
function id3_get_genre_name($genre_id){}

/**
 * {@link id3_get_tag} is used to get all information stored in the id3
 * tag of the specified file.
 * 
 * @param string $filename The path to the MP3 file Instead of a
 *   filename you may also pass a valid stream resource
 * @param int $version Allows you to specify the version of the tag as
 *   MP3 files may contain both, version 1.x and version 2.x tags Since
 *   version 0.2 {@link id3_get_tag} also supports ID3 tags of version
 *   2.2, 2.3 and 2.4. To extract information from these tags, pass one
 *   of the constants ID3_V2_2, ID3_V2_3 or ID3_V2_4 as the second
 *   parameter. ID3 v2.x tags can contain a lot more information about
 *   the MP3 file than ID3 v1.x tags.
 * @return array
 * @since PECL id3 >= 0.1
 **/
function id3_get_tag($filename, $version){}

/**
 * {@link id3_get_version} retrieves the version(s) of the ID3 tag(s) in
 * the MP3 file.
 * 
 * If a file contains an ID3 v1.1 tag, it always contains a 1.0 tag, as
 * version 1.1 is just an extension of 1.0.
 * 
 * @param string $filename The path to the MP3 file Instead of a
 *   filename you may also pass a valid stream resource
 * @return int
 * @since PECL id3 >= 0.1
 **/
function id3_get_version($filename){}

/**
 * {@link id3_remove_tag} is used to remove the information stored of an
 * ID3 tag.
 * 
 * @param string $filename The path to the MP3 file Instead of a
 *   filename you may also pass a valid stream resource
 * @param int $version Allows you to specify the version of the tag as
 *   MP3 files may contain both, version 1.x and version 2.x tags.
 * @return bool
 * @since PECL id3 >= 0.1
 **/
function id3_remove_tag($filename, $version){}

/**
 * {@link id3_set_tag} is used to change the information stored of an ID3
 * tag. If no tag has been present, it will be added to the file.
 * 
 * @param string $filename The path to the MP3 file Instead of a
 *   filename you may also pass a valid stream resource
 * @param array $tag An associative array of tag keys and values The
 *   following keys may be used in the associative array:
 *   
 *   Keys in the associative array key possible value available in
 *   version title string with maximum of 30 characters v1.0, v1.1 artist
 *   string with maximum of 30 characters v1.0, v1.1 album string with
 *   maximum of 30 characters v1.0, v1.1 year 4 digits v1.0, v1.1 genre
 *   integer value between 0 and 147 v1.0, v1.1 comment string with
 *   maximum of 30 characters (28 in v1.1) v1.0, v1.1 track integer
 *   between 0 and 255 v1.1
 * @param int $version Allows you to specify the version of the tag as
 *   MP3 files may contain both, version 1.x and version 2.x tags
 * @return bool
 * @since PECL id3 >= 0.1
 **/
function id3_set_tag($filename, $tag, $version){}

/**
 * Returns a number formatted according to the given format string using
 * the given integer {@link timestamp} or the current local time if no
 * timestamp is given. In other words, {@link timestamp} is optional and
 * defaults to the value of {@link time}.
 * 
 * Unlike the function {@link date}, {@link idate} accepts just one char
 * in the {@link format} parameter.
 * 
 * @param string $format The following characters are recognized in the
 *   {@link format} parameter string {@link format} character Description
 *   B Swatch Beat/Internet Time d Day of the month h Hour (12 hour
 *   format) H Hour (24 hour format) i Minutes I (uppercase i) returns 1
 *   if DST is activated, 0 otherwise L (uppercase l) returns 1 for leap
 *   year, 0 otherwise m Month number s Seconds t Days in current month U
 *   Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC - this is
 *   the same as {@link time} w Day of the week (0 on Sunday) W ISO-8601
 *   week number of year, weeks starting on Monday y Year (1 or 2 digits
 *   - check note below) Y Year (4 digits) z Day of the year Z Timezone
 *   offset in seconds
 * @param int $timestamp
 * @return int
 * @since PHP 5
 **/
function idate($format, $timestamp){}

/**
 * This function returns the error message string that corresponds to the
 * given error code.
 * 
 * @param int $errorcode The error code as returned by {@link
 *   idn_to_ascii} or {@link idn_to_utf8}.
 * @return string
 * @since PECL idn >= 0.2
 **/
function idn_strerror($errorcode){}

/**
 * This function converts a UTF-8 encoded domain name to ASCII according
 * to the IDNA toUnicode() specification. If the input has non-ASCII
 * characters, the output will be in the "xn--" ACE notation.
 * 
 * @param string $utf8_domain The UTF-8 encoded domain name. If e.g. an
 *   ISO-8859-1 (aka Western Europe latin1) encoded string is passed it
 *   will be converted into an ACE encoded "xn--" string. It will not be
 *   the one you expected though!
 * @param int $errorcode Will be set to the IDNA error code.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.2
 **/
function idn_to_ascii($utf8_domain, &$errorcode){}

/**
 * This function converts Unicode domain name from IDNA ASCII-compatible
 * format to plain Unicode.
 * 
 * @param string $domain Domain to convert in IDNA ASCII-compatible
 *   format.
 * @param int $options Conversion options - combination of IDNA_*
 *   constants.
 * @return string
 **/
function idn_to_unicode($domain, $options){}

/**
 * This function converts a ASCII encoded domain name to its original
 * UTF-8 version.
 * 
 * @param string $ascii_domain The ASCII encoded domain name. Looks
 *   like "xn--..." if the it originally contained non-ASCII characters.
 * @param int $errorcode Will be set to the IDNA error code.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.2
 **/
function idn_to_utf8($ascii_domain, &$errorcode){}

/**
 * Deletes the slob object on the given slob object-id {@link bid}.
 * 
 * @param int $bid An existing slob id.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifxus_close_slob($bid){}

/**
 * Creates an slob object and opens it.
 * 
 * @param int $mode A combination of IFX_LO_RDONLY, IFX_LO_WRONLY,
 *   IFX_LO_APPEND IFX_LO_RDWR, IFX_LO_BUFFER, IFX_LO_NOBUFFER.
 * @return int
 * @since PHP 4, PHP
 **/
function ifxus_create_slob($mode){}

/**
 * Deletes the slob object.
 * 
 * @param int $bid An existing slob id.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifxus_free_slob($bid){}

/**
 * Opens an slob object. {@link bid} should be an existing slob id.
 * 
 * @param int $bid An existing slob id.
 * @param int $mode A combination of IFX_LO_RDONLY, IFX_LO_WRONLY,
 *   IFX_LO_APPEND IFX_LO_RDWR, IFX_LO_BUFFER, IFX_LO_NOBUFFER.
 * @return int
 * @since PHP 4, PHP
 **/
function ifxus_open_slob($bid, $mode){}

/**
 * Reads {@link nbytes} of the slob object.
 * 
 * @param int $bid An existing slob id.
 * @param int $nbytes The number of bytes to read.
 * @return string
 * @since PHP 4, PHP
 **/
function ifxus_read_slob($bid, $nbytes){}

/**
 * Sets the current file or seek position of an open slob object.
 * 
 * @param int $bid An existing slob id.
 * @param int $mode 0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END.
 * @param int $offset A byte offset.
 * @return int
 * @since PHP 4, PHP
 **/
function ifxus_seek_slob($bid, $mode, $offset){}

/**
 * Returns the current file or seek position of an open slob object
 * 
 * @param int $bid An existing slob id.
 * @return int
 * @since PHP 4, PHP
 **/
function ifxus_tell_slob($bid){}

/**
 * Writes a string into the slob object.
 * 
 * @param int $bid An existing slob id.
 * @param string $content The content to write, as a string.
 * @return int
 * @since PHP 4, PHP
 **/
function ifxus_write_slob($bid, $content){}

/**
 * Returns the number of rows affected by a query associated with {@link
 * result_id}.
 * 
 * For inserts, updates and deletes the number is the real number
 * (sqlerrd[2]) of affected rows. For selects it is an estimate
 * (sqlerrd[0]). Don't rely on it. The database server can never return
 * the actual number of rows that will be returned by a SELECT because it
 * has not even begun fetching them at this stage (just after the
 * "PREPARE" when the optimizer has determined the query plan).
 * 
 * Useful after {@link ifx_prepare} to limit queries to reasonable result
 * sets.
 * 
 * @param resource $result_id A valid result id returned by {@link
 *   ifx_query} or {@link ifx_prepare}.
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_affected_rows($result_id){}

/**
 * Set the default blob mode for all select queries.
 * 
 * @param int $mode Mode "0" means save Byte-Blobs in memory, and mode
 *   "1" means save Byte-Blobs in a file.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_blobinfile_mode($mode){}

/**
 * Sets the default byte mode for all select-queries.
 * 
 * @param int $mode Mode "0" will return a blob id, and mode "1" will
 *   return a varchar with text content.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_byteasvarchar($mode){}

/**
 * {@link ifx_close} closes the link to an Informix database that's
 * associated with the specified link identifier.
 * 
 * Note that this isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution.
 * 
 * {@link ifx_close} will not close persistent links generated by {@link
 * ifx_pconnect}.
 * 
 * @param resource $link_identifier The link identifier. If not
 *   specified, the last opened link is assumed.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_close($link_identifier){}

/**
 * {@link ifx_connect} establishes a connection to an Informix server.
 * 
 * In case a second call is made to {@link ifx_connect} with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling {@link
 * ifx_close}.
 * 
 * @param string $database The database name, as a string.
 * @param string $userid The username, as a string.
 * @param string $password The password, as a string.
 * @return resource
 * @since PHP 4, PHP
 **/
function ifx_connect($database, $userid, $password){}

/**
 * Duplicates the given blob object.
 * 
 * @param int $bid A BLOB identifier.
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_copy_blob($bid){}

/**
 * Creates a blob object.
 * 
 * @param int $type 1 = TEXT, 0 = BYTE
 * @param int $mode 0 = blob-object holds the content in memory, 1 =
 *   blob-object holds the content in file.
 * @param string $param if mode = 0: pointer to the content, if mode =
 *   1: pointer to the filestring.
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_create_blob($type, $mode, $param){}

/**
 * Creates an char object.
 * 
 * @param string $param The char content.
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_create_char($param){}

/**
 * Executes a previously prepared query or opens a cursor for it.
 * 
 * Does NOT free {@link result_id} on error.
 * 
 * Also sets the real number of {@link ifx_affected_rows} for non-select
 * statements for retrieval by {@link ifx_affected_rows}.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_do($result_id){}

/**
 * Returns in a string one character describing the general results of a
 * statement and both SQLSTATE and SQLCODE associated with the most
 * recent SQL statement executed.
 * 
 * @param resource $link_identifier The link identifier.
 * @return string
 * @since PHP 4, PHP
 **/
function ifx_error($link_identifier){}

/**
 * Returns the Informix error message associated with the most recent
 * Informix error.
 * 
 * @param int $errorcode If specified, the function will return the
 *   message corresponding to the specified code.
 * @return string
 * @since PHP 4, PHP
 **/
function ifx_errormsg($errorcode){}

/**
 * Fetches one row of data from the result associated with the specified
 * result identifier.
 * 
 * Subsequent calls to {@link ifx_fetch_row} would return the next row in
 * the result set, or if there are no more rows.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @param mixed $position An optional parameter for a "fetch" operation
 *   on "scroll" cursors: NEXT, PREVIOUS, CURRENT, FIRST, LAST or a
 *   number. If you specify a number, an "absolute" row fetch is
 *   executed. This parameter is optional, and only valid for SCROLL
 *   cursors.
 * @return array
 * @since PHP 4, PHP
 **/
function ifx_fetch_row($result_id, $position){}

/**
 * Returns the Informix SQL fieldproperties of every field in the query
 * as an associative array. Properties are encoded as:
 * "SQLTYPE;length;precision;scale;ISNULLABLE" where SQLTYPE = the
 * Informix type like "SQLVCHAR" etc. and ISNULLABLE = "Y" or "N".
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return array
 * @since PHP 4, PHP
 **/
function ifx_fieldproperties($result_id){}

/**
 * Returns an associative array with fieldnames as key and the SQL
 * fieldtypes as data for the query associated with {@link result_id}.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return array
 * @since PHP 4, PHP
 **/
function ifx_fieldtypes($result_id){}

/**
 * Deletes the blobobject for the given blob object-id.
 * 
 * @param int $bid The BLOB object id.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_free_blob($bid){}

/**
 * Deletes the charobject for the given char object-id.
 * 
 * @param int $bid The char object id.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_free_char($bid){}

/**
 * Releases resources for the query associated with {@link result_id}.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_free_result($result_id){}

/**
 * Returns a pseudo-row with sqlca.sqlerrd[0] ... sqlca.sqlerrd[5] after
 * the query associated with {@link result_id}.
 * 
 * For inserts, updates and deletes the values returned are those as set
 * by the server after executing the query. This gives access to the
 * number of affected rows and the serial insert value. For SELECTs the
 * values are those saved after the PREPARE statement. This gives access
 * to the *estimated* number of affected rows. The use of this function
 * saves the overhead of executing a SELECT dbinfo('sqlca.sqlerrdx')
 * query, as it retrieves the values that were saved by the ifx driver at
 * the appropriate moment.
 * 
 * @param resource $result_id {@link result_id} is a valid result id
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return array
 * @since PHP 4, PHP
 **/
function ifx_getsqlca($result_id){}

/**
 * Returns the content of the blob object.
 * 
 * @param int $bid The BLOB object id.
 * @return string
 * @since PHP 4, PHP
 **/
function ifx_get_blob($bid){}

/**
 * Returns the content of the char object.
 * 
 * @param int $bid The char object-id.
 * @return string
 * @since PHP 4, PHP
 **/
function ifx_get_char($bid){}

/**
 * Formats and prints all rows of the {@link result_id} query into a HTML
 * table.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @param string $html_table_options This optional argument is a string
 *   of <table> tag options.
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_htmltbl_result($result_id, $html_table_options){}

/**
 * Sets the default return value of a NULL-value on a fetch row.
 * 
 * @param int $mode Mode "0" returns "", and mode "1" returns "".
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_nullformat($mode){}

/**
 * After preparing or executing a query, this call gives you the number
 * of columns in the query.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_num_fields($result_id){}

/**
 * Gives the number of rows fetched so far for a query with {@link
 * result_id} after a {@link ifx_query} or {@link ifx_do} query.
 * 
 * @param resource $result_id {@link result_id} is a valid resultid
 *   returned by {@link ifx_query} or {@link ifx_prepare} (select type
 *   queries only!).
 * @return int
 * @since PHP 4, PHP
 **/
function ifx_num_rows($result_id){}

/**
 * {@link ifx_pconnect} acts very much like {@link ifx_connect} with two
 * major differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use ({@link ifx_close} will not close links established by
 * {@link ifx_pconnect}).
 * 
 * This type of links is therefore called 'persistent'.
 * 
 * @param string $database The database name, as a string.
 * @param string $userid The username, as a string.
 * @param string $password The password, as a string.
 * @return resource
 * @since PHP 4, PHP
 **/
function ifx_pconnect($database, $userid, $password){}

/**
 * Prepares a {@link query} for later use with {@link ifx_do}.
 * 
 * For "select-type" queries a cursor is declared and opened. Non-select
 * queries are "execute immediate".
 * 
 * For either query type the number of (estimated or real) affected rows
 * is saved for retrieval by {@link ifx_affected_rows}.
 * 
 * If the contents of the TEXT (or BYTE) column allow it, you can also
 * use ifx_textasvarchar(1) and ifx_byteasvarchar(1). This allows you to
 * treat TEXT (or BYTE) columns just as if they were ordinary (but long)
 * VARCHAR columns for select queries, and you don't need to bother with
 * blob id's.
 * 
 * With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default
 * situation), select queries will return BLOB columns as blob id's
 * (integer value). You can get the value of the blob as a string or file
 * with the blob functions (see below).
 * 
 * @param string $query The query string.
 * @param resource $link_identifier The link identifier.
 * @param int $cursor_def This optional parameter allows you to make
 *   this a scroll and/or hold cursor. It's a bitmask and can be either
 *   IFX_SCROLL, IFX_HOLD, or both or'ed together.
 * @param mixed $blobidarray If you have BLOB (BYTE or TEXT) columns in
 *   the query, you can add a {@link blobidarray} parameter containing
 *   the corresponding "blob ids", and you should replace those columns
 *   with a "?" in the query text.
 * @return resource
 * @since PHP 4, PHP
 **/
function ifx_prepare($query, $link_identifier, $cursor_def, $blobidarray){}

/**
 * Sends a {@link query} to the currently active database on the server
 * that's associated with the specified link identifier.
 * 
 * For "select-type" queries a cursor is declared and opened. Non-select
 * queries are "execute immediate".
 * 
 * For either query type the number of (estimated or real) affected rows
 * is saved for retrieval by {@link ifx_affected_rows}.
 * 
 * If the contents of the TEXT (or BYTE) column allow it, you can also
 * use ifx_textasvarchar(1) and ifx_byteasvarchar(1). This allows you to
 * treat TEXT (or BYTE) columns just as if they were ordinary (but long)
 * VARCHAR columns for select queries, and you don't need to bother with
 * blob id's.
 * 
 * With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default
 * situation), select queries will return BLOB columns as blob id's
 * (integer value). You can get the value of the blob as a string or file
 * with the blob functions (see below).
 * 
 * @param string $query The query string.
 * @param resource $link_identifier The link identifier.
 * @param int $cursor_type This optional parameter allows you to make
 *   this a scroll and/or hold cursor. It's a bitmask and can be either
 *   IFX_SCROLL, IFX_HOLD, or both or'ed together. I you omit this
 *   parameter the cursor is a normal sequential cursor.
 * @param mixed $blobidarray If you have BLOB (BYTE or TEXT) columns in
 *   the query, you can add a {@link blobidarray} parameter containing
 *   the corresponding "blob ids", and you should replace those columns
 *   with a "?" in the query text.
 * @return resource
 * @since PHP 4, PHP
 **/
function ifx_query($query, $link_identifier, $cursor_type, $blobidarray){}

/**
 * Sets the default text mode for all select-queries.
 * 
 * @param int $mode Mode "0" will return a blob id, and mode "1" will
 *   return a varchar with text content.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_textasvarchar($mode){}

/**
 * Updates the content of the blob object for the given blob object
 * {@link bid}.
 * 
 * @param int $bid A BLOB object identifier.
 * @param string $content The new data, as a string.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_update_blob($bid, $content){}

/**
 * Updates the content of the char object for the given char object
 * {@link bid}.
 * 
 * @param int $bid A char object identifier.
 * @param string $content The new data, as a string.
 * @return bool
 * @since PHP 4, PHP
 **/
function ifx_update_char($bid, $content){}

/**
 * Sets whether a client disconnect should cause a script to be aborted.
 * 
 * When running PHP as a command line script, and the script's tty goes
 * away without the script being terminated then the script will die the
 * next time it tries to write anything, unless {@link value} is set to
 * 
 * @param string $value If set, this function will set the
 *   ignore_user_abort ini setting to the given {@link value}. If not,
 *   this function will only return the previous setting without changing
 *   it.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ignore_user_abort($value){}

/**
 * @param string $path
 * @param string $comment
 * @param string $server_ip
 * @param int $port
 * @param string $host_name
 * @param int $rights
 * @param int $start_server
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_add_server($path, $comment, $server_ip, $port, $host_name, $rights, $start_server){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_get_dir_security($server_instance, $virtual_path){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @param string $script_extension
 * @return string
 * @since PECL iisfunc SVN
 **/
function iis_get_script_map($server_instance, $virtual_path, $script_extension){}

/**
 * @param string $comment
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_get_server_by_comment($comment){}

/**
 * Each virtual server in IIS is associated with an instance number.
 * {@link iis_get_server_by_path} finds the instance number from the
 * actual path to the root directory.
 * 
 * @param string $path The path to the root directory
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_get_server_by_path($path){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_get_server_rights($server_instance, $virtual_path){}

/**
 * @param string $service_id
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_get_service_state($service_id){}

/**
 * @param int $server_instance
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_remove_server($server_instance){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @param string $application_scope
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_set_app_settings($server_instance, $virtual_path, $application_scope){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @param int $directory_flags
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_set_dir_security($server_instance, $virtual_path, $directory_flags){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @param string $script_extension
 * @param string $engine_path
 * @param int $allow_scripting
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_set_script_map($server_instance, $virtual_path, $script_extension, $engine_path, $allow_scripting){}

/**
 * @param int $server_instance
 * @param string $virtual_path
 * @param int $directory_flags
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_set_server_rights($server_instance, $virtual_path, $directory_flags){}

/**
 * @param int $server_instance
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_start_server($server_instance){}

/**
 * @param string $service_id
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_start_service($service_id){}

/**
 * @param int $server_instance
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_stop_server($server_instance){}

/**
 * @param string $service_id
 * @return int
 * @since PECL iisfunc SVN
 **/
function iis_stop_service($service_id){}

/**
 * {@link image2wbmp} outputs or save a WBMP version of the given {@link
 * image}.
 * 
 * @param resource $image Path to the saved file. If not given, the raw
 *   image stream will be outputted directly.
 * @param string $filename Threshold value, between 0 and 255
 *   (inclusive).
 * @param int $threshold
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function image2wbmp($image, $filename, $threshold){}

/**
 * {@link imagealphablending} allows for two different modes of drawing
 * on truecolor images. In blending mode, the alpha channel component of
 * the color supplied to all drawing function, such as {@link
 * imagesetpixel} determines how much of the underlying color should be
 * allowed to shine through. As a result, gd automatically blends the
 * existing color at that point with the drawing color, and stores the
 * result in the image. The resulting pixel is opaque. In non-blending
 * mode, the drawing color is copied literally with its alpha channel
 * information, replacing the destination pixel. Blending mode is not
 * available when drawing on palette images.
 * 
 * @param resource $image Whether to enable the blending mode or not.
 *   On true color images the default value is otherwise the default
 *   value is
 * @param bool $blendmode
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagealphablending($image, $blendmode){}

/**
 * Activate the fast drawing antialiased methods for lines and wired
 * polygons. It does not support alpha components. It works using a
 * direct blend operation. It works only with truecolor images.
 * 
 * Thickness and styled are not supported.
 * 
 * Using antialiased primitives with transparent background color can end
 * with some unexpected results. The blend method uses the background
 * color as any other colors. The lack of alpha component support does
 * not allow an alpha based antialiasing method.
 * 
 * @param resource $image Whether to enable antialiasing or not.
 * @param bool $enabled
 * @return bool
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function imageantialias($image, $enabled){}

/**
 * {@link imagearc} draws an arc of circle centered at the given
 * coordinates.
 * 
 * @param resource $image x-coordinate of the center.
 * @param int $cx y-coordinate of the center.
 * @param int $cy The arc width.
 * @param int $width The arc height.
 * @param int $height The arc start angle, in degrees.
 * @param int $start The arc end angle, in degrees. 0° is located at
 *   the three-o'clock position, and the arc is drawn clockwise.
 * @param int $end A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagearc($image, $cx, $cy, $width, $height, $start, $end, $color){}

/**
 * {@link imagechar} draws the first character of {@link c} in the image
 * identified by {@link image} with its upper-left at {@link x},{@link y}
 * (top left is 0, 0) with the color {@link color}.
 * 
 * @param resource $image x-coordinate of the start.
 * @param int $font y-coordinate of the start.
 * @param int $x The character to draw.
 * @param int $y A color identifier created with {@link
 *   imagecolorallocate}.
 * @param string $c
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagechar($image, $font, $x, $y, $c, $color){}

/**
 * Draws the character {@link c} vertically at the specified coordinate
 * on the given {@link image}.
 * 
 * @param resource $image x-coordinate of the start.
 * @param int $font y-coordinate of the start.
 * @param int $x The character to draw.
 * @param int $y A color identifier created with {@link
 *   imagecolorallocate}.
 * @param string $c
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagecharup($image, $font, $x, $y, $c, $color){}

/**
 * Returns a color identifier representing the color composed of the
 * given RGB components.
 * 
 * {@link imagecolorallocate} must be called to create each color that is
 * to be used in the image represented by {@link image}.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolorallocate($image, $red, $green, $blue){}

/**
 * {@link imagecolorallocatealpha} behaves identically to {@link
 * imagecolorallocate} with the addition of the transparency parameter
 * {@link alpha}.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue A value between 0 and 127. 0 indicates completely
 *   opaque while 127 indicates completely transparent.
 * @param int $alpha
 * @return int
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function imagecolorallocatealpha($image, $red, $green, $blue, $alpha){}

/**
 * Returns the index of the color of the pixel at the specified location
 * in the image specified by {@link image}.
 * 
 * If PHP is compiled against GD library 2.0 or higher and the image is a
 * truecolor image, this function returns the RGB value of that pixel as
 * integer. Use bitshifting and masking to access the distinct red, green
 * and blue component values:
 * 
 * @param resource $image x-coordinate of the point.
 * @param int $x y-coordinate of the point.
 * @param int $y
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolorat($image, $x, $y){}

/**
 * Returns the index of the color in the palette of the image which is
 * "closest" to the specified RGB value.
 * 
 * The "distance" between the desired color and each color in the palette
 * is calculated as if the RGB values represented points in
 * three-dimensional space.
 * 
 * If you created the image from a file, only colors used in the image
 * are resolved. Colors present only in the palette are not resolved.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolorclosest($image, $red, $green, $blue){}

/**
 * Returns the index of the color in the palette of the image which is
 * "closest" to the specified RGB value and {@link alpha} level.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue A value between 0 and 127. 0 indicates completely
 *   opaque while 127 indicates completely transparent.
 * @param int $alpha
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagecolorclosestalpha($image, $red, $green, $blue, $alpha){}

/**
 * Get the index of the color which has the hue, white and blackness
 * nearest the given color.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue
 * @return int
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagecolorclosesthwb($image, $red, $green, $blue){}

/**
 * De-allocates a color previously allocated with {@link
 * imagecolorallocate} or {@link imagecolorallocatealpha}.
 * 
 * @param resource $image The color identifier.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagecolordeallocate($image, $color){}

/**
 * Returns the index of the specified color in the palette of the image.
 * 
 * If you created the image from a file, only colors used in the image
 * are resolved. Colors present only in the palette are not resolved.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolorexact($image, $red, $green, $blue){}

/**
 * Returns the index of the specified color+alpha in the palette of the
 * image.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue A value between 0 and 127. 0 indicates completely
 *   opaque while 127 indicates completely transparent.
 * @param int $alpha
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagecolorexactalpha($image, $red, $green, $blue, $alpha){}

/**
 * Makes the colors of the palette version of an image more closely match
 * the true color version.
 * 
 * @param resource $image1 A truecolor image link resource.
 * @param resource $image2 A palette image link resource pointing to an
 *   image that has the same size as {@link image1}.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function imagecolormatch($image1, $image2){}

/**
 * This function is guaranteed to return a color index for a requested
 * color, either the exact color or the closest possible alternative.
 * 
 * If you created the image from a file, only colors used in the image
 * are resolved. Colors present only in the palette are not resolved.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolorresolve($image, $red, $green, $blue){}

/**
 * This function is guaranteed to return a color index for a requested
 * color, either the exact color or the closest possible alternative.
 * 
 * @param resource $image Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue A value between 0 and 127. 0 indicates completely
 *   opaque while 127 indicates completely transparent.
 * @param int $alpha
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagecolorresolvealpha($image, $red, $green, $blue, $alpha){}

/**
 * This sets the specified index in the palette to the specified color.
 * This is useful for creating flood-fill-like effects in palleted images
 * without the overhead of performing the actual flood-fill.
 * 
 * @param resource $image An index in the palette.
 * @param int $index Value of red component.
 * @param int $red Value of green component.
 * @param int $green Value of blue component.
 * @param int $blue Value of alpha component.
 * @param int $alpha
 * @return void
 * @since PHP 4, PHP 5
 **/
function imagecolorset($image, $index, $red, $green, $blue, $alpha){}

/**
 * Gets the color for a specified index.
 * 
 * @param resource $image The color index.
 * @param int $index
 * @return array
 * @since PHP 4, PHP 5
 **/
function imagecolorsforindex($image, $index){}

/**
 * Returns the number of colors in an image palette.
 * 
 * @param resource $image An image resource, returned by one of the
 *   image creation functions, such as {@link imagecreatefromgif}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolorstotal($image){}

/**
 * Sets the transparent color in the given {@link image}.
 * 
 * @param resource $image A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagecolortransparent($image, $color){}

/**
 * Applies a convolution matrix on the image, using the given coefficient
 * and offset.
 * 
 * @param resource $image A 3x3 matrix: an array of three arrays of
 *   three floats.
 * @param array $matrix The divisor of the result of the convolution,
 *   used for normalization.
 * @param float $div Color offset.
 * @param float $offset
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function imageconvolution($image, $matrix, $div, $offset){}

/**
 * Copy a part of {@link src_im} onto {@link dst_im} starting at the x,y
 * coordinates {@link src_x}, {@link src_y } with a width of {@link
 * src_w} and a height of {@link src_h}. The portion defined will be
 * copied onto the x,y coordinates, {@link dst_x} and {@link dst_y}.
 * 
 * @param resource $dst_im Destination image link resource.
 * @param resource $src_im Source image link resource.
 * @param int $dst_x x-coordinate of destination point.
 * @param int $dst_y y-coordinate of destination point.
 * @param int $src_x x-coordinate of source point.
 * @param int $src_y y-coordinate of source point.
 * @param int $src_w Source width.
 * @param int $src_h Source height.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagecopy($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h){}

/**
 * Copy a part of {@link src_im} onto {@link dst_im} starting at the x,y
 * coordinates {@link src_x}, {@link src_y } with a width of {@link
 * src_w} and a height of {@link src_h}. The portion defined will be
 * copied onto the x,y coordinates, {@link dst_x} and {@link dst_y}.
 * 
 * @param resource $dst_im Destination image link resource.
 * @param resource $src_im Source image link resource.
 * @param int $dst_x x-coordinate of destination point.
 * @param int $dst_y y-coordinate of destination point.
 * @param int $src_x x-coordinate of source point.
 * @param int $src_y y-coordinate of source point.
 * @param int $src_w Source width.
 * @param int $src_h Source height.
 * @param int $pct The two images will be merged according to {@link
 *   pct} which can range from 0 to 100. When {@link pct} = 0, no action
 *   is taken, when 100 this function behaves identically to {@link
 *   imagecopy} for pallete images, while it implements alpha
 *   transparency for true colour images.
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagecopymerge($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct){}

/**
 * {@link imagecopymergegray} copy a part of {@link src_im} onto {@link
 * dst_im} starting at the x,y coordinates {@link src_x}, {@link src_y }
 * with a width of {@link src_w} and a height of {@link src_h}. The
 * portion defined will be copied onto the x,y coordinates, {@link dst_x}
 * and {@link dst_y}.
 * 
 * This function is identical to {@link imagecopymerge} except that when
 * merging it preserves the hue of the source by converting the
 * destination pixels to gray scale before the copy operation.
 * 
 * @param resource $dst_im Destination image link resource.
 * @param resource $src_im Source image link resource.
 * @param int $dst_x x-coordinate of destination point.
 * @param int $dst_y y-coordinate of destination point.
 * @param int $src_x x-coordinate of source point.
 * @param int $src_y y-coordinate of source point.
 * @param int $src_w Source width.
 * @param int $src_h Source height.
 * @param int $pct The {@link src_im} will be changed to grayscale
 *   according to {@link pct} where 0 is fully grayscale and 100 is
 *   unchanged. When {@link pct} = 100 this function behaves identically
 *   to {@link imagecopy} for pallete images, while it implements alpha
 *   transparency for true colour images.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagecopymergegray($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct){}

/**
 * {@link imagecopyresampled} copies a rectangular portion of one image
 * to another image, smoothly interpolating pixel values so that, in
 * particular, reducing the size of an image still retains a great deal
 * of clarity.
 * 
 * In other words, {@link imagecopyresampled} will take an rectangular
 * area from {@link src_image} of width {@link src_w} and height {@link
 * src_h} at position ({@link src_x},{@link src_y}) and place it in a
 * rectangular area of {@link dst_image} of width {@link dst_w} and
 * height {@link dst_h} at position ({@link dst_x},{@link dst_y}).
 * 
 * If the source and destination coordinates and width and heights
 * differ, appropriate stretching or shrinking of the image fragment will
 * be performed. The coordinates refer to the upper left corner. This
 * function can be used to copy regions within the same image (if {@link
 * dst_image} is the same as {@link src_image}) but if the regions
 * overlap the results will be unpredictable.
 * 
 * @param resource $dst_image Destination image link resource.
 * @param resource $src_image Source image link resource.
 * @param int $dst_x x-coordinate of destination point.
 * @param int $dst_y y-coordinate of destination point.
 * @param int $src_x x-coordinate of source point.
 * @param int $src_y y-coordinate of source point.
 * @param int $dst_w Destination width.
 * @param int $dst_h Destination height.
 * @param int $src_w Source width.
 * @param int $src_h Source height.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagecopyresampled($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h){}

/**
 * {@link imagecopyresized} copies a rectangular portion of one image to
 * another image. {@link dst_image} is the destination image, {@link
 * src_image} is the source image identifier.
 * 
 * In other words, {@link imagecopyresized} will take an rectangular area
 * from {@link src_image} of width {@link src_w} and height {@link src_h}
 * at position ({@link src_x},{@link src_y}) and place it in a
 * rectangular area of {@link dst_image} of width {@link dst_w} and
 * height {@link dst_h} at position ({@link dst_x},{@link dst_y}).
 * 
 * If the source and destination coordinates and width and heights
 * differ, appropriate stretching or shrinking of the image fragment will
 * be performed. The coordinates refer to the upper left corner. This
 * function can be used to copy regions within the same image (if {@link
 * dst_image} is the same as {@link src_image}) but if the regions
 * overlap the results will be unpredictable.
 * 
 * @param resource $dst_image Destination image link resource.
 * @param resource $src_image Source image link resource.
 * @param int $dst_x x-coordinate of destination point.
 * @param int $dst_y y-coordinate of destination point.
 * @param int $src_x x-coordinate of source point.
 * @param int $src_y y-coordinate of source point.
 * @param int $dst_w Destination width.
 * @param int $dst_h Destination height.
 * @param int $src_w Source width.
 * @param int $src_h Source height.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagecopyresized($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h){}

/**
 * {@link imagecreate} returns an image identifier representing a blank
 * image of specified size.
 * 
 * We recommend the use of {@link imagecreatetruecolor}.
 * 
 * @param int $width The image width.
 * @param int $height The image height.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function imagecreate($width, $height){}

/**
 * Create a new image from GD file or URL.
 * 
 * @param string $filename Path to the GD file.
 * @return resource
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imagecreatefromgd($filename){}

/**
 * Create a new image from GD2 file or URL.
 * 
 * @param string $filename Path to the GD2 image.
 * @return resource
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imagecreatefromgd2($filename){}

/**
 * Create a new image from a given part of GD2 file or URL.
 * 
 * @param string $filename Path to the GD2 image.
 * @param int $srcX x-coordinate of source point.
 * @param int $srcY y-coordinate of source point.
 * @param int $width Source width.
 * @param int $height Source height.
 * @return resource
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imagecreatefromgd2part($filename, $srcX, $srcY, $width, $height){}

/**
 * {@link imagecreatefromgif} returns an image identifier representing
 * the image obtained from the given filename.
 * 
 * @param string $filename Path to the GIF image.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function imagecreatefromgif($filename){}

/**
 * {@link imagecreatefromjpeg} returns an image identifier representing
 * the image obtained from the given filename.
 * 
 * @param string $filename Path to the JPEG image.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function imagecreatefromjpeg($filename){}

/**
 * {@link imagecreatefrompng} returns an image identifier representing
 * the image obtained from the given filename.
 * 
 * @param string $filename Path to the PNG image.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function imagecreatefrompng($filename){}

/**
 * {@link imagecreatefromstring} returns an image identifier representing
 * the image obtained from the given {@link data}. These types will be
 * automatically detected if your build of PHP supports them: JPEG, PNG,
 * GIF, WBMP, and GD2.
 * 
 * @param string $data A string containing the image data.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function imagecreatefromstring($data){}

/**
 * {@link imagecreatefromwbmp} returns an image identifier representing
 * the image obtained from the given filename.
 * 
 * @param string $filename Path to the WBMP image.
 * @return resource
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagecreatefromwbmp($filename){}

/**
 * {@link imagecreatefromxbm} returns an image identifier representing
 * the image obtained from the given filename.
 * 
 * @param string $filename Path to the XBM image.
 * @return resource
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagecreatefromxbm($filename){}

/**
 * {@link imagecreatefromxpm} returns an image identifier representing
 * the image obtained from the given filename.
 * 
 * @param string $filename Path to the XPM image.
 * @return resource
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagecreatefromxpm($filename){}

/**
 * {@link imagecreatetruecolor} returns an image identifier representing
 * a black image of the specified size.
 * 
 * Depending on your PHP and GD versions this function is defined or not.
 * With PHP 4.0.6 through 4.1.x this function always exists if the GD
 * module is loaded, but calling it without GD2 being installed PHP will
 * issue a fatal error and exit. With PHP 4.2.x this behaviour is
 * different in issuing a warning instead of an error. Other versions
 * only define this function, if the correct GD version is installed.
 * 
 * @param int $width Image width.
 * @param int $height Image height.
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagecreatetruecolor($width, $height){}

/**
 * This function is deprecated. Use combination of {@link imagesetstyle}
 * and {@link imageline} instead.
 * 
 * @param resource $image Upper left x coordinate.
 * @param int $x1 Upper left y coordinate 0, 0 is the top left corner
 *   of the image.
 * @param int $y1 Bottom right x coordinate.
 * @param int $x2 Bottom right y coordinate.
 * @param int $y2 The fill color. A color identifier created with
 *   {@link imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagedashedline($image, $x1, $y1, $x2, $y2, $color){}

/**
 * {@link imagedestroy} frees any memory associated with image {@link
 * image}.
 * 
 * @param resource $image
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagedestroy($image){}

/**
 * Draws an ellipse centered at the specified coordinates.
 * 
 * @param resource $image x-coordinate of the center.
 * @param int $cx y-coordinate of the center.
 * @param int $cy The ellipse width.
 * @param int $width The ellipse height.
 * @param int $height The color of the ellipse. A color identifier
 *   created with {@link imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imageellipse($image, $cx, $cy, $width, $height, $color){}

/**
 * Performs a flood fill starting at the given coordinate (top left is 0,
 * 0) with the given {@link color} in the {@link image}.
 * 
 * @param resource $image x-coordinate of start point.
 * @param int $x y-coordinate of start point.
 * @param int $y The fill color. A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagefill($image, $x, $y, $color){}

/**
 * Draws a partial arc centered at the specified coordinate in the given
 * {@link image}.
 * 
 * @param resource $image x-coordinate of the center.
 * @param int $cx y-coordinate of the center.
 * @param int $cy The arc width.
 * @param int $width The arc height.
 * @param int $height The arc start angle, in degrees.
 * @param int $start The arc end angle, in degrees. 0° is located at
 *   the three-o'clock position, and the arc is drawn clockwise.
 * @param int $end A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color A bitwise OR of the following possibilities:
 *   IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_ARC_PIE
 *   and IMG_ARC_CHORD are mutually exclusive; IMG_ARC_CHORD just
 *   connects the starting and ending angles with a straight line, while
 *   IMG_ARC_PIE produces a rounded edge. IMG_ARC_NOFILL indicates that
 *   the arc or chord should be outlined, not filled. IMG_ARC_EDGED, used
 *   together with IMG_ARC_NOFILL, indicates that the beginning and
 *   ending angles should be connected to the center - this is a good way
 *   to outline (rather than fill) a 'pie slice'.
 * @param int $style
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagefilledarc($image, $cx, $cy, $width, $height, $start, $end, $color, $style){}

/**
 * Draws an ellipse centered at the specified coordinate on the given
 * {@link image}.
 * 
 * @param resource $image x-coordinate of the center.
 * @param int $cx y-coordinate of the center.
 * @param int $cy The ellipse width.
 * @param int $width The ellipse height.
 * @param int $height The fill color. A color identifier created with
 *   {@link imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagefilledellipse($image, $cx, $cy, $width, $height, $color){}

/**
 * {@link imagefilledpolygon} creates a filled polygon in the given
 * {@link image}.
 * 
 * @param resource $image An array containing the x and y coordinates
 *   of the polygons vertices consecutively.
 * @param array $points Total number of vertices, which must be at
 *   least 3.
 * @param int $num_points A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagefilledpolygon($image, $points, $num_points, $color){}

/**
 * Creates a rectangle filled with {@link color} in the given {@link
 * image} starting at point 1 and ending at point 2. 0, 0 is the top left
 * corner of the image.
 * 
 * @param resource $image x-coordinate for point 1.
 * @param int $x1 y-coordinate for point 1.
 * @param int $y1 x-coordinate for point 2.
 * @param int $x2 y-coordinate for point 2.
 * @param int $y2 The fill color. A color identifier created with
 *   {@link imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color){}

/**
 * {@link imagefilltoborder} performs a flood fill whose border color is
 * defined by {@link border}. The starting point for the fill is {@link
 * x}, {@link y} (top left is 0, 0) and the region is filled with color
 * {@link color}.
 * 
 * @param resource $image x-coordinate of start.
 * @param int $x y-coordinate of start.
 * @param int $y The border color. A color identifier created with
 *   {@link imagecolorallocate}.
 * @param int $border The fill color. A color identifier created with
 *   {@link imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagefilltoborder($image, $x, $y, $border, $color){}

/**
 * {@link imagefilter} applies the given filter {@link filtertype} on the
 * {@link image}.
 * 
 * @param resource $image {@link filtertype} can be one of the
 *   following: IMG_FILTER_NEGATE: Reverses all colors of the image.
 *   IMG_FILTER_GRAYSCALE: Converts the image into grayscale.
 *   IMG_FILTER_BRIGHTNESS: Changes the brightness of the image. Use
 *   {@link arg1} to set the level of brightness. IMG_FILTER_CONTRAST:
 *   Changes the contrast of the image. Use {@link arg1} to set the level
 *   of contrast. IMG_FILTER_COLORIZE: Like IMG_FILTER_GRAYSCALE, except
 *   you can specify the color. Use {@link arg1}, {@link arg2} and {@link
 *   arg3} in the form of {@link red}, {@link blue}, {@link green} and
 *   {@link arg4} for the {@link alpha} channel. The range for each color
 *   is 0 to 255. IMG_FILTER_EDGEDETECT: Uses edge detection to highlight
 *   the edges in the image. IMG_FILTER_EMBOSS: Embosses the image.
 *   IMG_FILTER_GAUSSIAN_BLUR: Blurs the image using the Gaussian method.
 *   IMG_FILTER_SELECTIVE_BLUR: Blurs the image. IMG_FILTER_MEAN_REMOVAL:
 *   Uses mean removal to achieve a "sketchy" effect. IMG_FILTER_SMOOTH:
 *   Makes the image smoother. Use {@link arg1} to set the level of
 *   smoothness. IMG_FILTER_PIXELATE: Applies pixelation effect to the
 *   image, use {@link arg1} to set the block size and {@link arg2} to
 *   set the pixelation effect mode.
 * @param int $filtertype IMG_FILTER_BRIGHTNESS: Brightness level.
 *   IMG_FILTER_CONTRAST: Contrast level. IMG_FILTER_COLORIZE: Value of
 *   red component. IMG_FILTER_SMOOTH: Smoothness level.
 *   IMG_FILTER_PIXELATE: Block size in pixels.
 * @param int $arg1 IMG_FILTER_COLORIZE: Value of green component.
 *   IMG_FILTER_PIXELATE: Whether to use advanced pixelation effect or
 *   not (defaults to ).
 * @param int $arg2 IMG_FILTER_COLORIZE: Value of blue component.
 * @param int $arg3 IMG_FILTER_COLORIZE: Alpha channel, A value between
 *   0 and 127. 0 indicates completely opaque while 127 indicates
 *   completely transparent.
 * @param int $arg4
 * @return bool
 * @since PHP 5
 **/
function imagefilter($image, $filtertype, $arg1, $arg2, $arg3, $arg4){}

/**
 * Returns the pixel height of a character in the specified font.
 * 
 * @param int $font
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagefontheight($font){}

/**
 * Returns the pixel width of a character in font.
 * 
 * @param int $font
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagefontwidth($font){}

/**
 * This function calculates and returns the bounding box in pixels for a
 * FreeType text.
 * 
 * @param float $size The font size. Depending on your version of GD,
 *   this should be specified as the pixel size (GD1) or point size
 *   (GD2).
 * @param float $angle Angle in degrees in which {@link text} will be
 *   measured.
 * @param string $fontfile The name of the TrueType font file (can be a
 *   URL). Depending on which version of the GD library that PHP is
 *   using, it may attempt to search for files that do not begin with a
 *   leading '/' by appending '.ttf' to the filename and searching along
 *   a library-defined font path.
 * @param string $text The string to be measured.
 * @param array $extrainfo Possible array indexes for {@link extrainfo}
 *   Key Type Meaning linespacing float Defines drawing linespacing
 * @return array
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imageftbbox($size, $angle, $fontfile, $text, $extrainfo){}

/**
 * @param resource $image The font size to use in points.
 * @param float $size The angle in degrees, with 0 degrees being
 *   left-to-right reading text. Higher values represent a
 *   counter-clockwise rotation. For example, a value of 90 would result
 *   in bottom-to-top reading text.
 * @param float $angle The coordinates given by {@link x} and {@link y}
 *   will define the basepoint of the first character (roughly the
 *   lower-left corner of the character). This is different from the
 *   {@link imagestring}, where {@link x} and {@link y} define the
 *   upper-left corner of the first character. For example, "top left" is
 *   0, 0.
 * @param int $x The y-ordinate. This sets the position of the fonts
 *   baseline, not the very bottom of the character.
 * @param int $y The index of the desired color for the text, see
 *   {@link imagecolorexact}.
 * @param int $color The path to the TrueType font you wish to use.
 *   Depending on which version of the GD library PHP is using, when
 *   {@link fontfile} does not begin with a leading / then .ttf will be
 *   appended to the filename and the library will attempt to search for
 *   that filename along a library-defined font path. When using versions
 *   of the GD library lower than 2.0.18, a space character, rather than
 *   a semicolon, was used as the 'path separator' for different font
 *   files. Unintentional use of this feature will result in the warning
 *   message: Warning: Could not find/open font. For these affected
 *   versions, the only solution is moving the font to a path which does
 *   not contain spaces. In many cases where a font resides in the same
 *   directory as the script using it the following trick will alleviate
 *   any include problems.
 *   
 *   <?php // Set the enviroment variable for GD putenv('GDFONTPATH=' .
 *   realpath('.'));
 *   
 *   // Name the font to be used (note the lack of the .ttf extension)
 *   $font = 'SomeFont'; ?>
 * @param string $fontfile Text to be inserted into image.
 * @param string $text Possible array indexes for {@link extrainfo} Key
 *   Type Meaning linespacing float Defines drawing linespacing
 * @param array $extrainfo
 * @return array
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imagefttext($image, $size, $angle, $x, $y, $color, $fontfile, $text, $extrainfo){}

/**
 * Applies gamma correction to the given gd {@link image} given an input
 * and an output gamma.
 * 
 * @param resource $image The input gamma.
 * @param float $inputgamma The output gamma.
 * @param float $outputgamma
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagegammacorrect($image, $inputgamma, $outputgamma){}

/**
 * Outputs a GD image to the given {@link filename}.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly.
 * @param string $filename
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imagegd($image, $filename){}

/**
 * Outputs a GD2 image to the given {@link filename}.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly.
 * @param string $filename Chunk size.
 * @param int $chunk_size Either IMG_GD2_RAW or IMG_GD2_COMPRESSED.
 *   Default is IMG_GD2_RAW.
 * @param int $type
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imagegd2($image, $filename, $chunk_size, $type){}

/**
 * {@link imagegif} creates the GIF file in filename from the image
 * {@link image}. The {@link image} argument is the return from the
 * {@link imagecreate} or imagecreatefrom* function.
 * 
 * The image format will be GIF87a unless the image has been made
 * transparent with {@link imagecolortransparent}, in which case the
 * image format will be GIF89a.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly.
 * @param string $filename
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagegif($image, $filename){}

/**
 * Grabs a screenshot of the whole screen.
 * 
 * @return resource
 * @since PHP 5 >= 5.2.2
 **/
function imagegrabscreen(){}

/**
 * Grabs a window or its client area using a windows handle (HWND
 * property in COM instance)
 * 
 * @param int $window_handle The HWND window ID.
 * @param int $client_area Include the client area of the application
 *   window.
 * @return resource
 * @since PHP 5 >= 5.2.2
 **/
function imagegrabwindow($window_handle, $client_area){}

/**
 * {@link imageinterlace} turns the interlace bit on or off.
 * 
 * If the interlace bit is set and the image is used as a JPEG image, the
 * image is created as a progressive JPEG.
 * 
 * @param resource $image If non-zero, the image will be interlaced,
 *   else the interlace bit is turned off.
 * @param int $interlace
 * @return int
 * @since PHP 4, PHP 5
 **/
function imageinterlace($image, $interlace){}

/**
 * {@link imageistruecolor} finds whether the image {@link image} is a
 * truecolor image.
 * 
 * @param resource $image
 * @return bool
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function imageistruecolor($image){}

/**
 * {@link imagejpeg} creates a JPEG file from the given {@link image}.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly. To skip this
 *   argument in order to provide the {@link quality} parameter, use .
 * @param string $filename {@link quality} is optional, and ranges from
 *   0 (worst quality, smaller file) to 100 (best quality, biggest file).
 *   The default is the default IJG quality value (about 75).
 * @param int $quality
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagejpeg($image, $filename, $quality){}

/**
 * Set the alpha blending flag to use the bundled libgd layering effects.
 * 
 * @param resource $image One of the following constants:
 *   IMG_EFFECT_REPLACE Use pixel replacement (equivalent of passing to
 *   {@link imagealphablending}) IMG_EFFECT_ALPHABLEND Use normal pixel
 *   blending (equivalent of passing to {@link imagealphablending})
 *   IMG_EFFECT_NORMAL Same as IMG_EFFECT_ALPHABLEND. IMG_EFFECT_OVERLAY
 *   Overlay has the effect that black background pixels will remain
 *   black, white background pixels will remain white, but grey
 *   background pixels will take the colour of the foreground pixel.
 * @param int $effect
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function imagelayereffect($image, $effect){}

/**
 * Draws a line between the two given points.
 * 
 * @param resource $image x-coordinate for first point.
 * @param int $x1 y-coordinate for first point.
 * @param int $y1 x-coordinate for second point.
 * @param int $x2 y-coordinate for second point.
 * @param int $y2 The line color. A color identifier created with
 *   {@link imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imageline($image, $x1, $y1, $x2, $y2, $color){}

/**
 * {@link imageloadfont} loads a user-defined bitmap and returns its
 * identifier.
 * 
 * @param string $file The font file format is currently binary and
 *   architecture dependent. This means you should generate the font
 *   files on the same type of CPU as the machine you are running PHP on.
 *   
 *   Font file format byte position C data type description byte 0-3 int
 *   number of characters in the font byte 4-7 int value of first
 *   character in the font (often 32 for space) byte 8-11 int pixel width
 *   of each character byte 12-15 int pixel height of each character byte
 *   16- char array with character data, one byte per pixel in each
 *   character, for a total of (nchars*width*height) bytes.
 * @return int
 * @since PHP 4, PHP 5
 **/
function imageloadfont($file){}

/**
 * {@link imagepalettecopy} copies the palette from the {@link source}
 * image to the {@link destination} image.
 * 
 * @param resource $destination The destination image resource.
 * @param resource $source The source image resource.
 * @return void
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagepalettecopy($destination, $source){}

/**
 * Outputs or saves a PNG image from the given {@link image}.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly.
 * @param string $filename Compression level: from 0 (no compression)
 *   to 9.
 * @param int $quality Allows reducing the PNG file size. It is a
 *   bitmask field which may be set to any combination of the
 *   PNG_FILTER_XXX constants. PNG_NO_FILTER or PNG_ALL_FILTERS may also
 *   be used to respectively disable or activate all filters.
 * @param int $filters
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagepng($image, $filename, $quality, $filters){}

/**
 * {@link imagepolygon} creates a polygon in the given {@link image}.
 * 
 * @param resource $image An array containing the polygon's vertices,
 *   e.g.: points[0] = x0 points[1] = y0 points[2] = x1 points[3] = y1
 * @param array $points Total number of points (vertices).
 * @param int $num_points A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagepolygon($image, $points, $num_points, $color){}

/**
 * Gives the bounding box of a text rectangle using PostScript Type1
 * fonts.
 * 
 * The bounding box is calculated using information available from
 * character metrics, and unfortunately tends to differ slightly from the
 * results achieved by actually rasterizing the text. If the angle is 0
 * degrees, you can expect the text to need 1 pixel more to every
 * direction.
 * 
 * @param string $text The text to be written.
 * @param resource $font A font resource, returned by {@link
 *   imagepsloadfont}.
 * @param int $size {@link size} is expressed in pixels.
 * @return array
 * @since PHP 4, PHP 5
 **/
function imagepsbbox($text, $font, $size){}

/**
 * Loads a character encoding vector from a file and changes the fonts
 * encoding vector to it. As a PostScript fonts default vector lacks most
 * of the character positions above 127, you'll definitely want to change
 * this if you use an other language than English.
 * 
 * If you find yourself using this function all the time, a much better
 * way to define the encoding is to set ps.default_encoding in the
 * configuration file to point to the right encoding file and all fonts
 * you load will automatically have the right encoding.
 * 
 * @param resource $font_index A font resource, returned by {@link
 *   imagepsloadfont}.
 * @param string $encodingfile The exact format of this file is
 *   described in T1libs documentation. T1lib comes with two ready-to-use
 *   files, IsoLatin1.enc and IsoLatin2.enc.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagepsencodefont($font_index, $encodingfile){}

/**
 * Extend or condense a font ({@link font_index}), if the value of the
 * {@link extend} parameter is less than one you will be condensing the
 * font.
 * 
 * @param resource $font_index A font resource, returned by {@link
 *   imagepsloadfont}.
 * @param float $extend Extension value, must be greater than 0.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagepsextendfont($font_index, $extend){}

/**
 * {@link imagepsfreefont} frees memory used by a PostScript Type 1 font.
 * 
 * @param resource $font_index A font resource, returned by {@link
 *   imagepsloadfont}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagepsfreefont($font_index){}

/**
 * Load a PostScript Type 1 font from the given {@link filename}.
 * 
 * @param string $filename Path to the Postscript font file.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function imagepsloadfont($filename){}

/**
 * Slant a given font given.
 * 
 * @param resource $font_index A font resource, returned by {@link
 *   imagepsloadfont}.
 * @param float $slant Slant level.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagepsslantfont($font_index, $slant){}

/**
 * Draws a text on an image using PostScript Type1 fonts.
 * 
 * Refer to PostScript documentation about fonts and their measuring
 * system if you have trouble understanding how this works.
 * 
 * @param resource $image The text to be written.
 * @param string $text A font resource, returned by {@link
 *   imagepsloadfont}.
 * @param resource $font_index {@link size} is expressed in pixels.
 * @param int $size The color in which the text will be painted.
 * @param int $foreground The color to which the text will try to fade
 *   in with antialiasing. No pixels with the color {@link background}
 *   are actually painted, so the background image does not need to be of
 *   solid color.
 * @param int $background x-coordinate for the lower-left corner of the
 *   first character.
 * @param int $x y-coordinate for the lower-left corner of the first
 *   character.
 * @param int $y Allows you to change the default value of a space in a
 *   font. This amount is added to the normal value and can also be
 *   negative. Expressed in character space units, where 1 unit is
 *   1/1000th of an em-square.
 * @param int $space {@link tightness} allows you to control the amount
 *   of white space between characters. This amount is added to the
 *   normal character width and can also be negative. Expressed in
 *   character space units, where 1 unit is 1/1000th of an em-square.
 * @param int $tightness {@link angle} is in degrees.
 * @param float $angle Allows you to control the number of colours used
 *   for antialiasing text. Allowed values are 4 and 16. The higher value
 *   is recommended for text sizes lower than 20, where the effect in
 *   text quality is quite visible. With bigger sizes, use 4. It's less
 *   computationally intensive.
 * @param int $antialias_steps
 * @return array
 * @since PHP 4, PHP 5
 **/
function imagepstext($image, $text, $font_index, $size, $foreground, $background, $x, $y, $space, $tightness, $angle, $antialias_steps){}

/**
 * {@link imagerectangle} creates a rectangle starting at the specified
 * coordinates.
 * 
 * @param resource $image Upper left x coordinate.
 * @param int $x1 Upper left y coordinate 0, 0 is the top left corner
 *   of the image.
 * @param int $y1 Bottom right x coordinate.
 * @param int $x2 Bottom right y coordinate.
 * @param int $y2 A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagerectangle($image, $x1, $y1, $x2, $y2, $color){}

/**
 * Rotates the {@link image} image using the given {@link angle} in
 * degrees.
 * 
 * The center of rotation is the center of the image, and the rotated
 * image may have different dimensions than the original image.
 * 
 * @param resource $image Rotation angle, in degrees.
 * @param float $angle Specifies the color of the uncovered zone after
 *   the rotation
 * @param int $bgd_color If set and non-zero, transparent colors are
 *   ignored (otherwise kept).
 * @param int $ignore_transparent
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function imagerotate($image, $angle, $bgd_color, $ignore_transparent){}

/**
 * {@link imagesavealpha} sets the flag to attempt to save full alpha
 * channel information (as opposed to single-color transparency) when
 * saving PNG images.
 * 
 * You have to unset alphablending (imagealphablending($im, false)), to
 * use it.
 * 
 * Alpha channel is not supported by all browsers, if you have problem
 * with your browser, try to load your script with an alpha channel
 * compliant browser, e.g. latest Mozilla.
 * 
 * @param resource $image Whether to save the alpha channel or not.
 *   Default to .
 * @param bool $saveflag
 * @return bool
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function imagesavealpha($image, $saveflag){}

/**
 * {@link imagesetbrush} sets the brush image to be used by all line
 * drawing functions (such as {@link imageline} and {@link imagepolygon})
 * when drawing with the special colors IMG_COLOR_BRUSHED or
 * IMG_COLOR_STYLEDBRUSHED.
 * 
 * @param resource $image An image resource.
 * @param resource $brush
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagesetbrush($image, $brush){}

/**
 * {@link imagesetpixel} draws a pixel at the specified coordinate.
 * 
 * @param resource $image x-coordinate.
 * @param int $x y-coordinate.
 * @param int $y A color identifier created with {@link
 *   imagecolorallocate}.
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagesetpixel($image, $x, $y, $color){}

/**
 * {@link imagesetstyle} sets the style to be used by all line drawing
 * functions (such as {@link imageline} and {@link imagepolygon}) when
 * drawing with the special color IMG_COLOR_STYLED or lines of images
 * with color IMG_COLOR_STYLEDBRUSHED.
 * 
 * @param resource $image An array of pixel colors. You can use the
 *   IMG_COLOR_TRANSPARENT constant to add a transparent pixel.
 * @param array $style
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagesetstyle($image, $style){}

/**
 * {@link imagesetthickness} sets the thickness of the lines drawn when
 * drawing rectangles, polygons, ellipses etc. etc. to {@link thickness}
 * pixels.
 * 
 * @param resource $image Thickness, in pixels.
 * @param int $thickness
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagesetthickness($image, $thickness){}

/**
 * {@link imagesettile} sets the tile image to be used by all region
 * filling functions (such as {@link imagefill} and {@link
 * imagefilledpolygon}) when filling with the special color
 * IMG_COLOR_TILED.
 * 
 * A tile is an image used to fill an area with a repeated pattern. Any
 * GD image can be used as a tile, and by setting the transparent color
 * index of the tile image with {@link imagecolortransparent}, a tile
 * allows certain parts of the underlying area to shine through can be
 * created.
 * 
 * @param resource $image The image resource to be used as a tile.
 * @param resource $tile
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagesettile($image, $tile){}

/**
 * Draws a {@link string} at the given coordinates.
 * 
 * @param resource $image x-coordinate of the upper left corner.
 * @param int $font y-coordinate of the upper left corner.
 * @param int $x The string to be written.
 * @param int $y A color identifier created with {@link
 *   imagecolorallocate}.
 * @param string $string
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagestring($image, $font, $x, $y, $string, $color){}

/**
 * Draws a {@link string} vertically at the given coordinates.
 * 
 * @param resource $image x-coordinate of the bottom left corner.
 * @param int $font y-coordinate of the bottom left corner.
 * @param int $x The string to be written.
 * @param int $y A color identifier created with {@link
 *   imagecolorallocate}.
 * @param string $string
 * @param int $color
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imagestringup($image, $font, $x, $y, $string, $color){}

/**
 * Returns the width of the given {@link image} resource.
 * 
 * @param resource $image
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagesx($image){}

/**
 * Returns the height of the given {@link image} resource.
 * 
 * @param resource $image
 * @return int
 * @since PHP 4, PHP 5
 **/
function imagesy($image){}

/**
 * {@link imagetruecolortopalette} converts a truecolor image to a
 * palette image. The code for this function was originally drawn from
 * the Independent JPEG Group library code, which is excellent. The code
 * has been modified to preserve as much alpha channel information as
 * possible in the resulting palette, in addition to preserving colors as
 * well as possible. This does not work as well as might be hoped. It is
 * usually best to simply produce a truecolor output image instead, which
 * guarantees the highest output quality.
 * 
 * @param resource $image Indicates if the image should be dithered -
 *   if it is then dithering will be used which will result in a more
 *   speckled image but with better color approximation.
 * @param bool $dither Sets the maximum number of colors that should be
 *   retained in the palette.
 * @param int $ncolors
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function imagetruecolortopalette($image, $dither, $ncolors){}

/**
 * This function calculates and returns the bounding box in pixels for a
 * TrueType text.
 * 
 * @param float $size The font size. Depending on your version of GD,
 *   this should be specified as the pixel size (GD1) or point size
 *   (GD2).
 * @param float $angle Angle in degrees in which {@link text} will be
 *   measured.
 * @param string $fontfile The name of the TrueType font file (can be a
 *   URL). Depending on which version of the GD library that PHP is
 *   using, it may attempt to search for files that do not begin with a
 *   leading '/' by appending '.ttf' to the filename and searching along
 *   a library-defined font path.
 * @param string $text The string to be measured.
 * @return array
 * @since PHP 4, PHP 5
 **/
function imagettfbbox($size, $angle, $fontfile, $text){}

/**
 * Writes the given {@link text} into the image using TrueType fonts.
 * 
 * @param resource $image The font size. Depending on your version of
 *   GD, this should be specified as the pixel size (GD1) or point size
 *   (GD2).
 * @param float $size The angle in degrees, with 0 degrees being
 *   left-to-right reading text. Higher values represent a
 *   counter-clockwise rotation. For example, a value of 90 would result
 *   in bottom-to-top reading text.
 * @param float $angle The coordinates given by {@link x} and {@link y}
 *   will define the basepoint of the first character (roughly the
 *   lower-left corner of the character). This is different from the
 *   {@link imagestring}, where {@link x} and {@link y} define the
 *   upper-left corner of the first character. For example, "top left" is
 *   0, 0.
 * @param int $x The y-ordinate. This sets the position of the fonts
 *   baseline, not the very bottom of the character.
 * @param int $y The color index. Using the negative of a color index
 *   has the effect of turning off antialiasing. See {@link
 *   imagecolorallocate}.
 * @param int $color The path to the TrueType font you wish to use.
 *   Depending on which version of the GD library PHP is using, when
 *   {@link fontfile} does not begin with a leading / then .ttf will be
 *   appended to the filename and the library will attempt to search for
 *   that filename along a library-defined font path. When using versions
 *   of the GD library lower than 2.0.18, a space character, rather than
 *   a semicolon, was used as the 'path separator' for different font
 *   files. Unintentional use of this feature will result in the warning
 *   message: Warning: Could not find/open font. For these affected
 *   versions, the only solution is moving the font to a path which does
 *   not contain spaces. In many cases where a font resides in the same
 *   directory as the script using it the following trick will alleviate
 *   any include problems.
 *   
 *   <?php // Set the enviroment variable for GD putenv('GDFONTPATH=' .
 *   realpath('.'));
 *   
 *   // Name the font to be used (note the lack of the .ttf extension)
 *   $font = 'SomeFont'; ?>
 * @param string $fontfile The text string in UTF-8 encoding. May
 *   include decimal numeric character references (of the form: &#8364;)
 *   to access characters in a font beyond position 127. The hexadecimal
 *   format (like &#xA9;) is supported. Strings in UTF-8 encoding can be
 *   passed directly. Named entities, such as &copy;, are not supported.
 *   Consider using {@link html_entity_decode} to decode these named
 *   entities into UTF-8 strings (html_entity_decode() supports this as
 *   of PHP 5.0.0). If a character is used in the string which is not
 *   supported by the font, a hollow rectangle will replace the
 *   character.
 * @param string $text
 * @return array
 * @since PHP 4, PHP 5
 **/
function imagettftext($image, $size, $angle, $x, $y, $color, $fontfile, $text){}

/**
 * Returns the image types supported by the current PHP installation.
 * 
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function imagetypes(){}

/**
 * {@link imagewbmp} outputs or save a WBMP version of the given {@link
 * image}.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly.
 * @param string $filename You can set the foreground color with this
 *   parameter by setting an identifier obtained from {@link
 *   imagecolorallocate}. The default foreground color is black.
 * @param int $foreground
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function imagewbmp($image, $filename, $foreground){}

/**
 * Outputs or save an XBM version of the given {@link image}.
 * 
 * @param resource $image The path to save the file to. If not set or ,
 *   the raw image stream will be outputted directly.
 * @param string $filename You can set the foreground color with this
 *   parameter by setting an identifier obtained from {@link
 *   imagecolorallocate}. The default foreground color is black.
 * @param int $foreground
 * @return bool
 * @since PHP 5
 **/
function imagexbm($image, $filename, $foreground){}

/**
 * Returns the extension for the given IMAGETYPE_XXX constant.
 * 
 * @param int $imagetype One of the IMAGETYPE_XXX constant.
 * @param bool $include_dot Whether to prepend a dot to the extension
 *   or not. Default to .
 * @return string
 * @since PHP 5
 **/
function image_type_to_extension($imagetype, $include_dot){}

/**
 * The {@link image_type_to_mime_type} function will determine the
 * Mime-Type for an IMAGETYPE constant.
 * 
 * @param int $imagetype One of the IMAGETYPE_XXX constants.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function image_type_to_mime_type($imagetype){}

/**
 * Convert an 8bit string to a quoted-printable string (according to
 * RFC2045, section 6.7).
 * 
 * @param string $string The 8bit string to convert
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_8bit($string){}

/**
 * Returns all of the IMAP alert messages generated since the last {@link
 * imap_alerts} call, or the beginning of the page.
 * 
 * When {@link imap_alerts} is called, the alert stack is subsequently
 * cleared. The IMAP specification requires that these messages be passed
 * to the user.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_alerts(){}

/**
 * Appends a string {@link message} to the specified {@link mailbox}.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox The message to be append, as a string When
 *   talking to the Cyrus IMAP server, you must use "\r\n" as your
 *   end-of-line terminator instead of "\n" or the operation will fail
 * @param string $message If provided, the {@link options} will also be
 *   written to the {@link mailbox}
 * @param string $options If this parameter is set, it will set the
 *   INTERNALDATE on the appended message. The parameter should be a date
 *   string that conforms to the rfc2060 specifications for a date_time
 *   value.
 * @param string $internal_date
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_append($imap_stream, $mailbox, $message, $options, $internal_date){}

/**
 * Decodes the given BASE-64 encoded {@link text}.
 * 
 * @param string $text The encoded text
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_base64($text){}

/**
 * Convert an 8bit string to a base64 string according to RFC2045,
 * Section 6.8.
 * 
 * @param string $string The 8bit string
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_binary($string){}

/**
 * {@link imap_body} returns the body of the message, numbered {@link
 * msg_number} in the current mailbox.
 * 
 * {@link imap_body} will only return a verbatim copy of the message
 * body. To extract single parts of a multipart MIME-encoded message you
 * have to use {@link imap_fetchstructure} to analyze its structure and
 * {@link imap_fetchbody} to extract a copy of a single body component.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number The optional {@link options} are a bit mask
 *   with one or more of the following: FT_UID - The {@link msg_number}
 *   is a UID FT_PEEK - Do not set the \Seen flag if not already set
 *   FT_INTERNAL - The return string is in internal format, will not
 *   canonicalize to CRLF.
 * @param int $options
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_body($imap_stream, $msg_number, $options){}

/**
 * Read the structure of a specified body section of a specific message.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number The body section to read
 * @param string $section
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_bodystruct($imap_stream, $msg_number, $section){}

/**
 * Checks information about the current mailbox.
 * 
 * @param resource $imap_stream
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_check($imap_stream){}

/**
 * This function causes a store to delete the specified {@link flag} to
 * the flags set for the messages in the specified {@link sequence}.
 * 
 * @param resource $imap_stream A sequence of message numbers. You can
 *   enumerate desired messages with the X,Y syntax, or retrieve all
 *   messages within an interval with the X:Y syntax
 * @param string $sequence The flags which you can unset are "\\Seen",
 *   "\\Answered", "\\Flagged", "\\Deleted", and "\\Draft" (as defined by
 *   RFC2060)
 * @param string $flag {@link options} are a bit mask and may contain
 *   the single option: ST_UID - The sequence argument contains UIDs
 *   instead of sequence numbers
 * @param int $options
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_clearflag_full($imap_stream, $sequence, $flag, $options){}

/**
 * Closes the imap stream.
 * 
 * @param resource $imap_stream If set to CL_EXPUNGE, the function will
 *   silently expunge the mailbox before closing, removing all messages
 *   marked for deletion. You can achieve the same thing by using {@link
 *   imap_expunge}
 * @param int $flag
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_close($imap_stream, $flag){}

/**
 * Creates a new mailbox specified by {@link mailbox}.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information. Names containing international characters
 *   should be encoded by {@link imap_utf7_encode}
 * @param string $mailbox
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_createmailbox($imap_stream, $mailbox){}

/**
 * Marks messages listed in {@link msg_number} for deletion. Messages
 * marked for deletion will stay in the mailbox until either {@link
 * imap_expunge} is called or {@link imap_close} is called with the
 * optional parameter CL_EXPUNGE.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number You can set the FT_UID which tells the
 *   function to treat the {@link msg_number} argument as an UID.
 * @param int $options
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_delete($imap_stream, $msg_number, $options){}

/**
 * Deletes the specified {@link mailbox}.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_deletemailbox($imap_stream, $mailbox){}

/**
 * Gets all of the IMAP errors (if any) that have occurred during this
 * page request or since the error stack was reset.
 * 
 * When {@link imap_errors} is called, the error stack is subsequently
 * cleared.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_errors(){}

/**
 * Deletes all the messages marked for deletion by {@link imap_delete},
 * {@link imap_mail_move}, or {@link imap_setflag_full}.
 * 
 * @param resource $imap_stream
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_expunge($imap_stream){}

/**
 * Fetch of a particular section of the body of the specified messages.
 * Body parts are not decoded by this function.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number The part number. It is a string of integers
 *   delimited by period which index into a body part list as per the
 *   IMAP4 specification
 * @param string $section A bitmask with one or more of the following:
 *   FT_UID - The {@link msg_number} is a UID FT_PEEK - Do not set the
 *   \Seen flag if not already set FT_INTERNAL - The return string is in
 *   internal format, will not canonicalize to CRLF.
 * @param int $options
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_fetchbody($imap_stream, $msg_number, $section, $options){}

/**
 * This function causes a fetch of the complete, unfiltered RFC2822
 * format header of the specified message.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number The possible {@link options} are: FT_UID -
 *   The {@link msgno} argument is a UID FT_INTERNAL - The return string
 *   is in "internal" format, without any attempt to canonicalize to CRLF
 *   newlines FT_PREFETCHTEXT - The RFC822.TEXT should be pre-fetched at
 *   the same time. This avoids an extra RTT on an IMAP connection if a
 *   full message text is desired (e.g. in a "save to local file"
 *   operation)
 * @param int $options
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_fetchheader($imap_stream, $msg_number, $options){}

/**
 * Fetches all the structured information for a given message.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number This optional parameter only has a single
 *   option, FT_UID, which tells the function to treat the {@link
 *   msg_number} argument as a UID.
 * @param int $options
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_fetchstructure($imap_stream, $msg_number, $options){}

/**
 * This function fetches mail headers for the given {@link sequence} and
 * returns an overview of their contents.
 * 
 * @param resource $imap_stream A message sequence description. You can
 *   enumerate desired messages with the X,Y syntax, or retrieve all
 *   messages within an interval with the X:Y syntax
 * @param string $sequence {@link sequence} will contain a sequence of
 *   message indices or UIDs, if this parameter is set to FT_UID.
 * @param int $options
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_fetch_overview($imap_stream, $sequence, $options){}

/**
 * Purges the cache of entries of a specific type.
 * 
 * @param resource $imap_stream Specifies the cache to purge. It may
 *   one or a combination of the following constants: IMAP_GC_ELT
 *   (message cache elements), IMAP_GC_ENV (enveloppe and bodies),
 *   IMAP_GC_TEXTS (texts).
 * @param int $caches
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function imap_gc($imap_stream, $caches){}

/**
 * Gets the ACL for a given mailbox.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox
 * @return array
 * @since PHP 5
 **/
function imap_getacl($imap_stream, $mailbox){}

/**
 * Gets information on the mailboxes.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}
 * @param string $ref
 * @param string $pattern
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_getmailboxes($imap_stream, $ref, $pattern){}

/**
 * Gets information about the subscribed mailboxes.
 * 
 * Identical to {@link imap_getmailboxes}, except that it only returns
 * mailboxes that the user is subscribed to.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}
 * @param string $ref
 * @param string $pattern
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_getsubscribed($imap_stream, $ref, $pattern){}

/**
 * Retrieve the quota level settings, and usage statics per mailbox.
 * 
 * For a non-admin user version of this function, please see the {@link
 * imap_get_quotaroot} function of PHP.
 * 
 * @param resource $imap_stream {@link quota_root} should normally be
 *   in the form of user.name where name is the mailbox you wish to
 *   retrieve information about.
 * @param string $quota_root
 * @return array
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function imap_get_quota($imap_stream, $quota_root){}

/**
 * Retrieve the quota settings per user. The limit value represents the
 * total amount of space allowed for this user's total mailbox usage. The
 * usage value represents the user's current total mailbox capacity.
 * 
 * @param resource $imap_stream {@link quota_root} should normally be
 *   in the form of which mailbox (i.e. INBOX).
 * @param string $quota_root
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function imap_get_quotaroot($imap_stream, $quota_root){}

/**
 * Gets information about the given message number by reading its
 * headers.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number Number of characters for the fetchfrom
 *   property. Must be greater than or equal to zero.
 * @param int $fromlength Number of characters for the fetchsubject
 *   property Must be greater than or equal to zero.
 * @param int $subjectlength
 * @param string $defaulthost
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_header($imap_stream, $msg_number, $fromlength, $subjectlength, $defaulthost){}

/**
 * Gets information about the given message number by reading its
 * headers.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number Number of characters for the fetchfrom
 *   property. Must be greater than or equal to zero.
 * @param int $fromlength Number of characters for the fetchsubject
 *   property Must be greater than or equal to zero.
 * @param int $subjectlength
 * @param string $defaulthost
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_headerinfo($imap_stream, $msg_number, $fromlength, $subjectlength, $defaulthost){}

/**
 * Returns headers for all messages in a mailbox.
 * 
 * @param resource $imap_stream
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_headers($imap_stream){}

/**
 * Gets the full text of the last IMAP error message that occurred on the
 * current page. The error stack is untouched; calling {@link
 * imap_last_error} subsequently, with no intervening errors, will return
 * the same error.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_last_error(){}

/**
 * Read the list of mailboxes.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}.
 * @param string $ref
 * @param string $pattern
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_list($imap_stream, $ref, $pattern){}

/**
 * Read the list of mailboxes.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}.
 * @param string $ref
 * @param string $pattern
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_listmailbox($imap_stream, $ref, $pattern){}

/**
 * Returns an array containing the names of the mailboxes that have
 * {@link content} in the text of the mailbox.
 * 
 * This function is similar to {@link imap_listmailbox}, but it will
 * additionally check for the presence of the string {@link content}
 * inside the mailbox data.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}
 * @param string $ref
 * @param string $pattern The searched string
 * @param string $content
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_listscan($imap_stream, $ref, $pattern, $content){}

/**
 * Gets an array of all the mailboxes that you have subscribed.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}
 * @param string $ref
 * @param string $pattern
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_listsubscribed($imap_stream, $ref, $pattern){}

/**
 * Gets an array of all the mailboxes that you have subscribed.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}
 * @param string $ref
 * @param string $pattern
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_lsub($imap_stream, $ref, $pattern){}

/**
 * This function allows sending of emails with correct handling of Cc and
 * Bcc receivers.
 * 
 * The parameters {@link to}, {@link cc} and {@link bcc} are all strings
 * and are all parsed as RFC822 address lists.
 * 
 * @param string $to The receiver
 * @param string $subject The mail subject
 * @param string $message The mail body
 * @param string $additional_headers As string with additional headers
 *   to be set on the mail
 * @param string $cc
 * @param string $bcc The receivers specified in {@link bcc} will get
 *   the mail, but are excluded from the headers.
 * @param string $rpath Use this parameter to specify return path upon
 *   mail delivery failure. This is useful when using PHP as a mail
 *   client for multiple users.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_mail($to, $subject, $message, $additional_headers, $cc, $bcc, $rpath){}

/**
 * Checks the current mailbox status on the server. It is similar to
 * {@link imap_status}, but will additionally sum up the size of all
 * messages in the mailbox, which will take some additional time to
 * execute.
 * 
 * @param resource $imap_stream
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_mailboxmsginfo($imap_stream){}

/**
 * Create a MIME message based on the given {@link envelope} and {@link
 * body} sections.
 * 
 * @param array $envelope An associative array of headers fields. Valid
 *   keys are: "remail", "return_path", "date", "from", "reply_to",
 *   "in_reply_to", "subject", "to", "cc", "bcc", "message_id" and
 *   "custom_headers" (which contains associative array of other
 *   headers).
 * @param array $body An indexed array of bodies A body is an
 *   associative array which can consist of the following keys: "type",
 *   "encoding", "charset", "type.parameters", "subtype", "id",
 *   "description", "disposition.type", "disposition", "contents.data",
 *   "lines", "bytes" and "md5".
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_mail_compose($envelope, $body){}

/**
 * Copies mail messages specified by {@link msglist} to specified
 * mailbox.
 * 
 * @param resource $imap_stream {@link msglist} is a range not just
 *   message numbers (as described in RFC2060).
 * @param string $msglist The mailbox name, see {@link imap_open} for
 *   more information
 * @param string $mailbox {@link options} is a bitmask of one or more
 *   of CP_UID - the sequence numbers contain UIDS CP_MOVE - Delete the
 *   messages from the current mailbox after copying
 * @param int $options
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_mail_copy($imap_stream, $msglist, $mailbox, $options){}

/**
 * Moves mail messages specified by {@link msglist} to the specified
 * {@link mailbox}.
 * 
 * @param resource $imap_stream {@link msglist} is a range not just
 *   message numbers (as described in RFC2060).
 * @param string $msglist The mailbox name, see {@link imap_open} for
 *   more information
 * @param string $mailbox {@link options} is a bitmask and may contain
 *   the single option: CP_UID - the sequence numbers contain UIDS
 * @param int $options
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_mail_move($imap_stream, $msglist, $mailbox, $options){}

/**
 * Decodes MIME message header extensions that are non ASCII text (see
 * RFC2047).
 * 
 * @param string $text The MIME text
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_mime_header_decode($text){}

/**
 * Returns the message sequence number for the given {@link uid}.
 * 
 * This function is the inverse of {@link imap_uid}.
 * 
 * @param resource $imap_stream The message UID
 * @param int $uid
 * @return int
 * @since PHP 4, PHP 5
 **/
function imap_msgno($imap_stream, $uid){}

/**
 * Gets the number of messages in the current mailbox.
 * 
 * @param resource $imap_stream
 * @return int
 * @since PHP 4, PHP 5
 **/
function imap_num_msg($imap_stream){}

/**
 * Gets the number of recent messages in the current mailbox.
 * 
 * @param resource $imap_stream
 * @return int
 * @since PHP 4, PHP 5
 **/
function imap_num_recent($imap_stream){}

/**
 * Opens an IMAP stream to a {@link mailbox}.
 * 
 * This function can also be used to open streams to POP3 and NNTP
 * servers, but some functions and features are only available on IMAP
 * servers.
 * 
 * @param string $mailbox A mailbox name consists of a server and a
 *   mailbox path on this server. The special name INBOX stands for the
 *   current users personal mailbox. Mailbox names that contain
 *   international characters besides those in the printable ASCII space
 *   have to be encoded width {@link imap_utf7_encode}. The server part,
 *   which is enclosed in '{' and '}', consists of the servers name or ip
 *   address, an optional port (prefixed by ':'), and an optional
 *   protocol specification (prefixed by '/'). The server part is
 *   mandatory in all mailbox parameters. All names which start with {
 *   are remote names, and are in the form "{" remote_system_name [":"
 *   port] [flags] "}" [mailbox_name] where: remote_system_name -
 *   Internet domain name or bracketed IP address of server. port -
 *   optional TCP port number, default is the default port for that
 *   service flags - optional flags, see following table. mailbox_name -
 *   remote mailbox name, default is INBOX
 *   
 *   Optional flags for names Flag Description /service=service mailbox
 *   access service, default is "imap" /user=user remote user name for
 *   login on the server /authuser=user remote authentication user; if
 *   specified this is the user name whose password is used (e.g.
 *   administrator) /anonymous remote access as anonymous user /debug
 *   record protocol telemetry in application's debug log /secure do not
 *   transmit a plaintext password over the network /imap, /imap2,
 *   /imap2bis, /imap4, /imap4rev1 equivalent to /service=imap /pop3
 *   equivalent to /service=pop3 /nntp equivalent to /service=nntp /norsh
 *   do not use rsh or ssh to establish a preauthenticated IMAP session
 *   /ssl use the Secure Socket Layer to encrypt the session
 *   /validate-cert validate certificates from TLS/SSL server (this is
 *   the default behavior) /novalidate-cert do not validate certificates
 *   from TLS/SSL server, needed if server uses self-signed certificates
 *   /tls force use of start-TLS to encrypt the session, and reject
 *   connection to servers that do not support it /notls do not do
 *   start-TLS to encrypt the session, even with servers that support it
 *   /readonly request read-only mailbox open (IMAP only; ignored on
 *   NNTP, and an error with SMTP and POP3)
 * @param string $username The user name
 * @param string $password The password associated with the {@link
 *   username}
 * @param int $options The {@link options} are a bit mask with one or
 *   more of the following: OP_READONLY - Open mailbox read-only
 *   OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only)
 *   OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't
 *   open a mailbox. CL_EXPUNGE - Expunge mailbox automatically upon
 *   mailbox close (see also {@link imap_delete} and {@link
 *   imap_expunge}) OP_DEBUG - Debug protocol negotiations OP_SHORTCACHE
 *   - Short (elt-only) caching OP_SILENT - Don't pass up events
 *   (internal use) OP_PROTOTYPE - Return driver prototype OP_SECURE -
 *   Don't do non-secure authentication
 * @param int $n_retries Number of maximum connect attempts
 * @param array $params Connection parameters, the following (string)
 *   keys maybe used to set one or more connection parameters:
 *   DISABLE_AUTHENTICATOR - Disable authentication properties
 * @return resource
 * @since PHP 4, PHP 5
 **/
function imap_open($mailbox, $username, $password, $options, $n_retries, $params){}

/**
 * {@link imap_ping} pings the stream to see if it's still active. It may
 * discover new mail; this is the preferred method for a periodic "new
 * mail check" as well as a "keep alive" for servers which have
 * inactivity timeout.
 * 
 * @param resource $imap_stream
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_ping($imap_stream){}

/**
 * Convert a quoted-printable string to an 8 bit string according to
 * RFC2045, section 6.7.
 * 
 * @param string $string A quoted-printable string
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_qprint($string){}

/**
 * This function renames on old mailbox to new mailbox (see {@link
 * imap_open} for the format of {@link mbox} names).
 * 
 * @param resource $imap_stream The old mailbox name, see {@link
 *   imap_open} for more information
 * @param string $old_mbox The new mailbox name, see {@link imap_open}
 *   for more information
 * @param string $new_mbox
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_renamemailbox($imap_stream, $old_mbox, $new_mbox){}

/**
 * Reopens the specified stream to a new {@link mailbox} on an IMAP or
 * NNTP server.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox The {@link options} are a bit mask with one
 *   or more of the following: OP_READONLY - Open mailbox read-only
 *   OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only)
 *   OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't
 *   open a mailbox. OP_EXPUNGE - Silently expunge recycle stream
 *   CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see
 *   also {@link imap_delete} and {@link imap_expunge})
 * @param int $options Number of maximum connect attempts
 * @param int $n_retries
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_reopen($imap_stream, $mailbox, $options, $n_retries){}

/**
 * Parses the address string as defined in RFC2822 and for each address.
 * 
 * @param string $address A string containing addresses
 * @param string $default_host The default host name
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_rfc822_parse_adrlist($address, $default_host){}

/**
 * Gets an object of various header elements, similar to {@link
 * imap_header}.
 * 
 * @param string $headers The parsed headers data
 * @param string $defaulthost The default host name
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_rfc822_parse_headers($headers, $defaulthost){}

/**
 * Returns a properly formatted email address as defined in RFC2822 given
 * the needed information.
 * 
 * @param string $mailbox The mailbox name, see {@link imap_open} for
 *   more information
 * @param string $host The email host part
 * @param string $personal The name of the account owner
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_rfc822_write_address($mailbox, $host, $personal){}

/**
 * Saves a part or the whole body of the specified message.
 * 
 * @param resource $imap_stream The path to the saved file as a string,
 *   or a valid file descriptor returned by {@link fopen}.
 * @param mixed $file The message number
 * @param int $msg_number The part number. It is a string of integers
 *   delimited by period which index into a body part list as per the
 *   IMAP4 specification
 * @param string $part_number A bitmask with one or more of the
 *   following: FT_UID - The {@link msg_number} is a UID FT_PEEK - Do not
 *   set the \Seen flag if not already set FT_INTERNAL - The return
 *   string is in internal format, will not canonicalize to CRLF.
 * @param int $options
 * @return bool
 * @since PHP 5 >= 5.1.3
 **/
function imap_savebody($imap_stream, $file, $msg_number, $part_number, $options){}

/**
 * Returns an array containing the names of the mailboxes that have
 * {@link content} in the text of the mailbox.
 * 
 * This function is similar to {@link imap_listmailbox}, but it will
 * additionally check for the presence of the string {@link content}
 * inside the mailbox data.
 * 
 * @param resource $imap_stream {@link ref} should normally be just the
 *   server specification as described in {@link imap_open}
 * @param string $ref
 * @param string $pattern The searched string
 * @param string $content
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_scanmailbox($imap_stream, $ref, $pattern, $content){}

/**
 * This function performs a search on the mailbox currently opened in the
 * given IMAP stream.
 * 
 * For example, to match all unanswered messages sent by Mom, you'd use:
 * "UNANSWERED FROM mom". Searches appear to be case insensitive. This
 * list of criteria is from a reading of the UW c-client source code and
 * may be incomplete or inaccurate (see also RFC2060, section 6.4.4).
 * 
 * @param resource $imap_stream A string, delimited by spaces, in which
 *   the following keywords are allowed. Any multi-word arguments (e.g.
 *   FROM "joey smith") must be quoted. ALL - return all messages
 *   matching the rest of the criteria ANSWERED - match messages with the
 *   \\ANSWERED flag set BCC "string" - match messages with "string" in
 *   the Bcc: field BEFORE "date" - match messages with Date: before
 *   "date" BODY "string" - match messages with "string" in the body of
 *   the message CC "string" - match messages with "string" in the Cc:
 *   field DELETED - match deleted messages FLAGGED - match messages with
 *   the \\FLAGGED (sometimes referred to as Important or Urgent) flag
 *   set FROM "string" - match messages with "string" in the From: field
 *   KEYWORD "string" - match messages with "string" as a keyword NEW -
 *   match new messages OLD - match old messages ON "date" - match
 *   messages with Date: matching "date" RECENT - match messages with the
 *   \\RECENT flag set SEEN - match messages that have been read (the
 *   \\SEEN flag is set) SINCE "date" - match messages with Date: after
 *   "date" SUBJECT "string" - match messages with "string" in the
 *   Subject: TEXT "string" - match messages with text "string" TO
 *   "string" - match messages with "string" in the To: UNANSWERED -
 *   match messages that have not been answered UNDELETED - match
 *   messages that are not deleted UNFLAGGED - match messages that are
 *   not flagged UNKEYWORD "string" - match messages that do not have the
 *   keyword "string" UNSEEN - match messages which have not been read
 *   yet
 * @param string $criteria Valid values for {@link options} are SE_UID,
 *   which causes the returned array to contain UIDs instead of messages
 *   sequence numbers.
 * @param int $options
 * @param string $charset
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_search($imap_stream, $criteria, $options, $charset){}

/**
 * Sets the ACL for a giving mailbox.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox The user to give the rights to.
 * @param string $id The rights to give to the user. Passing an empty
 *   string will delete acl.
 * @param string $rights
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imap_setacl($imap_stream, $mailbox, $id, $rights){}

/**
 * Causes a store to add the specified {@link flag} to the flags set for
 * the messages in the specified {@link sequence}.
 * 
 * @param resource $imap_stream A sequence of message numbers. You can
 *   enumerate desired messages with the X,Y syntax, or retrieve all
 *   messages within an interval with the X:Y syntax
 * @param string $sequence The flags which you can set are \Seen,
 *   \Answered, \Flagged, \Deleted, and \Draft as defined by RFC2060.
 * @param string $flag A bit mask that may contain the single option:
 *   ST_UID - The sequence argument contains UIDs instead of sequence
 *   numbers
 * @param int $options
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_setflag_full($imap_stream, $sequence, $flag, $options){}

/**
 * Sets an upper limit quota on a per mailbox basis.
 * 
 * @param resource $imap_stream The mailbox to have a quota set. This
 *   should follow the IMAP standard format for a mailbox: user.name.
 * @param string $quota_root The maximum size (in KB) for the {@link
 *   quota_root}
 * @param int $quota_limit
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function imap_set_quota($imap_stream, $quota_root, $quota_limit){}

/**
 * Gets and sorts message numbers by the given parameters.
 * 
 * @param resource $imap_stream Criteria can be one (and only one) of
 *   the following: SORTDATE - message Date SORTARRIVAL - arrival date
 *   SORTFROM - mailbox in first From address SORTSUBJECT - message
 *   subject SORTTO - mailbox in first To address SORTCC - mailbox in
 *   first cc address SORTSIZE - size of message in octets
 * @param int $criteria Set this to 1 for reverse sorting
 * @param int $reverse The {@link options} are a bitmask of one or more
 *   of the following: SE_UID - Return UIDs instead of sequence numbers
 *   SE_NOPREFETCH - Don't prefetch searched messages
 * @param int $options
 * @param string $search_criteria
 * @param string $charset
 * @return array
 * @since PHP 4, PHP 5
 **/
function imap_sort($imap_stream, $criteria, $reverse, $options, $search_criteria, $charset){}

/**
 * Gets status information about the given {@link mailbox}.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox Valid flags are: SA_MESSAGES - set
 *   $status->messages to the number of messages in the mailbox SA_RECENT
 *   - set $status->recent to the number of recent messages in the
 *   mailbox SA_UNSEEN - set $status->unseen to the number of unseen
 *   (new) messages in the mailbox SA_UIDNEXT - set $status->uidnext to
 *   the next uid to be used in the mailbox SA_UIDVALIDITY - set
 *   $status->uidvalidity to a constant that changes when uids for the
 *   mailbox may no longer be valid SA_ALL - set all of the above
 * @param int $options
 * @return object
 * @since PHP 4, PHP 5
 **/
function imap_status($imap_stream, $mailbox, $options){}

/**
 * Subscribe to a new mailbox.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_subscribe($imap_stream, $mailbox){}

/**
 * Gets a tree of a threaded message.
 * 
 * @param resource $imap_stream
 * @param int $options
 * @return array
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function imap_thread($imap_stream, $options){}

/**
 * Sets or fetches the imap timeout.
 * 
 * @param int $timeout_type One of the following: IMAP_OPENTIMEOUT,
 *   IMAP_READTIMEOUT, IMAP_WRITETIMEOUT, or IMAP_CLOSETIMEOUT.
 * @param int $timeout The timeout, in seconds.
 * @return mixed
 * @since PHP 4 >= 4.3.3, PHP 5
 **/
function imap_timeout($timeout_type, $timeout){}

/**
 * This function returns the UID for the given message sequence number.
 * An UID is a unique identifier that will not change over time while a
 * message sequence number may change whenever the content of the mailbox
 * changes.
 * 
 * This function is the inverse of {@link imap_msgno}.
 * 
 * @param resource $imap_stream The message number.
 * @param int $msg_number
 * @return int
 * @since PHP 4, PHP 5
 **/
function imap_uid($imap_stream, $msg_number){}

/**
 * Removes the deletion flag for a specified message, which is set by
 * {@link imap_delete} or {@link imap_mail_move}.
 * 
 * @param resource $imap_stream The message number
 * @param int $msg_number
 * @param int $flags
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_undelete($imap_stream, $msg_number, $flags){}

/**
 * Unsubscribe from the specified {@link mailbox}.
 * 
 * @param resource $imap_stream The mailbox name, see {@link imap_open}
 *   for more information
 * @param string $mailbox
 * @return bool
 * @since PHP 4, PHP 5
 **/
function imap_unsubscribe($imap_stream, $mailbox){}

/**
 * Decodes modified UTF-7 {@link text} into ISO-8859-1 string.
 * 
 * This function is needed to decode mailbox names that contain certain
 * characters which are not in range of printable ASCII characters.
 * 
 * @param string $text A modified UTF-7 encoding string, as defined in
 *   RFC 2060, section 5.1.3 (original UTF-7 was defined in RFC1642).
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_utf7_decode($text){}

/**
 * Converts {@link data} to modified UTF-7 text.
 * 
 * This is needed to encode mailbox names that contain certain characters
 * which are not in range of printable ASCII characters.
 * 
 * @param string $data An ISO-8859-1 string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_utf7_encode($data){}

/**
 * Converts the given {@link mime_encoded_text} to UTF-8.
 * 
 * @param string $mime_encoded_text A MIME encoded string. MIME
 *   encoding method and the UTF-8 specification are described in RFC2047
 *   and RFC2044 respectively.
 * @return string
 * @since PHP 4, PHP 5
 **/
function imap_utf8($mime_encoded_text){}

/**
 * Join array elements with a {@link glue} string.
 * 
 * @param string $glue Defaults to an empty string. This is not the
 *   preferred usage of {@link implode} as {@link glue} would be the
 *   second parameter and thus, the bad prototype would be used.
 * @param array $pieces The array of strings to implode.
 * @return string
 * @since PHP 4, PHP 5
 **/
function implode($glue, $pieces){}

/**
 * Imports GET/POST/Cookie variables into the global scope. It is useful
 * if you disabled register_globals, but would like to see some variables
 * in the global scope.
 * 
 * If you're interested in importing other variables into the global
 * scope, such as $_SERVER, consider using {@link extract}.
 * 
 * @param string $types Using the {@link types} parameter, you can
 *   specify which request variables to import. You can use 'G', 'P' and
 *   'C' characters respectively for GET, POST and Cookie. These
 *   characters are not case sensitive, so you can also use any
 *   combination of 'g', 'p' and 'c'. POST includes the POST uploaded
 *   file information.
 * @param string $prefix Variable name prefix, prepended before all
 *   variable's name imported into the global scope. So if you have a GET
 *   value named "userid", and provide a prefix "pref_", then you'll get
 *   a global variable named $pref_userid.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function import_request_variables($types, $prefix){}

/**
 * Get the inclued data.
 * 
 * @return array
 **/
function inclued_get_data(){}

/**
 * @param string $in_addr A 32bit IPv4, or 128bit IPv6 address.
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function inet_ntop($in_addr){}

/**
 * This function converts a human readable IPv4 or IPv6 address (if PHP
 * was built with IPv6 support enabled) into an address family
 * appropriate 32bit or 128bit binary structure.
 * 
 * @param string $address A human readable IPv4 or IPv6 address.
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function inet_pton($address){}

/**
 * {@link ingres_autocommit} is called before opening a transaction
 * (before the first call to {@link ingres_query} or just after a call to
 * {@link ingres_rollback} or {@link ingres_commit}) to switch the
 * autocommit mode of the server on or off (when the script begins the
 * autocommit mode is off).
 * 
 * When autocommit mode is on, every query is automatically committed by
 * the server, as if {@link ingres_commit} was called after every call to
 * {@link ingres_query}. To see if autocommit is enabled use, {@link
 * ingres_autocommit_state}.
 * 
 * By default Ingres will rollback any uncommitted transactions at the
 * end of a request. Use this function or {@link ingres_commit} to ensure
 * your data is committed to the database.
 * 
 * @param resource $link The connection link identifier
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_autocommit($link){}

/**
 * {@link ingres_autocommit_state} is called to determine whether the
 * current link has autocommit enabled or not.
 * 
 * @param resource $link The connection link identifier
 * @return bool
 * @since PECL ingres >= 2.0.0
 **/
function ingres_autocommit_state($link){}

/**
 * {@link ingres_charset} is called to determine the character set being
 * used by the Ingres client, from II_CHARSETxx (where xx is the
 * installation code).
 * 
 * @param resource $link The connection link identifier
 * @return string
 * @since PECL ingres >= 2.1.0
 **/
function ingres_charset($link){}

/**
 * {@link ingres_close} closes the connection to the Ingres server that
 * is associated with the specified link.
 * 
 * {@link ingres_close} is usually unnecessary, as it will not close
 * persistent connections and all non-persistent connections are
 * automatically closed at the end of the script.
 * 
 * @param resource $link The connection link identifier
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_close($link){}

/**
 * {@link ingres_commit} commits the currently open transaction, making
 * all changes made to the database permanent.
 * 
 * This closes the transaction. A new transaction can be opened by
 * sending a query with {@link ingres_query}.
 * 
 * You can also have the server commit automatically after every query by
 * calling {@link ingres_autocommit} before opening the transaction.
 * 
 * By default Ingres will roll back any uncommitted transactions at the
 * end of a request. Use this function or {@link ingres_autocommit} to
 * ensure your that data is committed to the database.
 * 
 * @param resource $link The connection link identifier
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_commit($link){}

/**
 * {@link ingres_connect} opens a connection with the given Ingres {@link
 * database}.
 * 
 * The connection is closed when the script ends or when {@link
 * ingres_close} is called on this link.
 * 
 * @param string $database The database name. Must follow the syntax:
 *   [vnode::]dbname[/svr_class]
 * @param string $username The Ingres user name
 * @param string $password The password associated with {@link
 *   username}
 * @param array $options {@link ingres_connect} options Option name
 *   Option type Description Example date_century_boundary integer The
 *   threshold by which a 2-digit year is determined to be in the current
 *   century or in the next century. Equivalent to
 *   II_DATE_CENTURY_BOUNDARY. 50 group string Specifies the group ID of
 *   the user, equivalent to the "-G" flag payroll role string The role
 *   ID of the application. If a role password is required, the parameter
 *   value should be specified as "role/password" effective_user string
 *   The ingres user account being impersonated, equivalent to the "-u"
 *   flag another_user dbms_password string The internal database
 *   password for the user connecting to Ingres s3cr3t table_structure
 *   string The default structure for new tables. Valid values for
 *   table_structure are: INGRES_STRUCTURE_BTREE INGRES_STRUCTURE_HASH
 *   INGRES_STRUCTURE_HEAP INGRES_STRUCTURE_ISAM INGRES_STRUCTURE_CBTREE
 *   INGRES_STRUCTURE_CISAM INGRES_STRUCTURE_CHASH INGRES_STRUCTURE_CHEAP
 *   INGRES_STRUCTURE_BTREE index_structure string The default structure
 *   for new secondary indexes. Valid values for index_structure are:
 *   INGRES_STRUCTURE_CBTREE INGRES_STRUCTURE_CISAM
 *   INGRES_STRUCTURE_CHASH INGRES_STRUCTURE_BTREE INGRES_STRUCTURE_HASH
 *   INGRES_STRUCTURE_ISAM INGRES_STRUCTURE_HASH login_local boolean
 *   Determines how the connection user ID and password are used when a
 *   VNODE is included in the target database string. If set to TRUE, the
 *   user ID and password are used to locally access the VNODE, and the
 *   VNODE login information is used to establish the DBMS connection. If
 *   set to FALSE, the process user ID is used to access the VNODE, and
 *   the connection user ID and password are used in place of the VNODE
 *   login information to establish the DBMS connection. This parameter
 *   is ignored if no VNODE is included in the target database string.
 *   The default is FALSE. TRUE timezone string Controls the timezone of
 *   the session. If not set it will default to the value defined by
 *   II_TIMEZONE_NAME. If II_TIMEZONE_NAME is not defined, NA-PACIFIC
 *   (GMT-8 with Daylight Savings) is used. date_format integer Sets the
 *   allowable input and output format for Ingres dates. Defaults to the
 *   value defined by II_DATE_FORMAT. If II_DATE_FORMAT is not set the
 *   default date format is US, e.g. mm/dd/yy. Valid values for
 *   date_format are: INGRES_DATE_DMY INGRES_DATE_FINISH
 *   INGRES_DATE_GERMAN INGRES_DATE_ISO INGRES_DATE_ISO4 INGRES_DATE_MDY
 *   INGRES_DATE_MULTINATIONAL INGRES_DATE_MULTINATIONAL4 INGRES_DATE_YMD
 *   INGRES_DATE_US INGRES_DATE_MULTINATIONAL4 decimal_separator string
 *   The character identifier for decimal data "," money_lort integer
 *   Leading or trailing currency sign. Valid values for money_lort are:
 *   INGRES_MONEY_LEADING INGRES_MONEY_TRAILING INGRES_MONEY_TRAILING
 *   money_sign string The currency symbol to be used with the MONEY
 *   datatype money_precision integer The precision of the MONEY datatype
 *   3 float4_precision integer Precision of the FLOAT4 datatype 10
 *   float8_precision integer Precision of the FLOAT8 data 10
 *   blob_segment_length integer The amount of data in bytes to fetch at
 *   a time when retrieving BLOB or CLOB data, defaults to 4096 bytes
 *   when not explicitly set 8192
 * @return resource
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_connect($database, $username, $password, $options){}

/**
 * Returns a string with the active cursor name. If no cursor is active
 * then NULL is returned.
 * 
 * @param resource $result The query result identifier
 * @return string
 * @since PECL ingres >= 1.1.0
 **/
function ingres_cursor($result){}

/**
 * Returns an integer containing the last error number. If no error was
 * reported 0 is returned.
 * 
 * If a {@link link} resource is passed to {@link ingres_errno} it
 * returns the last error recorded for the link. If no link is passed,
 * then {@link ingres_errno} returns the last error reported using the
 * default link.
 * 
 * The function, {@link ingres_errno}, should always be called after
 * executing a database query. Calling another function before {@link
 * ingres_errno} is called will reset or change any error code from the
 * last Ingres function call.
 * 
 * @param resource $link The connection link identifier
 * @return int
 * @since PECL ingres >= 1.1.0
 **/
function ingres_errno($link){}

/**
 * Returns a string containing the last error, or NULL if no error has
 * occurred.
 * 
 * If a {@link link} resource is passed to {@link ingres_error}, it
 * returns the last error recorded for the link. If no link is passed
 * then {@link ingres_error} returns the last error reported using the
 * default link.
 * 
 * The function, {@link ingres_error}, should always be called after
 * executing any database query. Calling another function before {@link
 * ingres_error} is called will reset or change any error message from
 * the last Ingres function call.
 * 
 * @param resource $link The connection link identifier
 * @return string
 * @since PECL ingres >= 1.1.0
 **/
function ingres_error($link){}

/**
 * Returns a string containing the last SQLSTATE, or NULL if no error has
 * occurred.
 * 
 * If a {@link link} resource is passed to {@link ingres_errsqlstate}, it
 * returns the last error recorded for the link. If no link is passed,
 * then {@link ingres_errsqlstate} returns the last error reported using
 * the default link.
 * 
 * The function, {@link ingres_errsqlstate}, should always be called
 * after executing any database query. Calling another function before
 * {@link ingres_errsqlstate} is called will reset or change any error
 * message from the last Ingres function call.
 * 
 * @param resource $link The connection link identifier
 * @return string
 * @since PECL ingres >= 1.1.0
 **/
function ingres_errsqlstate($link){}

/**
 * {@link ingres_escape_string} is used to escape certain characters
 * within a string before it is sent to the database server.
 * 
 * @param resource $link The connection link identifier
 * @param string $source_string The source string to be parsed
 * @return string
 * @since PECL ingres >= 2.1.0
 **/
function ingres_escape_string($link, $source_string){}

/**
 * Execute a query prepared using {@link ingres_prepare}.
 * 
 * @param resource $result The result query identifier
 * @param array $params An array of parameter values to be used with
 *   the query
 * @param string $types A string containing a sequence of types for the
 *   parameter values passed. See the types parameter in {@link
 *   ingres_query} for the list of type codes.
 * @return boolean
 * @since PECL ingres >= 1.1.0
 **/
function ingres_execute($result, $params, $types){}

/**
 * This function is an extended version of {@link ingres_fetch_row}. In
 * addition to storing the data in the numeric indices of the result
 * array, it also stores the data in associative indices, using the field
 * names as keys.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence. To access the another column or
 * columns of the same name, you must use the numeric index of the column
 * or make an alias for the column. For example:
 * 
 * <?php
 * 
 * $result = ingres_query($link, "select ap_place as city, ap_ccode as
 * country from airport where ap_iatacode = 'VLL'"); $result =
 * ingres_fetch_array($result); $foo = $result["city"]; $bar =
 * $result["country"];
 * 
 * ?>
 * 
 * With regard to speed, the function is identical to {@link
 * ingres_fetch_object}, and almost as quick as {@link ingres_fetch_row}
 * (the difference is insignificant).
 * 
 * By default, arrays created by {@link ingres_fetch_array} start from
 * position 1 and not 0 as with other DBMS extensions. The starting
 * position can be adjusted to 0 using the configuration parameter
 * ingres.array_index_start.
 * 
 * @param resource $result The query result identifier
 * @param int $result_type The result type. This {@link result_type}
 *   can be INGRES_NUM for enumerated array, INGRES_ASSOC for associative
 *   array, or INGRES_BOTH (default).
 * @return array
 * @since PHP 5 = 1.0.0
 **/
function ingres_fetch_array($result, $result_type){}

/**
 * This function is stores the data fetched from a query executed using
 * {@link ingres_query} in an associative array, using the field names as
 * keys.
 * 
 * With regard to speed, the function is identical to {@link
 * ingres_fetch_object}, and almost as quick as {@link ingres_fetch_row}
 * (the difference is insignificant).
 * 
 * By default, arrays created by {@link ingres_fetch_assoc} start from
 * position 1 and not 0 as with other DBMS extensions. The starting
 * position can be adjusted to 0 using the configuration parameter
 * ingres.array_index_start.
 * 
 * @param resource $result The query result identifier
 * @return array
 * @since PECL ingres >= 2.2.2
 **/
function ingres_fetch_assoc($result){}

/**
 * This function is similar to {@link ingres_fetch_array}, with one
 * difference - an object is returned instead of an array. Indirectly,
 * this means that you can access the data only by the field names and
 * not by their offsets (numbers are illegal property names).
 * 
 * With regard to speed, the function is identical to {@link
 * ingres_fetch_array}, and almost as quick as {@link ingres_fetch_row}
 * (the difference is insignificant).
 * 
 * @param resource $result The query result identifier
 * @param int $result_type (Optional argument.) {@link result_type} is
 *   a constant and can take the following values: INGRES_ASSOC,
 *   INGRES_NUM, and INGRES_BOTH.
 * @return object
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_fetch_object($result, $result_type){}

/**
 * This function is used to retrieve the return value following the
 * execution of an Ingres database procedure (stored procedure).
 * 
 * @param resource $result The result identifier for a query
 * @return int
 * @since PECL ingres >= 1.4.0
 **/
function ingres_fetch_proc_return($result){}

/**
 * {@link ingres_fetch_row} returns an array that corresponds to the
 * fetched row, or if there are no more rows. Each result column is
 * stored in an array offset, starting at offset 1.
 * 
 * Subsequent calls to {@link ingres_fetch_row} return the next row in
 * the result set, or if there are no more rows.
 * 
 * By default, arrays created by {@link ingres_fetch_row} start from
 * position 1 and not 0 as with other DBMS extensions. The starting
 * position can be adjusted to 0 using the configuration parameter
 * ingres.array_index_start.
 * 
 * @param resource $result The query result identifier
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_fetch_row($result){}

/**
 * {@link ingres_field_length} returns the length of a field. This is the
 * number of bytes the server uses to store the field. For detailed
 * information, see the Ingres OpenAPI User Guide, Appendix "Data Types"
 * in the Ingres documentation.
 * 
 * @param resource $result The query result identifier
 * @param int $index {@link index} is the column number whose length
 *   will be retrieved. The possible values of {@link index} depend upon
 *   the value of ingres.array_index_start. If ingres.array_index_start
 *   is 1 (the default) then {@link index} must be between 1 and the
 *   value returned by {@link ingres_num_fields}. If
 *   ingres.array_index_start is 0 then {@link index} must be between 0
 *   and {@link ingres_num_fields} - 1.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_field_length($result, $index){}

/**
 * {@link ingres_field_name} returns the name of a field in a query
 * result.
 * 
 * @param resource $result The query result identifier
 * @param int $index {@link index} is the field whose name will be
 *   retrieved. The possible values of {@link index} depend upon the
 *   value of ingres.array_index_start. If ingres.array_index_start is 1
 *   (the default) then {@link index} must be between 1 and the value
 *   returned by {@link ingres_num_fields}. If ingres.array_index_start
 *   is 0 then {@link index} must be between 0 and {@link
 *   ingres_num_fields} - 1.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_field_name($result, $index){}

/**
 * Test if a field is nullable.
 * 
 * @param resource $result The query result identifier
 * @param int $index {@link index} is the field whose nullability will
 *   be retrieved. The possible values of {@link index} depend upon the
 *   value of ingres.array_index_start. If ingres.array_index_start is 1
 *   (the default) then {@link index} must be between 1 and the value
 *   returned by {@link ingres_num_fields}. If ingres.array_index_start
 *   is 0 then {@link index} must be between 0 and {@link
 *   ingres_num_fields} - 1.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_field_nullable($result, $index){}

/**
 * {@link ingres_field_precision} returns the precision of a field. This
 * value is used only for decimal, float, and money SQL data types. For
 * detailed information, see the Ingres OpenAPI User Guide, Appendix
 * "Data Types" in the Ingres documentation.
 * 
 * @param resource $result The query result identifier
 * @param int $index {@link index} is the field whose precision will be
 *   retrieved. The possible values of {@link index} depend upon the
 *   value of ingres.array_index_start. If ingres.array_index_start is 1
 *   (the default) then {@link index} must be between 1 and the value
 *   returned by {@link ingres_num_fields}. If ingres.array_index_start
 *   is 0 then {@link index} must be between 0 and {@link
 *   ingres_num_fields} - 1.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_field_precision($result, $index){}

/**
 * {@link ingres_field_scale} returns the scale of a field. This value is
 * used only for the decimal SQL data type. For detailed information, see
 * the Ingres OpenAPI User Guide, Appendix "Data Types" in the Ingres
 * documentation.
 * 
 * @param resource $result The query result identifier
 * @param int $index {@link index} is the field whose scale will be
 *   retrieved. The possible values of {@link index} depend upon the
 *   value of ingres.array_index_start. If ingres.array_index_start is 1
 *   (the default) then {@link index} must be between 1 and the value
 *   returned by {@link ingres_num_fields}. If ingres.array_index_start
 *   is 0 then {@link index} must be between 0 and {@link
 *   ingres_num_fields} - 1.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_field_scale($result, $index){}

/**
 * Get the type of a field in a query result.
 * 
 * @param resource $result The query result identifier
 * @param int $index {@link index} is the field whose type will be
 *   retrieved. The possible values of {@link index} depend upon the
 *   value of ingres.array_index_start. If ingres.array_index_start is 1
 *   (the default) then {@link index} must be between 1 and the value
 *   returned by {@link ingres_num_fields}. If ingres.array_index_start
 *   is 0 then {@link index} must be between 0 and {@link
 *   ingres_num_fields} - 1.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_field_type($result, $index){}

/**
 * @param resource $result The query result identifier
 * @return bool
 * @since PECL ingres >= 2.0.0
 **/
function ingres_free_result($result){}

/**
 * Get the next Ingres error for the last executed query. Each call to
 * {@link ingres_next_error} can be followed by a call to {@link
 * ingres_errno}, {@link ingres_error} or {@link ingres_errsqlstate} to
 * get the respective error number, error text, or SQL STATE. While
 * {@link ingres_next_error} returns , there are more errors to fetch.
 * 
 * @param resource $link The connection link identifier
 * @return bool
 * @since PECL ingres >= 2.0.0
 **/
function ingres_next_error($link){}

/**
 * {@link ingres_num_fields} returns the number of fields in the results
 * returned by the Ingres server after a call to {@link ingres_query}.
 * 
 * @param resource $result The query result identifier
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_num_fields($result){}

/**
 * This function primarily is meant to get the number of rows modified in
 * the database. However, it can be used to retrieve the number of rows
 * to fetch for a SELECT statement.
 * 
 * @param resource $result The result identifier for a query
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_num_rows($result){}

/**
 * Open a persistent connection to an Ingres database.
 * 
 * There are only two differences between this function and {@link
 * ingres_connect}: First, when connecting, the function will initially
 * try to find a (persistent) link that is already opened with the same
 * parameters. If one is found, an identifier for it will be returned
 * instead of opening a new connection. Second, the connection to the
 * Ingres server will not be closed when the execution of the script
 * ends. Instead, the link will remain open for future use ({@link
 * ingres_close} will not close links established by {@link
 * ingres_pconnect}). This type of link is therefore called "persistent".
 * 
 * @param string $database The database name. Must follow the syntax:
 *   [vnode::]dbname[/svr_class]
 * @param string $username The Ingres user name
 * @param string $password The password associated with {@link
 *   username}
 * @param array $options See {@link ingres_connect} for the list of
 *   options that can be passed
 * @return resource
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_pconnect($database, $username, $password, $options){}

/**
 * Prepares a query for execution by {@link ingres_execute}.
 * 
 * The query becomes part of the currently open transaction. If there is
 * no open transaction, {@link ingres_query} opens a new transaction. To
 * close the transaction, you can call either {@link ingres_commit} to
 * commit the changes made to the database or {@link ingres_rollback} to
 * cancel these changes. When the script ends, any open transaction is
 * rolled back (by calling {@link ingres_rollback}). You can also use
 * {@link ingres_autocommit} before opening a new transaction to have
 * every SQL query immediately committed.
 * 
 * @param resource $link The connection link identifier
 * @param string $query A valid SQL query (see the Ingres SQL reference
 *   guide) in the Ingres documentation. See the query parameter in
 *   {@link ingres_query} for a list of SQL statements which cannot be
 *   executed using {@link ingres_prepare}
 * @return mixed
 * @since PECL ingres >= 1.1.0
 **/
function ingres_prepare($link, $query){}

/**
 * {@link ingres_query} sends the given {@link query} to the Ingres
 * server.
 * 
 * The query becomes part of the currently open transaction. If there is
 * no open transaction, {@link ingres_query} opens a new transaction. To
 * close the transaction, you can call either {@link ingres_commit} to
 * commit the changes made to the database or {@link ingres_rollback} to
 * cancel these changes. When the script ends, any open transaction is
 * rolled back (by calling {@link ingres_rollback}). You can also use
 * {@link ingres_autocommit} before opening a new transaction to have
 * every SQL query immediately committed.
 * 
 * @param resource $link The connection link identifier.
 * @param string $query A valid SQL query (see the Ingres SQL reference
 *   guide) in the Ingres documentation. Data inside the query should be
 *   properly escaped. The following types of SQL queries cannot be sent
 *   with this function: close (see {@link ingres_close}) commit (see
 *   {@link ingres_commit}) connect (see {@link ingres_connect})
 *   disconnect (see {@link ingres_close}) get dbevent prepare to commit
 *   rollback (see {@link ingres_rollback}) savepoint set autocommit (see
 *   {@link ingres_autocommit}) all cursor-related queries are
 *   unsupported
 * @param array $params An array of parameter values to be used with
 *   the query
 * @param string $types A string containing a sequence of types for the
 *   parameter values passed. When ingres.describe is enabled, this
 *   parameter can be ignored as the driver automatically fetches the
 *   expected parameter types from the server.
 * @return mixed
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_query($link, $query, $params, $types){}

/**
 * This function is used to position the cursor associated with the
 * result resource before issuing a fetch. If ingres.array_index_start is
 * set to 0 then the first row is 0 else it is 1. {@link
 * ingres_result_seek} can be used only with queries that make use of
 * scrollable cursors. It cannot be used with {@link
 * ingres_unbuffered_query}.
 * 
 * @param resource $result The result identifier for a query
 * @param integer $position The row to position the cursor on. If
 *   ingres.array_index_start is set to 0, then the first row is 0, else
 *   it is 1
 * @return boolean
 * @since PECL ingres >= 2.1.0
 **/
function ingres_result_seek($result, $position){}

/**
 * {@link ingres_rollback} rolls back the currently open transaction,
 * actually cancelling all changes made to the database during the
 * transaction.
 * 
 * This closes the transaction. A new transaction can be opened by
 * sending a query with {@link ingres_query}.
 * 
 * @param resource $link The connection link identifier
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5 = 1.0.0
 **/
function ingres_rollback($link){}

/**
 * {@link ingres_set_environment} is called to set environmental options
 * that affect the output of certain values from Ingres, such as the
 * timezone, date format, decimal character separator, and float
 * precision.
 * 
 * @param resource $link The connection link identifier
 * @param array $options An enumerated array of option name/value
 *   pairs. The following table lists the option name and the expected
 *   type
 *   
 *   Option name Option type Description Example date_century_boundary
 *   integer The threshold by which a 2-digit year is determined to be in
 *   the current century or in the next century. Equivalent to
 *   II_DATE_CENTURY_BOUNDARY 50 timezone string Controls the timezone of
 *   the session. If not set, it will default the value defined by
 *   II_TIMEZONE_NAME. If II_TIMEZONE_NAME is not defined, NA-PACIFIC
 *   (GMT-8 with Daylight Savings) is used. UNITED-KINGDOM date_format
 *   integer Sets the allowable input and output format for Ingres dates.
 *   Defaults to the value defined by II_DATE_FORMAT. If II_DATE_FORMAT
 *   is not set, the default date format is US, for example mm/dd/yy.
 *   Valid values for date_format are: INGRES_DATE_DMY INGRES_DATE_FINISH
 *   INGRES_DATE_GERMAN INGRES_DATE_ISO INGRES_DATE_ISO4 INGRES_DATE_MDY
 *   INGRES_DATE_MULTINATIONAL INGRES_DATE_MULTINATIONAL4 INGRES_DATE_YMD
 *   INGRES_DATE_US INGRES_DATE_ISO4 decimal_separator string The
 *   character identifier for decimal data "," money_lort integer Leading
 *   or trailing currency sign. Valid values for money_lort are:
 *   INGRES_MONEY_LEADING INGRES_MONEY_TRAILING INGRES_MONEY_LEADING
 *   money_sign string The currency symbol to be used with the MONEY
 *   datatype money_precision integer The precision of the MONEY datatype
 *   2 float4_precision integer Precision of the FLOAT4 datatype 10
 *   float8_precision integer Precision of the FLOAT8 data 10
 *   blob_segment_length integer The amount of data in bytes to fetch at
 *   a time when retrieving BLOB or CLOB data. Defaults to 4096 bytes
 *   when not set explicitly 8192
 * @return bool
 * @since PECL ingres >= 1.2.0
 **/
function ingres_set_environment($link, $options){}

/**
 * {@link ingres_unbuffered_query} sends the given {@link query} to the
 * Ingres server.
 * 
 * The query becomes part of the currently open transaction. If there is
 * no open transaction, {@link ingres_unbuffered_query} opens a new
 * transaction. To close the transaction, you can call either {@link
 * ingres_commit} to commit the changes made to the database or {@link
 * ingres_rollback} to cancel these changes. When the script ends, any
 * open transaction is rolled back (by calling {@link ingres_rollback}).
 * You can also use {@link ingres_autocommit} before opening a new
 * transaction to have every SQL query immediately committed. Ingres
 * allows only a single unbuffered statement to be active at any one
 * time. The extension will close any active unbuffered statements before
 * executing any SQL. In addition you cannot use {@link
 * ingres_result_seek} to position the row before fetching.
 * 
 * @param resource $link The connection link identifier
 * @param string $query A valid SQL query (see the Ingres SQL reference
 *   guide) in the Ingres documentation. See the query parameter in
 *   {@link ingres_query} for a list of SQL statements that cannot be
 *   executed via {@link ingres_unbuffered_query}. Data inside the query
 *   should be properly escaped.
 * @param array $params An array of parameter values to be used with
 *   the query
 * @param string $types A string containing a sequence of types for the
 *   parameter values passed. See the types parameter in {@link
 *   ingres_query} for the list of type codes.
 * @return mixed
 **/
function ingres_unbuffered_query($link, $query, $params, $types){}

/**
 * Sets the value of the given configuration option. The configuration
 * option will keep this new value during the script's execution, and
 * will be restored at the script's ending.
 * 
 * @param string $varname Not all the available options can be changed
 *   using {@link ini_set}. There is a list of all available options in
 *   the appendix.
 * @param string $newvalue The new value for the option.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ini_alter($varname, $newvalue){}

/**
 * Returns the value of the configuration option on success.
 * 
 * @param string $varname The configuration option name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ini_get($varname){}

/**
 * Returns all the registered configuration options.
 * 
 * @param string $extension An optional extension name. If set, the
 *   function return only options specific for that extension.
 * @param bool $details Retrieve details settings or only the current
 *   value for each setting. Default is (retrieve details).
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ini_get_all($extension, $details){}

/**
 * Restores a given configuration option to its original value.
 * 
 * @param string $varname The configuration option name.
 * @return void
 * @since PHP 4, PHP 5
 **/
function ini_restore($varname){}

/**
 * Sets the value of the given configuration option. The configuration
 * option will keep this new value during the script's execution, and
 * will be restored at the script's ending.
 * 
 * @param string $varname Not all the available options can be changed
 *   using {@link ini_set}. There is a list of all available options in
 *   the appendix.
 * @param string $newvalue The new value for the option.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ini_set($varname, $newvalue){}

/**
 * {@link inotify_add_watch} adds a new watch or modify an existing watch
 * for the file or directory specified in {@link pathname}.
 * 
 * Using {@link inotify_add_watch} on a watched object replaces the
 * existing watch. Using the IN_MASK_ADD constant adds (OR) events to the
 * existing watch.
 * 
 * @param resource $inotify_instance
 * @param string $pathname File or directory to watch
 * @param int $mask Events to watch for. See .
 * @return int
 * @since PECL inotify >= 0.1.2
 **/
function inotify_add_watch($inotify_instance, $pathname, $mask){}

/**
 * Initialize an inotify instance for use with {@link inotify_add_watch}
 * 
 * @return resource
 * @since PECL inotify >= 0.1.2
 **/
function inotify_init(){}

/**
 * This function allows to know if {@link inotify_read} will block or
 * not. If a number upper than zero is returned, there are pending events
 * and {@link inotify_read} will not block.
 * 
 * @param resource $inotify_instance
 * @return int
 * @since PECL inotify >= 0.1.2
 **/
function inotify_queue_len($inotify_instance){}

/**
 * Read inotify events from an inotify instance.
 * 
 * @param resource $inotify_instance
 * @return array
 * @since PECL inotify >= 0.1.2
 **/
function inotify_read($inotify_instance){}

/**
 * {@link inotify_rm_watch} removes the watch {@link watch_descriptor}
 * from the inotify instance {@link inotify_instance}.
 * 
 * @param resource $inotify_instance
 * @param int $watch_descriptor Watch to remove from the instance
 * @return bool
 * @since PECL inotify >= 0.1.2
 **/
function inotify_rm_watch($inotify_instance, $watch_descriptor){}

/**
 * Checks if the given interface has been defined.
 * 
 * @param string $interface_name The interface name
 * @param bool $autoload Whether to call or not by default.
 * @return bool
 * @since PHP 5 >= 5.0.2
 **/
function interface_exists($interface_name, $autoload){}

/**
 * Return ICU error code name.
 * 
 * @param int $error_code
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function intl_error_name($error_code){}

/**
 * Useful to handle errors occurred in static methods when there's no
 * object to get error code from.
 * 
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function intl_get_error_code(){}

/**
 * Get error message from last internationalization function called.
 * 
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function intl_get_error_message(){}

/**
 * @param int $error_code
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function intl_is_failure($error_code){}

/**
 * Returns the integer value of {@link var}, using the specified {@link
 * base} for the conversion (the default is base 10). {@link intval}
 * should not be used on objects, as doing so will emit an E_NOTICE level
 * error and return 1.
 * 
 * @param mixed $var The scalar value being converted to an integer
 * @param int $base The base for the conversion
 * @return int
 * @since PHP 4, PHP 5
 **/
function intval($var, $base){}

/**
 * Searches {@link haystack} for {@link needle}.
 * 
 * @param mixed $needle The searched value.
 * @param array $haystack The array.
 * @param bool $strict If the third parameter {@link strict} is set to
 *   then the {@link in_array} function will also check the types of the
 *   {@link needle} in the {@link haystack}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function in_array($needle, $haystack, $strict){}

/**
 * The function {@link ip2long} generates an IPv4 Internet network
 * address from its Internet standard format (dotted string)
 * representation.
 * 
 * {@link ip2long} will also work with non-complete IP addresses. Read
 * for more info.
 * 
 * @param string $ip_address A standard format address.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ip2long($ip_address){}

/**
 * Embeds binary IPTC data into a JPEG image.
 * 
 * @param string $iptcdata The data to be written.
 * @param string $jpeg_file_name Path to the JPEG image.
 * @param int $spool Spool flag. If the spool flag is over 2 then the
 *   JPEG will be returned as a string.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function iptcembed($iptcdata, $jpeg_file_name, $spool){}

/**
 * Parses an IPTC block into its single tags.
 * 
 * @param string $iptcblock A binary IPTC block.
 * @return array
 * @since PHP 4, PHP 5
 **/
function iptcparse($iptcblock){}

/**
 * Checks if the given {@link object} is of this class or has this class
 * as one of its parents.
 * 
 * @param object $object The tested object
 * @param string $class_name The class name
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function is_a($object, $class_name){}

/**
 * Finds whether the given variable is an array.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_array($var){}

/**
 * Finds whether the given variable is a boolean.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_bool($var){}

/**
 * Verify that the contents of a variable can be called as a function.
 * This can check that a simple variable contains the name of a valid
 * function, or that an array contains a properly encoded object and
 * function name.
 * 
 * @param callback $name Can be either the name of a function stored in
 *   a string variable, or an object and the name of a method within the
 *   object, like this: array($SomeObject, 'MethodName')
 * @param bool $syntax_only If set to the function only verifies that
 *   {@link name} might be a function or method. It will only reject
 *   simple variables that are not strings, or an array that does not
 *   have a valid structure to be used as a callback. The valid ones are
 *   supposed to have only 2 entries, the first of which is an object or
 *   a string, and the second a string.
 * @param string $callable_name Receives the "callable name". In the
 *   example below it is "someClass::someMethod". Note, however, that
 *   despite the implication that someClass::SomeMethod() is a callable
 *   static method, this is not the case.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function is_callable($name, $syntax_only, &$callable_name){}

/**
 * Tells whether the given filename is a directory.
 * 
 * @param string $filename Path to the file. If {@link filename} is a
 *   relative filename, it will be checked relative to the current
 *   working directory. If {@link filename} is a symbolic or hard link
 *   then the link will be resolved and checked. If you have enabled , or
 *   open_basedir further restrictions may apply.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_dir($filename){}

/**
 * Finds whether the type of the given variable is float.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_double($var){}

/**
 * Tells whether the filename is executable.
 * 
 * @param string $filename Path to the file.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_executable($filename){}

/**
 * Tells whether the given file is a regular file.
 * 
 * @param string $filename Path to the file.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_file($filename){}

/**
 * Checks whether {@link val} is a legal finite on this platform.
 * 
 * @param float $val The value to check
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function is_finite($val){}

/**
 * Finds whether the type of the given variable is float.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_float($var){}

/**
 * Returns if {@link val} is infinite (positive or negative), like the
 * result of log(0) or any value too big to fit into a float on this
 * platform.
 * 
 * @param float $val The value to check
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function is_infinite($val){}

/**
 * Finds whether the type of the given variable is integer.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_int($var){}

/**
 * Finds whether the type of the given variable is integer.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_integer($var){}

/**
 * Tells whether the given file is a symbolic link.
 * 
 * @param string $filename Path to the file.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_link($filename){}

/**
 * Finds whether the type of the given variable is integer.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_long($var){}

/**
 * Checks whether {@link val} is 'not a number', like the result of
 * acos(1.01).
 * 
 * @param float $val The value to check
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function is_nan($val){}

/**
 * Finds whether the given variable is .
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function is_null($var){}

/**
 * Finds whether the given variable is numeric. Numeric strings consist
 * of optional sign, any number of digits, optional decimal part and
 * optional exponential part. Thus +0123.45e6 is a valid numeric value.
 * Hexadecimal notation (0xFF) is allowed too but only without sign,
 * decimal and exponential part.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_numeric($var){}

/**
 * Finds whether the given variable is an object.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_object($var){}

/**
 * Tells whether a file exists and is readable.
 * 
 * @param string $filename Path to the file.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_readable($filename){}

/**
 * Finds whether the type of the given variable is float.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_real($var){}

/**
 * Finds whether the given variable is a resource.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_resource($var){}

/**
 * Finds whether the given variable is a scalar.
 * 
 * Scalar variables are those containing an integer, float, string or
 * boolean. Types array, object and resource are not scalar.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function is_scalar($var){}

/**
 * This function is useful to check if the SOAP call failed, but without
 * using exceptions. To use it, create a SoapClient object with the
 * exceptions option set to zero or . In this case, the SOAP method will
 * return a special SoapFault object which encapsulates the fault details
 * (faultcode, faultstring, faultactor and faultdetails).
 * 
 * If exceptions is not set then SOAP call will throw an exception on
 * error. {@link is_soap_fault} checks if the given parameter is a
 * SoapFault object.
 * 
 * @param mixed $object The object to test.
 * @return bool
 * @since Unknown
 **/
function is_soap_fault($object){}

/**
 * Finds whether the type given variable is string.
 * 
 * @param mixed $var The variable being evaluated.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_string($var){}

/**
 * Checks if the given {@link object} has the class {@link class_name} as
 * one of its parents.
 * 
 * @param mixed $object A class name or an object instance
 * @param string $class_name The class name
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_subclass_of($object, $class_name){}

/**
 * Returns if the file named by {@link filename} was uploaded via HTTP
 * POST. This is useful to help ensure that a malicious user hasn't tried
 * to trick the script into working on files upon which it should not be
 * working--for instance, /etc/passwd.
 * 
 * This sort of check is especially important if there is any chance that
 * anything done with uploaded files could reveal their contents to the
 * user, or even to other users on the same system.
 * 
 * For proper working, the function {@link is_uploaded_file} needs an
 * argument like $_FILES['userfile']['tmp_name'], - the name of the
 * uploaded file on the clients machine $_FILES['userfile']['name'] does
 * not work.
 * 
 * @param string $filename The filename being checked.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function is_uploaded_file($filename){}

/**
 * Returns if the {@link filename} exists and is writable. The filename
 * argument may be a directory name allowing you to check if a directory
 * is writable.
 * 
 * Keep in mind that PHP may be accessing the file as the user id that
 * the web server runs as (often 'nobody'). Safe mode limitations are not
 * taken into account.
 * 
 * @param string $filename The filename being checked.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_writable($filename){}

/**
 * Returns if the {@link filename} exists and is writable. The filename
 * argument may be a directory name allowing you to check if a directory
 * is writable.
 * 
 * Keep in mind that PHP may be accessing the file as the user id that
 * the web server runs as (often 'nobody'). Safe mode limitations are not
 * taken into account.
 * 
 * @param string $filename The filename being checked.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function is_writeable($filename){}

/**
 * Calls a function for every element in an iterator.
 * 
 * @param Traversable $iterator The class to iterate over.
 * @param callback $function The callback function to call on every
 *   element. The function must return in order to continue iterating
 *   over the {@link iterator}.
 * @param array $args Arguments to pass to the callback function.
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function iterator_apply($iterator, $function, $args){}

/**
 * Count the elements in an iterator.
 * 
 * @param Traversable $iterator The iterator being counted.
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function iterator_count($iterator){}

/**
 * Copy the elements of an iterator into an array.
 * 
 * @param Traversable $iterator The iterator being copied.
 * @param bool $use_keys Whether to use the iterator element keys as
 *   index.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function iterator_to_array($iterator, $use_keys){}

/**
 * Clears last Java exception.
 * 
 * @return void
 * @since PHP 4 >= 4.0.2
 **/
function java_last_exception_clear(){}

/**
 * Gets last Java exception.
 * 
 * @return object
 * @since PHP 4 >= 4.0.2
 **/
function java_last_exception_get(){}

/**
 * Returns the day of the week. Can return a string or an integer
 * depending on the mode.
 * 
 * @param int $julianday A julian day number as integer
 * @param int $mode
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function jddayofweek($julianday, $mode){}

/**
 * Returns a string containing a month name. {@link mode} tells this
 * function which calendar to convert the Julian Day Count to, and what
 * type of month names are to be returned. Calendar modes Mode Meaning
 * Values 0 Gregorian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul,
 * Aug, Sep, Oct, Nov, Dec 1 Gregorian January, February, March, April,
 * May, June, July, August, September, October, November, December 2
 * Julian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct,
 * Nov, Dec 3 Julian January, February, March, April, May, June, July,
 * August, September, October, November, December 4 Jewish Tishri,
 * Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan,
 * Tammuz, Av, Elul 5 French Republican Vendemiaire, Brumaire, Frimaire,
 * Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor,
 * Thermidor, Fructidor, Extra
 * 
 * @param int $julianday The Julian Day to operate on
 * @param int $mode The calendar to take the month name from
 * @return string
 * @since PHP 4, PHP 5
 **/
function jdmonthname($julianday, $mode){}

/**
 * Converts a Julian Day Count to the French Republican Calendar.
 * 
 * @param int $juliandaycount A julian day number as integer
 * @return string
 * @since PHP 4, PHP 5
 **/
function jdtofrench($juliandaycount){}

/**
 * Converts Julian Day Count to a string containing the Gregorian date in
 * the format of "month/day/year".
 * 
 * @param int $julianday A julian day number as integer
 * @return string
 * @since PHP 4, PHP 5
 **/
function jdtogregorian($julianday){}

/**
 * Converts a Julian Day Count to the Jewish Calendar.
 * 
 * @param int $juliandaycount A julian day number as integer
 * @param bool $hebrew If the {@link hebrew} parameter is set to , the
 *   {@link fl} parameter is used for Hebrew, string based, output
 *   format.
 * @param int $fl The available formats are:
 *   CAL_JEWISH_ADD_ALAFIM_GERESH, CAL_JEWISH_ADD_ALAFIM,
 *   CAL_JEWISH_ADD_GERESHAYIM.
 * @return string
 * @since PHP 4, PHP 5
 **/
function jdtojewish($juliandaycount, $hebrew, $fl){}

/**
 * Converts Julian Day Count to a string containing the Julian Calendar
 * Date in the format of "month/day/year".
 * 
 * @param int $julianday A julian day number as integer
 * @return string
 * @since PHP 4, PHP 5
 **/
function jdtojulian($julianday){}

/**
 * This function will return a Unix timestamp corresponding to the Julian
 * Day given in {@link jday} or if {@link jday} is not inside the Unix
 * epoch (Gregorian years between 1970 and 2037 or 2440588 <= {@link
 * jday} <= 2465342 ). The time returned is localtime (and not GMT).
 * 
 * @param int $jday A julian day number between 2440588 and 2465342.
 * @return int
 * @since PHP 4, PHP 5
 **/
function jdtounix($jday){}

/**
 * Although this function can handle dates all the way back to the year 1
 * (3761 B.C.), such use may not be meaningful. The Jewish calendar has
 * been in use for several thousand years, but in the early days there
 * was no formula to determine the start of a month. A new month was
 * started when the new moon was first observed.
 * 
 * @param int $month The month as a number from 1 to 13
 * @param int $day The day as a number from 1 to 30
 * @param int $year The year as a number between 1 and 9999
 * @return int
 * @since PHP 4, PHP 5
 **/
function jewishtojd($month, $day, $year){}

/**
 * Join array elements with a {@link glue} string.
 * 
 * @param string $glue Defaults to an empty string. This is not the
 *   preferred usage of {@link implode} as {@link glue} would be the
 *   second parameter and thus, the bad prototype would be used.
 * @param array $pieces The array of strings to implode.
 * @return string
 * @since PHP 4, PHP 5
 **/
function join($glue, $pieces){}

/**
 * Converts a JPEG file into a WBMP file.
 * 
 * @param string $jpegname Path to JPEG file.
 * @param string $wbmpname Path to destination WBMP file.
 * @param int $dest_height Destination image height.
 * @param int $dest_width Destination image width.
 * @param int $threshold Threshold value, between 0 and 8 (inclusive).
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function jpeg2wbmp($jpegname, $wbmpname, $dest_height, $dest_width, $threshold){}

/**
 * Takes a JSON encoded string and converts it into a PHP variable.
 * 
 * @param string $json The {@link json} string being decoded.
 * @param bool $assoc When , returned objects will be converted into
 *   associative arrays.
 * @param int $depth User specified recursion depth.
 * @param int $options Bitmask of JSON decode options. Currently only
 *   JSON_BIGINT_AS_STRING is supported (default is to cast large
 *   integers as floats)
 * @return mixed
 * @since PHP 5 >= 5.2.0, PECL json >= 1.2.0
 **/
function json_decode($json, $assoc, $depth, $options){}

/**
 * Returns a string containing the JSON representation of {@link value}.
 * 
 * @param mixed $value The {@link value} being encoded. Can be any type
 *   except a resource. This function only works with UTF-8 encoded data.
 * @param int $options Bitmask consisting of JSON_HEX_QUOT,
 *   JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_FORCE_OBJECT.
 * @return string
 * @since PHP 5 >= 5.2.0, PECL json >= 1.2.0
 **/
function json_encode($value, $options){}

/**
 * Returns the last error (if any) occurred by last JSON parsing.
 * 
 * @return int
 * @since PHP 5 >= 5.3.0
 **/
function json_last_error(){}

/**
 * Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.
 * 
 * Although this function can handle dates all the way back to 4713 B.C.,
 * such use may not be meaningful. The calendar was created in 46 B.C.,
 * but the details did not stabilize until at least 8 A.D., and perhaps
 * as late at the 4th century. Also, the beginning of a year varied from
 * one culture to another - not all accepted January as the first month.
 * 
 * @param int $month The month as a number from 1 (for January) to 12
 *   (for December)
 * @param int $day The day as a number from 1 to 31
 * @param int $year The year as a number between -4713 and 9999
 * @return int
 * @since PHP 4, PHP 5
 **/
function juliantojd($month, $day, $year){}

/**
 * {@link kadm5_chpass_principal} sets the new password {@link password}
 * for the {@link principal}.
 * 
 * @param resource $handle A KADM5 handle.
 * @param string $principal The principal.
 * @param string $password The new password.
 * @return bool
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_chpass_principal($handle, $principal, $password){}

/**
 * Creates a {@link principal} with the given {@link password}.
 * 
 * @param resource $handle A KADM5 handle.
 * @param string $principal The principal.
 * @param string $password If {@link password} is omitted or is , a
 *   random key will be generated.
 * @param array $options It is possible to specify several optional
 *   parameters within the array {@link options}. Allowed are the
 *   following options: KADM5_PRINC_EXPIRE_TIME, KADM5_PW_EXPIRATION,
 *   KADM5_ATTRIBUTES, KADM5_MAX_LIFE, KADM5_KVNO, KADM5_POLICY,
 *   KADM5_CLEARPOLICY, KADM5_MAX_RLIFE.
 * @return bool
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_create_principal($handle, $principal, $password, $options){}

/**
 * Removes the {@link principal} from the Kerberos database.
 * 
 * @param resource $handle A KADM5 handle.
 * @param string $principal The removed principal.
 * @return bool
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_delete_principal($handle, $principal){}

/**
 * Closes the connection to the admin server and releases all related
 * resources.
 * 
 * @param resource $handle A KADM5 handle.
 * @return bool
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_destroy($handle){}

/**
 * Flush all changes to the Kerberos database, leaving the connection to
 * the Kerberos admin server open.
 * 
 * @param resource $handle A KADM5 handle.
 * @return bool
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_flush($handle){}

/**
 * Gets an array containing the policies's names.
 * 
 * @param resource $handle A KADM5 handle.
 * @return array
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_get_policies($handle){}

/**
 * Gets the principal's entries from the Kerberos database.
 * 
 * @param resource $handle A KADM5 handle.
 * @param string $principal The principal.
 * @return array
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_get_principal($handle, $principal){}

/**
 * {@link kadm5_get_principals} returns an array containing the
 * principals's names.
 * 
 * @param resource $handle A KADM5 handle.
 * @return array
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_get_principals($handle){}

/**
 * Opens a connection with the KADM5 library using the {@link principal}
 * and the given {@link password} to obtain initial credentials from the
 * {@link admin_server}.
 * 
 * @param string $admin_server The server.
 * @param string $realm Defines the authentication domain for the
 *   connection.
 * @param string $principal The principal.
 * @param string $password If {@link password} is omitted or is , a
 *   random key will be generated.
 * @return resource
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_init_with_password($admin_server, $realm, $principal, $password){}

/**
 * Modifies a {@link principal} according to the given {@link options}.
 * 
 * @param resource $handle A KADM5 handle.
 * @param string $principal The principal.
 * @param array $options It is possible to specify several optional
 *   parameters within the array {@link options}. Allowed are the
 *   following options: KADM5_PRINC_EXPIRE_TIME, KADM5_PW_EXPIRATION,
 *   KADM5_ATTRIBUTES, KADM5_MAX_LIFE, KADM5_KVNO, KADM5_POLICY,
 *   KADM5_CLEARPOLICY, KADM5_MAX_RLIFE. KADM5_FAIL_AUTH_COUNT.
 * @return bool
 * @since PECL kadm5 >= 0.2.3
 **/
function kadm5_modify_principal($handle, $principal, $options){}

/**
 * {@link key} returns the index element of the current array position.
 * 
 * @param array $array The array.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function key(&$array){}

/**
 * Sorts an array by key in reverse order, maintaining key to data
 * correlations. This is useful mainly for associative arrays.
 * 
 * @param array $array The input array.
 * @param int $sort_flags You may modify the behavior of the sort using
 *   the optional parameter {@link sort_flags}, for details see {@link
 *   sort}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function krsort(&$array, $sort_flags){}

/**
 * Sorts an array by key, maintaining key to data correlations. This is
 * useful mainly for associative arrays.
 * 
 * @param array $array The input array.
 * @param int $sort_flags You may modify the behavior of the sort using
 *   the optional parameter {@link sort_flags}, for details see {@link
 *   sort}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ksort(&$array, $sort_flags){}

/**
 * Returns a string with the first character of {@link str} , lowercased
 * if that character is alphabetic.
 * 
 * Note that 'alphabetic' is determined by the current locale. For
 * instance, in the default "C" locale characters such as umlaut-a ()
 * will not be converted.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function lcfirst($str){}

/**
 * {@link lcg_value} returns a pseudo random number in the range of (0,
 * 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 -
 * 249. The period of this function is equal to the product of both
 * primes.
 * 
 * @return float
 * @since PHP 4, PHP 5
 **/
function lcg_value(){}

/**
 * Attempts to change the group of the symlink {@link filename} to {@link
 * group}.
 * 
 * Only the superuser may change the group of a symlink arbitrarily;
 * other users may change the group of a symlink to any group of which
 * that user is a member.
 * 
 * @param string $filename Path to the symlink.
 * @param mixed $group The group specified by name or number.
 * @return bool
 * @since PHP 5 >= 5.1.2
 **/
function lchgrp($filename, $group){}

/**
 * Attempts to change the owner of the symlink {@link filename} to user
 * {@link user}.
 * 
 * Only the superuser may change the owner of a symlink.
 * 
 * @param string $filename Path to the file.
 * @param mixed $user User name or number.
 * @return bool
 * @since PHP 5 >= 5.1.2
 **/
function lchown($filename, $user){}

/**
 * Translate ISO-8859 characters to t61 characters.
 * 
 * This function is useful if you have to talk to a legacy LDAPv2 server.
 * 
 * @param string $value The text to be translated.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function ldap_8859_to_t61($value){}

/**
 * Add entries in the LDAP directory.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param array $entry An array that specifies the information about
 *   the entry. The values in the entries are indexed by individual
 *   attributes. In case of multiple values for an attribute, they are
 *   indexed using integers starting with 0. <?php $entree["attribut1"] =
 *   "value"; $entree["attribut2"][0] = "value1"; $entree["attribut2"][1]
 *   = "value2"; ?>
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_add($link_identifier, $dn, $entry){}

/**
 * Binds to the LDAP directory with specified RDN and password.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $bind_rdn
 * @param string $bind_password
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_bind($link_identifier, $bind_rdn, $bind_password){}

/**
 * Unbinds from the LDAP directory.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_close($link_identifier){}

/**
 * Compare {@link value} of {@link attribute} with value of same
 * attribute in an LDAP directory entry.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param string $attribute The attribute name.
 * @param string $value The compared value.
 * @return mixed
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function ldap_compare($link_identifier, $dn, $attribute, $value){}

/**
 * Establishes a connection to a LDAP server on a specified {@link
 * hostname} and {@link port}.
 * 
 * @param string $hostname If you are using OpenLDAP 2.x.x you can
 *   specify a URL instead of the hostname. To use LDAP with SSL, compile
 *   OpenLDAP 2.x.x with SSL support, configure PHP with SSL, and set
 *   this parameter as ldaps://hostname/.
 * @param int $port The port to connect to. Not used when using URLs.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ldap_connect($hostname, $port){}

/**
 * Returns the number of entries stored in the result of previous search
 * operations.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_identifier The internal LDAP result.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ldap_count_entries($link_identifier, $result_identifier){}

/**
 * Deletes a particular entry in LDAP directory.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_delete($link_identifier, $dn){}

/**
 * Turns the specified {@link dn}, into a more user-friendly form,
 * stripping off type names.
 * 
 * @param string $dn The distinguished name of an LDAP entity.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ldap_dn2ufn($dn){}

/**
 * Returns the string error message explaining the error number {@link
 * errno}. While LDAP errno numbers are standardized, different libraries
 * return different or even localized textual error messages. Never check
 * for a specific error message text, but always use an error number to
 * check.
 * 
 * @param int $errno The error number.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ldap_err2str($errno){}

/**
 * Returns the standardized error number returned by the last LDAP
 * command. This number can be converted into a textual error message
 * using {@link ldap_err2str}.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ldap_errno($link_identifier){}

/**
 * Returns the string error message explaining the error generated by the
 * last LDAP command for the given {@link link_identifier}. While LDAP
 * errno numbers are standardized, different libraries return different
 * or even localized textual error messages. Never check for a specific
 * error message text, but always use an error number to check.
 * 
 * Unless you lower your warning level in your sufficiently or prefix
 * your LDAP commands with @ (at) characters to suppress warning output,
 * the errors generated will also show up in your HTML output.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ldap_error($link_identifier){}

/**
 * Splits the DN returned by {@link ldap_get_dn} and breaks it up into
 * its component parts. Each part is known as Relative Distinguished
 * Name, or RDN.
 * 
 * @param string $dn The distinguished name of an LDAP entity.
 * @param int $with_attrib Used to request if the RDNs are returned
 *   with only values or their attributes as well. To get RDNs with the
 *   attributes (i.e. in attribute=value format) set {@link with_attrib}
 *   to 0 and to get only values set it to 1.
 * @return array
 * @since PHP 4, PHP 5
 **/
function ldap_explode_dn($dn, $with_attrib){}

/**
 * Gets the first attribute in the given entry. Remaining attributes are
 * retrieved by calling {@link ldap_next_attribute} successively.
 * 
 * Similar to reading entries, attributes are also read one by one from a
 * particular entry.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @return string
 * @since PHP 4, PHP 5
 **/
function ldap_first_attribute($link_identifier, $result_entry_identifier){}

/**
 * Returns the entry identifier for first entry in the result. This entry
 * identifier is then supplied to {@link ldap_next_entry} routine to get
 * successive entries from the result.
 * 
 * Entries in the LDAP result are read sequentially using the {@link
 * ldap_first_entry} and {@link ldap_next_entry} functions.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ldap_first_entry($link_identifier, $result_identifier){}

/**
 * @param resource $link
 * @param resource $result
 * @return resource
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function ldap_first_reference($link, $result){}

/**
 * Frees up the memory allocated internally to store the result. All
 * result memory will be automatically freed when the script terminates.
 * 
 * Typically all the memory allocated for the LDAP result gets freed at
 * the end of the script. In case the script is making successive
 * searches which return large result sets, {@link ldap_free_result}
 * could be called to keep the runtime memory usage by the script low.
 * 
 * @param resource $result_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_free_result($result_identifier){}

/**
 * Reads attributes and values from an entry in the search result.
 * 
 * Having located a specific entry in the directory, you can find out
 * what information is held for that entry by using this call. You would
 * use this call for an application which "browses" directory entries
 * and/or where you do not know the structure of the directory entries.
 * In many applications you will be searching for a specific attribute
 * such as an email address or a surname, and won't care what other data
 * is held.
 * 
 * return_value["count"] = number of attributes in the entry
 * return_value[0] = first attribute return_value[n] = nth attribute
 * 
 * return_value["attribute"]["count"] = number of values for attribute
 * return_value["attribute"][0] = first value of the attribute
 * return_value["attribute"][i] = (i+1)th value of the attribute
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @return array
 * @since PHP 4, PHP 5
 **/
function ldap_get_attributes($link_identifier, $result_entry_identifier){}

/**
 * Finds out the DN of an entry in the result.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @return string
 * @since PHP 4, PHP 5
 **/
function ldap_get_dn($link_identifier, $result_entry_identifier){}

/**
 * Reads multiple entries from the given result, and then reading the
 * attributes and multiple values.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_identifier
 * @return array
 * @since PHP 4, PHP 5
 **/
function ldap_get_entries($link_identifier, $result_identifier){}

/**
 * Sets {@link retval} to the value of the specified option.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param int $option The parameter {@link option} can be one of:
 *   Option Type LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer
 *   LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT integer
 *   LDAP_OPT_PROTOCOL_VERSION integer LDAP_OPT_ERROR_NUMBER integer
 *   LDAP_OPT_REFERRALS bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME
 *   string LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN string
 *   LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array
 * @param mixed $retval This will be set to the option value.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ldap_get_option($link_identifier, $option, &$retval){}

/**
 * Reads all the values of the attribute in the entry in the result.
 * 
 * This call needs a {@link result_entry_identifier}, so needs to be
 * preceded by one of the ldap search calls and one of the calls to get
 * an individual entry.
 * 
 * You application will either be hard coded to look for certain
 * attributes (such as "surname" or "mail") or you will have to use the
 * {@link ldap_get_attributes} call to work out what attributes exist for
 * a given entry.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @param string $attribute
 * @return array
 * @since PHP 4, PHP 5
 **/
function ldap_get_values($link_identifier, $result_entry_identifier, $attribute){}

/**
 * Reads all the values of the attribute in the entry in the result.
 * 
 * This function is used exactly like {@link ldap_get_values} except that
 * it handles binary data and not string data.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @param string $attribute
 * @return array
 * @since PHP 4, PHP 5
 **/
function ldap_get_values_len($link_identifier, $result_entry_identifier, $attribute){}

/**
 * Performs the search for a specified {@link filter} on the directory
 * with the scope LDAP_SCOPE_ONELEVEL.
 * 
 * LDAP_SCOPE_ONELEVEL means that the search should only return
 * information that is at the level immediately below the {@link base_dn}
 * given in the call. (Equivalent to typing "ls" and getting a list of
 * files and folders in the current working directory.)
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $base_dn The base DN for the directory.
 * @param string $filter
 * @param array $attributes An array of the required attributes, e.g.
 *   array("mail", "sn", "cn"). Note that the "dn" is always returned
 *   irrespective of which attributes types are requested. Using this
 *   parameter is much more efficient than the default action (which is
 *   to return all attributes and their associated values). The use of
 *   this parameter should therefore be considered good practice.
 * @param int $attrsonly Should be set to 1 if only attribute types are
 *   wanted. If set to 0 both attributes types and attribute values are
 *   fetched which is the default behaviour.
 * @param int $sizelimit Enables you to limit the count of entries
 *   fetched. Setting this to 0 means no limit.
 * @param int $timelimit Sets the number of seconds how long is spend
 *   on the search. Setting this to 0 means no limit.
 * @param int $deref Specifies how aliases should be handled during the
 *   search. It can be one of the following: LDAP_DEREF_NEVER - (default)
 *   aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases
 *   should be dereferenced during the search but not when locating the
 *   base object of the search. LDAP_DEREF_FINDING - aliases should be
 *   dereferenced when locating the base object but not during the
 *   search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ldap_list($link_identifier, $base_dn, $filter, $attributes, $attrsonly, $sizelimit, $timelimit, $deref){}

/**
 * Modify the existing entries in the LDAP directory. The structure of
 * the entry is same as in {@link ldap_add}.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param array $entry
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_modify($link_identifier, $dn, $entry){}

/**
 * Adds one or more attributes to the specified {@link dn}. It performs
 * the modification at the attribute level as opposed to the object
 * level. Object-level additions are done by the {@link ldap_add}
 * function.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param array $entry
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_mod_add($link_identifier, $dn, $entry){}

/**
 * Removes one or more attributes from the specified {@link dn}. It
 * performs the modification at the attribute level as opposed to the
 * object level. Object-level deletions are done by the {@link
 * ldap_delete} function.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param array $entry
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_mod_del($link_identifier, $dn, $entry){}

/**
 * Replaces one or more attributes from the specified {@link dn}. It
 * performs the modification at the attribute level as opposed to the
 * object level. Object-level modifications are done by the {@link
 * ldap_modify} function.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param array $entry
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_mod_replace($link_identifier, $dn, $entry){}

/**
 * Retrieves the attributes in an entry. The first call to {@link
 * ldap_next_attribute} is made with the {@link result_entry_identifier}
 * returned from {@link ldap_first_attribute}.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @return string
 * @since PHP 4, PHP 5
 **/
function ldap_next_attribute($link_identifier, $result_entry_identifier){}

/**
 * Retrieve the entries stored in the result. Successive calls to the
 * {@link ldap_next_entry} return entries one by one till there are no
 * more entries. The first call to {@link ldap_next_entry} is made after
 * the call to {@link ldap_first_entry} with the {@link
 * result_entry_identifier} as returned from the {@link
 * ldap_first_entry}.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param resource $result_entry_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ldap_next_entry($link_identifier, $result_entry_identifier){}

/**
 * @param resource $link
 * @param resource $entry
 * @return resource
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function ldap_next_reference($link, $entry){}

/**
 * @param resource $link
 * @param resource $entry
 * @param array $referrals
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function ldap_parse_reference($link, $entry, &$referrals){}

/**
 * @param resource $link
 * @param resource $result
 * @param int $errcode
 * @param string $matcheddn
 * @param string $errmsg
 * @param array $referrals
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function ldap_parse_result($link, $result, &$errcode, &$matcheddn, &$errmsg, &$referrals){}

/**
 * Performs the search for a specified {@link filter} on the directory
 * with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an
 * entry from the directory.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $base_dn The base DN for the directory.
 * @param string $filter An empty filter is not allowed. If you want to
 *   retrieve absolutely all information for this entry, use a filter of
 *   objectClass=*. If you know which entry types are used on the
 *   directory server, you might use an appropriate filter such as
 *   objectClass=inetOrgPerson.
 * @param array $attributes An array of the required attributes, e.g.
 *   array("mail", "sn", "cn"). Note that the "dn" is always returned
 *   irrespective of which attributes types are requested. Using this
 *   parameter is much more efficient than the default action (which is
 *   to return all attributes and their associated values). The use of
 *   this parameter should therefore be considered good practice.
 * @param int $attrsonly Should be set to 1 if only attribute types are
 *   wanted. If set to 0 both attributes types and attribute values are
 *   fetched which is the default behaviour.
 * @param int $sizelimit Enables you to limit the count of entries
 *   fetched. Setting this to 0 means no limit.
 * @param int $timelimit Sets the number of seconds how long is spend
 *   on the search. Setting this to 0 means no limit.
 * @param int $deref Specifies how aliases should be handled during the
 *   search. It can be one of the following: LDAP_DEREF_NEVER - (default)
 *   aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases
 *   should be dereferenced during the search but not when locating the
 *   base object of the search. LDAP_DEREF_FINDING - aliases should be
 *   dereferenced when locating the base object but not during the
 *   search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ldap_read($link_identifier, $base_dn, $filter, $attributes, $attrsonly, $sizelimit, $timelimit, $deref){}

/**
 * The entry specified by {@link dn} is renamed/moved.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $dn The distinguished name of an LDAP entity.
 * @param string $newrdn The new RDN.
 * @param string $newparent The new parent/superior entry.
 * @param bool $deleteoldrdn If the old RDN value(s) is removed, else
 *   the old RDN value(s) is retained as non-distinguished values of the
 *   entry.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function ldap_rename($link_identifier, $dn, $newrdn, $newparent, $deleteoldrdn){}

/**
 * @param resource $link
 * @param string $binddn
 * @param string $password
 * @param string $sasl_mech
 * @param string $sasl_realm
 * @param string $sasl_authc_id
 * @param string $sasl_authz_id
 * @param string $props
 * @return bool
 * @since PHP 5
 **/
function ldap_sasl_bind($link, $binddn, $password, $sasl_mech, $sasl_realm, $sasl_authc_id, $sasl_authz_id, $props){}

/**
 * Performs the search for a specified filter on the directory with the
 * scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the
 * entire directory.
 * 
 * From 4.0.5 on it's also possible to do parallel searches. To do this
 * you use an array of link identifiers, rather than a single identifier,
 * as the first argument. If you don't want the same base DN and the same
 * filter for all the searches, you can also use an array of base DNs
 * and/or an array of filters. Those arrays must be of the same size as
 * the link identifier array since the first entries of the arrays are
 * used for one search, the second entries are used for another, and so
 * on. When doing parallel searches an array of search result identifiers
 * is returned, except in case of error, then the entry corresponding to
 * the search will be . This is very much like the value normally
 * returned, except that a result identifier is always returned when a
 * search was made. There are some rare cases where the normal search
 * returns while the parallel search returns an identifier.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param string $base_dn The base DN for the directory.
 * @param string $filter The search filter can be simple or advanced,
 *   using boolean operators in the format described in the LDAP
 *   documentation (see the Netscape Directory SDK for full information
 *   on filters).
 * @param array $attributes An array of the required attributes, e.g.
 *   array("mail", "sn", "cn"). Note that the "dn" is always returned
 *   irrespective of which attributes types are requested. Using this
 *   parameter is much more efficient than the default action (which is
 *   to return all attributes and their associated values). The use of
 *   this parameter should therefore be considered good practice.
 * @param int $attrsonly Should be set to 1 if only attribute types are
 *   wanted. If set to 0 both attributes types and attribute values are
 *   fetched which is the default behaviour.
 * @param int $sizelimit Enables you to limit the count of entries
 *   fetched. Setting this to 0 means no limit.
 * @param int $timelimit Sets the number of seconds how long is spend
 *   on the search. Setting this to 0 means no limit.
 * @param int $deref Specifies how aliases should be handled during the
 *   search. It can be one of the following: LDAP_DEREF_NEVER - (default)
 *   aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases
 *   should be dereferenced during the search but not when locating the
 *   base object of the search. LDAP_DEREF_FINDING - aliases should be
 *   dereferenced when locating the base object but not during the
 *   search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function ldap_search($link_identifier, $base_dn, $filter, $attributes, $attrsonly, $sizelimit, $timelimit, $deref){}

/**
 * Sets the value of the specified option to be {@link newval}.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @param int $option The parameter {@link option} can be one of:
 *   Option Type Available since LDAP_OPT_DEREF integer
 *   LDAP_OPT_SIZELIMIT integer LDAP_OPT_TIMELIMIT integer
 *   LDAP_OPT_NETWORK_TIMEOUT integer PHP 5.3.0 LDAP_OPT_PROTOCOL_VERSION
 *   integer LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS bool
 *   LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string
 *   LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN string
 *   LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array
 *   LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS require a list
 *   of controls, this means that the value must be an array of controls.
 *   A control consists of an oid identifying the control, an optional
 *   value, and an optional flag for criticality. In PHP a control is
 *   given by an array containing an element with the key oid and string
 *   value, and two optional elements. The optional elements are key
 *   value with string value and key iscritical with boolean value.
 *   iscritical defaults to if not supplied. See
 *   draft-ietf-ldapext-ldap-c-api-xx.txt for details. See also the
 *   second example below.
 * @param mixed $newval The new value for the specified {@link option}.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ldap_set_option($link_identifier, $option, $newval){}

/**
 * @param resource $link
 * @param callback $callback
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ldap_set_rebind_proc($link, $callback){}

/**
 * @param resource $link
 * @param resource $result
 * @param string $sortfilter
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ldap_sort($link, $result, $sortfilter){}

/**
 * @param resource $link
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ldap_start_tls($link){}

/**
 * @param string $value
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function ldap_t61_to_8859($value){}

/**
 * Unbinds from the LDAP directory.
 * 
 * @param resource $link_identifier An LDAP link identifier, returned
 *   by {@link ldap_connect}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ldap_unbind($link_identifier){}

/**
 * The Levenshtein distance is defined as the minimal number of
 * characters you have to replace, insert or delete to transform {@link
 * str1} into {@link str2}. The complexity of the algorithm is O(m*n),
 * where n and m are the length of {@link str1} and {@link str2} (rather
 * good when compared to {@link similar_text}, which is O(max(n,m)**3),
 * but still expensive).
 * 
 * In its simplest form the function will take only the two strings as
 * parameter and will calculate just the number of insert, replace and
 * delete operations needed to transform {@link str1} into {@link str2}.
 * 
 * A second variant will take three additional parameters that define the
 * cost of insert, replace and delete operations. This is more general
 * and adaptive than variant one, but not as efficient.
 * 
 * @param string $str1 One of the strings being evaluated for
 *   Levenshtein distance.
 * @param string $str2 One of the strings being evaluated for
 *   Levenshtein distance.
 * @return int
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function levenshtein($str1, $str2){}

/**
 * {@link libxml_clear_errors} clears the libxml error buffer.
 * 
 * @return void
 * @since PHP 5 >= 5.1.0
 **/
function libxml_clear_errors(){}

/**
 * Disable/enable the ability to load external entities.
 * 
 * @param bool $disable Disable () or enable () libxml extensions (such
 *   as , and ) to load external entities.
 * @return ReturnType
 * @since PHP 5 >= 5.2.11
 **/
function libxml_disable_entity_loader($disable){}

/**
 * Retrieve array of errors.
 * 
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function libxml_get_errors(){}

/**
 * Retrieve last error from libxml.
 * 
 * @return LibXMLError
 * @since PHP 5 >= 5.1.0
 **/
function libxml_get_last_error(){}

/**
 * Sets the streams context for the next libxml document load or write.
 * 
 * @param resource $streams_context The stream context resource
 *   (created with {@link stream_context_create})
 * @return void
 * @since PHP 5
 **/
function libxml_set_streams_context($streams_context){}

/**
 * {@link libxml_use_internal_errors} allows you to disable standard
 * libxml errors and enable user error handling.
 * 
 * @param bool $use_errors Whether to enable user error handling.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function libxml_use_internal_errors($use_errors){}

/**
 * {@link link} creates a hard link.
 * 
 * @param string $from_path The link name.
 * @param string $to_path Target of the link.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function link($from_path, $to_path){}

/**
 * Gets information about a link.
 * 
 * This function is used to verify if a link (pointed to by {@link path})
 * really exists (using the same method as the S_ISLNK macro defined in
 * stat.h).
 * 
 * @param string $path Path to the link.
 * @return int
 * @since PHP 4, PHP 5
 **/
function linkinfo($path){}

/**
 * Returns an associative array containing localized numeric and monetary
 * formatting information.
 * 
 * @return array
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function localeconv(){}

/**
 * Tries to find locale that can satisfy the language list that is
 * requested by the HTTP "Accept-Language" header.
 * 
 * @param string $header The string containing the "Accept-Language"
 *   header according to format in RFC 2616.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_accept_from_http($header){}

/**
 * Returns a correctly ordered and delimited locale ID the keys identify
 * the particular locale ID subtags, and the values are the associated
 * subtag values.
 * 
 * @param array $subtags an array containing a list of key-value pairs,
 *   where the keys identify the particular locale ID subtags, and the
 *   values are the associated subtag values. The 'variant' and 'private'
 *   subtags can take maximum 15 values whereas 'extlang' can take
 *   maximum 3 values.e.g. Variants are allowed with the suffix ranging
 *   from 0-14. Hence the keys for the input array can be variant0,
 *   variant1, ...,variant14. In the returned locale id, the subtag is
 *   ordered by suffix resulting in variant0 followed by variant1
 *   followed by variant2 and so on. The 'variant', 'private' and
 *   'extlang' multiple values can be specified both as array under
 *   specific key (e.g. 'variant') and as multiple numbered keys (e.g.
 *   'variant0', 'variant1', etc.).
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_compose($subtags){}

/**
 * Checks if a $langtag filter matches with $locale according to RFC
 * 4647's basic filtering algorithm
 * 
 * @param string $langtag The language tag to check
 * @param string $locale The language range to check against
 * @param bool $canonicalize If true, the arguments will be converted
 *   to canonical form before matching.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_filter_matches($langtag, $locale, $canonicalize){}

/**
 * Gets the variants for the input locale
 * 
 * @param string $locale The locale to extract the variants from
 * @return array
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_all_variants($locale){}

/**
 * This function returns the default Locale, which is used by PHP to
 * localize certain features. Please note that this isn't influenced by
 * {@link setlocale} or the system settings.
 * 
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_default(){}

/**
 * Returns an appropriately localized display name for language of the
 * input locale. If is then the default locale is used.
 * 
 * @param string $locale The locale to return a display language for
 * @param string $in_locale Optional format locale to use to display
 *   the language name
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_display_language($locale, $in_locale){}

/**
 * Returns an appropriately localized display name for the input locale.
 * If is then the default locale is used.
 * 
 * @param string $locale The locale to return a display name for.
 * @param string $in_locale optional format locale
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_display_name($locale, $in_locale){}

/**
 * Returns an appropriately localized display name for region of the
 * input locale. If is then the default locale is used.
 * 
 * @param string $locale The locale to return a display region for.
 * @param string $in_locale Optional format locale to use to display
 *   the region name
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_display_region($locale, $in_locale){}

/**
 * Returns an appropriately localized display name for script of the
 * input locale. If is then the default locale is used.
 * 
 * @param string $locale The locale to return a display script for
 * @param string $in_locale Optional format locale to use to display
 *   the script name
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_display_script($locale, $in_locale){}

/**
 * Returns an appropriately localized display name for variants of the
 * input locale. If is then the default locale is used.
 * 
 * @param string $locale The locale to return a display variant for
 * @param string $in_locale Optional format locale to use to display
 *   the variant name
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_display_variant($locale, $in_locale){}

/**
 * Gets the keywords for the input locale.
 * 
 * @param string $locale The locale to extract the keywords from
 * @return array
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_keywords($locale){}

/**
 * Gets the primary language for the input locale
 * 
 * @param string $locale The locale to extract the primary language
 *   code from
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_primary_language($locale){}

/**
 * Gets the region for the input locale.
 * 
 * @param string $locale The locale to extract the region code from
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_region($locale){}

/**
 * Gets the script for the input locale.
 * 
 * @param string $locale The locale to extract the script code from
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_get_script($locale){}

/**
 * Searches the items in {@link langtag} for the best match to the
 * language range specified in {@link locale} according to RFC 4647's
 * lookup algorithm.
 * 
 * @param array $langtag An array containing a list of language tags to
 *   compare to {@link locale}. Maximum 100 items allowed.
 * @param string $locale The locale to use as the language range when
 *   matching.
 * @param bool $canonicalize If true, the arguments will be converted
 *   to canonical form before matching.
 * @param string $default The locale to use if no match is found.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_lookup($langtag, $locale, $canonicalize, $default){}

/**
 * Returns a key-value array of locale ID subtag elements.
 * 
 * @param string $locale The locale to extract the subtag array from.
 *   Note: The 'variant' and 'private' subtags can take maximum 15 values
 *   whereas 'extlang' can take maximum 3 values.
 * @return array
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_parse($locale){}

/**
 * Sets the default Locale for PHP programs. Please note that this has
 * nothing to do with {@link setlocale} nor with the system locale.
 * 
 * @param string $name The new Locale name. A comprehensive list of the
 *   supported locales is available at .
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function locale_set_default($name){}

/**
 * The {@link localtime} function returns an array identical to that of
 * the structure returned by the C function call.
 * 
 * @param int $timestamp If set to or not supplied then the array is
 *   returned as a regular, numerically indexed array. If the argument is
 *   set to then {@link localtime} returns an associative array
 *   containing all the different elements of the structure returned by
 *   the C function call to localtime. The names of the different keys of
 *   the associative array are as follows:
 *   
 *   "tm_sec" - seconds "tm_min" - minutes "tm_hour" - hour "tm_mday" -
 *   day of the month Months are from 0 (Jan) to 11 (Dec) and days of the
 *   week are from 0 (Sun) to 6 (Sat). "tm_mon" - month of the year,
 *   starting with 0 for January "tm_year" - Years since 1900 "tm_wday" -
 *   Day of the week "tm_yday" - Day of the year "tm_isdst" - Is daylight
 *   savings time in effect
 * @param bool $is_associative
 * @return array
 * @since PHP 4, PHP 5
 **/
function localtime($timestamp, $is_associative){}

/**
 * If the optional {@link base} parameter is specified, {@link log}
 * returns logbase {@link arg}, otherwise {@link log} returns the natural
 * logarithm of {@link arg}.
 * 
 * @param float $arg The value to calculate the logarithm for
 * @param float $base The optional logarithmic base to use (defaults to
 *   'e' and so to the natural logarithm).
 * @return float
 * @since PHP 4, PHP 5
 **/
function log($arg, $base){}

/**
 * {@link log1p} returns log(1 + {@link number}) computed in a way that
 * is accurate even when the value of {@link number} is close to zero.
 * {@link log} might only return log(1) in this case due to lack of
 * precision.
 * 
 * @param float $number The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function log1p($number){}

/**
 * Returns the base-10 logarithm of {@link arg}.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4, PHP 5
 **/
function log10($arg){}

/**
 * The function {@link long2ip} generates an Internet address in dotted
 * format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.
 * 
 * @param string $proper_address A proper address representation.
 * @return string
 * @since PHP 4, PHP 5
 **/
function long2ip($proper_address){}

/**
 * Gathers the statistics of the file or symbolic link named by {@link
 * filename}.
 * 
 * @param string $filename Path to a file or a symbolic link.
 * @return array
 * @since PHP 4, PHP 5
 **/
function lstat($filename){}

/**
 * Strip whitespace (or other characters) from the beginning of a string.
 * 
 * @param string $str The input string.
 * @param string $charlist You can also specify the characters you want
 *   to strip, by means of the {@link charlist} parameter. Simply list
 *   all characters that you want to be stripped. With .. you can specify
 *   a range of characters.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ltrim($str, $charlist){}

/**
 * {@link lzf_compress} compresses the given {@link data} string using
 * LZF encoding.
 * 
 * @param string $data The string to compress.
 * @return string
 * @since PECL lzf >= 0.1.0
 **/
function lzf_compress($data){}

/**
 * {@link lzf_compress} decompresses the given {@link data} string
 * containing lzf encoded data.
 * 
 * @param string $data The compressed string.
 * @return string
 * @since PECL lzf >= 0.1.0
 **/
function lzf_decompress($data){}

/**
 * Determines what was LZF extension optimized for during compilation.
 * 
 * @return int
 * @since PECL lzf >= 1.0.0
 **/
function lzf_optimized_for(){}

/**
 * Set the current active configuration setting of magic_quotes_runtime.
 * 
 * @param bool $new_setting for off, for on.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function magic_quotes_runtime($new_setting){}

/**
 * Sends an email.
 * 
 * @param string $to Receiver, or receivers of the mail. The formatting
 *   of this string must comply with RFC 2822. Some examples are:
 *   user@example.com user@example.com, anotheruser@example.com User
 *   <user@example.com> User <user@example.com>, Another User
 *   <anotheruser@example.com>
 * @param string $subject Subject of the email to be sent.
 * @param string $message Message to be sent. Each line should be
 *   separated with a LF (\n). Lines should not be larger than 70
 *   characters.
 * @param string $additional_headers String to be inserted at the end
 *   of the email header. This is typically used to add extra headers
 *   (From, Cc, and Bcc). Multiple extra headers should be separated with
 *   a CRLF (\r\n).
 * @param string $additional_parameters The {@link
 *   additional_parameters} parameter can be used to pass additional
 *   flags as command line options to the program configured to be used
 *   when sending mail, as defined by the sendmail_path configuration
 *   setting. For example, this can be used to set the envelope sender
 *   address when using sendmail with the -f sendmail option. The user
 *   that the webserver runs as should be added as a trusted user to the
 *   sendmail configuration to prevent a 'X-Warning' header from being
 *   added to the message when the envelope sender (-f) is set using this
 *   method. For sendmail users, this file is /etc/mail/trusted-users.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mail($to, $subject, $message, $additional_headers, $additional_parameters){}

/**
 * Figures out the best way of encoding the content read from the given
 * file pointer.
 * 
 * @param resource $fp A valid file pointer, which must be seek-able.
 * @return string
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_determine_best_xfer_encoding($fp){}

/**
 * Create a MIME mail resource.
 * 
 * @return resource
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_create(){}

/**
 * @param resource $mimemail A valid MIME resource.
 * @param string $msgbody
 * @param callback $callbackfunc
 * @return void
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_extract_part($mimemail, $msgbody, $callbackfunc){}

/**
 * Extracts/decodes a message section from the supplied filename.
 * 
 * The contents of the section will be decoded according to their
 * transfer encoding - base64, quoted-printable and uuencoded text are
 * supported.
 * 
 * @param resource $mimemail A valid MIME resource, created with {@link
 *   mailparse_msg_create}.
 * @param mixed $filename Can be a file name or a valid stream
 *   resource.
 * @param callback $callbackfunc If set, this must be either a valid
 *   callback that will be passed the extracted section, or to make this
 *   function return the extracted section. If not specified, the
 *   contents will be sent to "stdout".
 * @return string
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_extract_part_file($mimemail, $filename, $callbackfunc){}

/**
 * @param resource $mimemail A valid MIME resource.
 * @param string $filename
 * @param callback $callbackfunc
 * @return string
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_extract_whole_part_file($mimemail, $filename, $callbackfunc){}

/**
 * Frees a MIME resource.
 * 
 * @param resource $mimemail A valid MIME resource allocated by {@link
 *   mailparse_msg_create} or {@link mailparse_msg_parse_file}.
 * @return bool
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_free($mimemail){}

/**
 * @param resource $mimemail A valid MIME resource.
 * @param string $mimesection
 * @return resource
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_get_part($mimemail, $mimesection){}

/**
 * @param resource $mimemail A valid MIME resource.
 * @return array
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_get_part_data($mimemail){}

/**
 * @param resource $mimemail A valid MIME resource.
 * @return array
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_get_structure($mimemail){}

/**
 * Incrementally parse data into the supplied mime mail resource.
 * 
 * This function allow you to stream portions of a file at a time, rather
 * than read and parse the whole thing.
 * 
 * @param resource $mimemail A valid MIME resource.
 * @param string $data
 * @return bool
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_parse($mimemail, $data){}

/**
 * Parses a file. This is the optimal way of parsing a mail file that you
 * have on disk.
 * 
 * @param string $filename Path to the file holding the message. The
 *   file is opened and streamed through the parser.
 * @return resource
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_msg_parse_file($filename){}

/**
 * Parses a RFC 822 compliant recipient list, such as that found in the
 * To: header.
 * 
 * @param string $addresses A string containing addresses, like in: Wez
 *   Furlong <wez@example.com>, doe@example.com
 * @return array
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_rfc822_parse_addresses($addresses){}

/**
 * Streams data from the source file pointer, apply {@link encoding} and
 * write to the destination file pointer.
 * 
 * @param resource $sourcefp A valid file handle. The file is streamed
 *   through the parser.
 * @param resource $destfp The destination file handle in which the
 *   encoded data will be written.
 * @param string $encoding One of the character encodings supported by
 *   the mbstring module.
 * @return bool
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_stream_encode($sourcefp, $destfp, $encoding){}

/**
 * Scans the data from the given file pointer and extract each embedded
 * uuencoded file into a temporary file.
 * 
 * @param resource $fp A valid file pointer.
 * @return array
 * @since PECL mailparse >= 0.9.0
 **/
function mailparse_uudecode_all($fp){}

/**
 * If the first and only parameter is an array, {@link max} returns the
 * highest value in that array. If at least two parameters are provided,
 * {@link max} returns the biggest of these values.
 * 
 * @param array $values An array containing the values.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function max($values){}

/**
 * {@link maxdb_affected_rows} returns the number of rows affected by the
 * last INSERT, UPDATE, or DELETE query associated with the provided
 * {@link link} parameter. If this number cannot be determined, this
 * function will return -1.
 * 
 * The {@link maxdb_affected_rows} function only works with queries which
 * modify a table. In order to return the number of rows from a SELECT
 * query, use the {@link maxdb_num_rows} function instead.
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_affected_rows($link){}

/**
 * {@link maxdb_autocommit} is used to turn on or off auto-commit mode on
 * queries for the database connection represented by the {@link link}
 * resource.
 * 
 * @param resource $link
 * @param bool $mode
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_autocommit($link, $mode){}

/**
 * (extended syntax):
 * 
 * (extended syntax):
 * 
 * {@link maxdb_bind_param} is used to bind variables for the parameter
 * markers in the SQL statement that was passed to {@link maxdb_prepare}.
 * The string {@link types} contains one or more characters which specify
 * the types for the corresponding bind variables.
 * 
 * The extended syntax of {@link maxdb_bind_param} allows to give the
 * parameters as an array instead of a variable list of PHP variables to
 * the function. If the array variable has not been used before calling
 * {@link maxdb_bind_param}, it has to be initialized as an emtpy array.
 * See the examples how to use {@link maxdb_bind_param} with extended
 * syntax.
 * 
 * Variables for SELECT INTO SQL statements can also be bound using
 * {@link maxdb_bind_param}. Parameters for database procedures can be
 * bound using {@link maxdb_bind_param}. See the examples how to use
 * {@link maxdb_bind_param} in this cases.
 * 
 * If a variable bound as INTO variable to an SQL statement was used
 * before, the content of this variable is overwritten by the data of the
 * SELECT INTO statement. A reference to this variable will be invalid
 * after a call to {@link maxdb_bind_param}.
 * 
 * For INOUT parameters of database procedures the content of the bound
 * INOUT variable is overwritten by the output value of the database
 * procedure. A reference to this variable will be invalid after a call
 * to {@link maxdb_bind_param}.
 * 
 * Type specification chars Character Description i corresponding
 * variable has type integer d corresponding variable has type double s
 * corresponding variable has type string b corresponding variable is a
 * blob and will be sent in packages
 * 
 * @param resource $stmt
 * @param string $types
 * @param mixed $var1
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_bind_param($stmt, $types, &$var1){}

/**
 * {@link maxdb_bind_result} is used to associate (bind) columns in the
 * result set to variables. When {@link maxdb_stmt_fetch} is called to
 * fetch data, the MaxDB client/server protocol places the data for the
 * bound columns into the specified variables {@link var1, ...}.
 * 
 * @param resource $stmt
 * @param mixed $var1
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_bind_result($stmt, &$var1){}

/**
 * {@link maxdb_change_user} is used to change the user of the specified
 * database connection as given by the {@link link} parameter and to set
 * the current database to that specified by the {@link database}
 * parameter.
 * 
 * In order to successfully change users a valid {@link username} and
 * {@link password} parameters must be provided and that user must have
 * sufficient permissions to access the desired database. If for any
 * reason authorization fails, the current user authentication will
 * remain.
 * 
 * @param resource $link
 * @param string $user
 * @param string $password
 * @param string $database
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_change_user($link, $user, $password, $database){}

/**
 * Returns the current character set for the database connection
 * specified by the {@link link} parameter.
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_character_set_name($link){}

/**
 * Returns the current character set for the database connection
 * specified by the {@link link} parameter.
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb 1.0
 **/
function maxdb_client_encoding($link){}

/**
 * The {@link maxdb_close} function closes a previously opened database
 * connection specified by the {@link link} parameter.
 * 
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_close($link){}

/**
 * This function has to be called after a sequence of {@link
 * maxdb_stmt_send_long_data}, that was started after {@link
 * maxdb_execute}.
 * 
 * {@link param_nr} indicates which parameter to associate the end of
 * data with. Parameters are numbered beginning with 0.
 * 
 * @param resource $stmt
 * @param int $param_nr
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_close_long_data($stmt, $param_nr){}

/**
 * Commits the current transaction for the database connection specified
 * by the {@link link} parameter.
 * 
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_commit($link){}

/**
 * The {@link maxdb_connect} function attempts to open a connection to
 * the MaxDB Server running on {@link host} which can be either a host
 * name or an IP address. Passing the string "localhost" to this
 * parameter, the local host is assumed. If successful, the {@link
 * maxdb_connect} will return an resource representing the connection to
 * the database.
 * 
 * The {@link username} and {@link password} parameters specify the
 * username and password under which to connect to the MaxDB server. If
 * the password is not provided (the value is passed), the MaxDB server
 * will attempt to authenticate the user against the {@link
 * maxdb.default_pw} in .
 * 
 * The {@link dbname} parameter if provided will specify the default
 * database to be used when performing queries. If not provied, the entry
 * {@link maxdb.default_db} in is used.
 * 
 * The {@link port} and {@link socket} parameters are ignored for the
 * MaxDB server.
 * 
 * @param string $host
 * @param string $username
 * @param string $passwd
 * @param string $dbname
 * @param int $port
 * @param string $socket
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_connect($host, $username, $passwd, $dbname, $port, $socket){}

/**
 * The {@link maxdb_connect_errno} function will return the last error
 * code number for last call to {@link maxdb_connect}. If no errors have
 * occured, this function will return zero.
 * 
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_connect_errno(){}

/**
 * The {@link maxdb_connect_error} function is identical to the
 * corresponding {@link maxdb_connect_errno} function in every way,
 * except instead of returning an integer error code the {@link
 * maxdb_connect_error} function will return a string representation of
 * the last error to occur for the last {@link maxdb_connect} call. If no
 * error has occured, this function will return an empty string.
 * 
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_connect_error(){}

/**
 * The {@link maxdb_data_seek} function seeks to an arbitrary result
 * pointer specified by the {@link offset} in the result set represented
 * by {@link result}. The {@link offset} parameter must be between zero
 * and the total number of rows minus one (0..{@link maxdb_num_rows} -
 * 1).
 * 
 * @param resource $result
 * @param int $offset
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_data_seek($result, $offset){}

/**
 * The {@link maxdb_debug} can be used to trace the SQLDBC communication.
 * The following strings can be used as a parameter to {@link
 * maxdb_debug}:
 * 
 * @param string $debug
 * @return void
 * @since PECL maxdb >= 1.0
 **/
function maxdb_debug($debug){}

/**
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_disable_reads_from_master($link){}

/**
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_disable_rpl_parse($link){}

/**
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_dump_debug_info($link){}

/**
 * @param string $dbname
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_embedded_connect($dbname){}

/**
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_enable_reads_from_master($link){}

/**
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_enable_rpl_parse($link){}

/**
 * The {@link maxdb_errno} function will return the last error code for
 * the most recent MaxDB function call that can succeed or fail with
 * respect to the database link defined by the {@link link} parameter. If
 * no errors have occured, this function will return zero.
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_errno($link){}

/**
 * The {@link maxdb_error} function is identical to the corresponding
 * {@link maxdb_errno} function in every way, except instead of returning
 * an integer error code the {@link maxdb_error} function will return a
 * string representation of the last error to occur for the database
 * connection represented by the {@link link} parameter. If no error has
 * occured, this function will return an empty string.
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_error($link){}

/**
 * This function is used to create a legal SQL string that you can use in
 * an SQL statement. The string escapestr is encoded to an escaped SQL
 * string, taking into account the current character set of the
 * connection.
 * 
 * Characters encoded are ', ".
 * 
 * @param resource $link
 * @param string $escapestr
 * @return string
 * @since PECL maxdb 1.0
 **/
function maxdb_escape_string($link, $escapestr){}

/**
 * The {@link maxdb_execute} function executes a query that has been
 * previously prepared using the {@link maxdb_prepare} function
 * represented by the {@link stmt} resource. When executed any parameter
 * markers which exist will automatically be replaced with the appropiate
 * data.
 * 
 * If the statement is UPDATE, DELETE, or INSERT, the total number of
 * affected rows can be determined by using the {@link
 * maxdb_stmt_affected_rows} function. Likewise, if the query yields a
 * result set the {@link maxdb_fetch} function is used.
 * 
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_execute($stmt){}

/**
 * {@link maxdb_fetch} returns row data using the variables bound by
 * {@link maxdb_stmt_bind_result}.
 * 
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_fetch($stmt){}

/**
 * Returns an array that corresponds to the fetched row or if there are
 * no more rows for the resultset represented by the {@link result}
 * parameter.
 * 
 * {@link maxdb_fetch_array} is an extended version of the {@link
 * maxdb_fetch_row} function. In addition to storing the data in the
 * numeric indices of the result array, the {@link maxdb_fetch_array}
 * function can also store the data in associative indices, using the
 * field names of the result set as keys.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence and overwrite the earlier data. In
 * order to access multiple columns with the same name, the numerically
 * indexed version of the row must be used.
 * 
 * The optional second argument {@link resulttype} is a constant
 * indicating what type of array should be produced from the current row
 * data. The possible values for this parameter are the constants
 * MAXDB_ASSOC, MAXDB_ASSOC_UPPER, MAXDB_ASSOC_LOWER, MAXDB_NUM, or
 * MAXDB_BOTH. By default the {@link maxdb_fetch_array} function will
 * assume MAXDB_BOTH, which is a combination of MAXDB_NUM and MAXDB_ASSOC
 * for this parameter.
 * 
 * By using the MAXDB_ASSOC constant this function will behave
 * identically to the {@link maxdb_fetch_assoc}, while MAXDB_NUM will
 * behave identically to the {@link maxdb_fetch_row} function. The final
 * option MAXDB_BOTH will create a single array with the attributes of
 * both.
 * 
 * By using the MAXDB_ASSOC_UPPER constant, the behaviour of this
 * function is identical to the use of MAXDB_ASSOC except the array index
 * of a column is the fieldname in upper case.
 * 
 * By using the MAXDB_ASSOC_LOWER constant, the behaviour of this
 * function is identical to the use of MAXDB_ASSOC except the array index
 * of a column is the fieldname in lower case.
 * 
 * @param resource $result
 * @param int $resulttype
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_array($result, $resulttype){}

/**
 * Returns an associative array that corresponds to the fetched row or if
 * there are no more rows.
 * 
 * The {@link maxdb_fetch_assoc} function is used to return an
 * associative array representing the next row in the result set for the
 * result represented by the {@link result} parameter, where each key in
 * the array represents the name of one of the result set's columns.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence. To access the other column(s) of the
 * same name, you either need to access the result with numeric indices
 * by using {@link maxdb_fetch_row} or add alias names.
 * 
 * @param resource $result
 * @return array
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_assoc($result){}

/**
 * The {@link maxdb_fetch_field} returns the definition of one column of
 * a result set as an resource. Call this function repeatedly to retrieve
 * information about all columns in the result set. {@link
 * maxdb_fetch_field} returns when no more fields are left.
 * 
 * @param resource $result
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_field($result){}

/**
 * This function serves an identical purpose to the {@link
 * maxdb_fetch_field} function with the single difference that, instead
 * of returning one resource at a time for each field, the columns are
 * returned as an array of resources.
 * 
 * @param resource $result
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_fields($result){}

/**
 * {@link maxdb_fetch_field_direct} returns an resource which contains
 * field definition information from specified resultset. The value of
 * fieldnr must be in the range from 0 to number of fields - 1.
 * 
 * @param resource $result
 * @param int $fieldnr
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_field_direct($result, $fieldnr){}

/**
 * The {@link maxdb_fetch_lengths} function returns an array containing
 * the lengths of every column of the current row within the result set
 * represented by the {@link result} parameter. If successful, a
 * numerically indexed array representing the lengths of each column is
 * returned.
 * 
 * @param resource $result
 * @return array
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_lengths($result){}

/**
 * The {@link maxdb_fetch_object} will return the current row result set
 * as an object where the attributes of the object represent the names of
 * the fields found within the result set. If no more rows exist in the
 * current result set, is returned.
 * 
 * @param object $result
 * @return object
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_object($result){}

/**
 * Returns an array that corresponds to the fetched row, or if there are
 * no more rows.
 * 
 * {@link maxdb_fetch_row} fetches one row of data from the result set
 * represented by {@link result} and returns it as an enumerated array,
 * where each column is stored in an array offset starting from 0 (zero).
 * Each subsequent call to the {@link maxdb_fetch_row} function will
 * return the next row within the result set, or if there are no more
 * rows.
 * 
 * @param resource $result
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_fetch_row($result){}

/**
 * Returns the number of columns for the most recent query on the
 * connection represented by the {@link link} parameter. This function
 * can be useful when using the {@link maxdb_store_result} function to
 * determine if the query should have produced a non-empty result set or
 * not without knowing the nature of the query.
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_field_count($link){}

/**
 * Sets the field cursor to the given offset. The next call to {@link
 * maxdb_fetch_field} will retrieve the field definition of the column
 * associated with that offset.
 * 
 * @param resource $result
 * @param int $fieldnr
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_field_seek($result, $fieldnr){}

/**
 * Returns the position of the field cursor used for the last {@link
 * maxdb_fetch_field} call. This value can be used as an argument to
 * {@link maxdb_field_seek}.
 * 
 * @param resource $result
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_field_tell($result){}

/**
 * The {@link maxdb_free_result} function frees the memory associated
 * with the result represented by the {@link result} parameter, which was
 * allocated by {@link maxdb_query}, {@link maxdb_store_result} or {@link
 * maxdb_use_result}.
 * 
 * @param resource $result
 * @return void
 * @since PECL maxdb >= 1.0
 **/
function maxdb_free_result($result){}

/**
 * The {@link maxdb_get_client_info} function is used to return a string
 * representing the client version being used in the MaxDB extension.
 * 
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_get_client_info(){}

/**
 * Returns client version number as an integer.
 * 
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_get_client_version(){}

/**
 * The {@link maxdb_get_host_info} function returns a string describing
 * the connection represented by the {@link link} parameter is using.
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_get_host_info($link){}

/**
 * If a statement passed to {@link maxdb_prepare} is one that produces a
 * result set, {@link maxdb_get_metadata} returns the result resource
 * that can be used to process the meta information such as total number
 * of fields and individual field information.
 * 
 * The result set structure should be freed when you are done with it,
 * which you can do by passing it to {@link maxdb_free_result}
 * 
 * @param resource $stmt
 * @return resource
 * @since PECL maxdb 1.0
 **/
function maxdb_get_metadata($stmt){}

/**
 * Returns an integer representing the MaxDB protocol version used by the
 * connection represented by the {@link link} parameter.
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_get_proto_info($link){}

/**
 * Returns a string representing the version of the MaxDB server that the
 * MaxDB extension is connected to (represented by the {@link link}
 * parameter).
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_get_server_info($link){}

/**
 * The {@link maxdb_get_server_version} function returns the version of
 * the server connected to (represented by the {@link link} parameter) as
 * an integer.
 * 
 * The form of this version number is main_version * 10000 +
 * minor_version * 100 + sub_version (i.e. version 7.5.0 is 70500).
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_get_server_version($link){}

/**
 * The {@link maxdb_info} function returns a string providing information
 * about the last query executed. The nature of this string is provided
 * below:
 * 
 * Possible maxdb_info return values Query type Example result string
 * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0 INSERT
 * INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0 Warnings: 0
 * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
 * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0 UPDATE ... Rows
 * matched: 40 Changed: 40 Warnings: 0
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_info($link){}

/**
 * Allocates or initializes a MaxDB resource suitable for {@link
 * maxdb_options} and {@link maxdb_real_connect}.
 * 
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_init(){}

/**
 * The {@link maxdb_insert_id} function returns the ID generated by a
 * query on a table with a column having the DEFAULT SERIAL attribute. If
 * the last query wasn't an INSERT or UPDATE statement or if the modified
 * table does not have a column with the DEFAULT SERIAL attribute, this
 * function will return zero.
 * 
 * @param resource $link
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_insert_id($link){}

/**
 * This function is used to disconnect from a MaxDB server specified by
 * the {@link processid} parameter.
 * 
 * @param resource $link
 * @param int $processid
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_kill($link, $processid){}

/**
 * @param resource $link
 * @param string $query
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_master_query($link, $query){}

/**
 * {@link maxdb_more_results} indicates if one or more result sets are
 * available from a previous call to {@link maxdb_multi_query}.
 * 
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_more_results($link){}

/**
 * The {@link maxdb_multi_query} works like the function {@link
 * maxdb_query}. Multiple queries are not yet supported.
 * 
 * @param resource $link
 * @param string $query
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_multi_query($link, $query){}

/**
 * Since multiple queries are not yet supported, {@link
 * maxdb_next_result} returns always .
 * 
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_next_result($link){}

/**
 * {@link maxdb_num_fields} returns the number of fields from specified
 * result set.
 * 
 * @param resource $result
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_num_fields($result){}

/**
 * Returns the number of rows in the result set.
 * 
 * The use of {@link maxdb_num_rows} depends on whether you use buffered
 * or unbuffered result sets. In case you use unbuffered resultsets
 * {@link maxdb_num_rows} will not correct the correct number of rows
 * until all the rows in the result have been retrieved.
 * 
 * @param resource $result
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_num_rows($result){}

/**
 * {@link maxdb_options} can be used to set extra connect options and
 * affect behavior for a connection.
 * 
 * This function may be called multiple times to set several options.
 * 
 * {@link maxdb_options} should be called after {@link maxdb_init} and
 * before {@link maxdb_real_connect}.
 * 
 * The parameter {@link option} is the option that you want to set, the
 * {@link value} is the value for the option. For detailed description of
 * the options see The parameter {@link option} can be one of the
 * following values: Valid options Name Description MAXDB_COMPNAME The
 * component name used to initialise the SQLDBC runtime environment.
 * MAXDB_APPLICATION The application to be connected to the database.
 * MAXDB_APPVERSION The version of the application. MAXDB_SQLMODE The SQL
 * mode. MAXDB_UNICODE TRUE, if the connection is an unicode (UCS2)
 * client or FALSE, if not. MAXDB_TIMEOUT The maximum allowed time of
 * inactivity after which the connection to the database is closed by the
 * system. MAXDB_ISOLATIONLEVEL Specifies whether and how shared locks
 * and exclusive locks are implicitly requested or released.
 * MAXDB_PACKETCOUNT The number of different request packets used for the
 * connection. MAXDB_STATEMENTCACHESIZE The number of prepared statements
 * to be cached for the connection for re-use. MAXDB_CURSORPREFIX The
 * prefix to use for result tables that are automatically named.
 * 
 * @param resource $link
 * @param int $option
 * @param mixed $value
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_options($link, $option, $value){}

/**
 * {@link maxdb_param_count} returns the number of parameter markers
 * present in the prepared statement.
 * 
 * @param resource $stmt
 * @return int
 * @since PECL maxdb 1.0
 **/
function maxdb_param_count($stmt){}

/**
 * Checks whether the connection to the server is working. If it has gone
 * down, and global option maxdb.reconnect is enabled an automatic
 * reconnection is attempted.
 * 
 * This function can be used by clients that remain idle for a long
 * while, to check whether the server has closed the connection and
 * reconnect if necessary.
 * 
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_ping($link){}

/**
 * {@link maxdb_prepare} prepares the SQL query pointed to by the
 * null-terminated string query, and returns a statement handle to be
 * used for further operations on the statement. The query must consist
 * of a single SQL statement.
 * 
 * The parameter {@link query} can include one or more parameter markers
 * in the SQL statement by embedding question mark (?) characters at the
 * appropriate positions.
 * 
 * The parameter markers must be bound to application variables using
 * {@link maxdb_stmt_bind_param} and/or {@link maxdb_stmt_bind_result}
 * before executing the statement or fetching rows.
 * 
 * @param resource $link
 * @param string $query
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_prepare($link, $query){}

/**
 * The {@link maxdb_query} function is used to simplify the act of
 * performing a query against the database represented by the {@link
 * link} parameter.
 * 
 * @param resource $link
 * @param string $query
 * @param int $resultmode
 * @return mixed
 * @since PECL maxdb >= 1.0
 **/
function maxdb_query($link, $query, $resultmode){}

/**
 * {@link maxdb_real_connect} attempts to establish a connection to a
 * MaxDB database engine running on {@link hostname}.
 * 
 * This function differs from {@link maxdb_connect}:
 * 
 * @param resource $link
 * @param string $hostname
 * @param string $username
 * @param string $passwd
 * @param string $dbname
 * @param int $port
 * @param string $socket
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_real_connect($link, $hostname, $username, $passwd, $dbname, $port, $socket){}

/**
 * This function is used to create a legal SQL string that you can use in
 * an SQL statement. The string escapestr is encoded to an escaped SQL
 * string, taking into account the current character set of the
 * connection.
 * 
 * Characters encoded are ', ".
 * 
 * @param resource $link
 * @param string $escapestr
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_real_escape_string($link, $escapestr){}

/**
 * The {@link maxdb_real_query} is functionally identical with the {@link
 * maxdb_query}.
 * 
 * @param resource $link
 * @param string $query
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_real_query($link, $query){}

/**
 * @param int $flags One of the MAXDB_REPORT_XXX constants.
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_report($flags){}

/**
 * Rollbacks the current transaction for the database specified by the
 * {@link link} parameter.
 * 
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_rollback($link){}

/**
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_rpl_parse_enabled($link){}

/**
 * @param resource $link
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_rpl_probe($link){}

/**
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_rpl_query_type($link){}

/**
 * The {@link maxdb_select_db} function selects the default database
 * (specified by the {@link dbname} parameter) to be used when performing
 * queries against the database connection represented by the {@link
 * link} parameter.
 * 
 * @param resource $link
 * @param string $dbname
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_select_db($link, $dbname){}

/**
 * Allows to send parameter data to the server in pieces (or chunks).
 * This function can be called multiple times to send the parts of a
 * character or binary data value for a column, which must be one of the
 * TEXT or BLOB datatypes.
 * 
 * {@link param_nr} indicates which parameter to associate the data with.
 * Parameters are numbered beginning with 0. {@link data} is a string
 * containing data to be sent.
 * 
 * @param resource $stmt
 * @param int $param_nr
 * @param string $data
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_send_long_data($stmt, $param_nr, $data){}

/**
 * @param resource $link
 * @param string $query
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_send_query($link, $query){}

/**
 * @return void
 * @since PECL maxdb >= 1.0
 **/
function maxdb_server_end(){}

/**
 * @param array $server
 * @param array $groups
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_server_init($server, $groups){}

/**
 * {@link maxdb_set_opt} can be used to set extra connect options and
 * affect behavior for a connection.
 * 
 * This function may be called multiple times to set several options.
 * 
 * {@link maxdb_set_opt} should be called after {@link maxdb_init} and
 * before {@link maxdb_real_connect}.
 * 
 * The parameter {@link option} is the option that you want to set, the
 * {@link value} is the value for the option. For detailed description of
 * the options see The parameter {@link option} can be one of the
 * following values: Valid options Name Description MAXDB_COMPNAME The
 * component name used to initialise the SQLDBC runtime environment.
 * MAXDB_APPLICATION The application to be connected to the database.
 * MAXDB_APPVERSION The version of the application. MAXDB_SQLMODE The SQL
 * mode. MAXDB_UNICODE TRUE, if the connection is an unicode (UCS2)
 * client or FALSE, if not. MAXDB_TIMEOUT The maximum allowed time of
 * inactivity after which the connection to the database is closed by the
 * system. MAXDB_ISOLATIONLEVEL Specifies whether and how shared locks
 * and exclusive locks are implicitly requested or released.
 * MAXDB_PACKETCOUNT The number of different request packets used for the
 * connection. MAXDB_STATEMENTCACHESIZE The number of prepared statements
 * to be cached for the connection for re-use. MAXDB_CURSORPREFIX The
 * prefix to use for result tables that are automatically named.
 * 
 * @param resource $link
 * @param int $option
 * @param mixed $value
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_set_opt($link, $option, $value){}

/**
 * Returns a string containing the SQLSTATE error code for the last
 * error. The error code consists of five characters. '00000' means no
 * error. The values are specified by ANSI SQL and ODBC.
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_sqlstate($link){}

/**
 * @param resource $link
 * @param string $key
 * @param string $cert
 * @param string $ca
 * @param string $capath
 * @param string $cipher
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_ssl_set($link, $key, $cert, $ca, $capath, $cipher){}

/**
 * {@link maxdb_stat} returns a string containing several information
 * about the MaxDB server running.
 * 
 * @param resource $link
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stat($link){}

/**
 * {@link maxdb_stmt_affected_rows} returns the number of rows affected
 * by INSERT, UPDATE, or DELETE query. If the last query was invalid or
 * the number of rows can not determined, this function will return -1.
 * 
 * @param resource $stmt
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_affected_rows($stmt){}

/**
 * (extended syntax):
 * 
 * (extended syntax):
 * 
 * {@link maxdb_stmt_bind_param} is used to bind variables for the
 * parameter markers in the SQL statement that was passed to {@link
 * maxdb_prepare}. The string {@link types} contains one or more
 * characters which specify the types for the corresponding bind
 * variables.
 * 
 * The extended syntax of {@link maxdb_stmt_bind_param} allows to give
 * the parameters as an array instead of a variable list of PHP variables
 * to the function. If the array variable has not been used before
 * calling {@link maxdb_stmt_bind_param}, it has to be initialized as an
 * emtpy array. See the examples how to use {@link maxdb_stmt_bind_param}
 * with extended syntax.
 * 
 * Variables for SELECT INTO SQL statements can also be bound using
 * {@link maxdb_stmt_bind_param}. Parameters for database procedures can
 * be bound using {@link maxdb_stmt_bind_param}. See the examples how to
 * use {@link maxdb_stmt_bind_param} in this cases.
 * 
 * If a variable bound as INTO variable to an SQL statement was used
 * before, the content of this variable is overwritten by the data of the
 * SELECT INTO statement. A reference to this variable will be invalid
 * after a call to {@link maxdb_stmt_bind_param}.
 * 
 * For INOUT parameters of database procedures the content of the bound
 * INOUT variable is overwritten by the output value of the database
 * procedure. A reference to this variable will be invalid after a call
 * to {@link maxdb_stmt_bind_param}.
 * 
 * Type specification chars Character Description i corresponding
 * variable has type integer d corresponding variable has type double s
 * corresponding variable has type string b corresponding variable is a
 * blob and will be sent in packages
 * 
 * @param resource $stmt
 * @param string $types
 * @param mixed $var1
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_bind_param($stmt, $types, &$var1){}

/**
 * {@link maxdb_stmt_bind_result} is used to associate (bind) columns in
 * the result set to variables. When {@link maxdb_stmt_fetch} is called
 * to fetch data, the MaxDB client/server protocol places the data for
 * the bound columns into the specified variables {@link var1, ...}.
 * 
 * @param resource $stmt
 * @param mixed $var1
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_bind_result($stmt, &$var1){}

/**
 * Closes a prepared statement. {@link maxdb_stmt_close} also deallocates
 * the statement handle pointed to by {@link stmt}. If the current
 * statement has pending or unread results, this function cancels them so
 * that the next query can be executed.
 * 
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_close($stmt){}

/**
 * This function has to be called after a sequence of {@link
 * maxdb_stmt_send_long_data}, that was started after {@link
 * maxdb_execute}.
 * 
 * {@link param_nr} indicates which parameter to associate the end of
 * data with. Parameters are numbered beginning with 0.
 * 
 * @param resource $stmt
 * @param int $param_nr
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_stmt_close_long_data($stmt, $param_nr){}

/**
 * The {@link maxdb_stmt_data_seek} function seeks to an arbitrary result
 * pointer specified by the {@link offset} in the statement result set
 * represented by {@link statement}. The {@link offset} parameter must be
 * between zero and the total number of rows minus one (0..{@link
 * maxdb_stmt_num_rows} - 1).
 * 
 * @param resource $statement
 * @param int $offset
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_data_seek($statement, $offset){}

/**
 * For the statement specified by stmt, {@link maxdb_stmt_errno} returns
 * the error code for the most recently invoked statement function that
 * can succeed or fail.
 * 
 * @param resource $stmt
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_errno($stmt){}

/**
 * For the statement specified by stmt, {@link maxdb_stmt_error} returns
 * a containing the error message for the most recently invoked statement
 * function that can succeed or fail.
 * 
 * @param resource $stmt
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_error($stmt){}

/**
 * The {@link maxdb_stmt_execute} function executes a query that has been
 * previously prepared using the {@link maxdb_prepare} function
 * represented by the {@link stmt} resource. When executed any parameter
 * markers which exist will automatically be replaced with the appropiate
 * data.
 * 
 * If the statement is UPDATE, DELETE, or INSERT, the total number of
 * affected rows can be determined by using the {@link
 * maxdb_stmt_affected_rows} function. Likewise, if the query yields a
 * result set the {@link maxdb_fetch} function is used.
 * 
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_execute($stmt){}

/**
 * {@link maxdb_stmt_fetch} returns row data using the variables bound by
 * {@link maxdb_stmt_bind_result}.
 * 
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_fetch($stmt){}

/**
 * The {@link maxdb_stmt_free_result} function frees the result memory
 * associated with the statement represented by the {@link stmt}
 * parameter, which was allocated by {@link maxdb_stmt_store_result}.
 * 
 * @param resource $stmt
 * @return void
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_free_result($stmt){}

/**
 * Allocates and initializes a statement resource suitable for {@link
 * maxdb_stmt_prepare}.
 * 
 * @param resource $link
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_init($link){}

/**
 * Returns the number of rows in the result set.
 * 
 * @param resource $stmt
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_num_rows($stmt){}

/**
 * {@link maxdb_stmt_param_count} returns the number of parameter markers
 * present in the prepared statement.
 * 
 * @param resource $stmt
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_param_count($stmt){}

/**
 * {@link maxdb_stmt_prepare} prepares the SQL query pointed to by the
 * null-terminated string query. The statement resource has to be
 * allocated by {@link maxdb_stmt_init}. The query must consist of a
 * single SQL statement.
 * 
 * The parameter {@link query} can include one or more parameter markers
 * in the SQL statement by embedding question mark (?) characters at the
 * appropriate positions.
 * 
 * The parameter markers must be bound to application variables using
 * {@link maxdb_stmt_bind_param} and/or {@link maxdb_stmt_bind_result}
 * before executing the statement or fetching rows.
 * 
 * @param resource $stmt
 * @param string $query
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_prepare($stmt, $query){}

/**
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_reset($stmt){}

/**
 * If a statement passed to {@link maxdb_prepare} is one that produces a
 * result set, {@link maxdb_stmt_result_metadata} returns the result
 * resource that can be used to process the meta information such as
 * total number of fields and individual field information.
 * 
 * The result set structure should be freed when you are done with it,
 * which you can do by passing it to {@link maxdb_free_result}
 * 
 * @param resource $stmt
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_result_metadata($stmt){}

/**
 * Allows to send parameter data to the server in pieces (or chunks).
 * This function can be called multiple times to send the parts of a
 * character or binary data value for a column, which must be one of the
 * TEXT or BLOB datatypes.
 * 
 * {@link param_nr} indicates which parameter to associate the data with.
 * Parameters are numbered beginning with 0. {@link data} is a string
 * containing data to be sent.
 * 
 * @param resource $stmt
 * @param int $param_nr
 * @param string $data
 * @return bool
 * @since PECL maxdb 1.0
 **/
function maxdb_stmt_send_long_data($stmt, $param_nr, $data){}

/**
 * Returns a string containing the SQLSTATE error code for the most
 * recently invoked prepared statement function that can succeed or fail.
 * The error code consists of five characters. '00000' means no error.
 * The values are specified by ANSI SQL and ODBC.
 * 
 * @param resource $stmt
 * @return string
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_sqlstate($stmt){}

/**
 * {@link maxdb_stmt_store_result} has no functionally effect and should
 * not be used for retrieving data from MaxDB server.
 * 
 * @param resource $stmt
 * @return bool
 * @since PECL maxdb >= 1.0
 **/
function maxdb_stmt_store_result($stmt){}

/**
 * This function has no functionally effect.
 * 
 * @param resource $link
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_store_result($link){}

/**
 * The {@link maxdb_thread_id} function returns the thread ID for the
 * current connection which can then be killed using the {@link
 * maxdb_kill} function. If the connection is lost and you reconnect with
 * {@link maxdb_ping}, the thread ID will be other. Therefore you should
 * get the thread ID only when you need it.
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_thread_id($link){}

/**
 * {@link maxdb_thread_safe} indicates whether the client library is
 * compiled as thread-safe.
 * 
 * @return bool
 * @since PECL maxdb >= 7.6.06.04
 **/
function maxdb_thread_safe(){}

/**
 * {@link maxdb_use_result} has no effect.
 * 
 * @param resource $link
 * @return resource
 * @since PECL maxdb >= 1.0
 **/
function maxdb_use_result($link){}

/**
 * {@link maxdb_warning_count} returns the number of warnings from the
 * last query in the connection represented by the {@link link}
 * parameter.
 * 
 * @param resource $link
 * @return int
 * @since PECL maxdb >= 1.0
 **/
function maxdb_warning_count($link){}

/**
 * Checks if the specified byte stream is valid for the specified
 * encoding. It is useful to prevent so-called "Invalid Encoding Attack".
 * 
 * @param string $var The byte stream to check. If it is omitted, this
 *   function checks all the input from the beginning of the request.
 * @param string $encoding The expected encoding.
 * @return bool
 * @since PHP 4 >= 4.4.3, PHP 5 >= 5.1.3
 **/
function mb_check_encoding($var, $encoding){}

/**
 * Performs case folding on a string, converted in the way specified by
 * {@link mode}.
 * 
 * @param string $str The string being converted.
 * @param int $mode The mode of the conversion. It can be one of
 *   MB_CASE_UPPER, MB_CASE_LOWER, or MB_CASE_TITLE.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mb_convert_case($str, $mode, $encoding){}

/**
 * Converts the character encoding of string {@link str} to {@link
 * to_encoding} from optionally {@link from_encoding}.
 * 
 * @param string $str The string being encoded.
 * @param string $to_encoding The type of encoding that {@link str} is
 *   being converted to.
 * @param mixed $from_encoding Is specified by character code names
 *   before conversion. It is either an array, or a comma separated
 *   enumerated list. If {@link from_encoding} is not specified, the
 *   internal encoding will be used.
 *   
 *   "auto" may be used, which expands to "ASCII,JIS,UTF-8,EUC-JP,SJIS".
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_convert_encoding($str, $to_encoding, $from_encoding){}

/**
 * Performs a "han-kaku" - "zen-kaku" conversion for string {@link str}.
 * This function is only useful for Japanese.
 * 
 * @param string $str The string being converted.
 * @param string $option The conversion option. Specify with a
 *   combination of following options. Applicable Conversion Options
 *   Option Meaning r Convert "zen-kaku" alphabets to "han-kaku" R
 *   Convert "han-kaku" alphabets to "zen-kaku" n Convert "zen-kaku"
 *   numbers to "han-kaku" N Convert "han-kaku" numbers to "zen-kaku" a
 *   Convert "zen-kaku" alphabets and numbers to "han-kaku" A Convert
 *   "han-kaku" alphabets and numbers to "zen-kaku" (Characters included
 *   in "a", "A" options are U+0021 - U+007E excluding U+0022, U+0027,
 *   U+005C, U+007E) s Convert "zen-kaku" space to "han-kaku" (U+3000 ->
 *   U+0020) S Convert "han-kaku" space to "zen-kaku" (U+0020 -> U+3000)
 *   k Convert "zen-kaku kata-kana" to "han-kaku kata-kana" K Convert
 *   "han-kaku kata-kana" to "zen-kaku kata-kana" h Convert "zen-kaku
 *   hira-gana" to "han-kaku kata-kana" H Convert "han-kaku kata-kana" to
 *   "zen-kaku hira-gana" c Convert "zen-kaku kata-kana" to "zen-kaku
 *   hira-gana" C Convert "zen-kaku hira-gana" to "zen-kaku kata-kana" V
 *   Collapse voiced sound notation and convert them into a character.
 *   Use with "K","H"
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_convert_kana($str, $option, $encoding){}

/**
 * Converts character encoding of variables {@link vars} in encoding
 * {@link from_encoding} to encoding {@link to_encoding}.
 * 
 * {@link mb_convert_variables} join strings in Array or Object to detect
 * encoding, since encoding detection tends to fail for short strings.
 * Therefore, it is impossible to mix encoding in single array or object.
 * 
 * @param string $to_encoding The encoding that the string is being
 *   converted to.
 * @param mixed $from_encoding {@link from_encoding} is specified as an
 *   array or comma separated string, it tries to detect encoding from
 *   {@link from-coding}. When {@link from_encoding} is omitted,
 *   detect_order is used.
 * @param mixed $vars {@link vars} is the reference to the variable
 *   being converted. String, Array and Object are accepted. {@link
 *   mb_convert_variables} assumes all parameters have the same encoding.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_convert_variables($to_encoding, $from_encoding, &$vars){}

/**
 * Decodes encoded-word string {@link str} in MIME header.
 * 
 * @param string $str The string being decoded.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_decode_mimeheader($str){}

/**
 * Convert numeric string reference of string {@link str} in a specified
 * block to character.
 * 
 * @param string $str The string being decoded.
 * @param array $convmap {@link convmap} is an array that specifies the
 *   code area to convert.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_decode_numericentity($str, $convmap, $encoding){}

/**
 * Detects character encoding in string {@link str}.
 * 
 * @param string $str The string being detected.
 * @param mixed $encoding_list {@link encoding_list} is list of
 *   character encoding. Encoding order may be specified by array or
 *   comma separated list string. If {@link encoding_list} is omitted,
 *   detect_order is used.
 * @param bool $strict {@link strict} specifies whether to use the
 *   strict encoding detection or not. Default is .
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_detect_encoding($str, $encoding_list, $strict){}

/**
 * Sets the automatic character encoding detection order to {@link
 * encoding_list}.
 * 
 * @param mixed $encoding_list {@link encoding_list} is an array or
 *   comma separated list of character encoding. ("auto" is expanded to
 *   "ASCII, JIS, UTF-8, EUC-JP, SJIS") If {@link encoding_list} is
 *   omitted, it returns the current character encoding detection order
 *   as array. This setting affects {@link mb_detect_encoding} and {@link
 *   mb_send_mail}. mbstring currently implements the following encoding
 *   detection filters. If there is an invalid byte sequence for the
 *   following encodings, encoding detection will fail. For ISO-8859-*,
 *   mbstring always detects as ISO-8859-*. For UTF-16, UTF-32, UCS2 and
 *   UCS4, encoding detection will fail always.
 *   
 *   Useless detect order example
 *   
 *   ; Always detect as ISO-8859-1 detect_order = ISO-8859-1, UTF-8
 *   
 *   ; Always detect as UTF-8, since ASCII/UTF-7 values are ; valid for
 *   UTF-8 detect_order = UTF-8, ASCII, UTF-7
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_detect_order($encoding_list){}

/**
 * Encodes a given string {@link str} by the MIME header encoding scheme.
 * 
 * @param string $str The string being encoded.
 * @param string $charset {@link charset} specifies the name of the
 *   character set in which {@link str} is represented in. The default
 *   value is determined by the current NLS setting (mbstring.language).
 *   {@link mb_internal_encoding} should be set to same encoding.
 * @param string $transfer_encoding {@link transfer_encoding} specifies
 *   the scheme of MIME encoding. It should be either "B" (Base64) or "Q"
 *   (Quoted-Printable). Falls back to "B" if not given.
 * @param string $linefeed {@link linefeed} specifies the EOL
 *   (end-of-line) marker with which {@link mb_encode_mimeheader}
 *   performs line-folding (a RFC term, the act of breaking a line longer
 *   than a certain length into multiple lines. The length is currently
 *   hard-coded to 74 characters). Falls back to "\r\n" (CRLF) if not
 *   given.
 * @param int $indent Indentation of the first line (number of
 *   characters in the header before {@link str}).
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_encode_mimeheader($str, $charset, $transfer_encoding, $linefeed, $indent){}

/**
 * Converts specified character codes in string {@link str} from HTML
 * numeric character reference to character code.
 * 
 * @param string $str The string being encoded.
 * @param array $convmap {@link convmap} is array specifies code area
 *   to convert.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_encode_numericentity($str, $convmap, $encoding){}

/**
 * Returns an array of aliases for a known {@link encoding} type.
 * 
 * @param string $encoding The encoding type being checked, for
 *   aliases.
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function mb_encoding_aliases($encoding){}

/**
 * @param string $pattern The search pattern.
 * @param string $string The search string.
 * @param array $regs Contains a substring of the matched string.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg($pattern, $string, $regs){}

/**
 * @param string $pattern The regular expression pattern.
 * @param string $string The string being searched.
 * @param array $regs Contains a substring of the matched string.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_eregi($pattern, $string, $regs){}

/**
 * @param string $pattern The regular expression pattern. Multibyte
 *   characters may be used. The case will be ignored.
 * @param string $replace The replacement text.
 * @param string $string The searched string.
 * @param string $option
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_eregi_replace($pattern, $replace, $string, $option){}

/**
 * A regular expression match for a multibyte string
 * 
 * @param string $pattern The regular expression pattern.
 * @param string $string The string being evaluated.
 * @param string $option
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_match($pattern, $string, $option){}

/**
 * @param string $pattern The regular expression pattern. Multibyte
 *   characters may be used in {@link pattern}.
 * @param string $replacement The replacement text.
 * @param string $string The string being checked.
 * @param string $option
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_replace($pattern, $replacement, $string, $option){}

/**
 * Performs a multibyte regular expression match for a predefined
 * multibyte string.
 * 
 * @param string $pattern The search pattern.
 * @param string $option The search option.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search($pattern, $option){}

/**
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search_getpos(){}

/**
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search_getregs(){}

/**
 * {@link mb_ereg_search_init} sets {@link string} and {@link pattern}
 * for a multibyte regular expression. These values are used for {@link
 * mb_ereg_search}, {@link mb_ereg_search_pos}, and {@link
 * mb_ereg_search_regs}.
 * 
 * @param string $string The search string.
 * @param string $pattern The search pattern.
 * @param string $option The search option.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search_init($string, $pattern, $option){}

/**
 * Returns position and length of a matched part of the multibyte regular
 * expression for a predefined multibyte string
 * 
 * The string for match is specified by {@link mb_ereg_search_init}. If
 * it is not specified, the previous one will be used.
 * 
 * @param string $pattern The search pattern.
 * @param string $option The search option.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search_pos($pattern, $option){}

/**
 * Returns the matched part of a multibyte regular expression.
 * 
 * @param string $pattern The search pattern.
 * @param string $option The search option.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search_regs($pattern, $option){}

/**
 * @param int $position The position to set.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_ereg_search_setpos($position){}

/**
 * @param string $type If {@link type} isn't specified or is specified
 *   to "all", an array having the elements "internal_encoding",
 *   "http_output", "http_input", "func_overload", "mail_charset",
 *   "mail_header_encoding", "mail_body_encoding" will be returned. If
 *   {@link type} is specified as "http_output", "http_input",
 *   "internal_encoding", "func_overload", the specified setting
 *   parameter will be returned.
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_get_info($type){}

/**
 * @param string $type Input string specifies the input type. "G" for
 *   GET, "P" for POST, "C" for COOKIE, "S" for string, "L" for list, and
 *   "I" for the whole list (will return array). If type is omitted, it
 *   returns the last input type processed.
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_http_input($type){}

/**
 * Set/Get the HTTP output character encoding. Output after this function
 * is converted to {@link encoding}.
 * 
 * @param string $encoding If {@link encoding} is set, {@link
 *   mb_http_output} sets the HTTP output character encoding to {@link
 *   encoding}. If {@link encoding} is omitted, {@link mb_http_output}
 *   returns the current HTTP output character encoding.
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_http_output($encoding){}

/**
 * Set/Get the internal character encoding
 * 
 * @param string $encoding {@link encoding} is the character encoding
 *   name used for the HTTP input character encoding conversion, HTTP
 *   output character encoding conversion, and the default character
 *   encoding for string functions defined by the mbstring module.
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_internal_encoding($encoding){}

/**
 * Set/Get the current language.
 * 
 * @param string $language Used for encoding e-mail messages. Valid
 *   languages are "Japanese", "ja","English","en" and "uni" (UTF-8).
 *   {@link mb_send_mail} uses this setting to encode e-mail. Language
 *   and its setting is ISO-2022-JP/Base64 for Japanese, UTF-8/Base64 for
 *   uni, ISO-8859-1/quoted printable for English.
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_language($language){}

/**
 * Returns an array containing all supported encodings.
 * 
 * @return array
 * @since PHP 5
 **/
function mb_list_encodings(){}

/**
 * {@link mb_output_handler} is {@link ob_start} callback function.
 * {@link mb_output_handler} converts characters in the output buffer
 * from internal character encoding to HTTP output character encoding.
 * 
 * @param string $contents The contents of the output buffer.
 * @param int $status The status of the output buffer.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_output_handler($contents, $status){}

/**
 * Parses GET/POST/COOKIE data and sets global variables. Since PHP does
 * not provide raw POST/COOKIE data, it can only be used for GET data for
 * now. It parses URL encoded data, detects encoding, converts coding to
 * internal encoding and set values to the {@link result} array or global
 * variables.
 * 
 * @param string $encoded_string The URL encoded data.
 * @param array $result An array containing decoded and character
 *   encoded converted values.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_parse_str($encoded_string, &$result){}

/**
 * Get a MIME charset string for a specific encoding.
 * 
 * @param string $encoding The encoding being checked.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_preferred_mime_name($encoding){}

/**
 * Returns the current encoding for a multibyte regex as a string.
 * 
 * @param string $encoding
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_regex_encoding($encoding){}

/**
 * @param string $options The options to set. This is a a string where
 *   each character is an option. To set a mode, the mode character must
 *   be the last one set, however there can only be set one mode but
 *   multiple options.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mb_regex_set_options($options){}

/**
 * Sends email. Headers and messages are converted and encoded according
 * to the {@link mb_language} setting. It's a wrapper function for {@link
 * mail}, so see also {@link mail} for details.
 * 
 * @param string $to The mail addresses being sent to. Multiple
 *   recipients may be specified by putting a comma between each address
 *   in {@link to}. This parameter is not automatically encoded.
 * @param string $subject The subject of the mail.
 * @param string $message The message of the mail.
 * @param string $additional_headers {@link additional_headers} is
 *   inserted at the end of the header. This is typically used to add
 *   extra headers. Multiple extra headers are separated with a newline
 *   ("\n").
 * @param string $additional_parameter {@link additional_parameter} is
 *   a MTA command line parameter. It is useful when setting the correct
 *   Return-Path header when using sendmail.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_send_mail($to, $subject, $message, $additional_headers, $additional_parameter){}

/**
 * @param string $pattern The regular expression pattern.
 * @param string $string The string being split.
 * @param int $limit
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function mb_split($pattern, $string, $limit){}

/**
 * {@link mb_strcut} performs equivalent operation as {@link mb_substr}
 * with different method. If {@link start} position is multi-byte
 * character's second byte or larger, it starts from first byte of
 * multi-byte character.
 * 
 * It subtracts string from {@link str} that is shorter than {@link
 * length} AND character that is not part of multi-byte string or not
 * being middle of shift sequence.
 * 
 * @param string $str The string being cut.
 * @param int $start The position that begins the cut.
 * @param int $length The string being decoded.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_strcut($str, $start, $length, $encoding){}

/**
 * Truncates string {@link str} to specified {@link width}.
 * 
 * @param string $str The string being decoded.
 * @param int $start The start position offset. Number of characters
 *   from the beginning of string. (First character is 0)
 * @param int $width The width of the desired trim.
 * @param string $trimmarker A string that is added to the end of
 *   string when string is truncated.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_strimwidth($str, $start, $width, $trimmarker, $encoding){}

/**
 * {@link mb_stripos} returns the numeric position of the first
 * occurrence of {@link needle} in the {@link haystack} string. Unlike
 * {@link mb_strpos}, {@link mb_stripos} is case-insensitive. If {@link
 * needle} is not found, it returns .
 * 
 * @param string $haystack The string from which to get the position of
 *   the first occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}
 * @param int $offset The position in {@link haystack} to start
 *   searching
 * @param string $encoding Character encoding name to use. If it is
 *   omitted, internal character encoding is used.
 * @return int
 * @since PHP 5 >= 5.2.0
 **/
function mb_stripos($haystack, $needle, $offset, $encoding){}

/**
 * {@link mb_stristr} finds the first occurrence of {@link needle} in
 * {@link haystack} and returns the portion of {@link haystack}. Unlike
 * {@link mb_strstr}, {@link mb_stristr} is case-insensitive. If {@link
 * needle} is not found, it returns .
 * 
 * @param string $haystack The string from which to get the first
 *   occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}
 * @param bool $part Determines which portion of {@link haystack} this
 *   function returns. If set to , it returns all of {@link haystack}
 *   from the beginning to the first occurrence of {@link needle}. If set
 *   to , it returns all of {@link haystack} from the first occurrence of
 *   {@link needle} to the end,
 * @param string $encoding Character encoding name to use. If it is
 *   omitted, internal character encoding is used.
 * @return string
 * @since PHP 5 >= 5.2.0
 **/
function mb_stristr($haystack, $needle, $part, $encoding){}

/**
 * Gets the length of a string.
 * 
 * @param string $str The string being checked for length.
 * @param string $encoding
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_strlen($str, $encoding){}

/**
 * Finds position of the first occurrence of a string in a string.
 * 
 * Performs a multi-byte safe {@link strpos} operation based on number of
 * characters. The first character's position is 0, the second character
 * position is 1, and so on.
 * 
 * @param string $haystack The string being checked.
 * @param string $needle The position counted from the beginning of
 *   {@link haystack}.
 * @param int $offset The search offset. If it is not specified, 0 is
 *   used.
 * @param string $encoding
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_strpos($haystack, $needle, $offset, $encoding){}

/**
 * {@link mb_strrchr} finds the last occurrence of {@link needle} in
 * {@link haystack} and returns the portion of {@link haystack}. If
 * {@link needle} is not found, it returns .
 * 
 * @param string $haystack The string from which to get the last
 *   occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}
 * @param bool $part Determines which portion of {@link haystack} this
 *   function returns. If set to , it returns all of {@link haystack}
 *   from the beginning to the last occurrence of {@link needle}. If set
 *   to , it returns all of {@link haystack} from the last occurrence of
 *   {@link needle} to the end,
 * @param string $encoding Character encoding name to use. If it is
 *   omitted, internal character encoding is used.
 * @return string
 * @since PHP 5 >= 5.2.0
 **/
function mb_strrchr($haystack, $needle, $part, $encoding){}

/**
 * {@link mb_strrichr} finds the last occurrence of {@link needle} in
 * {@link haystack} and returns the portion of {@link haystack}. Unlike
 * {@link mb_strrchr}, {@link mb_strrichr} is case-insensitive. If {@link
 * needle} is not found, it returns .
 * 
 * @param string $haystack The string from which to get the last
 *   occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}
 * @param bool $part Determines which portion of {@link haystack} this
 *   function returns. If set to , it returns all of {@link haystack}
 *   from the beginning to the last occurrence of {@link needle}. If set
 *   to , it returns all of {@link haystack} from the last occurrence of
 *   {@link needle} to the end,
 * @param string $encoding Character encoding name to use. If it is
 *   omitted, internal character encoding is used.
 * @return string
 * @since PHP 5 >= 5.2.0
 **/
function mb_strrichr($haystack, $needle, $part, $encoding){}

/**
 * {@link mb_strripos} performs multi-byte safe {@link strripos}
 * operation based on number of characters. {@link needle} position is
 * counted from the beginning of {@link haystack}. First character's
 * position is 0. Second character position is 1. Unlike {@link
 * mb_strrpos}, {@link mb_strripos} is case-insensitive.
 * 
 * @param string $haystack The string from which to get the position of
 *   the last occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}
 * @param int $offset The position in {@link haystack} to start
 *   searching
 * @param string $encoding Character encoding name to use. If it is
 *   omitted, internal character encoding is used.
 * @return int
 * @since PHP 5 >= 5.2.0
 **/
function mb_strripos($haystack, $needle, $offset, $encoding){}

/**
 * Performs a multibyte safe {@link strrpos} operation based on the
 * number of characters. {@link needle} position is counted from the
 * beginning of {@link haystack}. First character's position is 0. Second
 * character position is 1.
 * 
 * @param string $haystack The string being checked, for the last
 *   occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}.
 * @param int $offset
 * @param string $encoding
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_strrpos($haystack, $needle, $offset, $encoding){}

/**
 * {@link mb_strstr} finds the first occurrence of {@link needle} in
 * {@link haystack} and returns the portion of {@link haystack}. If
 * {@link needle} is not found, it returns .
 * 
 * @param string $haystack The string from which to get the first
 *   occurrence of {@link needle}
 * @param string $needle The string to find in {@link haystack}
 * @param bool $part Determines which portion of {@link haystack} this
 *   function returns. If set to , it returns all of {@link haystack}
 *   from the beginning to the first occurrence of {@link needle}. If set
 *   to , it returns all of {@link haystack} from the first occurrence of
 *   {@link needle} to the end,
 * @param string $encoding Character encoding name to use. If it is
 *   omitted, internal character encoding is used.
 * @return string
 * @since PHP 5 >= 5.2.0
 **/
function mb_strstr($haystack, $needle, $part, $encoding){}

/**
 * Returns {@link str} with all alphabetic characters converted to
 * lowercase.
 * 
 * @param string $str The string being lowercased.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mb_strtolower($str, $encoding){}

/**
 * Returns {@link str} with all alphabetic characters converted to
 * uppercase.
 * 
 * @param string $str The string being uppercased.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mb_strtoupper($str, $encoding){}

/**
 * Returns the width of string {@link str}.
 * 
 * Multi-byte characters are usually twice the width of single byte
 * characters.
 * 
 * Characters width Chars Width U+0000 - U+0019 0 U+0020 - U+1FFF 1
 * U+2000 - U+FF60 2 U+FF61 - U+FF9F 1 U+FFA0 - 2
 * 
 * @param string $str The string being decoded.
 * @param string $encoding
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_strwidth($str, $encoding){}

/**
 * Specifies a substitution character when input character encoding is
 * invalid or character code does not exist in output character encoding.
 * Invalid characters may be substituted (no output), string or integer
 * value (Unicode character code value).
 * 
 * This setting affects {@link mb_convert_encoding}, {@link
 * mb_convert_variables}, {@link mb_output_handler}, and {@link
 * mb_send_mail}.
 * 
 * @param mixed $substrchar Specify the Unicode value as an integer, or
 *   as one of the following strings: "none" : no output "long" : Output
 *   character code value (Example: U+3000, JIS+7E7E) "entity" : Output
 *   character entity (Example: Ȁ)
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_substitute_character($substrchar){}

/**
 * Performs a multi-byte safe {@link substr} operation based on number of
 * characters. Position is counted from the beginning of {@link str}.
 * First character's position is 0. Second character position is 1, and
 * so on.
 * 
 * @param string $str The string being checked.
 * @param int $start The first position used in {@link str}.
 * @param int $length The maximum length of the returned string.
 * @param string $encoding
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mb_substr($str, $start, $length, $encoding){}

/**
 * Counts the number of times the {@link needle} substring occurs in the
 * {@link haystack} string.
 * 
 * @param string $haystack The string being checked.
 * @param string $needle The string being found.
 * @param string $encoding
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mb_substr_count($haystack, $needle, $encoding){}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The {@link mode} should
 * be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function should not be used anymore, see {@link mcrypt_generic}
 * and {@link mdecrypt_generic} for replacements.
 * 
 * @param int $cipher
 * @param string $key
 * @param string $data
 * @param int $mode
 * @param string $iv
 * @return string
 * @since PHP 4, PHP 5
 **/
function mcrypt_cbc($cipher, $key, $data, $mode, $iv){}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The {@link mode} should
 * be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function should not be used anymore, see {@link mcrypt_generic}
 * and {@link mdecrypt_generic} for replacements.
 * 
 * @param int $cipher
 * @param string $key
 * @param string $data
 * @param int $mode
 * @param string $iv
 * @return string
 * @since PHP 4, PHP 5
 **/
function mcrypt_cfb($cipher, $key, $data, $mode, $iv){}

/**
 * Create an initialization vector (IV) from a random source.
 * 
 * The IV is only meant to give an alternative seed to the encryption
 * routines. This IV does not need to be secret at all, though it can be
 * desirable. You even can send it along with your ciphertext without
 * losing security.
 * 
 * @param int $size Determines the size of the IV, parameter {@link
 *   source} (defaults to random value) specifies the source of the IV.
 * @param int $source The source can be MCRYPT_RAND (system random
 *   number generator), MCRYPT_DEV_RANDOM (read data from /dev/random)
 *   and MCRYPT_DEV_URANDOM (read data from /dev/urandom). Prior to
 *   5.3.0, MCRYPT_RAND was the only one supported on Windows.
 * @return string
 * @since PHP 4, PHP 5
 **/
function mcrypt_create_iv($size, $source){}

/**
 * Decrypts the {@link data} and returns the unencrypted data.
 * 
 * @param string $cipher {@link cipher} is one of the MCRYPT_ciphername
 *   constants of the name of the algorithm as string.
 * @param string $key {@link key} is the key with which the data is
 *   encrypted. If it's smaller that the required keysize, it is padded
 *   with '\0'.
 * @param string $data {@link data} is the data that will be decrypted
 *   with the given cipher and mode. If the size of the data is not n *
 *   blocksize, the data will be padded with '\0'.
 * @param string $mode {@link mode} is one of the MCRYPT_MODE_modename
 *   constants of one of "ecb", "cbc", "cfb", "ofb", "nofb" or "stream".
 * @param string $iv The {@link iv} parameter is used for the
 *   initialisation in CBC, CFB, OFB modes, and in some algorithms in
 *   STREAM mode. If you do not supply an IV, while it is needed for an
 *   algorithm, the function issues a warning and uses an IV with all
 *   bytes set to '\0'.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_decrypt($cipher, $key, $data, $mode, $iv){}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The {@link mode} should
 * be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function is deprecated and should not be used anymore, see {@link
 * mcrypt_generic} and {@link mdecrypt_generic} for replacements.
 * 
 * @param int $cipher
 * @param string $key
 * @param string $data
 * @param int $mode
 * @return string
 * @since PHP 4, PHP 5
 **/
function mcrypt_ecb($cipher, $key, $data, $mode){}

/**
 * Encrypts the data and returns it.
 * 
 * @param string $cipher One of the MCRYPT_ciphername constants of the
 *   name of the algorithm as string.
 * @param string $key The key with which the data will be encrypted. If
 *   it's smaller that the required keysize, it is padded with '\0'. It
 *   is better not to use ASCII strings for keys. It is recommended to
 *   use the mhash functions to create a key from a string.
 * @param string $data The data that will be encrypted with the given
 *   cipher and mode. If the size of the data is not n * blocksize, the
 *   data will be padded with '\0'. The returned crypttext can be larger
 *   that the size of the data that is given by {@link data}.
 * @param string $mode One of the MCRYPT_MODE_modename constants of one
 *   of "ecb", "cbc", "cfb", "ofb", "nofb" or "stream".
 * @param string $iv Used for the initialisation in CBC, CFB, OFB
 *   modes, and in some algorithms in STREAM mode. If you do not supply
 *   an IV, while it is needed for an algorithm, the function issues a
 *   warning and uses an IV with all bytes set to '\0'.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_encrypt($cipher, $key, $data, $mode, $iv){}

/**
 * This function returns the name of the algorithm.
 * 
 * @param resource $td The encryption descriptor.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_get_algorithms_name($td){}

/**
 * Gets the blocksize of the opened algorithm.
 * 
 * @param resource $td The encryption descriptor.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_get_block_size($td){}

/**
 * This function returns the size of the IV of the algorithm specified by
 * the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb
 * modes, and in some algorithms in stream mode.
 * 
 * @param resource $td The encryption descriptor.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_get_iv_size($td){}

/**
 * Gets the maximum supported key size of the algorithm in bytes.
 * 
 * @param resource $td The encryption descriptor.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_get_key_size($td){}

/**
 * This function returns the name of the mode.
 * 
 * @param resource $td The encryption descriptor.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_get_modes_name($td){}

/**
 * Gets the supported key sizes of the opened algorithm.
 * 
 * @param resource $td The encryption descriptor.
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_get_supported_key_sizes($td){}

/**
 * Tells whether the algorithm of the opened mode is a block algorithm.
 * 
 * @param resource $td The encryption descriptor.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_is_block_algorithm($td){}

/**
 * Tells whether the algorithm of the opened mode works on blocks (e.g.
 * for stream, and for cbc, cfb, ofb)..
 * 
 * @param resource $td The encryption descriptor.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_is_block_algorithm_mode($td){}

/**
 * Tells whether the opened mode outputs blocks (e.g. for cbc and ecb,
 * and for cfb and stream).
 * 
 * @param resource $td The encryption descriptor.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_is_block_mode($td){}

/**
 * This function runs the self test on the algorithm specified by the
 * descriptor {@link td}.
 * 
 * @param resource $td The encryption descriptor.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_enc_self_test($td){}

/**
 * This function encrypts data. The data is padded with "\0" to make sure
 * the length of the data is n * blocksize. This function returns the
 * encrypted data. Note that the length of the returned string can in
 * fact be longer then the input, due to the padding of the data.
 * 
 * If you want to store the encrypted data in a database make sure to
 * store the entire string as returned by mcrypt_generic, or the string
 * will not entirely decrypt properly. If your original string is 10
 * characters long and the block size is 8 (use {@link
 * mcrypt_enc_get_block_size} to determine the blocksize), you would need
 * at least 16 characters in your database field. Note the string
 * returned by {@link mdecrypt_generic} will be 16 characters as
 * well...use rtrim($str, "\0") to remove the padding.
 * 
 * If you are for example storing the data in a MySQL database remember
 * that varchar fields automatically have trailing spaces removed during
 * insertion. As encrypted data can end in a space (ASCII 32), the data
 * will be damaged by this removal. Store data in a tinyblob/tinytext (or
 * larger) field instead.
 * 
 * @param resource $td The encryption descriptor. The encryption handle
 *   should always be initialized with {@link mcrypt_generic_init} with a
 *   key and an IV before calling this function. Where the encryption is
 *   done, you should free the encryption buffers by calling {@link
 *   mcrypt_generic_deinit}. See {@link mcrypt_module_open} for an
 *   example.
 * @param string $data The data to encrypt.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_generic($td, $data){}

/**
 * This function terminates encryption specified by the encryption
 * descriptor ({@link td}). It clears all buffers, but does not close the
 * module. You need to call {@link mcrypt_module_close} yourself. (But
 * PHP does this for you at the end of the script.)
 * 
 * @param resource $td The encryption descriptor.
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5
 **/
function mcrypt_generic_deinit($td){}

/**
 * This function is deprecated, use {@link mcrypt_generic_deinit}
 * instead. It can cause crashes when used with {@link
 * mcrypt_module_close} due to multiple buffer frees.
 * 
 * This function terminates encryption specified by the encryption
 * descriptor ({@link td}). Actually it clears all buffers, and closes
 * all the modules used. Returns on error, or on success.
 * 
 * @param resource $td
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_generic_end($td){}

/**
 * You need to call this function before every call to {@link
 * mcrypt_generic} or {@link mdecrypt_generic}.
 * 
 * @param resource $td The encryption descriptor.
 * @param string $key The maximum length of the key should be the one
 *   obtained by calling {@link mcrypt_enc_get_key_size} and every value
 *   smaller than this is legal.
 * @param string $iv The IV should normally have the size of the
 *   algorithms block size, but you must obtain the size by calling
 *   {@link mcrypt_enc_get_iv_size}. IV is ignored in ECB. IV MUST exist
 *   in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be random and
 *   unique (but not secret). The same IV must be used for
 *   encryption/decryption. If you do not want to use it you should set
 *   it to zeros, but this is not recommended.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_generic_init($td, $key, $iv){}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or 2.5.x.
 * 
 * {@link mcrypt_get_block_size} is used to get the size of a block of
 * the specified {@link cipher} (in combination with an encryption mode).
 * 
 * It is more useful to use the {@link mcrypt_enc_get_block_size}
 * function as this uses the resource returned by {@link
 * mcrypt_module_open}.
 * 
 * @param int $cipher One of the MCRYPT_ciphername constants or the
 *   name of the algorithm as string.
 * @return int
 * @since PHP 4, PHP 5
 **/
function mcrypt_get_block_size($cipher){}

/**
 * {@link mcrypt_get_cipher_name} is used to get the name of the
 * specified cipher.
 * 
 * {@link mcrypt_get_cipher_name} takes the cipher number as an argument
 * (libmcrypt 2.2.x) or takes the cipher name as an argument (libmcrypt
 * 2.4.x or higher) and returns the name of the cipher or , if the cipher
 * does not exist.
 * 
 * @param int $cipher One of the MCRYPT_ciphername constants or the
 *   name of the algorithm as string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function mcrypt_get_cipher_name($cipher){}

/**
 * Gets the size of the IV belonging to a specific {@link cipher}/{@link
 * mode} combination.
 * 
 * It is more useful to use the {@link mcrypt_enc_get_iv_size} function
 * as this uses the resource returned by {@link mcrypt_module_open}.
 * 
 * @param string $cipher One of the MCRYPT_ciphername constants of the
 *   name of the algorithm as string.
 * @param string $mode {@link mode} is one of the MCRYPT_MODE_modename
 *   constants or one of "ecb", "cbc", "cfb", "ofb", "nofb" or "stream".
 *   The IV is ignored in ECB mode as this mode does not require it. You
 *   will need to have the same IV (think: starting point) both at
 *   encryption and decryption stages, otherwise your encryption will
 *   fail.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_get_iv_size($cipher, $mode){}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or 2.5.x.
 * 
 * {@link mcrypt_get_key_size} is used to get the size of a key of the
 * specified {@link cipher} (in combination with an encryption mode).
 * 
 * This example shows how to use this function when linked against
 * libmcrypt 2.4.x and 2.5.x. It is more useful to use the {@link
 * mcrypt_enc_get_key_size} function as this uses the resource returned
 * by {@link mcrypt_module_open}.
 * 
 * {@link mcrypt_get_key_size} example
 * 
 * <?php echo mcrypt_get_key_size('tripledes', 'ecb'); ?>
 * 
 * Prints: 24
 * 
 * See also: {@link mcrypt_get_block_size}, {@link
 * mcrypt_enc_get_key_size} and {@link mcrypt_encrypt}.
 * 
 * @param int $cipher
 * @return int
 * @since PHP 4, PHP 5
 **/
function mcrypt_get_key_size($cipher){}

/**
 * Gets the list of all supported algorithms in the {@link lib_dir}
 * parameter.
 * 
 * @param string $lib_dir Specifies the directory where all algorithms
 *   are located. If not specifies, the value of the
 *   mcrypt.algorithms_dir directive is used.
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_list_algorithms($lib_dir){}

/**
 * Gets the list of all supported modes in the {@link lib_dir} parameter.
 * 
 * @param string $lib_dir Specifies the directory where all modes are
 *   located. If not specifies, the value of the mcrypt.modes_dir
 *   directive is used.
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_list_modes($lib_dir){}

/**
 * Closes the specified encryption handle.
 * 
 * @param resource $td The encryption descriptor.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_close($td){}

/**
 * Gets the blocksize of the specified algorithm.
 * 
 * @param string $algorithm The algorithm name.
 * @param string $lib_dir This optional parameter can contain the
 *   location where the mode module is on the system.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_get_algo_block_size($algorithm, $lib_dir){}

/**
 * Gets the maximum supported keysize of the opened mode.
 * 
 * @param string $algorithm The algorithm name.
 * @param string $lib_dir This optional parameter can contain the
 *   location where the mode module is on the system.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_get_algo_key_size($algorithm, $lib_dir){}

/**
 * Returns an array with the key sizes supported by the specified
 * algorithm. If it returns an empty array then all key sizes between 1
 * and {@link mcrypt_module_get_algo_key_size} are supported by the
 * algorithm.
 * 
 * @param string $algorithm The algorithm to used.
 * @param string $lib_dir The optional {@link lib_dir} parameter can
 *   contain the location of where the algorithm module is on the system.
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_get_supported_key_sizes($algorithm, $lib_dir){}

/**
 * This function returns if the specified algorithm is a block algorithm,
 * or is it is a stream algorithm.
 * 
 * @param string $algorithm The algorithm to check.
 * @param string $lib_dir The optional {@link lib_dir} parameter can
 *   contain the location of where the algorithm module is on the system.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_is_block_algorithm($algorithm, $lib_dir){}

/**
 * This function returns if the mode is for use with block algorithms,
 * otherwise it returns . (e.g. for stream, and for cbc, cfb, ofb).
 * 
 * @param string $mode The mode to check.
 * @param string $lib_dir The optional {@link lib_dir} parameter can
 *   contain the location of where the algorithm module is on the system.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_is_block_algorithm_mode($mode, $lib_dir){}

/**
 * This function returns if the mode outputs blocks of bytes or if it
 * outputs just bytes. (e.g. for cbc and ecb, and for cfb and stream).
 * 
 * @param string $mode The mode to check.
 * @param string $lib_dir The optional {@link lib_dir} parameter can
 *   contain the location of where the algorithm module is on the system.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_is_block_mode($mode, $lib_dir){}

/**
 * This function opens the module of the algorithm and the mode to be
 * used. The name of the algorithm is specified in algorithm, e.g.
 * "twofish" or is one of the MCRYPT_ciphername constants. The module is
 * closed by calling {@link mcrypt_module_close}.
 * 
 * @param string $algorithm The algorithm to be used.
 * @param string $algorithm_directory The {@link algorithm_directory}
 *   and {@link mode_directory} are used to locate the encryption
 *   modules. When you supply a directory name, it is used. When you set
 *   one of these to the empty string (""), the value set by the {@link
 *   mcrypt.algorithms_dir} or {@link mcrypt.modes_dir} ini-directive is
 *   used. When these are not set, the default directories that are used
 *   are the ones that were compiled in into libmcrypt (usually
 *   /usr/local/lib/libmcrypt).
 * @param string $mode The mode to be used.
 * @param string $mode_directory
 * @return resource
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_open($algorithm, $algorithm_directory, $mode, $mode_directory){}

/**
 * This function runs the self test on the algorithm specified.
 * 
 * @param string $algorithm The algorithm to test.
 * @param string $lib_dir The optional {@link lib_dir} parameter can
 *   contain the location of where the algorithm module is on the system.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mcrypt_module_self_test($algorithm, $lib_dir){}

/**
 * The first prototype is when linked against libmcrypt 2.2.x, the second
 * when linked against libmcrypt 2.4.x or higher. The {@link mode} should
 * be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.
 * 
 * This function should not be used anymore, see {@link mcrypt_generic}
 * and {@link mdecrypt_generic} for replacements.
 * 
 * @param int $cipher
 * @param string $key
 * @param string $data
 * @param int $mode
 * @param string $iv
 * @return string
 * @since PHP 4, PHP 5
 **/
function mcrypt_ofb($cipher, $key, $data, $mode, $iv){}

/**
 * Calculates the MD5 hash of {@link str} using the RSA Data Security,
 * Inc. MD5 Message-Digest Algorithm, and returns that hash.
 * 
 * @param string $str The string.
 * @param bool $raw_output If the optional {@link raw_output} is set to
 *   , then the md5 digest is instead returned in raw binary format with
 *   a length of 16.
 * @return string
 * @since PHP 4, PHP 5
 **/
function md5($str, $raw_output){}

/**
 * Calculates the MD5 hash of the file specified by the {@link filename}
 * parameter using the RSA Data Security, Inc. MD5 Message-Digest
 * Algorithm, and returns that hash. The hash is a 32-character
 * hexadecimal number.
 * 
 * @param string $filename The filename
 * @param bool $raw_output When , returns the digest in raw binary
 *   format with a length of 16.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function md5_file($filename, $raw_output){}

/**
 * This function decrypts data. Note that the length of the returned
 * string can in fact be longer then the unencrypted string, due to the
 * padding of the data.
 * 
 * @param resource $td An encryption descriptor returned by {@link
 *   mcrypt_module_open}
 * @param string $data Encrypted data.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function mdecrypt_generic($td, $data){}

/**
 * {@link memcache_debug} turns on debug output if parameter {@link
 * on_off} is equal to and turns off if it's . {@link memcache_debug} is
 * accessible only if PHP was built with --enable-debug option and always
 * returns in this case. Otherwise, this function has no effect and
 * always returns .
 * 
 * @param bool $on_off Turns debug output on if equals to . Turns debug
 *   output off if equals to .
 * @return bool
 **/
function memcache_debug($on_off){}

/**
 * Returns the peak of memory, in bytes, that's been allocated to your
 * PHP script.
 * 
 * @param bool $real_usage Set this to to get the real size of memory
 *   allocated from system. If not set or only the memory used by
 *   emalloc() is reported.
 * @return int
 * @since PHP 5 >= 5.2.0
 **/
function memory_get_peak_usage($real_usage){}

/**
 * Returns the amount of memory, in bytes, that's currently being
 * allocated to your PHP script.
 * 
 * @param bool $real_usage Set this to to get the real size of memory
 *   allocated from system. If not set or only the memory used by
 *   emalloc() is reported.
 * @return int
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function memory_get_usage($real_usage){}

/**
 * Calculates the metaphone key of {@link str}.
 * 
 * Similar to {@link soundex} metaphone creates the same key for similar
 * sounding words. It's more accurate than {@link soundex} as it knows
 * the basic rules of English pronunciation. The metaphone generated keys
 * are of variable length.
 * 
 * Metaphone was developed by Lawrence Philips <lphilips at verity dot
 * com>. It is described in ["Practical Algorithms for Programmers",
 * Binstock & Rex, Addison Wesley, 1995].
 * 
 * @param string $str The input string.
 * @param int $phonemes This parameter restricts the returned metaphone
 *   key to {@link phonemes} characters in length. The default value of 0
 *   means no restriction.
 * @return string
 * @since PHP 4, PHP 5
 **/
function metaphone($str, $phonemes){}

/**
 * Checks if the class method exists in the given {@link object}.
 * 
 * @param mixed $object An object instance or a class name
 * @param string $method_name The method name
 * @return bool
 * @since PHP 4, PHP 5
 **/
function method_exists($object, $method_name){}

/**
 * {@link mhash} applies a hash function specified by {@link hash} to the
 * {@link data}.
 * 
 * @param int $hash The hash id. One of the MHASH_XXX constants.
 * @param string $data The user input, as a string.
 * @param string $key If specified, the function will return the
 *   resulting HMAC instead. HMAC is keyed hashing for message
 *   authentication, or simply a message digest that depends on the
 *   specified key. Not all algorithms supported in mhash can be used in
 *   HMAC mode.
 * @return string
 * @since PHP 4, PHP 5
 **/
function mhash($hash, $data, $key){}

/**
 * Gets the highest available hash id.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function mhash_count(){}

/**
 * Gets the size of a block of the specified {@link hash}.
 * 
 * @param int $hash The hash id. One of the MHASH_XXX constants.
 * @return int
 * @since PHP 4, PHP 5
 **/
function mhash_get_block_size($hash){}

/**
 * Gets the name of the specified {@link hash}.
 * 
 * @param int $hash The hash id. One of the MHASH_XXX constants.
 * @return string
 * @since PHP 4, PHP 5
 **/
function mhash_get_hash_name($hash){}

/**
 * Generates a key according to the {@link hash} given a user provided
 * {@link password}.
 * 
 * This is the Salted S2K algorithm as specified in the OpenPGP document
 * (RFC 2440).
 * 
 * Keep in mind that user supplied passwords are not really suitable to
 * be used as keys in cryptographic algorithms, since users normally
 * choose keys they can write on keyboard. These passwords use only 6 to
 * 7 bits per character (or less). It is highly recommended to use some
 * kind of transformation (like this function) to the user supplied key.
 * 
 * @param int $hash The hash id used to create the key. One of the
 *   MHASH_XXX constants.
 * @param string $password User supplied password.
 * @param string $salt Must be different and random enough for every
 *   key you generate in order to create different keys. That salt must
 *   be known when you check the keys, thus it is a good idea to append
 *   the key to it. Salt has a fixed length of 8 bytes and will be padded
 *   with zeros if you supply less bytes.
 * @param int $bytes The key length, in bytes.
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function mhash_keygen_s2k($hash, $password, $salt, $bytes){}

/**
 * {@link microtime} returns the current Unix timestamp with
 * microseconds. This function is only available on operating systems
 * that support the gettimeofday() system call.
 * 
 * @param bool $get_as_float When called without the optional argument,
 *   this function returns the string "msec sec" where sec is the current
 *   time measured in the number of seconds since the Unix Epoch (0:00:00
 *   January 1, 1970 GMT), and msec is the microseconds part. Both
 *   portions of the string are returned in units of seconds. If the
 *   optional {@link get_as_float} is set to then a float (in seconds) is
 *   returned.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function microtime($get_as_float){}

/**
 * Returns the MIME content type for a file as determined by using
 * information from the magic.mime file.
 * 
 * @param string $filename Path to the tested file.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mime_content_type($filename){}

/**
 * If the first and only parameter is an array, {@link min} returns the
 * lowest value in that array. If at least two parameters are provided,
 * {@link min} returns the smallest of these values.
 * 
 * @param array $values An array containing the values.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function min($values){}

/**
 * @param string $char
 * @return int
 * @since PHP 5
 **/
function ming_keypress($char){}

/**
 * Sets the threshold error for drawing cubic beziers.
 * 
 * @param int $threshold The Threshold. Lower is more accurate, hence
 *   larger file size.
 * @return void
 * @since PHP 4 >= 4.0.5, PHP 5, PECL ming SVN
 **/
function ming_setcubicthreshold($threshold){}

/**
 * Sets the scale of the output SWF. Inside the SWF file, coordinates are
 * measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel.
 * 
 * @param float $scale The scale to be set.
 * @return void
 * @since PHP 4 >= 4.0.5, PHP 5, PECL ming SVN
 **/
function ming_setscale($scale){}

/**
 * Sets the SWF output compression level.
 * 
 * @param int $level The new compression level. Should be a value
 *   between 1 and 9 inclusive.
 * @return void
 * @since PHP 5.2.1-5.3.0, PECL ming SVN
 **/
function ming_setswfcompression($level){}

/**
 * @param int $use
 * @return void
 * @since PHP 5
 **/
function ming_useconstants($use){}

/**
 * Sets the SWF version to be used in the movie. This affect the
 * bahaviour of Action Script.
 * 
 * @param int $version SWF version to use.
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ming_useswfversion($version){}

/**
 * Attempts to create the directory specified by pathname.
 * 
 * @param string $pathname The directory path.
 * @param int $mode The mode is 0777 by default, which means the widest
 *   possible access. For more information on modes, read the details on
 *   the {@link chmod} page. Note that you probably want to specify the
 *   mode as an octal number, which means it should have a leading zero.
 *   The mode is also modified by the current umask, which you can change
 *   using {@link umask}.
 * @param bool $recursive Allows the creation of nested directories
 *   specified in the {@link pathname}. Defaults to .
 * @param resource $context
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mkdir($pathname, $mode, $recursive, $context){}

/**
 * Returns the Unix timestamp corresponding to the arguments given. This
 * timestamp is a long integer containing the number of seconds between
 * the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.
 * 
 * Arguments may be left out in order from right to left; any arguments
 * thus omitted will be set to the current value according to the local
 * date and time.
 * 
 * @param int $hour The number of the hour.
 * @param int $minute The number of the minute.
 * @param int $second The number of seconds past the minute.
 * @param int $month The number of the month.
 * @param int $day The number of the day.
 * @param int $year The number of the year, may be a two or four digit
 *   value, with values between 0-69 mapping to 2000-2069 and 70-100 to
 *   1970-2000. On systems where time_t is a 32bit signed integer, as
 *   most common today, the valid range for {@link year} is somewhere
 *   between 1901 and 2038. However, before PHP 5.1.0 this range was
 *   limited from 1970 to 2038 on some systems (e.g. Windows).
 * @param int $is_dst This parameter can be set to 1 if the time is
 *   during daylight savings time (DST), 0 if it is not, or -1 (the
 *   default) if it is unknown whether the time is within daylight
 *   savings time or not. If it's unknown, PHP tries to figure it out
 *   itself. This can cause unexpected (but not incorrect) results. Some
 *   times are invalid if DST is enabled on the system PHP is running on
 *   or {@link is_dst} is set to 1. If DST is enabled in e.g. 2:00, all
 *   times between 2:00 and 3:00 are invalid and {@link mktime} returns
 *   an undefined (usually negative) value. Some systems (e.g. Solaris 8)
 *   enable DST at midnight so time 0:30 of the day when DST is enabled
 *   is evaluated as 23:30 of the previous day.
 * @return int
 * @since PHP 4, PHP 5
 **/
function mktime($hour, $minute, $second, $month, $day, $year, $is_dst){}

/**
 * {@link money_format} returns a formatted version of {@link number}.
 * This function wraps the C library function {@link strfmon}, with the
 * difference that this implementation converts only one number at a
 * time.
 * 
 * @param string $format The format specification consists of the
 *   following sequence: a % character optional flags optional field
 *   width optional left precision optional right precision a required
 *   conversion character
 * @param float $number The character = followed by a (single byte)
 *   character f to be used as the numeric fill character. The default
 *   fill character is space.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function money_format($format, $number){}

/**
 * This function checks to ensure that the file designated by {@link
 * filename} is a valid upload file (meaning that it was uploaded via
 * PHP's HTTP POST upload mechanism). If the file is valid, it will be
 * moved to the filename given by {@link destination}.
 * 
 * This sort of check is especially important if there is any chance that
 * anything done with uploaded files could reveal their contents to the
 * user, or even to other users on the same system.
 * 
 * @param string $filename The filename of the uploaded file.
 * @param string $destination The destination of the moved file.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function move_uploaded_file($filename, $destination){}

/**
 * The {@link mqseries_back} (MQBACK) call indicates to the queue manager
 * that all the message gets and puts that have occurred since the last
 * syncpoint are to be backed out. Messages put as part of a unit of work
 * are deleted; messages retrieved as part of a unit of work are
 * reinstated on the queue.
 * 
 * Using {@link mqseries_back} only works in conjunction with {@link
 * mqseries_begin} and only function when connecting directly to a Queueu
 * manager. Not via the mqclient interface.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_back($hconn, &$compCode, &$reason){}

/**
 * The {@link mqseries_begin} (MQBEGIN) call begins a unit of work that
 * is coordinated by the queue manager, and that may involve external
 * resource managers.
 * 
 * Using {@link mqseries_begin} starts the unit of work. Either {@link
 * mqseries_back} or {@link mqseries_cmit} ends the unit of work.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param array $beginOptions Completion code.
 * @param resource $compCode Reason code qualifying the compCode.
 * @param resource $reason
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_begin($hconn, $beginOptions, &$compCode, &$reason){}

/**
 * The {@link mqseries_close} (MQCLOSE) call relinquishes access to an
 * object, and is the inverse of the {@link mqseries_open} (MQOPEN) call.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $hobj Object handle. This handle represents the
 *   object to be used.
 * @param int $options
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_close($hconn, $hobj, $options, &$compCode, &$reason){}

/**
 * The {@link mqseries_cmit} (MQCMIT) call indicates to the queue manager
 * that the application has reached a syncpoint, and that all of the
 * message gets and puts that have occurred since the last syncpoint are
 * to be made permanent. Messages put as part of a unit of work are made
 * available to other applications; messages retrieved as part of a unit
 * of work are deleted.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_cmit($hconn, &$compCode, &$reason){}

/**
 * The {@link mqseries_conn} (MQCONN) call connects an application
 * program to a queue manager. It provides a queue manager connection
 * handle, which is used by the application on subsequent message queuing
 * calls.
 * 
 * @param string $qManagerName Name of queue manager. Name of the queue
 *   manager the application wishes to connect.
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_conn($qManagerName, &$hconn, &$compCode, &$reason){}

/**
 * The {@link mqseries_connx} (MQCONNX) call connects an application
 * program to a queue manager. It provides a queue manager connection
 * handle, which is used by the application on subsequent MQ calls.
 * 
 * @param string $qManagerName Name of queue manager. Name of the queue
 *   manager the application wishes to connect.
 * @param array $connOptions Options that control the action of
 *   function See also the MQCNO structure.
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_connx($qManagerName, &$connOptions, &$hconn, &$compCode, &$reason){}

/**
 * The {@link mqseries_disc} (MQDISC) call breaks the connection between
 * the queue manager and the application program, and is the inverse of
 * the {@link mqseries_conn} (MQCONN) or {@link mqseries_connx} (MQCONNX)
 * call.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_disc($hconn, &$compCode, &$reason){}

/**
 * The {@link mqseries_get} (MQGET) call retrieves a message from a local
 * queue that has been opened using the {@link mqseries_open} (MQOPEN)
 * call
 * 
 * @param resource $hConn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $hObj Object handle. This handle represents the
 *   object to be used.
 * @param array $md Message descriptor (MQMD).
 * @param array $gmo Get message options (MQGMO).
 * @param int $bufferLength Expected length of the result buffer
 * @param string $msg Buffer holding the message that was retrieved
 *   from the object.
 * @param int $data_length Actual buffer length
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_get($hConn, $hObj, &$md, &$gmo, &$bufferLength, &$msg, &$data_length, &$compCode, &$reason){}

/**
 * The {@link mqseries_inq} (MQINQ) call returns an array of integers and
 * a set of character strings containing the attributes of an object.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $hobj Object handle. This handle represents the
 *   object to be used.
 * @param int $selectorCount Count of selectors.
 * @param array $selectors Array of attribute selectors.
 * @param int $intAttrCount Count of integer attributes.
 * @param resource $intAttr Array of integer attributes.
 * @param int $charAttrLength Length of character attributes buffer.
 * @param resource $charAttr Character attributes.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_inq($hconn, $hobj, $selectorCount, $selectors, $intAttrCount, &$intAttr, $charAttrLength, &$charAttr, &$compCode, &$reason){}

/**
 * The {@link mqseries_open} (MQOPEN) call establishes access to an
 * object.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param array $objDesc Object descriptor. (MQOD)
 * @param int $option Options that control the action of the function.
 * @param resource $hobj Object handle. This handle represents the
 *   object to be used.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_open($hconn, &$objDesc, $option, &$hobj, &$compCode, &$reason){}

/**
 * The {@link mqseries_put} (MQPUT) call puts a message on a queue or
 * distribution list. The queue or distribution list must already be
 * open.
 * 
 * @param resource $hConn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $hObj Object handle. This handle represents the
 *   object to be used.
 * @param array $md Message descriptor (MQMD).
 * @param array $pmo Put message options (MQPMO).
 * @param string $message The actual message to put onto the queue.
 * @param resource $compCode Completion code.
 * @param resource $reason Reason code qualifying the compCode.
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_put($hConn, $hObj, &$md, &$pmo, $message, &$compCode, &$reason){}

/**
 * The {@link mqseries_put1} (MQPUT1) call puts one message on a queue.
 * The queue need not be open.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $objDesc Object descriptor. (MQOD) This is a
 *   structure which identifies the queue to which the message is added.
 * @param resource $msgDesc Message descriptor (MQMD).
 * @param resource $pmo Put message options (MQPMO).
 * @param string $buffer Completion code.
 * @param resource $compCode Reason code qualifying the compCode.
 * @param resource $reason
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_put1($hconn, &$objDesc, &$msgDesc, &$pmo, $buffer, &$compCode, &$reason){}

/**
 * The {@link mqseries_set} (MQSET) call is used to change the attributes
 * of an object represented by a handle. The object must be a queue.
 * 
 * @param resource $hconn Connection handle. This handle represents the
 *   connection to the queue manager.
 * @param resource $hobj Completion code.
 * @param int $selectorcount Reason code qualifying the compCode.
 * @param array $selectors
 * @param int $intattrcount
 * @param array $intattrs
 * @param int $charattrlength
 * @param array $charattrs
 * @param resource $compCode
 * @param resource $reason
 * @return void
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_set($hconn, $hobj, $selectorcount, $selectors, $intattrcount, $intattrs, $charattrlength, $charattrs, &$compCode, &$reason){}

/**
 * {@link mqseries_strerror} returns the message that correspond to the
 * reason result code.
 * 
 * @param int $reason Reason code qualifying the compCode.
 * @return string
 * @since PECL mqseries >= 0.10.0
 **/
function mqseries_strerror($reason){}

/**
 * @param string $host
 * @param string $port
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_connect($host, $port){}

/**
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_count(){}

/**
 * @param string $session
 * @param string $classname
 * @param string $data
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_create($session, $classname, $data){}

/**
 * @param string $name
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_destroy($name){}

/**
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_disconnect(){}

/**
 * @param string $name
 * @param string $value
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_find($name, $value){}

/**
 * @param string $session
 * @param string $name
 * @param string $value
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_get($session, $name, $value){}

/**
 * @param string $session
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_get_array($session){}

/**
 * @param string $session
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_get_data($session){}

/**
 * @param string $session
 * @param string $name
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_inc($session, $name){}

/**
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_list(){}

/**
 * Used for searching sessions with common attributes.
 * 
 * @param string $name The name being searched.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_listvar($name){}

/**
 * @param string $name
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_lock($name){}

/**
 * @param string $session
 * @param string $val
 * @param string $param
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_plugin($session, $val, $param){}

/**
 * @param int $param
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_randstr($param){}

/**
 * @param string $session
 * @param string $name
 * @param string $value
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_set($session, $name, $value){}

/**
 * @param string $session
 * @param array $tuples
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_set_array($session, $tuples){}

/**
 * @param string $session
 * @param string $value
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_set_data($session, $value){}

/**
 * @param string $session
 * @param int $param
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_timeout($session, $param){}

/**
 * @param int $param
 * @param string $classname
 * @param string $data
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_uniq($param, $classname, $data){}

/**
 * @param string $session
 * @param int $key
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function msession_unlock($session, $key){}

/**
 * Constructs a new Message Formatter
 * 
 * @param string $locale The locale to use when formatting arguments
 * @param string $pattern The pattern string to stick arguments into.
 *   The pattern uses an 'apostrophe-friendly' syntax; it is run through
 *   umsg_autoQuoteApostrophe before being interpreted.
 * @return MessageFormatter
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_create($locale, $pattern){}

/**
 * Format the message by substituting the data into the format string
 * according to the locale rules
 * 
 * @param MessageFormatter $fmt The message formatter
 * @param array $args Arguments to insert into the format string
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_format($fmt, $args){}

/**
 * Quick formatting function that formats the string without having to
 * explicitly create the formatter object. Use this function when the
 * format operation is done only once and does not need and parameters or
 * state to be kept.
 * 
 * @param string $locale The locale to use for formatting
 *   locale-dependent parts
 * @param string $pattern The pattern string to insert things into. The
 *   pattern uses an 'apostrophe-friendly' syntax; it is run through
 *   umsg_autoQuoteApostrophe before being interpreted.
 * @param array $args The array of values to insert into the format
 *   string
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_format_message($locale, $pattern, $args){}

/**
 * Get the error code from last operation.
 * 
 * @param MessageFormatter $fmt The message formatter
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_get_error_code($fmt){}

/**
 * Get the error text from the last operation.
 * 
 * @param MessageFormatter $fmt The message formatter
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_get_error_message($fmt){}

/**
 * Get the locale for which the formatter was created.
 * 
 * @param NumberFormatter $formatter The formatter resource
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_get_locale($formatter){}

/**
 * Get the pattern used by the formatter
 * 
 * @param MessageFormatter $fmt The message formatter
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_get_pattern($fmt){}

/**
 * Parses input string and return any extracted items as an array.
 * 
 * @param MessageFormatter $fmt The message formatter
 * @param string $value The string to parse
 * @return array
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_parse($fmt, $value){}

/**
 * Parses input string without explicitly creating the formatter object.
 * Use this function when the format operation is done only once and does
 * not need and parameters or state to be kept.
 * 
 * @param string $locale The locale to use for parsing locale-dependent
 *   parts
 * @param string $value The string to parse for items
 * @return array
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_parse_message($locale, $value){}

/**
 * Set the pattern used by the formatter
 * 
 * @param MessageFormatter $fmt The message formatter
 * @param string $pattern The pattern string to use in this message
 *   formatter. The pattern uses an 'apostrophe-friendly' syntax; it is
 *   run through umsg_autoQuoteApostrophe before being interpreted.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function msgfmt_set_pattern($fmt, $pattern){}

/**
 * {@link msg_get_queue} returns an id that can be used to access the
 * System V message queue with the given {@link key}. The first call
 * creates the message queue with the optional {@link perms}. A second
 * call to {@link msg_get_queue} for the same {@link key} will return a
 * different message queue identifier, but both identifiers access the
 * same underlying message queue.
 * 
 * @param int $key Message queue numeric ID
 * @param int $perms Queue permissions. Default to 0666. If the message
 *   queue already exists, the {@link perms} will be ignored.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function msg_get_queue($key, $perms){}

/**
 * Checks whether the message queue {@link key} exists.
 * 
 * @param int $key Queue key.
 * @return bool
 * @since PHP 5 >= 5.3.0
 **/
function msg_queue_exists($key){}

/**
 * {@link msg_receive} will receive the first message from the specified
 * {@link queue} of the type specified by {@link desiredmsgtype}.
 * 
 * @param resource $queue
 * @param int $desiredmsgtype If {@link desiredmsgtype} is 0, the
 *   message from the front of the queue is returned. If {@link
 *   desiredmsgtype} is greater than 0, then the first message of that
 *   type is returned. If {@link desiredmsgtype} is less than 0, the
 *   first message on the queue with the lowest type less than or equal
 *   to the absolute value of {@link desiredmsgtype} will be read. If no
 *   messages match the criteria, your script will wait until a suitable
 *   message arrives on the queue. You can prevent the script from
 *   blocking by specifying MSG_IPC_NOWAIT in the {@link flags}
 *   parameter.
 * @param int $msgtype The type of the message that was received will
 *   be stored in this parameter.
 * @param int $maxsize The maximum size of message to be accepted is
 *   specified by the {@link maxsize}; if the message in the queue is
 *   larger than this size the function will fail (unless you set {@link
 *   flags} as described below).
 * @param mixed $message The received message will be stored in {@link
 *   message}, unless there were errors receiving the message.
 * @param bool $unserialize If set to , the message is treated as
 *   though it was serialized using the same mechanism as the session
 *   module. The message will be unserialized and then returned to your
 *   script. This allows you to easily receive arrays or complex object
 *   structures from other PHP scripts, or if you are using the WDDX
 *   serializer, from any WDDX compatible source. If {@link unserialize}
 *   is , the message will be returned as a binary-safe string.
 * @param int $flags The optional {@link flags} allows you to pass
 *   flags to the low-level msgrcv system call. It defaults to 0, but you
 *   may specify one or more of the following values (by adding or ORing
 *   them together). Flag values for msg_receive MSG_IPC_NOWAIT If there
 *   are no messages of the {@link desiredmsgtype}, return immediately
 *   and do not wait. The function will fail and return an integer value
 *   corresponding to MSG_ENOMSG. MSG_EXCEPT Using this flag in
 *   combination with a {@link desiredmsgtype} greater than 0 will cause
 *   the function to receive the first message that is not equal to
 *   {@link desiredmsgtype}. MSG_NOERROR If the message is longer than
 *   {@link maxsize}, setting this flag will truncate the message to
 *   {@link maxsize} and will not signal an error.
 * @param int $errorcode If the function fails, the optional {@link
 *   errorcode} will be set to the value of the system errno variable.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function msg_receive($queue, $desiredmsgtype, &$msgtype, $maxsize, &$message, $unserialize, $flags, &$errorcode){}

/**
 * {@link msg_remove_queue} destroys the message queue specified by the
 * {@link queue}. Only use this function when all processes have finished
 * working with the message queue and you need to release the system
 * resources held by it.
 * 
 * @param resource $queue Message queue resource handle
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function msg_remove_queue($queue){}

/**
 * {@link msg_send} sends a {@link message} of type {@link msgtype}
 * (which MUST be greater than 0) to the message queue specified by
 * {@link queue}.
 * 
 * @param resource $queue
 * @param int $msgtype
 * @param mixed $message
 * @param bool $serialize The optional {@link serialize} controls how
 *   the {@link message} is sent. {@link serialize} defaults to which
 *   means that the {@link message} is serialized using the same
 *   mechanism as the session module before being sent to the queue. This
 *   allows complex arrays and objects to be sent to other PHP scripts,
 *   or if you are using the WDDX serializer, to any WDDX compatible
 *   client.
 * @param bool $blocking If the message is too large to fit in the
 *   queue, your script will wait until another process reads messages
 *   from the queue and frees enough space for your message to be sent.
 *   This is called blocking; you can prevent blocking by setting the
 *   optional {@link blocking} parameter to , in which case {@link
 *   msg_send} will immediately return if the message is too big for the
 *   queue, and set the optional {@link errorcode} to MSG_EAGAIN,
 *   indicating that you should try to send your message again a little
 *   later on.
 * @param int $errorcode
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function msg_send($queue, $msgtype, $message, $serialize, $blocking, &$errorcode){}

/**
 * {@link msg_set_queue} allows you to change the values of the
 * msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the
 * underlying message queue data structure.
 * 
 * Changing the data structure will require that PHP be running as the
 * same user that created the queue, owns the queue (as determined by the
 * existing msg_perm.xxx fields), or be running with root privileges.
 * root privileges are required to raise the msg_qbytes values above the
 * system defined limit.
 * 
 * @param resource $queue Message queue resource handle
 * @param array $data You specify the values you require by setting the
 *   value of the keys that you require in the {@link data} array.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function msg_set_queue($queue, $data){}

/**
 * {@link msg_stat_queue} returns the message queue meta data for the
 * message queue specified by the {@link queue}. This is useful, for
 * example, to determine which process sent the message that was just
 * received.
 * 
 * @param resource $queue Message queue resource handle
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function msg_stat_queue($queue){}

/**
 * {@link msql} selects a database and executes a query on it.
 * 
 * @param string $database The name of the mSQL database.
 * @param string $query The SQL query.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql($database, $query, $link_identifier){}

/**
 * Returns number of affected rows by the last SELECT, UPDATE or DELETE
 * query associated with {@link result}.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_affected_rows($result){}

/**
 * {@link msql_close} closes the non-persistent connection to the mSQL
 * server that's associated with the specified link identifier.
 * 
 * Using {@link msql_close} isn't usually necessary, as non-persistent
 * open links are automatically closed at the end of the script's
 * execution. See also freeing resources.
 * 
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_close($link_identifier){}

/**
 * {@link msql_connect} establishes a connection to a mSQL server.
 * 
 * In case a second call is made to {@link msql_connect} with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling {@link
 * msql_close}.
 * 
 * @param string $hostname The hostname can also include a port number.
 *   e.g. hostname,port. If not specified, the connection is established
 *   by the means of a Unix domain socket, being then more efficient then
 *   a localhost TCP socket connection.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_connect($hostname){}

/**
 * {@link msql_createdb} attempts to create a new database on the mSQL
 * server.
 * 
 * @param string $database_name The name of the mSQL database.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_createdb($database_name, $link_identifier){}

/**
 * {@link msql_create_db} attempts to create a new database on the mSQL
 * server.
 * 
 * @param string $database_name The name of the mSQL database.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_create_db($database_name, $link_identifier){}

/**
 * {@link msql_data_seek} moves the internal row pointer of the mSQL
 * result associated with the specified query identifier to point to the
 * specified row number. The next call to {@link msql_fetch_row} would
 * return that row.
 * 
 * @param resource $result The seeked row number.
 * @param int $row_number
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_data_seek($result, $row_number){}

/**
 * {@link msql_dbname} returns the contents of one cell from a mSQL
 * result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they are often much quicker than {@link msql_dbname}.
 * 
 * Recommended high-performance alternatives: {@link msql_fetch_row},
 * {@link msql_fetch_array}, and {@link msql_fetch_object}.
 * 
 * @param resource $result The row offset.
 * @param int $row Can be the field's offset, or the field's name, or
 *   the field's table dot field's name (tablename.fieldname.). If the
 *   column name has been aliased ('select foo as bar from ...'), use the
 *   alias instead of the column name.
 * @param mixed $field
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_dbname($result, $row, $field){}

/**
 * {@link msql_db_query} selects a database and executes a query on it.
 * 
 * @param string $database The name of the mSQL database.
 * @param string $query The SQL query.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_db_query($database, $query, $link_identifier){}

/**
 * {@link msql_drop_db} attempts to drop (remove) a database from the
 * mSQL server.
 * 
 * @param string $database_name The name of the database.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_drop_db($database_name, $link_identifier){}

/**
 * {@link msql_error} returns the last issued error by the mSQL server.
 * Note that only the last error message is accessible with {@link
 * msql_error}.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_error(){}

/**
 * {@link msql_fetch_array} is an extended version of {@link
 * msql_fetch_row}. In addition to storing the data in the numeric
 * indices of the result array, it also stores the data in associative
 * indices, using the field names as keys.
 * 
 * An important thing to note is that using {@link msql_fetch_array} is
 * NOT significantly slower than using {@link msql_fetch_row}, while it
 * provides a significant added value.
 * 
 * @param resource $result A constant that can take the following
 *   values: MSQL_ASSOC, MSQL_NUM, and MSQL_BOTH with MSQL_BOTH being the
 *   default.
 * @param int $result_type
 * @return array
 * @since PHP 4, PHP 5
 **/
function msql_fetch_array($result, $result_type){}

/**
 * {@link msql_fetch_field} can be used in order to obtain information
 * about fields in a certain query result.
 * 
 * @param resource $result The field offset. If not specified, the next
 *   field that wasn't yet retrieved by {@link msql_fetch_field} is
 *   retrieved.
 * @param int $field_offset
 * @return object
 * @since PHP 4, PHP 5
 **/
function msql_fetch_field($result, $field_offset){}

/**
 * {@link msql_fetch_object} is similar to {@link msql_fetch_array}, with
 * one difference - an object is returned, instead of an array.
 * Indirectly, that means that you can only access the data by the field
 * names, and not by their offsets (numbers are illegal property names).
 * 
 * Speed-wise, the function is identical to {@link msql_fetch_array}, and
 * almost as quick as {@link msql_fetch_row} (the difference is
 * insignificant).
 * 
 * @param resource $result
 * @return object
 * @since PHP 4, PHP 5
 **/
function msql_fetch_object($result){}

/**
 * {@link msql_fetch_row} fetches one row of data from the result
 * associated with the specified query identifier. The row is returned as
 * an array. Each result column is stored in an array offset, starting at
 * offset 0.
 * 
 * Subsequent call to {@link msql_fetch_row} would return the next row in
 * the result set, or if there are no more rows.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4, PHP 5
 **/
function msql_fetch_row($result){}

/**
 * {@link msql_fieldflags} returns the field flags of the specified
 * field.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_fieldflags($result, $field_offset){}

/**
 * {@link msql_fieldlen} returns the length of the specified field.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_fieldlen($result, $field_offset){}

/**
 * {@link msql_fieldname} gets the name of the specified field index.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_fieldname($result, $field_offset){}

/**
 * Returns the name of the table that the specified field is in.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_fieldtable($result, $field_offset){}

/**
 * {@link msql_fieldtype} gets the type of the specified field index.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_fieldtype($result, $field_offset){}

/**
 * {@link msql_field_flags} returns the field flags of the specified
 * field.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_field_flags($result, $field_offset){}

/**
 * {@link msql_field_len} returns the length of the specified field.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_field_len($result, $field_offset){}

/**
 * {@link msql_field_name} gets the name of the specified field index.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_field_name($result, $field_offset){}

/**
 * Seeks to the specified field offset. If the next call to {@link
 * msql_fetch_field} won't include a field offset, this field would be
 * returned.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_field_seek($result, $field_offset){}

/**
 * Returns the name of the table that the specified field is in.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_field_table($result, $field_offset){}

/**
 * {@link msql_field_type} gets the type of the specified field index.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_field_type($result, $field_offset){}

/**
 * {@link msql_free_result} frees the memory associated with {@link
 * query_identifier}. When PHP completes a request, this memory is freed
 * automatically, so you only need to call this function when you want to
 * make sure you don't use too much memory while the script is running.
 * 
 * @param resource $result
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_free_result($result){}

/**
 * {@link msql_list_tables} lists the databases available on the
 * specified {@link link_identifier}.
 * 
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_list_dbs($link_identifier){}

/**
 * {@link msql_list_fields} returns information about the given table.
 * 
 * @param string $database The name of the database.
 * @param string $tablename The name of the table.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_list_fields($database, $tablename, $link_identifier){}

/**
 * {@link msql_list_tables} lists the tables on the specified {@link
 * database}.
 * 
 * @param string $database The name of the database.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_list_tables($database, $link_identifier){}

/**
 * {@link msql_numfields} returns the number of fields in a result set.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_numfields($result){}

/**
 * {@link msql_numrows} returns the number of rows in a result set.
 * 
 * @param resource $query_identifier
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_numrows($query_identifier){}

/**
 * {@link msql_num_fields} returns the number of fields in a result set.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_num_fields($result){}

/**
 * {@link msql_num_rows} returns the number of rows in a result set.
 * 
 * @param resource $query_identifier
 * @return int
 * @since PHP 4, PHP 5
 **/
function msql_num_rows($query_identifier){}

/**
 * {@link msql_pconnect} acts very much like {@link msql_connect} with
 * two major differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host. If one is
 * found, an identifier for it will be returned instead of opening a new
 * connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use ({@link msql_close} will not close links established by
 * this function).
 * 
 * @param string $hostname The hostname can also include a port number.
 *   e.g. hostname,port. If not specified, the connection is established
 *   by the means of a Unix domain socket, being more efficient than a
 *   localhost TCP socket connection.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_pconnect($hostname){}

/**
 * {@link msql_query} sends a query to the currently active database on
 * the server that's associated with the specified link identifier.
 * 
 * @param string $query The SQL query.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function msql_query($query, $link_identifier){}

/**
 * {@link msql_result} returns the contents of one cell from a mSQL
 * result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they are often much quicker than {@link msql_result}.
 * 
 * Recommended high-performance alternatives: {@link msql_fetch_row},
 * {@link msql_fetch_array}, and {@link msql_fetch_object}.
 * 
 * @param resource $result The row offset.
 * @param int $row Can be the field's offset, or the field's name, or
 *   the field's table dot field's name (tablename.fieldname.). If the
 *   column name has been aliased ('select foo as bar from ...'), use the
 *   alias instead of the column name.
 * @param mixed $field
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_result($result, $row, $field){}

/**
 * {@link msql_select_db} sets the current active database on the server
 * that's associated with the specified {@link link_identifier}.
 * 
 * Subsequent calls to {@link msql_query} will be made on the active
 * database.
 * 
 * @param string $database_name The database name.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function msql_select_db($database_name, $link_identifier){}

/**
 * {@link msql_tablename} returns the contents of one cell from a mSQL
 * result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they are often much quicker than {@link msql_tablename}.
 * 
 * Recommended high-performance alternatives: {@link msql_fetch_row},
 * {@link msql_fetch_array}, and {@link msql_fetch_object}.
 * 
 * @param resource $result The row offset.
 * @param int $row Can be the field's offset, or the field's name, or
 *   the field's table dot field's name (tablename.fieldname.). If the
 *   column name has been aliased ('select foo as bar from ...'), use the
 *   alias instead of the column name.
 * @param mixed $field
 * @return string
 * @since PHP 4, PHP 5
 **/
function msql_tablename($result, $row, $field){}

/**
 * Binds a parameter to a stored procedure or a remote stored procedure.
 * 
 * @param resource $stmt Statement resource, obtained with {@link
 *   mssql_init}.
 * @param string $param_name The parameter name, as a string.
 * @param mixed $var The PHP variable you'll bind the MSSQL parameter
 *   to. It is passed by reference, to retrieve OUTPUT and RETVAL values
 *   after the procedure execution.
 * @param int $type One of: SQLTEXT, SQLVARCHAR, SQLCHAR, SQLINT1,
 *   SQLINT2, SQLINT4, SQLBIT, SQLFLT4, SQLFLT8, SQLFLTN.
 * @param bool $is_output Whether the value is an OUTPUT parameter or
 *   not. If it's an OUTPUT parameter and you don't mention it, it will
 *   be treated as a normal input parameter and no error will be thrown.
 * @param bool $is_null Whether the parameter is or not. Passing the
 *   value as {@link var} will not do the job.
 * @param int $maxlen Used with char/varchar values. You have to
 *   indicate the length of the data so if the parameter is a
 *   varchar(50), the type must be SQLVARCHAR and this value 50.
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_bind($stmt, $param_name, &$var, $type, $is_output, $is_null, $maxlen){}

/**
 * Closes the link to a MS SQL Server database that's associated with the
 * specified link identifier. If the link identifier isn't specified, the
 * last opened link is assumed.
 * 
 * Note that this isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution.
 * 
 * @param resource $link_identifier A MS SQL link identifier, returned
 *   by {@link mssql_connect}. This function will not close persistent
 *   links generated by {@link mssql_pconnect}.
 * @return bool
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_close($link_identifier){}

/**
 * {@link mssql_connect} establishes a connection to a MS SQL server.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling {@link
 * mssql_close}.
 * 
 * @param string $servername The MS SQL server. It can also include a
 *   port number. e.g. hostname,port.
 * @param string $username The username.
 * @param string $password The password.
 * @param bool $new_link If a second call is made to {@link
 *   mssql_connect} with the same arguments, no new link will be
 *   established, but instead, the link identifier of the already opened
 *   link will be returned. This parameter modifies this behavior and
 *   makes {@link mssql_connect} always open a new link, even if {@link
 *   mssql_connect} was called before with the same parameters.
 * @return resource
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_connect($servername, $username, $password, $new_link){}

/**
 * {@link mssql_data_seek} moves the internal row pointer of the MS SQL
 * result associated with the specified result identifier to point to the
 * specified row number, first row being number 0. The next call to
 * {@link mssql_fetch_row} would return that row.
 * 
 * @param resource $result_identifier The result resource that is being
 *   evaluated.
 * @param int $row_number The desired row number of the new result
 *   pointer.
 * @return bool
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_data_seek($result_identifier, $row_number){}

/**
 * Executes a stored procedure on a MS SQL server database
 * 
 * @param resource $stmt Statement handle obtained with {@link
 *   mssql_init}.
 * @param bool $skip_results Whenever to skip the results or not.
 * @return mixed
 * @since PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_execute($stmt, $skip_results){}

/**
 * {@link mssql_fetch_array} is an extended version of {@link
 * mssql_fetch_row}. In addition to storing the data in the numeric
 * indices of the result array, it also stores the data in associative
 * indices, using the field names as keys.
 * 
 * An important thing to note is that using {@link mssql_fetch_array} is
 * NOT significantly slower than using {@link mssql_fetch_row}, while it
 * provides a significant added value.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $result_type The type of array that is to be fetched.
 *   It's a constant and can take the following values: MSSQL_ASSOC,
 *   MSSQL_NUM, and MSSQL_BOTH.
 * @return array
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_fetch_array($result, $result_type){}

/**
 * Returns an associative array that corresponds to the fetched row and
 * moves the internal data pointer ahead. {@link mssql_fetch_assoc} is
 * equivalent to calling {@link mssql_fetch_array} with MSSQL_ASSOC for
 * the optional second parameter.
 * 
 * @param resource $result_id The result resource that is being
 *   evaluated. This result comes from a call to {@link mssql_query}.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_fetch_assoc($result_id){}

/**
 * Returns the next batch of records
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_fetch_batch($result){}

/**
 * {@link mssql_fetch_field} can be used in order to obtain information
 * about fields in a certain query result.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $field_offset The numerical field offset. If the field
 *   offset is not specified, the next field that was not yet retrieved
 *   by this function is retrieved. The {@link field_offset} starts at 0.
 * @return object
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_fetch_field($result, $field_offset){}

/**
 * {@link mssql_fetch_object} is similar to {@link mssql_fetch_array},
 * with one difference - an object is returned, instead of an array.
 * Indirectly, that means that you can only access the data by the field
 * names, and not by their offsets (numbers are illegal property names).
 * 
 * Speed-wise, the function is identical to {@link mssql_fetch_array},
 * and almost as quick as {@link mssql_fetch_row} (the difference is
 * insignificant).
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @return object
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_fetch_object($result){}

/**
 * {@link mssql_fetch_row} fetches one row of data from the result
 * associated with the specified result identifier. The row is returned
 * as an array. Each result column is stored in an array offset, starting
 * at offset 0.
 * 
 * Subsequent call to {@link mssql_fetch_row} would return the next row
 * in the result set, or if there are no more rows.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @return array
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_fetch_row($result){}

/**
 * Returns the length of field no. {@link offset} in {@link result}.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $offset The field offset, starts at 0. If omitted, the
 *   current field is used.
 * @return int
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_field_length($result, $offset){}

/**
 * Returns the name of field no. {@link offset} in {@link result}.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $offset The field offset, starts at 0. If omitted, the
 *   current field is used.
 * @return string
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_field_name($result, $offset){}

/**
 * Seeks to the specified field offset. If the next call to {@link
 * mssql_fetch_field} won't include a field offset, this field would be
 * returned.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $field_offset The field offset, starts at 0.
 * @return bool
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_field_seek($result, $field_offset){}

/**
 * Returns the type of field no. {@link offset} in {@link result}.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $offset The field offset, starts at 0. If omitted, the
 *   current field is used.
 * @return string
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_field_type($result, $offset){}

/**
 * {@link mssql_free_result} only needs to be called if you are worried
 * about using too much memory while your script is running. All result
 * memory will automatically be freed when the script ends. You may call
 * {@link mssql_free_result} with the result identifier as an argument
 * and the associated result memory will be freed.
 * 
 * @param resource $result The result resource that is being freed.
 *   This result comes from a call to {@link mssql_query}.
 * @return bool
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_free_result($result){}

/**
 * {@link mssql_free_statement} only needs to be called if you are
 * worried about using too much memory while your script is running. All
 * statement memory will automatically be freed when the script ends. You
 * may call {@link mssql_free_statement} with the statement identifier as
 * an argument and the associated statement memory will be freed.
 * 
 * @param resource $stmt Statement resource, obtained with {@link
 *   mssql_init}.
 * @return bool
 * @since PHP 4 >= 4.3.2, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_free_statement($stmt){}

/**
 * Gets the last message from the MS-SQL server
 * 
 * @return string
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_get_last_message(){}

/**
 * Converts a 16 byte binary GUID to a string.
 * 
 * @param string $binary A 16 byte binary GUID.
 * @param bool $short_format Whenever to use short format.
 * @return string
 * @since PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_guid_string($binary, $short_format){}

/**
 * Initializes a stored procedure or a remote stored procedure.
 * 
 * @param string $sp_name Stored procedure name, like ownew.sp_name or
 *   otherdb.owner.sp_name.
 * @param resource $link_identifier A MS SQL link identifier, returned
 *   by {@link mssql_connect}.
 * @return resource
 * @since PHP 4 >= 4.0.7, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_init($sp_name, $link_identifier){}

/**
 * Sets the minimum error severity.
 * 
 * @param int $severity The new error severity.
 * @return void
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_min_error_severity($severity){}

/**
 * Sets the minimum message severity.
 * 
 * @param int $severity The new message severity.
 * @return void
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_min_message_severity($severity){}

/**
 * When sending more than one SQL statement to the server or executing a
 * stored procedure with multiple results, it will cause the server to
 * return multiple result sets. This function will test for additional
 * results available form the server. If an additional result set exists
 * it will free the existing result set and prepare to fetch the rows
 * from the new result set.
 * 
 * @param resource $result_id The result resource that is being
 *   evaluated. This result comes from a call to {@link mssql_query}.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_next_result($result_id){}

/**
 * {@link mssql_num_fields} returns the number of fields in a result set.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @return int
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_num_fields($result){}

/**
 * {@link mssql_num_rows} returns the number of rows in a result set.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @return int
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_num_rows($result){}

/**
 * {@link mssql_pconnect} acts very much like {@link mssql_connect} with
 * two major differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use ({@link mssql_close} will not close links established by
 * {@link mssql_pconnect}).
 * 
 * This type of links is therefore called 'persistent'.
 * 
 * @param string $servername The MS SQL server. It can also include a
 *   port number. e.g. hostname:port.
 * @param string $username The username.
 * @param string $password The password.
 * @param bool $new_link If a second call is made to {@link
 *   mssql_pconnect} with the same arguments, no new link will be
 *   established, but instead, the link identifier of the already opened
 *   link will be returned. This parameter modifies this behavior and
 *   makes {@link mssql_pconnect} always open a new link, even if {@link
 *   mssql_pconnect} was called before with the same parameters.
 * @return resource
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_pconnect($servername, $username, $password, $new_link){}

/**
 * {@link mssql_query} sends a query to the currently active database on
 * the server that's associated with the specified link identifier.
 * 
 * @param string $query An SQL query.
 * @param resource $link_identifier A MS SQL link identifier, returned
 *   by {@link mssql_connect} or {@link mssql_pconnect}. If the link
 *   identifier isn't specified, the last opened link is assumed. If no
 *   link is open, the function tries to establish a link as if {@link
 *   mssql_connect} was called, and use it.
 * @param int $batch_size The number of records to batch in the buffer.
 * @return mixed
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_query($query, $link_identifier, $batch_size){}

/**
 * {@link mssql_result} returns the contents of one cell from a MS SQL
 * result set.
 * 
 * @param resource $result The result resource that is being evaluated.
 *   This result comes from a call to {@link mssql_query}.
 * @param int $row The row number.
 * @param mixed $field Can be the field's offset, the field's name or
 *   the field's table dot field's name (tablename.fieldname). If the
 *   column name has been aliased ('select foo as bar from...'), it uses
 *   the alias instead of the column name.
 * @return string
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_result($result, $row, $field){}

/**
 * Returns the number of records affected by the last write query.
 * 
 * @param resource $link_identifier A MS SQL link identifier, returned
 *   by {@link mssql_connect} or {@link mssql_pconnect}.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_rows_affected($link_identifier){}

/**
 * {@link mssql_select_db} sets the current active database on the server
 * that's associated with the specified link identifier.
 * 
 * Every subsequent call to {@link mssql_query} will be made on the
 * active database.
 * 
 * @param string $database_name The database name. To escape the name
 *   of a database that contains spaces, hyphens ("-"), or any other
 *   exceptional characters, the database name must be enclosed in
 *   brackets, as is shown in the example, below. This technique must
 *   also be applied when selecting a database name that is also a
 *   reserved word (such as primary).
 * @param resource $link_identifier A MS SQL link identifier, returned
 *   by {@link mssql_connect} or {@link mssql_pconnect}. If no link
 *   identifier is specified, the last opened link is assumed. If no link
 *   is open, the function will try to establish a link as if {@link
 *   mssql_connect} was called, and use it.
 * @return bool
 * @since PHP 4, PHP 5, PECL odbtp >= 1.1.1
 **/
function mssql_select_db($database_name, $link_identifier){}

/**
 * @return int
 * @since PHP 4, PHP 5
 **/
function mt_getrandmax(){}

/**
 * @return int
 * @since PHP 4, PHP 5
 **/
function mt_rand(){}

/**
 * Seeds the random number generator with {@link seed} or with a random
 * value if no {@link seed} is given.
 * 
 * @param int $seed An optional seed value
 * @return void
 * @since PHP 4, PHP 5
 **/
function mt_srand($seed){}

/**
 * Returns the number of rows affected by the last INSERT, UPDATE,
 * REPLACE or DELETE query.
 * 
 * For SELECT statements {@link mysqli_affected_rows} works like {@link
 * mysqli_num_rows}.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_affected_rows($link){}

/**
 * Turns on or off auto-commit mode on queries for the database
 * connection.
 * 
 * To determine the current state of autocommit use the SQL command
 * SELECT @@autocommit.
 * 
 * @param mysqli $link Whether to turn on auto-commit or not.
 * @param bool $mode
 * @return bool
 * @since PHP 5
 **/
function mysqli_autocommit($link, $mode){}

/**
 * Changes the user of the specified database connection and sets the
 * current database.
 * 
 * In order to successfully change users a valid {@link username} and
 * {@link password} parameters must be provided and that user must have
 * sufficient permissions to access the desired database. If for any
 * reason authorization fails, the current user authentication will
 * remain.
 * 
 * @param mysqli $link The MySQL user name.
 * @param string $user The MySQL password.
 * @param string $password The database to change to. If desired, the
 *   value may be passed resulting in only changing the user and not
 *   selecting a database. To select a database in this case use the
 *   {@link mysqli_select_db} function.
 * @param string $database
 * @return bool
 * @since PHP 5
 **/
function mysqli_change_user($link, $user, $password, $database){}

/**
 * Returns the current character set for the database connection.
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_character_set_name($link){}

/**
 * Closes a previously opened database connection.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_close($link){}

/**
 * Commits the current transaction for the database connection.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_commit($link){}

/**
 * Opens a connection to the MySQL Server running on.
 * 
 * @param string $host Can be either a host name or an IP address.
 *   Passing the value or the string "localhost" to this parameter, the
 *   local host is assumed. When possible, pipes will be used instead of
 *   the TCP/IP protocol. Prepending host by p: opens a persistent
 *   connection. {@link mysqli_change_user} is automatically called on
 *   connections opened from the connection pool.
 * @param string $username The MySQL user name.
 * @param string $passwd If not provided or , the MySQL server will
 *   attempt to authenticate the user against those user records which
 *   have no password only. This allows one username to be used with
 *   different permissions (depending on if a password as provided or
 *   not).
 * @param string $dbname If provided will specify the default database
 *   to be used when performing queries.
 * @param int $port Specifies the port number to attempt to connect to
 *   the MySQL server.
 * @param string $socket Specifies the socket or named pipe that should
 *   be used.
 * @return mysqli
 * @since PHP 5
 **/
function mysqli_connect($host, $username, $passwd, $dbname, $port, $socket){}

/**
 * Returns the last error code number from the last call to {@link
 * mysqli_connect}.
 * 
 * @return int
 * @since PHP 5
 **/
function mysqli_connect_errno(){}

/**
 * Returns the last error message string from the last call to {@link
 * mysqli_connect}.
 * 
 * @return string
 * @since PHP 5
 **/
function mysqli_connect_error(){}

/**
 * The {@link mysqli_data_seek} function seeks to an arbitrary result
 * pointer specified by the {@link offset} in the result set.
 * 
 * @param mysqli_result $result The field offset. Must be between zero
 *   and the total number of rows minus one (0..{@link mysqli_num_rows} -
 *   1).
 * @param int $offset
 * @return bool
 * @since PHP 5
 **/
function mysqli_data_seek($result, $offset){}

/**
 * Performs debugging operations using the Fred Fish debugging library.
 * 
 * @param string $message A string representing the debugging operation
 *   to perform
 * @return bool
 * @since PHP 5
 **/
function mysqli_debug($message){}

/**
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_disable_reads_from_master($link){}

/**
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_disable_rpl_parse($link){}

/**
 * This function is designed to be executed by an user with the SUPER
 * privilege and is used to dump debugging information into the log for
 * the MySQL Server relating to the connection.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_dump_debug_info($link){}

/**
 * @return void
 * @since PHP 5 >= 5.1.0
 **/
function mysqli_embedded_server_end(){}

/**
 * @param bool $start
 * @param array $arguments
 * @param array $groups
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function mysqli_embedded_server_start($start, $arguments, $groups){}

/**
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_enable_reads_from_master($link){}

/**
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_enable_rpl_parse($link){}

/**
 * Returns the last error code for the most recent MySQLi function call
 * that can succeed or fail.
 * 
 * Client error message numbers are listed in the MySQL errmsg.h header
 * file, server error message numbers are listed in mysqld_error.h. In
 * the MySQL source distribution you can find a complete list of error
 * messages and error numbers in the file Docs/mysqld_error.txt.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_errno($link){}

/**
 * Returns the last error message for the most recent MySQLi function
 * call that can succeed or fail.
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_error($link){}

/**
 * {@link mysqli_fetch_all} fetches all result rows and returns the
 * result set as an associative array, a numeric array, or both.
 * 
 * @param mysqli_result $result This optional parameter is a constant
 *   indicating what type of array should be produced from the current
 *   row data. The possible values for this parameter are the constants
 *   MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH.
 * @param int $resulttype
 * @return mixed
 * @since PHP 5 >= 5.3.0
 **/
function mysqli_fetch_all($result, $resulttype){}

/**
 * Returns an array that corresponds to the fetched row or if there are
 * no more rows for the resultset represented by the {@link result}
 * parameter.
 * 
 * {@link mysqli_fetch_array} is an extended version of the {@link
 * mysqli_fetch_row} function. In addition to storing the data in the
 * numeric indices of the result array, the {@link mysqli_fetch_array}
 * function can also store the data in associative indices, using the
 * field names of the result set as keys.
 * 
 * If two or more columns of the result have the same field names, the
 * last column will take precedence and overwrite the earlier data. In
 * order to access multiple columns with the same name, the numerically
 * indexed version of the row must be used.
 * 
 * @param mysqli_result $result This optional parameter is a constant
 *   indicating what type of array should be produced from the current
 *   row data. The possible values for this parameter are the constants
 *   MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH. By using the MYSQLI_ASSOC
 *   constant this function will behave identically to the {@link
 *   mysqli_fetch_assoc}, while MYSQLI_NUM will behave identically to the
 *   {@link mysqli_fetch_row} function. The final option MYSQLI_BOTH will
 *   create a single array with the attributes of both.
 * @param int $resulttype
 * @return mixed
 * @since PHP 5
 **/
function mysqli_fetch_array($result, $resulttype){}

/**
 * Returns an associative array that corresponds to the fetched row or if
 * there are no more rows.
 * 
 * @param mysqli_result $result
 * @return array
 * @since PHP 5
 **/
function mysqli_fetch_assoc($result){}

/**
 * Returns the definition of one column of a result set as an object.
 * Call this function repeatedly to retrieve information about all
 * columns in the result set.
 * 
 * @param mysqli_result $result
 * @return object
 * @since PHP 5
 **/
function mysqli_fetch_field($result){}

/**
 * This function serves an identical purpose to the {@link
 * mysqli_fetch_field} function with the single difference that, instead
 * of returning one object at a time for each field, the columns are
 * returned as an array of objects.
 * 
 * @param mysqli_result $result
 * @return array
 * @since PHP 5
 **/
function mysqli_fetch_fields($result){}

/**
 * Returns an object which contains field definition information from the
 * specified result set.
 * 
 * @param mysqli_result $result The field number. This value must be in
 *   the range from 0 to number of fields - 1.
 * @param int $fieldnr
 * @return object
 * @since PHP 5
 **/
function mysqli_fetch_field_direct($result, $fieldnr){}

/**
 * The {@link mysqli_fetch_lengths} function returns an array containing
 * the lengths of every column of the current row within the result set.
 * 
 * @param mysqli_result $result
 * @return array
 * @since PHP 5
 **/
function mysqli_fetch_lengths($result){}

/**
 * The {@link mysqli_fetch_object} will return the current row result set
 * as an object where the attributes of the object represent the names of
 * the fields found within the result set.
 * 
 * @param mysqli_result $result The name of the class to instantiate,
 *   set the properties of and return. If not specified, a stdClass
 *   object is returned.
 * @param string $class_name An optional array of parameters to pass to
 *   the constructor for {@link class_name} objects.
 * @param array $params
 * @return object
 * @since PHP 5
 **/
function mysqli_fetch_object($result, $class_name, $params){}

/**
 * Fetches one row of data from the result set and returns it as an
 * enumerated array, where each column is stored in an array offset
 * starting from 0 (zero). Each subsequent call to this function will
 * return the next row within the result set, or if there are no more
 * rows.
 * 
 * @param mysqli_result $result
 * @return mixed
 * @since PHP 5
 **/
function mysqli_fetch_row($result){}

/**
 * Returns the number of columns for the most recent query on the
 * connection represented by the {@link link} parameter. This function
 * can be useful when using the {@link mysqli_store_result} function to
 * determine if the query should have produced a non-empty result set or
 * not without knowing the nature of the query.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_field_count($link){}

/**
 * Sets the field cursor to the given offset. The next call to {@link
 * mysqli_fetch_field} will retrieve the field definition of the column
 * associated with that offset.
 * 
 * @param mysqli_result $result The field number. This value must be in
 *   the range from 0 to number of fields - 1.
 * @param int $fieldnr
 * @return bool
 * @since PHP 5
 **/
function mysqli_field_seek($result, $fieldnr){}

/**
 * Returns the position of the field cursor used for the last {@link
 * mysqli_fetch_field} call. This value can be used as an argument to
 * {@link mysqli_field_seek}.
 * 
 * @param mysqli_result $result
 * @return int
 * @since PHP 5
 **/
function mysqli_field_tell($result){}

/**
 * Frees the memory associated with the result.
 * 
 * @param mysqli_result $result
 * @return void
 * @since PHP 5
 **/
function mysqli_free_result($result){}

/**
 * Returns client Zval cache statistics.
 * 
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function mysqli_get_cache_stats(){}

/**
 * Returns a character set object providing several properties of the
 * current active character set.
 * 
 * @param mysqli $link
 * @return object
 * @since PHP 5 >= 5.1.0
 **/
function mysqli_get_charset($link){}

/**
 * Returns a string that represents the MySQL client library version.
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_get_client_info($link){}

/**
 * Returns client per-process statistics.
 * 
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function mysqli_get_client_stats(){}

/**
 * Returns client version number as an integer.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_get_client_version($link){}

/**
 * Returns statistics about the client connection.
 * 
 * @param mysqli $link
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function mysqli_get_connection_stats($link){}

/**
 * Returns a string describing the connection represented by the {@link
 * link} parameter (including the server host name).
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_get_host_info($link){}

/**
 * Returns an integer representing the MySQL protocol version used by the
 * connection represented by the {@link link} parameter.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_get_proto_info($link){}

/**
 * Returns a string representing the version of the MySQL server that the
 * MySQLi extension is connected to.
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_get_server_info($link){}

/**
 * The {@link mysqli_get_server_version} function returns the version of
 * the server connected to (represented by the {@link link} parameter) as
 * an integer.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_get_server_version($link){}

/**
 * @param mysqli $link
 * @return mysqli_warning
 * @since PHP 5 >= 5.1.0
 **/
function mysqli_get_warnings($link){}

/**
 * The {@link mysqli_info} function returns a string providing
 * information about the last query executed. The nature of this string
 * is provided below:
 * 
 * Possible mysqli_info return values Query type Example result string
 * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0 INSERT
 * INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0 Warnings: 0
 * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
 * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0 UPDATE ... Rows
 * matched: 40 Changed: 40 Warnings: 0
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_info($link){}

/**
 * Allocates or initializes a MYSQL object suitable for {@link
 * mysqli_options} and {@link mysqli_real_connect}.
 * 
 * @return mysqli
 * @since PHP 5
 **/
function mysqli_init(){}

/**
 * The {@link mysqli_insert_id} function returns the ID generated by a
 * query on a table with a column having the AUTO_INCREMENT attribute. If
 * the last query wasn't an INSERT or UPDATE statement or if the modified
 * table does not have a column with the AUTO_INCREMENT attribute, this
 * function will return zero.
 * 
 * @param mysqli $link
 * @return mixed
 * @since PHP 5
 **/
function mysqli_insert_id($link){}

/**
 * This function is used to ask the server to kill a MySQL thread
 * specified by the {@link processid} parameter. This value must be
 * retrieved by calling the {@link mysqli_thread_id} function.
 * 
 * To stop a running query you should use the SQL command KILL QUERY
 * processid.
 * 
 * @param mysqli $link
 * @param int $processid
 * @return bool
 * @since PHP 5
 **/
function mysqli_kill($link, $processid){}

/**
 * @param mysqli $link
 * @param string $query
 * @return bool
 * @since PHP 5
 **/
function mysqli_master_query($link, $query){}

/**
 * Indicates if one or more result sets are available from a previous
 * call to {@link mysqli_multi_query}.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_more_results($link){}

/**
 * Executes one or multiple queries which are concatenated by a
 * semicolon.
 * 
 * To retrieve the resultset from the first query you can use {@link
 * mysqli_use_result} or {@link mysqli_store_result}. All subsequent
 * query results can be processed using {@link mysqli_more_results} and
 * {@link mysqli_next_result}.
 * 
 * @param mysqli $link The query, as a string. Data inside the query
 *   should be properly escaped.
 * @param string $query
 * @return bool
 * @since PHP 5
 **/
function mysqli_multi_query($link, $query){}

/**
 * Prepares next result set from a previous call to {@link
 * mysqli_multi_query} which can be retrieved by {@link
 * mysqli_store_result} or {@link mysqli_use_result}.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_next_result($link){}

/**
 * Returns the number of fields from specified result set.
 * 
 * @param mysqli_result $result
 * @return int
 * @since PHP 5
 **/
function mysqli_num_fields($result){}

/**
 * Returns the number of rows in the result set.
 * 
 * The use of {@link mysqli_num_rows} depends on whether you use buffered
 * or unbuffered result sets. In case you use unbuffered resultsets
 * {@link mysqli_num_rows} will not return the correct number of rows
 * until all the rows in the result have been retrieved.
 * 
 * @param mysqli_result $result
 * @return int
 * @since PHP 5
 **/
function mysqli_num_rows($result){}

/**
 * Used to set extra connect options and affect behavior for a
 * connection.
 * 
 * This function may be called multiple times to set several options.
 * 
 * {@link mysqli_options} should be called after {@link mysqli_init} and
 * before {@link mysqli_real_connect}.
 * 
 * @param mysqli $link The option that you want to set. It can be one
 *   of the following values: Valid options Name Description
 *   MYSQLI_OPT_CONNECT_TIMEOUT connection timeout in seconds (supported
 *   on Windows with TCP/IP since PHP 5.3.1) MYSQLI_OPT_LOCAL_INFILE
 *   enable/disable use of LOAD LOCAL INFILE MYSQLI_INIT_COMMAND command
 *   to execute after when connecting to MySQL server
 *   MYSQLI_READ_DEFAULT_FILE Read options from named option file instead
 *   of my.cnf MYSQLI_READ_DEFAULT_GROUP Read options from the named
 *   group from my.cnf or the file specified with
 *   MYSQL_READ_DEFAULT_FILE.
 * @param int $option The value for the option.
 * @param mixed $value
 * @return bool
 * @since PHP 5
 **/
function mysqli_options($link, $option, $value){}

/**
 * Checks whether the connection to the server is working. If it has gone
 * down, and global option mysqli.reconnect is enabled an automatic
 * reconnection is attempted.
 * 
 * This function can be used by clients that remain idle for a long
 * while, to check whether the server has closed the connection and
 * reconnect if necessary.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_ping($link){}

/**
 * Poll connections.
 * 
 * @param array $read
 * @param array $error
 * @param array $reject
 * @param int $sec Number of seconds to wait, must be non-negative.
 * @param int $usec Number of microseconds to wait, must be
 *   non-negative.
 * @return int
 * @since PHP 5 >= 5.3.0
 **/
function mysqli_poll(&$read, &$error, &$reject, $sec, $usec){}

/**
 * Prepares the SQL query, and returns a statement handle to be used for
 * further operations on the statement. The query must consist of a
 * single SQL statement.
 * 
 * The parameter markers must be bound to application variables using
 * {@link mysqli_stmt_bind_param} and/or {@link mysqli_stmt_bind_result}
 * before executing the statement or fetching rows.
 * 
 * @param mysqli $link The query, as a string. This parameter can
 *   include one or more parameter markers in the SQL statement by
 *   embedding question mark (?) characters at the appropriate positions.
 * @param string $query
 * @return mysqli_stmt
 * @since PHP 5
 **/
function mysqli_prepare($link, $query){}

/**
 * Performs a {@link query} against the database.
 * 
 * Functionally, using this function is identical to calling {@link
 * mysqli_real_query} followed either by {@link mysqli_use_result} or
 * {@link mysqli_store_result}.
 * 
 * @param mysqli $link The query string. Data inside the query should
 *   be properly escaped.
 * @param string $query Either the constant MYSQLI_USE_RESULT or
 *   MYSQLI_STORE_RESULT depending on the desired behavior. By default,
 *   MYSQLI_STORE_RESULT is used. If you use MYSQLI_USE_RESULT all
 *   subsequent calls will return error Commands out of sync unless you
 *   call {@link mysqli_free_result} With MYSQLI_ASYNC (available with
 *   mysqlnd), it is possible to perform query asynchronously. {@link
 *   mysqli_poll} is then used to get results from such queries.
 * @param int $resultmode
 * @return mixed
 * @since PHP 5
 **/
function mysqli_query($link, $query, $resultmode){}

/**
 * Establish a connection to a MySQL database engine.
 * 
 * This function differs from {@link mysqli_connect}:
 * 
 * @param mysqli $link Can be either a host name or an IP address.
 *   Passing the value or the string "localhost" to this parameter, the
 *   local host is assumed. When possible, pipes will be used instead of
 *   the TCP/IP protocol.
 * @param string $host The MySQL user name.
 * @param string $username If provided or , the MySQL server will
 *   attempt to authenticate the user against those user records which
 *   have no password only. This allows one username to be used with
 *   different permissions (depending on if a password as provided or
 *   not).
 * @param string $passwd If provided will specify the default database
 *   to be used when performing queries.
 * @param string $dbname Specifies the port number to attempt to
 *   connect to the MySQL server.
 * @param int $port Specifies the socket or named pipe that should be
 *   used.
 * @param string $socket With the parameter {@link flags} you can set
 *   different connection options:
 * @param int $flags
 * @return bool
 * @since PHP 5
 **/
function mysqli_real_connect($link, $host, $username, $passwd, $dbname, $port, $socket, $flags){}

/**
 * This function is used to create a legal SQL string that you can use in
 * an SQL statement. The given string is encoded to an escaped SQL
 * string, taking into account the current character set of the
 * connection.
 * 
 * @param mysqli $link The string to be escaped. Characters encoded are
 *   NUL (ASCII 0), \n, \r, \, ', ", and Control-Z.
 * @param string $escapestr
 * @return string
 * @since PHP 5
 **/
function mysqli_real_escape_string($link, $escapestr){}

/**
 * Executes a single query against the database whose result can then be
 * retrieved or stored using the {@link mysqli_store_result} or {@link
 * mysqli_use_result} functions.
 * 
 * In order to determine if a given query should return a result set or
 * not, see {@link mysqli_field_count}.
 * 
 * @param mysqli $link The query, as a string. Data inside the query
 *   should be properly escaped.
 * @param string $query
 * @return bool
 * @since PHP 5
 **/
function mysqli_real_query($link, $query){}

/**
 * Get result from async query.
 * 
 * @param mysql $link
 * @return mysqli_result
 * @since PHP 5 >= 5.3.0
 **/
function mysqli_reap_async_query($link){}

/**
 * {@link mysqli_report} is a powerful function to improve your queries
 * and code during development and testing phase. Depending on the flags
 * it reports errors from mysqli function calls or queries which don't
 * use an index (or use a bad index).
 * 
 * @param int $flags Supported flags Name Description MYSQLI_REPORT_OFF
 *   Turns reporting off MYSQLI_REPORT_ERROR Report errors from mysqli
 *   function calls MYSQLI_REPORT_STRICT Report warnings from mysqli
 *   function calls MYSQLI_REPORT_INDEX Report if no index or bad index
 *   was used in a query MYSQLI_REPORT_ALL Set all options (report all)
 * @return bool
 * @since PHP 5
 **/
function mysqli_report($flags){}

/**
 * Rollbacks the current transaction for the database.
 * 
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_rollback($link){}

/**
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_rpl_parse_enabled($link){}

/**
 * @param mysqli $link
 * @return bool
 * @since PHP 5
 **/
function mysqli_rpl_probe($link){}

/**
 * Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN
 * depending on a query type. INSERT, UPDATE and similar are master
 * queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.
 * 
 * @param mysqli $link
 * @param string $query
 * @return int
 * @since PHP 5
 **/
function mysqli_rpl_query_type($link, $query){}

/**
 * Selects the default database to be used when performing queries
 * against the database connection.
 * 
 * @param mysqli $link The database name.
 * @param string $dbname
 * @return bool
 * @since PHP 5
 **/
function mysqli_select_db($link, $dbname){}

/**
 * @param mysqli $link
 * @param string $query
 * @return bool
 * @since PHP 5
 **/
function mysqli_send_query($link, $query){}

/**
 * Sets the default character set to be used when sending data from and
 * to the database server.
 * 
 * @param mysqli $link The charset to be set as default.
 * @param string $charset
 * @return bool
 * @since PHP 5 >= 5.0.5
 **/
function mysqli_set_charset($link, $charset){}

/**
 * Deactivates a LOAD DATA INFILE LOCAL handler previously set with
 * {@link mysqli_set_local_infile_handler}.
 * 
 * @param mysqli $link
 * @return void
 * @since PHP 5
 **/
function mysqli_set_local_infile_default($link){}

/**
 * Set callback function for LOAD DATA LOCAL INFILE command
 * 
 * The callbacks task is to read input from the file specified in the
 * LOAD DATA LOCAL INFILE and to reformat it into the format understood
 * by LOAD DATA INFILE.
 * 
 * The returned data needs to match the format specified in the LOAD DATA
 * 
 * @param mysqli $link A callback function or object method taking the
 *   following parameters:
 * @param callback $read_func A PHP stream associated with the SQL
 *   commands INFILE
 * @return bool
 * @since PHP 5
 **/
function mysqli_set_local_infile_handler($link, $read_func){}

/**
 * @param mysqli $link
 * @param string $query
 * @return bool
 * @since PHP 5
 **/
function mysqli_slave_query($link, $query){}

/**
 * Returns a string containing the SQLSTATE error code for the last
 * error. The error code consists of five characters. '00000' means no
 * error. The values are specified by ANSI SQL and ODBC. For a list of
 * possible values, see .
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_sqlstate($link){}

/**
 * Used for establishing secure connections using SSL. It must be called
 * before {@link mysqli_real_connect}. This function does nothing unless
 * OpenSSL support is enabled.
 * 
 * Note that MySQL Native Driver does not support SSL, so calling this
 * function when using MySQL Native Driver will result in an error. MySQL
 * Native Driver is enabled by default on Microsoft Windows from PHP
 * version 5.3 onwards.
 * 
 * @param mysqli $link The path name to the key file.
 * @param string $key The path name to the certificate file.
 * @param string $cert The path name to the certificate authority file.
 * @param string $ca The pathname to a directory that contains trusted
 *   SSL CA certificates in PEM format.
 * @param string $capath A list of allowable ciphers to use for SSL
 *   encryption.
 * @param string $cipher
 * @return bool
 * @since PHP 5
 **/
function mysqli_ssl_set($link, $key, $cert, $ca, $capath, $cipher){}

/**
 * {@link mysqli_stat} returns a string containing information similar to
 * that provided by the 'mysqladmin status' command. This includes uptime
 * in seconds and the number of running threads, questions, reloads, and
 * open tables.
 * 
 * @param mysqli $link
 * @return string
 * @since PHP 5
 **/
function mysqli_stat($link){}

/**
 * Returns the number of rows affected by INSERT, UPDATE, or DELETE
 * query.
 * 
 * This function only works with queries which update a table. In order
 * to get the number of rows from a SELECT query, use {@link
 * mysqli_stmt_num_rows} instead.
 * 
 * @param mysqli_stmt $stmt
 * @return int
 * @since PHP 5
 **/
function mysqli_stmt_affected_rows($stmt){}

/**
 * Gets the current value of a statement attribute.
 * 
 * @param mysqli_stmt $stmt The attribute that you want to get.
 * @param int $attr
 * @return int
 * @since PHP 5
 **/
function mysqli_stmt_attr_get($stmt, $attr){}

/**
 * Used to modify the behavior of a prepared statement. This function may
 * be called multiple times to set several attributes.
 * 
 * @param mysqli_stmt $stmt The attribute that you want to set. It can
 *   have one of the following values: Attribute values Character
 *   Description MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH If set to 1, causes
 *   {@link mysqli_stmt_store_result} to update the metadata
 *   MYSQL_FIELD->max_length value. MYSQLI_STMT_ATTR_CURSOR_TYPE Type of
 *   cursor to open for statement when {@link mysqli_stmt_execute} is
 *   invoked. {@link mode} can be MYSQLI_CURSOR_TYPE_NO_CURSOR (the
 *   default) or MYSQLI_CURSOR_TYPE_READ_ONLY.
 *   MYSQLI_STMT_ATTR_PREFETCH_ROWS Number of rows to fetch from server
 *   at a time when using a cursor. {@link mode} can be in the range from
 *   1 to the maximum value of unsigned long. The default is 1. If you
 *   use the MYSQLI_STMT_ATTR_CURSOR_TYPE option with
 *   MYSQLI_CURSOR_TYPE_READ_ONLY, a cursor is opened for the statement
 *   when you invoke {@link mysqli_stmt_execute}. If there is already an
 *   open cursor from a previous {@link mysqli_stmt_execute} call, it
 *   closes the cursor before opening a new one. {@link
 *   mysqli_stmt_reset} also closes any open cursor before preparing the
 *   statement for re-execution. {@link mysqli_stmt_free_result} closes
 *   any open cursor. If you open a cursor for a prepared statement,
 *   {@link mysqli_stmt_store_result} is unnecessary.
 * @param int $attr The value to assign to the attribute.
 * @param int $mode
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_attr_set($stmt, $attr, $mode){}

/**
 * Bind variables for the parameter markers in the SQL statement that was
 * passed to {@link mysqli_prepare}.
 * 
 * @param mysqli_stmt $stmt A string that contains one or more
 *   characters which specify the types for the corresponding bind
 *   variables: Type specification chars Character Description i
 *   corresponding variable has type integer d corresponding variable has
 *   type double s corresponding variable has type string b corresponding
 *   variable is a blob and will be sent in packets
 * @param string $types The number of variables and length of string
 *   {@link types} must match the parameters in the statement.
 * @param mixed $var1
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_bind_param($stmt, $types, &$var1){}

/**
 * Binds columns in the result set to variables.
 * 
 * When {@link mysqli_stmt_fetch} is called to fetch data, the MySQL
 * client/server protocol places the data for the bound columns into the
 * specified variables {@link var1, ...}.
 * 
 * @param mysqli_stmt $stmt The variable to be bound.
 * @param mixed $var1
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_bind_result($stmt, &$var1){}

/**
 * Closes a prepared statement. {@link mysqli_stmt_close} also
 * deallocates the statement handle. If the current statement has pending
 * or unread results, this function cancels them so that the next query
 * can be executed.
 * 
 * @param mysqli_stmt $stmt
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_close($stmt){}

/**
 * Seeks to an arbitrary result pointer in the statement result set.
 * 
 * {@link mysqli_stmt_store_result} must be called prior to {@link
 * mysqli_stmt_data_seek}.
 * 
 * @param mysqli_stmt $stmt Must be between zero and the total number
 *   of rows minus one (0.. {@link mysqli_stmt_num_rows} - 1).
 * @param int $offset
 * @return void
 * @since PHP 5
 **/
function mysqli_stmt_data_seek($stmt, $offset){}

/**
 * Returns the error code for the most recently invoked statement
 * function that can succeed or fail.
 * 
 * Client error message numbers are listed in the MySQL errmsg.h header
 * file, server error message numbers are listed in mysqld_error.h. In
 * the MySQL source distribution you can find a complete list of error
 * messages and error numbers in the file Docs/mysqld_error.txt.
 * 
 * @param mysqli_stmt $stmt
 * @return int
 * @since PHP 5
 **/
function mysqli_stmt_errno($stmt){}

/**
 * Returns a containing the error message for the most recently invoked
 * statement function that can succeed or fail.
 * 
 * @param mysqli_stmt $stmt
 * @return string
 * @since PHP 5
 **/
function mysqli_stmt_error($stmt){}

/**
 * Executes a query that has been previously prepared using the {@link
 * mysqli_prepare} function. When executed any parameter markers which
 * exist will automatically be replaced with the appropriate data.
 * 
 * If the statement is UPDATE, DELETE, or INSERT, the total number of
 * affected rows can be determined by using the {@link
 * mysqli_stmt_affected_rows} function. Likewise, if the query yields a
 * result set the {@link mysqli_stmt_fetch} function is used.
 * 
 * @param mysqli_stmt $stmt
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_execute($stmt){}

/**
 * Fetch the result from a prepared statement into the variables bound by
 * {@link mysqli_stmt_bind_result}.
 * 
 * @param mysqli_stmt $stmt
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_fetch($stmt){}

/**
 * @param mysqli_stmt $stmt
 * @return int
 * @since PHP 5
 **/
function mysqli_stmt_field_count($stmt){}

/**
 * Frees the result memory associated with the statement, which was
 * allocated by {@link mysqli_stmt_store_result}.
 * 
 * @param mysqli_stmt $stmt
 * @return void
 * @since PHP 5
 **/
function mysqli_stmt_free_result($stmt){}

/**
 * @param mysqli_stmt $stmt
 * @return object
 * @since PHP 5 >= 5.1.0
 **/
function mysqli_stmt_get_warnings($stmt){}

/**
 * Allocates and initializes a statement object suitable for {@link
 * mysqli_stmt_prepare}.
 * 
 * @param mysqli $link
 * @return mysqli_stmt
 * @since PHP 5
 **/
function mysqli_stmt_init($link){}

/**
 * @param mysqli_stmt $stmt
 * @return mixed
 * @since PHP 5
 **/
function mysqli_stmt_insert_id($stmt){}

/**
 * Returns the number of rows in the result set. The use of {@link
 * mysqli_stmt_num_rows} depends on whether or not you used {@link
 * mysqli_stmt_store_result} to buffer the entire result set in the
 * statement handle.
 * 
 * If you use {@link mysqli_stmt_store_result}, {@link
 * mysqli_stmt_num_rows} may be called immediately.
 * 
 * @param mysqli_stmt $stmt
 * @return int
 * @since PHP 5
 **/
function mysqli_stmt_num_rows($stmt){}

/**
 * Returns the number of parameter markers present in the prepared
 * statement.
 * 
 * @param mysqli_stmt $stmt
 * @return int
 * @since PHP 5
 **/
function mysqli_stmt_param_count($stmt){}

/**
 * Prepares the SQL query pointed to by the null-terminated string query.
 * 
 * The parameter markers must be bound to application variables using
 * {@link mysqli_stmt_bind_param} and/or {@link mysqli_stmt_bind_result}
 * before executing the statement or fetching rows.
 * 
 * @param mysqli_stmt $stmt The query, as a string. It must consist of
 *   a single SQL statement. You can include one or more parameter
 *   markers in the SQL statement by embedding question mark (?)
 *   characters at the appropriate positions.
 * @param string $query
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_prepare($stmt, $query){}

/**
 * Resets a prepared statement on client and server to state after
 * prepare.
 * 
 * It resets the statement on the server, data sent using {@link
 * mysqli_stmt_send_long_data}, unbuffered result sets and current
 * errors. It does not clear bindings or stored result sets. Stored
 * result sets will be cleared when executing the prepared statement (or
 * closing it).
 * 
 * To prepare a statement with another query use function {@link
 * mysqli_stmt_prepare}.
 * 
 * @param mysqli_stmt $stmt
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_reset($stmt){}

/**
 * If a statement passed to {@link mysqli_prepare} is one that produces a
 * result set, {@link mysqli_stmt_result_metadata} returns the result
 * object that can be used to process the meta information such as total
 * number of fields and individual field information.
 * 
 * The result set structure should be freed when you are done with it,
 * which you can do by passing it to {@link mysqli_free_result}
 * 
 * @param mysqli_stmt $stmt
 * @return mysqli_result
 * @since PHP 5
 **/
function mysqli_stmt_result_metadata($stmt){}

/**
 * Allows to send parameter data to the server in pieces (or chunks),
 * e.g. if the size of a blob exceeds the size of max_allowed_packet.
 * This function can be called multiple times to send the parts of a
 * character or binary data value for a column, which must be one of the
 * TEXT or BLOB datatypes.
 * 
 * @param mysqli_stmt $stmt Indicates which parameter to associate the
 *   data with. Parameters are numbered beginning with 0.
 * @param int $param_nr A string containing data to be sent.
 * @param string $data
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_send_long_data($stmt, $param_nr, $data){}

/**
 * Returns a string containing the SQLSTATE error code for the most
 * recently invoked prepared statement function that can succeed or fail.
 * The error code consists of five characters. '00000' means no error.
 * The values are specified by ANSI SQL and ODBC. For a list of possible
 * values, see .
 * 
 * @param mysqli_stmt $stmt
 * @return string
 * @since PHP 5
 **/
function mysqli_stmt_sqlstate($stmt){}

/**
 * You must call {@link mysqli_stmt_store_result} for every query that
 * successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN),
 * and only if you want to buffer the complete result set by the client,
 * so that the subsequent {@link mysqli_stmt_fetch} call returns buffered
 * data.
 * 
 * @param mysqli_stmt $stmt
 * @return bool
 * @since PHP 5
 **/
function mysqli_stmt_store_result($stmt){}

/**
 * Transfers the result set from the last query on the database
 * connection represented by the {@link link} parameter to be used with
 * the {@link mysqli_data_seek} function.
 * 
 * @param mysqli $link
 * @return mysqli_result
 * @since PHP 5
 **/
function mysqli_store_result($link){}

/**
 * The {@link mysqli_thread_id} function returns the thread ID for the
 * current connection which can then be killed using the {@link
 * mysqli_kill} function. If the connection is lost and you reconnect
 * with {@link mysqli_ping}, the thread ID will be other. Therefore you
 * should get the thread ID only when you need it.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_thread_id($link){}

/**
 * Tells whether the client library is compiled as thread-safe.
 * 
 * @return bool
 * @since PHP 5
 **/
function mysqli_thread_safe(){}

/**
 * Used to initiate the retrieval of a result set from the last query
 * executed using the {@link mysqli_real_query} function on the database
 * connection.
 * 
 * Either this or the {@link mysqli_store_result} function must be called
 * before the results of a query can be retrieved, and one or the other
 * must be called to prevent the next query on that database connection
 * from failing.
 * 
 * @param mysqli $link
 * @return mysqli_result
 * @since PHP 5
 **/
function mysqli_use_result($link){}

/**
 * Returns the number of warnings from the last query in the connection.
 * 
 * @param mysqli $link
 * @return int
 * @since PHP 5
 **/
function mysqli_warning_count($link){}

/**
 * Get the number of affected rows by the last INSERT, UPDATE, REPLACE or
 * DELETE query associated with {@link link_identifier}.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4, PHP 5
 **/
function mysql_affected_rows($link_identifier){}

/**
 * Retrieves the character_set variable from MySQL.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_client_encoding($link_identifier){}

/**
 * {@link mysql_close} closes the non-persistent connection to the MySQL
 * server that's associated with the specified link identifier. If {@link
 * link_identifier} isn't specified, the last opened link is used.
 * 
 * Using {@link mysql_close} isn't usually necessary, as non-persistent
 * open links are automatically closed at the end of the script's
 * execution. See also freeing resources.
 * 
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_close($link_identifier){}

/**
 * Opens or reuses a connection to a MySQL server.
 * 
 * @param string $server The MySQL server. It can also include a port
 *   number. e.g. "hostname:port" or a path to a local socket e.g.
 *   ":/path/to/socket" for the localhost. If the PHP directive
 *   mysql.default_host is undefined (default), then the default value is
 *   'localhost:3306'. In , this parameter is ignored and value
 *   'localhost:3306' is always used.
 * @param string $username The username. Default value is defined by
 *   mysql.default_user. In , this parameter is ignored and the name of
 *   the user that owns the server process is used.
 * @param string $password The password. Default value is defined by
 *   mysql.default_password. In , this parameter is ignored and empty
 *   password is used.
 * @param bool $new_link If a second call is made to {@link
 *   mysql_connect} with the same arguments, no new link will be
 *   established, but instead, the link identifier of the already opened
 *   link will be returned. The {@link new_link} parameter modifies this
 *   behavior and makes {@link mysql_connect} always open a new link,
 *   even if {@link mysql_connect} was called before with the same
 *   parameters. In , this parameter is ignored.
 * @param int $client_flags The {@link client_flags} parameter can be a
 *   combination of the following constants: 128 (enable LOAD DATA LOCAL
 *   handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS,
 *   MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE. Read the
 *   section about for further information. In , this parameter is
 *   ignored.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_connect($server, $username, $password, $new_link, $client_flags){}

/**
 * {@link mysql_create_db} attempts to create a new database on the
 * server associated with the specified link identifier.
 * 
 * @param string $database_name The name of the database being created.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_create_db($database_name, $link_identifier){}

/**
 * {@link mysql_data_seek} moves the internal row pointer of the MySQL
 * result associated with the specified result identifier to point to the
 * specified row number. The next call to a MySQL fetch function, such as
 * {@link mysql_fetch_assoc}, would return that row.
 * 
 * {@link row_number} starts at 0. The {@link row_number} should be a
 * value in the range from 0 to {@link mysql_num_rows} - 1. However if
 * the result set is empty ({@link mysql_num_rows} == 0), a seek to 0
 * will fail with a E_WARNING and {@link mysql_data_seek} will return .
 * 
 * @param resource $result The desired row number of the new result
 *   pointer.
 * @param int $row_number
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_data_seek($result, $row_number){}

/**
 * Retrieve the database name from a call to {@link mysql_list_dbs}.
 * 
 * @param resource $result The result pointer from a call to {@link
 *   mysql_list_dbs}.
 * @param int $row The index into the result set.
 * @param mixed $field The field name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_db_name($result, $row, $field){}

/**
 * {@link mysql_db_query} selects a database, and executes a query on it.
 * 
 * @param string $database The name of the database that will be
 *   selected.
 * @param string $query The MySQL query. Data inside the query should
 *   be properly escaped.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_db_query($database, $query, $link_identifier){}

/**
 * {@link mysql_drop_db} attempts to drop (remove) an entire database
 * from the server associated with the specified link identifier. This
 * function is deprecated, it is preferable to use {@link mysql_query} to
 * issue an sql DROP DATABASE statement instead.
 * 
 * @param string $database_name The name of the database that will be
 *   deleted.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_drop_db($database_name, $link_identifier){}

/**
 * Returns the error number from the last MySQL function.
 * 
 * Errors coming back from the MySQL database backend no longer issue
 * warnings. Instead, use {@link mysql_errno} to retrieve the error code.
 * Note that this function only returns the error code from the most
 * recently executed MySQL function (not including {@link mysql_error}
 * and {@link mysql_errno}), so if you want to use it, make sure you
 * check the value before calling another MySQL function.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4, PHP 5
 **/
function mysql_errno($link_identifier){}

/**
 * Returns the error text from the last MySQL function. Errors coming
 * back from the MySQL database backend no longer issue warnings.
 * Instead, use {@link mysql_error} to retrieve the error text. Note that
 * this function only returns the error text from the most recently
 * executed MySQL function (not including {@link mysql_error} and {@link
 * mysql_errno}), so if you want to use it, make sure you check the value
 * before calling another MySQL function.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_error($link_identifier){}

/**
 * This function will escape the {@link unescaped_string}, so that it is
 * safe to place it in a {@link mysql_query}. This function is
 * deprecated.
 * 
 * This function is identical to {@link mysql_real_escape_string} except
 * that {@link mysql_real_escape_string} takes a connection handler and
 * escapes the string according to the current character set. {@link
 * mysql_escape_string} does not take a connection argument and does not
 * respect the current charset setting.
 * 
 * @param string $unescaped_string The string that is to be escaped.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function mysql_escape_string($unescaped_string){}

/**
 * Returns an array that corresponds to the fetched row and moves the
 * internal data pointer ahead.
 * 
 * @param resource $result The type of array that is to be fetched.
 *   It's a constant and can take the following values: MYSQL_ASSOC,
 *   MYSQL_NUM, and MYSQL_BOTH.
 * @param int $result_type
 * @return array
 * @since PHP 4, PHP 5
 **/
function mysql_fetch_array($result, $result_type){}

/**
 * Returns an associative array that corresponds to the fetched row and
 * moves the internal data pointer ahead. {@link mysql_fetch_assoc} is
 * equivalent to calling {@link mysql_fetch_array} with MYSQL_ASSOC for
 * the optional second parameter. It only returns an associative array.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function mysql_fetch_assoc($result){}

/**
 * Returns an object containing field information. This function can be
 * used to obtain information about fields in the provided query result.
 * 
 * @param resource $result The numerical field offset. If the field
 *   offset is not specified, the next field that was not yet retrieved
 *   by this function is retrieved. The {@link field_offset} starts at 0.
 * @param int $field_offset
 * @return object
 * @since PHP 4, PHP 5
 **/
function mysql_fetch_field($result, $field_offset){}

/**
 * Returns an array that corresponds to the lengths of each field in the
 * last row fetched by MySQL.
 * 
 * {@link mysql_fetch_lengths} stores the lengths of each result column
 * in the last row returned by {@link mysql_fetch_row}, {@link
 * mysql_fetch_assoc}, {@link mysql_fetch_array}, and {@link
 * mysql_fetch_object} in an array, starting at offset 0.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4, PHP 5
 **/
function mysql_fetch_lengths($result){}

/**
 * Returns an object with properties that correspond to the fetched row
 * and moves the internal data pointer ahead.
 * 
 * @param resource $result The name of the class to instantiate, set
 *   the properties of and return. If not specified, a stdClass object is
 *   returned.
 * @param string $class_name An optional array of parameters to pass to
 *   the constructor for {@link class_name} objects.
 * @param array $params
 * @return object
 * @since PHP 4, PHP 5
 **/
function mysql_fetch_object($result, $class_name, $params){}

/**
 * Returns a numerical array that corresponds to the fetched row and
 * moves the internal data pointer ahead.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4, PHP 5
 **/
function mysql_fetch_row($result){}

/**
 * {@link mysql_field_flags} returns the field flags of the specified
 * field. The flags are reported as a single word per flag separated by a
 * single space, so that you can split the returned value using {@link
 * explode}.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_field_flags($result, $field_offset){}

/**
 * {@link mysql_field_len} returns the length of the specified field.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return int
 * @since PHP 4, PHP 5
 **/
function mysql_field_len($result, $field_offset){}

/**
 * {@link mysql_field_name} returns the name of the specified field
 * index.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_field_name($result, $field_offset){}

/**
 * Seeks to the specified field offset. If the next call to {@link
 * mysql_fetch_field} doesn't include a field offset, the field offset
 * specified in {@link mysql_field_seek} will be returned.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_field_seek($result, $field_offset){}

/**
 * Returns the name of the table that the specified field is in.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_field_table($result, $field_offset){}

/**
 * {@link mysql_field_type} is similar to the {@link mysql_field_name}
 * function. The arguments are identical, but the field type is returned
 * instead.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_field_type($result, $field_offset){}

/**
 * {@link mysql_free_result} will free all memory associated with the
 * result identifier {@link result}.
 * 
 * {@link mysql_free_result} only needs to be called if you are concerned
 * about how much memory is being used for queries that return large
 * result sets. All associated result memory is automatically freed at
 * the end of the script's execution.
 * 
 * @param resource $result
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_free_result($result){}

/**
 * {@link mysql_get_client_info} returns a string that represents the
 * client library version.
 * 
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function mysql_get_client_info(){}

/**
 * Describes the type of connection in use for the connection, including
 * the server host name.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function mysql_get_host_info($link_identifier){}

/**
 * Retrieves the MySQL protocol.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function mysql_get_proto_info($link_identifier){}

/**
 * Retrieves the MySQL server version.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function mysql_get_server_info($link_identifier){}

/**
 * Returns detailed information about the last query.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_info($link_identifier){}

/**
 * Retrieves the ID generated for an AUTO_INCREMENT column by the
 * previous query (usually INSERT).
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4, PHP 5
 **/
function mysql_insert_id($link_identifier){}

/**
 * Returns a result pointer containing the databases available from the
 * current mysql daemon.
 * 
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_list_dbs($link_identifier){}

/**
 * Retrieves information about the given table name.
 * 
 * This function is deprecated. It is preferable to use {@link
 * mysql_query} to issue an SQL SHOW COLUMNS FROM table [LIKE 'name']
 * statement instead.
 * 
 * @param string $database_name The name of the database that's being
 *   queried.
 * @param string $table_name The name of the table that's being
 *   queried.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_list_fields($database_name, $table_name, $link_identifier){}

/**
 * Retrieves the current MySQL server threads.
 * 
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_list_processes($link_identifier){}

/**
 * Retrieves a list of table names from a MySQL database.
 * 
 * This function is deprecated. It is preferable to use {@link
 * mysql_query} to issue an SQL SHOW TABLES [FROM db_name] [LIKE
 * 'pattern'] statement instead.
 * 
 * @param string $database The name of the database
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_list_tables($database, $link_identifier){}

/**
 * Retrieves the number of fields from a query.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function mysql_num_fields($result){}

/**
 * Retrieves the number of rows from a result set. This command is only
 * valid for statements like SELECT or SHOW that return an actual result
 * set. To retrieve the number of rows affected by a INSERT, UPDATE,
 * REPLACE or DELETE query, use {@link mysql_affected_rows}.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function mysql_num_rows($result){}

/**
 * Establishes a persistent connection to a MySQL server.
 * 
 * {@link mysql_pconnect} acts very much like {@link mysql_connect} with
 * two major differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use ({@link mysql_close} will not close links established by
 * {@link mysql_pconnect}).
 * 
 * This type of link is therefore called 'persistent'.
 * 
 * @param string $server The MySQL server. It can also include a port
 *   number. e.g. "hostname:port" or a path to a local socket e.g.
 *   ":/path/to/socket" for the localhost. If the PHP directive
 *   mysql.default_host is undefined (default), then the default value is
 *   'localhost:3306'
 * @param string $username The username. Default value is the name of
 *   the user that owns the server process.
 * @param string $password The password. Default value is an empty
 *   password.
 * @param int $client_flags The {@link client_flags} parameter can be a
 *   combination of the following constants: 128 (enable LOAD DATA LOCAL
 *   handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS,
 *   MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_pconnect($server, $username, $password, $client_flags){}

/**
 * Checks whether or not the connection to the server is working. If it
 * has gone down, an automatic reconnection is attempted. This function
 * can be used by scripts that remain idle for a long while, to check
 * whether or not the server has closed the connection and reconnect if
 * necessary.
 * 
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_ping($link_identifier){}

/**
 * {@link mysql_query} sends a unique query (multiple queries are not
 * supported) to the currently active database on the server that's
 * associated with the specified {@link link_identifier}.
 * 
 * @param string $query An SQL query The query string should not end
 *   with a semicolon. Data inside the query should be properly escaped.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4, PHP 5
 **/
function mysql_query($query, $link_identifier){}

/**
 * Escapes special characters in the {@link unescaped_string}, taking
 * into account the current character set of the connection so that it is
 * safe to place it in a {@link mysql_query}. If binary data is to be
 * inserted, this function must be used.
 * 
 * {@link mysql_real_escape_string} calls MySQL's library function
 * mysql_real_escape_string, which prepends backslashes to the following
 * characters: \x00, \n, \r, \, ', " and \x1a.
 * 
 * This function must always (with few exceptions) be used to make data
 * safe before sending a query to MySQL.
 * 
 * @param string $unescaped_string The string that is to be escaped.
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_real_escape_string($unescaped_string, $link_identifier){}

/**
 * Retrieves the contents of one cell from a MySQL result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they're MUCH quicker than {@link mysql_result}. Also, note that
 * specifying a numeric offset for the field argument is much quicker
 * than specifying a fieldname or tablename.fieldname argument.
 * 
 * @param resource $result The row number from the result that's being
 *   retrieved. Row numbers start at 0.
 * @param int $row The name or offset of the field being retrieved. It
 *   can be the field's offset, the field's name, or the field's table
 *   dot field name (tablename.fieldname). If the column name has been
 *   aliased ('select foo as bar from...'), use the alias instead of the
 *   column name. If undefined, the first field is retrieved.
 * @param mixed $field
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_result($result, $row, $field){}

/**
 * Sets the current active database on the server that's associated with
 * the specified link identifier. Every subsequent call to {@link
 * mysql_query} will be made on the active database.
 * 
 * @param string $database_name The name of the database that is to be
 *   selected.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 4, PHP 5
 **/
function mysql_select_db($database_name, $link_identifier){}

/**
 * Sets the default character set for the current connection.
 * 
 * @param string $charset A valid character set name.
 * @param resource $link_identifier
 * @return bool
 * @since PHP 5 >= 5.2.3
 **/
function mysql_set_charset($charset, $link_identifier){}

/**
 * {@link mysql_stat} returns the current server status.
 * 
 * @param resource $link_identifier
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_stat($link_identifier){}

/**
 * Retrieves the table name from a {@link result}.
 * 
 * This function deprecated. It is preferable to use {@link mysql_query}
 * to issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement
 * instead.
 * 
 * @param resource $result A result pointer resource that's returned
 *   from {@link mysql_list_tables}.
 * @param int $i The integer index (row/table number)
 * @return string
 * @since PHP 4, PHP 5
 **/
function mysql_tablename($result, $i){}

/**
 * Retrieves the current thread ID. If the connection is lost, and a
 * reconnect with {@link mysql_ping} is executed, the thread ID will
 * change. This means only retrieve the thread ID when needed.
 * 
 * @param resource $link_identifier
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function mysql_thread_id($link_identifier){}

/**
 * {@link mysql_unbuffered_query} sends the SQL query {@link query} to
 * MySQL without automatically fetching and buffering the result rows as
 * {@link mysql_query} does. This saves a considerable amount of memory
 * with SQL queries that produce large result sets, and you can start
 * working on the result set immediately after the first row has been
 * retrieved as you don't have to wait until the complete SQL query has
 * been performed. To use {@link mysql_unbuffered_query} while multiple
 * database connections are open, you must specify the optional parameter
 * {@link link_identifier} to identify which connection you want to use.
 * 
 * @param string $query The SQL query to execute. Data inside the query
 *   should be properly escaped.
 * @param resource $link_identifier
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function mysql_unbuffered_query($query, $link_identifier){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_checkstatus($conn, $identifier){}

/**
 * @param resource $conn Its description
 * @param int $array
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_completeauthorizations($conn, &$array){}

/**
 * @param resource $conn
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_connect($conn){}

/**
 * @param resource $conn
 * @return string
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_connectionerror($conn){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return bool
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_deletetrans($conn, $identifier){}

/**
 * @param resource $conn
 * @return bool
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_destroyconn($conn){}

/**
 * @return void
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_destroyengine(){}

/**
 * @param resource $conn
 * @param int $identifier
 * @param string $column
 * @param int $row
 * @return string
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_getcell($conn, $identifier, $column, $row){}

/**
 * @param resource $conn
 * @param int $identifier
 * @param int $column
 * @param int $row
 * @return string
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_getcellbynum($conn, $identifier, $column, $row){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return string
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_getcommadelimited($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $identifier
 * @param int $column_num
 * @return string
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_getheader($conn, $identifier, $column_num){}

/**
 * @return resource
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_initconn(){}

/**
 * @param string $location
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_initengine($location){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_iscommadelimited($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $secs
 * @return bool
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_maxconntimeout($conn, $secs){}

/**
 * @param resource $conn
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_monitor($conn){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_numcolumns($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_numrows($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_parsecommadelimited($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return array
 * @since PHP 5 >= 5.0.5, PECL mcve >= 1.0.0
 **/
function m_responsekeys($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $identifier
 * @param string $key
 * @return string
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_responseparam($conn, $identifier, $key){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_returnstatus($conn, $identifier){}

/**
 * @param resource $conn
 * @param int $tf
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_setblocking($conn, $tf){}

/**
 * @param resource $conn
 * @param string $directory
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_setdropfile($conn, $directory){}

/**
 * @param resource $conn
 * @param string $host
 * @param int $port
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_setip($conn, $host, $port){}

/**
 * @param resource $conn
 * @param string $host
 * @param int $port
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_setssl($conn, $host, $port){}

/**
 * @param resource $conn
 * @param string $cafile
 * @return int
 * @since PHP 5 >= 5.0.5, PECL mcve >= 1.0.0
 **/
function m_setssl_cafile($conn, $cafile){}

/**
 * @param resource $conn
 * @param string $sslkeyfile
 * @param string $sslcertfile
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_setssl_files($conn, $sslkeyfile, $sslcertfile){}

/**
 * @param resource $conn
 * @param int $seconds
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_settimeout($conn, $seconds){}

/**
 * @param string $filename
 * @return string
 * @since PECL mcve >= 5.2.0
 **/
function m_sslcert_gen_hash($filename){}

/**
 * @param resource $conn
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_transactionssent($conn){}

/**
 * @param resource $conn
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_transinqueue($conn){}

/**
 * @param resource $conn
 * @param int $identifier
 * @param string $key
 * @param string $value
 * @return int
 * @since PHP 5 >= 5.0.5, PECL mcve >= 1.0.0
 **/
function m_transkeyval($conn, $identifier, $key, $value){}

/**
 * @param resource $conn
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_transnew($conn){}

/**
 * @param resource $conn
 * @param int $identifier
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_transsend($conn, $identifier){}

/**
 * @param int $microsecs
 * @return int
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_uwait($microsecs){}

/**
 * @param resource $conn
 * @param int $tf
 * @return int
 * @since PHP 5 >= 5.0.5, PECL mcve >= 1.0.0
 **/
function m_validateidentifier($conn, $tf){}

/**
 * @param resource $conn
 * @param int $tf
 * @return bool
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_verifyconnection($conn, $tf){}

/**
 * @param resource $conn
 * @param int $tf
 * @return bool
 * @since PHP 4 >= 4.3.9, PHP 5 = 1.0.0
 **/
function m_verifysslcert($conn, $tf){}

/**
 * {@link natcasesort} is a case insensitive version of {@link natsort}.
 * 
 * This function implements a sort algorithm that orders alphanumeric
 * strings in the way a human being would while maintaining key/value
 * associations. This is described as a "natural ordering".
 * 
 * @param array $array The input array.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function natcasesort(&$array){}

/**
 * This function implements a sort algorithm that orders alphanumeric
 * strings in the way a human being would while maintaining key/value
 * associations. This is described as a "natural ordering". An example of
 * the difference between this algorithm and the regular computer string
 * sorting algorithms (used in {@link sort}) can be seen in the example
 * below.
 * 
 * @param array $array The input array.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function natsort(&$array){}

/**
 * @param int $ch
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_addch($ch){}

/**
 * @param string $s
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_addchnstr($s, $n){}

/**
 * @param string $s
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_addchstr($s){}

/**
 * @param string $s
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_addnstr($s, $n){}

/**
 * @param string $text
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_addstr($text){}

/**
 * @param int $fg
 * @param int $bg
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_assume_default_colors($fg, $bg){}

/**
 * @param int $attributes
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_attroff($attributes){}

/**
 * @param int $attributes
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_attron($attributes){}

/**
 * @param int $attributes
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_attrset($attributes){}

/**
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_baudrate(){}

/**
 * {@link ncurses_beep} sends an audible alert (bell) and if its not
 * possible flashes the screen.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_beep(){}

/**
 * @param int $attrchar
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_bkgd($attrchar){}

/**
 * @param int $attrchar
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_bkgdset($attrchar){}

/**
 * Draws the specified lines and corners around the main window.
 * 
 * Use {@link ncurses_wborder} for borders around subwindows!
 * 
 * @param int $left
 * @param int $right
 * @param int $top
 * @param int $bottom
 * @param int $tl_corner Top left corner
 * @param int $tr_corner Top right corner
 * @param int $bl_corner Bottom left corner
 * @param int $br_corner Bottom right corner
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_border($left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner){}

/**
 * @param resource $panel
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_bottom_panel($panel){}

/**
 * Checks whether the terminal has color capabilities and whether the
 * programmer can change color definitions using {@link
 * ncurses_init_color}. ncurses must be initialized using {@link
 * ncurses_init} before calling this function.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_can_change_color(){}

/**
 * Disables line buffering and character processing (interrupt and flow
 * control characters are unaffected), making characters typed by the
 * user immediately available to the program.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_cbreak(){}

/**
 * Clears the screen completely without setting blanks.
 * 
 * Note: {@link ncurses_clear} clears the screen without setting blanks,
 * which have the current background rendition. To clear screen with
 * blanks, use {@link ncurses_erase}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_clear(){}

/**
 * Erases all lines from cursor to end of screen and creates blanks.
 * Blanks created by {@link ncurses_clrtobot} have the current background
 * rendition.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_clrtobot(){}

/**
 * Erases the current line from cursor position to the end. Blanks
 * created by {@link ncurses_clrtoeol} have the current background
 * rendition.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_clrtoeol(){}

/**
 * Retrieves the red, green, and blue components for the given color
 * definition. Terminal color capabilities must be initialized with
 * {@link ncurses_start_color} prior to calling this function.
 * 
 * @param int $color The number of the color to retrieve information
 *   for. May be one of the pre-defined color constants.
 * @param int $r A reference to which to return the red component of
 *   the color. The value returned to the reference will be between 0 and
 *   1000.
 * @param int $g A reference to which to return the green component of
 *   the color. The value returned to the reference will be between 0 and
 *   1000.
 * @param int $b A reference to which to return the blue component of
 *   the color. The value returned to the reference will be between 0 and
 *   1000.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_color_content($color, &$r, &$g, &$b){}

/**
 * Sets the active foreground and background colors. Any characters
 * written after this function is invoked will have these colors. This
 * function requires terminal colors to be supported and initialized
 * using {@link ncurses_start_color} beforehand.
 * 
 * ncurses uses color pairs to specify both foreground and background
 * colors. Use {@link ncurses_init_pair} to define a color pair.
 * 
 * @param int $pair The color pair from which to get the foreground and
 *   background colors to set as the active colors.
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_color_set($pair){}

/**
 * @param int $visibility
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_curs_set($visibility){}

/**
 * @param string $definition
 * @param int $keycode
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_define_key($definition, $keycode){}

/**
 * Saves the current terminal modes for program (in curses) for use by
 * {@link ncurses_reset_prog_mode}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_def_prog_mode(){}

/**
 * Saves the current terminal modes for shell (not in curses) for use by
 * {@link ncurses_reset_shell_mode}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_def_shell_mode(){}

/**
 * @param int $milliseconds
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_delay_output($milliseconds){}

/**
 * Deletes the character under the cursor. All characters to the right of
 * the cursor on the same line are moved to the left one position and the
 * last character on the line is filled with a blank. The cursor position
 * does not change.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_delch(){}

/**
 * Deletes the current line under cursorposition. All lines below the
 * current line are moved up one line. The bottom line of window is
 * cleared. Cursor position does not change.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_deleteln(){}

/**
 * @param resource $window
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_delwin($window){}

/**
 * @param resource $panel
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_del_panel($panel){}

/**
 * Compares the virtual screen to the physical screen and updates the
 * physical screen. This way is more effective than using multiple
 * refresh calls.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_doupdate(){}

/**
 * Enables echo mode. All characters typed by user are echoed by {@link
 * ncurses_getch}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_echo(){}

/**
 * @param int $character
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_echochar($character){}

/**
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_end(){}

/**
 * Fills the terminal screen with blanks.
 * 
 * Created blanks have the current background rendition, set by {@link
 * ncurses_bkgd}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_erase(){}

/**
 * Returns the current erase character.
 * 
 * @return string
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_erasechar(){}

/**
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_filter(){}

/**
 * Flashes the screen, and if its not possible, sends an audible alert
 * (bell).
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_flash(){}

/**
 * Throws away any typeahead that has been typed and has not yet been
 * read by your program.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_flushinp(){}

/**
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_getch(){}

/**
 * Gets the horizontal and vertical size of the given {@link window} into
 * the given variables.
 * 
 * Variables must be passed as reference, so they are updated when the
 * user changes the terminal size.
 * 
 * @param resource $window The measured window
 * @param int $y This will be set to the window width
 * @param int $x This will be set to the window height
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_getmaxyx($window, &$y, &$x){}

/**
 * {@link ncurses_getmouse} reads mouse event out of queue.
 * 
 * @param array $mevent Event options will be delivered in this
 *   parameter which has to be an array, passed by reference (see example
 *   below). On success an associative array with following keys will be
 *   delivered: "id" : Id to distinguish multiple devices "x" : screen
 *   relative x-position in character cells "y" : screen relative
 *   y-position in character cells "z" : currently not supported "mmask"
 *   : Mouse action
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_getmouse(&$mevent){}

/**
 * @param resource $window
 * @param int $y
 * @param int $x
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_getyx($window, &$y, &$x){}

/**
 * @param int $tenth
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_halfdelay($tenth){}

/**
 * Checks whether the terminal has color capabilities. This function can
 * be used to write terminal-independent programs. ncurses must be
 * initialized using {@link ncurses_init} before calling this function.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_has_colors(){}

/**
 * Checks whether the terminal has insert and delete capabilities.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_has_ic(){}

/**
 * Checks whether the terminal has insert- and delete-line-capabilities.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_has_il(){}

/**
 * @param int $keycode
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_has_key($keycode){}

/**
 * @param resource $panel
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_hide_panel($panel){}

/**
 * @param int $charattr
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_hline($charattr, $n){}

/**
 * Returns the character from the current position.
 * 
 * @return string
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_inch(){}

/**
 * Initializes the ncurses interface. This function must be used before
 * any other ncurses function call.
 * 
 * Note that {@link ncurses_end} must be called before exiting from the
 * program, or the terminal will not be restored to its proper non-visual
 * mode.
 * 
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_init(){}

/**
 * Defines or redefines the given color. When this function is called,
 * all occurrences of the given color on the screen, if any, immediately
 * change to the new definition.
 * 
 * Color capabilities must be supported by the terminal and initialized
 * using {@link ncurses_start_color} prior to calling this function. In
 * addition, the terminal must have color changing capabilities; use
 * {@link ncurses_can_change_color} to check for this.
 * 
 * @param int $color The identification number of the color to
 *   redefine. It may be one of the default color constants.
 * @param int $r A color value, between 0 and 1000, for the red
 *   component.
 * @param int $g A color value, between 0 and 1000, for the green
 *   component.
 * @param int $b A color value, between 0 and 1000, for the blue
 *   component.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_init_color($color, $r, $g, $b){}

/**
 * Defines or redefines the given color pair to have the given foreground
 * and background colors. If the color pair was previously initialized,
 * the screen is refreshed and all occurrences of it are changed to
 * reflect the new definition.
 * 
 * Color capabilities must be initialized using {@link
 * ncurses_start_color} before calling this function. The first color
 * pair (color pair 0) is assumed to be white on black by default, but
 * can be changed using {@link ncurses_assume_default_colors}.
 * 
 * @param int $pair The number of the color pair to define.
 * @param int $fg The foreground color for the color pair. May be one
 *   of the pre-defined colors or one defined by {@link
 *   ncurses_init_color} if the terminal has color changing capabilities.
 * @param int $bg The background color for the color pair. May be one
 *   of the pre-defined colors or one defined by {@link
 *   ncurses_init_color} if the terminal has color changing capabilities.
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_init_pair($pair, $fg, $bg){}

/**
 * @param int $character
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_insch($character){}

/**
 * @param int $count
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_insdelln($count){}

/**
 * Inserts a new line above the current line. The bottom line will be
 * lost.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_insertln(){}

/**
 * @param string $text
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_insstr($text){}

/**
 * Reads a string from the terminal screen and returns the number of
 * characters read from the current character position until end of line.
 * 
 * @param string $buffer The characters. Attributes will be stripped.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_instr(&$buffer){}

/**
 * Checks if ncurses is in endwin mode.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_isendwin(){}

/**
 * @param int $keycode
 * @param bool $enable
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_keyok($keycode, $enable){}

/**
 * @param resource $window
 * @param bool $bf
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_keypad($window, $bf){}

/**
 * Returns the current line kill character.
 * 
 * @return string
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_killchar(){}

/**
 * Returns a verbose description of the terminal.
 * 
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_longname(){}

/**
 * @param resource $window
 * @param bool $_8bit
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_meta($window, $_8bit){}

/**
 * @param int $milliseconds
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mouseinterval($milliseconds){}

/**
 * Sets mouse events to be reported. By default no mouse events will be
 * reported.
 * 
 * Mouse events are represented by NCURSES_KEY_MOUSE in the {@link
 * ncurses_wgetch} input stream. To read the event data and pop the event
 * of queue, call {@link ncurses_getmouse}.
 * 
 * @param int $newmask Mouse mask options can be set with the following
 *   predefined constants: NCURSES_BUTTON1_PRESSED
 *   NCURSES_BUTTON1_RELEASED NCURSES_BUTTON1_CLICKED
 *   NCURSES_BUTTON1_DOUBLE_CLICKED NCURSES_BUTTON1_TRIPLE_CLICKED
 *   NCURSES_BUTTON2_PRESSED NCURSES_BUTTON2_RELEASED
 *   NCURSES_BUTTON2_CLICKED NCURSES_BUTTON2_DOUBLE_CLICKED
 *   NCURSES_BUTTON2_TRIPLE_CLICKED NCURSES_BUTTON3_PRESSED
 *   NCURSES_BUTTON3_RELEASED NCURSES_BUTTON3_CLICKED
 *   NCURSES_BUTTON3_DOUBLE_CLICKED NCURSES_BUTTON3_TRIPLE_CLICKED
 *   NCURSES_BUTTON4_PRESSED NCURSES_BUTTON4_RELEASED
 *   NCURSES_BUTTON4_CLICKED NCURSES_BUTTON4_DOUBLE_CLICKED
 *   NCURSES_BUTTON4_TRIPLE_CLICKED NCURSES_BUTTON_SHIFT>
 *   NCURSES_BUTTON_CTRL NCURSES_BUTTON_ALT NCURSES_ALL_MOUSE_EVENTS
 *   NCURSES_REPORT_MOUSE_POSITION As a side effect, setting a zero
 *   mousemask in {@link newmask} turns off the mouse pointer. Setting a
 *   non zero value turns mouse pointer on.
 * @param int $oldmask This will be set to the previous value of the
 *   mouse event mask.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mousemask($newmask, &$oldmask){}

/**
 * @param int $y
 * @param int $x
 * @param bool $toscreen
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mouse_trafo(&$y, &$x, $toscreen){}

/**
 * @param int $y
 * @param int $x
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_move($y, $x){}

/**
 * @param resource $panel
 * @param int $startx
 * @param int $starty
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_move_panel($panel, $startx, $starty){}

/**
 * @param int $y
 * @param int $x
 * @param int $c
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvaddch($y, $x, $c){}

/**
 * @param int $y
 * @param int $x
 * @param string $s
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvaddchnstr($y, $x, $s, $n){}

/**
 * @param int $y
 * @param int $x
 * @param string $s
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvaddchstr($y, $x, $s){}

/**
 * @param int $y
 * @param int $x
 * @param string $s
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvaddnstr($y, $x, $s, $n){}

/**
 * @param int $y
 * @param int $x
 * @param string $s
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvaddstr($y, $x, $s){}

/**
 * @param int $old_y
 * @param int $old_x
 * @param int $new_y
 * @param int $new_x
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvcur($old_y, $old_x, $new_y, $new_x){}

/**
 * @param int $y
 * @param int $x
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvdelch($y, $x){}

/**
 * @param int $y
 * @param int $x
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvgetch($y, $x){}

/**
 * @param int $y
 * @param int $x
 * @param int $attrchar
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvhline($y, $x, $attrchar, $n){}

/**
 * @param int $y
 * @param int $x
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvinch($y, $x){}

/**
 * @param int $y
 * @param int $x
 * @param int $attrchar
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvvline($y, $x, $attrchar, $n){}

/**
 * @param resource $window
 * @param int $y
 * @param int $x
 * @param string $text
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_mvwaddstr($window, $y, $x, $text){}

/**
 * @param int $milliseconds
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_napms($milliseconds){}

/**
 * @param int $rows
 * @param int $cols
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_newpad($rows, $cols){}

/**
 * Creates a new window to draw elements in.
 * 
 * When creating additional windows, remember to use {@link
 * ncurses_getmaxyx} to check for available space, as terminal size is
 * individual and may vary.
 * 
 * @param int $rows Number of rows
 * @param int $cols Number of columns
 * @param int $y y-coordinate of the origin
 * @param int $x x-coordinate of the origin
 * @return resource
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_newwin($rows, $cols, $y, $x){}

/**
 * @param resource $window
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_new_panel($window){}

/**
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_nl(){}

/**
 * Returns terminal to normal (cooked) mode. Initially the terminal may
 * or may not in cbreak mode as the mode is inherited. Therefore a
 * program should call {@link ncurses_cbreak} and {@link
 * ncurses_nocbreak} explicitly.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_nocbreak(){}

/**
 * Prevents echoing of user typed characters.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_noecho(){}

/**
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_nonl(){}

/**
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_noqiflush(){}

/**
 * Switches the terminal out of raw mode. Raw mode is similar to cbreak
 * mode, in that characters typed are immediately passed through to the
 * user program. The differences that are that in raw mode, the
 * interrupt, quit, suspend and flow control characters are all passed
 * through uninterpreted, instead of generating a signal.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_noraw(){}

/**
 * Retrieves the foreground and background colors that constitute the
 * given color pair. Terminal color capabilities must be initialized with
 * {@link ncurses_start_color} prior to calling this function.
 * 
 * @param int $pair The number of the color pair to retrieve
 *   information for.
 * @param int $f A reference to which to return the foreground color of
 *   the color pair. The information returned will be a color number
 *   referring to one of the pre-defined colors or a color defined
 *   previously by {@link ncurses_init_color} if the terminal supports
 *   color changing.
 * @param int $b A reference to which to return the background color of
 *   the color pair. The information returned will be a color number
 *   referring to one of the pre-defined colors or a color defined
 *   previously by {@link ncurses_init_color} if the terminal supports
 *   color changing.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_pair_content($pair, &$f, &$b){}

/**
 * @param resource $panel
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_panel_above($panel){}

/**
 * @param resource $panel
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_panel_below($panel){}

/**
 * @param resource $panel
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_panel_window($panel){}

/**
 * @param resource $pad
 * @param int $pminrow
 * @param int $pmincol
 * @param int $sminrow
 * @param int $smincol
 * @param int $smaxrow
 * @param int $smaxcol
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_pnoutrefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol){}

/**
 * @param resource $pad
 * @param int $pminrow
 * @param int $pmincol
 * @param int $sminrow
 * @param int $smincol
 * @param int $smaxrow
 * @param int $smaxcol
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_prefresh($pad, $pminrow, $pmincol, $sminrow, $smincol, $smaxrow, $smaxcol){}

/**
 * @param string $text
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_putp($text){}

/**
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_qiflush(){}

/**
 * Places the terminal in raw mode. Raw mode is similar to cbreak mode,
 * in that characters typed are immediately passed through to the user
 * program. The differences that are that in raw mode, the interrupt,
 * quit, suspend and flow control characters are all passed through
 * uninterpreted, instead of generating a signal.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_raw(){}

/**
 * @param int $ch
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_refresh($ch){}

/**
 * @param resource $panel
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_replace_panel($panel, $window){}

/**
 * Restores the terminal state, which was previously saved by calling
 * {@link ncurses_savetty}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_resetty(){}

/**
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_reset_prog_mode(){}

/**
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_reset_shell_mode(){}

/**
 * Saves the current terminal state. The saved terminal state can be
 * restored with {@link ncurses_resetty}.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_savetty(){}

/**
 * @param int $count
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_scrl($count){}

/**
 * @param string $filename
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_scr_dump($filename){}

/**
 * @param string $filename
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_scr_init($filename){}

/**
 * @param string $filename
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_scr_restore($filename){}

/**
 * @param string $filename
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_scr_set($filename){}

/**
 * @param resource $panel
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_show_panel($panel){}

/**
 * Returns the current soft label key attribute.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_attr(){}

/**
 * @param int $intarg
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_attroff($intarg){}

/**
 * @param int $intarg
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_attron($intarg){}

/**
 * @param int $intarg
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_attrset($intarg){}

/**
 * The function {@link ncurses_slk_clear} clears soft label keys from
 * screen.
 * 
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_clear(){}

/**
 * @param int $intarg
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_color($intarg){}

/**
 * Initializes soft label key functions
 * 
 * This function must be called before {@link ncurses_init} or {@link
 * ncurses_newwin} is called.
 * 
 * @param int $format If {@link ncurses_init} eventually uses a line
 *   from stdscr to emulate the soft labels, then this parameter
 *   determines how the labels are arranged of the screen. 0 indicates a
 *   3-2-3 arrangement of the labels, 1 indicates a 4-4 arrangement and 2
 *   indicates the PC like 4-4-4 mode, but in addition an index line will
 *   be created.
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_init($format){}

/**
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_noutrefresh(){}

/**
 * Copies soft label keys from virtual screen to physical screen.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_refresh(){}

/**
 * Restores the soft label keys after {@link ncurses_slk_clear} has been
 * performed.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_restore(){}

/**
 * @param int $labelnr
 * @param string $label
 * @param int $format
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_set($labelnr, $label, $format){}

/**
 * Forces all the soft labels to be output the next time a {@link
 * ncurses_slk_noutrefresh} is performed.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_slk_touch(){}

/**
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_standend(){}

/**
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_standout(){}

/**
 * Initializes color functionality in ncurses. This function must be
 * called before any color manipulation functions are called and after
 * {@link ncurses_init} is called. It is good practice to call this
 * function right after {@link ncurses_init}.
 * 
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_start_color(){}

/**
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_termattrs(){}

/**
 * Returns terminals shortname.
 * 
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_termname(){}

/**
 * @param int $millisec
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_timeout($millisec){}

/**
 * @param resource $panel
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_top_panel($panel){}

/**
 * @param int $fd
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_typeahead($fd){}

/**
 * @param int $keycode
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_ungetch($keycode){}

/**
 * Pushes a KEY_MOUSE event onto the unput queue and associates with this
 * event the given state sata and screen-relative character cell
 * coordinates, specified in {@link mevent}.
 * 
 * @param array $mevent An associative array specifying the event
 *   options: "id" : Id to distinguish multiple devices "x" : screen
 *   relative x-position in character cells "y" : screen relative
 *   y-position in character cells "z" : currently not supported "mmask"
 *   : Mouse action
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_ungetmouse($mevent){}

/**
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_update_panels(){}

/**
 * @return bool
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_use_default_colors(){}

/**
 * @param bool $flag
 * @return void
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_use_env($flag){}

/**
 * @param bool $flag
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_use_extended_names($flag){}

/**
 * @param int $intarg
 * @return int
 * @since PHP 4 >= 4.0.7, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_vidattr($intarg){}

/**
 * @param int $charattr
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_vline($charattr, $n){}

/**
 * @param resource $window
 * @param int $ch
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_waddch($window, $ch){}

/**
 * @param resource $window
 * @param string $str
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_waddstr($window, $str, $n){}

/**
 * @param resource $window
 * @param int $attrs
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wattroff($window, $attrs){}

/**
 * @param resource $window
 * @param int $attrs
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wattron($window, $attrs){}

/**
 * @param resource $window
 * @param int $attrs
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wattrset($window, $attrs){}

/**
 * Draws the specified lines and corners around the passed {@link
 * window}.
 * 
 * Use {@link ncurses_border} for borders around the main window.
 * 
 * @param resource $window The window on which we operate
 * @param int $left
 * @param int $right
 * @param int $top
 * @param int $bottom
 * @param int $tl_corner Top left corner
 * @param int $tr_corner Top right corner
 * @param int $bl_corner Bottom left corner
 * @param int $br_corner Bottom right corner
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wborder($window, $left, $right, $top, $bottom, $tl_corner, $tr_corner, $bl_corner, $br_corner){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wclear($window){}

/**
 * @param resource $window
 * @param int $color_pair
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wcolor_set($window, $color_pair){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_werase($window){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wgetch($window){}

/**
 * @param resource $window
 * @param int $charattr
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_whline($window, $charattr, $n){}

/**
 * @param resource $window
 * @param int $y
 * @param int $x
 * @param bool $toscreen
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wmouse_trafo($window, &$y, &$x, $toscreen){}

/**
 * @param resource $window
 * @param int $y
 * @param int $x
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wmove($window, $y, $x){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wnoutrefresh($window){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wrefresh($window){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wstandend($window){}

/**
 * @param resource $window
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wstandout($window){}

/**
 * @param resource $window
 * @param int $charattr
 * @param int $n
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5 < 5.3.0, PECL ncurses >= 1.0.0
 **/
function ncurses_wvline($window, $charattr, $n){}

/**
 * This function sends a beep to the terminal.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_bell(){}

/**
 * Creates a new button.
 * 
 * @param int $left X-coordinate of the button.
 * @param int $top Y-coordinate of the button.
 * @param string $text The text which should be displayed in the
 *   button.
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_button($left, $top, $text){}

/**
 * This function returns a grid containing the buttons created.
 * 
 * @param array $buttons
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_button_bar(&$buttons){}

/**
 * Open a centered window of the specified size.
 * 
 * @param int $width Window width
 * @param int $height Window height
 * @param string $title Window title
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_centered_window($width, $height, $title){}

/**
 * @param int $left
 * @param int $top
 * @param string $text
 * @param string $def_value
 * @param string $seq
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_checkbox($left, $top, $text, $def_value, $seq){}

/**
 * This function returns the character in the sequence which indicates
 * the current value of the checkbox.
 * 
 * @param resource $checkbox
 * @return string
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_get_value($checkbox){}

/**
 * This function allows to set various flags on checkbox resource.
 * 
 * @param resource $checkbox
 * @param int $flags
 * @param int $sense
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_set_flags($checkbox, $flags, $sense){}

/**
 * This function allows to set the current value of the checkbox
 * resource.
 * 
 * @param resource $checkbox
 * @param string $value
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_set_value($checkbox, $value){}

/**
 * @param int $left
 * @param int $top
 * @param int $height
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree($left, $top, $height, $flags){}

/**
 * This function allows to add new item to the checkbox tree.
 * 
 * @param resource $checkboxtree
 * @param string $text
 * @param mixed $data
 * @param int $flags
 * @param int $index
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_add_item($checkboxtree, $text, $data, $flags, $index){}

/**
 * Finds an item in the checkbox tree by item's data.
 * 
 * @param resource $checkboxtree
 * @param mixed $data
 * @return array
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_find_item($checkboxtree, $data){}

/**
 * This method returns checkbox tree selected tem.
 * 
 * @param resource $checkboxtree
 * @return mixed
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_get_current($checkboxtree){}

/**
 * @param resource $checkboxtree
 * @param mixed $data
 * @return string
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_get_entry_value($checkboxtree, $data){}

/**
 * @param resource $checkboxtree
 * @param string $seqnum
 * @return array
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_get_multi_selection($checkboxtree, $seqnum){}

/**
 * @param resource $checkboxtree
 * @return array
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_get_selection($checkboxtree){}

/**
 * @param int $left
 * @param int $top
 * @param int $height
 * @param string $seq
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_multi($left, $top, $height, $seq, $flags){}

/**
 * @param resource $checkboxtree
 * @param mixed $data
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_set_current($checkboxtree, $data){}

/**
 * @param resource $checkboxtree
 * @param mixed $data
 * @param string $text
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_set_entry($checkboxtree, $data, $text){}

/**
 * @param resource $checkboxtree
 * @param mixed $data
 * @param string $value
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_set_entry_value($checkboxtree, $data, $value){}

/**
 * @param resource $checkbox_tree
 * @param int $width
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_checkbox_tree_set_width($checkbox_tree, $width){}

/**
 * Discards the contents of the terminal's input buffer without waiting
 * for additional input.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_clear_key_buffer(){}

/**
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_cls(){}

/**
 * @param int $left
 * @param int $top
 * @param string $text
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_compact_button($left, $top, $text){}

/**
 * @param resource $component
 * @param mixed $func_name
 * @param mixed $data
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_component_add_callback($component, $func_name, $data){}

/**
 * @param resource $component
 * @param bool $takes_focus
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_component_takes_focus($component, $takes_focus){}

/**
 * @param int $cols
 * @param int $rows
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_create_grid($cols, $rows){}

/**
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_cursor_off(){}

/**
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_cursor_on(){}

/**
 * @param int $microseconds
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_delay($microseconds){}

/**
 * @param resource $form
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_draw_form($form){}

/**
 * Displays the string text at the position indicated.
 * 
 * @param int $left Column number
 * @param int $top Line number
 * @param string $text Text to display.
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_draw_root_text($left, $top, $text){}

/**
 * @param int $left
 * @param int $top
 * @param int $width
 * @param string $init_value
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_entry($left, $top, $width, $init_value, $flags){}

/**
 * @param resource $entry
 * @return string
 * @since PECL newt >= 0.1
 **/
function newt_entry_get_value($entry){}

/**
 * @param resource $entry
 * @param string $value
 * @param bool $cursor_at_end
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_entry_set($entry, $value, $cursor_at_end){}

/**
 * @param resource $entry
 * @param callback $filter
 * @param mixed $data
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_entry_set_filter($entry, $filter, $data){}

/**
 * @param resource $entry
 * @param int $flags
 * @param int $sense
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_entry_set_flags($entry, $flags, $sense){}

/**
 * Uninitializes newt interface. This function be called, when program is
 * ready to exit.
 * 
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_finished(){}

/**
 * Create a new form.
 * 
 * @param resource $vert_bar Vertical scrollbar which should be
 *   associated with the form
 * @param string $help Help text string
 * @param int $flags Various flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_form($vert_bar, $help, $flags){}

/**
 * Adds a single component to the {@link form}.
 * 
 * @param resource $form Form to which component will be added
 * @param resource $component Component to add to the form
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_add_component($form, $component){}

/**
 * Adds several components to the {@link form}.
 * 
 * @param resource $form Form to which components will be added
 * @param array $components Array of components to add to the form
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_add_components($form, $components){}

/**
 * @param resource $form
 * @param int $key
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_add_hot_key($form, $key){}

/**
 * This function frees the memory resources used by the form and all of
 * the components which have been added to the form (including those
 * components which are on subforms). Once a form has been destroyed,
 * none of the form's components can be used.
 * 
 * @param resource $form Form component, which is going to be destroyed
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_destroy($form){}

/**
 * @param resource $form
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_form_get_current($form){}

/**
 * This function runs the form passed to it.
 * 
 * @param resource $form Form component
 * @param array $exit_struct Array, used for returning information
 *   after running the form component. Keys and values are described in
 *   the following table: Form Exit Structure Index Key Value Type
 *   Description reason integer The reason, why the form has been exited.
 *   Possible values are defined here. watch resource Resource link,
 *   specified in {@link newt_form_watch_fd} key integer Hotkey component
 *   resource Component, which caused the form to exit
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_run($form, &$exit_struct){}

/**
 * @param resource $from
 * @param int $background
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_set_background($from, $background){}

/**
 * @param resource $form
 * @param int $height
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_set_height($form, $height){}

/**
 * @param resource $form
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_set_size($form){}

/**
 * @param resource $form
 * @param int $milliseconds
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_set_timer($form, $milliseconds){}

/**
 * @param resource $form
 * @param int $width
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_set_width($form, $width){}

/**
 * @param resource $form
 * @param resource $stream
 * @param int $flags
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_form_watch_fd($form, $stream, $flags){}

/**
 * Fills in the passed references with the current size of the terminal.
 * 
 * @param int $cols Number of columns in the terminal
 * @param int $rows Number of rows in the terminal
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_get_screen_size(&$cols, &$rows){}

/**
 * @param resource $grid
 * @param resource $form
 * @param bool $recurse
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_add_components_to_form($grid, $form, $recurse){}

/**
 * @param resource $text
 * @param resource $middle
 * @param resource $buttons
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_grid_basic_window($text, $middle, $buttons){}

/**
 * @param resource $grid
 * @param bool $recurse
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_free($grid, $recurse){}

/**
 * @param resouce $grid
 * @param int $width
 * @param int $height
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_get_size($grid, &$width, &$height){}

/**
 * @param int $element1_type
 * @param resource $element1
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_grid_h_close_stacked($element1_type, $element1){}

/**
 * @param int $element1_type
 * @param resource $element1
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_grid_h_stacked($element1_type, $element1){}

/**
 * @param resource $grid
 * @param int $left
 * @param int $top
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_place($grid, $left, $top){}

/**
 * @param resource $grid
 * @param int $col
 * @param int $row
 * @param int $type
 * @param resource $val
 * @param int $pad_left
 * @param int $pad_top
 * @param int $pad_right
 * @param int $pad_bottom
 * @param int $anchor
 * @param int $flags
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_set_field($grid, $col, $row, $type, $val, $pad_left, $pad_top, $pad_right, $pad_bottom, $anchor, $flags){}

/**
 * @param resource $text
 * @param resource $middle
 * @param resource $buttons
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_grid_simple_window($text, $middle, $buttons){}

/**
 * @param int $element1_type
 * @param resource $element1
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_grid_v_close_stacked($element1_type, $element1){}

/**
 * @param int $element1_type
 * @param resource $element1
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_grid_v_stacked($element1_type, $element1){}

/**
 * @param resource $grid
 * @param string $title
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_wrapped_window($grid, $title){}

/**
 * @param resource $grid
 * @param string $title
 * @param int $left
 * @param int $top
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_grid_wrapped_window_at($grid, $title, $left, $top){}

/**
 * Initializes the newt interface. This function must be called before
 * any other newt function.
 * 
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_init(){}

/**
 * @param int $left
 * @param int $top
 * @param string $text
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_label($left, $top, $text){}

/**
 * @param resource $label
 * @param string $text
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_label_set_text($label, $text){}

/**
 * @param int $left
 * @param int $top
 * @param int $height
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_listbox($left, $top, $height, $flags){}

/**
 * @param resource $listbox
 * @param string $text
 * @param mixed $data
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_append_entry($listbox, $text, $data){}

/**
 * @param resource $listobx
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_clear($listobx){}

/**
 * @param resource $listbox
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_clear_selection($listbox){}

/**
 * @param resource $listbox
 * @param mixed $key
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_delete_entry($listbox, $key){}

/**
 * @param resource $listbox
 * @return string
 * @since PECL newt >= 0.1
 **/
function newt_listbox_get_current($listbox){}

/**
 * @param resource $listbox
 * @return array
 * @since PECL newt >= 0.1
 **/
function newt_listbox_get_selection($listbox){}

/**
 * @param resource $listbox
 * @param string $text
 * @param mixed $data
 * @param mixed $key
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_insert_entry($listbox, $text, $data, $key){}

/**
 * @param resource $listbox
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_listbox_item_count($listbox){}

/**
 * @param resource $listbox
 * @param mixed $key
 * @param int $sense
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_select_item($listbox, $key, $sense){}

/**
 * @param resource $listbox
 * @param int $num
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_set_current($listbox, $num){}

/**
 * @param resource $listbox
 * @param mixed $key
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_set_current_by_key($listbox, $key){}

/**
 * @param resource $listbox
 * @param int $num
 * @param mixed $data
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_set_data($listbox, $num, $data){}

/**
 * @param resource $listbox
 * @param int $num
 * @param string $text
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_set_entry($listbox, $num, $text){}

/**
 * @param resource $listbox
 * @param int $width
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listbox_set_width($listbox, $width){}

/**
 * @param int $left
 * @param int $top
 * @param string $text
 * @param bool $is_default
 * @param resouce $prev_item
 * @param mixed $data
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_listitem($left, $top, $text, $is_default, $prev_item, $data, $flags){}

/**
 * @param resource $item
 * @return mixed
 * @since PECL newt >= 0.1
 **/
function newt_listitem_get_data($item){}

/**
 * @param resource $item
 * @param string $text
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_listitem_set($item, $text){}

/**
 * Open a window of the specified size and position.
 * 
 * @param int $left Location of the upper left-hand corner of the
 *   window (column number)
 * @param int $top Location of the upper left-hand corner of the window
 *   (row number)
 * @param int $width Window width
 * @param int $height Window height
 * @param string $title Window title
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_open_window($left, $top, $width, $height, $title){}

/**
 * Replaces the current help line with the one from the stack.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_pop_help_line(){}

/**
 * Removes the top window from the display, and redraws the display areas
 * which the window overwrote.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_pop_window(){}

/**
 * Saves the current help line on a stack, and displays the new line.
 * 
 * @param string $text New help text message
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_push_help_line($text){}

/**
 * @param int $left
 * @param int $top
 * @param string $text
 * @param bool $is_default
 * @param resource $prev_button
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_radiobutton($left, $top, $text, $is_default, $prev_button){}

/**
 * @param resource $set_member
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_radio_get_current($set_member){}

/**
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_redraw_help_line(){}

/**
 * @param string $text
 * @param int $width
 * @param int $flex_down
 * @param int $flex_up
 * @param int $actual_width
 * @param int $actual_height
 * @return string
 * @since PECL newt >= 0.1
 **/
function newt_reflow_text($text, $width, $flex_down, $flex_up, &$actual_width, &$actual_height){}

/**
 * To increase performance, newt only updates the display when it needs
 * to, not when the program tells it to write to the terminal.
 * Applications can force newt to immediately update modified portions of
 * the screen by calling this function.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_refresh(){}

/**
 * @param bool $redraw
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_resize_screen($redraw){}

/**
 * Resume using the newt interface after calling {@link newt_suspend}.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_resume(){}

/**
 * This function runs the form passed to it.
 * 
 * @param resource $form Form component
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_run_form($form){}

/**
 * @param int $left
 * @param int $top
 * @param int $width
 * @param int $full_value
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_scale($left, $top, $width, $full_value){}

/**
 * @param resource $scale
 * @param int $amount
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_scale_set($scale, $amount){}

/**
 * @param resource $scrollbar
 * @param int $where
 * @param int $total
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_scrollbar_set($scrollbar, $where, $total){}

/**
 * @param mixed $function
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_set_help_callback($function){}

/**
 * Set a callback function which gets invoked when user presses the
 * suspend key (normally ^Z). If no suspend callback is registered, the
 * suspend keystroke is ignored.
 * 
 * @param callback $function A callback function, which accepts one
 *   argument: data
 * @param mixed $data This data is been passed to the callback function
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_set_suspend_callback($function, $data){}

/**
 * Tells newt to return the terminal to its initial state. Once this is
 * done, the application can suspend itself (by sending itself a SIGTSTP,
 * fork a child program, or do whatever else it likes).
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_suspend(){}

/**
 * @param int $left
 * @param int $top
 * @param int $width
 * @param int $height
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_textbox($left, $top, $width, $height, $flags){}

/**
 * @param resource $textbox
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_textbox_get_num_lines($textbox){}

/**
 * @param int $left
 * @param int $top
 * @param char $text
 * @param int $width
 * @param int $flex_down
 * @param int $flex_up
 * @param int $flags
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_textbox_reflowed($left, $top, $text, $width, $flex_down, $flex_up, $flags){}

/**
 * @param resource $textbox
 * @param int $height
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_textbox_set_height($textbox, $height){}

/**
 * @param resource $textbox
 * @param string $text
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_textbox_set_text($textbox, $text){}

/**
 * @param int $left
 * @param int $top
 * @param int $height
 * @param int $normal_colorset
 * @param int $thumb_colorset
 * @return resource
 * @since PECL newt >= 0.1
 **/
function newt_vertical_scrollbar($left, $top, $height, $normal_colorset, $thumb_colorset){}

/**
 * This function doesn't return until a key has been pressed. The
 * keystroke is then ignored. If a key is already in the terminal's
 * buffer, this function discards a keystroke and returns immediately.
 * 
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_wait_for_key(){}

/**
 * @param string $title
 * @param string $button1_text
 * @param string $button2_text
 * @param string $format
 * @param mixed $args
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_win_choice($title, $button1_text, $button2_text, $format, $args){}

/**
 * @param string $title
 * @param string $text
 * @param int $suggested_width
 * @param int $flex_down
 * @param int $flex_up
 * @param int $data_width
 * @param array $items
 * @param string $button1
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_win_entries($title, $text, $suggested_width, $flex_down, $flex_up, $data_width, &$items, $button1){}

/**
 * @param string $title
 * @param string $text
 * @param int $suggestedWidth
 * @param int $flexDown
 * @param int $flexUp
 * @param int $maxListHeight
 * @param array $items
 * @param int $listItem
 * @param string $button1
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_win_menu($title, $text, $suggestedWidth, $flexDown, $flexUp, $maxListHeight, $items, &$listItem, $button1){}

/**
 * @param string $title
 * @param string $button_text
 * @param string $format
 * @param mixed $args
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_win_message($title, $button_text, $format, $args){}

/**
 * @param string $title
 * @param string $button_text
 * @param string $format
 * @param array $args
 * @return void
 * @since PECL newt >= 0.1
 **/
function newt_win_messagev($title, $button_text, $format, $args){}

/**
 * @param string $title Its description
 * @param string $button1_text Its description
 * @param string $button2_text Its description
 * @param string $button3_text Its description
 * @param string $format Its description
 * @param mixed $args Its description
 * @return int
 * @since PECL newt >= 0.1
 **/
function newt_win_ternary($title, $button1_text, $button2_text, $button3_text, $format, $args){}

/**
 * {@link next} behaves like {@link current}, with one difference. It
 * advances the internal array pointer one place forward before returning
 * the element value. That means it returns the next array value and
 * advances the internal array pointer by one.
 * 
 * @param array $array The array being affected.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function next(&$array){}

/**
 * The plural version of {@link gettext}. Some languages have more than
 * one form for plural messages dependent on the count.
 * 
 * @param string $msgid1
 * @param string $msgid2
 * @param int $n
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ngettext($msgid1, $msgid2, $n){}

/**
 * Returns {@link string} with '<br />' or '<br>' inserted before all
 * newlines.
 * 
 * @param string $string The input string.
 * @param bool $is_xhtml Whenever to use XHTML compatible line breaks
 *   or not.
 * @return string
 * @since PHP 4, PHP 5
 **/
function nl2br($string, $is_xhtml){}

/**
 * {@link nl_langinfo} is used to access individual elements of the
 * locale categories. Unlike {@link localeconv}, which returns all of the
 * elements, {@link nl_langinfo} allows you to select any specific
 * element.
 * 
 * @param int $item {@link item} may be an integer value of the element
 *   or the constant name of the element. The following is a list of
 *   constant names for {@link item} that may be used and their
 *   description. Some of these constants may not be defined or hold no
 *   value for certain locales. nl_langinfo Constants Constant
 *   Description LC_TIME Category Constants ABDAY_(1-7) Abbreviated name
 *   of n-th day of the week. DAY_(1-7) Name of the n-th day of the week
 *   (DAY_1 = Sunday). ABMON_(1-12) Abbreviated name of the n-th month of
 *   the year. MON_(1-12) Name of the n-th month of the year. AM_STR
 *   String for Ante meridian. PM_STR String for Post meridian. D_T_FMT
 *   String that can be used as the format string for {@link strftime} to
 *   represent time and date. D_FMT String that can be used as the format
 *   string for {@link strftime} to represent date. T_FMT String that can
 *   be used as the format string for {@link strftime} to represent time.
 *   T_FMT_AMPM String that can be used as the format string for {@link
 *   strftime} to represent time in 12-hour format with ante/post
 *   meridian. ERA Alternate era. ERA_YEAR Year in alternate era format.
 *   ERA_D_T_FMT Date and time in alternate era format (string can be
 *   used in {@link strftime}). ERA_D_FMT Date in alternate era format
 *   (string can be used in {@link strftime}). ERA_T_FMT Time in
 *   alternate era format (string can be used in {@link strftime}).
 *   LC_MONETARY Category Constants INT_CURR_SYMBOL International
 *   currency symbol. CURRENCY_SYMBOL Local currency symbol. CRNCYSTR
 *   Same value as CURRENCY_SYMBOL. MON_DECIMAL_POINT Decimal point
 *   character. MON_THOUSANDS_SEP Thousands separator (groups of three
 *   digits). MON_GROUPING Like "grouping" element. POSITIVE_SIGN Sign
 *   for positive values. NEGATIVE_SIGN Sign for negative values.
 *   INT_FRAC_DIGITS International fractional digits. FRAC_DIGITS Local
 *   fractional digits. P_CS_PRECEDES Returns 1 if CURRENCY_SYMBOL
 *   precedes a positive value. P_SEP_BY_SPACE Returns 1 if a space
 *   separates CURRENCY_SYMBOL from a positive value. N_CS_PRECEDES
 *   Returns 1 if CURRENCY_SYMBOL precedes a negative value.
 *   N_SEP_BY_SPACE Returns 1 if a space separates CURRENCY_SYMBOL from a
 *   negative value. P_SIGN_POSN Returns 0 if parentheses surround the
 *   quantity and CURRENCY_SYMBOL. Returns 1 if the sign string precedes
 *   the quantity and CURRENCY_SYMBOL. Returns 2 if the sign string
 *   follows the quantity and CURRENCY_SYMBOL. Returns 3 if the sign
 *   string immediately precedes the CURRENCY_SYMBOL. Returns 4 if the
 *   sign string immediately follows the CURRENCY_SYMBOL. N_SIGN_POSN
 *   LC_NUMERIC Category Constants DECIMAL_POINT Decimal point character.
 *   RADIXCHAR Same value as DECIMAL_POINT. THOUSANDS_SEP Separator
 *   character for thousands (groups of three digits). THOUSEP Same value
 *   as THOUSANDS_SEP. GROUPING LC_MESSAGES Category Constants YESEXPR
 *   Regex string for matching "yes" input. NOEXPR Regex string for
 *   matching "no" input. YESSTR Output string for "yes". NOSTR Output
 *   string for "no". LC_CTYPE Category Constants CODESET Return a string
 *   with the name of the character encoding.
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function nl_langinfo($item){}

/**
 * Checks if the provided string is already in the specified
 * normalization form.
 * 
 * @param string $input The input string to normalize
 * @param string $form One of the normalization forms.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function normalizer_is_normalized($input, $form){}

/**
 * Normalizes the input provided and returns the normalized string
 * 
 * @param string $input The input string to normalize
 * @param string $form One of the normalization forms.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function normalizer_normalize($input, $form){}

/**
 * @param string $server
 * @param string $mailbox
 * @param int $msg_number
 * @return array
 * @since PHP 4 >= 4.0.5
 **/
function notes_body($server, $mailbox, $msg_number){}

/**
 * @param string $from_database_name
 * @param string $to_database_name
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_copy_db($from_database_name, $to_database_name){}

/**
 * @param string $database_name
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_create_db($database_name){}

/**
 * @param string $database_name
 * @param string $form_name
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_create_note($database_name, $form_name){}

/**
 * @param string $database_name
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_drop_db($database_name){}

/**
 * @param string $database_name
 * @param string $name
 * @param string $type
 * @return int
 * @since PHP 4 >= 4.0.5
 **/
function notes_find_note($database_name, $name, $type){}

/**
 * @param string $server
 * @param string $mailbox
 * @param int $msg_number
 * @return object
 * @since PHP 4 >= 4.0.5
 **/
function notes_header_info($server, $mailbox, $msg_number){}

/**
 * @param string $db
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_list_msgs($db){}

/**
 * @param string $database_name
 * @param string $user_name
 * @param string $note_id
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_mark_read($database_name, $user_name, $note_id){}

/**
 * @param string $database_name
 * @param string $user_name
 * @param string $note_id
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_mark_unread($database_name, $user_name, $note_id){}

/**
 * @param string $database_name
 * @param string $name
 * @return bool
 * @since PHP 4 >= 4.0.5
 **/
function notes_nav_create($database_name, $name){}

/**
 * @param string $database_name
 * @param string $keywords
 * @return array
 * @since PHP 4 >= 4.0.5
 **/
function notes_search($database_name, $keywords){}

/**
 * @param string $database_name
 * @param string $user_name
 * @return array
 * @since PHP 4 >= 4.0.5
 **/
function notes_unread($database_name, $user_name){}

/**
 * @param string $database_name
 * @return float
 * @since PHP 4 >= 4.0.5
 **/
function notes_version($database_name){}

/**
 * {@link nsapi_request_headers} gets all the HTTP headers in the current
 * request. This is only supported when PHP runs as a NSAPI module.
 * 
 * @return array
 * @since PHP 4 >= 4.3.3, PHP 5
 **/
function nsapi_request_headers(){}

/**
 * Gets all the NSAPI response headers.
 * 
 * @return array
 * @since PHP 4 >= 4.3.3, PHP 5
 **/
function nsapi_response_headers(){}

/**
 * {@link nsapi_virtual} is an NSAPI-specific function which is
 * equivalent to <!--#include virtual...--> in SSI (.shtml files). It
 * does an NSAPI sub-request. It is useful for including CGI scripts or
 * .shtml files, or anything else that you'd parse through webserver.
 * 
 * To run the sub-request, all buffers are terminated and flushed to the
 * browser, pending headers are sent too.
 * 
 * You cannot make recursive requests with this function to other PHP
 * scripts. If you want to include PHP scripts, use {@link include} or
 * {@link require}.
 * 
 * @param string $uri The URI of the script.
 * @return bool
 * @since PHP 4 >= 4.3.3, PHP 5
 **/
function nsapi_virtual($uri){}

/**
 * @param string $clent
 * @param string $data
 * @return string
 * @since PECL spplus >= 1.0.0
 **/
function nthmac($clent, $data){}

/**
 * This function accepts either one, two, or four parameters (not three):
 * 
 * If only one parameter is given, {@link number} will be formatted
 * without decimals, but with a comma (",") between every group of
 * thousands.
 * 
 * If two parameters are given, {@link number} will be formatted with
 * {@link decimals} decimals with a dot (".") in front, and a comma (",")
 * between every group of thousands.
 * 
 * If all four parameters are given, {@link number} will be formatted
 * with {@link decimals} decimals, {@link dec_point} instead of a dot
 * (".") before the decimals and {@link thousands_sep} instead of a comma
 * (",") between every group of thousands.
 * 
 * @param float $number The number being formatted.
 * @param int $decimals Sets the number of decimal points.
 * @return string
 * @since PHP 4, PHP 5
 **/
function number_format($number, $decimals){}

/**
 * Creates a number formatter.
 * 
 * @param string $locale Locale in which the number would be formatted
 *   (locale name, e.g. en_CA).
 * @param int $style Style of the formatting, one of the format style
 *   constants. If NumberFormatter::PATTERN_DECIMAL or
 *   NumberFormatter::PATTERN_RULEBASED is passed then the number format
 *   is opened using the given pattern, which must conform to the syntax
 *   described in ICU DecimalFormat documentation or ICU
 *   RuleBasedNumberFormat documentation, respectively.
 * @param string $pattern Pattern string in case chosen style requires
 *   pattern.
 * @return NumberFormatter
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_create($locale, $style, $pattern){}

/**
 * Format a numeric value according to the formatter rules.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param number $value The value to format. Can be integer or double,
 *   other values will be converted to a numeric value.
 * @param int $type The formatting type to use.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_format($fmt, $value, $type){}

/**
 * Format the currency value according to the formatter rules.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param float $value The numeric currency value.
 * @param string $currency The 3-letter ISO 4217 currency code
 *   indicating the currency to use.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_format_currency($fmt, $value, $currency){}

/**
 * Get a numeric attribute associated with the formatter. An example of a
 * numeric attribute is the number of integer digits the formatter will
 * produce.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $attr Attribute specifier - one of the numeric attribute
 *   constants.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_attribute($fmt, $attr){}

/**
 * Get error code from the last function performed by the formatter.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @return int
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_error_code($fmt){}

/**
 * Get error message from the last function performed by the formatter.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_error_message($fmt){}

/**
 * Get formatter locale name.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $type You can choose between valid and actual locale (
 *   Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). The
 *   default is the actual locale.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_locale($fmt, $type){}

/**
 * Extract pattern used by the formatter.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_pattern($fmt){}

/**
 * Get a symbol associated with the formatter. The formatter uses symbols
 * to represent the special locale-dependent characters in a number, for
 * example the percent sign. This API is not supported for rule-based
 * formatters.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $attr Symbol specifier, one of the format symbol
 *   constants.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_symbol($fmt, $attr){}

/**
 * Get a text attribute associated with the formatter. An example of a
 * text attribute is the suffix for positive numbers. If the formatter
 * does not understand the attribute, U_UNSUPPORTED_ERROR error is
 * produced. Rule-based formatters only understand
 * NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $attr Attribute specifier - one of the text attribute
 *   constants.
 * @return string
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_get_text_attribute($fmt, $attr){}

/**
 * Parse a string into a number using the current formatter rules.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param string $value The formatting type to use. By default,
 *   NumberFormatter::TYPE_DOUBLE is used.
 * @param int $type Offset in the string at which to begin parsing. On
 *   return, this value will hold the offset at which parsing ended.
 * @param int $position
 * @return mixed
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_parse($fmt, $value, $type, &$position){}

/**
 * Parse a string into a double and a currency using the current
 * formatter.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param string $value Parameter to receive the currency name
 *   (3-letter ISO 4217 currency code).
 * @param string $currency Offset in the string at which to begin
 *   parsing. On return, this value will hold the offset at which parsing
 *   ended.
 * @param int $position
 * @return float
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_parse_currency($fmt, $value, &$currency, &$position){}

/**
 * Set a numeric attribute associated with the formatter. An example of a
 * numeric attribute is the number of integer digits the formatter will
 * produce.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $attr Attribute specifier - one of the numeric attribute
 *   constants.
 * @param int $value The attribute value.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_set_attribute($fmt, $attr, $value){}

/**
 * Set the pattern used by the formatter. Can not be used on a rule-based
 * formatter.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param string $pattern Pattern in syntax described in ICU
 *   DecimalFormat documentation.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_set_pattern($fmt, $pattern){}

/**
 * Set a symbol associated with the formatter. The formatter uses symbols
 * to represent the special locale-dependent characters in a number, for
 * example the percent sign. This API is not supported for rule-based
 * formatters.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $attr Symbol specifier, one of the format symbol
 *   constants.
 * @param string $value Text for the symbol.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_set_symbol($fmt, $attr, $value){}

/**
 * Set a text attribute associated with the formatter. An example of a
 * text attribute is the suffix for positive numbers. If the formatter
 * does not understand the attribute, U_UNSUPPORTED_ERROR error is
 * produced. Rule-based formatters only understand
 * NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
 * 
 * @param NumberFormatter $fmt NumberFormatter object.
 * @param int $attr Attribute specifier - one of the text attribute
 *   constants.
 * @param string $value Text for the attribute value.
 * @return bool
 * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
 **/
function numfmt_set_text_attribute($fmt, $attr, $value){}

/**
 * Generates a Signature Base String according to pecl/oauth.
 * 
 * @param string $http_method The HTTP method.
 * @param string $uri URI to encode.
 * @param array $request_parameters Array of request parameters.
 * @return string
 * @since PECL OAuth >=0.99.7
 **/
function oauth_get_sbs($http_method, $uri, $request_parameters){}

/**
 * Encodes a URI to RFC 3986.
 * 
 * @param string $uri URI to encode.
 * @return string
 * @since PECL OAuth >=0.99.2
 **/
function oauth_urlencode($uri){}

/**
 * This function discards the contents of the output buffer.
 * 
 * This function does not destroy the output buffer like {@link
 * ob_end_clean} does.
 * 
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ob_clean(){}

/**
 * The deflate output buffer handler can only be used once.
 * 
 * It conflicts with {@link ob_gzhandler} and zlib.output_compression as
 * well and should not be used after mbstring extension's {@link
 * mb_output_handler} and session extension's URL-Rewriter (AKA
 * session.use_trans_sid).
 * 
 * @param string $data
 * @param int $mode
 * @return string
 * @since PECL pecl_http >= 0.21.0
 **/
function ob_deflatehandler($data, $mode){}

/**
 * This function discards the contents of the topmost output buffer and
 * turns off this output buffering. If you want to further process the
 * buffer's contents you have to call {@link ob_get_contents} before
 * {@link ob_end_clean} as the buffer contents are discarded when {@link
 * ob_end_clean} is called.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ob_end_clean(){}

/**
 * This function will send the contents of the topmost output buffer (if
 * any) and turn this output buffer off. If you want to further process
 * the buffer's contents you have to call {@link ob_get_contents} before
 * {@link ob_end_flush} as the buffer contents are discarded after {@link
 * ob_end_flush} is called.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ob_end_flush(){}

/**
 * Output buffer handler generating an ETag with the hash algorithm
 * specified with the http.etag.mode.
 * 
 * This output handler is used by {@link http_cache_etag}.
 * 
 * @param string $data
 * @param int $mode
 * @return string
 * @since PECL pecl_http >= 0.10.0
 **/
function ob_etaghandler($data, $mode){}

/**
 * This function will send the contents of the output buffer (if any). If
 * you want to further process the buffer's contents you have to call
 * {@link ob_get_contents} before {@link ob_flush} as the buffer contents
 * are discarded after {@link ob_flush} is called.
 * 
 * This function does not destroy the output buffer like {@link
 * ob_end_flush} does.
 * 
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ob_flush(){}

/**
 * Gets the current buffer contents and delete current output buffer.
 * 
 * {@link ob_get_clean} essentially executes both {@link ob_get_contents}
 * and {@link ob_end_clean}.
 * 
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ob_get_clean(){}

/**
 * Gets the contents of the output buffer without clearing it.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function ob_get_contents(){}

/**
 * {@link ob_get_flush} flushes the output buffer, return it as a string
 * and turns off output buffering.
 * 
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ob_get_flush(){}

/**
 * This will return the length of the contents in the output buffer.
 * 
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function ob_get_length(){}

/**
 * Returns the nesting level of the output buffering mechanism.
 * 
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ob_get_level(){}

/**
 * {@link ob_get_status} returns status information on either the top
 * level output buffer or all active output buffer levels if {@link
 * full_status} is set to .
 * 
 * @param bool $full_status to return all active output buffer levels.
 *   If or not set, only the top level output buffer is returned.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function ob_get_status($full_status){}

/**
 * {@link ob_gzhandler} is intended to be used as a callback function for
 * {@link ob_start} to help facilitate sending gz-encoded data to web
 * browsers that support compressed web pages. Before {@link
 * ob_gzhandler} actually sends compressed data, it determines what type
 * of content encoding the browser will accept ("gzip", "deflate" or none
 * at all) and will return its output accordingly. All browsers are
 * supported since it's up to the browser to send the correct header
 * saying that it accepts compressed web pages. If a browser doesn't
 * support compressed pages this function returns .
 * 
 * @param string $buffer
 * @param int $mode
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function ob_gzhandler($buffer, $mode){}

/**
 * Converts the string encoded in {@link internal_encoding} to {@link
 * output_encoding}.
 * 
 * {@link internal_encoding} and {@link output_encoding} should be
 * defined in the file or in {@link iconv_set_encoding}.
 * 
 * @param string $contents
 * @param int $status
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function ob_iconv_handler($contents, $status){}

/**
 * {@link ob_implicit_flush} will turn implicit flushing on or off.
 * Implicit flushing will result in a flush operation after every output
 * call, so that explicit calls to {@link flush} will no longer be
 * needed.
 * 
 * @param int $flag to turn implicit flushing on, otherwise.
 * @return void
 * @since PHP 4, PHP 5
 **/
function ob_implicit_flush($flag){}

/**
 * Same restrictions as with {@link ob_deflatehandler} apply.
 * 
 * @param string $data
 * @param int $mode
 * @return string
 * @since PECL pecl_http >= 0.21.0
 **/
function ob_inflatehandler($data, $mode){}

/**
 * Lists all output handlers in use.
 * 
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function ob_list_handlers(){}

/**
 * This function will turn output buffering on. While output buffering is
 * active no output is sent from the script (other than headers), instead
 * the output is stored in an internal buffer.
 * 
 * The contents of this internal buffer may be copied into a string
 * variable using {@link ob_get_contents}. To output what is stored in
 * the internal buffer, use {@link ob_end_flush}. Alternatively, {@link
 * ob_end_clean} will silently discard the buffer contents.
 * 
 * Output buffers are stackable, that is, you may call {@link ob_start}
 * while another {@link ob_start} is active. Just make sure that you call
 * {@link ob_end_flush} the appropriate number of times. If multiple
 * output callback functions are active, output is being filtered
 * sequentially through each of them in nesting order.
 * 
 * @param callback $output_callback An optional {@link output_callback}
 *   function may be specified. This function takes a string as a
 *   parameter and should return a string. The function will be called
 *   when the output buffer is flushed (sent) or cleaned (with {@link
 *   ob_flush}, {@link ob_clean} or similar function) or when the output
 *   buffer is flushed to the browser at the end of the request. When
 *   {@link output_callback} is called, it will receive the contents of
 *   the output buffer as its parameter and is expected to return a new
 *   output buffer as a result, which will be sent to the browser. If the
 *   {@link output_callback} is not a callable function, this function
 *   will return . If the callback function has two parameters, the
 *   second parameter is filled with a bit-field consisting of
 *   PHP_OUTPUT_HANDLER_START, PHP_OUTPUT_HANDLER_CONT and
 *   PHP_OUTPUT_HANDLER_END. If {@link output_callback} returns original
 *   input is sent to the browser. The {@link output_callback} parameter
 *   may be bypassed by passing a value. {@link ob_end_clean}, {@link
 *   ob_end_flush}, {@link ob_clean}, {@link ob_flush} and {@link
 *   ob_start} may not be called from a callback function. If you call
 *   them from callback function, the behavior is undefined. If you would
 *   like to delete the contents of a buffer, return "" (a null string)
 *   from callback function. You can't even call functions using the
 *   output buffering functions like print_r($expression, true) or
 *   highlight_file($filename, true) from a callback function.
 * @param int $chunk_size If the optional parameter {@link chunk_size}
 *   is passed, the buffer will be flushed after any output call which
 *   causes the buffer's length to equal or exceed {@link chunk_size}.
 *   Default value 0 means that the function is called only in the end,
 *   other special value 1 sets {@link chunk_size} to 4096.
 * @param bool $erase If the optional parameter {@link erase} is set to
 *   , the buffer will not be deleted until the script finishes. This
 *   causes that flushing and cleaning functions would issue a notice and
 *   return if called.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function ob_start($output_callback, $chunk_size, $erase){}

/**
 * Callback function for {@link ob_start} to repair the buffer.
 * 
 * @param string $input The buffer.
 * @param int $mode The buffer mode.
 * @return string
 * @since PHP 5
 **/
function ob_tidyhandler($input, $mode){}

/**
 * This function is deprecated. Recommended alternatives: {@link
 * oci_fetch_array}, {@link oci_fetch_object}, {@link oci_fetch_assoc}
 * and {@link oci_fetch_row}.
 * 
 * @param resource $statement
 * @param array $result
 * @param int $mode
 * @return int
 * @since PHP 4, PHP 5, PECL OCI8 >= 1.0.0
 **/
function ocifetchinto($statement, &$result, $mode){}

/**
 * Binds the PHP array {@link var_array} to the Oracle placeholder {@link
 * name}, which points to Oracle PL/SQL array. Whether it will be used
 * for input or output will be determined at run-time.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param string $name The Oracle placeholder.
 * @param array $var_array An array.
 * @param int $max_table_length Sets the maximum length both for
 *   incoming and result arrays.
 * @param int $max_item_length Sets maximum length for array items. If
 *   not specified or equals to -1, {@link oci_bind_array_by_name} will
 *   use find the longest element in the incoming array and will use it
 *   as maximum length for array items.
 * @param int $type Should be used to set the type of PL/SQL array
 *   items. See list of available types below:
 *   
 *   SQLT_NUM - for arrays of NUMBER. SQLT_INT - for arrays of INTEGER
 *   (Note: INTEGER it is actually a synonym for NUMBER(38), but SQLT_NUM
 *   type won't work in this case even though they are synonyms).
 *   SQLT_FLT - for arrays of FLOAT. SQLT_AFC - for arrays of CHAR.
 *   SQLT_CHR - for arrays of VARCHAR2. SQLT_VCS - for arrays of VARCHAR.
 *   SQLT_AVC - for arrays of CHARZ. SQLT_STR - for arrays of STRING.
 *   SQLT_LVC - for arrays of LONG VARCHAR. SQLT_ODT - for arrays of
 *   DATE.
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL OCI8 >= 1.2.0
 **/
function oci_bind_array_by_name($statement, $name, &$var_array, $max_table_length, $max_item_length, $type){}

/**
 * Binds a PHP variable {@link variable} to the Oracle bind variable
 * placeholder {@link bv_name}. Binding is important for Oracle database
 * performance and also as a way to avoid SQL Injection security issues.
 * 
 * Binding allows the database to reuse the statement context and caches
 * from previous executions of the statement, even if another user or
 * process originally executed it. Binding reduces SQL Injection concerns
 * because the data associated with a bind variable is never treated as
 * part of the SQL statement. It does not need quoting or escaping.
 * 
 * PHP variables that have been bound can be changed and the statement
 * re-executed without needing to re-parse the statement or re-bind.
 * 
 * In Oracle, bind variables are commonly divided into IN binds for
 * values that are passed into the database, and OUT binds for values
 * that are returned to PHP. A bind variable may be both IN and OUT.
 * Whether a bind variable will be used for input or output is determined
 * at run-time.
 * 
 * You must specify {@link maxlength} when using an OUT bind so that PHP
 * allocates enough memory to hold the returned value.
 * 
 * For IN binds it is recommended to set the {@link maxlength} length if
 * the statement is re-executed multiple times with different values for
 * the PHP variable. Otherwise Oracle may truncate data to the length of
 * the initial PHP variable value. If you don't know what the maximum
 * length will be, then re-call {@link oci_bind_by_name} with the current
 * data size prior to each {@link oci_execute} call. Binding an
 * unnecessarily large length will have an impact on process memory in
 * the database.
 * 
 * A bind call tells Oracle which memory address to read data from. For
 * IN binds that address needs to contain valid data when {@link
 * oci_execute} is called. This means that the variable bound must remain
 * in scope until execution. If it doesn't, unexpected results or errors
 * such as "ORA-01460: unimplemented or unreasonable conversion
 * requested" may occur. For OUT binds one symptom is no value being set
 * in the PHP variable.
 * 
 * For a statement that is repeatedly executed, binding values that never
 * change may reduce the ability of the Oracle optimizer to choose the
 * best statement execution plan. Long running statements that are rarely
 * re-executed may not benefit from binding. However in both cases,
 * binding might be safer than joining strings into a SQL statement, as
 * this can be a security risk if unfiltered user text is concatenated.
 * 
 * @param resource $statement A valid OCI8 statement identifer.
 * @param string $bv_name The colon-prefixed bind variable placeholder
 *   used in the statement. The colon is optional in {@link bv_name}.
 *   Oracle does not use question marks for placeholders.
 * @param mixed $variable The PHP variable to be associated with {@link
 *   bv_name}
 * @param int $maxlength Sets the maximum length for the data. If you
 *   set it to -1, this function will use the current length of {@link
 *   variable} to set the maximum length. In this case the {@link
 *   variable} must exist and contain data when {@link oci_bind_by_name}
 *   is called.
 * @param int $type The datatype that Oracle will treat the data as.
 *   The default {@link type} used is SQLT_CHR. Oracle will convert the
 *   data between this type and the database column (or PL/SQL variable
 *   type), when possible. If you need to bind an abstract datatype
 *   (LOB/ROWID/BFILE) you need to allocate it first using the {@link
 *   oci_new_descriptor} function. The {@link length} is not used for
 *   abstract datatypes and should be set to -1. Possible values for
 *   {@link type} are: SQLT_BFILEE or OCI_B_BFILE - for BFILEs;
 *   SQLT_CFILEE or OCI_B_CFILEE - for CFILEs; SQLT_CLOB or OCI_B_CLOB -
 *   for CLOBs; SQLT_BLOB or OCI_B_BLOB - for BLOBs; SQLT_RDD or
 *   OCI_B_ROWID - for ROWIDs; SQLT_NTY or OCI_B_NTY - for named
 *   datatypes; SQLT_INT or OCI_B_INT - for integers; SQLT_CHR - for
 *   VARCHARs; SQLT_BIN or OCI_B_BIN - for RAW columns; SQLT_LNG - for
 *   LONG columns; SQLT_LBI - for LONG RAW columns; SQLT_RSET - for
 *   cursors created with {@link oci_new_cursor}.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_bind_by_name($statement, $bv_name, &$variable, $maxlength, $type){}

/**
 * Invalidates a cursor, freeing all associated resources and cancels the
 * ability to read from it.
 * 
 * @param resource $statement An OCI statement.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_cancel($statement){}

/**
 * Unsets {@link connection}. The underlying database connection is
 * closed if no other resources are using it and if it was created with
 * {@link oci_connect} or {@link oci_new_connect}.
 * 
 * It is recommended to close connections that are no longer needed
 * because this makes database resources available for other users.
 * 
 * @param resource $connection An Oracle connection identifier returned
 *   by {@link oci_connect}, {@link oci_pconnect}, or {@link
 *   oci_new_connect}.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_close($connection){}

/**
 * Commits the outstanding transaction for the Oracle {@link connection}.
 * A commit ends the current transaction and makes permanent all changes.
 * It releases all locks held.
 * 
 * A transaction begins when the first SQL statement that changes data is
 * executed with {@link oci_execute} using the OCI_NO_AUTO_COMMIT flag.
 * Further data changes made by other statements become part of the same
 * transaction. Data changes made in a transaction are temporary until
 * the transaction is committed or rolled back. Other users of the
 * database will not see the changes until they are committed.
 * 
 * When inserting or updating data, using transactions is recommended for
 * relational data consistency and for performance reasons.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect}, {@link oci_pconnect}, or {@link
 *   oci_new_connect}.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_commit($connection){}

/**
 * Returns a connection identifier needed for most other OCI8 operations.
 * 
 * See Connection Handling for general information on connection
 * management and connection pooling.
 * 
 * From PHP 5.1.2 (PECL OCI8 1.1) {@link oci_close} can be used to close
 * the connection.
 * 
 * The second and subsequent calls to {@link oci_connect} with the same
 * parameters will return the connection handle returned from the first
 * call. This means that transactions in one handle are also in the other
 * handles, because they use the same underlying database connection. If
 * two handles need to be transactionally isolated from each other, use
 * {@link oci_new_connect} instead.
 * 
 * @param string $username The Oracle user name.
 * @param string $password The password for {@link username}.
 * @param string $connection_string
 * @param string $character_set
 * @param int $session_mode
 * @return resource
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_connect($username, $password, $connection_string, $character_set, $session_mode){}

/**
 * Associates a PHP variable with a column for query fetches using {@link
 * oci_fetch}.
 * 
 * The {@link oci_define_by_name} call must occur before executing {@link
 * oci_execute}.
 * 
 * @param resource $statement
 * @param string $column_name The column name used in the query. Use
 *   uppercase for Oracle's default, non-case sensitive column names. Use
 *   the exact column name case for case-sensitive column names.
 * @param mixed $variable The PHP variable that will contain the
 *   returned column value.
 * @param int $type The data type to be returned. Generally not needed.
 *   Note that Oracle-style data conversions are not performed. For
 *   example, SQLT_INT will be ignored and the returned data type will
 *   still be SQLT_CHR. You can optionally use {@link oci_new_descriptor}
 *   to allocate LOB/ROWID/BFILE descriptors.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_define_by_name($statement, $column_name, &$variable, $type){}

/**
 * Returns the last error found.
 * 
 * The function should be called immediately after an error occurs.
 * Errors are cleared by a successful statement.
 * 
 * @param resource $resource For most errors, {@link resource} is the
 *   resource handle that was passed to the failing function call. For
 *   connection errors with {@link oci_connect}, {@link oci_new_connect}
 *   or {@link oci_pconnect} do not pass {@link resource}.
 * @return array
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_error($resource){}

/**
 * Executes a {@link statement} previously returned from {@link
 * oci_parse}.
 * 
 * After execution, statements like INSERT will have data committed to
 * the database by default. For statements like SELECT, execution
 * performs the logic of the query. Query results can subsequently be
 * fetched in PHP with functions like {@link oci_fetch_array}.
 * 
 * Each parsed statement may be executed multiple times, saving the cost
 * of re-parsing. This is commonly used for INSERT statements when data
 * is bound with {@link oci_bind_by_name}.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param int $mode An optional second parameter can be one of the
 *   following constants: Execution Modes Constant Description
 *   OCI_COMMIT_ON_SUCCESS Automatically commit all outstanding changes
 *   for this connection when the statement has succeeded. This is the
 *   default. OCI_DEFAULT Obsolete as of PHP 5.3.2 (PECL OCI8 1.4) but
 *   still available for backward compatibility. Use the equivalent
 *   OCI_NO_AUTO_COMMIT in new code. OCI_DESCRIBE_ONLY Make query meta
 *   data available to functions like {@link oci_field_name} but do not
 *   create a result set. Any subsequent fetch call such as {@link
 *   oci_fetch_array} will fail. OCI_NO_AUTO_COMMIT Do not automatically
 *   commit changes. Prior to PHP 5.3.2 (PECL OCI8 1.4) use OCI_DEFAULT
 *   which is an alias for OCI_NO_AUTO_COMMIT. Using OCI_NO_AUTO_COMMIT
 *   mode starts a transaction. Transactions are automatically rolled
 *   back when the connection is closed, or when the script ends.
 *   Explicitly call {@link oci_commit} to commit a transaction, or
 *   {@link oci_rollback} to abort it. When inserting or updating data,
 *   using transactions is recommended for relational data consistency
 *   and for performance reasons. If OCI_NO_AUTO_COMMIT mode is used for
 *   any statement including queries, and {@link oci_commit} or {@link
 *   oci_rollback} is not subsequently called, then OCI8 will perform a
 *   rollback at the end of the script even if no data was changed. To
 *   avoid an unnecessary rollback, many scripts do not use
 *   OCI_NO_AUTO_COMMIT mode for queries or PL/SQL. Be careful to ensure
 *   the appropriate transactional consistency for the application when
 *   using {@link oci_execute} with different modes in the same script.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_execute($statement, $mode){}

/**
 * Fetches the next row from a query into internal buffers accessible
 * either with {@link oci_result}, or by using variables previously
 * defined with {@link oci_define_by_name}.
 * 
 * See {@link oci_fetch_array} for general information about fetching
 * data.
 * 
 * @param resource $statement
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_fetch($statement){}

/**
 * Fetches multiple rows from a query into a two-dimensional array. By
 * default, all rows are returned.
 * 
 * This function can be called only once for each query executed with
 * {@link oci_execute}.
 * 
 * @param resource $statement
 * @param array $output The variable to contain the returned rows. LOB
 *   columns are returned as strings, where Oracle supports conversion.
 *   See {@link oci_fetch_array} for more information on how data and
 *   types are fetched.
 * @param int $skip The number of initial rows to discard when fetching
 *   the result. The default value is 0, so the first row onwards is
 *   returned.
 * @param int $maxrows The number of rows to return. The default is -1
 *   meaning return all the rows from {@link skip} + 1 onwards.
 * @param int $flags Parameter {@link flags} indicates the array
 *   structure and whether associative arrays should be used. {@link
 *   oci_fetch_all} Array Structure Modes Constant Description
 *   OCI_FETCHSTATEMENT_BY_ROW The outer array will contain one sub-array
 *   per query row. OCI_FETCHSTATEMENT_BY_COLUMN The outer array will
 *   contain one sub-array per query column. This is the default. Arrays
 *   can be indexed by column heading or numerically. {@link
 *   oci_fetch_all} Array Index Modes Constant Description OCI_NUM
 *   Numeric indexes are used for each column's array. OCI_ASSOC
 *   Associative indexes are used for each column's array. This is the
 *   default. Use the addition operator + to choose a combination of
 *   array structure and index modes. Oracle's default, non-case
 *   sensitive column names will have uppercase array keys.
 *   Case-sensitive column names will have array keys using the exact
 *   column case. Use {@link var_dump} on {@link output}to verify the
 *   appropriate case to use for each query. Queries that have more than
 *   one column with the same name should use column aliases. Otherwise
 *   only one of the columns will appear in an associative array.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_fetch_all($statement, &$output, $skip, $maxrows, $flags){}

/**
 * Returns an array containing the next result-set row of a query. Each
 * array entry corresponds to a column of the row. This function is
 * typically called in a loop until it returns , indicating no more rows
 * exist.
 * 
 * @param resource $statement
 * @param int $mode An optional second parameter can be any combination
 *   of the following constants: {@link oci_fetch_array} Modes Constant
 *   Description OCI_BOTH Returns an array with both associative and
 *   numeric indices. This is the same as OCI_ASSOC + OCI_NUM and is the
 *   default behavior. OCI_ASSOC Returns an associative array. OCI_NUM
 *   Returns a numeric array. OCI_RETURN_NULLS Creates elements for
 *   fields. The element values will be a PHP . OCI_RETURN_LOBS Returns
 *   the contents of LOBs instead of the LOB descriptors. The default
 *   {@link mode} is OCI_BOTH. Use the addition operator + to specify
 *   more than one mode at a time.
 * @return array
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_fetch_array($statement, $mode){}

/**
 * Returns an associative array containing the next result-set row of a
 * query. Each array entry corresponds to a column of the row. This
 * function is typically called in a loop until it returns , indicating
 * no more rows exist.
 * 
 * Calling {@link oci_fetch_assoc} is identical to calling {@link
 * oci_fetch_array} with OCI_ASSOC + OCI_RETURN_NULLS.
 * 
 * @param resource $statement
 * @return array
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_fetch_assoc($statement){}

/**
 * Returns an object containing the next result-set row of a query. Each
 * attribute of the object corresponds to a column of the row. This
 * function is typically called in a loop until it returns , indicating
 * no more rows exist.
 * 
 * @param resource $statement
 * @return object
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_fetch_object($statement){}

/**
 * Returns a numerically indexed array containing the next result-set row
 * of a query. Each array entry corresponds to a column of the row. This
 * function is typically called in a loop until it returns , indicating
 * no more rows exist.
 * 
 * Calling {@link oci_fetch_row} is identical to calling {@link
 * oci_fetch_array} with OCI_NUM + OCI_RETURN_NULLS.
 * 
 * @param resource $statement
 * @return array
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_fetch_row($statement){}

/**
 * Checks if the given {@link field} from the {@link statement} is .
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param mixed $field Can be a field's index or a field's name
 *   (uppercased).
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_is_null($statement, $field){}

/**
 * Returns the name of the {@link field}.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param int $field Can be the field's index (1-based) or name.
 * @return string
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_name($statement, $field){}

/**
 * Returns precision of the {@link field}.
 * 
 * For FLOAT columns, precision is nonzero and scale is -127. If
 * precision is 0, then column is NUMBER. Else it's NUMBER(precision,
 * scale).
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param int $field Can be the field's index (1-based) or name.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_precision($statement, $field){}

/**
 * Returns the scale of the column with {@link field} index.
 * 
 * For FLOAT columns, precision is nonzero and scale is -127. If
 * precision is 0, then column is NUMBER. Else it's NUMBER(precision,
 * scale).
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param int $field Can be the field's index (1-based) or name.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_scale($statement, $field){}

/**
 * Returns the size of a {@link field}.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param mixed $field Can be the field's index (1-based) or name.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_size($statement, $field){}

/**
 * Returns a field's data type.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param int $field Can be the field's index (1-based) or name.
 * @return mixed
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_type($statement, $field){}

/**
 * Returns Oracle's raw data type of the {@link field}.
 * 
 * However, if you want to get field's type, then {@link oci_field_type}
 * will suit you better.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @param int $field Can be the field's index (1-based) or name.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_field_type_raw($statement, $field){}

/**
 * Frees resources associated with Oracle's cursor or statement, which
 * was received from as a result of {@link oci_parse} or obtained from
 * Oracle.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_free_statement($statement){}

/**
 * Enables or disables internal debug output.
 * 
 * @param bool $onoff Set this to to turn debug output off or to turn
 *   it on.
 * @return void
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_internal_debug($onoff){}

/**
 * Copies a large object or a part of a large object to another large
 * object. Old LOB-recipient data will be overwritten.
 * 
 * If you need to copy a particular part of a LOB to a particular
 * position of a LOB, use {@link oci_lob_seek} to move LOB internal
 * pointers.
 * 
 * @param OCI-Lob $lob_to The destination LOB.
 * @param OCI-Lob $lob_from The copied LOB.
 * @param int $length Indicates the length of data to be copied.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_lob_copy($lob_to, $lob_from, $length){}

/**
 * Compares two LOB/FILE locators.
 * 
 * @param OCI-Lob $lob1 A LOB identifier.
 * @param OCI-Lob $lob2 A LOB identifier.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_lob_is_equal($lob1, $lob2){}

/**
 * Allocates a new collection object.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect} or {@link oci_pconnect}.
 * @param string $tdo Should be a valid named type (uppercase).
 * @param string $schema Should point to the scheme, where the named
 *   type was created. The name of the current user is the default value.
 * @return OCI-Collection
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_new_collection($connection, $tdo, $schema){}

/**
 * Establishes a new connection to an Oracle server and logs on.
 * 
 * Unlike {@link oci_connect} and {@link oci_pconnect}, {@link
 * oci_new_connect} does not cache connections and will always return a
 * brand-new freshly opened connection handle. This is useful if your
 * application needs transactional isolation between two sets of queries.
 * 
 * @param string $username The Oracle user name.
 * @param string $password The password for {@link username}.
 * @param string $connection_string
 * @param string $character_set
 * @param int $session_mode
 * @return resource
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_new_connect($username, $password, $connection_string, $character_set, $session_mode){}

/**
 * Allocates a new statement handle on the specified connection.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect} or {@link oci_pconnect}.
 * @return resource
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_new_cursor($connection){}

/**
 * Allocates resources to hold descriptor or LOB locator.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect} or {@link oci_pconnect}.
 * @param int $type Valid values for {@link type} are: OCI_DTYPE_FILE,
 *   OCI_DTYPE_LOB and OCI_DTYPE_ROWID.
 * @return OCI-Lob
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_new_descriptor($connection, $type){}

/**
 * Gets the number of columns in the given {@link statement}.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_num_fields($statement){}

/**
 * Gets the number of rows affected during statement execution.
 * 
 * @param resource $statement A valid OCI statement identifier.
 * @return int
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_num_rows($statement){}

/**
 * Prepares {@link sql_text} using {@link connection} and returns the
 * statement identifier, which can be used with {@link oci_bind_by_name},
 * {@link oci_execute} and other functions.
 * 
 * Statement identifiers can be freed with {@link oci_free_statement} or
 * by setting the variable to null.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect}, {@link oci_pconnect}, or {@link
 *   oci_new_connect}.
 * @param string $sql_text The SQL or PL/SQL statement. SQL statements
 *   should not end with a semi-colon (;). PL/SQL statements should end
 *   with a semi-colon (;).
 * @return resource
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_parse($connection, $sql_text){}

/**
 * Changes password for user with {@link username}.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect} or {@link oci_pconnect}.
 * @param string $username The Oracle user name.
 * @param string $old_password The old password.
 * @param string $new_password The new password to be set.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_password_change($connection, $username, $old_password, $new_password){}

/**
 * Creates a persistent connection to an Oracle server and logs on.
 * 
 * Persistent connections are cached and re-used between requests,
 * resulting in reduced overhead on each page load; a typical PHP
 * application will have a single persistent connection open against an
 * Oracle server per Apache child process (or PHP FastCGI/CGI process).
 * See the Persistent Database Connections section for more information.
 * 
 * @param string $username The Oracle user name.
 * @param string $password The password for {@link username}.
 * @param string $connection_string
 * @param string $character_set
 * @param int $session_mode
 * @return resource
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_pconnect($username, $password, $connection_string, $character_set, $session_mode){}

/**
 * Returns the data from {@link field} in the current row, fetched by
 * {@link oci_fetch}.
 * 
 * @param resource $statement
 * @param mixed $field Can be either use the column number (1-based) or
 *   the column name (in uppercase).
 * @return mixed
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_result($statement, $field){}

/**
 * Reverts all uncommitted changes for the Oracle {@link connection} and
 * ends the transaction. It releases all locks held. All Oracle
 * SAVEPOINTS are erased.
 * 
 * A transaction begins when the first SQL statement that changes data is
 * executed with {@link oci_execute} using the OCI_NO_AUTO_COMMIT flag.
 * Further data changes made by other statements become part of the same
 * transaction. Data changes made in a transaction are temporary until
 * the transaction is committed or rolled back. Other users of the
 * database will not see the changes until they are committed.
 * 
 * When inserting or updating data, using transactions is recommended for
 * relational data consistency and for performance reasons.
 * 
 * @param resource $connection An Oracle connection identifier,
 *   returned by {@link oci_connect}, {@link oci_pconnect} or {@link
 *   oci_new_connect}.
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_rollback($connection){}

/**
 * Returns a string with version information of the Oracle server, which
 * uses the provided {@link connection}.
 * 
 * @param resource $connection
 * @return string
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_server_version($connection){}

/**
 * Sets the action name for Oracle tracing.
 * 
 * The action name is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when an SQL
 * statement is executed.
 * 
 * The action name can subsequently be queried from database
 * administration views such as V$SESSION. It can be used for tracing and
 * monitoring such as with V$SQLAREA and
 * DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE.
 * 
 * The value may be retained across persistent connections.
 * 
 * @param resource $connection
 * @param string $action_name User chosen string up to 32 bytes long.
 * @return bool
 * @since PHP 5.3.2, PECL OCI8 >= 1.4.0
 **/
function oci_set_action($connection, $action_name){}

/**
 * Sets the client identifier used by various database components to
 * identify lightweight application users who authenticate as the same
 * database user.
 * 
 * The client identifier is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when an SQL
 * statement is executed.
 * 
 * The identifier can subsequently be queried from database
 * administration views such as V$SESSION. It can be used with
 * DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE for tracing. It can be used for
 * auditing.
 * 
 * The value may be retained across persistent connections.
 * 
 * @param resource $connection
 * @param string $client_identifier User chosen string up to 64 bytes
 *   long.
 * @return bool
 * @since PHP 5.3.2, PECL OCI8 >= 1.4.0
 **/
function oci_set_client_identifier($connection, $client_identifier){}

/**
 * Sets the client information for Oracle tracing.
 * 
 * The client information is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when an SQL
 * statement is executed.
 * 
 * The client information can subsequently be queried from database
 * administration views such as V$SESSION.
 * 
 * The value may be retained across persistent connections.
 * 
 * @param resource $connection
 * @param string $client_info User chosen string up to 64 bytes long.
 * @return bool
 * @since PHP 5.3.2, PECL OCI8 >= 1.4.0
 **/
function oci_set_client_info($connection, $client_info){}

/**
 * Sets the database "edition" of objects to be used by a subsequent
 * connections.
 * 
 * Oracle Editions allow concurrent versions of applications to run using
 * the same schema and object names. This is useful for upgrading live
 * systems.
 * 
 * Call {@link oci_set_edition} before calling {@link oci_connect},
 * {@link oci_pconnect} or {@link oci_new_connect}.
 * 
 * If an edition is set that is not valid in the database, connection
 * will fail even if {@link oci_set_edition} returns success.
 * 
 * When using persistent connections, if a connection with the requested
 * edition setting already exists, it is reused. Otherwise, a different
 * persistent connection is created
 * 
 * @param string $edition Oracle Database edition name previously
 *   created with the SQL "CREATE EDITION" command.
 * @return bool
 * @since PHP 5.3.2, PECL OCI8 >= 1.4.0
 **/
function oci_set_edition($edition){}

/**
 * Sets the module name for Oracle tracing.
 * 
 * The module name is registered with the database when the next
 * 'roundtrip' from PHP to the database occurs, typically when an SQL
 * statement is executed.
 * 
 * The name can subsequently be queried from database administration
 * views such as V$SESSION. It can be used for tracing and monitoring
 * such as with V$SQLAREA and DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE.
 * 
 * The value may be retained across persistent connections.
 * 
 * @param resource $connection
 * @param string $module_name User chosen string up to 48 bytes long.
 * @return bool
 * @since PHP 5.3.2, PECL OCI8 >= 1.4.0
 **/
function oci_set_module_name($connection, $module_name){}

/**
 * Sets the number of rows to be buffered by the Oracle Client libraries
 * after a successful query call to {@link oci_execute} and for each
 * subsequent internal fetch request to the database. For queries
 * returning a large number of rows, performance can be significantly
 * improved by increasing the prefetch count above the default
 * oci8.default_prefetch value.
 * 
 * Prefetching is Oracle's efficient way of returning more than one data
 * row from the database in each network request. This can result in
 * better network and CPU utilization. The buffering of rows is internal
 * to OCI8 and the behavior of OCI8 fetching functions is unchanged
 * regardless of the prefetch count. For example, {@link oci_fetch_row}
 * will always return one row. The prefetch buffer is per-statement and
 * is not used by re-executed statements or by other connections.
 * 
 * Call {@link oci_set_prefetch} before calling {@link oci_execute}.
 * 
 * A tuning goal is to set the prefetch value to a reasonable size for
 * the network and database to handle. For queries returning a very large
 * number of rows, overall system efficiency might be better if rows are
 * retrieved from the database in several chunks (i.e set the prefetch
 * value smaller than the number of rows). This allows the database to
 * handle other users' statements while the PHP script is processing the
 * current set of rows.
 * 
 * Query prefetching was introduced in Oracle 8i. REF CURSOR prefetching
 * was introduced in Oracle 11gR2 and occurs when PHP is linked with
 * Oracle 11gR2 Client libraries and connected to 11gR2 or previous
 * versions of the database. Nested cursor prefetching was introduced in
 * Oracle 11gR2 and requires both the Oracle Client libraries and the
 * database to be version 11gR2.
 * 
 * Prefetching is not supported when queries contain LONG or LOB columns.
 * The prefetch value is ignored and single-row fetches will be used in
 * all the situations when prefetching is not supported.
 * 
 * @param resource $statement
 * @param int $rows The number of rows to be prefetched, >= 0
 * @return bool
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_set_prefetch($statement, $rows){}

/**
 * Returns a keyword identifying the type of the OCI8 {@link statement}.
 * 
 * @param resource $statement A valid OCI8 statement identifier from
 *   {@link oci_parse}.
 * @return string
 * @since PHP 5, PECL OCI8 >= 1.1.0
 **/
function oci_statement_type($statement){}

/**
 * Returns the decimal equivalent of the octal number represented by the
 * {@link octal_string} argument.
 * 
 * @param string $octal_string The octal string to convert
 * @return number
 * @since PHP 4, PHP 5
 **/
function octdec($octal_string){}

/**
 * Toggles autocommit behaviour.
 * 
 * By default, auto-commit is on for a connection. Disabling auto-commit
 * is equivalent with starting a transaction.
 * 
 * @param resource $connection_id
 * @param bool $OnOff If {@link OnOff} is , auto-commit is enabled, if
 *   it is auto-commit is disabled.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function odbc_autocommit($connection_id, $OnOff){}

/**
 * Enables handling of binary column data. ODBC SQL types affected are
 * BINARY, VARBINARY, and LONGVARBINARY.
 * 
 * When binary SQL data is converted to character C data, each byte (8
 * bits) of source data is represented as two ASCII characters. These
 * characters are the ASCII character representation of the number in its
 * hexadecimal form. For example, a binary 00000001 is converted to "01"
 * and a binary 11111111 is converted to "FF". LONGVARBINARY handling
 * binmode longreadlen result ODBC_BINMODE_PASSTHRU 0 passthru
 * ODBC_BINMODE_RETURN 0 passthru ODBC_BINMODE_CONVERT 0 passthru
 * ODBC_BINMODE_PASSTHRU 0 passthru ODBC_BINMODE_PASSTHRU >0 passthru
 * ODBC_BINMODE_RETURN >0 return as is ODBC_BINMODE_CONVERT >0 return as
 * char
 * 
 * If {@link odbc_fetch_into} is used, passthru means that an empty
 * string is returned for these columns.
 * 
 * @param resource $result_id The result identifier. If {@link
 *   result_id} is 0, the settings apply as default for new results.
 *   Default for longreadlen is 4096 and {@link mode} defaults to
 *   ODBC_BINMODE_RETURN. Handling of binary long columns is also
 *   affected by {@link odbc_longreadlen}.
 * @param int $mode Possible values for {@link mode} are:
 *   ODBC_BINMODE_PASSTHRU: Passthru BINARY data ODBC_BINMODE_RETURN:
 *   Return as is ODBC_BINMODE_CONVERT: Convert to char and return
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_binmode($result_id, $mode){}

/**
 * Closes down the connection to the database server.
 * 
 * @param resource $connection_id
 * @return void
 * @since PHP 4, PHP 5
 **/
function odbc_close($connection_id){}

/**
 * {@link odbc_close_all} will close down all connections to database
 * server(s).
 * 
 * @return void
 * @since PHP 4, PHP 5
 **/
function odbc_close_all(){}

/**
 * Lists columns and associated privileges for the given table.
 * 
 * @param resource $connection_id
 * @param string $qualifier The qualifier.
 * @param string $owner The owner.
 * @param string $table_name The table name.
 * @param string $column_name The {@link column_name} argument accepts
 *   search patterns ('%' to match zero or more characters and '_' to
 *   match a single character).
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_columnprivileges($connection_id, $qualifier, $owner, $table_name, $column_name){}

/**
 * Lists all columns in the requested range.
 * 
 * @param resource $connection_id
 * @param string $qualifier The qualifier.
 * @param string $schema The owner.
 * @param string $table_name The table name.
 * @param string $column_name The column name.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_columns($connection_id, $qualifier, $schema, $table_name, $column_name){}

/**
 * Commits all pending transactions on the connection.
 * 
 * @param resource $connection_id
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_commit($connection_id){}

/**
 * @param string $dsn The database source name for the connection.
 *   Alternatively, a DNS-less connection string can be used.
 * @param string $user The username.
 * @param string $password The password.
 * @param int $cursor_type This sets the type of cursor to be used for
 *   this connection. This parameter is not normally needed, but can be
 *   useful for working around problems with some ODBC drivers.
 *   
 *   SQL_CUR_USE_IF_NEEDED SQL_CUR_USE_ODBC SQL_CUR_USE_DRIVER
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_connect($dsn, $user, $password, $cursor_type){}

/**
 * Gets the cursorname for the given result_id.
 * 
 * @param resource $result_id The result identifier.
 * @return string
 * @since PHP 4, PHP 5
 **/
function odbc_cursor($result_id){}

/**
 * This function will return the list of available DNS (after calling it
 * several times).
 * 
 * @param resource $connection_id
 * @param int $fetch_type The {@link fetch_type} can be one of two
 *   constant types: SQL_FETCH_FIRST, SQL_FETCH_NEXT. Use SQL_FETCH_FIRST
 *   the first time this function is called, thereafter use the
 *   SQL_FETCH_NEXT.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function odbc_data_source($connection_id, $fetch_type){}

/**
 * Sends an SQL statement to the database server.
 * 
 * @param resource $connection_id
 * @param string $query_string The SQL statement.
 * @param int $flags This parameter is currently not used.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_do($connection_id, $query_string, $flags){}

/**
 * @param resource $connection_id
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function odbc_error($connection_id){}

/**
 * @param resource $connection_id
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function odbc_errormsg($connection_id){}

/**
 * Sends an SQL statement to the database server.
 * 
 * @param resource $connection_id
 * @param string $query_string The SQL statement.
 * @param int $flags This parameter is currently not used.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_exec($connection_id, $query_string, $flags){}

/**
 * Executes a statement prepared with {@link odbc_prepare}.
 * 
 * @param resource $result_id The result id resource, from {@link
 *   odbc_prepare}.
 * @param array $parameters_array Parameters in {@link parameter_array}
 *   will be substituted for placeholders in the prepared statement in
 *   order. Elements of this array will be converted to strings by
 *   calling this function. Any parameters in {@link parameter_array}
 *   which start and end with single quotes will be taken as the name of
 *   a file to read and send to the database server as the data for the
 *   appropriate placeholder.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_execute($result_id, $parameters_array){}

/**
 * Fetch an associative array from an ODBC query. See the changelog below
 * for when this function is available.
 * 
 * @param resource $result The result resource from {@link odbc_exec}.
 * @param int $rownumber Optionally choose which row number to
 *   retrieve.
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function odbc_fetch_array($result, $rownumber){}

/**
 * Fetch one result row into array.
 * 
 * @param resource $result_id The result resource.
 * @param array $result_array The result array that can be of any type
 *   since it will be converted to type array. The array will contain the
 *   column values starting at array index 0.
 * @param int $rownumber The row number.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_fetch_into($result_id, &$result_array, $rownumber){}

/**
 * Fetch an object from an ODBC query. See the changelog below for when
 * this function is available.
 * 
 * @param resource $result The result resource from {@link odbc_exec}.
 * @param int $rownumber Optionally choose which row number to
 *   retrieve.
 * @return object
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function odbc_fetch_object($result, $rownumber){}

/**
 * Fetches a row of the data that was returned by {@link odbc_do} or
 * {@link odbc_exec}. After {@link odbc_fetch_row} is called, the fields
 * of that row can be accessed with {@link odbc_result}.
 * 
 * @param resource $result_id The result identifier.
 * @param int $row_number If {@link row_number} is not specified,
 *   {@link odbc_fetch_row} will try to fetch the next row in the result
 *   set. Calls to {@link odbc_fetch_row} with and without {@link
 *   row_number} can be mixed. To step through the result more than once,
 *   you can call {@link odbc_fetch_row} with {@link row_number} 1, and
 *   then continue doing {@link odbc_fetch_row} without {@link
 *   row_number} to review the result. If a driver doesn't support
 *   fetching rows by number, the {@link row_number} parameter is
 *   ignored.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_fetch_row($result_id, $row_number){}

/**
 * Gets the length of the field referenced by number in the given result
 * identifier.
 * 
 * @param resource $result_id The result identifier.
 * @param int $field_number The field number. Field numbering starts at
 *   1.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_field_len($result_id, $field_number){}

/**
 * Gets the name of the field occupying the given column number in the
 * given result identifier.
 * 
 * @param resource $result_id The result identifier.
 * @param int $field_number The field number. Field numbering starts at
 *   1.
 * @return string
 * @since PHP 4, PHP 5
 **/
function odbc_field_name($result_id, $field_number){}

/**
 * Gets the number of the column slot that corresponds to the named field
 * in the given result identifier.
 * 
 * @param resource $result_id The result identifier.
 * @param string $field_name The field name.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_field_num($result_id, $field_name){}

/**
 * Gets the length of the field referenced by number in the given result
 * identifier.
 * 
 * @param resource $result_id The result identifier.
 * @param int $field_number The field number. Field numbering starts at
 *   1.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_field_precision($result_id, $field_number){}

/**
 * Gets the scale of the field referenced by number in the given result
 * identifier.
 * 
 * @param resource $result_id The result identifier.
 * @param int $field_number The field number. Field numbering starts at
 *   1.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_field_scale($result_id, $field_number){}

/**
 * Gets the SQL type of the field referenced by number in the given
 * result identifier.
 * 
 * @param resource $result_id The result identifier.
 * @param int $field_number The field number. Field numbering starts at
 *   1.
 * @return string
 * @since PHP 4, PHP 5
 **/
function odbc_field_type($result_id, $field_number){}

/**
 * Retrieves a list of foreign keys in the specified table or a list of
 * foreign keys in other tables that refer to the primary key in the
 * specified table
 * 
 * @param resource $connection_id
 * @param string $pk_qualifier The primary key qualifier.
 * @param string $pk_owner The primary key owner.
 * @param string $pk_table The primary key table.
 * @param string $fk_qualifier The foreign key qualifier.
 * @param string $fk_owner The foreign key owner.
 * @param string $fk_table The foreign key table.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_foreignkeys($connection_id, $pk_qualifier, $pk_owner, $pk_table, $fk_qualifier, $fk_owner, $fk_table){}

/**
 * Free resources associated with a result.
 * 
 * {@link odbc_free_result} only needs to be called if you are worried
 * about using too much memory while your script is running. All result
 * memory will automatically be freed when the script is finished.
 * 
 * @param resource $result_id The result identifier.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_free_result($result_id){}

/**
 * Retrieves information about data types supported by the data source.
 * 
 * @param resource $connection_id
 * @param int $data_type The data type, which can be used to restrict
 *   the information to a single data type.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_gettypeinfo($connection_id, $data_type){}

/**
 * Enables handling of LONG and LONGVARBINARY columns.
 * 
 * @param resource $result_id The result identifier.
 * @param int $length The number of bytes returned to PHP is controlled
 *   by the parameter length. If it is set to 0, Long column data is
 *   passed through to the client.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_longreadlen($result_id, $length){}

/**
 * Checks if there are more result sets available as well as allowing
 * access to the next result set via {@link odbc_fetch_array}, {@link
 * odbc_fetch_row}, {@link odbc_result}, etc.
 * 
 * @param resource $result_id The result identifier.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function odbc_next_result($result_id){}

/**
 * Gets the number of fields (columns) in an ODBC result.
 * 
 * @param resource $result_id The result identifier returned by {@link
 *   odbc_exec}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_num_fields($result_id){}

/**
 * Gets the number of rows in a result. For INSERT, UPDATE and DELETE
 * statements {@link odbc_num_rows} returns the number of rows affected.
 * For a SELECT clause this can be the number of rows available.
 * 
 * @param resource $result_id The result identifier returned by {@link
 *   odbc_exec}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_num_rows($result_id){}

/**
 * Opens a persistent database connection.
 * 
 * This function is much like {@link odbc_connect}, except that the
 * connection is not really closed when the script has finished. Future
 * requests for a connection with the same {@link dsn}, {@link user},
 * {@link password} combination (via {@link odbc_connect} and {@link
 * odbc_pconnect}) can reuse the persistent connection.
 * 
 * @param string $dsn
 * @param string $user
 * @param string $password
 * @param int $cursor_type
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_pconnect($dsn, $user, $password, $cursor_type){}

/**
 * Prepares a statement for execution. The result identifier can be used
 * later to execute the statement with {@link odbc_execute}.
 * 
 * Some databases (such as IBM DB2, MS SQL Server, and Oracle) support
 * stored procedures that accept parameters of type IN, INOUT, and OUT as
 * defined by the ODBC specification. However, the Unified ODBC driver
 * currently only supports parameters of type IN to stored procedures.
 * 
 * @param resource $connection_id
 * @param string $query_string The query string statement being
 *   prepared.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_prepare($connection_id, $query_string){}

/**
 * Returns a result identifier that can be used to fetch the column names
 * that comprise the primary key for a table.
 * 
 * @param resource $connection_id
 * @param string $qualifier
 * @param string $owner
 * @param string $table
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_primarykeys($connection_id, $qualifier, $owner, $table){}

/**
 * Retrieve information about parameters to procedures.
 * 
 * @param resource $connection_id
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_procedurecolumns($connection_id){}

/**
 * Lists all procedures in the requested range.
 * 
 * @param resource $connection_id
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_procedures($connection_id){}

/**
 * Get result data
 * 
 * @param resource $result_id The ODBC resource.
 * @param mixed $field The field name being retrieved. It can either be
 *   an integer containing the column number of the field you want; or it
 *   can be a string containing the name of the field.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function odbc_result($result_id, $field){}

/**
 * Prints all rows from a result identifier produced by {@link
 * odbc_exec}. The result is printed in HTML table format.
 * 
 * @param resource $result_id The result identifier.
 * @param string $format Additional overall table formatting.
 * @return int
 * @since PHP 4, PHP 5
 **/
function odbc_result_all($result_id, $format){}

/**
 * Rolls back all pending statements on the connection.
 * 
 * @param resource $connection_id
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_rollback($connection_id){}

/**
 * This function allows fiddling with the ODBC options for a particular
 * connection or query result. It was written to help find work around to
 * problems in quirky ODBC drivers. You should probably only use this
 * function if you are an ODBC programmer and understand the effects the
 * various options will have. You will certainly need a good ODBC
 * reference to explain all the different options and values that can be
 * used. Different driver versions support different options.
 * 
 * Because the effects may vary depending on the ODBC driver, use of this
 * function in scripts to be made publicly available is strongly
 * discouraged. Also, some ODBC options are not available to this
 * function because they must be set before the connection is established
 * or the query is prepared. However, if on a particular job it can make
 * PHP work so your boss doesn't tell you to use a commercial product,
 * that's all that really matters.
 * 
 * @param resource $id Is a connection id or result id on which to
 *   change the settings. For SQLSetConnectOption(), this is a connection
 *   id. For SQLSetStmtOption(), this is a result id.
 * @param int $function Is the ODBC function to use. The value should
 *   be 1 for SQLSetConnectOption() and 2 for SQLSetStmtOption().
 * @param int $option The option to set.
 * @param int $param The value for the given {@link option}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function odbc_setoption($id, $function, $option, $param){}

/**
 * Retrieves either the optimal set of columns that uniquely identifies a
 * row in the table, or columns that are automatically updated when any
 * value in the row is updated by a transaction.
 * 
 * @param resource $connection_id
 * @param int $type
 * @param string $qualifier The qualifier.
 * @param string $owner The owner.
 * @param string $table The table.
 * @param int $scope The scope, which orders the result set.
 * @param int $nullable The nullable option.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_specialcolumns($connection_id, $type, $qualifier, $owner, $table, $scope, $nullable){}

/**
 * Get statistics about a table and its indexes.
 * 
 * @param resource $connection_id
 * @param string $qualifier The qualifier.
 * @param string $owner The owner.
 * @param string $table_name The table name.
 * @param int $unique The unique attribute.
 * @param int $accuracy The accuracy.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_statistics($connection_id, $qualifier, $owner, $table_name, $unique, $accuracy){}

/**
 * Lists tables in the requested range and the privileges associated with
 * each table.
 * 
 * @param resource $connection_id
 * @param string $qualifier The qualifier.
 * @param string $owner The owner. Accepts the following search
 *   patterns: ('%' to match zero or more characters and '_' to match a
 *   single character)
 * @param string $name The name. Accepts the following search patterns:
 *   ('%' to match zero or more characters and '_' to match a single
 *   character)
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_tableprivileges($connection_id, $qualifier, $owner, $name){}

/**
 * Lists all tables in the requested range.
 * 
 * To support enumeration of qualifiers, owners, and table types, the
 * following special semantics for the {@link qualifier}, {@link owner},
 * {@link name}, and {@link table_type} are available: If {@link
 * qualifier} is a single percent character (%) and {@link owner} and
 * {@link name} are empty strings, then the result set contains a list of
 * valid qualifiers for the data source. (All columns except the
 * TABLE_QUALIFIER column contain NULLs.) If {@link owner} is a single
 * percent character (%) and {@link qualifier} and {@link name} are empty
 * strings, then the result set contains a list of valid owners for the
 * data source. (All columns except the TABLE_OWNER column contain
 * NULLs.) If {@link table_type} is a single percent character (%) and
 * {@link qualifier}, {@link owner} and {@link name} are empty strings,
 * then the result set contains a list of valid table types for the data
 * source. (All columns except the TABLE_TYPE column contain NULLs.)
 * 
 * @param resource $connection_id
 * @param string $qualifier The qualifier.
 * @param string $owner The owner. Accepts search patterns ('%' to
 *   match zero or more characters and '_' to match a single character).
 * @param string $name The name. Accepts search patterns ('%' to match
 *   zero or more characters and '_' to match a single character).
 * @param string $types If {@link table_type} is not an empty string,
 *   it must contain a list of comma-separated values for the types of
 *   interest; each value may be enclosed in single quotes (') or
 *   unquoted. For example, "'TABLE','VIEW'" or "TABLE, VIEW". If the
 *   data source does not support a specified table type, {@link
 *   odbc_tables} does not return any results for that type.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function odbc_tables($connection_id, $qualifier, $owner, $name, $types){}

/**
 * @return resource
 * @since PECL openal >= 0.1.0
 **/
function openal_buffer_create(){}

/**
 * @param resource $buffer An Open AL(Buffer) resource (previously
 *   created by {@link openal_buffer_create}).
 * @param int $format Format of {@link data}, one of: AL_FORMAT_MONO8,
 *   AL_FORMAT_MONO16, AL_FORMAT_STEREO8 AL_FORMAT_STEREO16
 * @param string $data Block of binary audio data in the {@link format}
 *   and {@link freq} specified.
 * @param int $freq Frequency of {@link data} given in Hz.
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_buffer_data($buffer, $format, $data, $freq){}

/**
 * @param resource $buffer An Open AL(Buffer) resource (previously
 *   created by {@link openal_buffer_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_buffer_destroy($buffer){}

/**
 * @param resource $buffer An Open AL(Buffer) resource (previously
 *   created by {@link openal_buffer_create}).
 * @param int $property Specific property, one of: AL_FREQUENCY,
 *   AL_BITS, AL_CHANNELS AL_SIZE.
 * @return int
 * @since PECL openal >= 0.1.0
 **/
function openal_buffer_get($buffer, $property){}

/**
 * @param resource $buffer An Open AL(Buffer) resource (previously
 *   created by {@link openal_buffer_create}).
 * @param string $wavfile Path to .wav file on local file system.
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_buffer_loadwav($buffer, $wavfile){}

/**
 * @param resource $device An Open AL(Device) resource (previously
 *   created by {@link openal_device_open}).
 * @return resource
 * @since PECL openal >= 0.1.0
 **/
function openal_context_create($device){}

/**
 * @param resource $context An Open AL(Context) resource (previously
 *   created by {@link openal_context_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_context_current($context){}

/**
 * @param resource $context An Open AL(Context) resource (previously
 *   created by {@link openal_context_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_context_destroy($context){}

/**
 * @param resource $context An Open AL(Context) resource (previously
 *   created by {@link openal_context_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_context_process($context){}

/**
 * @param resource $context An Open AL(Context) resource (previously
 *   created by {@link openal_context_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_context_suspend($context){}

/**
 * @param resource $device An Open AL(Device) resource (previously
 *   created by {@link openal_device_open}) to be closed.
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_device_close($device){}

/**
 * @param string $device_desc Open an audio device optionally specified
 *   by {@link device_desc}. If {@link device_desc} is not specified the
 *   first available audio device will be used.
 * @return resource
 * @since PECL openal >= 0.1.0
 **/
function openal_device_open($device_desc){}

/**
 * @param int $property Property to retrieve, one of: AL_GAIN (float),
 *   AL_POSITION (array(float,float,float)), AL_VELOCITY
 *   (array(float,float,float)) AL_ORIENTATION
 *   (array(float,float,float)).
 * @return mixed
 * @since PECL openal >= 0.1.0
 **/
function openal_listener_get($property){}

/**
 * @param int $property Property to set, one of: AL_GAIN (float),
 *   AL_POSITION (array(float,float,float)), AL_VELOCITY
 *   (array(float,float,float)) AL_ORIENTATION
 *   (array(float,float,float)).
 * @param mixed $setting Value to set, either float, or an array of
 *   floats as appropriate.
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_listener_set($property, $setting){}

/**
 * @return resource
 * @since PECL openal >= 0.1.0
 **/
function openal_source_create(){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_source_destroy($source){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @param int $property Property to get, one of: AL_SOURCE_RELATIVE
 *   (int), AL_SOURCE_STATE (int), AL_PITCH (float), AL_GAIN (float),
 *   AL_MIN_GAIN (float), AL_MAX_GAIN (float), AL_MAX_DISTANCE (float),
 *   AL_ROLLOFF_FACTOR (float), AL_CONE_OUTER_GAIN (float),
 *   AL_CONE_INNER_ANGLE (float), AL_CONE_OUTER_ANGLE (float),
 *   AL_REFERENCE_DISTANCE (float), AL_POSITION
 *   (array(float,float,float)), AL_VELOCITY (array(float,float,float)),
 *   AL_DIRECTION (array(float,float,float)).
 * @return mixed
 * @since PECL openal >= 0.1.0
 **/
function openal_source_get($source, $property){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_source_pause($source){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_source_play($source){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_source_rewind($source){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @param int $property Property to set, one of: AL_BUFFER
 *   (OpenAL(Source)), AL_LOOPING (bool), AL_SOURCE_RELATIVE (int),
 *   AL_SOURCE_STATE (int), AL_PITCH (float), AL_GAIN (float),
 *   AL_MIN_GAIN (float), AL_MAX_GAIN (float), AL_MAX_DISTANCE (float),
 *   AL_ROLLOFF_FACTOR (float), AL_CONE_OUTER_GAIN (float),
 *   AL_CONE_INNER_ANGLE (float), AL_CONE_OUTER_ANGLE (float),
 *   AL_REFERENCE_DISTANCE (float), AL_POSITION
 *   (array(float,float,float)), AL_VELOCITY (array(float,float,float)),
 *   AL_DIRECTION (array(float,float,float)).
 * @param mixed $setting Value to assign to specified {@link property}.
 *   Refer to the description of {@link property} for a description of
 *   the value(s) expected.
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_source_set($source, $property, $setting){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @return bool
 * @since PECL openal >= 0.1.0
 **/
function openal_source_stop($source){}

/**
 * @param resource $source An Open AL(Source) resource (previously
 *   created by {@link openal_source_create}).
 * @param int $format Format of {@link data}, one of: AL_FORMAT_MONO8,
 *   AL_FORMAT_MONO16, AL_FORMAT_STEREO8 AL_FORMAT_STEREO16
 * @param int $rate Frequency of data to stream given in Hz.
 * @return resource
 * @since PECL openal >= 0.1.0
 **/
function openal_stream($source, $format, $rate){}

/**
 * Opens up a directory handle to be used in subsequent {@link closedir},
 * {@link readdir}, and {@link rewinddir} calls.
 * 
 * @param string $path The directory path that is to be opened
 * @param resource $context For a description of the {@link context}
 *   parameter, refer to the streams section of the manual.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function opendir($path, $context){}

/**
 * {@link openlog} opens a connection to the system logger for a program.
 * 
 * The use of {@link openlog} is optional. It will automatically be
 * called by {@link syslog} if necessary, in which case {@link ident}
 * will default to .
 * 
 * @param string $ident The string {@link ident} is added to each
 *   message.
 * @param int $option The {@link option} argument is used to indicate
 *   what logging options will be used when generating a log message.
 *   {@link openlog} Options Constant Description LOG_CONS if there is an
 *   error while sending data to the system logger, write directly to the
 *   system console LOG_NDELAY open the connection to the logger
 *   immediately LOG_ODELAY (default) delay opening the connection until
 *   the first message is logged LOG_PERROR print log message also to
 *   standard error LOG_PID include PID with each message You can use one
 *   or more of this options. When using multiple options you need to OR
 *   them, i.e. to open the connection immediately, write to the console
 *   and include the PID in each message, you will use: LOG_CONS |
 *   LOG_NDELAY | LOG_PID
 * @param int $facility The {@link facility} argument is used to
 *   specify what type of program is logging the message. This allows you
 *   to specify (in your machine's syslog configuration) how messages
 *   coming from different facilities will be handled. {@link openlog}
 *   Facilities Constant Description LOG_AUTH security/authorization
 *   messages (use LOG_AUTHPRIV instead in systems where that constant is
 *   defined) LOG_AUTHPRIV security/authorization messages (private)
 *   LOG_CRON clock daemon (cron and at) LOG_DAEMON other system daemons
 *   LOG_KERN kernel messages LOG_LOCAL0 ... LOG_LOCAL7 reserved for
 *   local use, these are not available in Windows LOG_LPR line printer
 *   subsystem LOG_MAIL mail subsystem LOG_NEWS USENET news subsystem
 *   LOG_SYSLOG messages generated internally by syslogd LOG_USER generic
 *   user-level messages LOG_UUCP UUCP subsystem
 * @return bool
 * @since PHP 4, PHP 5
 **/
function openlog($ident, $option, $facility){}

/**
 * {@link openssl_csr_export} takes the Certificate Signing Request
 * represented by {@link csr} and stores it as ascii-armoured text into
 * {@link out}, which is passed by reference.
 * 
 * @param resource $csr
 * @param string $out
 * @param bool $notext
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_csr_export($csr, &$out, $notext){}

/**
 * {@link openssl_csr_export_to_file} takes the Certificate Signing
 * Request represented by {@link csr} and saves it as ascii-armoured text
 * into the file named by {@link outfilename}.
 * 
 * @param resource $csr
 * @param string $outfilename Path to the output file.
 * @param bool $notext
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_csr_export_to_file($csr, $outfilename, $notext){}

/**
 * @param mixed $csr
 * @param bool $use_shortnames
 * @return resource
 * @since PHP 5 >= 5.2.0
 **/
function openssl_csr_get_public_key($csr, $use_shortnames){}

/**
 * @param mixed $csr
 * @param bool $use_shortnames
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function openssl_csr_get_subject($csr, $use_shortnames){}

/**
 * {@link openssl_csr_new} generates a new CSR (Certificate Signing
 * Request) based on the information provided by {@link dn}, which
 * represents the Distinguished Name to be used in the certificate.
 * 
 * @param array $dn The Distinguished Name to be used in the
 *   certificate.
 * @param resource $privkey {@link privkey} should be set to a private
 *   key that was previously generated by {@link openssl_pkey_new} (or
 *   otherwise obtained from the other openssl_pkey family of functions).
 *   The corresponding public portion of the key will be used to sign the
 *   CSR.
 * @param array $configargs By default, the information in your system
 *   openssl.conf is used to initialize the request; you can specify a
 *   configuration file section by setting the config_section_section key
 *   of {@link configargs}. You can also specify an alternative openssl
 *   configuration file by setting the value of the config key to the
 *   path of the file you want to use. The following keys, if present in
 *   {@link configargs} behave as their equivalents in the openssl.conf,
 *   as listed in the table below. Configuration overrides {@link
 *   configargs} key type openssl.conf equivalent description digest_alg
 *   string default_md Selects which digest method to use x509_extensions
 *   string x509_extensions Selects which extensions should be used when
 *   creating an x509 certificate req_extensions string req_extensions
 *   Selects which extensions should be used when creating a CSR
 *   private_key_bits integer default_bits Specifies how many bits should
 *   be used to generate a private key private_key_type integer none
 *   Specifies the type of private key to create. This can be one of
 *   OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH or OPENSSL_KEYTYPE_RSA. The
 *   default value is OPENSSL_KEYTYPE_RSA which is currently the only
 *   supported key type. encrypt_key boolean encrypt_key Should an
 *   exported key (with passphrase) be encrypted?
 * @param array $extraattribs {@link extraattribs} is used to specify
 *   additional configuration options for the CSR. Both {@link dn} and
 *   {@link extraattribs} are associative arrays whose keys are converted
 *   to OIDs and applied to the relevant part of the request.
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_csr_new($dn, &$privkey, $configargs, $extraattribs){}

/**
 * {@link openssl_csr_sign} generates an x509 certificate resource from
 * the given CSR.
 * 
 * @param mixed $csr A CSR previously generated by {@link
 *   openssl_csr_new}. It can also be the path to a PEM encoded CSR when
 *   specified as file://path/to/csr or an exported string generated by
 *   {@link openssl_csr_export}.
 * @param mixed $cacert The generated certificate will be signed by
 *   {@link cacert}. If {@link cacert} is , the generated certificate
 *   will be a self-signed certificate.
 * @param mixed $priv_key {@link priv_key} is the private key that
 *   corresponds to {@link cacert}.
 * @param int $days {@link days} specifies the length of time for which
 *   the generated certificate will be valid, in days.
 * @param array $configargs You can finetune the CSR signing by {@link
 *   configargs}. See {@link openssl_csr_new} for more information about
 *   {@link configargs}.
 * @param int $serial An optional the serial number of issued
 *   certificate. If not specified it will default to 0.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_csr_sign($csr, $cacert, $priv_key, $days, $configargs, $serial){}

/**
 * Takes a raw or base64 encoded string and decrypts it using a given
 * method and key.
 * 
 * @param string $data The data.
 * @param string $method The cipher method.
 * @param string $password The password.
 * @param string $raw_input Setting to will take a raw encoded string,
 *   otherwise a base64 string is assumed for the {@link data} parameter.
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function openssl_decrypt($data, $method, $password, $raw_input){}

/**
 * @param string $pub_key Public key
 * @param resource $dh_key DH key
 * @return string
 **/
function openssl_dh_compute_key($pub_key, $dh_key){}

/**
 * Computes a digest hash value for the given data using a given method,
 * and returns a raw or binhex encoded string.
 * 
 * @param string $data The data.
 * @param string $method The digest method.
 * @param bool $raw_output Setting to will return as raw output data,
 *   otherwise the return value is binhex encoded.
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function openssl_digest($data, $method, $raw_output){}

/**
 * Encrypts given data with given method and key, returns a raw or base64
 * encoded string
 * 
 * @param string $data The data.
 * @param string $method The cipher method.
 * @param string $password The password.
 * @param bool $raw_output Setting to will return as raw output data,
 *   otherwise the return value is base64 encoded.
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function openssl_encrypt($data, $method, $password, $raw_output){}

/**
 * {@link openssl_error_string} returns the last error from the openSSL
 * library. Error messages are stacked, so this function should be called
 * multiple times to collect all of the information.
 * 
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_error_string(){}

/**
 * {@link openssl_free_key} frees the key associated with the specified
 * {@link key_identifier} from memory.
 * 
 * @param resource $key_identifier
 * @return void
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_free_key($key_identifier){}

/**
 * Gets a list of available cipher methods.
 * 
 * @param bool $aliases Set to if cipher aliases should be included
 *   within the returned array.
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function openssl_get_cipher_methods($aliases){}

/**
 * Gets a list of available digest methods.
 * 
 * @param bool $aliases Set to if digest aliases should be included
 *   within the returned array.
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function openssl_get_md_methods($aliases){}

/**
 * {@link openssl_get_privatekey} parses {@link key} and prepares it for
 * use by other functions.
 * 
 * @param mixed $key {@link key} can be one of the following: a string
 *   having the format file://path/to/file.pem. The named file must
 *   contain a PEM encoded certificate/private key (it may contain both).
 *   A PEM formatted private key.
 * @param string $passphrase The optional parameter {@link passphrase}
 *   must be used if the specified key is encrypted (protected by a
 *   passphrase).
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_get_privatekey($key, $passphrase){}

/**
 * {@link openssl_get_publickey} extracts the public key from {@link
 * certificate} and prepares it for use by other functions.
 * 
 * @param mixed $certificate {@link certificate} can be one of the
 *   following: an X.509 certificate resource a string having the format
 *   file://path/to/file.pem. The named file must contain a PEM encoded
 *   certificate/private key (it may contain both). A PEM formatted
 *   private key.
 * @return resource
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_get_publickey($certificate){}

/**
 * {@link openssl_open} opens (decrypts) {@link sealed_data} using the
 * private key associated with the key identifier {@link priv_key_id} and
 * the envelope key {@link env_key}, and fills {@link open_data} with the
 * decrypted data. The envelope key is generated when the data are sealed
 * and can only be used by one specific private key. See {@link
 * openssl_seal} for more information.
 * 
 * @param string $sealed_data
 * @param string $open_data If the call is successful the opened data
 *   is returned in this parameter.
 * @param string $env_key
 * @param mixed $priv_key_id
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_open($sealed_data, &$open_data, $env_key, $priv_key_id){}

/**
 * Decrypts the S/MIME encrypted message contained in the file specified
 * by {@link infilename} using the certificate and its associated private
 * key specified by {@link recipcert} and {@link recipkey}.
 * 
 * @param string $infilename
 * @param string $outfilename The decrypted message is written to the
 *   file specified by {@link outfilename}.
 * @param mixed $recipcert
 * @param mixed $recipkey
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_pkcs7_decrypt($infilename, $outfilename, $recipcert, $recipkey){}

/**
 * {@link openssl_pkcs7_encrypt} takes the contents of the file named
 * {@link infile} and encrypts them using an RC2 40-bit cipher so that
 * they can only be read by the intended recipients specified by {@link
 * recipcerts}.
 * 
 * @param string $infile
 * @param string $outfile
 * @param mixed $recipcerts Either a lone X.509 certificate, or an
 *   array of X.509 certificates.
 * @param array $headers {@link headers} is an array of headers that
 *   will be prepended to the data after it has been encrypted. {@link
 *   headers} can be either an associative array keyed by header name, or
 *   an indexed array, where each element contains a single header line.
 * @param int $flags {@link flags} can be used to specify options that
 *   affect the encoding process - see PKCS7 constants.
 * @param int $cipherid Cipher can be selected with {@link cipherid}.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers, $flags, $cipherid){}

/**
 * {@link openssl_pkcs7_sign} takes the contents of the file named {@link
 * infilename} and signs them using the certificate and its matching
 * private key specified by {@link signcert} and {@link privkey}
 * parameters.
 * 
 * @param string $infilename
 * @param string $outfilename
 * @param mixed $signcert
 * @param mixed $privkey
 * @param array $headers {@link headers} is an array of headers that
 *   will be prepended to the data after it has been signed (see {@link
 *   openssl_pkcs7_encrypt} for more information about the format of this
 *   parameter).
 * @param int $flags {@link flags} can be used to alter the output -
 *   see PKCS7 constants.
 * @param string $extracerts {@link extracerts} specifies the name of a
 *   file containing a bunch of extra certificates to include in the
 *   signature which can for example be used to help the recipient to
 *   verify the certificate that you used.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_pkcs7_sign($infilename, $outfilename, $signcert, $privkey, $headers, $flags, $extracerts){}

/**
 * {@link openssl_pkcs7_verify} reads the S/MIME message contained in the
 * given file and examines the digital signature.
 * 
 * @param string $filename Path to the message.
 * @param int $flags {@link flags} can be used to affect how the
 *   signature is verified - see PKCS7 constants for more information.
 * @param string $outfilename If the {@link outfilename} is specified,
 *   it should be a string holding the name of a file into which the
 *   certificates of the persons that signed the messages will be stored
 *   in PEM format.
 * @param array $cainfo If the {@link cainfo} is specified, it should
 *   hold information about the trusted CA certificates to use in the
 *   verification process - see certificate verification for more
 *   information about this parameter.
 * @param string $extracerts If the {@link extracerts} is specified, it
 *   is the filename of a file containing a bunch of certificates to use
 *   as untrusted CAs.
 * @param string $content You can specify a filename with {@link
 *   content} that will be filled with the verified data, but with the
 *   signature information stripped.
 * @return mixed
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_pkcs7_verify($filename, $flags, $outfilename, $cainfo, $extracerts, $content){}

/**
 * {@link openssl_pkcs12_export} stores {@link x509} into a string named
 * by {@link out} in a PKCS#12 file format.
 * 
 * @param mixed $x509 On success, this will hold the PKCS#12.
 * @param string $out Private key component of PKCS#12 file.
 * @param mixed $priv_key Encryption password for unlocking the PKCS#12
 *   file.
 * @param string $pass
 * @param array $args
 * @return bool
 * @since PHP 5 >= 5.2.2
 **/
function openssl_pkcs12_export($x509, &$out, $priv_key, $pass, $args){}

/**
 * {@link openssl_pkcs12_export_to_file} stores {@link x509} into a file
 * named by {@link filename} in a PKCS#12 file format.
 * 
 * @param mixed $x509 Path to the output file.
 * @param string $filename Private key component of PKCS#12 file.
 * @param mixed $priv_key Encryption password for unlocking the PKCS#12
 *   file.
 * @param string $pass
 * @param array $args
 * @return bool
 * @since PHP 5 >= 5.2.2
 **/
function openssl_pkcs12_export_to_file($x509, $filename, $priv_key, $pass, $args){}

/**
 * {@link openssl_pkcs12_read} parses the PKCS#12 certificate store
 * supplied by {@link pkcs12} into a array named {@link certs}.
 * 
 * @param string $pkcs12
 * @param array $certs On success, this will hold the Certificate Store
 *   Data.
 * @param string $pass Encryption password for unlocking the PKCS#12
 *   file.
 * @return bool
 * @since PHP 5 >= 5.2.2
 **/
function openssl_pkcs12_read($pkcs12, &$certs, $pass){}

/**
 * {@link openssl_pkey_export} exports {@link key} as a PEM encoded
 * string and stores it into {@link out} (which is passed by reference).
 * 
 * @param mixed $key
 * @param string $out
 * @param string $passphrase The key is optionally protected by {@link
 *   passphrase}.
 * @param array $configargs {@link configargs} can be used to fine-tune
 *   the export process by specifying and/or overriding options for the
 *   openssl configuration file. See {@link openssl_csr_new} for more
 *   information about {@link configargs}.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_pkey_export($key, &$out, $passphrase, $configargs){}

/**
 * {@link openssl_pkey_export_to_file} saves an ascii-armoured (PEM
 * encoded) rendition of {@link key} into the file named by {@link
 * outfilename}.
 * 
 * @param mixed $key
 * @param string $outfilename Path to the output file.
 * @param string $passphrase The key can be optionally protected by a
 *   {@link passphrase}.
 * @param array $configargs {@link configargs} can be used to fine-tune
 *   the export process by specifying and/or overriding options for the
 *   openssl configuration file. See {@link openssl_csr_new} for more
 *   information about {@link configargs}.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_pkey_export_to_file($key, $outfilename, $passphrase, $configargs){}

/**
 * This function frees a private key created by {@link openssl_pkey_new}.
 * 
 * @param resource $key Resource holding the key.
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_pkey_free($key){}

/**
 * This function returns the key details (bits, key, type).
 * 
 * @param resource $key Resource holding the key.
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function openssl_pkey_get_details($key){}

/**
 * {@link openssl_get_privatekey} parses {@link key} and prepares it for
 * use by other functions.
 * 
 * @param mixed $key {@link key} can be one of the following: a string
 *   having the format file://path/to/file.pem. The named file must
 *   contain a PEM encoded certificate/private key (it may contain both).
 *   A PEM formatted private key.
 * @param string $passphrase The optional parameter {@link passphrase}
 *   must be used if the specified key is encrypted (protected by a
 *   passphrase).
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_pkey_get_private($key, $passphrase){}

/**
 * {@link openssl_get_publickey} extracts the public key from {@link
 * certificate} and prepares it for use by other functions.
 * 
 * @param mixed $certificate {@link certificate} can be one of the
 *   following: an X.509 certificate resource a string having the format
 *   file://path/to/file.pem. The named file must contain a PEM encoded
 *   certificate/private key (it may contain both). A PEM formatted
 *   private key.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_pkey_get_public($certificate){}

/**
 * {@link openssl_pkey_new} generates a new private and public key pair.
 * The public component of the key can be obtained using {@link
 * openssl_pkey_get_public}.
 * 
 * @param array $configargs You can finetune the key generation (such
 *   as specifying the number of bits) using {@link configargs}. See
 *   {@link openssl_csr_new} for more information about {@link
 *   configargs}.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_pkey_new($configargs){}

/**
 * {@link openssl_private_decrypt} decrypts {@link data} that was
 * previous encrypted via {@link openssl_public_encrypt} and stores the
 * result into {@link decrypted}.
 * 
 * You can use this function e.g. to decrypt data which were supposed
 * only to you.
 * 
 * @param string $data
 * @param string $decrypted
 * @param mixed $key {@link key} must be the private key corresponding
 *   that was used to encrypt the data.
 * @param int $padding {@link padding} can be one of
 *   OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING,
 *   OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_private_decrypt($data, &$decrypted, $key, $padding){}

/**
 * {@link openssl_private_encrypt} encrypts {@link data} with private
 * {@link key} and stores the result into {@link crypted}. Encrypted data
 * can be decrypted via {@link openssl_public_decrypt}.
 * 
 * This function can be used e.g. to sign data (or its hash) to prove
 * that it is not written by someone else.
 * 
 * @param string $data
 * @param string $crypted
 * @param mixed $key
 * @param int $padding {@link padding} can be one of
 *   OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_private_encrypt($data, &$crypted, $key, $padding){}

/**
 * {@link openssl_public_decrypt} decrypts {@link data} that was previous
 * encrypted via {@link openssl_private_encrypt} and stores the result
 * into {@link decrypted}.
 * 
 * You can use this function e.g. to check if the message was written by
 * the owner of the private key.
 * 
 * @param string $data
 * @param string $decrypted
 * @param mixed $key {@link key} must be the public key corresponding
 *   that was used to encrypt the data.
 * @param int $padding {@link padding} can be one of
 *   OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_public_decrypt($data, &$decrypted, $key, $padding){}

/**
 * {@link openssl_public_encrypt} encrypts {@link data} with public
 * {@link key} and stores the result into {@link crypted}. Encrypted data
 * can be decrypted via {@link openssl_private_decrypt}.
 * 
 * This function can be used e.g. to encrypt message which can be then
 * read only by owner of the private key. It can be also used to store
 * secure data in database.
 * 
 * @param string $data
 * @param string $crypted This will hold the result of the encryption.
 * @param mixed $key The public key.
 * @param int $padding {@link padding} can be one of
 *   OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING,
 *   OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.
 * @return bool
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_public_encrypt($data, &$crypted, $key, $padding){}

/**
 * Generates a string of pseudo-random bytes, with the number of bytes
 * determined by the {@link length} parameter.
 * 
 * It also indicates if a cryptographically strong algorithm was used to
 * produce the pseudo-random bytes, and does this via the optional {@link
 * crypto_strong} parameter. It's rare for this to be , but some systems
 * may be broken or old.
 * 
 * @param string $length The length of the desired string of bytes.
 *   Must be a positive integer. PHP will try to cast this parameter to a
 *   non-null integer to use it.
 * @param bool $crypto_strong If passed into the function, this will
 *   hold a boolean value that determines if the algorithm used was
 *   "cryptographically strong", e.g., safe for usage with GPG,
 *   passwords, etc. if it did, otherwise
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function openssl_random_pseudo_bytes($length, &$crypto_strong){}

/**
 * {@link openssl_seal} seals (encrypts) {@link data} by using RC4 with a
 * randomly generated secret key. The key is encrypted with each of the
 * public keys associated with the identifiers in {@link pub_key_ids} and
 * each encrypted key is returned in {@link env_keys}. This means that
 * one can send sealed data to multiple recipients (provided one has
 * obtained their public keys). Each recipient must receive both the
 * sealed data and the envelope key that was encrypted with the
 * recipient's public key.
 * 
 * @param string $data
 * @param string $sealed_data
 * @param array $env_keys
 * @param array $pub_key_ids
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_seal($data, &$sealed_data, &$env_keys, $pub_key_ids){}

/**
 * {@link openssl_sign} computes a signature for the specified {@link
 * data} by using SHA1 for hashing followed by encryption using the
 * private key associated with {@link priv_key_id}. Note that the data
 * itself is not encrypted.
 * 
 * @param string $data
 * @param string $signature If the call was successful the signature is
 *   returned in {@link signature}.
 * @param mixed $priv_key_id
 * @param int $signature_alg For more information see the list of
 *   Signature Algorithms.
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_sign($data, &$signature, $priv_key_id, $signature_alg){}

/**
 * {@link openssl_verify} verifies that the {@link signature} is correct
 * for the specified {@link data} using the public key associated with
 * {@link pub_key_id}. This must be the public key corresponding to the
 * private key used for signing.
 * 
 * @param string $data
 * @param string $signature
 * @param mixed $pub_key_id
 * @param int $signature_alg For more information see the list of
 *   Signature Algorithms.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function openssl_verify($data, $signature, $pub_key_id, $signature_alg){}

/**
 * {@link openssl_x509_checkpurpose} examines a certificate to see if it
 * can be used for the specified {@link purpose}.
 * 
 * @param mixed $x509cert The examined certificate.
 * @param int $purpose {@link openssl_x509_checkpurpose} purposes
 *   Constant Description X509_PURPOSE_SSL_CLIENT Can the certificate be
 *   used for the client side of an SSL connection?
 *   X509_PURPOSE_SSL_SERVER Can the certificate be used for the server
 *   side of an SSL connection? X509_PURPOSE_NS_SSL_SERVER Can the cert
 *   be used for Netscape SSL server? X509_PURPOSE_SMIME_SIGN Can the
 *   cert be used to sign S/MIME email? X509_PURPOSE_SMIME_ENCRYPT Can
 *   the cert be used to encrypt S/MIME email? X509_PURPOSE_CRL_SIGN Can
 *   the cert be used to sign a certificate revocation list (CRL)?
 *   X509_PURPOSE_ANY Can the cert be used for Any/All purposes? These
 *   options are not bitfields - you may specify one only!
 * @param array $cainfo {@link cainfo} should be an array of trusted CA
 *   files/dirs as described in Certificate Verification.
 * @param string $untrustedfile If specified, this should be the name
 *   of a PEM encoded file holding certificates that can be used to help
 *   verify the certificate, although no trust is placed in the
 *   certificates that come from that file.
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_x509_checkpurpose($x509cert, $purpose, $cainfo, $untrustedfile){}

/**
 * Checks whether the given {@link key} is the private key that
 * corresponds to {@link cert}.
 * 
 * @param mixed $cert The certificate.
 * @param mixed $key The private key.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_x509_check_private_key($cert, $key){}

/**
 * {@link openssl_x509_export} stores {@link x509} into a string named by
 * {@link output} in a PEM encoded format.
 * 
 * @param mixed $x509 On success, this will hold the PEM.
 * @param string $output
 * @param bool $notext
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_x509_export($x509, &$output, $notext){}

/**
 * {@link openssl_x509_export_to_file} stores {@link x509} into a file
 * named by {@link outfilename} in a PEM encoded format.
 * 
 * @param mixed $x509 Path to the output file.
 * @param string $outfilename
 * @param bool $notext
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function openssl_x509_export_to_file($x509, $outfilename, $notext){}

/**
 * {@link openssl_x509_free} frees the certificate associated with the
 * specified {@link x509cert} resource from memory.
 * 
 * @param resource $x509cert
 * @return void
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_x509_free($x509cert){}

/**
 * {@link openssl_x509_parse} returns information about the supplied
 * {@link x509cert}, including fields such as subject name, issuer name,
 * purposes, valid from and valid to dates etc.
 * 
 * @param mixed $x509cert
 * @param bool $shortnames {@link shortnames} controls how the data is
 *   indexed in the array - if {@link shortnames} is (the default) then
 *   fields will be indexed with the short name form, otherwise, the long
 *   name form will be used - e.g.: CN is the shortname form of
 *   commonName.
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_x509_parse($x509cert, $shortnames){}

/**
 * {@link openssl_x509_read} parses the certificate supplied by {@link
 * x509certdata} and returns a resource identifier for it.
 * 
 * @param mixed $x509certdata
 * @return resource
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function openssl_x509_read($x509certdata){}

/**
 * Returns the ASCII value of the first character of {@link string}.
 * 
 * This function complements {@link chr}.
 * 
 * @param string $string A character.
 * @return int
 * @since PHP 4, PHP 5
 **/
function ord($string){}

/**
 * This function adds another name/value pair to the URL rewrite
 * mechanism. The name and value will be added to URLs (as GET parameter)
 * and forms (as hidden input fields) the same way as the session ID when
 * transparent URL rewriting is enabled with session.use_trans_sid.
 * Please note that absolute URLs (http://example.com/..) aren't
 * rewritten.
 * 
 * This function's behavior is controlled by the url_rewriter.tags
 * parameter.
 * 
 * @param string $name The variable name.
 * @param string $value The variable value.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function output_add_rewrite_var($name, $value){}

/**
 * This function resets the URL rewriter and removes all rewrite
 * variables previously set by the {@link output_add_rewrite_var}
 * function or the session mechanism (if session.use_trans_sid was set on
 * {@link session_start}).
 * 
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function output_reset_rewrite_vars(){}

/**
 * The {@link overload} function will enable property and method call
 * overloading for a class identified by {@link class_name}.
 * 
 * @param string $class_name The overloaded class name, as a string
 * @return void
 * @since PHP 4 >= 4.3.0
 **/
function overload($class_name){}

/**
 * Overrides built-in functions by replacing them in the symbol table.
 * 
 * @param string $function_name The function to override.
 * @param string $function_args The function arguments, as a comma
 *   separated string. Usually you will want to pass this parameter, as
 *   well as the {@link function_code} parameter, as a single quote
 *   delimited string. The reason for using single quoted strings, is to
 *   protect the variable names from parsing, otherwise, if you use
 *   double quotes there will be a need to escape the variable names,
 *   e.g. \$your_var.
 * @param string $function_code The new code for the function.
 * @return bool
 * @since PECL apd >= 0.2
 **/
function override_function($function_name, $function_args, $function_code){}

/**
 * Closes the specified {@link connection} to Ovrimos. This has the
 * effect of rolling back uncommitted transactions.
 * 
 * @param int $connection The Ovrimos connection identifier, returned
 *   by {@link ovrimos_connect}.
 * @return void
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_close($connection){}

/**
 * Commits the transaction.
 * 
 * @param int $connection_id The Ovrimos connection identifier,
 *   returned by {@link ovrimos_connect}.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_commit($connection_id){}

/**
 * Connects to the specified database.
 * 
 * @param string $host A host name or IP address.
 * @param string $dborport Either a database name, or the port number
 *   to connect to.
 * @param string $user The user name.
 * @param string $password Password associated with {@link user}.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_connect($host, $dborport, $user, $password){}

/**
 * Gets the name of the cursor. Useful when wishing to perform positioned
 * updates or deletes.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_cursor($result_id){}

/**
 * Executes an SQL statement (query or update) and returns a result
 * identifier.
 * 
 * @param int $connection_id The Ovrimos connection identifier,
 *   returned by {@link ovrimos_connect}.
 * @param string $query The SQL statement. Evidently, it should not
 *   contain parameters. Use {@link ovrimos_prepare} for prepared
 *   statements.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_exec($connection_id, $query){}

/**
 * Executes a prepared statement.
 * 
 * @param int $result_id An Ovrimos result identifier prepared with
 *   {@link ovrimos_prepare}.
 * @param array $parameters_array If the prepared statement contained
 *   parameters (question marks in the statement), the correct number of
 *   parameters should be passed in an array.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_execute($result_id, $parameters_array){}

/**
 * Fetches a row from the given result set, into {@link result_array}.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param array $result_array You must provide an array by reference.
 *   It will be filled with the fetched values.
 * @param string $how Determines how the rows are fetched. This can be
 *   one of the following strings (case is not significant): Option Notes
 *   Next Forward direction from current position. This is the default
 *   value. Prev Backward direction from current position. First Forward
 *   direction from the start. Last Backward direction from the end.
 *   Absolute Absolute position from the start. Requires {@link
 *   rownumber}.
 * @param int $rownumber The row number, first one is 0. Only needed
 *   when {@link how} is set to Absolute.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_fetch_into($result_id, &$result_array, $how, $rownumber){}

/**
 * Fetches a row from the result set. Column values should be retrieved
 * with other calls.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param int $how Determines how the rows are fetched. This can be one
 *   of the following strings (case is not significant): Option Notes
 *   Next Forward direction from current position. This is the default
 *   value. Prev Backward direction from current position. First Forward
 *   direction from the start. Last Backward direction from the end.
 *   Absolute Absolute position from the start. Requires {@link
 *   rownumber}.
 * @param int $row_number The row number, first one is 0. Only needed
 *   when {@link how} is set to Absolute.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_fetch_row($result_id, $how, $row_number){}

/**
 * Gets the length of the specified output column.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param int $field_number The field number. Starts at 1.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_field_len($result_id, $field_number){}

/**
 * Returns the output column name at the index specified.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param int $field_number The field number. Starts at 1.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_field_name($result_id, $field_number){}

/**
 * Returns the 1-based index of the specified output column.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param string $field_name The field name.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_field_num($result_id, $field_name){}

/**
 * Returns the type of the output column
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param int $field_number A 1-based index.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_field_type($result_id, $field_number){}

/**
 * Frees the specified result identifier.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_free_result($result_id){}

/**
 * Specifies how many bytes are to be retrieved from long datatypes (long
 * varchar and long varbinary).
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param int $length The number of bytes to retrieve. Default is zero.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_longreadlen($result_id, $length){}

/**
 * Returns the number of columns in the specified result identifier.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_num_fields($result_id){}

/**
 * Gets the number of rows affected by update operations.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_num_rows($result_id){}

/**
 * Prepares an SQL statement.
 * 
 * @param int $connection_id The Ovrimos connection identifier,
 *   returned by {@link ovrimos_connect}.
 * @param string $query The SQL statement.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_prepare($connection_id, $query){}

/**
 * Retrieves the output column specified by {@link field}.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param mixed $field Either as a string with the field name or as an
 *   1-based index.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_result($result_id, $field){}

/**
 * Prints the whole result set as an HTML table.
 * 
 * @param int $result_id A result identifier, returned by {@link
 *   ovrimos_execute} or {@link ovrimos_exec}.
 * @param string $format Optional HTML attributes for the generated
 *   table element.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_result_all($result_id, $format){}

/**
 * Rolls back the transaction.
 * 
 * @param int $connection_id The Ovrimos connection identifier,
 *   returned by {@link ovrimos_connect}.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function ovrimos_rollback($connection_id){}

/**
 * Pack given arguments into binary string according to {@link format}.
 * 
 * The idea for this function was taken from Perl and all formatting
 * codes work the same as in Perl. However, there are some formatting
 * codes that are missing such as Perl's "u" format code.
 * 
 * Note that the distinction between signed and unsigned values only
 * affects the function {@link unpack}, where as function {@link pack}
 * gives the same result for signed and unsigned format codes.
 * 
 * Also note that PHP internally stores integer values as signed values
 * of a machine-dependent size. If you give it an unsigned integer value
 * too large to be stored that way it is converted to a float which often
 * yields an undesired result.
 * 
 * @param string $format The {@link format} string consists of format
 *   codes followed by an optional repeater argument. The repeater
 *   argument can be either an integer value or * for repeating to the
 *   end of the input data. For a, A, h, H the repeat count specifies how
 *   many characters of one data argument are taken, for @ it is the
 *   absolute position where to put the next data, for everything else
 *   the repeat count specifies how many data arguments are consumed and
 *   packed into the resulting binary string. Currently implemented
 *   formats are: {@link pack} format characters Code Description a
 *   NUL-padded string A SPACE-padded string h Hex string, low nibble
 *   first H Hex string, high nibble first csigned char C unsigned char s
 *   signed short (always 16 bit, machine byte order) S unsigned short
 *   (always 16 bit, machine byte order) n unsigned short (always 16 bit,
 *   big endian byte order) v unsigned short (always 16 bit, little
 *   endian byte order) i signed integer (machine dependent size and byte
 *   order) I unsigned integer (machine dependent size and byte order) l
 *   signed long (always 32 bit, machine byte order) L unsigned long
 *   (always 32 bit, machine byte order) N unsigned long (always 32 bit,
 *   big endian byte order) V unsigned long (always 32 bit, little endian
 *   byte order) f float (machine dependent size and representation) d
 *   double (machine dependent size and representation) x NUL byte X Back
 *   up one byte @ NUL-fill to absolute position
 * @param mixed $args
 * @return string
 * @since PHP 4, PHP 5
 **/
function pack($format, $args){}

/**
 * @param string $filename A string containing the name of the file to
 *   compile. Similar to the argument to {@link include}.
 * @param array $errors A 2D hash of errors (including fatal errors)
 *   encountered during compilation. Returned by reference.
 * @param int $options One of either PARSEKIT_QUIET or PARSEKIT_SIMPLE.
 *   To produce varying degrees of verbosity in the returned output.
 * @return array
 * @since PECL parsekit >= 0.2.0
 **/
function parsekit_compile_file($filename, &$errors, $options){}

/**
 * @param string $phpcode A string containing phpcode. Similar to the
 *   argument to {@link eval}.
 * @param array $errors A 2D hash of errors (including fatal errors)
 *   encountered during compilation. Returned by reference.
 * @param int $options One of either PARSEKIT_QUIET or PARSEKIT_SIMPLE.
 *   To produce varying degrees of verbosity in the returned output.
 * @return array
 * @since PECL parsekit >= 0.2.0
 **/
function parsekit_compile_string($phpcode, &$errors, $options){}

/**
 * @param mixed $function A string describing a function, or an array
 *   describing a class/method.
 * @return array
 * @since PECL parsekit >= 0.3.0
 **/
function parsekit_func_arginfo($function){}

/**
 * {@link parse_ini_file} loads in the ini file specified in {@link
 * filename}, and returns the settings in it in an associative array.
 * 
 * The structure of the ini file is the same as the 's.
 * 
 * @param string $filename The filename of the ini file being parsed.
 * @param bool $process_sections By setting the {@link
 *   process_sections} parameter to , you get a multidimensional array,
 *   with the section names and settings included. The default for {@link
 *   process_sections} is
 * @param int $scanner_mode Can either be INI_SCANNER_NORMAL (default)
 *   or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option
 *   values will not be parsed.
 * @return array
 * @since PHP 4, PHP 5
 **/
function parse_ini_file($filename, $process_sections, $scanner_mode){}

/**
 * {@link parse_ini_string} returns the settings in string {@link ini} in
 * an associative array.
 * 
 * The structure of the ini string is the same as the 's.
 * 
 * @param string $ini The contents of the ini file being parsed.
 * @param bool $process_sections By setting the {@link
 *   process_sections} parameter to , you get a multidimensional array,
 *   with the section names and settings included. The default for {@link
 *   process_sections} is
 * @param int $scanner_mode Can either be INI_SCANNER_NORMAL (default)
 *   or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option
 *   values will not be parsed.
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function parse_ini_string($ini, $process_sections, $scanner_mode){}

/**
 * Parses {@link str} as if it were the query string passed via a URL and
 * sets variables in the current scope.
 * 
 * @param string $str The input string.
 * @param array $arr If the second parameter {@link arr} is present,
 *   variables are stored in this variable as array elements instead.
 * @return void
 * @since PHP 4, PHP 5
 **/
function parse_str($str, &$arr){}

/**
 * This function parses a URL and returns an associative array containing
 * any of the various components of the URL that are present.
 * 
 * This function is not meant to validate the given URL, it only breaks
 * it up into the above listed parts. Partial URLs are also accepted,
 * {@link parse_url} tries its best to parse them correctly.
 * 
 * @param string $url The URL to parse. Invalid characters are replaced
 *   by _.
 * @param int $component Specify one of PHP_URL_SCHEME, PHP_URL_HOST,
 *   PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH,
 *   PHP_URL_QUERY or PHP_URL_FRAGMENT to retrieve just a specific URL
 *   component as a string.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function parse_url($url, $component){}

/**
 * The {@link passthru} function is similar to the {@link exec} function
 * in that it executes a {@link command}. This function should be used in
 * place of {@link exec} or {@link system} when the output from the Unix
 * command is binary data which needs to be passed directly back to the
 * browser. A common use for this is to execute something like the
 * pbmplus utilities that can output an image stream directly. By setting
 * the Content-type to image/gif and then calling a pbmplus program to
 * output a gif, you can create PHP scripts that output images directly.
 * 
 * @param string $command The command that will be executed.
 * @param int $return_var If the {@link return_var} argument is
 *   present, the return status of the Unix command will be placed here.
 * @return void
 * @since PHP 4, PHP 5
 **/
function passthru($command, &$return_var){}

/**
 * {@link pathinfo} returns an associative array containing information
 * about {@link path}.
 * 
 * @param string $path The path being checked.
 * @param int $options You can specify which elements are returned with
 *   optional parameter {@link options}. It composes from
 *   PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION and
 *   PATHINFO_FILENAME. It defaults to return all elements.
 * @return mixed
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function pathinfo($path, $options){}

/**
 * Closes a file pointer to a pipe opened by {@link popen}.
 * 
 * @param resource $handle The file pointer must be valid, and must
 *   have been returned by a successful call to {@link popen}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function pclose($handle){}

/**
 * Creates a timer that will send a SIGALRM signal to the process after
 * the given number of seconds. Any call to {@link pcntl_alarm} will
 * cancel any previously set alarm.
 * 
 * @param int $seconds The number of seconds to wait. If {@link
 *   seconds} is zero, no new alarm is created.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pcntl_alarm($seconds){}

/**
 * Executes the program with the given arguments.
 * 
 * @param string $path {@link path} must be the path to a binary
 *   executable or a script with a valid path pointing to an executable
 *   in the shebang ( #!/usr/local/bin/perl for example) as the first
 *   line. See your system's man execve(2) page for additional
 *   information.
 * @param array $args {@link args} is an array of argument strings
 *   passed to the program.
 * @param array $envs {@link envs} is an array of strings which are
 *   passed as environment to the program. The array is in the format of
 *   name => value, the key being the name of the environmental variable
 *   and the value being the value of that variable.
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pcntl_exec($path, $args, $envs){}

/**
 * The {@link pcntl_fork} function creates a child process that differs
 * from the parent process only in its PID and PPID. Please see your
 * system's fork(2) man page for specific details as to how fork works on
 * your system.
 * 
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_fork(){}

/**
 * {@link pcntl_getpriority} gets the priority of {@link pid}. Because
 * priority levels can differ between system types and kernel versions,
 * please see your system's getpriority(2) man page for specific details.
 * 
 * @param int $pid If not specified, the pid of the current process is
 *   used.
 * @param int $process_identifier One of PRIO_PGRP, PRIO_USER or
 *   PRIO_PROCESS.
 * @return int
 * @since PHP 5
 **/
function pcntl_getpriority($pid, $process_identifier){}

/**
 * {@link pcntl_setpriority} sets the priority of {@link pid}.
 * 
 * @param int $priority {@link priority} is generally a value in the
 *   range -20 to 20. The default priority is 0 while a lower numerical
 *   value causes more favorable scheduling. Because priority levels can
 *   differ between system types and kernel versions, please see your
 *   system's setpriority(2) man page for specific details.
 * @param int $pid If not specified, the pid of the current process is
 *   used.
 * @param int $process_identifier One of PRIO_PGRP, PRIO_USER or
 *   PRIO_PROCESS.
 * @return bool
 * @since PHP 5
 **/
function pcntl_setpriority($priority, $pid, $process_identifier){}

/**
 * The {@link pcntl_signal} function installs a new signal handler for
 * the signal indicated by {@link signo}.
 * 
 * @param int $signo The signal number.
 * @param callback $handler The signal handler which may be the name of
 *   a user created function, or method, or either of the two global
 *   constants SIG_IGN or SIG_DFL.
 * @param bool $restart_syscalls Specifies whether system call
 *   restarting should be used when this signal arrives.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_signal($signo, $handler, $restart_syscalls){}

/**
 * The {@link pcntl_signal_dispatch} function calls the signal handlers
 * installed by {@link pcntl_signal} for each pending signal.
 * 
 * @return bool
 * @since PHP 5 >= 5.3.0
 **/
function pcntl_signal_dispatch(){}

/**
 * The {@link pcntl_sigprocmask} function adds, removes or sets blocked
 * signals, depending on the {@link how} parameter.
 * 
 * @param int $how Sets the behavior of {@link pcntl_sigprocmask}.
 *   Possible values: SIG_BLOCK: Add the signals to the currently blocked
 *   signals. SIG_UNBLOCK: Remove the signals from the currently blocked
 *   signals. SIG_SETMASK: Replace the currently blocked signals by the
 *   given list of signals.
 * @param array $set List of signals.
 * @param array $oldset The {@link oldset} parameter is set to an array
 *   containing the list of the previously blocked signals.
 * @return bool
 * @since PHP 5 >= 5.3.0
 **/
function pcntl_sigprocmask($how, $set, &$oldset){}

/**
 * The {@link pcntl_sigtimedwait} function operates in exactly the same
 * way as {@link pcntl_sigwaitinfo} except that it takes two additional
 * parameters, {@link seconds} and {@link nanoseconds}, which enable an
 * upper bound to be placed on the time for which the script is
 * suspended.
 * 
 * @param array $set Array of signals to wait for.
 * @param array $siginfo The {@link siginfo} is set to an array
 *   containing informations about the signal. See {@link
 *   pcntl_sigwaitinfo}.
 * @param int $seconds Timeout in seconds.
 * @param int $nanoseconds Timeout in nanoseconds.
 * @return int
 * @since PHP 5 >= 5.3.0
 **/
function pcntl_sigtimedwait($set, &$siginfo, $seconds, $nanoseconds){}

/**
 * The {@link pcntl_sigwaitinfo} function suspends execution of the
 * calling script until one of the signals given in {@link set} are
 * delivered. If one of the signal is already pending (e.g. blocked by
 * {@link pcntl_sigprocmask}), {@link pcntl_sigwaitinfo} will return
 * immediately.
 * 
 * @param array $set Array of signals to wait for.
 * @param array $siginfo The {@link siginfo} parameter is set to an
 *   array containing informations about the signal. The following
 *   elements are set for all signals: signo: Signal number errno: An
 *   error number code: Signal code The following elements may be set for
 *   the SIGCHLD signal: status: Exit value or signal utime: User time
 *   consumed stime: System time consumed pid: Sending process ID uid:
 *   Real user ID of sending process The following elements may be set
 *   for the SIGILL, SIGFPE, SIGSEGV and SIGBUS signals: addr: Memory
 *   location which caused fault The following element may be set for the
 *   SIGPOLL signal: band: Band event fd: File descriptor number
 * @return int
 * @since PHP 5 >= 5.3.0
 **/
function pcntl_sigwaitinfo($set, &$siginfo){}

/**
 * The wait function suspends execution of the current process until a
 * child has exited, or until a signal is delivered whose action is to
 * terminate the current process or to call a signal handling function.
 * If a child has already exited by the time of the call (a so-called
 * "zombie" process), the function returns immediately. Any system
 * resources used by the child are freed. Please see your system's
 * wait(2) man page for specific details as to how wait works on your
 * system.
 * 
 * @param int $status {@link pcntl_wait} will store status information
 *   in the {@link status} parameter which can be evaluated using the
 *   following functions: {@link pcntl_wifexited}, {@link
 *   pcntl_wifstopped}, {@link pcntl_wifsignaled}, {@link
 *   pcntl_wexitstatus}, {@link pcntl_wtermsig} and {@link
 *   pcntl_wstopsig}.
 * @param int $options If wait3 is available on your system (mostly
 *   BSD-style systems), you can provide the optional {@link options}
 *   parameter. If this parameter is not provided, wait will be used for
 *   the system call. If wait3 is not available, providing a value for
 *   options will have no effect. The value of options is the value of
 *   zero or more of the following two constants OR'ed together: Possible
 *   values for {@link options} WNOHANG Return immediately if no child
 *   has exited. WUNTRACED Return for children which are stopped, and
 *   whose status has not been reported.
 * @return int
 * @since PHP 5
 **/
function pcntl_wait(&$status, $options){}

/**
 * Suspends execution of the current process until a child as specified
 * by the {@link pid} argument has exited, or until a signal is delivered
 * whose action is to terminate the current process or to call a signal
 * handling function.
 * 
 * If a child as requested by {@link pid} has already exited by the time
 * of the call (a so-called "zombie" process), the function returns
 * immediately. Any system resources used by the child are freed. Please
 * see your system's waitpid(2) man page for specific details as to how
 * waitpid works on your system.
 * 
 * @param int $pid The value of {@link pid} can be one of the
 *   following: possible values for {@link pid} < -1 wait for any child
 *   process whose process group ID is equal to the absolute value of
 *   {@link pid}. -1 wait for any child process; this is the same
 *   behaviour that the wait function exhibits. 0 wait for any child
 *   process whose process group ID is equal to that of the calling
 *   process. > 0 wait for the child whose process ID is equal to the
 *   value of {@link pid}.
 * @param int $status {@link pcntl_waitpid} will store status
 *   information in the {@link status} parameter which can be evaluated
 *   using the following functions: {@link pcntl_wifexited}, {@link
 *   pcntl_wifstopped}, {@link pcntl_wifsignaled}, {@link
 *   pcntl_wexitstatus}, {@link pcntl_wtermsig} and {@link
 *   pcntl_wstopsig}.
 * @param int $options The value of {@link options} is the value of
 *   zero or more of the following two global constants OR'ed together:
 *   possible values for {@link options} WNOHANG return immediately if no
 *   child has exited. WUNTRACED return for children which are stopped,
 *   and whose status has not been reported.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_waitpid($pid, &$status, $options){}

/**
 * Returns the return code of a terminated child. This function is only
 * useful if {@link pcntl_wifexited} returned .
 * 
 * @param int $status
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_wexitstatus($status){}

/**
 * Checks whether the child status code represents a normal exit.
 * 
 * @param int $status
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_wifexited($status){}

/**
 * Checks whether the child process exited because of a signal which was
 * not caught.
 * 
 * @param int $status
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_wifsignaled($status){}

/**
 * Checks whether the child process which caused the return is currently
 * stopped; this is only possible if the call to {@link pcntl_waitpid}
 * was done using the option WUNTRACED.
 * 
 * @param int $status
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_wifstopped($status){}

/**
 * Returns the number of the signal which caused the child to stop. This
 * function is only useful if {@link pcntl_wifstopped} returned .
 * 
 * @param int $status
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_wstopsig($status){}

/**
 * Returns the number of the signal that caused the child process to
 * terminate. This function is only useful if {@link pcntl_wifsignaled}
 * returned .
 * 
 * @param int $status
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function pcntl_wtermsig($status){}

/**
 * Activates a previously created structure element or other content
 * item.
 * 
 * @param resource $pdfdoc
 * @param int $id
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_activate_item($pdfdoc, $id){}

/**
 * Adds a link to a web resource.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_create_action} with {@link type=Launch} and {@link
 * PDF_create_annotation} with {@link type=Link} instead.
 * 
 * @param resource $pdfdoc
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $filename
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_add_launchlink($pdfdoc, $llx, $lly, $urx, $ury, $filename){}

/**
 * Add a link annotation to a target within the current PDF file.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_create_action} with {@link type=GoTo} and {@link
 * PDF_create_annotation} with {@link type=Link} instead.
 * 
 * @param resource $pdfdoc
 * @param float $lowerleftx
 * @param float $lowerlefty
 * @param float $upperrightx
 * @param float $upperrighty
 * @param int $page
 * @param string $dest
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_add_locallink($pdfdoc, $lowerleftx, $lowerlefty, $upperrightx, $upperrighty, $page, $dest){}

/**
 * Creates a named destination on an arbitrary page in the current
 * document.
 * 
 * @param resource $pdfdoc
 * @param string $name
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_add_nameddest($pdfdoc, $name, $optlist){}

/**
 * Sets an annotation for the current page.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_create_annotation} with {@link type=Text} instead.
 * 
 * @param resource $pdfdoc
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $contents
 * @param string $title
 * @param string $icon
 * @param int $open
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_add_note($pdfdoc, $llx, $lly, $urx, $ury, $contents, $title, $icon, $open){}

/**
 * Add a file link annotation to a PDF target.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_create_action} with {@link type=GoToR} and {@link
 * PDF_create_annotation} with {@link type=Link} instead.
 * 
 * @param resource $pdfdoc
 * @param float $bottom_left_x
 * @param float $bottom_left_y
 * @param float $up_right_x
 * @param float $up_right_y
 * @param string $filename
 * @param int $page
 * @param string $dest
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_add_pdflink($pdfdoc, $bottom_left_x, $bottom_left_y, $up_right_x, $up_right_y, $filename, $page, $dest){}

/**
 * Adds a cell to a new or existing table.
 * 
 * @param resource $pdfdoc
 * @param int $table
 * @param int $column
 * @param int $row
 * @param string $text
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_add_table_cell($pdfdoc, $table, $column, $row, $text, $optlist){}

/**
 * Creates a Textflow object, or adds text and explicit options to an
 * existing Textflow.
 * 
 * @param resource $pdfdoc
 * @param int $textflow
 * @param string $text
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_add_textflow($pdfdoc, $textflow, $text, $optlist){}

/**
 * Adds an existing image as thumbnail for the current page.
 * 
 * @param resource $pdfdoc
 * @param int $image
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_add_thumbnail($pdfdoc, $image){}

/**
 * Adds a weblink annotation to a target {@link url} on the Web.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_create_action} with {@link type=URI} and {@link
 * PDF_create_annotation} with {@link type=Link} instead.
 * 
 * @param resource $pdfdoc
 * @param float $lowerleftx
 * @param float $lowerlefty
 * @param float $upperrightx
 * @param float $upperrighty
 * @param string $url
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_add_weblink($pdfdoc, $lowerleftx, $lowerlefty, $upperrightx, $upperrighty, $url){}

/**
 * Adds a counterclockwise circular arc.
 * 
 * @param resource $p
 * @param float $x
 * @param float $y
 * @param float $r
 * @param float $alpha
 * @param float $beta
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_arc($p, $x, $y, $r, $alpha, $beta){}

/**
 * Except for the drawing direction, this function behaves exactly like
 * {@link PDF_arc}.
 * 
 * @param resource $p
 * @param float $x
 * @param float $y
 * @param float $r
 * @param float $alpha
 * @param float $beta
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_arcn($p, $x, $y, $r, $alpha, $beta){}

/**
 * Adds a file attachment annotation.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_create_annotation} with {@link type=FileAttachment} instead.
 * 
 * @param resource $pdfdoc
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $filename
 * @param string $description
 * @param string $author
 * @param string $mimetype
 * @param string $icon
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_attach_file($pdfdoc, $llx, $lly, $urx, $ury, $filename, $description, $author, $mimetype, $icon){}

/**
 * Creates a new PDF file subject to various options.
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_begin_document($pdfdoc, $filename, $optlist){}

/**
 * Starts a Type 3 font definition.
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @param float $a
 * @param float $b
 * @param float $c
 * @param float $d
 * @param float $e
 * @param float $f
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_begin_font($pdfdoc, $filename, $a, $b, $c, $d, $e, $f, $optlist){}

/**
 * Starts a glyph definition for a Type 3 font.
 * 
 * @param resource $pdfdoc
 * @param string $glyphname
 * @param float $wx
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_begin_glyph($pdfdoc, $glyphname, $wx, $llx, $lly, $urx, $ury){}

/**
 * Opens a structure element or other content item with attributes
 * supplied as options.
 * 
 * @param resource $pdfdoc
 * @param string $tag
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_begin_item($pdfdoc, $tag, $optlist){}

/**
 * Starts a layer for subsequent output on the page.
 * 
 * This function requires PDF 1.5.
 * 
 * @param resource $pdfdoc
 * @param int $layer
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_begin_layer($pdfdoc, $layer){}

/**
 * Adds a new page to the document.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_begin_page_ext} instead.
 * 
 * @param resource $pdfdoc
 * @param float $width
 * @param float $height
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_begin_page($pdfdoc, $width, $height){}

/**
 * Adds a new page to the document, and specifies various options. The
 * parameters {@link width} and {@link height} are the dimensions of the
 * new page in points.
 * 
 * Common Page Sizes in Points name size A0 2380 x 3368 A1 1684 x 2380 A2
 * 1190 x 1684 A3 842 x 1190 A4 595 x 842 A5 421 x 595 A6 297 x 421 B5
 * 501 x 709 letter (8.5" x 11") 612 x 792 legal (8.5" x 14") 612 x 1008
 * ledger (17" x 11") 1224 x 792 11" x 17" 792 x 1224
 * 
 * @param resource $pdfdoc
 * @param float $width
 * @param float $height
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_begin_page_ext($pdfdoc, $width, $height, $optlist){}

/**
 * Starts a new pattern definition.
 * 
 * @param resource $pdfdoc
 * @param float $width
 * @param float $height
 * @param float $xstep
 * @param float $ystep
 * @param int $painttype
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_begin_pattern($pdfdoc, $width, $height, $xstep, $ystep, $painttype){}

/**
 * Starts a new template definition.
 * 
 * This function is deprecated since PDFlib version 7, use {@link
 * PDF_begin_template_ext} instead.
 * 
 * @param resource $pdfdoc
 * @param float $width
 * @param float $height
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_begin_template($pdfdoc, $width, $height){}

/**
 * Starts a new template definition.
 * 
 * @param resource $pdfdoc
 * @param float $width
 * @param float $height
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_begin_template_ext($pdfdoc, $width, $height, $optlist){}

/**
 * Adds a circle.
 * 
 * @param resource $pdfdoc
 * @param float $x
 * @param float $y
 * @param float $r
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_circle($pdfdoc, $x, $y, $r){}

/**
 * Uses the current path as clipping path, and terminate the path.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_clip($p){}

/**
 * Closes the generated PDF file, and frees all document-related
 * resources.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_end_document} instead.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_close($p){}

/**
 * Closes the current path.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_closepath($p){}

/**
 * Closes the path, fills, and strokes it.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_closepath_fill_stroke($p){}

/**
 * Closes the path, and strokes it.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_closepath_stroke($p){}

/**
 * Closes an {@link image} retrieved with the {@link PDF_open_image}
 * function.
 * 
 * @param resource $p
 * @param int $image
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_close_image($p, $image){}

/**
 * Closes all open page handles, and closes the input PDF document.
 * 
 * This function is deprecated since PDFlib version 7, use {@link
 * PDF_close_pdi_document} instead.
 * 
 * @param resource $p
 * @param int $doc
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_close_pdi($p, $doc){}

/**
 * Closes the page handle, and frees all page-related resources.
 * 
 * @param resource $p
 * @param int $page
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_close_pdi_page($p, $page){}

/**
 * Concatenates a matrix to the current transformation matrix (CTM).
 * 
 * @param resource $p
 * @param float $a
 * @param float $b
 * @param float $c
 * @param float $d
 * @param float $e
 * @param float $f
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_concat($p, $a, $b, $c, $d, $e, $f){}

/**
 * Prints {@link text} at the next line.
 * 
 * @param resource $p
 * @param string $text
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_continue_text($p, $text){}

/**
 * Creates a 3D view.
 * 
 * This function requires PDF 1.6.
 * 
 * @param resource $pdfdoc
 * @param string $username
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_create_3dview($pdfdoc, $username, $optlist){}

/**
 * Creates an action which can be applied to various objects and events.
 * 
 * @param resource $pdfdoc
 * @param string $type
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_action($pdfdoc, $type, $optlist){}

/**
 * Creates a rectangular annotation on the current page.
 * 
 * @param resource $pdfdoc
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $type
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_annotation($pdfdoc, $llx, $lly, $urx, $ury, $type, $optlist){}

/**
 * Creates a bookmark subject to various options.
 * 
 * @param resource $pdfdoc
 * @param string $text
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_bookmark($pdfdoc, $text, $optlist){}

/**
 * Creates a form field on the current page subject to various options.
 * 
 * @param resource $pdfdoc
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $name
 * @param string $type
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_field($pdfdoc, $llx, $lly, $urx, $ury, $name, $type, $optlist){}

/**
 * Creates a form field group subject to various options.
 * 
 * @param resource $pdfdoc
 * @param string $name
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_fieldgroup($pdfdoc, $name, $optlist){}

/**
 * Creates a graphics state object subject to various options.
 * 
 * @param resource $pdfdoc
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_gstate($pdfdoc, $optlist){}

/**
 * Creates a named virtual read-only file from data provided in memory.
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @param string $data
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_pvf($pdfdoc, $filename, $data, $optlist){}

/**
 * Preprocesses text for later formatting and creates a textflow object.
 * 
 * @param resource $pdfdoc
 * @param string $text
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_create_textflow($pdfdoc, $text, $optlist){}

/**
 * Draws a Bezier curve from the current point, using 3 more control
 * points.
 * 
 * @param resource $p
 * @param float $x1
 * @param float $y1
 * @param float $x2
 * @param float $y2
 * @param float $x3
 * @param float $y3
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_curveto($p, $x1, $y1, $x2, $y2, $x3, $y3){}

/**
 * Creates a new layer definition.
 * 
 * This function requires PDF 1.5.
 * 
 * @param resource $pdfdoc
 * @param string $name
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_define_layer($pdfdoc, $name, $optlist){}

/**
 * Deletes a PDFlib object, and frees all internal resources.
 * 
 * @param resource $pdfdoc
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_delete($pdfdoc){}

/**
 * Deletes a named virtual file and frees its data structures (but not
 * the contents).
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_delete_pvf($pdfdoc, $filename){}

/**
 * Deletes a table and all associated data structures.
 * 
 * @param resource $pdfdoc
 * @param int $table
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_delete_table($pdfdoc, $table, $optlist){}

/**
 * Deletes a textflow and the associated data structures.
 * 
 * @param resource $pdfdoc
 * @param int $textflow
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_delete_textflow($pdfdoc, $textflow){}

/**
 * Adds a glyph name and/or Unicode value to a custom encoding.
 * 
 * @param resource $pdfdoc
 * @param string $encoding
 * @param int $slot
 * @param string $glyphname
 * @param int $uv
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_encoding_set_char($pdfdoc, $encoding, $slot, $glyphname, $uv){}

/**
 * Ends the current path without filling or stroking it.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_endpath($p){}

/**
 * Closes the generated PDF file and applies various options.
 * 
 * @param resource $pdfdoc
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_end_document($pdfdoc, $optlist){}

/**
 * Terminates a Type 3 font definition.
 * 
 * @param resource $pdfdoc
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_end_font($pdfdoc){}

/**
 * Terminates a glyph definition for a Type 3 font.
 * 
 * @param resource $pdfdoc
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_end_glyph($pdfdoc){}

/**
 * Closes a structure element or other content item.
 * 
 * @param resource $pdfdoc
 * @param int $id
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_end_item($pdfdoc, $id){}

/**
 * Deactivates all active layers.
 * 
 * This function requires PDF 1.5.
 * 
 * @param resource $pdfdoc
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_end_layer($pdfdoc){}

/**
 * Finishes the page.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_end_page($p){}

/**
 * Finishes a page, and applies various options.
 * 
 * @param resource $pdfdoc
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_end_page_ext($pdfdoc, $optlist){}

/**
 * Finishes the pattern definition.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_end_pattern($p){}

/**
 * Finishes a template definition.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_end_template($p){}

/**
 * Fills the interior of the current path with the current fill color.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_fill($p){}

/**
 * Fills an image block with variable data according to its properties.
 * 
 * This function is only available in the PDFlib Personalization Server
 * (PPS).
 * 
 * @param resource $pdfdoc
 * @param int $page
 * @param string $blockname
 * @param int $image
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fill_imageblock($pdfdoc, $page, $blockname, $image, $optlist){}

/**
 * Fills a PDF block with variable data according to its properties.
 * 
 * This function is only available in the PDFlib Personalization Server
 * (PPS).
 * 
 * @param resource $pdfdoc
 * @param int $page
 * @param string $blockname
 * @param int $contents
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fill_pdfblock($pdfdoc, $page, $blockname, $contents, $optlist){}

/**
 * Fills and strokes the current path with the current fill and stroke
 * color.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_fill_stroke($p){}

/**
 * Fills a text block with variable data according to its properties.
 * 
 * This function is only available in the PDFlib Personalization Server
 * (PPS).
 * 
 * @param resource $pdfdoc
 * @param int $page
 * @param string $blockname
 * @param string $text
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fill_textblock($pdfdoc, $page, $blockname, $text, $optlist){}

/**
 * Search for a font and prepare it for later use with {@link
 * PDF_setfont}. The metrics will be loaded, and if {@link embed} is
 * nonzero, the font file will be checked, but not yet used. {@link
 * encoding} is one of builtin, macroman, winansi, host, a user-defined
 * encoding name or the name of a CMap. Parameter {@link embed} is
 * optional before PHP 4.3.5 or with PDFlib less than 5.
 * 
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_load_font} instead.
 * 
 * @param resource $p
 * @param string $fontname
 * @param string $encoding
 * @param int $embed
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_findfont($p, $fontname, $encoding, $embed){}

/**
 * Places an image or template on the page, subject to various options.
 * 
 * @param resource $pdfdoc
 * @param int $image
 * @param float $x
 * @param float $y
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fit_image($pdfdoc, $image, $x, $y, $optlist){}

/**
 * Places an imported PDF page on the page, subject to various options.
 * 
 * @param resource $pdfdoc
 * @param int $page
 * @param float $x
 * @param float $y
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fit_pdi_page($pdfdoc, $page, $x, $y, $optlist){}

/**
 * Places a table on the page fully or partially.
 * 
 * @param resource $pdfdoc
 * @param int $table
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $optlist
 * @return string
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_fit_table($pdfdoc, $table, $llx, $lly, $urx, $ury, $optlist){}

/**
 * Formats the next portion of a textflow into a rectangular area.
 * 
 * @param resource $pdfdoc
 * @param int $textflow
 * @param float $llx
 * @param float $lly
 * @param float $urx
 * @param float $ury
 * @param string $optlist
 * @return string
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fit_textflow($pdfdoc, $textflow, $llx, $lly, $urx, $ury, $optlist){}

/**
 * Places a single line of text on the page, subject to various options.
 * 
 * @param resource $pdfdoc
 * @param string $text
 * @param float $x
 * @param float $y
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_fit_textline($pdfdoc, $text, $x, $y, $optlist){}

/**
 * Gets the name of the API function which threw the last exception or
 * failed.
 * 
 * @param resource $pdfdoc
 * @return string
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_get_apiname($pdfdoc){}

/**
 * Fetches the buffer containing the generated PDF data.
 * 
 * @param resource $p
 * @return string
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_get_buffer($p){}

/**
 * Gets the text of the last thrown exception or the reason for a failed
 * function call.
 * 
 * @param resource $pdfdoc
 * @return string
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_get_errmsg($pdfdoc){}

/**
 * Gets the number of the last thrown exception or the reason for a
 * failed function call.
 * 
 * @param resource $pdfdoc
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_get_errnum($pdfdoc){}

/**
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_get_value} with the parameter {@link major} instead.
 * 
 * @return int
 * @since PHP 4 >= 4.2.0, PECL pdflib >= 1.0.0
 **/
function PDF_get_majorversion(){}

/**
 * Returns the minor version number of the PDFlib version.
 * 
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_get_value} with the parameter {@link minor} instead.
 * 
 * @return int
 * @since PHP 4 >= 4.2.0, PECL pdflib >= 1.0.0
 **/
function PDF_get_minorversion(){}

/**
 * Gets the contents of some PDFlib parameter with string type.
 * 
 * @param resource $p
 * @param string $key
 * @param float $modifier
 * @return string
 * @since PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0
 **/
function PDF_get_parameter($p, $key, $modifier){}

/**
 * Gets the contents of a PDI document parameter with string type.
 * 
 * This function is deprecated since PDFlib version 7, use {@link
 * PDF_pcos_get_string} instead.
 * 
 * @param resource $p
 * @param string $key
 * @param int $doc
 * @param int $page
 * @param int $reserved
 * @return string
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_get_pdi_parameter($p, $key, $doc, $page, $reserved){}

/**
 * Gets the contents of a PDI document parameter with numerical type.
 * 
 * This function is deprecated since PDFlib version 7, use {@link
 * PDF_pcos_get_number} instead.
 * 
 * @param resource $p
 * @param string $key
 * @param int $doc
 * @param int $page
 * @param int $reserved
 * @return float
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_get_pdi_value($p, $key, $doc, $page, $reserved){}

/**
 * Gets the value of some PDFlib parameter with numerical type.
 * 
 * @param resource $p
 * @param string $key
 * @param float $modifier
 * @return float
 * @since PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0
 **/
function PDF_get_value($p, $key, $modifier){}

/**
 * Queries detailed information about a loaded font.
 * 
 * @param resource $pdfdoc
 * @param int $font
 * @param string $keyword
 * @param string $optlist
 * @return float
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_info_font($pdfdoc, $font, $keyword, $optlist){}

/**
 * Queries information about a matchbox on the current page.
 * 
 * @param resource $pdfdoc
 * @param string $boxname
 * @param int $num
 * @param string $keyword
 * @return float
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_info_matchbox($pdfdoc, $boxname, $num, $keyword){}

/**
 * Retrieves table information related to the most recently placed table
 * instance.
 * 
 * @param resource $pdfdoc
 * @param int $table
 * @param string $keyword
 * @return float
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_info_table($pdfdoc, $table, $keyword){}

/**
 * Queries the current state of a textflow.
 * 
 * @param resource $pdfdoc
 * @param int $textflow
 * @param string $keyword
 * @return float
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_info_textflow($pdfdoc, $textflow, $keyword){}

/**
 * Performs textline formatting and queries the resulting metrics.
 * 
 * @param resource $pdfdoc
 * @param string $text
 * @param string $keyword
 * @param string $optlist
 * @return float
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_info_textline($pdfdoc, $text, $keyword, $optlist){}

/**
 * Reset all color and graphics state parameters to their defaults.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_initgraphics($p){}

/**
 * Draws a line from the current point to another point.
 * 
 * @param resource $p
 * @param float $x
 * @param float $y
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_lineto($p, $x, $y){}

/**
 * Loads a 3D model from a disk-based or virtual file.
 * 
 * This function requires PDF 1.6.
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_load_3ddata($pdfdoc, $filename, $optlist){}

/**
 * Searches for a font and prepares it for later use.
 * 
 * @param resource $pdfdoc
 * @param string $fontname
 * @param string $encoding
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_load_font($pdfdoc, $fontname, $encoding, $optlist){}

/**
 * Searches for an ICC profile, and prepares it for later use.
 * 
 * @param resource $pdfdoc
 * @param string $profilename
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_load_iccprofile($pdfdoc, $profilename, $optlist){}

/**
 * Opens a disk-based or virtual image file subject to various options.
 * 
 * @param resource $pdfdoc
 * @param string $imagetype
 * @param string $filename
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_load_image($pdfdoc, $imagetype, $filename, $optlist){}

/**
 * Finds a built-in spot color name, or makes a named spot color from the
 * current fill color.
 * 
 * @param resource $p
 * @param string $spotname
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_makespotcolor($p, $spotname){}

/**
 * Sets the current point for graphics output.
 * 
 * @param resource $p
 * @param float $x
 * @param float $y
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_moveto($p, $x, $y){}

/**
 * Creates a new PDFlib object with default settings.
 * 
 * @return resource
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_new(){}

/**
 * Opens a raw CCITT image.
 * 
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_load_image} instead.
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @param int $width
 * @param int $height
 * @param int $BitReverse
 * @param int $k
 * @param int $Blackls1
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_open_ccitt($pdfdoc, $filename, $width, $height, $BitReverse, $k, $Blackls1){}

/**
 * Creates a new PDF file using the supplied file name.
 * 
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_begin_document} instead.
 * 
 * @param resource $p
 * @param string $filename
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_open_file($p, $filename){}

/**
 * Uses image data from a variety of data sources.
 * 
 * This function is deprecated since PDFlib version 5, use virtual files
 * and {@link PDF_load_image} instead.
 * 
 * @param resource $p
 * @param string $imagetype
 * @param string $source
 * @param string $data
 * @param int $length
 * @param int $width
 * @param int $height
 * @param int $components
 * @param int $bpc
 * @param string $params
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_open_image($p, $imagetype, $source, $data, $length, $width, $height, $components, $bpc, $params){}

/**
 * Opens an image file.
 * 
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_load_image} with the colorize, ignoremask, invert, mask, masked,
 * and page options instead.
 * 
 * @param resource $p
 * @param string $imagetype
 * @param string $filename
 * @param string $stringparam
 * @param int $intparam
 * @return int
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_open_image_file($p, $imagetype, $filename, $stringparam, $intparam){}

/**
 * This function is not supported by PDFlib GmbH.
 * 
 * @param resource $p
 * @param resource $image
 * @return int
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_open_memory_image($p, $image){}

/**
 * Opens a disk-based or virtual PDF document and prepares it for later
 * use.
 * 
 * This function is deprecated since PDFlib version 7, use {@link
 * PDF_open_pdi_document} instead.
 * 
 * @param resource $pdfdoc
 * @param string $filename
 * @param string $optlist
 * @param int $len
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_open_pdi($pdfdoc, $filename, $optlist, $len){}

/**
 * Prepares a page for later use with {@link PDF_fit_pdi_page}.
 * 
 * @param resource $p
 * @param int $doc
 * @param int $pagenumber
 * @param string $optlist
 * @return int
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_open_pdi_page($p, $doc, $pagenumber, $optlist){}

/**
 * Gets the value of a pCOS path with type number or boolean.
 * 
 * @param resource $p
 * @param int $doc
 * @param string $path
 * @return float
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_pcos_get_number($p, $doc, $path){}

/**
 * Gets the contents of a pCOS path with type stream, fstream, or string.
 * 
 * @param resource $p
 * @param int $doc
 * @param string $optlist
 * @param string $path
 * @return string
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_pcos_get_stream($p, $doc, $optlist, $path){}

/**
 * Gets the value of a pCOS path with type name, string, or boolean.
 * 
 * @param resource $p
 * @param int $doc
 * @param string $path
 * @return string
 * @since PECL pdflib >= 2.1.0
 **/
function PDF_pcos_get_string($p, $doc, $path){}

/**
 * Places an image and scales it.
 * 
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_fit_image} instead.
 * 
 * @param resource $pdfdoc
 * @param int $image
 * @param float $x
 * @param float $y
 * @param float $scale
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_place_image($pdfdoc, $image, $x, $y, $scale){}

/**
 * Places a PDF page and scales it.
 * 
 * This function is deprecated since PDFlib version 5, use {@link
 * PDF_fit_pdi_page} instead.
 * 
 * @param resource $pdfdoc
 * @param int $page
 * @param float $x
 * @param float $y
 * @param float $sx
 * @param float $sy
 * @return bool
 * @since PHP 4 >= 4.0.6, PECL pdflib >= 1.0.0
 **/
function PDF_place_pdi_page($pdfdoc, $page, $x, $y, $sx, $sy){}

/**
 * Processes certain elements of an imported PDF document.
 * 
 * @param resource $pdfdoc
 * @param int $doc
 * @param int $page
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_process_pdi($pdfdoc, $doc, $page, $optlist){}

/**
 * Draws a rectangle.
 * 
 * @param resource $p
 * @param float $x
 * @param float $y
 * @param float $width
 * @param float $height
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_rect($p, $x, $y, $width, $height){}

/**
 * Restores the most recently saved graphics state.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_restore($p){}

/**
 * Resumes a page to add more content to it.
 * 
 * @param resource $pdfdoc
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_resume_page($pdfdoc, $optlist){}

/**
 * Rotates the coordinate system.
 * 
 * @param resource $p
 * @param float $phi
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_rotate($p, $phi){}

/**
 * Saves the current graphics state.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_save($p){}

/**
 * Scales the coordinate system.
 * 
 * @param resource $p
 * @param float $sx
 * @param float $sy
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_scale($p, $sx, $sy){}

/**
 * Sets the current color space and color.
 * 
 * @param resource $p
 * @param string $fstype
 * @param string $colorspace
 * @param float $c1
 * @param float $c2
 * @param float $c3
 * @param float $c4
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_setcolor($p, $fstype, $colorspace, $c1, $c2, $c3, $c4){}

/**
 * Sets the current dash pattern to {@link b} black and {@link w} white
 * units.
 * 
 * @param resource $pdfdoc
 * @param float $b
 * @param float $w
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setdash($pdfdoc, $b, $w){}

/**
 * Sets a dash pattern defined by an option list.
 * 
 * @param resource $pdfdoc
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_setdashpattern($pdfdoc, $optlist){}

/**
 * Sets the flatness parameter.
 * 
 * @param resource $pdfdoc
 * @param float $flatness
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setflat($pdfdoc, $flatness){}

/**
 * Sets the current font in the specified {@link size}, using a {@link
 * font} handle returned by {@link PDF_load_font}.
 * 
 * @param resource $pdfdoc
 * @param int $font
 * @param float $fontsize
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_setfont($pdfdoc, $font, $fontsize){}

/**
 * Sets the current fill and stroke color to a gray value between 0 and 1
 * inclusive.
 * 
 * This function is deprecated since PDFlib version 4, use {@link
 * PDF_setcolor} instead.
 * 
 * @param resource $p
 * @param float $g
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setgray($p, $g){}

/**
 * Sets the current fill color to a gray value between 0 and 1 inclusive.
 * 
 * This function is deprecated since PDFlib version 4, use {@link
 * PDF_setcolor} instead.
 * 
 * @param resource $p
 * @param float $g
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setgray_fill($p, $g){}

/**
 * Sets the current stroke color to a gray value between 0 and 1
 * inclusive.
 * 
 * This function is deprecated since PDFlib version 4, use {@link
 * PDF_setcolor} instead.
 * 
 * @param resource $p
 * @param float $g
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setgray_stroke($p, $g){}

/**
 * Sets the {@link linecap} parameter to control the shape at the end of
 * a path with respect to stroking.
 * 
 * @param resource $p
 * @param int $linecap
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setlinecap($p, $linecap){}

/**
 * Sets the {@link linejoin} parameter to specify the shape at the
 * corners of paths that are stroked.
 * 
 * @param resource $p
 * @param int $value
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setlinejoin($p, $value){}

/**
 * Sets the current line width.
 * 
 * @param resource $p
 * @param float $width
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setlinewidth($p, $width){}

/**
 * Explicitly sets the current transformation matrix.
 * 
 * @param resource $p
 * @param float $a
 * @param float $b
 * @param float $c
 * @param float $d
 * @param float $e
 * @param float $f
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL pdflib >= 1.0.0
 **/
function PDF_setmatrix($p, $a, $b, $c, $d, $e, $f){}

/**
 * Sets the miter limit.
 * 
 * @param resource $pdfdoc
 * @param float $miter
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setmiterlimit($pdfdoc, $miter){}

/**
 * Sets the current fill and stroke color to the supplied RGB values.
 * 
 * This function is deprecated since PDFlib version 4, use {@link
 * PDF_setcolor} instead.
 * 
 * @param resource $p
 * @param float $red
 * @param float $green
 * @param float $blue
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setrgbcolor($p, $red, $green, $blue){}

/**
 * Sets the current fill color to the supplied RGB values.
 * 
 * This function is deprecated since PDFlib version 4, use {@link
 * PDF_setcolor} instead.
 * 
 * @param resource $p
 * @param float $red
 * @param float $green
 * @param float $blue
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setrgbcolor_fill($p, $red, $green, $blue){}

/**
 * Sets the current stroke color to the supplied RGB values.
 * 
 * This function is deprecated since PDFlib version 4, use {@link
 * PDF_setcolor} instead.
 * 
 * @param resource $p
 * @param float $red
 * @param float $green
 * @param float $blue
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_setrgbcolor_stroke($p, $red, $green, $blue){}

/**
 * Sets the border color for all kinds of annotations.
 * 
 * This function is deprecated since PDFlib version 6, use the option
 * {@link annotcolor} in {@link PDF_create_annotation} instead.
 * 
 * @param resource $p
 * @param float $red
 * @param float $green
 * @param float $blue
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_set_border_color($p, $red, $green, $blue){}

/**
 * Sets the border dash style for all kinds of annotations.
 * 
 * This function is deprecated since PDFlib version 6, use the option
 * {@link dasharray} in {@link PDF_create_annotation} instead.
 * 
 * @param resource $pdfdoc
 * @param float $black
 * @param float $white
 * @return bool
 * @since PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0
 **/
function PDF_set_border_dash($pdfdoc, $black, $white){}

/**
 * Sets the border style for all kinds of annotations.
 * 
 * This function is deprecated since PDFlib version 6, use the options
 * {@link borderstyle} and {@link linewidth} in {@link
 * PDF_create_annotation} instead.
 * 
 * @param resource $pdfdoc
 * @param string $style
 * @param float $width
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_set_border_style($pdfdoc, $style, $width){}

/**
 * Activates a graphics state object.
 * 
 * @param resource $pdfdoc
 * @param int $gstate
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_set_gstate($pdfdoc, $gstate){}

/**
 * Fill document information field {@link key} with {@link value}.
 * 
 * @param resource $p
 * @param string $key
 * @param string $value
 * @return bool
 * @since PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0
 **/
function PDF_set_info($p, $key, $value){}

/**
 * Defines hierarchical and group relationships among layers.
 * 
 * This function requires PDF 1.5.
 * 
 * @param resource $pdfdoc
 * @param string $type
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_set_layer_dependency($pdfdoc, $type, $optlist){}

/**
 * Sets some PDFlib parameter with string type.
 * 
 * @param resource $p
 * @param string $key
 * @param string $value
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_set_parameter($p, $key, $value){}

/**
 * Sets the position for text output on the page.
 * 
 * @param resource $p
 * @param float $x
 * @param float $y
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_set_text_pos($p, $x, $y){}

/**
 * Sets the value of some PDFlib parameter with numerical type.
 * 
 * @param resource $p
 * @param string $key
 * @param float $value
 * @return bool
 * @since PHP 4 >= 4.0.1, PECL pdflib >= 1.0.0
 **/
function PDF_set_value($p, $key, $value){}

/**
 * Defines a blend from the current fill color to another color.
 * 
 * This function requires PDF 1.4 or above.
 * 
 * @param resource $pdfdoc
 * @param string $shtype
 * @param float $x0
 * @param float $y0
 * @param float $x1
 * @param float $y1
 * @param float $c1
 * @param float $c2
 * @param float $c3
 * @param float $c4
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_shading($pdfdoc, $shtype, $x0, $y0, $x1, $y1, $c1, $c2, $c3, $c4, $optlist){}

/**
 * Defines a shading pattern using a shading object.
 * 
 * This function requires PDF 1.4 or above.
 * 
 * @param resource $pdfdoc
 * @param int $shading
 * @param string $optlist
 * @return int
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_shading_pattern($pdfdoc, $shading, $optlist){}

/**
 * Fills an area with a shading, based on a shading object.
 * 
 * This function requires PDF 1.4 or above.
 * 
 * @param resource $pdfdoc
 * @param int $shading
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_shfill($pdfdoc, $shading){}

/**
 * Prints {@link text} in the current font and size at the current
 * position.
 * 
 * @param resource $pdfdoc
 * @param string $text
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_show($pdfdoc, $text){}

/**
 * This function is deprecated since PDFlib version 6, use {@link
 * PDF_fit_textline} for single lines, or the {@link PDF_*_textflow}
 * functions for multi-line formatting instead.
 * 
 * @param resource $p
 * @param string $text
 * @param float $left
 * @param float $top
 * @param float $width
 * @param float $height
 * @param string $mode
 * @param string $feature
 * @return int
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_show_boxed($p, $text, $left, $top, $width, $height, $mode, $feature){}

/**
 * Prints {@link text} in the current font.
 * 
 * @param resource $p
 * @param string $text
 * @param float $x
 * @param float $y
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_show_xy($p, $text, $x, $y){}

/**
 * Skews the coordinate system in x and y direction by {@link alpha} and
 * {@link beta} degrees.
 * 
 * @param resource $p
 * @param float $alpha
 * @param float $beta
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_skew($p, $alpha, $beta){}

/**
 * Returns the width of {@link text} in an arbitrary font.
 * 
 * @param resource $p
 * @param string $text
 * @param int $font
 * @param float $fontsize
 * @return float
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_stringwidth($p, $text, $font, $fontsize){}

/**
 * Strokes the path with the current color and line width, and clear it.
 * 
 * @param resource $p
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_stroke($p){}

/**
 * Suspends the current page so that it can later be resumed with {@link
 * PDF_resume_page}.
 * 
 * @param resource $pdfdoc
 * @param string $optlist
 * @return bool
 * @since PECL pdflib >= 2.0.0
 **/
function PDF_suspend_page($pdfdoc, $optlist){}

/**
 * Translates the origin of the coordinate system.
 * 
 * @param resource $p
 * @param float $tx
 * @param float $ty
 * @return bool
 * @since PHP 4, PECL pdflib >= 1.0.0
 **/
function PDF_translate($p, $tx, $ty){}

/**
 * Converts a string from UTF-8 format to UTF-16.
 * 
 * @param resource $pdfdoc
 * @param string $utf8string
 * @param string $ordering
 * @return string
 * @since PECL pdflib >= 2.0.3
 **/
function PDF_utf8_to_utf16($pdfdoc, $utf8string, $ordering){}

/**
 * Converts a string from UTF-16 format to UTF-8.
 * 
 * @param resource $pdfdoc
 * @param string $utf16string
 * @return string
 * @since PECL pdflib >= 2.0.3
 **/
function PDF_utf16_to_utf8($pdfdoc, $utf16string){}

/**
 * Converts a string from UTF-32 format to UTF-16.
 * 
 * @param resource $pdfdoc
 * @param string $utf32string
 * @param string $ordering
 * @return string
 * @since PECL pdflib >= Unknown future
 **/
function PDF_utf32_to_utf16($pdfdoc, $utf32string, $ordering){}

/**
 * This function returns all currently available PDO drivers which can be
 * used in {@link DSN} parameter of {@link PDO::__construct}. This is a
 * static method.
 * 
 * @return array
 * @since PHP 5.1.0 - 5.1.3, PECL pdo >= 0.9.0
 **/
function pdo_drivers(){}

/**
 * This function behaves exactly as {@link fsockopen} with the difference
 * that the connection is not closed after the script finishes. It is the
 * persistent version of {@link fsockopen}.
 * 
 * @param string $hostname
 * @param int $port
 * @param int $errno
 * @param string $errstr
 * @param float $timeout
 * @return resource
 * @since PHP 4, PHP 5
 **/
function pfsockopen($hostname, $port, &$errno, &$errstr, $timeout){}

/**
 * {@link pg_affected_rows} returns the number of tuples
 * (instances/records/rows) affected by INSERT, UPDATE, and DELETE
 * queries.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_affected_rows($result){}

/**
 * {@link pg_cancel_query} cancels an asynchronous query sent with {@link
 * pg_send_query}, {@link pg_send_query_params} or {@link
 * pg_send_execute}. You cannot cancel a query executed using {@link
 * pg_query}.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_cancel_query($connection){}

/**
 * PostgreSQL supports automatic character set conversion between server
 * and client for certain character sets. {@link pg_client_encoding}
 * returns the client encoding as a string. The returned string will be
 * one of the standard PostgreSQL encoding identifiers.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function pg_client_encoding($connection){}

/**
 * {@link pg_close} closes the non-persistent connection to a PostgreSQL
 * database associated with the given {@link connection} resource.
 * 
 * If there is open large object resource on the connection, do not close
 * the connection before closing all large object resources.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function pg_close($connection){}

/**
 * {@link pg_connect} opens a connection to a PostgreSQL database
 * specified by the {@link connection_string}.
 * 
 * If a second call is made to {@link pg_connect} with the same {@link
 * connection_string} as an existing connection, the existing connection
 * will be returned unless you pass PGSQL_CONNECT_FORCE_NEW as {@link
 * connect_type}.
 * 
 * The old syntax with multiple parameters $conn = pg_connect("host",
 * "port", "options", "tty", "dbname") has been deprecated.
 * 
 * @param string $connection_string The {@link connection_string} can
 *   be empty to use all default parameters, or it can contain one or
 *   more parameter settings separated by whitespace. Each parameter
 *   setting is in the form keyword = value. Spaces around the equal sign
 *   are optional. To write an empty value or a value containing spaces,
 *   surround it with single quotes, e.g., keyword = 'a value'. Single
 *   quotes and backslashes within the value must be escaped with a
 *   backslash, i.e., \' and \\. The currently recognized parameter
 *   keywords are: {@link host}, {@link hostaddr}, {@link port}, {@link
 *   dbname}, {@link user}, {@link password}, {@link connect_timeout},
 *   {@link options}, {@link tty} (ignored), {@link sslmode}, {@link
 *   requiressl} (deprecated in favor of {@link sslmode}), and {@link
 *   service}. Which of these arguments exist depends on your PostgreSQL
 *   version.
 * @param int $connect_type If PGSQL_CONNECT_FORCE_NEW is passed, then
 *   a new connection is created, even if the {@link connection_string}
 *   is identical to an existing connection.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function pg_connect($connection_string, $connect_type){}

/**
 * {@link pg_connection_busy} determines whether or not a connection is
 * busy. If it is busy, a previous query is still executing. If {@link
 * pg_get_result} is used on the connection, it will be blocked.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_connection_busy($connection){}

/**
 * {@link pg_connection_reset} resets the connection. It is useful for
 * error recovery.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_connection_reset($connection){}

/**
 * {@link pg_connection_status} returns the status of the specified
 * {@link connection}.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_connection_status($connection){}

/**
 * {@link pg_convert} checks and converts the values in {@link
 * assoc_array} into suitable values for use in an SQL statement.
 * Precondition for {@link pg_convert} is the existence of a table {@link
 * table_name} which has at least as many columns as {@link assoc_array}
 * has elements. The fieldnames in {@link table_name} must match the
 * indices in {@link assoc_array} and the corresponding datatypes must be
 * compatible. Returns an array with the converted values on success,
 * otherwise.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table against which to convert
 *   types.
 * @param array $assoc_array Data to be converted.
 * @param int $options Any number of PGSQL_CONV_IGNORE_DEFAULT,
 *   PGSQL_CONV_FORCE_NULL or PGSQL_CONV_IGNORE_NOT_NULL, combined.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_convert($connection, $table_name, $assoc_array, $options){}

/**
 * {@link pg_copy_from} inserts records into a table from {@link rows}.
 * It issues a COPY FROM SQL command internally to insert records.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table into which to copy the
 *   {@link rows}.
 * @param array $rows An array of data to be copied into {@link
 *   table_name}. Each value in {@link rows} becomes a row in {@link
 *   table_name}. Each value in {@link rows} should be a delimited string
 *   of the values to insert into each field. Values should be linefeed
 *   terminated.
 * @param string $delimiter The token that separates values for each
 *   field in each element of {@link rows}. Default is TAB.
 * @param string $null_as How SQL NULL values are represented in the
 *   {@link rows}. Default is \N ("\\N").
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_copy_from($connection, $table_name, $rows, $delimiter, $null_as){}

/**
 * {@link pg_copy_to} copies a table to an array. It issues COPY TO SQL
 * command internally to retrieve records.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table from which to copy the
 *   data into {@link rows}.
 * @param string $delimiter The token that separates values for each
 *   field in each element of {@link rows}. Default is TAB.
 * @param string $null_as How SQL NULL values are represented in the
 *   {@link rows}. Default is \N ("\\N").
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_copy_to($connection, $table_name, $delimiter, $null_as){}

/**
 * {@link pg_dbname} returns the name of the database that the given
 * PostgreSQL {@link connection} resource.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function pg_dbname($connection){}

/**
 * {@link pg_delete} deletes records from a table specified by the keys
 * and values in {@link assoc_array}. If {@link options} is specified,
 * {@link pg_convert} is applied to {@link assoc_array} with the
 * specified options.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table from which to delete
 *   rows.
 * @param array $assoc_array An array whose keys are field names in the
 *   table {@link table_name}, and whose values are the values of those
 *   fields that are to be deleted.
 * @param int $options Any number of PGSQL_CONV_FORCE_NULL,
 *   PGSQL_DML_NO_CONV, PGSQL_DML_EXEC or PGSQL_DML_STRING combined. If
 *   PGSQL_DML_STRING is part of the {@link options} then query string is
 *   returned.
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_delete($connection, $table_name, $assoc_array, $options){}

/**
 * {@link pg_end_copy} syncs the PostgreSQL frontend (usually a web
 * server process) with the PostgreSQL server after doing a copy
 * operation performed by {@link pg_put_line}. {@link pg_end_copy} must
 * be issued, otherwise the PostgreSQL server may get out of sync with
 * the frontend and will report an error.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function pg_end_copy($connection){}

/**
 * {@link pg_escape_bytea} escapes string for bytea datatype. It returns
 * escaped string.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $data A string containing text or binary data to be
 *   inserted into a bytea column.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_escape_bytea($connection, $data){}

/**
 * {@link pg_escape_string} escapes a string for insertion into the
 * database. It returns an escaped string in the PostgreSQL format. Use
 * of this function is recommended instead of {@link addslashes}. If the
 * type of the column is bytea, {@link pg_escape_bytea} must be used
 * instead.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $data A string containing text to be escaped.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_escape_string($connection, $data){}

/**
 * Sends a request to execute a prepared statement with given parameters,
 * and waits for the result.
 * 
 * {@link pg_execute} is like {@link pg_query_params}, but the command to
 * be executed is specified by naming a previously-prepared statement,
 * instead of giving a query string. This feature allows commands that
 * will be used repeatedly to be parsed and planned just once, rather
 * than each time they are executed. The statement must have been
 * prepared previously in the current session. {@link pg_execute} is
 * supported only against PostgreSQL 7.4 or higher connections; it will
 * fail when using earlier versions.
 * 
 * The parameters are identical to {@link pg_query_params}, except that
 * the name of a prepared statement is given instead of a query string.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $stmtname The name of the prepared statement to
 *   execute. if "" is specified, then the unnamed statement is executed.
 *   The name must have been previously prepared using {@link
 *   pg_prepare}, {@link pg_send_prepare} or a PREPARE SQL command.
 * @param array $params An array of parameter values to substitute for
 *   the $1, $2, etc. placeholders in the original prepared query string.
 *   The number of elements in the array must match the number of
 *   placeholders.
 * @return resource
 * @since PHP 5 >= 5.1.0
 **/
function pg_execute($connection, $stmtname, $params){}

/**
 * {@link pg_fetch_all} returns an array that contains all rows (records)
 * in the result resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_fetch_all($result){}

/**
 * {@link pg_fetch_all_columns} returns an array that contains all rows
 * (records) in a particular column of the result resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $column Column number, zero-based, to be retrieved from
 *   the result resource. Defaults to the first column if not specified.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function pg_fetch_all_columns($result, $column){}

/**
 * {@link pg_fetch_array} returns an array that corresponds to the
 * fetched row (record).
 * 
 * {@link pg_fetch_array} is an extended version of {@link pg_fetch_row}.
 * In addition to storing the data in the numeric indices (field number)
 * to the result array, it can also store the data using associative
 * indices (field name). It stores both indicies by default.
 * 
 * {@link pg_fetch_array} is NOT significantly slower than using {@link
 * pg_fetch_row}, and is significantly easier to use.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row Row number in result to fetch. Rows are numbered
 *   from 0 upwards. If omitted, next row is fetched.
 * @param int $result_type An optional parameter that controls how the
 *   returned array is indexed. {@link result_type} is a constant and can
 *   take the following values: PGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH.
 *   Using PGSQL_NUM, {@link pg_fetch_array} will return an array with
 *   numerical indices, using PGSQL_ASSOC it will return only associative
 *   indices while PGSQL_BOTH, the default, will return both numerical
 *   and associative indices.
 * @return array
 * @since PHP 4, PHP 5
 **/
function pg_fetch_array($result, $row, $result_type){}

/**
 * {@link pg_fetch_assoc} returns an associative array that corresponds
 * to the fetched row (records).
 * 
 * {@link pg_fetch_assoc} is equivalent to calling {@link pg_fetch_array}
 * with PGSQL_ASSOC as the optional third parameter. It only returns an
 * associative array. If you need the numeric indices, use {@link
 * pg_fetch_row}.
 * 
 * {@link pg_fetch_assoc} is NOT significantly slower than using {@link
 * pg_fetch_row}, and is significantly easier to use.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row Row number in result to fetch. Rows are numbered
 *   from 0 upwards. If omitted, next row is fetched.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_fetch_assoc($result, $row){}

/**
 * {@link pg_fetch_object} returns an object with properties that
 * correspond to the fetched row's field names. It can optionally
 * instantiate an object of a specific class, and pass parameters to that
 * class's constructor.
 * 
 * Speed-wise, the function is identical to {@link pg_fetch_array}, and
 * almost as fast as {@link pg_fetch_row} (the difference is
 * insignificant).
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row Row number in result to fetch. Rows are numbered
 *   from 0 upwards. If omitted, next row is fetched.
 * @param int $result_type Ignored and deprecated.
 * @return object
 * @since PHP 4, PHP 5
 **/
function pg_fetch_object($result, $row, $result_type){}

/**
 * {@link pg_fetch_result} returns the value of a particular row and
 * field (column) in a PostgreSQL result resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row Row number in result to fetch. Rows are numbered
 *   from 0 upwards. If omitted, next row is fetched.
 * @param mixed $field A string representing the name of the field
 *   (column) to fetch, otherwise an int representing the field number to
 *   fetch. Fields are numbered from 0 upwards.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_fetch_result($result, $row, $field){}

/**
 * {@link pg_fetch_row} fetches one row of data from the result
 * associated with the specified {@link result} resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row Row number in result to fetch. Rows are numbered
 *   from 0 upwards. If omitted, next row is fetched.
 * @return array
 * @since PHP 4, PHP 5
 **/
function pg_fetch_row($result, $row){}

/**
 * {@link pg_field_is_null} tests if a field in a PostgreSQL result
 * resource is SQL NULL or not.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row Row number in result to fetch. Rows are numbered
 *   from 0 upwards. If omitted, current row is fetched.
 * @param mixed $field Field number (starting from 0) as an integer or
 *   the field name as a string.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_field_is_null($result, $row, $field){}

/**
 * {@link pg_field_name} returns the name of the field occupying the
 * given {@link field_number} in the given PostgreSQL {@link result}
 * resource. Field numbering starts from 0.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $field_number Field number, starting from 0.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_field_name($result, $field_number){}

/**
 * {@link pg_field_num} will return the number of the field number that
 * corresponds to the {@link field_name} in the given PostgreSQL {@link
 * result} resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param string $field_name The name of the field.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_field_num($result, $field_name){}

/**
 * {@link pg_field_prtlen} returns the actual printed length (number of
 * characters) of a specific value in a PostgreSQL {@link result}. Row
 * numbering starts at 0. This function will return -1 on an error.
 * 
 * {@link field_name_or_number} can be passed either as an integer or as
 * a string. If it is passed as an integer, PHP recognises it as the
 * field number, otherwise as field name.
 * 
 * See the example given at the {@link pg_field_name} page.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $row_number Row number in result. Rows are numbered from
 *   0 upwards. If omitted, current row is fetched.
 * @param mixed $field_name_or_number
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_field_prtlen($result, $row_number, $field_name_or_number){}

/**
 * {@link pg_field_size} returns the internal storage size (in bytes) of
 * the field number in the given PostgreSQL {@link result}.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $field_number Field number, starting from 0.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_field_size($result, $field_number){}

/**
 * {@link pg_field_table} returns the name of the table that field
 * belongs to, or the table's oid if {@link oid_only} is .
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $field_number Field number, starting from 0.
 * @param bool $oid_only By default the tables name that field belongs
 *   to is returned but if {@link oid_only} is set to , then the oid will
 *   instead be returned.
 * @return mixed
 * @since PHP 5 >= 5.2.0
 **/
function pg_field_table($result, $field_number, $oid_only){}

/**
 * {@link pg_field_type} returns a string containing the base type name
 * of the given {@link field_number} in the given PostgreSQL {@link
 * result} resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $field_number Field number, starting from 0.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_field_type($result, $field_number){}

/**
 * {@link pg_field_type_oid} returns an integer containing the OID of the
 * base type of the given {@link field_number} in the given PostgreSQL
 * {@link result} resource.
 * 
 * You can get more information about the field type by querying
 * PostgreSQL's pg_type system table using the OID obtained with this
 * function. The PostgreSQL {@link format_type} function will convert a
 * type OID into an SQL standard type name.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $field_number Field number, starting from 0.
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function pg_field_type_oid($result, $field_number){}

/**
 * {@link pg_free_result} frees the memory and data associated with the
 * specified PostgreSQL query result resource.
 * 
 * This function need only be called if memory consumption during script
 * execution is a problem. Otherwise, all result memory will be
 * automatically freed when the script ends.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_free_result($result){}

/**
 * {@link pg_get_notify} gets notifications generated by a NOTIFY SQL
 * command. To receive notifications, the LISTEN SQL command must be
 * issued.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param int $result_type An optional parameter that controls how the
 *   returned array is indexed. {@link result_type} is a constant and can
 *   take the following values: PGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH.
 *   Using PGSQL_NUM, {@link pg_get_notify} will return an array with
 *   numerical indices, using PGSQL_ASSOC it will return only associative
 *   indices while PGSQL_BOTH, the default, will return both numerical
 *   and associative indices.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_get_notify($connection, $result_type){}

/**
 * {@link pg_get_pid} gets the backend's (database server process) PID.
 * The PID is useful to determine whether or not a NOTIFY message
 * received via {@link pg_get_notify} is sent from another process or
 * not.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_get_pid($connection){}

/**
 * {@link pg_get_result} gets the result resource from an asynchronous
 * query executed by {@link pg_send_query}, {@link pg_send_query_params}
 * or {@link pg_send_execute}.
 * 
 * {@link pg_send_query} and the other asynchronous query functions can
 * send multiple queries to a PostgreSQL server and {@link pg_get_result}
 * is used to get each query's results, one by one.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_get_result($connection){}

/**
 * {@link pg_host} returns the host name of the given PostgreSQL {@link
 * connection} resource is connected to.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function pg_host($connection){}

/**
 * {@link pg_insert} inserts the values of {@link assoc_array} into the
 * table specified by {@link table_name}. If {@link options} is
 * specified, {@link pg_convert} is applied to {@link assoc_array} with
 * the specified options.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table into which to insert
 *   rows. The table {@link table_name} must at least have as many
 *   columns as {@link assoc_array} has elements.
 * @param array $assoc_array An array whose keys are field names in the
 *   table {@link table_name}, and whose values are the values of those
 *   fields that are to be inserted.
 * @param int $options Any number of PGSQL_CONV_OPTS,
 *   PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or
 *   PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the {@link
 *   options} then query string is returned.
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_insert($connection, $table_name, $assoc_array, $options){}

/**
 * {@link pg_last_error} returns the last error message for a given
 * {@link connection}.
 * 
 * Error messages may be overwritten by internal PostgreSQL (libpq)
 * function calls. It may not return an appropriate error message if
 * multiple errors occur inside a PostgreSQL module function.
 * 
 * Use {@link pg_result_error}, {@link pg_result_error_field}, {@link
 * pg_result_status} and {@link pg_connection_status} for better error
 * handling.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_last_error($connection){}

/**
 * {@link pg_last_notice} returns the last notice message from the
 * PostgreSQL server on the specified {@link connection}. The PostgreSQL
 * server sends notice messages in several cases, for instance when
 * creating a SERIAL column in a table.
 * 
 * With {@link pg_last_notice}, you can avoid issuing useless queries by
 * checking whether or not the notice is related to your transaction.
 * 
 * Notice message tracking can be set to optional by setting 1 for
 * pgsql.ignore_notice in .
 * 
 * Notice message logging can be set to optional by setting 0 for
 * pgsql.log_notice in . Unless pgsql.ignore_notice is set to 0, notice
 * message cannot be logged.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function pg_last_notice($connection){}

/**
 * {@link pg_last_oid} is used to retrieve the OID assigned to an
 * inserted row.
 * 
 * OID field became an optional field from PostgreSQL 7.2 and will not be
 * present by default in PostgreSQL 8.1. When the OID field is not
 * present in a table, the programmer must use {@link pg_result_status}
 * to check for successful insertion.
 * 
 * To get the value of a SERIAL field in an inserted row, it is necessary
 * to use the PostgreSQL CURRVAL function, naming the sequence whose last
 * value is required. If the name of the sequence is unknown, the
 * pg_get_serial_sequence PostgreSQL 8.0 function is necessary.
 * 
 * PostgreSQL 8.1 has a function LASTVAL that returns the value of the
 * most recently used sequence in the session. This avoids the need for
 * naming the sequence, table or column altogether.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_last_oid($result){}

/**
 * {@link pg_lo_close} closes a large object. {@link large_object} is a
 * resource for the large object from {@link pg_lo_open}.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $large_object PostgreSQL large object (LOB)
 *   resource, returned by {@link pg_lo_open}.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_close($large_object){}

/**
 * {@link pg_lo_create} creates a large object and returns the OID of the
 * large object. PostgreSQL access modes INV_READ, INV_WRITE, and
 * INV_ARCHIVE are not supported, the object is created always with both
 * read and write access. INV_ARCHIVE has been removed from PostgreSQL
 * itself (version 6.3 and above).
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * Instead of using the large object interface (which has no access
 * controls and is cumbersome to use), try PostgreSQL's bytea column type
 * and {@link pg_escape_bytea}.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param mixed $object_id If an {@link object_id} is given the
 *   function will try to create a large object with this id, else a free
 *   object id is assigned by the server. The parameter was added in PHP
 *   5.3 and relies on functionality that first appeared in PostgreSQL
 *   8.1.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_create($connection, $object_id){}

/**
 * {@link pg_lo_export} takes a large object in a PostgreSQL database and
 * saves its contents to a file on the local filesystem.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param int $oid The OID of the large object in the database.
 * @param string $pathname The full path and file name of the file in
 *   which to write the large object on the client filesystem.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_export($connection, $oid, $pathname){}

/**
 * {@link pg_lo_import} creates a new large object in the database using
 * a file on the filesystem as its data source.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $pathname The full path and file name of the file on
 *   the client filesystem from which to read the large object data.
 * @param mixed $object_id If an {@link object_id} is given the
 *   function will try to create a large object with this id, else a free
 *   object id is assigned by the server. The parameter was added in PHP
 *   5.3 and relies on functionality that first appeared in PostgreSQL
 *   8.1.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_import($connection, $pathname, $object_id){}

/**
 * {@link pg_lo_open} opens a large object in the database and returns
 * large object resource so that it can be manipulated.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param int $oid The OID of the large object in the database.
 * @param string $mode Can be either "r" for read-only, "w" for write
 *   only or "rw" for read and write.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_open($connection, $oid, $mode){}

/**
 * {@link pg_lo_read} reads at most {@link len} bytes from a large object
 * and returns it as a string.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $large_object PostgreSQL large object (LOB)
 *   resource, returned by {@link pg_lo_open}.
 * @param int $len An optional maximum number of bytes to return.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_read($large_object, $len){}

/**
 * {@link pg_lo_read_all} reads a large object and passes it straight
 * through to the browser after sending all pending headers. Mainly
 * intended for sending binary data like images or sound.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $large_object PostgreSQL large object (LOB)
 *   resource, returned by {@link pg_lo_open}.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_read_all($large_object){}

/**
 * {@link pg_lo_seek} seeks a position within a large object resource.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $large_object PostgreSQL large object (LOB)
 *   resource, returned by {@link pg_lo_open}.
 * @param int $offset The number of bytes to seek.
 * @param int $whence One of the constants PGSQL_SEEK_SET (seek from
 *   object start), PGSQL_SEEK_CUR (seek from current position) or
 *   PGSQL_SEEK_END (seek from object end) .
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_seek($large_object, $offset, $whence){}

/**
 * {@link pg_lo_tell} returns the current position (offset from the
 * beginning) of a large object.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $large_object PostgreSQL large object (LOB)
 *   resource, returned by {@link pg_lo_open}.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_tell($large_object){}

/**
 * {@link pg_lo_unlink} deletes a large object with the {@link oid}.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param int $oid The OID of the large object in the database.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_unlink($connection, $oid){}

/**
 * {@link pg_lo_write} writes data into a large object at the current
 * seek position.
 * 
 * To use the large object interface, it is necessary to enclose it
 * within a transaction block.
 * 
 * @param resource $large_object PostgreSQL large object (LOB)
 *   resource, returned by {@link pg_lo_open}.
 * @param string $data The data to be written to the large object. If
 *   {@link len} is specified and is less than the length of {@link
 *   data}, only {@link len} bytes will be written.
 * @param int $len An optional maximum number of bytes to write. Must
 *   be greater than zero and no greater than the length of {@link data}.
 *   Defaults to the length of {@link data}.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_lo_write($large_object, $data, $len){}

/**
 * {@link pg_meta_data} returns table definition for table_name as an
 * array.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name The name of the table.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_meta_data($connection, $table_name){}

/**
 * {@link pg_num_fields} returns the number of fields (columns) in a
 * PostgreSQL result resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_num_fields($result){}

/**
 * {@link pg_num_rows} will return the number of rows in a PostgreSQL
 * result resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_num_rows($result){}

/**
 * {@link pg_options} will return a string containing the options
 * specified on the given PostgreSQL {@link connection} resource.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function pg_options($connection){}

/**
 * Looks up a current parameter setting of the server.
 * 
 * Certain parameter values are reported by the server automatically at
 * connection startup or whenever their values change. {@link
 * pg_parameter_status} can be used to interrogate these settings. It
 * returns the current value of a parameter if known, or if the parameter
 * is not known.
 * 
 * Parameters reported as of PostgreSQL 8.0 include server_version,
 * server_encoding, client_encoding, is_superuser, session_authorization,
 * DateStyle, TimeZone, and integer_datetimes. (server_encoding,
 * TimeZone, and integer_datetimes were not reported by releases before
 * 8.0.) Note that server_version, server_encoding and integer_datetimes
 * cannot change after PostgreSQL startup.
 * 
 * PostgreSQL 7.3 or lower servers do not report parameter settings,
 * {@link pg_parameter_status} includes logic to obtain values for
 * server_version and client_encoding anyway. Applications are encouraged
 * to use {@link pg_parameter_status} rather than ad hoc code to
 * determine these values.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $param_name Possible {@link param_name} values include
 *   server_version, server_encoding, client_encoding, is_superuser,
 *   session_authorization, DateStyle, TimeZone, and integer_datetimes.
 * @return string
 * @since PHP 5
 **/
function pg_parameter_status($connection, $param_name){}

/**
 * {@link pg_pconnect} opens a connection to a PostgreSQL database. It
 * returns a connection resource that is needed by other PostgreSQL
 * functions.
 * 
 * If a second call is made to {@link pg_pconnect} with the same {@link
 * connection_string} as an existing connection, the existing connection
 * will be returned unless you pass PGSQL_CONNECT_FORCE_NEW as {@link
 * connect_type}.
 * 
 * To enable persistent connection, the pgsql.allow_persistent directive
 * must be set to On (which is the default). The maximum number of
 * persistent connection can be defined with the pgsql.max_persistent
 * directive (defaults to -1 for no limit). The total number of
 * connections can be set with the pgsql.max_links directive.
 * 
 * {@link pg_close} will not close persistent links generated by {@link
 * pg_pconnect}.
 * 
 * @param string $connection_string The {@link connection_string} can
 *   be empty to use all default parameters, or it can contain one or
 *   more parameter settings separated by whitespace. Each parameter
 *   setting is in the form keyword = value. Spaces around the equal sign
 *   are optional. To write an empty value or a value containing spaces,
 *   surround it with single quotes, e.g., keyword = 'a value'. Single
 *   quotes and backslashes within the value must be escaped with a
 *   backslash, i.e., \' and \\. The currently recognized parameter
 *   keywords are: {@link host}, {@link hostaddr}, {@link port}, {@link
 *   dbname}, {@link user}, {@link password}, {@link connect_timeout},
 *   {@link options}, {@link tty} (ignored), {@link sslmode}, {@link
 *   requiressl} (deprecated in favor of {@link sslmode}), and {@link
 *   service}. Which of these arguments exist depends on your PostgreSQL
 *   version.
 * @param int $connect_type If PGSQL_CONNECT_FORCE_NEW is passed, then
 *   a new connection is created, even if the {@link connection_string}
 *   is identical to an existing connection.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function pg_pconnect($connection_string, $connect_type){}

/**
 * {@link pg_ping} pings a database connection and tries to reconnect it
 * if it is broken.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_ping($connection){}

/**
 * {@link pg_port} returns the port number that the given PostgreSQL
 * {@link connection} resource is connected to.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function pg_port($connection){}

/**
 * {@link pg_prepare} creates a prepared statement for later execution
 * with {@link pg_execute} or {@link pg_send_execute}. This feature
 * allows commands that will be used repeatedly to be parsed and planned
 * just once, rather than each time they are executed. {@link pg_prepare}
 * is supported only against PostgreSQL 7.4 or higher connections; it
 * will fail when using earlier versions.
 * 
 * The function creates a prepared statement named {@link stmtname} from
 * the {@link query} string, which must contain a single SQL command.
 * {@link stmtname} may be "" to create an unnamed statement, in which
 * case any pre-existing unnamed statement is automatically replaced;
 * otherwise it is an error if the statement name is already defined in
 * the current session. If any parameters are used, they are referred to
 * in the {@link query} as $1, $2, etc.
 * 
 * Prepared statements for use with {@link pg_prepare} can also be
 * created by executing SQL PREPARE statements. (But {@link pg_prepare}
 * is more flexible since it does not require parameter types to be
 * pre-specified.) Also, although there is no PHP function for deleting a
 * prepared statement, the SQL DEALLOCATE statement can be used for that
 * purpose.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $stmtname The name to give the prepared statement.
 *   Must be unique per-connection. If "" is specified, then an unnamed
 *   statement is created, overwriting any previously defined unnamed
 *   statement.
 * @param string $query The parameterized SQL statement. Must contain
 *   only a single statement. (multiple statements separated by
 *   semi-colons are not allowed.) If any parameters are used, they are
 *   referred to as $1, $2, etc.
 * @return resource
 * @since PHP 5 >= 5.1.0
 **/
function pg_prepare($connection, $stmtname, $query){}

/**
 * {@link pg_put_line} sends a NULL-terminated string to the PostgreSQL
 * backend server. This is needed in conjunction with PostgreSQL's COPY
 * FROM command.
 * 
 * COPY is a high-speed data loading interface supported by PostgreSQL.
 * Data is passed in without being parsed, and in a single transaction.
 * 
 * An alternative to using raw {@link pg_put_line} commands is to use
 * {@link pg_copy_from}. This is a far simpler interface.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $data A line of text to be sent directly to the
 *   PostgreSQL backend. A NULL terminator is added automatically.
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function pg_put_line($connection, $data){}

/**
 * {@link pg_query} executes the {@link query} on the specified database
 * {@link connection}.
 * 
 * If an error occurs, and is returned, details of the error can be
 * retrieved using the {@link pg_last_error} function if the connection
 * is valid.
 * 
 * Although {@link connection} can be omitted, it is not recommended,
 * since it can be the cause of hard to find bugs in scripts.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $query The SQL statement or statements to be executed.
 *   When multiple statements are passed to the function, they are
 *   automatically executed as one transaction, unless there are explicit
 *   BEGIN/COMMIT commands included in the query string. However, using
 *   multiple transactions in one function call is not recommended. Data
 *   inside the query should be properly escaped.
 * @return resource
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_query($connection, $query){}

/**
 * Submits a command to the server and waits for the result, with the
 * ability to pass parameters separately from the SQL command text.
 * 
 * {@link pg_query_params} is like {@link pg_query}, but offers
 * additional functionality: parameter values can be specified separately
 * from the command string proper. {@link pg_query_params} is supported
 * only against PostgreSQL 7.4 or higher connections; it will fail when
 * using earlier versions.
 * 
 * If parameters are used, they are referred to in the {@link query}
 * string as $1, $2, etc. {@link params} specifies the actual values of
 * the parameters. A value in this array means the corresponding
 * parameter is SQL NULL.
 * 
 * The primary advantage of {@link pg_query_params} over {@link pg_query}
 * is that parameter values may be separated from the {@link query}
 * string, thus avoiding the need for tedious and error-prone quoting and
 * escaping. Unlike {@link pg_query}, {@link pg_query_params} allows at
 * most one SQL command in the given string. (There can be semicolons in
 * it, but not more than one nonempty command.)
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $query The parameterized SQL statement. Must contain
 *   only a single statement. (multiple statements separated by
 *   semi-colons are not allowed.) If any parameters are used, they are
 *   referred to as $1, $2, etc.
 * @param array $params An array of parameter values to substitute for
 *   the $1, $2, etc. placeholders in the original prepared query string.
 *   The number of elements in the array must match the number of
 *   placeholders.
 * @return resource
 * @since PHP 5 >= 5.1.0
 **/
function pg_query_params($connection, $query, $params){}

/**
 * {@link pg_result_error} returns any error message associated with the
 * {@link result} resource. Therefore, the user has a better chance of
 * getting the correct error message than with {@link pg_last_error}.
 * 
 * The function {@link pg_result_error_field} can give much greater
 * detail on result errors than {@link pg_result_error}.
 * 
 * Because {@link pg_query} returns if the query fails, you must use
 * {@link pg_send_query} and {@link pg_get_result} to get the result
 * handle.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_result_error($result){}

/**
 * {@link pg_result_error_field} returns one of the detailed error
 * message fields associated with {@link result} resource. It is only
 * available against a PostgreSQL 7.4 or above server. The error field is
 * specified by the {@link fieldcode}.
 * 
 * Because {@link pg_query} and {@link pg_query_params} return if the
 * query fails, you must use {@link pg_send_query} and {@link
 * pg_get_result} to get the result handle.
 * 
 * If you need to get additional error information from failed {@link
 * pg_query} queries, use {@link pg_set_error_verbosity} and {@link
 * pg_last_error} and then parse the result.
 * 
 * @param resource $result A PostgreSQL query result resource from a
 *   previously executed statement.
 * @param int $fieldcode Possible {@link fieldcode} values are:
 *   PGSQL_DIAG_SEVERITY, PGSQL_DIAG_SQLSTATE,
 *   PGSQL_DIAG_MESSAGE_PRIMARY, PGSQL_DIAG_MESSAGE_DETAIL,
 *   PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION,
 *   PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only),
 *   PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only),
 *   PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE, PGSQL_DIAG_SOURCE_LINE
 *   or PGSQL_DIAG_SOURCE_FUNCTION.
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function pg_result_error_field($result, $fieldcode){}

/**
 * {@link pg_result_seek} sets the internal row offset in a result
 * resource.
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $offset Row to move the internal offset to in the {@link
 *   result} resource. Rows are numbered starting from zero.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_result_seek($result, $offset){}

/**
 * {@link pg_result_status} returns the status of a result resource, or
 * the PostgreSQL command completion tag associated with the result
 * 
 * @param resource $result PostgreSQL query result resource, returned
 *   by {@link pg_query}, {@link pg_query_params} or {@link pg_execute}
 *   (among others).
 * @param int $type Either PGSQL_STATUS_LONG to return the numeric
 *   status of the {@link result}, or PGSQL_STATUS_STRING to return the
 *   command tag of the {@link result}. If not specified,
 *   PGSQL_STATUS_LONG is the default.
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_result_status($result, $type){}

/**
 * {@link pg_select} selects records specified by assoc_array which has
 * field=>value. For a successful query, it returns an array containing
 * all records and fields that match the condition specified by
 * assoc_array.
 * 
 * If options is specified, {@link pg_convert} is applied to assoc_array
 * with the specified flags.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table from which to select
 *   rows.
 * @param array $assoc_array An array whose keys are field names in the
 *   table {@link table_name}, and whose values are the conditions that a
 *   row must meet to be retrieved.
 * @param int $options Any number of PGSQL_CONV_FORCE_NULL,
 *   PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or
 *   PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the {@link
 *   options} then query string is returned.
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_select($connection, $table_name, $assoc_array, $options){}

/**
 * Sends a request to execute a prepared statement with given parameters,
 * without waiting for the result(s).
 * 
 * This is similar to {@link pg_send_query_params}, but the command to be
 * executed is specified by naming a previously-prepared statement,
 * instead of giving a query string. The function's parameters are
 * handled identically to {@link pg_execute}. Like {@link pg_execute}, it
 * will not work on pre-7.4 versions of PostgreSQL.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $stmtname The name of the prepared statement to
 *   execute. if "" is specified, then the unnamed statement is executed.
 *   The name must have been previously prepared using {@link
 *   pg_prepare}, {@link pg_send_prepare} or a PREPARE SQL command.
 * @param array $params An array of parameter values to substitute for
 *   the $1, $2, etc. placeholders in the original prepared query string.
 *   The number of elements in the array must match the number of
 *   placeholders.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function pg_send_execute($connection, $stmtname, $params){}

/**
 * Sends a request to create a prepared statement with the given
 * parameters, without waiting for completion.
 * 
 * This is an asynchronous version of {@link pg_prepare}: it returns if
 * it was able to dispatch the request, and if not. After a successful
 * call, call {@link pg_get_result} to determine whether the server
 * successfully created the prepared statement. The function's parameters
 * are handled identically to {@link pg_prepare}. Like {@link
 * pg_prepare}, it will not work on pre-7.4 versions of PostgreSQL.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $stmtname The name to give the prepared statement.
 *   Must be unique per-connection. If "" is specified, then an unnamed
 *   statement is created, overwriting any previously defined unnamed
 *   statement.
 * @param string $query The parameterized SQL statement. Must contain
 *   only a single statement. (multiple statements separated by
 *   semi-colons are not allowed.) If any parameters are used, they are
 *   referred to as $1, $2, etc.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function pg_send_prepare($connection, $stmtname, $query){}

/**
 * {@link pg_send_query} sends a query or queries asynchronously to the
 * {@link connection}. Unlike {@link pg_query}, it can send multiple
 * queries at once to PostgreSQL and get the results one by one using
 * {@link pg_get_result}.
 * 
 * Script execution is not blocked while the queries are executing. Use
 * {@link pg_connection_busy} to check if the connection is busy (i.e.
 * the query is executing). Queries may be cancelled using {@link
 * pg_cancel_query}.
 * 
 * Although the user can send multiple queries at once, multiple queries
 * cannot be sent over a busy connection. If a query is sent while the
 * connection is busy, it waits until the last query is finished and
 * discards all its results.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $query The SQL statement or statements to be executed.
 *   Data inside the query should be properly escaped.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function pg_send_query($connection, $query){}

/**
 * Submits a command and separate parameters to the server without
 * waiting for the result(s).
 * 
 * This is equivalent to {@link pg_send_query} except that query
 * parameters can be specified separately from the {@link query} string.
 * The function's parameters are handled identically to {@link
 * pg_query_params}. Like {@link pg_query_params}, it will not work on
 * pre-7.4 PostgreSQL connections, and it allows only one command in the
 * query string.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $query The parameterized SQL statement. Must contain
 *   only a single statement. (multiple statements separated by
 *   semi-colons are not allowed.) If any parameters are used, they are
 *   referred to as $1, $2, etc.
 * @param array $params An array of parameter values to substitute for
 *   the $1, $2, etc. placeholders in the original prepared query string.
 *   The number of elements in the array must match the number of
 *   placeholders.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function pg_send_query_params($connection, $query, $params){}

/**
 * {@link pg_set_client_encoding} sets the client encoding and returns 0
 * if success or -1 if error.
 * 
 * PostgreSQL will automatically convert data in the backend database
 * encoding into the frontend encoding.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param string $encoding The required client encoding. One of
 *   SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL,
 *   LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5 or WIN1250. The exact
 *   list of available encodings depends on your PostgreSQL version, so
 *   check your PostgreSQL manual for a more specific list.
 * @return int
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function pg_set_client_encoding($connection, $encoding){}

/**
 * Determines the verbosity of messages returned by {@link pg_last_error}
 * and {@link pg_result_error}.
 * 
 * {@link pg_set_error_verbosity} sets the verbosity mode, returning the
 * connection's previous setting. In PGSQL_ERRORS_TERSE mode, returned
 * messages include severity, primary text, and position only; this will
 * normally fit on a single line. The default mode (PGSQL_ERRORS_DEFAULT)
 * produces messages that include the above plus any detail, hint, or
 * context fields (these may span multiple lines). The
 * PGSQL_ERRORS_VERBOSE mode includes all available fields. Changing the
 * verbosity does not affect the messages available from already-existing
 * result objects, only subsequently-created ones.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @param int $verbosity The required verbosity: PGSQL_ERRORS_TERSE,
 *   PGSQL_ERRORS_DEFAULT or PGSQL_ERRORS_VERBOSE.
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function pg_set_error_verbosity($connection, $verbosity){}

/**
 * {@link pg_trace} enables tracing of the PostgreSQL frontend/backend
 * communication to a file. To fully understand the results, one needs to
 * be familiar with the internals of PostgreSQL communication protocol.
 * 
 * For those who are not, it can still be useful for tracing errors in
 * queries sent to the server, you could do for example grep '^To
 * backend' trace.log and see what queries actually were sent to the
 * PostgreSQL server. For more information, refer to the PostgreSQL
 * Documentation.
 * 
 * @param string $pathname The full path and file name of the file in
 *   which to write the trace log. Same as in {@link fopen}.
 * @param string $mode An optional file access mode, same as for {@link
 *   fopen}.
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function pg_trace($pathname, $mode, $connection){}

/**
 * Returns the current in-transaction status of the server.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function pg_transaction_status($connection){}

/**
 * {@link pg_tty} returns the TTY name that server side debugging output
 * is sent to on the given PostgreSQL {@link connection} resource.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function pg_tty($connection){}

/**
 * {@link pg_unescape_bytea} unescapes PostgreSQL bytea data values. It
 * returns the unescaped string, possibly containing binary data.
 * 
 * @param string $data A string containing PostgreSQL bytea data to be
 *   converted into a PHP binary string.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_unescape_bytea($data){}

/**
 * Stop tracing started by {@link pg_trace}.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function pg_untrace($connection){}

/**
 * {@link pg_update} updates records that matches condition with data. If
 * options is specified, {@link pg_convert} is applied to data with
 * specified options.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 * @param string $table_name Name of the table into which to update
 *   rows.
 * @param array $data An array whose keys are field names in the table
 *   {@link table_name}, and whose values are what matched rows are to be
 *   updated to.
 * @param array $condition An array whose keys are field names in the
 *   table {@link table_name}, and whose values are the conditions that a
 *   row must meet to be updated.
 * @param int $options Any number of PGSQL_CONV_OPTS,
 *   PGSQL_DML_NO_CONV, PGSQL_DML_EXEC or PGSQL_DML_STRING combined. If
 *   PGSQL_DML_STRING is part of the {@link options} then query string is
 *   returned.
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function pg_update($connection, $table_name, $data, $condition, $options){}

/**
 * {@link pg_version} returns an array with the client, protocol and
 * server version. Protocol and server versions are only available if PHP
 * was compiled with PostgreSQL 7.4 or later.
 * 
 * For more detailed server information, use {@link pg_parameter_status}.
 * 
 * @param resource $connection PostgreSQL database connection resource.
 *   When {@link connection} is not present, the default connection is
 *   used. The default connection is the last connection made by {@link
 *   pg_connect} or {@link pg_pconnect}.
 * @return array
 * @since PHP 5
 **/
function pg_version($connection){}

/**
 * This function prints out the credits listing the PHP developers,
 * modules, etc. It generates the appropriate HTML codes to insert the
 * information in a page.
 * 
 * @param int $flag To generate a custom credits page, you may want to
 *   use the {@link flag} parameter.
 *   
 *   Pre-defined {@link phpcredits} flags name description CREDITS_ALL
 *   All the credits, equivalent to using: CREDITS_DOCS + CREDITS_GENERAL
 *   + CREDITS_GROUP + CREDITS_MODULES + CREDITS_FULLPAGE. It generates a
 *   complete stand-alone HTML page with the appropriate tags.
 *   CREDITS_DOCS The credits for the documentation team CREDITS_FULLPAGE
 *   Usually used in combination with the other flags. Indicates that a
 *   complete stand-alone HTML page needs to be printed including the
 *   information indicated by the other flags. CREDITS_GENERAL General
 *   credits: Language design and concept, PHP authors and SAPI module.
 *   CREDITS_GROUP A list of the core developers CREDITS_MODULES A list
 *   of the extension modules for PHP, and their authors CREDITS_SAPI A
 *   list of the server API modules for PHP, and their authors
 * @return bool
 * @since PHP 4, PHP 5
 **/
function phpcredits($flag){}

/**
 * Outputs a large amount of information about the current state of PHP.
 * This includes information about PHP compilation options and
 * extensions, the PHP version, server information and environment (if
 * compiled as a module), the PHP environment, OS version information,
 * paths, master and local values of configuration options, HTTP headers,
 * and the PHP License.
 * 
 * Because every system is setup differently, {@link phpinfo} is commonly
 * used to check configuration settings and for available predefined
 * variables on a given system.
 * 
 * {@link phpinfo} is also a valuable debugging tool as it contains all
 * EGPCS (Environment, GET, POST, Cookie, Server) data.
 * 
 * @param int $what The output may be customized by passing one or more
 *   of the following constants bitwise values summed together in the
 *   optional {@link what} parameter. One can also combine the respective
 *   constants or bitwise values together with the or operator.
 *   
 *   {@link phpinfo} options Name (constant) Value Description
 *   INFO_GENERAL 1 The configuration line, location, build date, Web
 *   Server, System and more. INFO_CREDITS 2 PHP Credits. See also {@link
 *   phpcredits}. INFO_CONFIGURATION 4 Current Local and Master values
 *   for PHP directives. See also {@link ini_get}. INFO_MODULES 8 Loaded
 *   modules and their respective settings. See also {@link
 *   get_loaded_extensions}. INFO_ENVIRONMENT 16 Environment Variable
 *   information that's also available in $_ENV. INFO_VARIABLES 32 Shows
 *   all predefined variables from EGPCS (Environment, GET, POST, Cookie,
 *   Server). INFO_LICENSE 64 PHP License information. See also the
 *   license FAQ. INFO_ALL -1 Shows all of the above.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function phpinfo($what){}

/**
 * Returns a string containing the version of the currently running PHP
 * parser or extension.
 * 
 * @param string $extension An optional extension name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function phpversion($extension){}

/**
 * Performs a syntax (lint) check on the specified {@link filename}
 * testing for scripting errors.
 * 
 * This is similar to using php -l from the commandline except that this
 * function will execute (but not output) the checked {@link filename}.
 * 
 * For example, if a function is defined in {@link filename}, this
 * defined function will be available to the file that executed {@link
 * php_check_syntax}, but output from {@link filename} will be
 * suppressed.
 * 
 * @param string $filename The name of the file being checked.
 * @param string $error_message If the {@link error_message} parameter
 *   is used, it will contain the error message generated by the syntax
 *   check. {@link error_message} is passed by reference.
 * @return bool
 * @since PHP 5
 **/
function php_check_syntax($filename, &$error_message){}

/**
 * Check if a file is loaded, and retrieve its path.
 * 
 * @return string
 * @since PHP 5 >= 5.2.4
 **/
function php_ini_loaded_file(){}

/**
 * {@link php_ini_scanned_files} returns a comma-separated list of
 * configuration files parsed after . These files are found in a
 * directory defined by the --with-config-file-scan-dir option which is
 * set during compilation.
 * 
 * The returned configuration files also include the path as declared in
 * the --with-config-file-scan-dir option.
 * 
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function php_ini_scanned_files(){}

/**
 * This function returns the ID which can be used to display the PHP logo
 * using the built-in image. Logo is displayed only if expose_php is On.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function php_logo_guid(){}

/**
 * @return string
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function php_sapi_name(){}

/**
 * Returns the PHP source code in {@link filename} with PHP comments and
 * whitespace removed. This may be useful for determining the amount of
 * actual code in your scripts compared with the amount of comments. This
 * is similar to using php -w from the commandline.
 * 
 * @param string $filename Path to the PHP file.
 * @return string
 * @since PHP 5
 **/
function php_strip_whitespace($filename){}

/**
 * {@link php_uname} returns a description of the operating system PHP is
 * running on. This is the same string you see at the very top of the
 * {@link phpinfo} output. For the name of just the operating system,
 * consider using the PHP_OS constant, but keep in mind this constant
 * will contain the operating system PHP was built on.
 * 
 * On some older UNIX platforms, it may not be able to determine the
 * current OS information in which case it will revert to displaying the
 * OS PHP was built on. This will only happen if your uname() library
 * call either doesn't exist or doesn't work.
 * 
 * @param string $mode {@link mode} is a single character that defines
 *   what information is returned: 'a': This is the default. Contains all
 *   modes in the sequence "s n r v m". 's': Operating system name. eg.
 *   FreeBSD. 'n': Host name. eg. localhost.example.com. 'r': Release
 *   name. eg. 5.1.2-RELEASE. 'v': Version information. Varies a lot
 *   between operating systems. 'm': Machine type. eg. i386.
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function php_uname($mode){}

/**
 * @return float
 * @since PHP 4, PHP 5
 **/
function pi(){}

/**
 * Converts a PNG file into a WBMP file.
 * 
 * @param string $pngname Path to PNG file.
 * @param string $wbmpname Path to destination WBMP file.
 * @param int $dest_height Destination image height.
 * @param int $dest_width Destination image width.
 * @param int $threshold Threshold value, between 0 and 8 (inclusive).
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function png2wbmp($pngname, $wbmpname, $dest_height, $dest_width, $threshold){}

/**
 * Opens a pipe to a process executed by forking the command given by
 * command.
 * 
 * @param string $command The command
 * @param string $mode The mode
 * @return resource
 * @since PHP 4, PHP 5
 **/
function popen($command, $mode){}

/**
 * Every array has an internal pointer to its "pos" element, which is
 * initialized to the first element inserted into the array.
 * 
 * @param array $array The array.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function pos(&$array){}

/**
 * {@link posix_access} checks the user's permission of a file.
 * 
 * @param string $file The name of the file to be tested.
 * @param int $mode A mask consisting of one or more of POSIX_F_OK,
 *   POSIX_R_OK, POSIX_W_OK and POSIX_X_OK. POSIX_R_OK, POSIX_W_OK and
 *   POSIX_X_OK request checking whether the file exists and has read,
 *   write and execute permissions, respectively. POSIX_F_OK just
 *   requests checking for the existence of the file.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function posix_access($file, $mode){}

/**
 * Generates a string which is the pathname for the current controlling
 * terminal for the process. On error this will set errno, which can be
 * checked using {@link posix_get_last_error}
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function posix_ctermid(){}

/**
 * Retrieve the error number set by the last posix function that failed.
 * The system error message associated with the errno may be checked with
 * {@link posix_strerror}.
 * 
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function posix_errno(){}

/**
 * Gets the absolute pathname of the script's current working directory.
 * On error, it sets errno which can be checked using {@link
 * posix_get_last_error}
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function posix_getcwd(){}

/**
 * Return the numeric effective group ID of the current process.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getegid(){}

/**
 * Return the numeric effective user ID of the current process. See also
 * {@link posix_getpwuid} for information on how to convert this into a
 * useable username.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_geteuid(){}

/**
 * Return the numeric real group ID of the current process.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getgid(){}

/**
 * Gets information about a group provided its id.
 * 
 * @param int $gid The group id.
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_getgrgid($gid){}

/**
 * Gets information about a group provided its name.
 * 
 * @param string $name The name of the group
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_getgrnam($name){}

/**
 * Gets the group set of the current process.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_getgroups(){}

/**
 * Returns the login name of the user owning the current process.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function posix_getlogin(){}

/**
 * Returns the process group identifier of the process {@link pid}.
 * 
 * @param int $pid The process id.
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getpgid($pid){}

/**
 * Return the process group identifier of the current process.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getpgrp(){}

/**
 * Return the process identifier of the current process.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getpid(){}

/**
 * Return the process identifier of the parent process of the current
 * process.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getppid(){}

/**
 * Returns an array of information about the given user.
 * 
 * @param string $username An alphanumeric username.
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_getpwnam($username){}

/**
 * Returns an array of information about the user referenced by the given
 * user ID.
 * 
 * @param int $uid The user identifier.
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_getpwuid($uid){}

/**
 * {@link posix_getrlimit} returns an array of information about the
 * current resource's soft and hard limits.
 * 
 * Each resource has an associated soft and hard limit. The soft limit is
 * the value that the kernel enforces for the corresponding resource. The
 * hard limit acts as a ceiling for the soft limit. An unprivileged
 * process may only set its soft limit to a value from 0 to the hard
 * limit, and irreversibly lower its hard limit.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_getrlimit(){}

/**
 * Return the session id of the process {@link pid}. The session id of a
 * process is the process group id of the session leader.
 * 
 * @param int $pid The process identifier. If set to 0, the current
 *   process is assumed. If an invalid {@link pid} is specified, then is
 *   returned and an error is set which can be checked with {@link
 *   posix_get_last_error}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getsid($pid){}

/**
 * Return the numeric real user ID of the current process.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_getuid(){}

/**
 * Retrieve the error number set by the last posix function that failed.
 * The system error message associated with the errno may be checked with
 * {@link posix_strerror}.
 * 
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function posix_get_last_error(){}

/**
 * Calculates the group access list for the user specified in name.
 * 
 * @param string $name The user to calculate the list for.
 * @param int $base_group_id Typically the group number from the
 *   password file.
 * @return bool
 * @since PHP 5 >= 5.2.0
 **/
function posix_initgroups($name, $base_group_id){}

/**
 * Determines if the file descriptor {@link fd} refers to a valid
 * terminal type device.
 * 
 * @param int $fd The file descriptor.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function posix_isatty($fd){}

/**
 * Send the signal {@link sig} to the process with the process identifier
 * {@link pid}.
 * 
 * @param int $pid The process identifier.
 * @param int $sig One of the PCNTL signals constants.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function posix_kill($pid, $sig){}

/**
 * {@link posix_mkfifo} creates a special FIFO file which exists in the
 * file system and acts as a bidirectional communication endpoint for
 * processes.
 * 
 * @param string $pathname Path to the FIFO file.
 * @param int $mode The second parameter {@link mode} has to be given
 *   in octal notation (e.g. 0644). The permission of the newly created
 *   FIFO also depends on the setting of the current {@link umask}. The
 *   permissions of the created file are (mode & ~umask).
 * @return bool
 * @since PHP 4, PHP 5
 **/
function posix_mkfifo($pathname, $mode){}

/**
 * Creates a special or ordinary file.
 * 
 * @param string $pathname The file to create
 * @param int $mode This parameter is constructed by a bitwise OR
 *   between file type (one of the following constants: POSIX_S_IFREG,
 *   POSIX_S_IFCHR, POSIX_S_IFBLK, POSIX_S_IFIFO or POSIX_S_IFSOCK) and
 *   permissions.
 * @param int $major The major device kernel identifier (required to
 *   pass when using S_IFCHR or S_IFBLK).
 * @param int $minor The minor device kernel identifier.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function posix_mknod($pathname, $mode, $major, $minor){}

/**
 * Set the effective group ID of the current process. This is a
 * privileged function and needs appropriate privileges (usually root) on
 * the system to be able to perform this function.
 * 
 * @param int $gid The group id.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function posix_setegid($gid){}

/**
 * Set the real user ID of the current process. This is a privileged
 * function and needs appropriate privileges (usually root) on the system
 * to be able to perform this function.
 * 
 * @param int $uid The user id.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function posix_seteuid($uid){}

/**
 * Set the real group ID of the current process. This is a privileged
 * function and needs appropriate privileges (usually root) on the system
 * to be able to perform this function. The appropriate order of function
 * calls is {@link posix_setgid} first, {@link posix_setuid} last.
 * 
 * @param int $gid The group id.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function posix_setgid($gid){}

/**
 * Let the process {@link pid} join the process group {@link pgid}.
 * 
 * @param int $pid The process id.
 * @param int $pgid The process group id.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function posix_setpgid($pid, $pgid){}

/**
 * Make the current process a session leader.
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function posix_setsid(){}

/**
 * Set the real user ID of the current process. This is a privileged
 * function that needs appropriate privileges (usually root) on the
 * system to be able to perform this function.
 * 
 * @param int $uid The user id.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function posix_setuid($uid){}

/**
 * Returns the POSIX system error message associated with the given
 * {@link errno}. You may get the {@link errno} parameter by calling
 * {@link posix_get_last_error}.
 * 
 * @param int $errno A POSIX error number, returned by {@link
 *   posix_get_last_error}. If set to 0, then the string "Success" is
 *   returned.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function posix_strerror($errno){}

/**
 * Gets information about the current CPU usage.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_times(){}

/**
 * Returns a string for the absolute path to the current terminal device
 * that is open on the file descriptor {@link fd}.
 * 
 * @param int $fd The file descriptor.
 * @return string
 * @since PHP 4, PHP 5
 **/
function posix_ttyname($fd){}

/**
 * Gets information about the system.
 * 
 * Posix requires that assumptions must not be made about the format of
 * the values, e.g. the assumption that a release may contain three
 * digits or anything else returned by this function.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function posix_uname(){}

/**
 * Returns {@link base} raised to the power of {@link exp}.
 * 
 * @param number $base The base to use
 * @param number $exp The exponent
 * @return number
 * @since PHP 4, PHP 5
 **/
function pow($base, $exp){}

/**
 * {@link preg_filter} is identical to {@link preg_replace} except it
 * only returns the matches. For details about how this function works,
 * read the {@link preg_replace} documentation.
 * 
 * @param mixed $pattern
 * @param mixed $replacement
 * @param mixed $subject
 * @param int $limit
 * @param int $count
 * @return mixed
 * @since PHP 5 >= 5.3.0
 **/
function preg_filter($pattern, $replacement, $subject, $limit, &$count){}

/**
 * Returns the array consisting of the elements of the {@link input}
 * array that match the given {@link pattern}.
 * 
 * @param string $pattern The pattern to search for, as a string.
 * @param array $input The input array.
 * @param int $flags If set to PREG_GREP_INVERT, this function returns
 *   the elements of the input array that do not match the given {@link
 *   pattern}.
 * @return array
 * @since PHP 4, PHP 5
 **/
function preg_grep($pattern, $input, $flags){}

/**
 * Returns the error code of the last PCRE regex execution.
 * 
 * {@link preg_last_error} example
 * 
 * <?php
 * 
 * preg_match('/(?:\D+|<\d+>)*[!?]/', 'foobar foobar foobar');
 * 
 * if (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) { print
 * 'Backtrack limit was exhausted!'; }
 * 
 * ?>
 * 
 * Backtrack limit was exhausted!
 * 
 * @return int
 * @since PHP 5 >= 5.2.0
 **/
function preg_last_error(){}

/**
 * Searches {@link subject} for a match to the regular expression given
 * in {@link pattern}.
 * 
 * @param string $pattern The pattern to search for, as a string.
 * @param string $subject The input string.
 * @param array $matches If {@link matches} is provided, then it is
 *   filled with the results of search. $matches[0] will contain the text
 *   that matched the full pattern, $matches[1] will have the text that
 *   matched the first captured parenthesized subpattern, and so on.
 * @param int $flags {@link flags} can be the following flag:
 *   PREG_OFFSET_CAPTURE If this flag is passed, for every occurring
 *   match the appendant string offset will also be returned. Note that
 *   this changes the value of {@link matches} into an array where every
 *   element is an array consisting of the matched string at offset 0 and
 *   its string offset into {@link subject} at offset 1.
 * @param int $offset
 * @return int
 * @since PHP 4, PHP 5
 **/
function preg_match($pattern, $subject, &$matches, $flags, $offset){}

/**
 * Searches {@link subject} for all matches to the regular expression
 * given in {@link pattern} and puts them in {@link matches} in the order
 * specified by {@link flags}.
 * 
 * After the first match is found, the subsequent searches are continued
 * on from end of the last match.
 * 
 * @param string $pattern The pattern to search for, as a string.
 * @param string $subject The input string.
 * @param array $matches Array of all matches in multi-dimensional
 *   array ordered according to {@link flags}.
 * @param int $flags Can be a combination of the following flags (note
 *   that it doesn't make sense to use PREG_PATTERN_ORDER together with
 *   PREG_SET_ORDER): PREG_PATTERN_ORDER Orders results so that
 *   $matches[0] is an array of full pattern matches, $matches[1] is an
 *   array of strings matched by the first parenthesized subpattern, and
 *   so on.
 *   
 *   <?php preg_match_all("|<[^>]+>(.*)</[^>]+>|U", "<b>example: </b><div
 *   align=left>this is a test</div>", $out, PREG_PATTERN_ORDER); echo
 *   $out[0][0] . ", " . $out[0][1] . "\n"; echo $out[1][0] . ", " .
 *   $out[1][1] . "\n"; ?>
 *   
 *   <b>example: </b>, <div align=left>this is a test</div> example: ,
 *   this is a test
 *   
 *   So, $out[0] contains array of strings that matched full pattern, and
 *   $out[1] contains array of strings enclosed by tags. PREG_SET_ORDER
 *   Orders results so that $matches[0] is an array of first set of
 *   matches, $matches[1] is an array of second set of matches, and so
 *   on.
 *   
 *   <?php preg_match_all("|<[^>]+>(.*)</[^>]+>|U", "<b>example: </b><div
 *   align=\"left\">this is a test</div>", $out, PREG_SET_ORDER); echo
 *   $out[0][0] . ", " . $out[0][1] . "\n"; echo $out[1][0] . ", " .
 *   $out[1][1] . "\n"; ?>
 *   
 *   <b>example: </b>, example: <div align="left">this is a test</div>,
 *   this is a test
 *   
 *   PREG_OFFSET_CAPTURE If this flag is passed, for every occurring
 *   match the appendant string offset will also be returned. Note that
 *   this changes the value of {@link matches} into an array where every
 *   element is an array consisting of the matched string at offset 0 and
 *   its string offset into {@link subject} at offset 1. If no order flag
 *   is given, PREG_PATTERN_ORDER is assumed.
 * @param int $offset Orders results so that $matches[0] is an array of
 *   full pattern matches, $matches[1] is an array of strings matched by
 *   the first parenthesized subpattern, and so on.
 *   
 *   <?php preg_match_all("|<[^>]+>(.*)</[^>]+>|U", "<b>example: </b><div
 *   align=left>this is a test</div>", $out, PREG_PATTERN_ORDER); echo
 *   $out[0][0] . ", " . $out[0][1] . "\n"; echo $out[1][0] . ", " .
 *   $out[1][1] . "\n"; ?>
 *   
 *   <b>example: </b>, <div align=left>this is a test</div> example: ,
 *   this is a test
 *   
 *   So, $out[0] contains array of strings that matched full pattern, and
 *   $out[1] contains array of strings enclosed by tags.
 * @return int
 * @since PHP 4, PHP 5
 **/
function preg_match_all($pattern, $subject, &$matches, $flags, $offset){}

/**
 * {@link preg_quote} takes {@link str} and puts a backslash in front of
 * every character that is part of the regular expression syntax. This is
 * useful if you have a run-time string that you need to match in some
 * text and the string may contain special regex characters.
 * 
 * The special regular expression characters are: . \ + * ? [ ^ ] $ ( ) {
 * } = ! < > | : -
 * 
 * @param string $str The input string.
 * @param string $delimiter If the optional {@link delimiter} is
 *   specified, it will also be escaped. This is useful for escaping the
 *   delimiter that is required by the PCRE functions. The / is the most
 *   commonly used delimiter.
 * @return string
 * @since PHP 4, PHP 5
 **/
function preg_quote($str, $delimiter){}

/**
 * Searches {@link subject} for matches to {@link pattern} and replaces
 * them with {@link replacement}.
 * 
 * @param mixed $pattern The pattern to search for. It can be either a
 *   string or an array with strings. The e modifier makes {@link
 *   preg_replace} treat the {@link replacement} parameter as PHP code
 *   after the appropriate references substitution is done. Tip: make
 *   sure that {@link replacement} constitutes a valid PHP code string,
 *   otherwise PHP will complain about a parse error at the line
 *   containing {@link preg_replace}.
 * @param mixed $replacement The string or an array with strings to
 *   replace. If this parameter is a string and the {@link pattern}
 *   parameter is an array, all patterns will be replaced by that string.
 *   If both {@link pattern} and {@link replacement} parameters are
 *   arrays, each {@link pattern} will be replaced by the {@link
 *   replacement} counterpart. If there are fewer elements in the {@link
 *   replacement} array than in the {@link pattern} array, any extra
 *   {@link pattern}s will be replaced by an empty string. {@link
 *   replacement} may contain references of the form \\n or (since PHP
 *   4.0.4) $n, with the latter form being the preferred one. Every such
 *   reference will be replaced by the text captured by the n'th
 *   parenthesized pattern. n can be from 0 to 99, and \\0 or $0 refers
 *   to the text matched by the whole pattern. Opening parentheses are
 *   counted from left to right (starting from 1) to obtain the number of
 *   the capturing subpattern. To use backslash in replacement, it must
 *   be doubled ("\\\\" PHP string). When working with a replacement
 *   pattern where a backreference is immediately followed by another
 *   number (i.e.: placing a literal number immediately after a matched
 *   pattern), you cannot use the familiar \\1 notation for your
 *   backreference. \\11, for example, would confuse {@link preg_replace}
 *   since it does not know whether you want the \\1 backreference
 *   followed by a literal 1, or the \\11 backreference followed by
 *   nothing. In this case the solution is to use \${1}1. This creates an
 *   isolated $1 backreference, leaving the 1 as a literal. When using
 *   the e modifier, this function escapes some characters (namely ', ",
 *   \ and NULL) in the strings that replace the backreferences. This is
 *   done to ensure that no syntax errors arise from backreference usage
 *   with either single or double quotes (e.g.
 *   'strlen(\'$1\')+strlen("$2")'). Make sure you are aware of PHP's
 *   string syntax to know exactly how the interpreted string will look
 *   like.
 * @param mixed $subject The string or an array with strings to search
 *   and replace. If {@link subject} is an array, then the search and
 *   replace is performed on every entry of {@link subject}, and the
 *   return value is an array as well.
 * @param int $limit The maximum possible replacements for each pattern
 *   in each {@link subject} string. Defaults to -1 (no limit).
 * @param int $count If specified, this variable will be filled with
 *   the number of replacements done.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function preg_replace($pattern, $replacement, $subject, $limit, &$count){}

/**
 * The behavior of this function is almost identical to {@link
 * preg_replace}, except for the fact that instead of {@link replacement}
 * parameter, one should specify a {@link callback}.
 * 
 * @param mixed $pattern The pattern to search for. It can be either a
 *   string or an array with strings.
 * @param callback $callback A callback that will be called and passed
 *   an array of matched elements in the {@link subject} string. The
 *   callback should return the replacement string. You'll often need the
 *   {@link callback} function for a {@link preg_replace_callback} in
 *   just one place. In this case you can use an anonymous function
 *   (since PHP 5.3.0) or {@link create_function} to declare an anonymous
 *   function as callback within the call to {@link
 *   preg_replace_callback}. By doing it this way you have all
 *   information for the call in one place and do not clutter the
 *   function namespace with a callback function's name not used anywhere
 *   else.
 *   
 *   {@link preg_replace_callback} and {@link create_function}
 *   
 *   <?php /* a unix-style command line filter to convert uppercase *
 *   letters at the beginning of paragraphs to lowercase * / $fp =
 *   fopen("php://stdin", "r") or die("can't read stdin"); while
 *   (!feof($fp)) { $line = fgets($fp); $line = preg_replace_callback(
 *   '|<p>\s*\w|', create_function( // single quotes are essential here,
 *   // or alternative escape all $ as \$ '$matches', 'return
 *   strtolower($matches[0]);' ), $line ); echo $line; } fclose($fp); ?>
 * @param mixed $subject The string or an array with strings to search
 *   and replace.
 * @param int $limit The maximum possible replacements for each pattern
 *   in each {@link subject} string. Defaults to -1 (no limit).
 * @param int $count If specified, this variable will be filled with
 *   the number of replacements done.
 * @return mixed
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function preg_replace_callback($pattern, $callback, $subject, $limit, &$count){}

/**
 * Split the given string by a regular expression.
 * 
 * @param string $pattern The pattern to search for, as a string.
 * @param string $subject The input string.
 * @param int $limit If specified, then only substrings up to {@link
 *   limit} are returned with the rest of the string being placed in the
 *   last substring. A {@link limit} of -1, 0 or null means "no limit"
 *   and, as is standard across PHP, you can use null to skip to the
 *   {@link flags} parameter.
 * @param int $flags {@link flags} can be any combination of the
 *   following flags (combined with the | bitwise operator):
 *   PREG_SPLIT_NO_EMPTY If this flag is set, only non-empty pieces will
 *   be returned by {@link preg_split}. PREG_SPLIT_DELIM_CAPTURE If this
 *   flag is set, parenthesized expression in the delimiter pattern will
 *   be captured and returned as well. PREG_SPLIT_OFFSET_CAPTURE If this
 *   flag is set, for every occurring match the appendant string offset
 *   will also be returned. Note that this changes the return value in an
 *   array where every element is an array consisting of the matched
 *   string at offset 0 and its string offset into {@link subject} at
 *   offset 1.
 * @return array
 * @since PHP 4, PHP 5
 **/
function preg_split($pattern, $subject, $limit, $flags){}

/**
 * Rewind the internal array pointer.
 * 
 * {@link prev} behaves just like {@link next}, except it rewinds the
 * internal array pointer one place instead of advancing it.
 * 
 * @param array $array The input array.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function prev(&$array){}

/**
 * This function deletes the printers spool file.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid handle to a printer.
 * @return void
 **/
function printer_abort($printer_handle){}

/**
 * This function closes the printer connection. {@link printer_close}
 * also closes the active device context.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid handle to a printer.
 * @return void
 **/
function printer_close($printer_handle){}

/**
 * The function creates a new brush and returns a handle to it. A brush
 * is used to fill shapes. For an example see {@link
 * printer_select_brush}.
 * 
 * @param int $style {@link style} must be one of the following
 *   constants: PRINTER_BRUSH_SOLID: creates a brush with a solid color.
 *   PRINTER_BRUSH_DIAGONAL: creates a brush with a 45-degree upward
 *   left-to-right hatch ( / ). PRINTER_BRUSH_CROSS: creates a brush with
 *   a cross hatch ( + ). PRINTER_BRUSH_DIAGCROSS: creates a brush with a
 *   45 cross hatch ( x ). PRINTER_BRUSH_FDIAGONAL: creates a brush with
 *   a 45-degree downward left-to-right hatch ( \ ).
 *   PRINTER_BRUSH_HORIZONTAL: creates a brush with a horizontal hatch (
 *   - ). PRINTER_BRUSH_VERTICAL: creates a brush with a vertical hatch (
 *   | ). PRINTER_BRUSH_CUSTOM: creates a custom brush from an BMP file.
 *   The second parameter is used to specify the BMP instead of the RGB
 *   color code.
 * @param string $color {@link color} must be a color in RGB hex
 *   format, i.e. "000000" for black.
 * @return resource
 **/
function printer_create_brush($style, $color){}

/**
 * The function creates a new device context. A device context is used to
 * customize the graphic objects of the document.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @return void
 **/
function printer_create_dc($printer_handle){}

/**
 * The function creates a new font and returns a handle to it. A font is
 * used to draw text. For an example see {@link printer_select_font}.
 * 
 * @param string $face {@link face} must be a string specifying the
 *   font face.
 * @param int $height {@link height} specifies the font height.
 * @param int $width {@link width} specifies the font width.
 * @param int $font_weight The {@link font_weight} specifies the font
 *   weight (400 is normal), and can be one of the following predefined
 *   constants. PRINTER_FW_THIN: sets the font weight to thin (100).
 *   PRINTER_FW_ULTRALIGHT: sets the font weight to ultra light (200).
 *   PRINTER_FW_LIGHT: sets the font weight to light (300).
 *   PRINTER_FW_NORMAL: sets the font weight to normal (400).
 *   PRINTER_FW_MEDIUM: sets the font weight to medium (500).
 *   PRINTER_FW_BOLD: sets the font weight to bold (700).
 *   PRINTER_FW_ULTRABOLD: sets the font weight to ultra bold (800).
 *   PRINTER_FW_HEAVY: sets the font weight to heavy (900).
 * @param bool $italic {@link italic} can be or , and sets whether the
 *   font should be italic.
 * @param bool $underline {@link underline} can be or , and sets
 *   whether the font should be underlined.
 * @param bool $strikeout {@link strikeout} can be or , and sets
 *   whether the font should be stroked out.
 * @param int $orientation {@link orientation} specifies a rotation.
 * @return resource
 **/
function printer_create_font($face, $height, $width, $font_weight, $italic, $underline, $strikeout, $orientation){}

/**
 * The function creates a new pen and returns a handle to it. A pen is
 * used to draw lines and curves. For an example see {@link
 * printer_select_pen}.
 * 
 * @param int $style {@link style} must be one of the following
 *   constants: PRINTER_PEN_SOLID: creates a solid pen. PRINTER_PEN_DASH:
 *   creates a dashed pen. PRINTER_PEN_DOT: creates a dotted pen.
 *   PRINTER_PEN_DASHDOT: creates a pen with dashes and dots.
 *   PRINTER_PEN_DASHDOTDOT: creates a pen with dashes and double dots.
 *   PRINTER_PEN_INVISIBLE: creates an invisible pen.
 * @param int $width {@link width} specifies the width of the pen.
 * @param string $color {@link color} must be a color in RGB hex
 *   format, i.e. "000000" for black.
 * @return resource
 **/
function printer_create_pen($style, $width, $color){}

/**
 * The function deletes the selected brush. For an example see {@link
 * printer_select_brush}.
 * 
 * @param resource $brush_handle {@link brush_handle} must be a valid
 *   handle to a brush.
 * @return void
 **/
function printer_delete_brush($brush_handle){}

/**
 * The function deletes the device context. For an example see {@link
 * printer_create_dc}.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @return bool
 **/
function printer_delete_dc($printer_handle){}

/**
 * The function deletes the selected font. For an example see {@link
 * printer_select_font}.
 * 
 * @param resource $font_handle {@link font_handle} must be a valid
 *   handle to a font.
 * @return void
 **/
function printer_delete_font($font_handle){}

/**
 * The function deletes the selected pen. For an example see {@link
 * printer_select_pen}.
 * 
 * @param resource $pen_handle {@link pen_handle} must be a valid pen
 *   handle.
 * @return void
 **/
function printer_delete_pen($pen_handle){}

/**
 * The function draws an bmp.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param string $filename Path to the bitmap.
 * @param int $x {@link x} is the upper left x coordinate of the
 *   bitmap.
 * @param int $y {@link y} is the upper left y coordinate of the
 *   bitmap.
 * @param int $width The bitmap width.
 * @param int $height The bitmap height.
 * @return bool
 **/
function printer_draw_bmp($printer_handle, $filename, $x, $y, $width, $height){}

/**
 * The function simply draws an chord.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $rec_x {@link rec_x} is the upper left x coordinate of
 *   the bounding rectangle.
 * @param int $rec_y {@link rec_y} is the upper left y coordinate of
 *   the bounding rectangle.
 * @param int $rec_x1 {@link rec_x1} is the lower right x coordinate of
 *   the bounding rectangle.
 * @param int $rec_y1 {@link rec_y1} is the lower right y coordinate of
 *   the bounding rectangle.
 * @param int $rad_x {@link rad_x} is x coordinate of the radial
 *   defining the beginning of the chord.
 * @param int $rad_y {@link rad_y} is y coordinate of the radial
 *   defining the beginning of the chord.
 * @param int $rad_x1 {@link rad_x1} is x coordinate of the radial
 *   defining the end of the chord.
 * @param int $rad_y1 {@link rad_y1} is y coordinate of the radial
 *   defining the end of the chord.
 * @return void
 **/
function printer_draw_chord($printer_handle, $rec_x, $rec_y, $rec_x1, $rec_y1, $rad_x, $rad_y, $rad_x1, $rad_y1){}

/**
 * The function draws an ellipse.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $ul_x {@link ul_x} is the upper left x coordinate of the
 *   ellipse.
 * @param int $ul_y {@link ul_y} is the upper left y coordinate of the
 *   ellipse.
 * @param int $lr_x {@link lr_x} is the lower right x coordinate of the
 *   ellipse.
 * @param int $lr_y {@link lr_y} is the lower right y coordinate of the
 *   ellipse.
 * @return void
 **/
function printer_draw_elipse($printer_handle, $ul_x, $ul_y, $lr_x, $lr_y){}

/**
 * The function draws a line using the selected pen.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $from_x {@link from_x} is the x coordinate of the origin
 *   point.
 * @param int $from_y {@link from_y} is the y coordinate of the origin
 *   point.
 * @param int $to_x {@link to_x} is the x coordinate of the destination
 *   point.
 * @param int $to_y {@link to_y} is the y coordinate of the destination
 *   point.
 * @return void
 **/
function printer_draw_line($printer_handle, $from_x, $from_y, $to_x, $to_y){}

/**
 * The function draws an pie.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $rec_x {@link rec_x} is the upper left x coordinate of
 *   the bounding rectangle.
 * @param int $rec_y {@link rec_y} is the upper left y coordinate of
 *   the bounding rectangle.
 * @param int $rec_x1 {@link rec_x1} is the lower right x coordinate of
 *   the bounding rectangle.
 * @param int $rec_y1 {@link rec_y1} is the lower right y coordinate of
 *   the bounding rectangle.
 * @param int $rad1_x {@link rad1_x} is x coordinate of the first
 *   radial's ending.
 * @param int $rad1_y {@link rad1_y} is y coordinate of the first
 *   radial's ending.
 * @param int $rad2_x {@link rad2_x} is x coordinate of the second
 *   radial's ending.
 * @param int $rad2_y {@link rad2_y} is y coordinate of the second
 *   radial's ending.
 * @return void
 **/
function printer_draw_pie($printer_handle, $rec_x, $rec_y, $rec_x1, $rec_y1, $rad1_x, $rad1_y, $rad2_x, $rad2_y){}

/**
 * The function draws a rectangle.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $ul_x {@link ul_x} is the upper left x coordinate of the
 *   rectangle.
 * @param int $ul_y {@link ul_y} is the upper left y coordinate of the
 *   rectangle.
 * @param int $lr_x {@link lr_x} is the lower right x coordinate of the
 *   rectangle.
 * @param int $lr_y {@link lr_y} is the lower right y coordinate of the
 *   rectangle.
 * @return void
 **/
function printer_draw_rectangle($printer_handle, $ul_x, $ul_y, $lr_x, $lr_y){}

/**
 * The function draws a rectangle with rounded corners.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $ul_x {@link ul_x} is the upper left x coordinate of the
 *   rectangle.
 * @param int $ul_y {@link ul_y} is the upper left y coordinate of the
 *   rectangle.
 * @param int $lr_x {@link lr_x} is the lower right x coordinate of the
 *   rectangle.
 * @param int $lr_y {@link lr_y} is the lower right y coordinate of the
 *   rectangle.
 * @param int $width {@link width} is the width of the ellipse.
 * @param int $height {@link height} is the height of the ellipse.
 * @return void
 **/
function printer_draw_roundrect($printer_handle, $ul_x, $ul_y, $lr_x, $lr_y, $width, $height){}

/**
 * The function draws {@link text} at position {@link x}, {@link y} using
 * the selected font.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid handle to a printer.
 * @param string $text The text to be written.
 * @param int $x {@link x} is the x coordinate of the position.
 * @param int $y {@link y} is the y coordinate of the position.
 * @return void
 **/
function printer_draw_text($printer_handle, $text, $x, $y){}

/**
 * Closes a new document in the printer spooler. The document is now
 * ready for printing. For an example see {@link printer_start_doc}.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid handle to a printer.
 * @return bool
 **/
function printer_end_doc($printer_handle){}

/**
 * The function closes the active page in the active document. For an
 * example see {@link printer_start_doc}.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid handle to a printer.
 * @return bool
 **/
function printer_end_page($printer_handle){}

/**
 * The function retrieves the configuration setting of {@link option}.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid handle to a printer.
 * @param string $option Take a look at {@link printer_set_option} for
 *   the settings that can be retrieved, additionally the following
 *   settings can be retrieved: PRINTER_DEVICENAME returns the devicename
 *   of the printer. PRINTER_DRIVERVERSION returns the printer driver
 *   version.
 * @return mixed
 **/
function printer_get_option($printer_handle, $option){}

/**
 * The function enumerates available printers and their capabilities.
 * 
 * @param int $enumtype {@link enumtype} must be one of the following
 *   predefined constants: PRINTER_ENUM_LOCAL: enumerates the locally
 *   installed printers. PRINTER_ENUM_NAME: enumerates the printer of
 *   {@link name}, can be a server, domain or print provider.
 *   PRINTER_ENUM_SHARED: this parameter can't be used alone, it has to
 *   be OR'ed with other parameters, i.e. PRINTER_ENUM_LOCAL to detect
 *   the locally shared printers. PRINTER_ENUM_DEFAULT: (Win9.x only)
 *   enumerates the default printer. PRINTER_ENUM_CONNECTIONS:
 *   (WinNT/2000 only) enumerates the printers to which the user has made
 *   connections. PRINTER_ENUM_NETWORK: (WinNT/2000 only) enumerates
 *   network printers in the computer's domain. Only valid if {@link
 *   level} is 1. PRINTER_ENUM_REMOTE: (WinNT/2000 only) enumerates
 *   network printers and print servers in the computer's domain. Only
 *   valid if {@link level} is 1.
 * @param string $name Used with PRINTER_ENUM_NAME.
 * @param int $level {@link level} sets the level of information
 *   request. Can be 1,2,4 or 5.
 * @return array
 **/
function printer_list($enumtype, $name, $level){}

/**
 * The function calculates the logical font height of {@link height}.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $height The font height.
 * @return int
 **/
function printer_logical_fontheight($printer_handle, $height){}

/**
 * This function tries to open a connection to the given printer.
 * 
 * {@link printer_open} also starts a device context.
 * 
 * @param string $printername The printer name. If no parameter was
 *   given it tries to open a connection to the default printer (if not
 *   specified in as printer.default_printer, PHP tries to detect it).
 * @return resource
 **/
function printer_open($printername){}

/**
 * The function selects a brush as the active drawing object of the
 * actual device context. A brush is used to fill shapes. If you draw an
 * rectangle the brush is used to draw the shapes, while the pen is used
 * to draw the border.
 * 
 * If you haven't selected a brush before drawing shapes, the shape won't
 * be filled.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param resource $brush_handle {@link brush_handle} must be a valid
 *   brush handle.
 * @return void
 **/
function printer_select_brush($printer_handle, $brush_handle){}

/**
 * The function selects a font to draw text.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param resource $font_handle {@link font_handle} must be a valid
 *   font handle.
 * @return void
 **/
function printer_select_font($printer_handle, $font_handle){}

/**
 * The function selects a pen as the active drawing object of the actual
 * device context. A pen is used to draw lines and curves. I.e. if you
 * draw a single line the pen is used. If you draw an rectangle the pen
 * is used to draw the borders, while the brush is used to fill the
 * shape. If you haven't selected a pen before drawing shapes, the shape
 * won't be outlined.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param resource $pen_handle {@link pen_handle} must be a valid pen
 *   handle.
 * @return void
 **/
function printer_select_pen($printer_handle, $pen_handle){}

/**
 * The function sets options for the current connection.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param int $option Option can be one of the following constants:
 *   PRINTER_COPIES: sets how many copies should be printed, {@link
 *   value} must be an integer. PRINTER_MODE: specifies the type of data
 *   (text, raw or emf), {@link value} must be a string. PRINTER_TITLE:
 *   specifies the name of the document, {@link value} must be a string.
 *   PRINTER_ORIENTATION: specifies the orientation of the paper, {@link
 *   value} can be either PRINTER_ORIENTATION_PORTRAIT or
 *   PRINTER_ORIENTATION_LANDSCAPE PRINTER_RESOLUTION_Y: specifies the
 *   y-resolution in DPI, {@link value} must be an integer.
 *   PRINTER_RESOLUTION_X: specifies the x-resolution in DPI, {@link
 *   value} must be an integer. PRINTER_PAPER_FORMAT: specifies a
 *   predefined paper format, set {@link value} to PRINTER_FORMAT_CUSTOM
 *   if you want to specify a custom format with PRINTER_PAPER_WIDTH and
 *   PRINTER_PAPER_LENGTH. {@link value} can be one of the following
 *   constants. PRINTER_FORMAT_CUSTOM: let's you specify a custom paper
 *   format. PRINTER_FORMAT_LETTER: specifies standard letter format (8
 *   1/2- by 11-inches). PRINTER_FORMAT_LEGAL: specifies standard legal
 *   format (8 1/2- by 14-inches). PRINTER_FORMAT_A3: specifies standard
 *   A3 format (297- by 420-millimeters). PRINTER_FORMAT_A4: specifies
 *   standard A4 format (210- by 297-millimeters). PRINTER_FORMAT_A5:
 *   specifies standard A5 format (148- by 210-millimeters).
 *   PRINTER_FORMAT_B4: specifies standard B4 format (250- by
 *   354-millimeters). PRINTER_FORMAT_B5: specifies standard B5 format
 *   (182- by 257-millimeter). PRINTER_FORMAT_FOLIO: specifies standard
 *   FOLIO format (8 1/2- by 13-inch). PRINTER_PAPER_LENGTH: if
 *   PRINTER_PAPER_FORMAT is set to PRINTER_FORMAT_CUSTOM,
 *   PRINTER_PAPER_LENGTH specifies a custom paper length in mm, {@link
 *   value} must be an integer. PRINTER_PAPER_WIDTH: if
 *   PRINTER_PAPER_FORMAT is set to PRINTER_FORMAT_CUSTOM,
 *   PRINTER_PAPER_WIDTH specifies a custom paper width in mm, {@link
 *   value} must be an integer. PRINTER_SCALE: specifies the factor by
 *   which the printed output is to be scaled. the page size is scaled
 *   from the physical page size by a factor of scale/100. for example if
 *   you set the scale to 50, the output would be half of its original
 *   size. {@link value} must be an integer. PRINTER_BACKGROUND_COLOR:
 *   specifies the background color for the actual device context, {@link
 *   value} must be a string containing the rgb information in hex format
 *   i.e. "005533". PRINTER_TEXT_COLOR: specifies the text color for the
 *   actual device context, {@link value} must be a string containing the
 *   rgb information in hex format i.e. "005533". PRINTER_TEXT_ALIGN:
 *   specifies the text alignment for the actual device context, {@link
 *   value} can be combined through OR'ing the following constants:
 *   PRINTER_TA_BASELINE: text will be aligned at the base line.
 *   PRINTER_TA_BOTTOM: text will be aligned at the bottom.
 *   PRINTER_TA_TOP: text will be aligned at the top. PRINTER_TA_CENTER:
 *   text will be aligned at the center. PRINTER_TA_LEFT: text will be
 *   aligned at the left. PRINTER_TA_RIGHT: text will be aligned at the
 *   right.
 * @param mixed $value The {@link option} value.
 * @return bool
 **/
function printer_set_option($printer_handle, $option, $value){}

/**
 * The function creates a new document in the printer spooler. A document
 * can contain multiple pages, it's used to schedule the print job in the
 * spooler.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param string $document The optional parameter {@link document} can
 *   be used to set an alternative document name.
 * @return bool
 **/
function printer_start_doc($printer_handle, $document){}

/**
 * The function creates a new page in the active document. For an example
 * see {@link printer_start_doc}.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @return bool
 **/
function printer_start_page($printer_handle){}

/**
 * Writes {@link content} directly to the printer.
 * 
 * @param resource $printer_handle {@link printer_handle} must be a
 *   valid printer handle.
 * @param string $content The data to be written.
 * @return bool
 **/
function printer_write($printer_handle, $content){}

/**
 * @param string $format See {@link sprintf} for a description of
 *   {@link format}.
 * @param mixed $args
 * @return int
 * @since PHP 4, PHP 5
 **/
function printf($format, $args){}

/**
 * {@link print_r} displays information about a variable in a way that's
 * readable by humans.
 * 
 * {@link print_r}, {@link var_dump} and {@link var_export} will also
 * show protected and private properties of objects with PHP 5. Static
 * class members will not be shown.
 * 
 * Remember that {@link print_r} will move the array pointer to the end.
 * Use {@link reset} to bring it back to beginning.
 * 
 * @param mixed $expression The expression to be printed.
 * @param bool $return If you would like to capture the output of
 *   {@link print_r}, use the {@link return} parameter. When this
 *   parameter is set to , {@link print_r} will return the information
 *   rather than print it.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function print_r($expression, $return){}

/**
 * {@link proc_close} is similar to {@link pclose} except that it only
 * works on processes opened by {@link proc_open}. {@link proc_close}
 * waits for the process to terminate, and returns its exit code. If you
 * have open pipes to that process, you should {@link fclose} them prior
 * to calling this function in order to avoid a deadlock - the child
 * process may not be able to exit while the pipes are open.
 * 
 * @param resource $process The {@link proc_open} resource that will be
 *   closed.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function proc_close($process){}

/**
 * {@link proc_get_status} fetches data about a process opened using
 * {@link proc_open}.
 * 
 * @param resource $process The {@link proc_open} resource that will be
 *   evaluated.
 * @return array
 * @since PHP 5
 **/
function proc_get_status($process){}

/**
 * {@link proc_nice} changes the priority of the current process by the
 * amount specified in {@link increment}. A positive {@link increment}
 * will lower the priority of the current process, whereas a negative
 * {@link increment} will raise the priority.
 * 
 * {@link proc_nice} is not related to {@link proc_open} and its
 * associated functions in any way.
 * 
 * @param int $increment The increment value of the priority change.
 * @return bool
 * @since PHP 5
 **/
function proc_nice($increment){}

/**
 * {@link proc_open} is similar to {@link popen} but provides a much
 * greater degree of control over the program execution.
 * 
 * @param string $cmd The command to execute
 * @param array $descriptorspec An indexed array where the key
 *   represents the descriptor number and the value represents how PHP
 *   will pass that descriptor to the child process. 0 is stdin, 1 is
 *   stdout, while 2 is stderr. Each element can be: An array describing
 *   the pipe to pass to the process. The first element is the descriptor
 *   type and the second element is an option for the given type. Valid
 *   types are pipe (the second element is either r to pass the read end
 *   of the pipe to the process, or w to pass the write end) and file
 *   (the second element is a filename). A stream resource representing a
 *   real file descriptor (e.g. opened file, a socket, STDIN). The file
 *   descriptor numbers are not limited to 0, 1 and 2 - you may specify
 *   any valid file descriptor number and it will be passed to the child
 *   process. This allows your script to interoperate with other scripts
 *   that run as "co-processes". In particular, this is useful for
 *   passing passphrases to programs like PGP, GPG and openssl in a more
 *   secure manner. It is also useful for reading status information
 *   provided by those programs on auxiliary file descriptors.
 * @param array $pipes Will be set to an indexed array of file pointers
 *   that correspond to PHP's end of any pipes that are created.
 * @param string $cwd The initial working dir for the command. This
 *   must be an absolute directory path, or if you want to use the
 *   default value (the working dir of the current PHP process)
 * @param array $env An array with the environment variables for the
 *   command that will be run, or to use the same environment as the
 *   current PHP process
 * @param array $other_options Allows you to specify additional
 *   options. Currently supported options include: suppress_errors
 *   (windows only): suppresses errors generated by this function when
 *   it's set to bypass_shell (windows only): bypass cmd.exe shell when
 *   set to context: stream context used when opening files (created with
 *   {@link stream_context_create}) binary_pipes: open pipes in binary
 *   mode, instead of using the usual stream_encoding
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function proc_open($cmd, $descriptorspec, &$pipes, $cwd, $env, $other_options){}

/**
 * Signals a {@link process} (created using {@link proc_open}) that it
 * should terminate. {@link proc_terminate} returns immediately and does
 * not wait for the process to terminate.
 * 
 * {@link proc_terminate} allows you terminate the process and continue
 * with other tasks. You may poll the process (to see if it has stopped
 * yet) by using the {@link proc_get_status} function.
 * 
 * @param resource $process The {@link proc_open} resource that will be
 *   closed.
 * @param int $signal This optional parameter is only useful on POSIX
 *   operating systems; you may specify a signal to send to the process
 *   using the kill(2) system call. The default is SIGTERM.
 * @return bool
 * @since PHP 5
 **/
function proc_terminate($process, $signal){}

/**
 * This function checks if the given {@link property} exists in the
 * specified class.
 * 
 * @param mixed $class The class name or an object of the class to test
 *   for
 * @param string $property The name of the property
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function property_exists($class, $property){}

/**
 * @param int $dictionary_link
 * @param string $word The added word.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_add_to_personal($dictionary_link, $word){}

/**
 * @param int $dictionary_link
 * @param string $word The added word.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_add_to_session($dictionary_link, $word){}

/**
 * @param int $dictionary_link
 * @param string $word The tested word.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_check($dictionary_link, $word){}

/**
 * @param int $dictionary_link
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_clear_session($dictionary_link){}

/**
 * Create a config used to open a dictionary.
 * 
 * {@link pspell_config_create} has a very similar syntax to {@link
 * pspell_new}. In fact, using {@link pspell_config_create} immediately
 * followed by {@link pspell_new_config} will produce the exact same
 * result. However, after creating a new config, you can also use {@link
 * pspell_config_*} functions before calling {@link pspell_new_config} to
 * take advantage of some advanced functionality.
 * 
 * For more information and examples, check out inline manual pspell
 * website:.
 * 
 * @param string $language The language parameter is the language code
 *   which consists of the two letter ISO 639 language code and an
 *   optional two letter ISO 3166 country code after a dash or
 *   underscore.
 * @param string $spelling The spelling parameter is the requested
 *   spelling for languages with more than one spelling such as English.
 *   Known values are 'american', 'british', and 'canadian'.
 * @param string $jargon The jargon parameter contains extra
 *   information to distinguish two different words lists that have the
 *   same language and spelling parameters.
 * @param string $encoding The encoding parameter is the encoding that
 *   words are expected to be in. Valid values are 'utf-8', 'iso8859-*',
 *   'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16', 'machine
 *   unsigned 32'. This parameter is largely untested, so be careful when
 *   using.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_create($language, $spelling, $jargon, $encoding){}

/**
 * @param int $conf
 * @param string $directory
 * @return bool
 * @since PHP 5
 **/
function pspell_config_data_dir($conf, $directory){}

/**
 * @param int $conf
 * @param string $directory
 * @return bool
 * @since PHP 5
 **/
function pspell_config_dict_dir($conf, $directory){}

/**
 * @param int $dictionary_link
 * @param int $n Words less than {@link n} characters will be skipped.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_ignore($dictionary_link, $n){}

/**
 * @param int $dictionary_link
 * @param int $mode The mode parameter is the mode in which
 *   spellchecker will work. There are several modes available:
 *   PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL
 *   - Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a
 *   lot of suggestions)
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_mode($dictionary_link, $mode){}

/**
 * Set a file that contains personal wordlist. The personal wordlist will
 * be loaded and used in addition to the standard one after you call
 * {@link pspell_new_config}. The file is also the file where {@link
 * pspell_save_wordlist} will save personal wordlist to.
 * 
 * {@link pspell_config_personal} should be used on a config before
 * calling {@link pspell_new_config}.
 * 
 * @param int $dictionary_link
 * @param string $file The personal wordlist. If the file does not
 *   exist, it will be created. The file should be writable by whoever
 *   PHP runs as (e.g. nobody).
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_personal($dictionary_link, $file){}

/**
 * Set a file that contains replacement pairs.
 * 
 * The replacement pairs improve the quality of the spellchecker. When a
 * word is misspelled, and a proper suggestion was not found in the list,
 * {@link pspell_store_replacement} can be used to store a replacement
 * pair and then {@link pspell_save_wordlist} to save the wordlist along
 * with the replacement pairs.
 * 
 * {@link pspell_config_repl} should be used on a config before calling
 * {@link pspell_new_config}.
 * 
 * @param int $dictionary_link
 * @param string $file The file should be writable by whoever PHP runs
 *   as (e.g. nobody).
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_repl($dictionary_link, $file){}

/**
 * This function determines whether run-together words will be treated as
 * legal compounds. That is, "thecat" will be a legal compound, although
 * there should be a space between the two words. Changing this setting
 * only affects the results returned by {@link pspell_check}; {@link
 * pspell_suggest} will still return suggestions.
 * 
 * {@link pspell_config_runtogether} should be used on a config before
 * calling {@link pspell_new_config}.
 * 
 * @param int $dictionary_link
 * @param bool $flag if run-together words should be treated as legal
 *   compounds, otherwise.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_runtogether($dictionary_link, $flag){}

/**
 * {@link pspell_config_save_repl} determines whether {@link
 * pspell_save_wordlist} will save the replacement pairs along with the
 * wordlist. Usually there is no need to use this function because if
 * {@link pspell_config_repl} is used, the replacement pairs will be
 * saved by {@link pspell_save_wordlist} anyway, and if it is not, the
 * replacement pairs will not be saved.
 * 
 * {@link pspell_config_save_repl} should be used on a config before
 * calling {@link pspell_new_config}.
 * 
 * @param int $dictionary_link
 * @param bool $flag if replacement pairs should be saved, otherwise.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_config_save_repl($dictionary_link, $flag){}

/**
 * {@link pspell_new} opens up a new dictionary and returns the
 * dictionary link identifier for use in other pspell functions.
 * 
 * For more information and examples, check out inline manual pspell
 * website:.
 * 
 * @param string $language The language parameter is the language code
 *   which consists of the two letter ISO 639 language code and an
 *   optional two letter ISO 3166 country code after a dash or
 *   underscore.
 * @param string $spelling The spelling parameter is the requested
 *   spelling for languages with more than one spelling such as English.
 *   Known values are 'american', 'british', and 'canadian'.
 * @param string $jargon The jargon parameter contains extra
 *   information to distinguish two different words lists that have the
 *   same language and spelling parameters.
 * @param string $encoding The encoding parameter is the encoding that
 *   words are expected to be in. Valid values are 'utf-8', 'iso8859-*',
 *   'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16', 'machine
 *   unsigned 32'. This parameter is largely untested, so be careful when
 *   using.
 * @param int $mode The mode parameter is the mode in which
 *   spellchecker will work. There are several modes available:
 *   PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL
 *   - Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a
 *   lot of suggestions) PSPELL_RUN_TOGETHER - Consider run-together
 *   words as legal compounds. That is, "thecat" will be a legal
 *   compound, although there should be a space between the two words.
 *   Changing this setting only affects the results returned by {@link
 *   pspell_check}; {@link pspell_suggest} will still return suggestions.
 *   Mode is a bitmask constructed from different constants listed above.
 *   However, PSPELL_FAST, PSPELL_NORMAL and PSPELL_BAD_SPELLERS are
 *   mutually exclusive, so you should select only one of them.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_new($language, $spelling, $jargon, $encoding, $mode){}

/**
 * @param int $config The {@link config} parameter is the one returned
 *   by {@link pspell_config_create} when the config was created.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_new_config($config){}

/**
 * For more information and examples, check out inline manual pspell
 * website:.
 * 
 * @param string $personal The file where words added to the personal
 *   list will be stored. It should be an absolute filename beginning
 *   with '/' because otherwise it will be relative to $HOME, which is
 *   "/root" for most systems, and is probably not what you want.
 * @param string $language The language code which consists of the two
 *   letter ISO 639 language code and an optional two letter ISO 3166
 *   country code after a dash or underscore.
 * @param string $spelling The requested spelling for languages with
 *   more than one spelling such as English. Known values are 'american',
 *   'british', and 'canadian'.
 * @param string $jargon Extra information to distinguish two different
 *   words lists that have the same language and spelling parameters.
 * @param string $encoding The encoding that words are expected to be
 *   in. Valid values are utf-8, iso8859-*, koi8-r, viscii, cp1252,
 *   machine unsigned 16, machine unsigned 32.
 * @param int $mode The mode in which spellchecker will work. There are
 *   several modes available: PSPELL_FAST - Fast mode (least number of
 *   suggestions) PSPELL_NORMAL - Normal mode (more suggestions)
 *   PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)
 *   PSPELL_RUN_TOGETHER - Consider run-together words as legal
 *   compounds. That is, "thecat" will be a legal compound, although
 *   there should be a space between the two words. Changing this setting
 *   only affects the results returned by {@link pspell_check}; {@link
 *   pspell_suggest} will still return suggestions. Mode is a bitmask
 *   constructed from different constants listed above. However,
 *   PSPELL_FAST, PSPELL_NORMAL and PSPELL_BAD_SPELLERS are mutually
 *   exclusive, so you should select only one of them.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_new_personal($personal, $language, $spelling, $jargon, $encoding, $mode){}

/**
 * @param int $dictionary_link A dictionary link identifier opened with
 *   {@link pspell_new_personal}.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_save_wordlist($dictionary_link){}

/**
 * @param int $dictionary_link A dictionary link identifier, opened
 *   with {@link pspell_new_personal}
 * @param string $misspelled The misspelled word.
 * @param string $correct The fixed spelling for the {@link misspelled}
 *   word.
 * @return bool
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_store_replacement($dictionary_link, $misspelled, $correct){}

/**
 * @param int $dictionary_link
 * @param string $word The tested word.
 * @return array
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function pspell_suggest($dictionary_link, $word){}

/**
 * Adds a bookmark for the current page. Bookmarks usually appear in
 * PDF-Viewers left of the page in a hierarchical tree. Clicking on a
 * bookmark will jump to the given page.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text used for displaying the bookmark.
 * @param int $parent A bookmark previously created by this function
 *   which is used as the parent of the new bookmark.
 * @param int $open If {@link open} is unequal to zero the bookmark
 *   will be shown open by the pdf viewer.
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_add_bookmark($psdoc, $text, $parent, $open){}

/**
 * Places a hyperlink at the given position pointing to a file program
 * which is being started when clicked on. The hyperlink's source
 * position is a rectangle with its lower left corner at (llx, lly) and
 * its upper right corner at (urx, ury). The rectangle has by default a
 * thin blue border.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $llx The x-coordinate of the lower left corner.
 * @param float $lly The y-coordinate of the lower left corner.
 * @param float $urx The x-coordinate of the upper right corner.
 * @param float $ury The y-coordinate of the upper right corner.
 * @param string $filename The path of the program to be started, when
 *   the link is clicked on.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_add_launchlink($psdoc, $llx, $lly, $urx, $ury, $filename){}

/**
 * Places a hyperlink at the given position pointing to a page in the
 * same document. Clicking on the link will jump to the given page. The
 * first page in a document has number 1.
 * 
 * The hyperlink's source position is a rectangle with its lower left
 * corner at ({@link llx}, {@link lly}) and its upper right corner at
 * ({@link urx}, {@link ury}). The rectangle has by default a thin blue
 * border.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $llx The x-coordinate of the lower left corner.
 * @param float $lly The y-coordinate of the lower left corner.
 * @param float $urx The x-coordinate of the upper right corner.
 * @param float $ury The y-coordinate of the upper right corner.
 * @param int $page The number of the page displayed when clicking on
 *   the link.
 * @param string $dest The parameter {@link dest} determines how the
 *   document is being viewed. It can be fitpage, fitwidth, fitheight, or
 *   fitbbox.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_add_locallink($psdoc, $llx, $lly, $urx, $ury, $page, $dest){}

/**
 * Adds a note at a certain position on the page. Notes are like little
 * rectangular sheets with text on it, which can be placed anywhere on a
 * page. They are shown either folded or unfolded. If unfolded, the
 * specified icon is used as a placeholder.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $llx The x-coordinate of the lower left corner.
 * @param float $lly The y-coordinate of the lower left corner.
 * @param float $urx The x-coordinate of the upper right corner.
 * @param float $ury The y-coordinate of the upper right corner.
 * @param string $contents The text of the note.
 * @param string $title The title of the note as displayed in the
 *   header of the note.
 * @param string $icon The icon shown if the note is folded. This
 *   parameter can be set to comment, insert, note, paragraph,
 *   newparagraph, key, or help.
 * @param int $open If {@link open} is unequal to zero the note will be
 *   shown unfolded after opening the document with a pdf viewer.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_add_note($psdoc, $llx, $lly, $urx, $ury, $contents, $title, $icon, $open){}

/**
 * Places a hyperlink at the given position pointing to a second pdf
 * document. Clicking on the link will branch to the document at the
 * given page. The first page in a document has number 1.
 * 
 * The hyperlink's source position is a rectangle with its lower left
 * corner at ({@link llx}, {@link lly}) and its upper right corner at
 * ({@link urx}, {@link ury}). The rectangle has by default a thin blue
 * border.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $llx The x-coordinate of the lower left corner.
 * @param float $lly The y-coordinate of the lower left corner.
 * @param float $urx The x-coordinate of the upper right corner.
 * @param float $ury The y-coordinate of the upper right corner.
 * @param string $filename The name of the pdf document to be opened
 *   when clicking on this link.
 * @param int $page The page number of the destination pdf document
 * @param string $dest The parameter {@link dest} determines how the
 *   document is being viewed. It can be fitpage, fitwidth, fitheight, or
 *   fitbbox.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_add_pdflink($psdoc, $llx, $lly, $urx, $ury, $filename, $page, $dest){}

/**
 * Places a hyperlink at the given position pointing to a web page. The
 * hyperlink's source position is a rectangle with its lower left corner
 * at ({@link llx}, {@link lly}) and its upper right corner at ({@link
 * urx}, {@link ury}). The rectangle has by default a thin blue border.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $llx The x-coordinate of the lower left corner.
 * @param float $lly The y-coordinate of the lower left corner.
 * @param float $urx The x-coordinate of the upper right corner.
 * @param float $ury The y-coordinate of the upper right corner.
 * @param string $url The url of the hyperlink to be opened when
 *   clicking on this link, e.g. http://www.php.net.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_add_weblink($psdoc, $llx, $lly, $urx, $ury, $url){}

/**
 * Draws a portion of a circle with at middle point at ({@link x}, {@link
 * y}). The arc starts at an angle of {@link alpha} and ends at an angle
 * of {@link beta}. It is drawn counterclockwise (use {@link ps_arcn} to
 * draw clockwise). The subpath added to the current path starts on the
 * arc at angle {@link alpha} and ends on the arc at angle {@link beta}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x The x-coordinate of the circle's middle point.
 * @param float $y The y-coordinate of the circle's middle point.
 * @param float $radius The radius of the circle
 * @param float $alpha The start angle given in degrees.
 * @param float $beta The end angle given in degrees.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_arc($psdoc, $x, $y, $radius, $alpha, $beta){}

/**
 * Draws a portion of a circle with at middle point at ({@link x}, {@link
 * y}). The arc starts at an angle of {@link alpha} and ends at an angle
 * of {@link beta}. It is drawn clockwise (use {@link ps_arc} to draw
 * counterclockwise). The subpath added to the current path starts on the
 * arc at angle {@link beta} and ends on the arc at angle {@link alpha}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x The x-coordinate of the circle's middle point.
 * @param float $y The y-coordinate of the circle's middle point.
 * @param float $radius The radius of the circle
 * @param float $alpha The starting angle given in degrees.
 * @param float $beta The end angle given in degrees.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_arcn($psdoc, $x, $y, $radius, $alpha, $beta){}

/**
 * Starts a new page. Although the parameters {@link width} and {@link
 * height} imply a different page size for each page, this is not
 * possible in PostScript. The first call of {@link ps_begin_page} will
 * set the page size for the whole document. Consecutive calls will have
 * no effect, except for creating a new page. The situation is different
 * if you intent to convert the PostScript document into PDF. This
 * function places pdfmarks into the document which can set the size for
 * each page indiviually. The resulting PDF document will have different
 * page sizes.
 * 
 * Though PostScript does not know different page sizes, pslib places a
 * bounding box for each page into the document. This size is evaluated
 * by some PostScript viewers and will have precedence over the
 * BoundingBox in the Header of the document. This can lead to unexpected
 * results when you set a BoundingBox whose lower left corner is not (0,
 * 0), because the bounding box of the page will always have a lower left
 * corner (0, 0) and overwrites the global setting.
 * 
 * Each page is encapsulated into save/restore. This means, that most of
 * the settings made on one page will not be retained on the next page.
 * 
 * If there is up to the first call of {@link ps_begin_page} no call of
 * {@link ps_findfont}, then the header of the PostScript document will
 * be output and the bounding box will be set to the size of the first
 * page. The lower left corner of the bounding box is set to (0, 0). If
 * {@link ps_findfont} was called before, then the header has been output
 * already, and the document will not have a valid bounding box. In order
 * to prevent this, one should call {@link ps_set_info} to set the info
 * field BoundingBox and possibly Orientation before any {@link
 * ps_findfont} or {@link ps_begin_page} calls.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $width The width of the page in pixel, e.g. 596 for A4
 *   format.
 * @param float $height The height of the page in pixel, e.g. 842 for
 *   A4 format.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_begin_page($psdoc, $width, $height){}

/**
 * Starts a new pattern. A pattern is like a page containing e.g. a
 * drawing which can be used for filling areas. It is used like a color
 * by calling {@link ps_setcolor} and setting the color space to pattern.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $width The width of the pattern in pixel.
 * @param float $height The height of the pattern in pixel.
 * @param float $xstep The distance in pixel of placements of the
 *   pattern in horizontal direction.
 * @param float $ystep The distance in pixel of placements of the
 *   pattern in vertical direction.
 * @param int $painttype Must be 1 or 2.
 * @return int
 * @since PECL ps >= 1.2.0
 **/
function ps_begin_pattern($psdoc, $width, $height, $xstep, $ystep, $painttype){}

/**
 * Starts a new template. A template is called a form in the postscript
 * language. It is created similar to a pattern but used like an image.
 * Templates are often used for drawings which are placed several times
 * through out the document, e.g. like a company logo. All drawing
 * functions may be used within a template. The template will not be
 * drawn until it is placed by {@link ps_place_image}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $width The width of the template in pixel.
 * @param float $height The height of the template in pixel.
 * @return int
 * @since PECL ps >= 1.2.0
 **/
function ps_begin_template($psdoc, $width, $height){}

/**
 * Draws a circle with its middle point at ({@link x}, {@link y}). The
 * circle starts and ends at position ({@link x}+{@link radius}, {@link
 * y}). If this function is called outside a path it will start a new
 * path. If it is called within a path it will add the circle as a
 * subpath. If the last drawing operation does not end in point ({@link
 * x}+{@link radius}, {@link y}) then there will be a gap in the path.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x The x-coordinate of the circle's middle point.
 * @param float $y The y-coordinate of the circle's middle point.
 * @param float $radius The radius of the circle
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_circle($psdoc, $x, $y, $radius){}

/**
 * Takes the current path and uses it to define the border of a clipping
 * area. Everything drawn outside of that area will not be visible.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_clip($psdoc){}

/**
 * Closes the PostScript document.
 * 
 * This function writes the trailer of the PostScript document. It also
 * writes the bookmark tree. {@link ps_close} does not free any
 * resources, which is done by {@link ps_delete}.
 * 
 * This function is also called by {@link ps_delete} if it has not been
 * called before.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_close($psdoc){}

/**
 * Connects the last point with the first point of a path. The resulting
 * path can be used for stroking, filling, clipping, etc..
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_closepath($psdoc){}

/**
 * Connects the last point with first point of a path and draws the
 * resulting closed line.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_closepath_stroke($psdoc){}

/**
 * Closes an image and frees its resources. Once an image is closed it
 * cannot be used anymore.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $imageid Resource identifier of the image as returned by
 *   {@link ps_open_image} or {@link ps_open_image_file}.
 * @return void
 * @since PECL ps >= 1.1.0
 **/
function ps_close_image($psdoc, $imageid){}

/**
 * Output a text one line below the last line. The line spacing is taken
 * from the value "leading" which must be set with {@link ps_set_value}.
 * The actual position of the text is determined by the values "textx"
 * and "texty" which can be requested with {@link ps_get_value}
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text to output.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_continue_text($psdoc, $text){}

/**
 * Add a section of a cubic Bézier curve described by the three given
 * control points to the current path.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x1 x-coordinate of first control point.
 * @param float $y1 y-coordinate of first control point.
 * @param float $x2 x-coordinate of second control point.
 * @param float $y2 y-coordinate of second control point.
 * @param float $x3 x-coordinate of third control point.
 * @param float $y3 y-coordinate of third control point.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_curveto($psdoc, $x1, $y1, $x2, $y2, $x3, $y3){}

/**
 * Mainly frees memory used by the document. Also closes a file, if it
 * was not closed before with {@link ps_close}. You should in any case
 * close the file with {@link ps_close} before, because {@link ps_close}
 * not just closes the file but also outputs a trailor containing
 * PostScript comments like the number of pages in the document and
 * adding the bookmark hierarchy.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_delete($psdoc){}

/**
 * Ends a page which was started with {@link ps_begin_page}. Ending a
 * page will leave the current drawing context, which e.g. requires to
 * reload fonts if they were loading within the page, and to set many
 * other drawing parameters like the line width, or color..
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_end_page($psdoc){}

/**
 * Ends a pattern which was started with {@link ps_begin_pattern}. Once a
 * pattern has been ended, it can be used like a color to fill areas.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.2.0
 **/
function ps_end_pattern($psdoc){}

/**
 * Ends a template which was started with {@link ps_begin_template}. Once
 * a template has been ended, it can be used like an image.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.2.0
 **/
function ps_end_template($psdoc){}

/**
 * Fills the path constructed with previously called drawing functions
 * like {@link ps_lineto}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_fill($psdoc){}

/**
 * Fills and draws the path constructed with previously called drawing
 * functions like {@link ps_lineto}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_fill_stroke($psdoc){}

/**
 * Loads a font for later use. Before text is output with a loaded font
 * it must be set with {@link ps_setfont}. This function needs the adobe
 * font metric file in order to calculate the space used up by the
 * characters. A font which is loaded within a page will only be
 * available on that page. Fonts which are to be used in the complete
 * document have to be loaded before the first call of {@link
 * ps_begin_page}. Calling {@link ps_findfont} between pages will make
 * that font available for all following pages.
 * 
 * The name of the afm file must be {@link fontname}.afm. If the font
 * shall be embedded the file {@link fontname}.pfb containing the font
 * outline must be present as well.
 * 
 * Calling {@link ps_findfont} before the first page requires to output
 * the postscript header which includes the BoundingBox for the whole
 * document. Usually the BoundingBox is set with the first call of {@link
 * ps_begin_page} which now comes after {@link ps_findfont}. Consequently
 * the BoundingBox has not been set and a warning will be issued when
 * {@link ps_findfont} is called. In order to prevent this situation, one
 * should call {@link ps_set_parameter} to set the BoundingBox before
 * {@link ps_findfont} is called.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $fontname The name of the font.
 * @param string $encoding {@link ps_findfont} will try to load the
 *   file passed in the parameter {@link encoding}. Encoding files are of
 *   the same syntax as those used by dvips(1). They contain a font
 *   encoding vector (which is currently not used but must be present)
 *   and a list of extra ligatures to extend the list of ligatures
 *   derived from the afm file. {@link encoding} can be or the empty
 *   string if the default encoding (TeXBase1) shall be used. If the
 *   encoding is set to builtin then there will be no reencoding and the
 *   font specific encoding will be used. This is very useful with symbol
 *   fonts.
 * @param bool $embed If set to a value >0 the font will be embedded
 *   into the document. This requires the font outline (.pfb file) to be
 *   present.
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_findfont($psdoc, $fontname, $encoding, $embed){}

/**
 * This function is not implemented yet. It will always return an empty
 * string. The idea for a later implementation is to write the contents
 * of the postscript file into an internal buffer if in memory creation
 * is requested, and retrieve the buffer content with this function.
 * Currently, documents created in memory are send to the browser without
 * buffering.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return string
 * @since PECL ps >= 1.1.0
 **/
function ps_get_buffer($psdoc){}

/**
 * Gets several parameters which were directly set by {@link
 * ps_set_parameter} or indirectly by one of the other functions.
 * Parameters are by definition string values. This function cannot be
 * used to retrieve resources which were also set by {@link
 * ps_set_parameter}.
 * 
 * The parameter {@link name} can have the following values.
 * 
 * fontname The name of the currently active font or the font whose
 * identifier is passed in parameter {@link modifier}. fontencoding The
 * encoding of the currently active font. dottedversion The version of
 * the underlying pslib library in the format <major>.<minor>.<subminor>
 * scope The current drawing scope. Can be object, document, null, page,
 * pattern, path, template, prolog, font, glyph. ligaturedisolvechar The
 * character which dissolves a ligature. If your are using a font which
 * contains the ligature `ff' and `|' is the char to dissolve the
 * ligature, then `f|f' will result in two `f' instead of the ligature
 * `ff'. imageencoding The encoding used for encoding images. Can be
 * either hex or 85. hex encoding uses two bytes in the postscript file
 * each byte in the image. 85 stand for Ascii85 encoding. linenumbermode
 * Set to paragraph if lines are numbered within a paragraph or box if
 * they are numbered within the surrounding box. linebreak Only used if
 * text is output with {@link ps_show_boxed}. If set to true a carriage
 * return will add a line break. parbreak Only used if text is output
 * with {@link ps_show_boxed}. If set to true a carriage return will
 * start a new paragraph. hyphenation Only used if text is output with
 * {@link ps_show_boxed}. If set to true the paragraph will be hyphenated
 * if a hypen dictionary is set and exists. hyphendict Filename of the
 * dictionary used for hyphenation pattern.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $name Name of the parameter.
 * @param float $modifier An identifier needed if a parameter of a
 *   resource is requested, e.g. the size of an image. In such a case the
 *   resource id is passed.
 * @return string
 * @since PECL ps >= 1.1.0
 **/
function ps_get_parameter($psdoc, $name, $modifier){}

/**
 * Gets several values which were set by {@link ps_set_value}. Values are
 * by definition float values.
 * 
 * The parameter {@link name} can have the following values.
 * 
 * fontsize The size of the currently active font or the font whose
 * identifier is passed in parameter {@link modifier}. font The currently
 * active font itself. imagewidth The width of the image whose id is
 * passed in the parameter {@link modifier}. imageheight The height of
 * the image whose id is passed in the parameter {@link modifier}.
 * capheight The height of a capital M in the currently active font or
 * the font whose identifier is passed in parameter {@link modifier}.
 * ascender The ascender of the currently active font or the font whose
 * identifier is passed in parameter {@link modifier}. descender The
 * descender of the currently active font or the font whose identifier is
 * passed in parameter {@link modifier}. italicangle The italicangle of
 * the currently active font or the font whose identifier is passed in
 * parameter {@link modifier}. underlineposition The underlineposition of
 * the currently active font or the font whose identifier is passed in
 * parameter {@link modifier}. underlinethickness The underlinethickness
 * of the currently active font or the font whose identifier is passed in
 * parameter {@link modifier}. textx The current x-position for text
 * output. texty The current y-position for text output. textrendering
 * The current mode for text rendering. textrise The space by which text
 * is risen above the base line. leading The distance between text lines
 * in points. wordspacing The space between words as a multiple of the
 * width of a space char. charspacing The space between chars. If
 * charspacing is != 0.0 ligatures will always be dissolved.
 * hyphenminchars Minimum number of chars hyphenated at the end of a
 * word. parindent Indention of the first n line in a paragraph.
 * numindentlines Number of line in a paragraph to indent if parindent !=
 * 0.0. parskip Distance between paragraphs. linenumberspace Overall
 * space in front of each line for the line number. linenumbersep Space
 * between the line and the line number. major The major version number
 * of pslib. minor The minor version number of pslib. subminor, revision
 * The subminor version number of pslib.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $name Name of the value.
 * @param float $modifier The parameter {@link modifier} specifies the
 *   resource for which the value is to be retrieved. This can be the id
 *   of a font or an image.
 * @return float
 * @since PECL ps >= 1.1.0
 **/
function ps_get_value($psdoc, $name, $modifier){}

/**
 * Hyphenates the passed word. {@link ps_hyphenate} evaluates the value
 * hyphenminchars (set by {@link ps_set_value}) and the parameter
 * hyphendict (set by {@link ps_set_parameter}). hyphendict must be set
 * before calling this function.
 * 
 * This function requires the locale category LC_CTYPE to be set
 * properly. This is done when the extension is initialized by using the
 * environment variables. On Unix systems read the man page of locale for
 * more information.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text {@link text} should not contain any non alpha
 *   characters. Possible positions for breaks are returned in an array
 *   of interger numbers. Each number is the position of the char in
 *   {@link text} after which a hyphenation can take place.
 * @return array
 * @since PECL ps >= 1.1.1
 **/
function ps_hyphenate($psdoc, $text){}

/**
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $file
 * @return bool
 * @since PECL ps >= 1.3.4
 **/
function ps_include_file($psdoc, $file){}

/**
 * Adds a straight line from the current point to the given coordinates
 * to the current path. Use {@link ps_moveto} to set the starting point
 * of the line.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x x-coordinate of the end point of the line.
 * @param float $y y-coordinate of the end point of the line.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_lineto($psdoc, $x, $y){}

/**
 * Creates a spot color from the current fill color. The fill color must
 * be defined in rgb, cmyk or gray colorspace. The spot color name can be
 * an arbitrary name. A spot color can be set as any color with {@link
 * ps_setcolor}. When the document is not printed but displayed by an
 * postscript viewer the given color in the specified color space is use.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $name Name of the spot color, e.g. Pantone 5565.
 * @param int $reserved
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_makespotcolor($psdoc, $name, $reserved){}

/**
 * Sets the current point to new coordinates. If this is the first call
 * of {@link ps_moveto} after a previous path has been ended then it will
 * start a new path. If this function is called in the middle of a path
 * it will just set the current point and start a subpath.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x x-coordinate of the point to move to.
 * @param float $y y-coordinate of the point to move to.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_moveto($psdoc, $x, $y){}

/**
 * Creates a new document instance. It does not create the file on disk
 * or in memory, it just sets up everything. {@link ps_new} is usually
 * followed by a call of {@link ps_open_file} to actually create the
 * postscript document.
 * 
 * @return resource
 * @since PECL ps >= 1.1.0
 **/
function ps_new(){}

/**
 * Creates a new file on disk and writes the PostScript document into it.
 * The file will be closed when {@link ps_close} is called.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $filename The name of the postscript file. If {@link
 *   filename} is not passed the document will be created in memory and
 *   all output will go straight to the browser.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_open_file($psdoc, $filename){}

/**
 * Reads an image which is already available in memory. The parameter
 * {@link source} is currently not evaluated and assumed to be memory.
 * The image data is a sequence of pixels starting in th upper left
 * corner and ending in the lower right corner. Each pixel consists of
 * {@link components} color components, and each component has {@link
 * bpc} bits.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $type The type of the image. Possible values are png,
 *   jpeg, or eps.
 * @param string $source Not used.
 * @param string $data The image data.
 * @param int $lenght The length of the image data.
 * @param int $width The width of the image.
 * @param int $height The height of the image.
 * @param int $components The number of components for each pixel. This
 *   can be 1 (gray scale images), 3 (rgb images), or 4 (cmyk, rgba
 *   images).
 * @param int $bpc Number of bits per component (quite often 8).
 * @param string $params
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_open_image($psdoc, $type, $source, $data, $lenght, $width, $height, $components, $bpc, $params){}

/**
 * Loads an image for later use.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $type The type of the image. Possible values are png,
 *   jpeg, or eps.
 * @param string $filename The name of the file containing the image
 *   data.
 * @param string $stringparam Not used.
 * @param int $intparam Not used.
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_open_image_file($psdoc, $type, $filename, $stringparam, $intparam){}

/**
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $gd
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_open_memory_image($psdoc, $gd){}

/**
 * Places a formerly loaded image on the page. The image can be scaled.
 * If the image shall be rotated as well, you will have to rotate the
 * coordinate system before with {@link ps_rotate}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $imageid The resource identifier of the image as returned
 *   by {@link ps_open_image} or {@link ps_open_image_file}.
 * @param float $x x-coordinate of the lower left corner of the image.
 * @param float $y y-coordinate of the lower left corner of the image.
 * @param float $scale The scaling factor for the image. A scale of 1.0
 *   will result in a resolution of 72 dpi, because each pixel is
 *   equivalent to 1 point.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_place_image($psdoc, $imageid, $x, $y, $scale){}

/**
 * Draws a rectangle with its lower left corner at ({@link x}, {@link
 * y}). The rectangle starts and ends in its lower left corner. If this
 * function is called outside a path it will start a new path. If it is
 * called within a path it will add the rectangle as a subpath. If the
 * last drawing operation does not end in the lower left corner then
 * there will be a gap in the path.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x x-coordinate of the lower left corner of the
 *   rectangle.
 * @param float $y y-coordinate of the lower left corner of the
 *   rectangle.
 * @param float $width The width of the image.
 * @param float $height The height of the image.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_rect($psdoc, $x, $y, $width, $height){}

/**
 * Restores a previously saved graphics context. Any call of {@link
 * ps_save} must be accompanied by a call to {@link ps_restore}. All
 * coordinate transformations, line style settings, color settings, etc.
 * are being restored to the state before the call of {@link ps_save}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_restore($psdoc){}

/**
 * Sets the rotation of the coordinate system.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $rot Angle of rotation in degree.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_rotate($psdoc, $rot){}

/**
 * Saves the current graphics context, containing colors, translation and
 * rotation settings and some more. A saved context can be restored with
 * {@link ps_restore}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_save($psdoc){}

/**
 * Sets horizontal and vertical scaling of the coordinate system.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x Scaling factor in horizontal direction.
 * @param float $y Scaling factor in vertical direction.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_scale($psdoc, $x, $y){}

/**
 * Sets the color for drawing, filling, or both.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $type The parameter {@link type} can be both, fill, or
 *   fillstroke.
 * @param string $colorspace The colorspace should be one of gray, rgb,
 *   cmyk, spot, pattern. Depending on the colorspace either only the
 *   first, the first three or all parameters will be used.
 * @param float $c1 Depending on the colorspace this is either the red
 *   component (rgb), the cyan component (cmyk), the gray value (gray),
 *   the identifier of the spot color or the identifier of the pattern.
 * @param float $c2 Depending on the colorspace this is either the
 *   green component (rgb), the magenta component (cmyk).
 * @param float $c3 Depending on the colorspace this is either the blue
 *   component (rgb), the yellow component (cmyk).
 * @param float $c4 This must only be set in cmyk colorspace and
 *   specifies the black component.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setcolor($psdoc, $type, $colorspace, $c1, $c2, $c3, $c4){}

/**
 * Sets the length of the black and white portions of a dashed line.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $on The length of the dash.
 * @param float $off The length of the gap between dashes.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setdash($psdoc, $on, $off){}

/**
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $value The {@link value} must be between 0.2 and 1.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setflat($psdoc, $value){}

/**
 * Sets a font, which has to be loaded before with {@link ps_findfont}.
 * Outputting text without setting a font results in an error.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $fontid The font identifier as returned by {@link
 *   ps_findfont}.
 * @param float $size The size of the font.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setfont($psdoc, $fontid, $size){}

/**
 * Sets the gray value for all following drawing operations.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $gray The value must be between 0 (white) and 1
 *   (black).
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setgray($psdoc, $gray){}

/**
 * Sets how line ends look like.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $type The type of line ends. Possible values are
 *   PS_LINECAP_BUTT, PS_LINECAP_ROUND, or PS_LINECAP_SQUARED.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setlinecap($psdoc, $type){}

/**
 * Sets how lines are joined.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $type The way lines are joined. Possible values are
 *   PS_LINEJOIN_MITER, PS_LINEJOIN_ROUND, or PS_LINEJOIN_BEVEL.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setlinejoin($psdoc, $type){}

/**
 * Sets the line width for all following drawing operations.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $width The width of lines in points.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setlinewidth($psdoc, $width){}

/**
 * If two lines join in a small angle and the line join is set to
 * PS_LINEJOIN_MITER, then the resulting spike will be very long. The
 * miter limit is the maximum ratio of the miter length (the length of
 * the spike) and the line width.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $value The maximum ratio between the miter length and
 *   the line width. Larger values (> 10) will result in very long spikes
 *   when two lines meet in a small angle. Keep the default unless you
 *   know what you are doing.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setmiterlimit($psdoc, $value){}

/**
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $mode
 * @return bool
 * @since PECL ps >= 1.3.0
 **/
function ps_setoverprintmode($psdoc, $mode){}

/**
 * Sets the length of the black and white portions of a dashed line.
 * {@link ps_setpolydash} is used to set more complicated dash patterns.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $arr {@link arr} is a list of length elements
 *   alternately for the black and white portion.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_setpolydash($psdoc, $arr){}

/**
 * Links added with one of the functions {@link ps_add_weblink}, {@link
 * ps_add_pdflink}, etc. will be displayed with a surounded rectangle
 * when the postscript document is converted to pdf and viewed in a pdf
 * viewer. This rectangle is not visible in the postscript document. This
 * function sets the color of the rectangle's border line.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $red The red component of the border color.
 * @param float $green The green component of the border color.
 * @param float $blue The blue component of the border color.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_border_color($psdoc, $red, $green, $blue){}

/**
 * Links added with one of the functions {@link ps_add_weblink}, {@link
 * ps_add_pdflink}, etc. will be displayed with a surounded rectangle
 * when the postscript document is converted to pdf and viewed in a pdf
 * viewer. This rectangle is not visible in the postscript document. This
 * function sets the length of the black and white portion of a dashed
 * border line.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $black The length of the dash.
 * @param float $white The length of the gap between dashes.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_border_dash($psdoc, $black, $white){}

/**
 * Links added with one of the functions {@link ps_add_weblink}, {@link
 * ps_add_pdflink}, etc. will be displayed with a surounded rectangle
 * when the postscript document is converted to pdf and viewed in a pdf
 * viewer. This rectangle is not visible in the postscript document. This
 * function sets the appearance and width of the border line.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $style {@link style} can be solid or dashed.
 * @param float $width The line width of the border.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_border_style($psdoc, $style, $width){}

/**
 * Sets certain information fields of the document. This fields will be
 * shown as a comment in the header of the PostScript file. If the
 * document is converted to pdf this fields will also be used for the
 * document information.
 * 
 * The BoundingBox is usually set to the value given to the first page.
 * This only works if {@link ps_findfont} has not been called before. In
 * such cases the BoundingBox would be left unset unless you set it
 * explicitly with this function.
 * 
 * This function will have no effect anymore when the header of the
 * postscript file has been already written. It must be called before the
 * first page or the first call of {@link ps_findfont}.
 * 
 * @param resource $p Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $key The name of the information field to set. The
 *   values which can be set are Keywords, Subject, Title, Creator,
 *   Author, BoundingBox, and Orientation. Be aware that some of them has
 *   a meaning to PostScript viewers.
 * @param string $val The value of the information field. The field
 *   Orientation can be set to either Portrait or Landscape. The
 *   BoundingBox is a string consisting of four numbers. The first two
 *   numbers are the coordinates of the lower left corner of the page.
 *   The last two numbers are the coordinates of the upper right corner.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_info($p, $key, $val){}

/**
 * Sets several parameters which are used by many functions. Parameters
 * are by definition string values.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $name For a list of possible names see {@link
 *   ps_get_parameter}.
 * @param string $value The value of the parameter.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_parameter($psdoc, $name, $value){}

/**
 * Set the position for the next text output. You may alternatively set
 * the x and y value separately by calling {@link ps_set_value} and
 * choosing textx respectively texty as the value name.
 * 
 * If you want to output text at a certain position it is more convenient
 * to use {@link ps_show_xy} instead of setting the text position and
 * calling {@link ps_show}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x x-coordinate of the new text position.
 * @param float $y y-coordinate of the new text position.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_text_pos($psdoc, $x, $y){}

/**
 * Sets several values which are used by many functions. Parameters are
 * by definition float values.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $name The {@link name} can be one of the following:
 *   textrendering The way how text is shown. textx The x coordinate for
 *   text output. texty The y coordinate for text output. wordspacing The
 *   distance between words relative to the width of a space. leading The
 *   distance between lines in pixels.
 * @param float $value The way how text is shown.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_set_value($psdoc, $name, $value){}

/**
 * Creates a shading, which can be used by {@link ps_shfill} or {@link
 * ps_shading_pattern}.
 * 
 * The color of the shading can be in any color space except for pattern.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $type The type of shading can be either radial or
 *   axial. Each shading starts with the current fill color and ends with
 *   the given color values passed in the parameters {@link c1} to {@link
 *   c4} (see {@link ps_setcolor} for their meaning).
 * @param float $x0 The coordinates {@link x0}, {@link y0}, {@link x1},
 *   {@link y1} are the start and end point of the shading. If the type
 *   of shading is radial the two points are the middle points of a
 *   starting and ending circle.
 * @param float $y0 See {@link ps_setcolor} for their meaning.
 * @param float $x1 If the shading is of type radial the {@link
 *   optlist} must also contain the parameters r0 and r1 with the radius
 *   of the start and end circle.
 * @param float $y1
 * @param float $c1
 * @param float $c2
 * @param float $c3
 * @param float $c4
 * @param string $optlist
 * @return int
 * @since PECL ps >= 1.3.0
 **/
function ps_shading($psdoc, $type, $x0, $y0, $x1, $y1, $c1, $c2, $c3, $c4, $optlist){}

/**
 * Creates a pattern based on a shading, which has to be created before
 * with {@link ps_shading}. Shading patterns can be used like regular
 * patterns.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $shadingid The identifier of a shading previously created
 *   with {@link ps_shading}.
 * @param string $optlist This argument is not currently used.
 * @return int
 * @since PECL ps >= 1.3.0
 **/
function ps_shading_pattern($psdoc, $shadingid, $optlist){}

/**
 * Fills an area with a shading, which has to be created before with
 * {@link ps_shading}. This is an alternative way to creating a pattern
 * from a shading {@link ps_shading_pattern} and using the pattern as the
 * filling color.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $shadingid The identifier of a shading previously created
 *   with {@link ps_shading}.
 * @return bool
 * @since PECL ps >= 1.3.0
 **/
function ps_shfill($psdoc, $shadingid){}

/**
 * Output a text at the current text position. The text position can be
 * set by storing the x and y coordinates into the values textx and texty
 * with the function {@link ps_set_value}. The function will issue an
 * error if a font was not set before with {@link ps_setfont}.
 * 
 * {@link ps_show} evaluates the following parameters and values as set
 * by {@link ps_set_parameter} and {@link ps_set_value}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text to be output.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_show($psdoc, $text){}

/**
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text
 * @param int $len
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_show2($psdoc, $text, $len){}

/**
 * Outputs a text in a given box. The lower left corner of the box is at
 * ({@link left}, {@link bottom}). Line breaks will be inserted where
 * needed. Multiple spaces are treated as one. Tabulators are treated as
 * spaces.
 * 
 * The text will be hyphenated if the parameter {@link hyphenation} is
 * set to true and the parameter {@link hyphendict} contains a valid
 * filename for a hyphenation file. The line spacing is taken from the
 * value leading. Paragraphs can be separated by an empty line just like
 * in TeX. If the value parindent is set to value > 0.0 then the first n
 * lines will be indented. The number n of lines is set by the parameter
 * numindentlines. In order to prevent indenting of the first m
 * paragraphs set the value parindentskip to a positive number.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text to be output into the given box.
 * @param float $left x-coordinate of the lower left corner of the box.
 * @param float $bottom y-coordinate of the lower left corner of the
 *   box.
 * @param float $width Width of the box.
 * @param float $height Height of the box.
 * @param string $hmode The parameter {@link hmode} can be "justify",
 *   "fulljustify", "right", "left", or "center". The difference of
 *   "justify" and "fulljustify" just affects the last line of the box.
 *   In fulljustify mode the last line will be left and right justified
 *   unless this is also the last line of paragraph. In justify mode it
 *   will always be left justified.
 * @param string $feature
 * @return int
 * @since PECL ps >= 1.1.0
 **/
function ps_show_boxed($psdoc, $text, $left, $bottom, $width, $height, $hmode, $feature){}

/**
 * Output a text at the given text position.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text to be output.
 * @param float $x x-coordinate of the lower left corner of the box
 *   surrounding the text.
 * @param float $y y-coordinate of the lower left corner of the box
 *   surrounding the text.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_show_xy($psdoc, $text, $x, $y){}

/**
 * @param resource $psdoc
 * @param string $text
 * @param int $len
 * @param float $xcoor
 * @param float $ycoor
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_show_xy2($psdoc, $text, $len, $xcoor, $ycoor){}

/**
 * Calculates the width of a string in points if it was output in the
 * given font and font size. This function needs an Adobe font metrics
 * file to calculate the precise width. If kerning is turned on, it will
 * be taken into account.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text for which the width is to be
 *   calculated.
 * @param int $fontid The identifier of the font to be used. If not
 *   font is specified the current font will be used.
 * @param float $size The size of the font. If no size is specified the
 *   current size is used.
 * @return float
 * @since PECL ps >= 1.1.0
 **/
function ps_stringwidth($psdoc, $text, $fontid, $size){}

/**
 * This function is similar to {@link ps_stringwidth} but returns an
 * array of dimensions containing the width, ascender, and descender of
 * the text.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param string $text The text for which the geometry is to be
 *   calculated.
 * @param int $fontid The identifier of the font to be used. If not
 *   font is specified the current font will be used.
 * @param float $size The size of the font. If no size is specified the
 *   current size is used.
 * @return array
 * @since PECL ps >= 1.2.0
 **/
function ps_string_geometry($psdoc, $text, $fontid, $size){}

/**
 * Draws the path constructed with previously called drawing functions
 * like {@link ps_lineto}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_stroke($psdoc){}

/**
 * Output the glyph at position {@link ord} in the font encoding vector
 * of the current font. The font encoding for a font can be set when
 * loading the font with {@link ps_findfont}.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $ord The position of the glyph in the font encoding
 *   vector.
 * @return bool
 * @since PECL ps >= 1.2.0
 **/
function ps_symbol($psdoc, $ord){}

/**
 * This function needs an Adobe font metrics file to know which glyphs
 * are available.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $ord The parameter {@link ord} is the position of the
 *   glyph in the font encoding vector.
 * @param int $fontid The identifier of the font to be used. If not
 *   font is specified the current font will be used.
 * @return string
 * @since PECL ps >= 1.2.0
 **/
function ps_symbol_name($psdoc, $ord, $fontid){}

/**
 * Calculates the width of a glyph in points if it was output in the
 * given font and font size. This function needs an Adobe font metrics
 * file to calculate the precise width.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param int $ord The position of the glyph in the font encoding
 *   vector.
 * @param int $fontid The identifier of the font to be used. If not
 *   font is specified the current font will be used.
 * @param float $size The size of the font. If no size is specified the
 *   current size is used.
 * @return float
 * @since PECL ps >= 1.2.0
 **/
function ps_symbol_width($psdoc, $ord, $fontid, $size){}

/**
 * Sets a new initial point of the coordinate system.
 * 
 * @param resource $psdoc Resource identifier of the postscript file as
 *   returned by {@link ps_new}.
 * @param float $x x-coordinate of the origin of the translated
 *   coordinate system.
 * @param float $y y-coordinate of the origin of the translated
 *   coordinate system.
 * @return bool
 * @since PECL ps >= 1.1.0
 **/
function ps_translate($psdoc, $x, $y){}

/**
 * Adds {@link setting} to the server environment. The environment
 * variable will only exist for the duration of the current request. At
 * the end of the request the environment is restored to its original
 * state.
 * 
 * Setting certain environment variables may be a potential security
 * breach. The safe_mode_allowed_env_vars directive contains a
 * comma-delimited list of prefixes. In Safe Mode, the user may only
 * alter environment variables whose names begin with the prefixes
 * supplied by this directive. By default, users will only be able to set
 * environment variables that begin with PHP_ (e.g. PHP_FOO=BAR). Note:
 * if this directive is empty, PHP will let the user modify ANY
 * environment variable!
 * 
 * The safe_mode_protected_env_vars directive contains a comma-delimited
 * list of environment variables, that the end user won't be able to
 * change using {@link putenv}. These variables will be protected even if
 * safe_mode_allowed_env_vars is set to allow to change them.
 * 
 * @param string $setting The setting, like "FOO=BAR"
 * @return bool
 * @since PHP 4, PHP 5
 **/
function putenv($setting){}

/**
 * Closes the paradox database. This function will not close the file.
 * You will have to call {@link fclose} afterwards.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @return bool
 * @since PECL paradox >= 1.0.0
 **/
function px_close($pxdoc){}

/**
 * Create a new paradox database file. The actual file has to be opened
 * before with {@link fopen}. Make sure the file is writable.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param resource $file File handle as returned by {@link fopen}.
 * @param array $fielddesc fielddesc is an array containing one element
 *   for each field specification. A field specification is an array
 *   itself with either two or three elements.The first element is always
 *   a string value used as the name of the field. It may not be larger
 *   than ten characters. The second element contains the field type
 *   which is one of the constants listed in the table Constants for
 *   field types. In the case of a character field or bcd field, you will
 *   have to provide a third element specifying the length respectively
 *   the precesion of the field. If your field specification contains
 *   blob fields, you will have to make sure to either make the field
 *   large enough for all field values to fit or specify a blob file with
 *   {@link px_set_blob_file} for storing the blobs. If this is not done
 *   the field data is truncated.
 * @return bool
 * @since PECL paradox >= 1.0.0
 **/
function px_create_fp($pxdoc, $file, $fielddesc){}

/**
 * Turns a date as it stored in the paradox file into human readable
 * format. Paradox dates are the number of days since 1.1.0000. This
 * function is just for convenience. It can be easily replaced by some
 * math and the calendar functions as demonstrated in the example below.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param int $value Value as stored in paradox database field of type
 *   PX_FIELD_DATE.
 * @param string $format String format similar to the format used by
 *   {@link date}. The placeholders support by this function is a subset
 *   of those supported by {@link date} (Y, y, m, n, d, j, L).
 * @return string
 * @since PECL paradox >= 1.4.0
 **/
function px_date2string($pxdoc, $value, $format){}

/**
 * Deletes the resource of the paradox file and frees all memory.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @return bool
 * @since PECL paradox >= 1.0.0
 **/
function px_delete($pxdoc){}

/**
 * This function deletes a record from the database. It does not free the
 * space in the database file but just marks it as deleted. Inserting a
 * new record afterwards will reuse the space.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param int $num The record number is an artificial number counting
 *   records in the order as they are stored in the database. The first
 *   record has number 0.
 * @return bool
 * @since PECL paradox >= 1.4.0
 **/
function px_delete_record($pxdoc, $num){}

/**
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param int $fieldno Number of the field. The first field has number
 *   0. Specifying a field number less than 0 and greater or equal the
 *   number of fields will trigger an error.
 * @return array
 * @since PECL paradox >= 1.0.0
 **/
function px_get_field($pxdoc, $fieldno){}

/**
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @return array
 * @since PECL paradox >= 1.0.0
 **/
function px_get_info($pxdoc){}

/**
 * Gets various parameters.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $name The {@link name} can be one of the following:
 * @return string
 * @since PECL paradox >= 1.1.0
 **/
function px_get_parameter($pxdoc, $name){}

/**
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param int $num The record number is an artificial number counting
 *   records in the order as they are stored in the database. The first
 *   record has number 0.
 * @param int $mode The optional {@link mode} can be PX_KEYTOLOWER or
 *   PX_KEYTOUPPER in order to convert the keys of the returned array
 *   into lower or upper case. If {@link mode} is not passed or is 0,
 *   then the key will be exactly like the field name. The element values
 *   will contain the field values. NULL values will be retained and are
 *   different from 0.0, 0 or the empty string. Fields of type
 *   PX_FIELD_TIME will be returned as an integer counting the number of
 *   milliseconds starting at midnight. A timestamp (PX_FIELD_TIMESTAMP)
 *   and date (PX_FIELD_DATE) are floating point respectively int values
 *   counting milliseconds respectively days starting at the beginning of
 *   julian calendar. Use the functions {@link px-timestamp2string} and
 *   {@link px-date2string} to convert them into a character
 *   representation.
 * @return array
 * @since PECL paradox >= 1.0.0
 **/
function px_get_record($pxdoc, $num, $mode){}

/**
 * {@link px_get_schema} returns the database schema.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param int $mode If the optional {@link mode} is PX_KEYTOLOWER or
 *   PX_KEYTOUPPER the keys of the returned array will be converted to
 *   lower or upper case. If {@link mode} is 0 or not passed at all, then
 *   the key name will be identical to the field name.
 * @return array
 * @since PECL paradox >= 1.0.0
 **/
function px_get_schema($pxdoc, $mode){}

/**
 * Gets various values.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $name {@link name} can be one of the following.
 *   numprimkeys The number of primary keys. Paradox databases always use
 *   the first numprimkeys fields for the primary index.
 * @return float
 * @since PECL paradox >= 1.1.0
 **/
function px_get_value($pxdoc, $name){}

/**
 * Inserts a new record into the database. The record is not necessarily
 * inserted at the end of the database, but may be inserted at any
 * position depending on where the first free slot is found.
 * 
 * The record data is passed as an array of field values. The elements in
 * the array must correspond to the fields in the database. If the array
 * has less elements than fields in the database, the remaining fields
 * will be set to null.
 * 
 * Most field values can be passed as its equivalent php type e.g. a long
 * value is used for fields of type PX_FIELD_LONG, PX_FIELD_SHORT and
 * PX_FIELD_AUTOINC, a double values is used for fields of type
 * PX_FIELD_CURRENCY and PX_FIELD_NUMBER. Field values for blob and alpha
 * fields are passed as strings.
 * 
 * Fields of type PX_FIELD_TIME and PX_FIELD_DATE both require a long
 * value. In the first case this is the number of milliseconds since
 * midnight. In the second case this is the number of days since
 * 1.1.0000. Below there are two examples to convert the current date or
 * timestamp into a value suitable for one of paradox's date/time fields.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param array $data Associated or indexed array containing the field
 *   values as e.g. returned by {@link px_retrieve_record}.
 * @return int
 * @since PECL paradox >= 1.4.0
 **/
function px_insert_record($pxdoc, $data){}

/**
 * Create a new paradox object. You will have to call this function
 * before any further functions. {@link px_new} does not create any file
 * on the disk, it just creates an instance of a paradox object. This
 * function must not be called if the object oriented interface is used.
 * Use new paradox_db() instead.
 * 
 * @return resource
 * @since PECL paradox >= 1.0.0
 **/
function px_new(){}

/**
 * Get the number of fields in a database file.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @return int
 * @since PECL paradox >= 1.0.0
 **/
function px_numfields($pxdoc){}

/**
 * Get the number of records in a database file.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @return int
 * @since PECL paradox >= 1.0.0
 **/
function px_numrecords($pxdoc){}

/**
 * Open an existing paradox database file. The actual file has to be
 * opened before with {@link fopen}. This function can also be used to
 * open primary index files and tread them like a paradox database. This
 * is supported for those who would like to investigate a primary index.
 * It cannot be used to accelerate access to a database file.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param resource $file {@link file} is the return value from {@link
 *   fopen} with the actual database file as parameter. Make sure the
 *   database is writable if you plan to update or insert records.
 * @return bool
 * @since PECL paradox >= 1.0.0
 **/
function px_open_fp($pxdoc, $file){}

/**
 * Stores a record into a paradox database. The record is always added at
 * the end of the database, regardless of any free slots. Use {@link
 * px_insert_record} to add a new record into the first free slot found
 * in the database.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param array $record Associated or indexed array containing the
 *   field values as e.g. returned by {@link px_retrieve_record}.
 * @param int $recpos This optional parameter may be used to specify a
 *   record number greater than the current number of records in the
 *   database. The function will add as many empty records as needed.
 *   There is hardly any need for this parameter.
 * @return bool
 * @since PECL paradox >= 1.0.0
 **/
function px_put_record($pxdoc, $record, $recpos){}

/**
 * This function is very similar to {@link px_get_record} but uses
 * internally a different approach to retrieve the data. It relies on
 * pxlib for reading each single field value, which usually results in
 * support for more field types.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param int $num The record number is an artificial number counting
 *   records in the order as they are stored in the database. The first
 *   record has number 0.
 * @param int $mode The optional {@link mode} can be PX_KEYTOLOWER or
 *   PX_KEYTOUPPER in order to convert the keys into lower or upper case.
 *   If {@link mode} is not passed or is 0, then the key will be exactly
 *   like the field name. The element values will contain the field
 *   values. NULL values will be retained and are different from 0.0, 0
 *   or the empty string. Fields of type PX_FIELD_TIME will be returned
 *   as an integer counting the number of milliseconds starting at
 *   midnight. A timestamp is a floating point value also counting
 *   milliseconds starting at the beginning of julian calendar.
 * @return array
 * @since PECL paradox >= 1.4.0
 **/
function px_retrieve_record($pxdoc, $num, $mode){}

/**
 * Sets the name of the file where blobs are going to be read from or
 * written into. Without calling this function, {@link px_get_record} or
 * {@link px_retrieve_record} will only return data in blob fields if the
 * data is part of the record and not stored in the blob file. Blob data
 * is stored in the record if it is small enough to fit in the size of
 * the blob field.
 * 
 * Calling {@link px_put_record}, {@link px_insert_record}, or {@link
 * px_update_record} without calling {@link px_set_blob_file} will result
 * in truncated blob fields unless the data fits into the database file.
 * 
 * Calling this function twice will close the first blob file and open
 * the new one.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $filename The name of the file. Its extension should
 *   be .MB.
 * @return bool
 * @since PECL paradox >= 1.3.0
 **/
function px_set_blob_file($pxdoc, $filename){}

/**
 * Sets various parameters.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $name Depending on the parameter you want to set,
 *   {@link name} can be one of the following.
 * @param string $value The name of the table as it will be stored in
 *   the database header.
 * @return bool
 * @since PECL paradox >= 1.1.0
 **/
function px_set_parameter($pxdoc, $name, $value){}

/**
 * Sets the table name of a paradox database, which was created with
 * {@link px_create_fp}. This function is deprecated use {@link
 * px_set_parameter} instead.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $name The name of the table. If it is not set
 *   explicitly it will be set to the name of the database file.
 * @return void
 * @since PECL paradox >= 1.0.0
 **/
function px_set_tablename($pxdoc, $name){}

/**
 * Set the encoding for data retrieved from a character field. All
 * character fields will be recoded to the encoding set by this function.
 * If the encoding is not set, the character data will be returned in the
 * DOS code page encoding as specified in the database file. The {@link
 * encoding} can be any string identifier known to iconv or recode. On
 * Unix systems run iconv -l for a list of available encodings.
 * 
 * This function is deprecated and should be replaced by calling {@link
 * px_set_parameter}.
 * 
 * See also {@link px_get_info} to determine the DOS code page as stored
 * in the database file.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $encoding The encoding for the output. Data which is
 *   being read from character fields is recoded into the targetencoding.
 * @return bool
 * @since PECL paradox >= 1.0.0
 **/
function px_set_targetencoding($pxdoc, $encoding){}

/**
 * Sets various values.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param string $name {@link name} can be one of the following.
 * @param float $value The number of primary keys. Paradox databases
 *   always use the first numprimkeys fields for the primary index.
 * @return bool
 * @since PECL paradox >= 1.1.0
 **/
function px_set_value($pxdoc, $name, $value){}

/**
 * Turns a timestamp as it stored in the paradox file into human readable
 * format. Paradox timestamps are the number of miliseconds since
 * 0001-01-02. This function is just for convenience. It can be easily
 * replaced by some math and the calendar functions as demonstrated in
 * the following example.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database.
 * @param float $value Value as stored in paradox database field of
 *   type PX_FIELD_TIME, or PX_FIELD_TIMESTAMP.
 * @param string $format String format similar to the format used by
 *   {@link date}. The placeholders support by this function is a subset
 *   of those supported by {@link date} (Y, y, m, n, d, j, H, h, G, g, i,
 *   s, A, a, L).
 * @return string
 * @since PECL paradox >= 1.4.0
 **/
function px_timestamp2string($pxdoc, $value, $format){}

/**
 * Updates an exiting record in the database. The record starts at 0.
 * 
 * The record data is passed as an array of field values. The elements in
 * the array must correspond to the fields in the database. If the array
 * has less elements than fields in the database, the remaining fields
 * will be set to null.
 * 
 * @param resource $pxdoc Resource identifier of the paradox database
 *   as returned by {@link px_new}.
 * @param array $data Associated array containing the field values as
 *   returned by {@link px_retrieve_record}.
 * @param int $num The record number is an artificial number counting
 *   records in the order as they are stored in the database. The first
 *   record has number 0.
 * @return bool
 * @since PECL paradox >= 1.4.0
 **/
function px_update_record($pxdoc, $data, $num){}

/**
 * @return string
 * @since PHP 4 >= 4.0.5
 **/
function qdom_error(){}

/**
 * @param string $doc
 * @return QDomDocument
 * @since PHP 4 >= 4.0.4
 **/
function qdom_tree($doc){}

/**
 * This function returns an 8-bit binary string corresponding to the
 * decoded quoted printable string (according to RFC2045, section 6.7,
 * not RFC2821, section 4.5.2, so additional periods are not stripped
 * from the beginning of line).
 * 
 * This function is similar to {@link imap_qprint}, except this one does
 * not require the IMAP module to work.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function quoted_printable_decode($str){}

/**
 * Returns a quoted printable string created according to RFC2045,
 * section 6.7.
 * 
 * This function is similar to {@link imap_8bit}, except this one does
 * not require the IMAP module to work.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function quoted_printable_encode($str){}

/**
 * Returns a version of str with a backslash character (\) before every
 * character that is among these: . \ + * ? [ ^ ] ( $ )
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function quotemeta($str){}

/**
 * This function converts {@link number} from radian to degrees.
 * 
 * @param float $number A radian value
 * @return float
 * @since PHP 4, PHP 5
 **/
function rad2deg($number){}

/**
 * @return resource
 * @since PECL radius >= 1.1.0
 **/
function radius_acct_open(){}

/**
 * {@link radius_add_server} may be called multiple times, and it may be
 * used together with {@link radius_config}. At most 10 servers may be
 * specified. When multiple servers are given, they are tried in
 * round-robin fashion until a valid response is received, or until each
 * server's {@link max_tries} limit has been reached.
 * 
 * @param resource $radius_handle
 * @param string $hostname The {@link hostname} parameter specifies the
 *   server host, either as a fully qualified domain name or as a
 *   dotted-quad IP address in text form.
 * @param int $port The {@link port} specifies the UDP port to contact
 *   on the server. If port is given as 0, the library looks up the
 *   radius/udp or radacct/udp service in the network services database,
 *   and uses the port found there. If no entry is found, the library
 *   uses the standard Radius ports, 1812 for authentication and 1813 for
 *   accounting.
 * @param string $secret The shared secret for the server host is
 *   passed to the {@link secret} parameter. The Radius protocol ignores
 *   all but the leading 128 bytes of the shared secret.
 * @param int $timeout The timeout for receiving replies from the
 *   server is passed to the {@link timeout} parameter, in units of
 *   seconds.
 * @param int $max_tries The maximum number of repeated requests to
 *   make before giving up is passed into the {@link max_tries}.
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_add_server($radius_handle, $hostname, $port, $secret, $timeout, $max_tries){}

/**
 * @return resource
 * @since PECL radius >= 1.1.0
 **/
function radius_auth_open(){}

/**
 * It is not needed to call this function because php frees all resources
 * at the end of each request.
 * 
 * @param resource $radius_handle
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_close($radius_handle){}

/**
 * Before issuing any Radius requests, the library must be made aware of
 * the servers it can contact. The easiest way to configure the library
 * is to call {@link radius_config}. {@link radius_config} causes the
 * library to read a configuration file whose format is described in
 * radius.conf.
 * 
 * @param resource $radius_handle
 * @param string $file The pathname of the configuration file is passed
 *   as the file argument to {@link radius_config}. The library can also
 *   be configured programmatically by calls to {@link
 *   radius_add_server}.
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_config($radius_handle, $file){}

/**
 * A Radius request consists of a code specifying the kind of request,
 * and zero or more attributes which provide additional information. To
 * begin constructing a new request, call {@link radius_create_request}.
 * 
 * @param resource $radius_handle
 * @param int $type Type is RADIUS_ACCESS_REQUEST or
 *   RADIUS_ACCOUNTING_REQUEST.
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_create_request($radius_handle, $type){}

/**
 * @param string $data
 * @return string
 * @since PECL radius >= 1.1.0
 **/
function radius_cvt_addr($data){}

/**
 * @param string $data
 * @return int
 * @since PECL radius >= 1.1.0
 **/
function radius_cvt_int($data){}

/**
 * @param string $data
 * @return string
 * @since PECL radius >= 1.1.0
 **/
function radius_cvt_string($data){}

/**
 * Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for security
 * reasons, and must be demangled before you can use them.
 * 
 * @param resource $radius_handle
 * @param string $mangled
 * @return string
 * @since PECL radius >= 1.2.0
 **/
function radius_demangle($radius_handle, $mangled){}

/**
 * When using MPPE with MS-CHAPv2, the send- and recv-keys are mangled
 * (see RFC 2548), however this function is useless, because I don't
 * think that there is or will be a PPTP-MPPE implementation in PHP.
 * 
 * @param resource $radius_handle
 * @param string $mangled
 * @return string
 * @since PECL radius >= 1.2.0
 **/
function radius_demangle_mppe_key($radius_handle, $mangled){}

/**
 * Like Radius requests, each response may contain zero or more
 * attributes. After a response has been received successfully by {@link
 * radius_send_request}, its attributes can be extracted one by one using
 * {@link radius_get_attr}. Each time {@link radius_get_attr} is called,
 * it gets the next attribute from the current response.
 * 
 * @param resource $radius_handle
 * @return mixed
 * @since PECL radius >= 1.1.0
 **/
function radius_get_attr($radius_handle){}

/**
 * If {@link radius_get_attr} returns RADIUS_VENDOR_SPECIFIC, {@link
 * radius_get_vendor_attr} may be called to determine the vendor.
 * 
 * @param string $data
 * @return array
 * @since PECL radius >= 1.1.0
 **/
function radius_get_vendor_attr($data){}

/**
 * @param resource $radius_handle
 * @param int $type
 * @param string $addr
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_addr($radius_handle, $type, $addr){}

/**
 * @param resource $radius_handle
 * @param int $type
 * @param string $value
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_attr($radius_handle, $type, $value){}

/**
 * @param resource $radius_handle
 * @param int $type
 * @param int $value
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_int($radius_handle, $type, $value){}

/**
 * @param resource $radius_handle
 * @param int $type
 * @param string $value
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_string($radius_handle, $type, $value){}

/**
 * @param resource $radius_handle
 * @param int $vendor
 * @param int $type
 * @param string $addr
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_vendor_addr($radius_handle, $vendor, $type, $addr){}

/**
 * @param resource $radius_handle
 * @param int $vendor
 * @param int $type
 * @param string $value
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_vendor_attr($radius_handle, $vendor, $type, $value){}

/**
 * @param resource $radius_handle
 * @param int $vendor
 * @param int $type
 * @param int $value
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_vendor_int($radius_handle, $vendor, $type, $value){}

/**
 * @param resource $radius_handle
 * @param int $vendor
 * @param int $type
 * @param string $value
 * @return bool
 * @since PECL radius >= 1.1.0
 **/
function radius_put_vendor_string($radius_handle, $vendor, $type, $value){}

/**
 * The request authenticator is needed for demangling mangled data like
 * passwords and encryption-keys.
 * 
 * @param resource $radius_handle
 * @return string
 * @since PECL radius >= 1.1.0
 **/
function radius_request_authenticator($radius_handle){}

/**
 * After the Radius request has been constructed, it is sent by {@link
 * radius_send_request}.
 * 
 * The {@link radius_send_request} function sends the request and waits
 * for a valid reply, retrying the defined servers in round-robin fashion
 * as necessary.
 * 
 * @param resource $radius_handle
 * @return int
 * @since PECL radius >= 1.1.0
 **/
function radius_send_request($radius_handle){}

/**
 * The shared secret is needed as salt for demangling mangled data like
 * passwords and encryption-keys.
 * 
 * @param resource $radius_handle
 * @return string
 * @since PECL radius >= 1.1.0
 **/
function radius_server_secret($radius_handle){}

/**
 * If Radius-functions fail then they record an error message. This error
 * message can be retrieved with this function.
 * 
 * @param resource $radius_handle
 * @return string
 * @since PECL radius >= 1.1.0
 **/
function radius_strerror($radius_handle){}

/**
 * @return int
 * @since PHP 4, PHP 5
 **/
function rand(){}

/**
 * Create an array containing a range of elements.
 * 
 * @param mixed $low Low value.
 * @param mixed $high High value.
 * @param number $step If a {@link step} value is given, it will be
 *   used as the increment between elements in the sequence. {@link step}
 *   should be given as a positive number. If not specified, {@link step}
 *   will default to 1.
 * @return array
 * @since PHP 4, PHP 5
 **/
function range($low, $high, $step){}

/**
 * This method defines whether broken archives can be read or all the
 * operations that attempt to extract the archive entries will fail.
 * Broken archives are archives for which no error is detected when the
 * file is opened but an error occurs when reading the entries.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @param bool $allow_broken Whether to allow reading broken files ()
 *   or not ().
 * @return bool
 * @since PECL rar >= 3.0.0
 **/
function rar_allow_broken_set($rarfile, $allow_broken){}

/**
 * This function determines whether an archive is incomplete, i.e., if a
 * volume is missing or a volume is truncated.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @return bool
 * @since PECL rar >= 3.0.0
 **/
function rar_broken_is($rarfile){}

/**
 * Close RAR archive and free all allocated resources.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @return bool
 * @since PECL rar >= 0.1
 **/
function rar_close($rarfile){}

/**
 * Get the (global) comment stored in the RAR archive. It may be up to 64
 * KiB long.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @return string
 * @since PECL rar >= 2.0.0
 **/
function rar_comment_get($rarfile){}

/**
 * Get entry object (file or directory) from the RAR archive.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @param string $entryname Path to the entry within the RAR archive.
 * @return RarEntry
 * @since PECL rar >= 0.1
 **/
function rar_entry_get($rarfile, $entryname){}

/**
 * Get entries list (files and directories) from the RAR archive.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @return array
 * @since PECL rar >= 0.1
 **/
function rar_list($rarfile){}

/**
 * Open specified RAR archive and return RarArchive instance representing
 * it.
 * 
 * @param string $filename Path to the Rar archive.
 * @param string $password A plain password, if needed to decrypt the
 *   headers. It will also be used by default if encrypted files are
 *   found. Note that the files may have different passwords in respect
 *   to the headers and among them.
 * @param callback $volume_callback A function that receives one
 *   parameter – the path of the volume that was not found – and
 *   returns a string with the correct path for such volume or NULL if
 *   such volume does not exist or is not known. The programmer should
 *   ensure the passed function doesn't cause loops as this function is
 *   called repetedly if the path returned in a previous call did not
 *   correspond to the needed volume. Specifying this parameter omits the
 *   notice that would otherwise be emitted whenever a volume is not
 *   found; an implementation that only returns can therefore be used to
 *   merely omit such notices.
 * @return RarArchive
 * @since PECL rar >= 0.1
 **/
function rar_open($filename, $password, $volume_callback){}

/**
 * Check whether the RAR archive is solid. Individual file extraction is
 * slower on solid archives.
 * 
 * @param RarArchive $rarfile A RarArchive object, opened with {@link
 *   rar_open}.
 * @return bool
 * @since PECL rar >= 2.0.0
 **/
function rar_solid_is($rarfile){}

/**
 * @return string
 * @since PECL rar >= 3.0.0
 **/
function rar_wrapper_cache_stats(){}

/**
 * Returns a string in which the sequences with percent (%) signs
 * followed by two hex digits have been replaced with literal characters.
 * 
 * @param string $str The URL to be decoded.
 * @return string
 * @since PHP 4, PHP 5
 **/
function rawurldecode($str){}

/**
 * Encodes the given string according to RFC 1738.
 * 
 * @param string $str The URL to be encoded.
 * @return string
 * @since PHP 4, PHP 5
 **/
function rawurlencode($str){}

/**
 * Returns the filename of the next file from the directory. The
 * filenames are returned in the order in which they are stored by the
 * filesystem.
 * 
 * @param resource $dir_handle The directory handle resource previously
 *   opened with {@link opendir}. If the directory handle is not
 *   specified, the last link opened by {@link opendir} is assumed.
 * @return string
 * @since PHP 4, PHP 5
 **/
function readdir($dir_handle){}

/**
 * Reads a file and writes it to the output buffer.
 * 
 * @param string $filename The filename being read.
 * @param bool $use_include_path You can use the optional second
 *   parameter and set it to , if you want to search for the file in the
 *   include_path, too.
 * @param resource $context A context stream resource.
 * @return int
 * @since PHP 4, PHP 5
 **/
function readfile($filename, $use_include_path, $context){}

/**
 * Reads a file, decompresses it and writes it to standard output.
 * 
 * {@link readgzfile} can be used to read a file which is not in gzip
 * format; in this case {@link readgzfile} will directly read from the
 * file without decompression.
 * 
 * @param string $filename The file name. This file will be opened from
 *   the filesystem and its contents written to standard output.
 * @param int $use_include_path You can set this optional parameter to
 *   1, if you want to search for the file in the include_path too.
 * @return int
 * @since PHP 4, PHP 5
 **/
function readgzfile($filename, $use_include_path){}

/**
 * Reads a single line from the user. You must add this line to the
 * history yourself using {@link readline_add_history}.
 * 
 * @param string $prompt You may specify a string with which to prompt
 *   the user.
 * @return string
 * @since PHP 4, PHP 5
 **/
function readline($prompt){}

/**
 * This function adds a line to the command line history.
 * 
 * @param string $line The line to be added in the history.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function readline_add_history($line){}

/**
 * Sets up a readline callback interface then prints {@link prompt} and
 * immediately returns. Calling this function twice without removing the
 * previous callback interface will automatically and conveniently
 * overwrite the old interface.
 * 
 * The callback feature is useful when combined with {@link
 * stream_select} as it allows interleaving of IO and user input, unlike
 * {@link readline}.
 * 
 * @param string $prompt The prompt message.
 * @param callback $callback The {@link callback} function takes one
 *   parameter; the user input returned.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function readline_callback_handler_install($prompt, $callback){}

/**
 * Removes a previously installed callback handler and restores terminal
 * settings.
 * 
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function readline_callback_handler_remove(){}

/**
 * Reads a character of user input. When a line is received, this
 * function informs the readline callback interface installed using
 * {@link readline_callback_handler_install} that a line is ready for
 * input.
 * 
 * @return void
 * @since PHP 5 >= 5.1.0
 **/
function readline_callback_read_char(){}

/**
 * This function clears the entire command line history.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function readline_clear_history(){}

/**
 * This function registers a completion function. This is the same kind
 * of functionality you'd get if you hit your tab key while using Bash.
 * 
 * @param callback $function You must supply the name of an existing
 *   function which accepts a partial command line and returns an array
 *   of possible matches.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function readline_completion_function($function){}

/**
 * Gets or sets various internal readline variables.
 * 
 * @param string $varname A variable name.
 * @param string $newvalue If provided, this will be the new value of
 *   the setting.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function readline_info($varname, $newvalue){}

/**
 * Gets the entire command line history.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function readline_list_history(){}

/**
 * Tells readline that the cursor has moved to a new line.
 * 
 * @return void
 * @since PHP 5 >= 5.1.0
 **/
function readline_on_new_line(){}

/**
 * This function reads a command history from a file.
 * 
 * @param string $filename Path to the filename containing the command
 *   history.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function readline_read_history($filename){}

/**
 * Redraws readline to redraw the display.
 * 
 * @return void
 * @since PHP 5 >= 5.1.0
 **/
function readline_redisplay(){}

/**
 * This function writes the command history to a file.
 * 
 * @param string $filename Path to the saved file.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function readline_write_history($filename){}

/**
 * {@link readlink} does the same as the readlink C function.
 * 
 * @param string $path The symbolic link path.
 * @return string
 * @since PHP 4, PHP 5
 **/
function readlink($path){}

/**
 * {@link read_exif_data} reads the EXIF headers from a JPEG or TIFF
 * image file. This way you can read meta data generated by digital
 * cameras.
 * 
 * EXIF headers tend to be present in JPEG/TIFF images generated by
 * digital cameras, but unfortunately each digital camera maker has a
 * different idea of how to actually tag their images, so you can't
 * always rely on a specific Exif header being present.
 * 
 * Height and Width are computed the same way {@link getimagesize} does
 * so their values must not be part of any header returned. Also, html is
 * a height/width text string to be used inside normal HTML.
 * 
 * When an Exif header contains a Copyright note, this itself can contain
 * two values. As the solution is inconsistent in the Exif 2.10 standard,
 * the COMPUTED section will return both entries Copyright.Photographer
 * and Copyright.Editor while the IFD0 sections contains the byte array
 * with the NULL character that splits both entries. Or just the first
 * entry if the datatype was wrong (normal behaviour of Exif). The
 * COMPUTED will also contain the entry Copyright which is either the
 * original copyright string, or a comma separated list of the photo and
 * editor copyright.
 * 
 * The tag UserComment has the same problem as the Copyright tag. It can
 * store two values. First the encoding used, and second the value
 * itself. If so the IFD section only contains the encoding or a byte
 * array. The COMPUTED section will store both in the entries
 * UserCommentEncoding and UserComment. The entry UserComment is
 * available in both cases so it should be used in preference to the
 * value in IFD0 section.
 * 
 * {@link read_exif_data} also validates EXIF data tags according to the
 * EXIF specification (, page 20).
 * 
 * @param string $filename The name of the image file being read. This
 *   cannot be an URL.
 * @param string $sections Is a comma separated list of sections that
 *   need to be present in file to produce a result array. If none of the
 *   requested sections could be found the return value is . FILE
 *   FileName, FileSize, FileDateTime, SectionsFound COMPUTED html,
 *   Width, Height, IsColor, and more if available. Height and Width are
 *   computed the same way {@link getimagesize} does so their values must
 *   not be part of any header returned. Also, html is a height/width
 *   text string to be used inside normal HTML. ANY_TAG Any information
 *   that has a Tag e.g. IFD0, EXIF, ... IFD0 All tagged data of IFD0. In
 *   normal imagefiles this contains image size and so forth. THUMBNAIL A
 *   file is supposed to contain a thumbnail if it has a second IFD. All
 *   tagged information about the embedded thumbnail is stored in this
 *   section. COMMENT Comment headers of JPEG images. EXIF The EXIF
 *   section is a sub section of IFD0. It contains more detailed
 *   information about an image. Most of these entries are digital camera
 *   related.
 * @param bool $arrays Specifies whether or not each section becomes an
 *   array. The {@link sections} COMPUTED, THUMBNAIL, and COMMENT always
 *   become arrays as they may contain values whose names conflict with
 *   other sections.
 * @param bool $thumbnail When set to the thumbnail itself is read.
 *   Otherwise, only the tagged data is read.
 * @return array
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function read_exif_data($filename, $sections, $arrays, $thumbnail){}

/**
 * {@link realpath} expands all symbolic links and resolves references to
 * '/./', '/../' and extra '/' characters in the input {@link path} and
 * return the canonicalized absolute pathname.
 * 
 * @param string $path The path being checked.
 * @return string
 * @since PHP 4, PHP 5
 **/
function realpath($path){}

/**
 * Get the contents of the realpath cache.
 * 
 * @return array
 * @since PHP 5 >= 5.3.2
 **/
function realpath_cache_get(){}

/**
 * Get the amount of memory used by the realpath cache.
 * 
 * @return int
 * @since PHP 5 >= 5.3.2
 **/
function realpath_cache_size(){}

/**
 * Recode the string {@link string} according to the recode request
 * {@link request}.
 * 
 * @param string $request The desired recode request type
 * @param string $string The string to be recoded
 * @return string
 * @since PHP 4, PHP 5
 **/
function recode($request, $string){}

/**
 * Recode the file referenced by file handle {@link input} into the file
 * referenced by file handle {@link output} according to the recode
 * {@link request}.
 * 
 * @param string $request The desired recode request type
 * @param resource $input A local file handle resource for the {@link
 *   input}
 * @param resource $output A local file handle resource for the {@link
 *   output}
 * @return bool
 * @since PHP 4, PHP 5
 **/
function recode_file($request, $input, $output){}

/**
 * Recode the string {@link string} according to the recode request
 * {@link request}.
 * 
 * @param string $request The desired recode request type
 * @param string $string The string to be recoded
 * @return string
 * @since PHP 4, PHP 5
 **/
function recode_string($request, $string){}

/**
 * Registers the function named by {@link function} to be executed when
 * script processing is complete or when {@link exit} is called.
 * 
 * Multiple calls to {@link register_shutdown_function} can be made, and
 * each will be called in the same order as they were registered. If you
 * call {@link exit} within one registered shutdown function, processing
 * will stop completely and no other registered shutdown functions will
 * be called.
 * 
 * @param callback $function The shutdown function to register. The
 *   shutdown functions are called as the part of the request so that
 *   it's possible to send the output from them. There is currently no
 *   way to process the data with output buffering functions in the
 *   shutdown function. Shutdown functions are called after closing all
 *   opened output buffers thus, for example, its output will not be
 *   compressed if zlib.output_compression is enabled.
 * @param mixed $parameter It is possible to pass parameters to the
 *   shutdown function by passing additional parameters.
 * @return void
 * @since PHP 4, PHP 5
 **/
function register_shutdown_function($function, $parameter){}

/**
 * @param callback $function The function name as a string, or an array
 *   consisting of an object and a method.
 * @param mixed $arg
 * @return bool
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function register_tick_function($function, $arg){}

/**
 * Attempts to rename {@link oldname} to {@link newname}.
 * 
 * @param string $oldname
 * @param string $newname The new name.
 * @param resource $context
 * @return bool
 * @since PHP 4, PHP 5
 **/
function rename($oldname, $newname, $context){}

/**
 * Renames a orig_name to new_name in the global function table. Useful
 * for temporarily overriding built-in functions.
 * 
 * @param string $original_name The original function name.
 * @param string $new_name The new name for the {@link original_name}
 *   function.
 * @return bool
 * @since PECL apd >= 0.2
 **/
function rename_function($original_name, $new_name){}

/**
 * {@link reset} rewinds {@link array}'s internal pointer to the first
 * element and returns the value of the first array element.
 * 
 * @param array $array The input array.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function reset(&$array){}

/**
 * Get the number of elements in the bundle.
 * 
 * @param ResourceBundle $r ResourceBundle object.
 * @return int
 **/
function resourcebundle_count($r){}

/**
 * Creates a resource bundle.
 * 
 * @param string $locale Locale for which the resources should be
 *   loaded (locale name, e.g. en_CA).
 * @param string $bundlename The directory where the data is stored or
 *   the name of the .dat file.
 * @param bool $fallback Whether locale should match exactly or
 *   fallback to parent locale is allowed.
 * @return ResourceBundle
 **/
function resourcebundle_create($locale, $bundlename, $fallback){}

/**
 * Get the data from the bundle by index or string key.
 * 
 * @param ResourceBundle $r ResourceBundle object.
 * @param string|int $index Data index, must be string or integer.
 * @return mixed
 **/
function resourcebundle_get($r, $index){}

/**
 * Get error code from the last function performed by the bundle object.
 * 
 * @param ResourceBundle $r ResourceBundle object.
 * @return int
 **/
function resourcebundle_get_error_code($r){}

/**
 * Get error message from the last function performed by the bundle
 * object.
 * 
 * @param ResourceBundle $r ResourceBundle object.
 * @return string
 **/
function resourcebundle_get_error_message($r){}

/**
 * Get the list of locales supported by the bundle. The list is taken
 * from the bundle table named res_index which should contain a table
 * named InstalledLocales, which contains locales as keys. This bundle
 * should be either in data directory as .res file or part of the .dat
 * file for this function to work.
 * 
 * @param ResourceBundle $r ResourceBundle object.
 * @return array
 **/
function resourcebundle_locales($r){}

/**
 * Used after changing the error handler function using {@link
 * set_error_handler}, to revert to the previous error handler (which
 * could be the built-in or a user defined function).
 * 
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function restore_error_handler(){}

/**
 * Used after changing the exception handler function using {@link
 * set_exception_handler}, to revert to the previous exception handler
 * (which could be the built-in or a user defined function).
 * 
 * @return bool
 * @since PHP 5
 **/
function restore_exception_handler(){}

/**
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function restore_include_path(){}

/**
 * Sets the file position indicator for {@link handle} to the beginning
 * of the file stream.
 * 
 * @param resource $handle The file pointer must be valid, and must
 *   point to a file successfully opened by {@link fopen}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function rewind($handle){}

/**
 * Resets the directory stream indicated by {@link dir_handle} to the
 * beginning of the directory.
 * 
 * @param resource $dir_handle The directory handle resource previously
 *   opened with {@link opendir}. If the directory handle is not
 *   specified, the last link opened by {@link opendir} is assumed.
 * @return void
 * @since PHP 4, PHP 5
 **/
function rewinddir($dir_handle){}

/**
 * Attempts to remove the directory named by {@link dirname}. The
 * directory must be empty, and the relevant permissions must permit
 * this. A E_WARNING level error will be generated on failure.
 * 
 * @param string $dirname Path to the directory.
 * @param resource $context
 * @return bool
 * @since PHP 4, PHP 5
 **/
function rmdir($dirname, $context){}

/**
 * Returns the rounded value of {@link val} to specified {@link
 * precision} (number of digits after the decimal point). {@link
 * precision} can also be negative or zero (default).
 * 
 * PHP doesn't handle strings like "12,300.2" correctly by default. See
 * converting from strings.
 * 
 * @param float $val The value to round
 * @param int $precision The optional number of decimal digits to round
 *   to.
 * @param int $mode One of PHP_ROUND_HALF_UP, PHP_ROUND_HALF_DOWN,
 *   PHP_ROUND_HALF_EVEN, or PHP_ROUND_HALF_ODD.
 * @return float
 * @since PHP 4, PHP 5
 **/
function round($val, $precision, $mode){}

/**
 * {@link rpm_close} will close an RPM file pointer.
 * 
 * @param resource $rpmr A file pointer resource successfully opened by
 *   {@link rpm_open}.
 * @return bool
 * @since PECL rpmreader >= 0.1.0
 **/
function rpm_close($rpmr){}

/**
 * {@link rpm_get_tag} will retrieve a given tag from the RPM file's
 * header and return it.
 * 
 * @param resource $rpmr A file pointer resource successfully opened by
 *   {@link rpm_open}.
 * @param int $tagnum The tag number to retrieve from the RPM header.
 *   This value can be specified using the list of constants defined by
 *   this module.
 * @return mixed
 * @since PECL rpmreader >= 0.1.0
 **/
function rpm_get_tag($rpmr, $tagnum){}

/**
 * {@link rpm_is_valid} will test an RPM file for validity as an RPM
 * file. This is not the same as {@link rpm_open} as it only checks the
 * file for validity but does not return a file pointer to be used by
 * further functions.
 * 
 * @param string $filename The filename of the RPM file you wish to
 *   check for validity.
 * @return bool
 * @since PECL rpmreader >= 0.1.0
 **/
function rpm_is_valid($filename){}

/**
 * {@link rpm_open} will open an RPM file and will determine if the file
 * is a valid RPM file.
 * 
 * @param string $filename The filename of the RPM file you wish to
 *   open.
 * @return resource
 * @since PECL rpmreader >= 0.1.0
 **/
function rpm_open($filename){}

/**
 * {@link rpm_version} will return the current version of the rpmreader
 * extension.
 * 
 * @return string
 * @since PECL rpmreader >= 0.3.0
 **/
function rpm_version(){}

/**
 * This function sorts an array in reverse order (highest to lowest).
 * 
 * @param array $array The input array.
 * @param int $sort_flags You may modify the behavior of the sort using
 *   the optional parameter {@link sort_flags}, for details see {@link
 *   sort}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function rsort(&$array, $sort_flags){}

/**
 * This function returns a string with whitespace stripped from the end
 * of {@link str}.
 * 
 * Without the second parameter, {@link rtrim} will strip these
 * characters: " " (ASCII 32 (0x20)), an ordinary space. "\t" (ASCII 9
 * (0x09)), a tab. "\n" (ASCII 10 (0x0A)), a new line (line feed). "\r"
 * (ASCII 13 (0x0D)), a carriage return. "\0" (ASCII 0 (0x00)), the
 * NUL-byte. "\x0B" (ASCII 11 (0x0B)), a vertical tab.
 * 
 * @param string $str The input string.
 * @param string $charlist You can also specify the characters you want
 *   to strip, by means of the {@link charlist} parameter. Simply list
 *   all characters that you want to be stripped. With .. you can specify
 *   a range of characters.
 * @return string
 * @since PHP 4, PHP 5
 **/
function rtrim($str, $charlist){}

/**
 * @param string $classname Name of class to be adopted
 * @param string $parentname Parent class which child class is
 *   extending
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_class_adopt($classname, $parentname){}

/**
 * @param string $classname Name of class to emancipate
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_class_emancipate($classname){}

/**
 * @param string $constname Name of constant to declare. Either a
 *   string to indicate a global constant, or classname::constname to
 *   indicate a class constant.
 * @param mixed $value NULL, Bool, Long, Double, String, or Resource
 *   value to store in the new constant.
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_constant_add($constname, $value){}

/**
 * @param string $constname Constant to redefine. Either string
 *   indicating global constant, or classname::constname indicating class
 *   constant.
 * @param mixed $newvalue New value to assign to constant.
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_constant_redefine($constname, $newvalue){}

/**
 * @param string $constname Name of constant to remove. Either a string
 *   indicating a global constant, or classname::constname indicating a
 *   class constant.
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_constant_remove($constname){}

/**
 * @param string $funcname Name of function to be created
 * @param string $arglist Comma separated argument list
 * @param string $code Code making up the function
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_function_add($funcname, $arglist, $code){}

/**
 * @param string $funcname Name of existing function
 * @param string $targetname Name of new function to copy definition to
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_function_copy($funcname, $targetname){}

/**
 * @param string $funcname Name of function to redefine
 * @param string $arglist New list of arguments to be accepted by
 *   function
 * @param string $code New code implementation
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_function_redefine($funcname, $arglist, $code){}

/**
 * @param string $funcname Name of function to be deleted
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_function_remove($funcname){}

/**
 * @param string $funcname Current function name
 * @param string $newname New function name
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_function_rename($funcname, $newname){}

/**
 * Similar to {@link include} however any code residing outside of a
 * function or class is simply ignored. Additionally, depending on the
 * value of {@link flags}, any functions or classes which already exist
 * in the currently running environment will be automatically overwritten
 * by their new definitions.
 * 
 * @param string $filename Filename to import function and class
 *   definitions from
 * @param int $flags Bitwise OR of the RUNKIT_IMPORT_* family of
 *   constants.
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_import($filename, $flags){}

/**
 * The {@link runkit_lint} function performs a syntax (lint) check on the
 * specified php code testing for scripting errors. This is similar to
 * using php -l from the command line except {@link runkit_lint} accepts
 * actual code rather than a filename.
 * 
 * @param string $code PHP Code to be lint checked
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_lint($code){}

/**
 * The {@link runkit_lint_file} function performs a syntax (lint) check
 * on the specified filename testing for scripting errors. This is
 * similar to using php -l from the commandline.
 * 
 * @param string $filename File containing PHP Code to be lint checked
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_lint_file($filename){}

/**
 * @param string $classname The class to which this method will be
 *   added
 * @param string $methodname The name of the method to add
 * @param string $args Comma-delimited list of arguments for the
 *   newly-created method
 * @param string $code The code to be evaluated when {@link methodname}
 *   is called
 * @param int $flags The type of method to create, can be
 *   RUNKIT_ACC_PUBLIC, RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_method_add($classname, $methodname, $args, $code, $flags){}

/**
 * @param string $dClass Destination class for copied method
 * @param string $dMethod Destination method name
 * @param string $sClass Source class of the method to copy
 * @param string $sMethod Name of the method to copy from the source
 *   class. If this parameter is omitted, the value of {@link dMethod} is
 *   assumed.
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_method_copy($dClass, $dMethod, $sClass, $sMethod){}

/**
 * @param string $classname The class in which to redefine the method
 * @param string $methodname The name of the method to redefine
 * @param string $args Comma-delimited list of arguments for the
 *   redefined method
 * @param string $code The new code to be evaluated when {@link
 *   methodname} is called
 * @param int $flags The redefined method can be RUNKIT_ACC_PUBLIC,
 *   RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_method_redefine($classname, $methodname, $args, $code, $flags){}

/**
 * @param string $classname The class in which to remove the method
 * @param string $methodname The name of the method to remove
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_method_remove($classname, $methodname){}

/**
 * @param string $classname The class in which to rename the method
 * @param string $methodname The name of the method to rename
 * @param string $newname The new name to give to the renamed method
 * @return bool
 * @since PECL runkit >= 0.7.0
 **/
function runkit_method_rename($classname, $methodname, $newname){}

/**
 * @return bool
 * @since PECL runkit >= 0.8.0
 **/
function runkit_return_value_used(){}

/**
 * Ordinarily, anything output (such as with {@link echo} or {@link
 * print}) will be output as though it were printed from the parent's
 * scope. Using {@link runkit_sandbox_output_handler} however, output
 * generated by the sandbox (including errors), can be captured by a
 * function outside of the sandbox.
 * 
 * @param object $sandbox Object instance of Runkit_Sandbox class on
 *   which to set output handling.
 * @param mixed $callback Name of a function which expects one
 *   parameter. Output generated by {@link sandbox} will be passed to
 *   this callback. Anything returned by the callback will be displayed
 *   normally. If this parameter is not passed then output handling will
 *   not be changed. If a non-truth value is passed, output handling will
 *   be disabled and will revert to direct display.
 * @return mixed
 * @since PECL runkit >= 0.7.0
 **/
function runkit_sandbox_output_handler($sandbox, $callback){}

/**
 * @return array
 * @since PECL runkit >= 0.7.0
 **/
function runkit_superglobals(){}

/**
 * Returns an array of files and directories from the {@link directory}.
 * 
 * @param string $directory The directory that will be scanned.
 * @param int $sorting_order By default, the sorted order is
 *   alphabetical in ascending order. If the optional {@link
 *   sorting_order} is set to non-zero, then the sort order is
 *   alphabetical in descending order.
 * @param resource $context For a description of the {@link context}
 *   parameter, refer to the streams section of the manual.
 * @return array
 * @since PHP 5
 **/
function scandir($directory, $sorting_order, $context){}

/**
 * {@link sem_acquire} blocks (if necessary) until the semaphore can be
 * acquired. A process attempting to acquire a semaphore which it has
 * already acquired will block forever if acquiring the semaphore would
 * cause its maximum number of semaphore to be exceeded.
 * 
 * After processing a request, any semaphores acquired by the process but
 * not explicitly released will be released automatically and a warning
 * will be generated.
 * 
 * @param resource $sem_identifier {@link sem_identifier} is a
 *   semaphore resource, obtained from {@link sem_get}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sem_acquire($sem_identifier){}

/**
 * {@link sem_get} returns an id that can be used to access the System V
 * semaphore with the given {@link key}.
 * 
 * A second call to {@link sem_get} for the same key will return a
 * different semaphore identifier, but both identifiers access the same
 * underlying semaphore.
 * 
 * @param int $key
 * @param int $max_acquire The number of processes that can acquire the
 *   semaphore simultaneously is set to {@link max_acquire}.
 * @param int $perm The semaphore permissions. Actually this value is
 *   set only if the process finds it is the only process currently
 *   attached to the semaphore.
 * @param int $auto_release Specifies if the semaphore should be
 *   automatically released on request shutdown.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function sem_get($key, $max_acquire, $perm, $auto_release){}

/**
 * {@link sem_release} releases the semaphore if it is currently acquired
 * by the calling process, otherwise a warning is generated.
 * 
 * After releasing the semaphore, {@link sem_acquire} may be called to
 * re-acquire it.
 * 
 * @param resource $sem_identifier A Semaphore resource handle as
 *   returned by {@link sem_get}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sem_release($sem_identifier){}

/**
 * {@link sem_remove} removes the given semaphore.
 * 
 * After removing the semaphore, it is no more accessible.
 * 
 * @param resource $sem_identifier A semaphore resource identifier as
 *   returned by {@link sem_get}.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function sem_remove($sem_identifier){}

/**
 * Generates a storable representation of a value
 * 
 * This is useful for storing or passing PHP values around without losing
 * their type and structure.
 * 
 * To make the serialized string into a PHP value again, use {@link
 * unserialize}.
 * 
 * @param mixed $value The value to be serialized. {@link serialize}
 *   handles all types, except the resource-type. You can even {@link
 *   serialize} arrays that contain references to itself. Circular
 *   references inside the array/object you are serializing will also be
 *   stored. Any other reference will be lost. When serializing objects,
 *   PHP will attempt to call the member function __sleep prior to
 *   serialization. This is to allow the object to do any last minute
 *   clean-up, etc. prior to being serialized. Likewise, when the object
 *   is restored using {@link unserialize} the __wakeup member function
 *   is called.
 * @return string
 * @since PHP 4, PHP 5
 **/
function serialize($value){}

/**
 * {@link session_cache_expire} returns the current setting of
 * session.cache_expire.
 * 
 * The cache expire is reset to the default value of 180 stored in
 * session.cache_limiter at request startup time. Thus, you need to call
 * {@link session_cache_expire} for every request (and before {@link
 * session_start} is called).
 * 
 * @param string $new_cache_expire If {@link new_cache_expire} is
 *   given, the current cache expire is replaced with {@link
 *   new_cache_expire}.
 *   
 *   Setting {@link new_cache_expire} is of value only, if
 *   session.cache_limiter is set to a value different from nocache.
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function session_cache_expire($new_cache_expire){}

/**
 * {@link session_cache_limiter} returns the name of the current cache
 * limiter.
 * 
 * The cache limiter defines which cache control HTTP headers are sent to
 * the client. These headers determine the rules by which the page
 * content may be cached by the client and intermediate proxies. Setting
 * the cache limiter to nocache disallows any client/proxy caching. A
 * value of public permits caching by proxies and the client, whereas
 * private disallows caching by proxies and permits the client to cache
 * the contents.
 * 
 * In private mode, the Expire header sent to the client may cause
 * confusion for some browsers, including Mozilla. You can avoid this
 * problem by using private_no_expire mode. The Expire header is never
 * sent to the client in this mode.
 * 
 * The cache limiter is reset to the default value stored in
 * session.cache_limiter at request startup time. Thus, you need to call
 * {@link session_cache_limiter} for every request (and before {@link
 * session_start} is called).
 * 
 * @param string $cache_limiter If {@link cache_limiter} is specified,
 *   the name of the current cache limiter is changed to the new value.
 * @return string
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function session_cache_limiter($cache_limiter){}

/**
 * End the current session and store session data.
 * 
 * Session data is usually stored after your script terminated without
 * the need to call {@link session_commit}, but as session data is locked
 * to prevent concurrent writes only one script may operate on a session
 * at any time. When using framesets together with sessions you will
 * experience the frames loading one by one due to this locking. You can
 * reduce the time needed to load all the frames by ending the session as
 * soon as all changes to session variables are done.
 * 
 * @return void
 * @since PHP 4 >= 4.4.0, PHP 5
 **/
function session_commit(){}

/**
 * {@link session_decode} decodes the session data in {@link data},
 * setting variables stored in the session.
 * 
 * @param string $data The encoded data to be stored.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_decode($data){}

/**
 * In order to kill the session altogether, like to log the user out, the
 * session id must also be unset. If a cookie is used to propagate the
 * session id (default behavior), then the session cookie must be
 * deleted. {@link setcookie} may be used for that.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_destroy(){}

/**
 * {@link session_encode} returns a string with the contents of the
 * current session encoded within.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function session_encode(){}

/**
 * Gets the session cookie parameters.
 * 
 * @return array
 * @since PHP 4, PHP 5
 **/
function session_get_cookie_params(){}

/**
 * {@link session_id} is used to get or set the session id for the
 * current session.
 * 
 * The constant SID can also be used to retrieve the current name and
 * session id as a string suitable for adding to URLs. See also Session
 * handling.
 * 
 * @param string $id If {@link id} is specified, it will replace the
 *   current session id. {@link session_id} needs to be called before
 *   {@link session_start} for that purpose. Depending on the session
 *   handler, not all characters are allowed within the session id. For
 *   example, the file session handler only allows characters in the
 *   range a-z A-Z 0-9 , (comma) and - (minus)!
 * @return string
 * @since PHP 4, PHP 5
 **/
function session_id($id){}

/**
 * Finds out whether a global variable is registered in a session.
 * 
 * @param string $name The variable name.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_is_registered($name){}

/**
 * {@link session_module_name} gets the name of the current session
 * module.
 * 
 * @param string $module If {@link module} is specified, that module
 *   will be used instead.
 * @return string
 * @since PHP 4, PHP 5
 **/
function session_module_name($module){}

/**
 * {@link session_name} returns the name of the current session. If
 * {@link name} is given, {@link session_name} will update the session
 * name and return the old session name.
 * 
 * The session name is reset to the default value stored in session.name
 * at request startup time. Thus, you need to call {@link session_name}
 * for every request (and before {@link session_start} or {@link
 * session_register} are called).
 * 
 * @param string $name The session name references the session id in
 *   cookies and URLs. It should contain only alphanumeric characters; it
 *   should be short and descriptive (i.e. for users with enabled cookie
 *   warnings). If {@link name} is specified, the name of the current
 *   session is changed to its value.
 *   
 *   The session name can't consist of digits only, at least one letter
 *   must be present. Otherwise a new session id is generated every time.
 * @return string
 * @since PHP 4, PHP 5
 **/
function session_name($name){}

/**
 * @param int $error_level
 * @param string $error_message
 * @return bool
 * @since PECL session_pgsql SVN
 **/
function session_pgsql_add_error($error_level, $error_message){}

/**
 * Get the number of errors and optional the error messages.
 * 
 * @param bool $with_error_message Set to the literal error message for
 *   each error is also returned.
 * @return array
 * @since PECL session_pgsql SVN
 **/
function session_pgsql_get_error($with_error_message){}

/**
 * @return string
 * @since PECL session_pgsql SVN
 **/
function session_pgsql_get_field(){}

/**
 * Reset the connection to the session database servers.
 * 
 * @return bool
 * @since PECL session_pgsql SVN
 **/
function session_pgsql_reset(){}

/**
 * @param string $value
 * @return bool
 * @since PECL session_pgsql SVN
 **/
function session_pgsql_set_field($value){}

/**
 * @return array
 * @since PECL session_pgsql SVN
 **/
function session_pgsql_status(){}

/**
 * {@link session_regenerate_id} will replace the current session id with
 * a new one, and keep the current session information.
 * 
 * @param bool $delete_old_session Whether to delete the old associated
 *   session file or not.
 * @return bool
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function session_regenerate_id($delete_old_session){}

/**
 * {@link session_register} accepts a variable number of arguments, any
 * of which can be either a string holding the name of a variable or an
 * array consisting of variable names or other arrays. For each name,
 * {@link session_register} registers the global variable with that name
 * in the current session.
 * 
 * You can also create a session variable by simply setting the
 * appropriate member of the $_SESSION or $HTTP_SESSION_VARS (PHP <
 * 4.1.0) array.
 * 
 * <?php // Use of session_register() is deprecated $barney = "A big
 * purple dinosaur."; session_register("barney");
 * 
 * // Use of $_SESSION is preferred, as of PHP 4.1.0 $_SESSION["zim"] =
 * "An invader from another planet.";
 * 
 * // The old way was to use $HTTP_SESSION_VARS
 * $HTTP_SESSION_VARS["spongebob"] = "He's got square pants."; ?>
 * 
 * If {@link session_start} was not called before this function is
 * called, an implicit call to {@link session_start} with no parameters
 * will be made. $_SESSION does not mimic this behavior and requires
 * {@link session_start} before use.
 * 
 * @param mixed $name A string holding the name of a variable or an
 *   array consisting of variable names or other arrays.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_register($name){}

/**
 * {@link session_save_path} returns the path of the current directory
 * used to save session data.
 * 
 * @param string $path Session data path. If specified, the path to
 *   which data is saved will be changed. {@link session_save_path} needs
 *   to be called before {@link session_start} for that purpose.
 *   
 *   On some operating systems, you may want to specify a path on a
 *   filesystem that handles lots of small files efficiently. For
 *   example, on Linux, reiserfs may provide better performance than
 *   ext2fs.
 * @return string
 * @since PHP 4, PHP 5
 **/
function session_save_path($path){}

/**
 * Set cookie parameters defined in the file. The effect of this function
 * only lasts for the duration of the script. Thus, you need to call
 * {@link session_set_cookie_params} for every request and before {@link
 * session_start} is called.
 * 
 * @param int $lifetime Lifetime of the session cookie, defined in
 *   seconds.
 * @param string $path Path on the domain where the cookie will work.
 *   Use a single slash ('/') for all paths on the domain.
 * @param string $domain Cookie domain, for example 'www.php.net'. To
 *   make cookies visible on all subdomains then the domain must be
 *   prefixed with a dot like '.php.net'.
 * @param bool $secure If cookie will only be sent over secure
 *   connections.
 * @param bool $httponly If set to then PHP will attempt to send the
 *   httponly flag when setting the session cookie.
 * @return void
 * @since PHP 4, PHP 5
 **/
function session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly){}

/**
 * {@link session_set_save_handler} sets the user-level session storage
 * functions which are used for storing and retrieving data associated
 * with a session. This is most useful when a storage method other than
 * those supplied by PHP sessions is preferred. i.e. Storing the session
 * data in a local database.
 * 
 * @param callback $open Open function, this works like a constructor
 *   in classes and is executed when the session is being opened. The
 *   open function expects two parameters, where the first is the save
 *   path and the second is the session name.
 * @param callback $close Close function, this works like a destructor
 *   in classes and is executed when the session operation is done.
 * @param callback $read Read function must return string value always
 *   to make save handler work as expected. Return empty string if there
 *   is no data to read. Return values from other handlers are converted
 *   to boolean expression. for success, for failure.
 * @param callback $write Write function that is called when session
 *   data is to be saved. This function expects two parameters: an
 *   identifier and the data associated with it. The "write" handler is
 *   not executed until after the output stream is closed. Thus, output
 *   from debugging statements in the "write" handler will never be seen
 *   in the browser. If debugging output is necessary, it is suggested
 *   that the debug output be written to a file instead.
 * @param callback $destroy The destroy handler, this is executed when
 *   a session is destroyed with {@link session_destroy} and takes the
 *   session id as its only parameter.
 * @param callback $gc The garbage collector, this is executed when the
 *   session garbage collector is executed and takes the max session
 *   lifetime as its only parameter.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_set_save_handler($open, $close, $read, $write, $destroy, $gc){}

/**
 * {@link session_start} creates a session or resumes the current one
 * based on a session identifier passed via a GET or POST request, or
 * passed via a cookie.
 * 
 * To use a named session, call {@link session_name} before calling
 * {@link session_start}.
 * 
 * When session.use_trans_sid is enabled, the {@link session_start}
 * function will register an internal output handler for URL rewriting.
 * 
 * If a user uses ob_gzhandler or similar with {@link ob_start}, the
 * function order is important for proper output. For example,
 * ob_gzhandler must be registered before starting the session.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_start(){}

/**
 * {@link session_unregister} unregisters the global variable named
 * {@link name} from the current session.
 * 
 * @param string $name The variable name.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function session_unregister($name){}

/**
 * The {@link session_unset} function frees all session variables
 * currently registered.
 * 
 * @return void
 * @since PHP 4, PHP 5
 **/
function session_unset(){}

/**
 * End the current session and store session data.
 * 
 * Session data is usually stored after your script terminated without
 * the need to call {@link session_write_close}, but as session data is
 * locked to prevent concurrent writes only one script may operate on a
 * session at any time. When using framesets together with sessions you
 * will experience the frames loading one by one due to this locking. You
 * can reduce the time needed to load all the frames by ending the
 * session as soon as all changes to session variables are done.
 * 
 * @return void
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function session_write_close(){}

/**
 * {@link setcookie} defines a cookie to be sent along with the rest of
 * the HTTP headers. Like other headers, cookies must be sent before any
 * output from your script (this is a protocol restriction). This
 * requires that you place calls to this function prior to any output,
 * including <html> and <head> tags as well as any whitespace.
 * 
 * Once the cookies have been set, they can be accessed on the next page
 * load with the $_COOKIE or $HTTP_COOKIE_VARS arrays. Note, superglobals
 * such as $_COOKIE became available in PHP 4.1.0. Cookie values also
 * exist in $_REQUEST.
 * 
 * @param string $name The name of the cookie.
 * @param string $value The value of the cookie. This value is stored
 *   on the clients computer; do not store sensitive information.
 *   Assuming the {@link name} is 'cookiename', this value is retrieved
 *   through $_COOKIE['cookiename']
 * @param int $expire The time the cookie expires. This is a Unix
 *   timestamp so is in number of seconds since the epoch. In other
 *   words, you'll most likely set this with the {@link time} function
 *   plus the number of seconds before you want it to expire. Or you
 *   might use {@link mktime}. time()+60*60*24*30 will set the cookie to
 *   expire in 30 days. If set to 0, or omitted, the cookie will expire
 *   at the end of the session (when the browser closes).
 *   
 *   You may notice the {@link expire} parameter takes on a Unix
 *   timestamp, as opposed to the date format Wdy, DD-Mon-YYYY HH:MM:SS
 *   GMT, this is because PHP does this conversion internally. {@link
 *   expire} is compared to the client's time which can differ from
 *   server's time.
 * @param string $path The path on the server in which the cookie will
 *   be available on. If set to '/', the cookie will be available within
 *   the entire {@link domain}. If set to '/foo/', the cookie will only
 *   be available within the /foo/ directory and all sub-directories such
 *   as /foo/bar/ of {@link domain}. The default value is the current
 *   directory that the cookie is being set in.
 * @param string $domain The domain that the cookie is available. To
 *   make the cookie available on all subdomains of example.com then
 *   you'd set it to '.example.com'. The . is not required but makes it
 *   compatible with more browsers. Setting it to www.example.com will
 *   make the cookie only available in the www subdomain. Refer to tail
 *   matching in the spec for details.
 * @param bool $secure Indicates that the cookie should only be
 *   transmitted over a secure HTTPS connection from the client. When set
 *   to , the cookie will only be set if a secure connection exists. On
 *   the server-side, it's on the programmer to send this kind of cookie
 *   only on secure connection (e.g. with respect to $_SERVER["HTTPS"]).
 * @param bool $httponly When the cookie will be made accessible only
 *   through the HTTP protocol. This means that the cookie won't be
 *   accessible by scripting languages, such as JavaScript. This setting
 *   can effectively help to reduce identity theft through XSS attacks
 *   (although it is not supported by all browsers). Added in PHP 5.2.0.
 *   or
 * @return bool
 * @since PHP 4, PHP 5
 **/
function setcookie($name, $value, $expire, $path, $domain, $secure, $httponly){}

/**
 * Sets locale information.
 * 
 * @param int $category {@link category} is a named constant specifying
 *   the category of the functions affected by the locale setting: LC_ALL
 *   for all of the below LC_COLLATE for string comparison, see {@link
 *   strcoll} LC_CTYPE for character classification and conversion, for
 *   example {@link strtoupper} LC_MONETARY for {@link localeconv}
 *   LC_NUMERIC for decimal separator (See also {@link localeconv})
 *   LC_TIME for date and time formatting with {@link strftime}
 *   LC_MESSAGES for system responses (available if PHP was compiled with
 *   libintl)
 * @param string $locale If {@link locale} is or the empty string "",
 *   the locale names will be set from the values of environment
 *   variables with the same names as the above categories, or from
 *   "LANG". If {@link locale} is "0", the locale setting is not
 *   affected, only the current setting is returned. If {@link locale} is
 *   an array or followed by additional parameters then each array
 *   element or parameter is tried to be set as new locale until success.
 *   This is useful if a locale is known under different names on
 *   different systems or for providing a fallback for a possibly not
 *   available locale.
 * @return string
 * @since PHP 4, PHP 5
 **/
function setlocale($category, $locale){}

/**
 * {@link setrawcookie} is exactly the same as {@link setcookie} except
 * that the cookie value will not be automatically urlencoded when sent
 * to the browser.
 * 
 * @param string $name
 * @param string $value
 * @param int $expire
 * @param string $path
 * @param string $domain
 * @param bool $secure
 * @param bool $httponly
 * @return bool
 * @since PHP 5
 **/
function setrawcookie($name, $value, $expire, $path, $domain, $secure, $httponly){}

/**
 * Set the type of variable {@link var} to {@link type}.
 * 
 * @param mixed $var The variable being converted.
 * @param string $type Possibles values of {@link type} are: "boolean"
 *   (or, since PHP 4.2.0, "bool") "integer" (or, since PHP 4.2.0, "int")
 *   "float" (only possible since PHP 4.2.0, for older versions use the
 *   deprecated variant "double") "string" "array" "object" "null" (since
 *   PHP 4.2.0)
 * @return bool
 * @since PHP 4, PHP 5
 **/
function settype(&$var, $type){}

/**
 * Sets a user function ({@link error_handler}) to handle errors in a
 * script.
 * 
 * This function can be used for defining your own way of handling errors
 * during runtime, for example in applications in which you need to do
 * cleanup of data/files when a critical error happens, or when you need
 * to trigger an error under certain conditions (using {@link
 * trigger_error}).
 * 
 * It is important to remember that the standard PHP error handler is
 * completely bypassed for the error types specified by {@link
 * error_types} unless the callback function returns . {@link
 * error_reporting} settings will have no effect and your error handler
 * will be called regardless - however you are still able to read the
 * current value of error_reporting and act appropriately. Of particular
 * note is that this value will be 0 if the statement that caused the
 * error was prepended by the @ error-control operator.
 * 
 * Also note that it is your responsibility to {@link die} if necessary.
 * If the error-handler function returns, script execution will continue
 * with the next statement after the one that caused an error.
 * 
 * The following error types cannot be handled with a user defined
 * function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING,
 * E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the
 * file where {@link set_error_handler} is called.
 * 
 * If errors occur before the script is executed (e.g. on file uploads)
 * the custom error handler cannot be called since it is not registered
 * at that time.
 * 
 * @param callback $error_handler The user function needs to accept two
 *   parameters: the error code, and a string describing the error. Then
 *   there are three optional parameters that may be supplied: the
 *   filename in which the error occurred, the line number in which the
 *   error occurred, and the context in which the error occurred (an
 *   array that points to the active symbol table at the point the error
 *   occurred). The function can be shown as:
 *   
 *   handler int{@link errno} string{@link errstr} string{@link errfile}
 *   int{@link errline} array{@link errcontext} {@link errno} The first
 *   parameter, {@link errno}, contains the level of the error raised, as
 *   an integer. {@link errstr} The second parameter, {@link errstr},
 *   contains the error message, as a string. {@link errfile} The third
 *   parameter is optional, {@link errfile}, which contains the filename
 *   that the error was raised in, as a string. {@link errline} The
 *   fourth parameter is optional, {@link errline}, which contains the
 *   line number the error was raised at, as an integer. {@link
 *   errcontext} The fifth parameter is optional, {@link errcontext},
 *   which is an array that points to the active symbol table at the
 *   point the error occurred. In other words, {@link errcontext} will
 *   contain an array of every variable that existed in the scope the
 *   error was triggered in. User error handler must not modify error
 *   context. If the function returns then the normal error handler
 *   continues.
 * @param int $error_types
 * @return mixed
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function set_error_handler($error_handler, $error_types){}

/**
 * Sets the default exception handler if an exception is not caught
 * within a try/catch block. Execution will stop after the {@link
 * exception_handler} is called.
 * 
 * @param callback $exception_handler Name of the function to be called
 *   when an uncaught exception occurs. This function must be defined
 *   before calling {@link set_exception_handler}. This handler function
 *   needs to accept one parameter, which will be the exception object
 *   that was thrown.
 * @return callback
 * @since PHP 5
 **/
function set_exception_handler($exception_handler){}

/**
 * Sets the include_path configuration option for the duration of the
 * script.
 * 
 * @param string $new_include_path The new value for the include_path
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function set_include_path($new_include_path){}

/**
 * Set the current active configuration setting of magic_quotes_runtime.
 * 
 * @param bool $new_setting for off, for on.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function set_magic_quotes_runtime($new_setting){}

/**
 * Sets blocking or non-blocking mode on a {@link stream}.
 * 
 * This function works for any stream that supports non-blocking mode
 * (currently, regular files and socket streams).
 * 
 * @param resource $stream The stream.
 * @param int $mode If {@link mode} is 0, the given stream will be
 *   switched to non-blocking mode, and if 1, it will be switched to
 *   blocking mode. This affects calls like {@link fgets} and {@link
 *   fread} that read from the stream. In non-blocking mode an {@link
 *   fgets} call will always return right away while in blocking mode it
 *   will wait for data to become available on the stream.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function set_socket_blocking($stream, $mode){}

/**
 * Set the number of seconds a script is allowed to run. If this is
 * reached, the script returns a fatal error. The default limit is 30
 * seconds or, if it exists, the max_execution_time value defined in the
 * .
 * 
 * When called, {@link set_time_limit} restarts the timeout counter from
 * zero. In other words, if the timeout is the default 30 seconds, and 25
 * seconds into script execution a call such as set_time_limit(20) is
 * made, the script will run for a total of 45 seconds before timing out.
 * 
 * @param int $seconds The maximum execution time, in seconds. If set
 *   to zero, no time limit is imposed.
 * @return void
 * @since PHP 4, PHP 5
 **/
function set_time_limit($seconds){}

/**
 * @param string $str The input string.
 * @param bool $raw_output If the optional {@link raw_output} is set to
 *   , then the sha1 digest is instead returned in raw binary format with
 *   a length of 20, otherwise the returned value is a 40-character
 *   hexadecimal number.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function sha1($str, $raw_output){}

/**
 * @param string $filename The filename of the file to hash.
 * @param bool $raw_output When , returns the digest in raw binary
 *   format with a length of 20.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function sha1_file($filename, $raw_output){}

/**
 * This function is identical to the backtick operator.
 * 
 * @param string $cmd The command that will be executed.
 * @return string
 * @since PHP 4, PHP 5
 **/
function shell_exec($cmd){}

/**
 * {@link shmop_close} is used to close a shared memory block.
 * 
 * @param int $shmid The shared memory block identifier created by
 *   {@link shmop_open}
 * @return void
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function shmop_close($shmid){}

/**
 * {@link shmop_delete} is used to delete a shared memory block.
 * 
 * @param int $shmid The shared memory block identifier created by
 *   {@link shmop_open}
 * @return bool
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function shmop_delete($shmid){}

/**
 * {@link shmop_open} can create or open a shared memory block.
 * 
 * @param int $key System's id for the shared memory block. Can be
 *   passed as a decimal or hex.
 * @param string $flags The flags that you can use: "a" for access
 *   (sets SHM_RDONLY for shmat) use this flag when you need to open an
 *   existing shared memory segment for read only "c" for create (sets
 *   IPC_CREATE) use this flag when you need to create a new shared
 *   memory segment or if a segment with the same key exists, try to open
 *   it for read and write "w" for read & write access use this flag when
 *   you need to read and write to a shared memory segment, use this flag
 *   in most cases. "n" create a new memory segment (sets
 *   IPC_CREATE|IPC_EXCL) use this flag when you want to create a new
 *   shared memory segment but if one already exists with the same flag,
 *   fail. This is useful for security purposes, using this you can
 *   prevent race condition exploits.
 * @param int $mode The permissions that you wish to assign to your
 *   memory segment, those are the same as permission for a file.
 *   Permissions need to be passed in octal form, like for example 0644
 * @param int $size The size of the shared memory block you wish to
 *   create in bytes
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function shmop_open($key, $flags, $mode, $size){}

/**
 * {@link shmop_read} will read a string from shared memory block.
 * 
 * @param int $shmid The shared memory block identifier created by
 *   {@link shmop_open}
 * @param int $start Offset from which to start reading
 * @param int $count The number of bytes to read
 * @return string
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function shmop_read($shmid, $start, $count){}

/**
 * {@link shmop_size} is used to get the size, in bytes of the shared
 * memory block.
 * 
 * @param int $shmid The shared memory block identifier created by
 *   {@link shmop_open}
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function shmop_size($shmid){}

/**
 * {@link shmop_write} will write a string into shared memory block.
 * 
 * @param int $shmid The shared memory block identifier created by
 *   {@link shmop_open}
 * @param string $data A string to write into shared memory block
 * @param int $offset Specifies where to start writing data inside the
 *   shared memory segment.
 * @return int
 * @since PHP 4 >= 4.0.4, PHP 5
 **/
function shmop_write($shmid, $data, $offset){}

/**
 * {@link shm_attach} returns an id that can be used to access the System
 * V shared memory with the given {@link key}, the first call creates the
 * shared memory segment with {@link memsize} and the optional perm-bits
 * {@link perm}.
 * 
 * A second call to {@link shm_attach} for the same {@link key} will
 * return a different shared memory identifier, but both identifiers
 * access the same underlying shared memory. {@link memsize} and {@link
 * perm} will be ignored.
 * 
 * @param int $key A numeric shared memory segment ID
 * @param int $memsize The memory size. If not provided, default to the
 *   sysvshm.init_mem in the , otherwise 10000 bytes.
 * @param int $perm The optional permission bits. Default to 0666.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function shm_attach($key, $memsize, $perm){}

/**
 * {@link shm_detach} disconnects from the shared memory given by the
 * {@link shm_identifier} created by {@link shm_attach}. Remember, that
 * shared memory still exist in the Unix system and the data is still
 * present.
 * 
 * @param resource $shm_identifier A shared memory resource handle as
 *   returned by {@link shm_attach}
 * @return bool
 * @since PHP 4, PHP 5
 **/
function shm_detach($shm_identifier){}

/**
 * {@link shm_get_var} returns the variable with a given {@link
 * variable_key}, in the given shared memory segment. The variable is
 * still present in the shared memory.
 * 
 * @param resource $shm_identifier Shared memory segment, obtained from
 *   {@link shm_attach}.
 * @param int $variable_key The variable key.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function shm_get_var($shm_identifier, $variable_key){}

/**
 * Checks whether a specific key exists inside a shared memory segment.
 * 
 * @param resource $shm_identifier Shared memory segment, obtained from
 *   {@link shm_attach}.
 * @param int $variable_key The variable key.
 * @return bool
 * @since PHP 5 >= 5.3.0
 **/
function shm_has_var($shm_identifier, $variable_key){}

/**
 * {@link shm_put_var} inserts or updates the {@link variable} with the
 * given {@link variable_key}.
 * 
 * Warnings (E_WARNING level) will be issued if {@link shm_identifier} is
 * not a valid SysV shared memory index or if there was not enough shared
 * memory remaining to complete your request.
 * 
 * @param resource $shm_identifier A shared memory resource handle as
 *   returned by {@link shm_attach}
 * @param int $variable_key The variable key.
 * @param mixed $variable The variable. All variable-types are
 *   supported.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function shm_put_var($shm_identifier, $variable_key, $variable){}

/**
 * {@link shm_remove} removes the shared memory {@link shm_identifier}.
 * All data will be destroyed.
 * 
 * @param resource $shm_identifier The shared memory identifier as
 *   returned by {@link shm_attach}
 * @return bool
 * @since PHP 4, PHP 5
 **/
function shm_remove($shm_identifier){}

/**
 * Removes a variable with a given {@link variable_key} and frees the
 * occupied memory.
 * 
 * @param resource $shm_identifier The shared memory identifier as
 *   returned by {@link shm_attach}
 * @param int $variable_key The variable key.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function shm_remove_var($shm_identifier, $variable_key){}

/**
 * Prints out or returns a syntax highlighted version of the code
 * contained in {@link filename} using the colors defined in the built-in
 * syntax highlighter for PHP.
 * 
 * Many servers are configured to automatically highlight files with a
 * phps extension. For example, example.phps when viewed will show the
 * syntax highlighted source of the file. To enable this, add this line
 * to the :
 * 
 * @param string $filename Path to the PHP file to be highlighted.
 * @param bool $return Set this parameter to to make this function
 *   return the highlighted code.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function show_source($filename, $return){}

/**
 * This function shuffles (randomizes the order of the elements in) an
 * array.
 * 
 * @param array $array The array.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function shuffle(&$array){}

/**
 * This calculates the similarity between two strings as described in
 * Oliver [1993]. Note that this implementation does not use a stack as
 * in Oliver's pseudo code, but recursive calls which may or may not
 * speed up the whole process. Note also that the complexity of this
 * algorithm is O(N**3) where N is the length of the longest string.
 * 
 * @param string $first The first string.
 * @param string $second The second string.
 * @param float $percent By passing a reference as third argument,
 *   {@link similar_text} will calculate the similarity in percent for
 *   you.
 * @return int
 * @since PHP 4, PHP 5
 **/
function similar_text($first, $second, &$percent){}

/**
 * This function takes a node of a DOM document and makes it into a
 * SimpleXML node. This new object can then be used as a native SimpleXML
 * element.
 * 
 * @param DOMNode $node A DOM Element node
 * @param string $class_name You may use this optional parameter so
 *   that {@link simplexml_import_dom} will return an object of the
 *   specified class. That class should extend the SimpleXMLElement
 *   class.
 * @return SimpleXMLElement
 * @since PHP 5
 **/
function simplexml_import_dom($node, $class_name){}

/**
 * Convert the well-formed XML document in the given file to an object.
 * 
 * @param string $filename Path to the XML file
 * @param string $class_name You may use this optional parameter so
 *   that {@link simplexml_load_file} will return an object of the
 *   specified class. That class should extend the SimpleXMLElement
 *   class.
 * @param int $options Since PHP 5.1.0 and Libxml 2.6.0, you may also
 *   use the {@link options} parameter to specify additional Libxml
 *   parameters.
 * @param string $ns
 * @param bool $is_prefix
 * @return object
 * @since PHP 5
 **/
function simplexml_load_file($filename, $class_name, $options, $ns, $is_prefix){}

/**
 * Takes a well-formed XML string and returns it as an object.
 * 
 * @param string $data A well-formed XML string
 * @param string $class_name You may use this optional parameter so
 *   that {@link simplexml_load_string} will return an object of the
 *   specified class. That class should extend the SimpleXMLElement
 *   class.
 * @param int $options Since PHP 5.1.0 and Libxml 2.6.0, you may also
 *   use the {@link options} parameter to specify additional Libxml
 *   parameters.
 * @param string $ns
 * @param bool $is_prefix
 * @return object
 * @since PHP 5
 **/
function simplexml_load_string($data, $class_name, $options, $ns, $is_prefix){}

/**
 * {@link sin} returns the sine of the {@link arg} parameter. The {@link
 * arg} parameter is in radians.
 * 
 * @param float $arg A value in radians
 * @return float
 * @since PHP 4, PHP 5
 **/
function sin($arg){}

/**
 * Returns the hyperbolic sine of {@link arg}, defined as (exp(arg) -
 * exp(-arg))/2.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function sinh($arg){}

/**
 * Counts all elements in an array, or properties in an object.
 * 
 * For objects, if you have SPL installed, you can hook into {@link
 * sizeof} by implementing interface Countable. The interface has exactly
 * one method, {@link sizeof}, which returns the return value for the
 * {@link sizeof} function.
 * 
 * Please see the Array section of the manual for a detailed explanation
 * of how arrays are implemented and used in PHP.
 * 
 * @param mixed $var The array.
 * @param int $mode If the optional {@link mode} parameter is set to
 *   COUNT_RECURSIVE (or 1), {@link count} will recursively count the
 *   array. This is particularly useful for counting all the elements of
 *   a multidimensional array. {@link count} does not detect infinite
 *   recursion.
 * @return int
 * @since PHP 4, PHP 5
 **/
function sizeof($var, $mode){}

/**
 * @param int $seconds Halt time in seconds.
 * @return int
 * @since PHP 4, PHP 5
 **/
function sleep($seconds){}

/**
 * The {@link snmpget} function is used to read the value of an SNMP
 * object specified by the {@link object_id}.
 * 
 * @param string $hostname The SNMP agent.
 * @param string $community The read community.
 * @param string $object_id The SNMP object.
 * @param int $timeout The number of microseconds until the first
 *   timeout.
 * @param int $retries
 * @return string
 * @since PHP 4, PHP 5
 **/
function snmpget($hostname, $community, $object_id, $timeout, $retries){}

/**
 * @param string $host
 * @param string $community
 * @param string $object_id
 * @param int $timeout
 * @param int $retries
 * @return string
 * @since PHP 5
 **/
function snmpgetnext($host, $community, $object_id, $timeout, $retries){}

/**
 * @param string $host
 * @param string $community
 * @param string $object_id
 * @param int $timeout
 * @param int $retries
 * @return array
 * @since PHP 4, PHP 5
 **/
function snmprealwalk($host, $community, $object_id, $timeout, $retries){}

/**
 * {@link snmpset} is used to set the value of an SNMP object specified
 * by the {@link object_id}.
 * 
 * @param string $hostname The SNMP agent.
 * @param string $community The write community.
 * @param string $object_id The SNMP object.
 * @param string $type
 * @param mixed $value
 * @param int $timeout The number of microseconds until the first
 *   timeout.
 * @param int $retries
 * @return bool
 * @since PHP 4, PHP 5
 **/
function snmpset($hostname, $community, $object_id, $type, $value, $timeout, $retries){}

/**
 * {@link snmpwalk} function is used to read all the values from an SNMP
 * agent specified by the {@link hostname}.
 * 
 * @param string $hostname The SNMP agent.
 * @param string $community The read community.
 * @param string $object_id If , {@link object_id} is taken as the root
 *   of the SNMP objects tree and all objects under that tree are
 *   returned as an array. If {@link object_id} is specified, all the
 *   SNMP objects below that {@link object_id} are returned.
 * @param int $timeout The number of microseconds until the first
 *   timeout.
 * @param int $retries
 * @return array
 * @since PHP 4, PHP 5
 **/
function snmpwalk($hostname, $community, $object_id, $timeout, $retries){}

/**
 * {@link snmpwalkoid} function is used to read all object ids and their
 * respective values from an SNMP agent specified by {@link hostname}.
 * 
 * The existence of {@link snmpwalkoid} and {@link snmpwalk} has
 * historical reasons. Both functions are provided for backward
 * compatibility. Use {@link snmprealwalk} instead.
 * 
 * @param string $hostname The SNMP agent.
 * @param string $community The read community.
 * @param string $object_id If , {@link object_id} is taken as the root
 *   of the SNMP objects tree and all objects under that tree are
 *   returned as an array. If {@link object_id} is specified, all the
 *   SNMP objects below that {@link object_id} are returned.
 * @param int $timeout The number of microseconds until the first
 *   timeout.
 * @param int $retries
 * @return array
 * @since PHP 4, PHP 5
 **/
function snmpwalkoid($hostname, $community, $object_id, $timeout, $retries){}

/**
 * Returns the current value stored in the UCD Library for quick_print.
 * quick_print is off by default.
 * 
 * @return bool
 * @since PHP 4, PHP 5
 **/
function snmp_get_quick_print(){}

/**
 * @return int
 * @since PHP 4 >= 4.3.3, PHP 5
 **/
function snmp_get_valueretrieval(){}

/**
 * @param string $filename
 * @return bool
 * @since PHP 5
 **/
function snmp_read_mib($filename){}

/**
 * @param int $enum_print
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function snmp_set_enum_print($enum_print){}

/**
 * @param int $oid_numeric_print
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function snmp_set_oid_numeric_print($oid_numeric_print){}

/**
 * {@link snmp_set_oid_output_format} sets the output format to be full
 * or numeric.
 * 
 * @param int $oid_format Set it to SNMP_OID_OUTPUT_FULL if you want a
 *   full output, SNMP_OID_OUTPUT_NUMERIC otherwise.
 * @return void
 * @since PHP 5 >= 5.2.0
 **/
function snmp_set_oid_output_format($oid_format){}

/**
 * Sets the value of {@link quick_print} within the UCD SNMP library.
 * When this is set (1), the SNMP library will return 'quick printed'
 * values. This means that just the value will be printed. When {@link
 * quick_print} is not enabled (default) the UCD SNMP library prints
 * extra information including the type of the value (i.e. IpAddress or
 * OID). Additionally, if quick_print is not enabled, the library prints
 * additional hex values for all strings of three characters or less.
 * 
 * By default the UCD SNMP library returns verbose values, quick_print is
 * used to return only the value.
 * 
 * Currently strings are still returned with extra quotes, this will be
 * corrected in a later release.
 * 
 * @param bool $quick_print
 * @return void
 * @since PHP 4, PHP 5
 **/
function snmp_set_quick_print($quick_print){}

/**
 * @param int $method
 * @return void
 * @since PHP 4 >= 4.3.3, PHP 5
 **/
function snmp_set_valueretrieval($method){}

/**
 * After the socket {@link socket} has been created using {@link
 * socket_create}, bound to a name with {@link socket_bind}, and told to
 * listen for connections with {@link socket_listen}, this function will
 * accept incoming connections on that socket. Once a successful
 * connection is made, a new socket resource is returned, which may be
 * used for communication. If there are multiple connections queued on
 * the socket, the first will be used. If there are no pending
 * connections, {@link socket_accept} will block until a connection
 * becomes present. If {@link socket} has been made non-blocking using
 * {@link socket_set_blocking} or {@link socket_set_nonblock}, will be
 * returned.
 * 
 * The socket resource returned by {@link socket_accept} may not be used
 * to accept new connections. The original listening socket {@link
 * socket}, however, remains open and may be reused.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create}.
 * @return resource
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_accept($socket){}

/**
 * Binds the name given in {@link address} to the socket described by
 * {@link socket}. This has to be done before a connection is be
 * established using {@link socket_connect} or {@link socket_listen}.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create}.
 * @param string $address If the socket is of the AF_INET family, the
 *   {@link address} is an IP in dotted-quad notation (e.g. 127.0.0.1).
 *   If the socket is of the AF_UNIX family, the {@link address} is the
 *   path of a Unix-domain socket (e.g. /tmp/my.sock).
 * @param int $port The {@link port} parameter is only used when
 *   connecting to an AF_INET socket, and designates the port on the
 *   remote host to which a connection should be made.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_bind($socket, $address, $port){}

/**
 * This function clears the error code on the given socket or the global
 * last socket error if no socket is specified.
 * 
 * This function allows explicitly resetting the error code value either
 * of a socket or of the extension global last error code. This may be
 * useful to detect within a part of the application if an error occurred
 * or not.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create}.
 * @return void
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function socket_clear_error($socket){}

/**
 * {@link socket_close} closes the socket resource given by {@link
 * socket}. This function is specific to sockets and cannot be used on
 * any other type of resources.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @return void
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_close($socket){}

/**
 * Initiate a connection to {@link address} using the socket resource
 * {@link socket}, which must be a valid socket resource created with
 * {@link socket_create}.
 * 
 * @param resource $socket
 * @param string $address The {@link address} parameter is either an
 *   IPv4 address in dotted-quad notation (e.g. 127.0.0.1) if {@link
 *   socket} is AF_INET, a valid IPv6 address (e.g. ::1) if IPv6 support
 *   is enabled and {@link socket} is AF_INET6 or the pathname of a Unix
 *   domain socket, if the socket family is AF_UNIX.
 * @param int $port The {@link port} parameter is only used and is
 *   mandatory when connecting to an AF_INET or an AF_INET6 socket, and
 *   designates the port on the remote host to which a connection should
 *   be made.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_connect($socket, $address, $port){}

/**
 * Creates and returns a socket resource, also referred to as an endpoint
 * of communication. A typical network connection is made up of 2
 * sockets, one performing the role of the client, and another performing
 * the role of the server.
 * 
 * @param int $domain The {@link domain} parameter specifies the
 *   protocol family to be used by the socket.
 * @param int $type The {@link type} parameter selects the type of
 *   communication to be used by the socket.
 * @param int $protocol The {@link protocol} parameter sets the
 *   specific protocol within the specified {@link domain} to be used
 *   when communicating on the returned socket. The proper value can be
 *   retrieved by name by using {@link getprotobyname}. If the desired
 *   protocol is TCP, or UDP the corresponding constants SOL_TCP, and
 *   SOL_UDP can also be used.
 * @return resource
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_create($domain, $type, $protocol){}

/**
 * {@link socket_create_listen} creates a new socket resource of type
 * AF_INET listening on all local interfaces on the given port waiting
 * for new connections.
 * 
 * This function is meant to ease the task of creating a new socket which
 * only listens to accept new connections.
 * 
 * @param int $port The port on which to listen on all interfaces.
 * @param int $backlog The {@link backlog} parameter defines the
 *   maximum length the queue of pending connections may grow to.
 *   SOMAXCONN may be passed as {@link backlog} parameter, see {@link
 *   socket_listen} for more information.
 * @return resource
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_create_listen($port, $backlog){}

/**
 * {@link socket_create_pair} creates two connected and indistinguishable
 * sockets, and stores them in {@link fd}. This function is commonly used
 * in IPC (InterProcess Communication).
 * 
 * @param int $domain The {@link domain} parameter specifies the
 *   protocol family to be used by the socket. See {@link socket_create}
 *   for the full list.
 * @param int $type The {@link type} parameter selects the type of
 *   communication to be used by the socket. See {@link socket_create}
 *   for the full list.
 * @param int $protocol The {@link protocol} parameter sets the
 *   specific protocol within the specified {@link domain} to be used
 *   when communicating on the returned socket. The proper value can be
 *   retrieved by name by using {@link getprotobyname}. If the desired
 *   protocol is TCP, or UDP the corresponding constants SOL_TCP, and
 *   SOL_UDP can also be used. See {@link socket_create} for the full
 *   list of supported protocols.
 * @param array $fd Reference to an array in which the two socket
 *   resources will be inserted.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_create_pair($domain, $type, $protocol, &$fd){}

/**
 * Queries the remote side of the given socket which may either result in
 * host/port or in a Unix filesystem path, dependent on its type.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @param string $address If the given socket is of type AF_INET or
 *   AF_INET6, {@link socket_getpeername} will return the peers (remote)
 *   IP address in appropriate notation (e.g. 127.0.0.1 or fe80::1) in
 *   the {@link address} parameter and, if the optional {@link port}
 *   parameter is present, also the associated port. If the given socket
 *   is of type AF_UNIX, {@link socket_getpeername} will return the Unix
 *   filesystem path (e.g. /var/run/daemon.sock) in the {@link address}
 *   parameter.
 * @param int $port If given, this will hold the port associated to
 *   {@link address}.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_getpeername($socket, &$address, &$port){}

/**
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @param string $addr If the given socket is of type AF_INET or
 *   AF_INET6, {@link socket_getsockname} will return the local IP
 *   address in appropriate notation (e.g. 127.0.0.1 or fe80::1) in the
 *   {@link address} parameter and, if the optional {@link port}
 *   parameter is present, also the associated port. If the given socket
 *   is of type AF_UNIX, {@link socket_getsockname} will return the Unix
 *   filesystem path (e.g. /var/run/daemon.sock) in the {@link address}
 *   parameter.
 * @param int $port If provided, this will hold the associated port.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_getsockname($socket, &$addr, &$port){}

/**
 * The {@link socket_get_option} function retrieves the value for the
 * option specified by the {@link optname} parameter for the specified
 * {@link socket}.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @param int $level The {@link level} parameter specifies the protocol
 *   level at which the option resides. For example, to retrieve options
 *   at the socket level, a {@link level} parameter of SOL_SOCKET would
 *   be used. Other levels, such as TCP, can be used by specifying the
 *   protocol number of that level. Protocol numbers can be found by
 *   using the {@link getprotobyname} function.
 * @param int $optname
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function socket_get_option($socket, $level, $optname){}

/**
 * If a socket resource is passed to this function, the last error which
 * occurred on this particular socket is returned. If the socket resource
 * is omitted, the error code of the last failed socket function is
 * returned. The latter is particularly helpful for functions like {@link
 * socket_create} which don't return a socket on failure and {@link
 * socket_select} which can fail for reasons not directly tied to a
 * particular socket. The error code is suitable to be fed to {@link
 * socket_strerror} which returns a string describing the given error
 * code.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create}.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_last_error($socket){}

/**
 * After the socket {@link socket} has been created using {@link
 * socket_create} and bound to a name with {@link socket_bind}, it may be
 * told to listen for incoming connections on {@link socket}.
 * 
 * {@link socket_listen} is applicable only to sockets of type
 * SOCK_STREAM or SOCK_SEQPACKET.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create}.
 * @param int $backlog A maximum of {@link backlog} incoming
 *   connections will be queued for processing. If a connection request
 *   arrives with the queue full the client may receive an error with an
 *   indication of ECONNREFUSED, or, if the underlying protocol supports
 *   retransmission, the request may be ignored so that retries may
 *   succeed.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_listen($socket, $backlog){}

/**
 * The function {@link socket_read} reads from the socket resource {@link
 * socket} created by the {@link socket_create} or {@link socket_accept}
 * functions.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @param int $length The maximum number of bytes read is specified by
 *   the {@link length} parameter. Otherwise you can use \r, \n, or \0 to
 *   end reading (depending on the {@link type} parameter, see below).
 * @param int $type Optional {@link type} parameter is a named
 *   constant: PHP_BINARY_READ (Default) - use the system recv()
 *   function. Safe for reading binary data. PHP_NORMAL_READ - reading
 *   stops at \n or \r.
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_read($socket, $length, $type){}

/**
 * The {@link socket_recv} function receives {@link len} bytes of data in
 * {@link buf} from {@link socket}. {@link socket_recv} can be used to
 * gather data from connected sockets. Additionally, one or more flags
 * can be specified to modify the behaviour of the function.
 * 
 * {@link buf} is passed by reference, so it must be specified as a
 * variable in the argument list. Data read from {@link socket} by {@link
 * socket_recv} will be returned in {@link buf}.
 * 
 * @param resource $socket The {@link socket} must be a socket resource
 *   previously created by socket_create().
 * @param string $buf The data received will be fetched to the variable
 *   specified with {@link buf}. If an error occurs, if the connection is
 *   reset, or if no data is available, {@link buf} will be set to .
 * @param int $len Up to {@link len} bytes will be fetched from remote
 *   host.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following flags, joined with the binary OR (|) operator.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_recv($socket, &$buf, $len, $flags){}

/**
 * The {@link socket_recvfrom} function receives {@link len} bytes of
 * data in {@link buf} from {@link name} on port {@link port} (if the
 * socket is not of type AF_UNIX) using {@link socket}. {@link
 * socket_recvfrom} can be used to gather data from both connected and
 * unconnected sockets. Additionally, one or more flags can be specified
 * to modify the behaviour of the function.
 * 
 * The {@link name} and {@link port} must be passed by reference. If the
 * socket is not connection-oriented, {@link name} will be set to the
 * internet protocol address of the remote host or the path to the UNIX
 * socket. If the socket is connection-oriented, {@link name} is .
 * Additionally, the {@link port} will contain the port of the remote
 * host in the case of an unconnected AF_INET or AF_INET6 socket.
 * 
 * @param resource $socket The {@link socket} must be a socket resource
 *   previously created by socket_create().
 * @param string $buf The data received will be fetched to the variable
 *   specified with {@link buf}.
 * @param int $len Up to {@link len} bytes will be fetched from remote
 *   host.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following flags, joined with the binary OR (|) operator.
 * @param string $name If the socket is of the type AF_UNIX type,
 *   {@link name} is the path to the file. Else, for unconnected sockets,
 *   {@link name} is the IP address of, the remote host, or if the socket
 *   is connection-oriented.
 * @param int $port This argument only applies to AF_INET and AF_INET6
 *   sockets, and specifies the remote port from which the data is
 *   received. If the socket is connection-oriented, {@link port} will be
 *   .
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_recvfrom($socket, &$buf, $len, $flags, &$name, &$port){}

/**
 * {@link socket_select} accepts arrays of sockets and waits for them to
 * change status. Those coming with BSD sockets background will recognize
 * that those socket resource arrays are in fact the so-called file
 * descriptor sets. Three independent arrays of socket resources are
 * watched.
 * 
 * @param array $read The sockets listed in the {@link read} array will
 *   be watched to see if characters become available for reading (more
 *   precisely, to see if a read will not block - in particular, a socket
 *   resource is also ready on end-of-file, in which case a {@link
 *   socket_read} will return a zero length string).
 * @param array $write The sockets listed in the {@link write} array
 *   will be watched to see if a write will not block.
 * @param array $except The sockets listed in the {@link except} array
 *   will be watched for exceptions.
 * @param int $tv_sec The {@link tv_sec} and {@link tv_usec} together
 *   form the timeout parameter. The timeout is an upper bound on the
 *   amount of time elapsed before {@link socket_select} return. {@link
 *   tv_sec} may be zero , causing {@link socket_select} to return
 *   immediately. This is useful for polling. If {@link tv_sec} is (no
 *   timeout), {@link socket_select} can block indefinitely.
 * @param int $tv_usec
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_select(&$read, &$write, &$except, $tv_sec, $tv_usec){}

/**
 * The function {@link socket_send} sends {@link len} bytes to the socket
 * {@link socket} from {@link buf}.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @param string $buf A buffer containing the data that will be sent to
 *   the remote host.
 * @param int $len The number of bytes that will be sent to the remote
 *   host from {@link buf}.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following flags, joined with the binary OR (|) operator.
 *   Possible values for {@link flags} MSG_OOB Send OOB (out-of-band)
 *   data. MSG_EOR Indicate a record mark. The sent data completes the
 *   record. MSG_EOF Close the sender side of the socket and include an
 *   appropriate notification of this at the end of the sent data. The
 *   sent data completes the transaction. MSG_DONTROUTE Bypass routing,
 *   use direct interface.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_send($socket, $buf, $len, $flags){}

/**
 * The function {@link socket_sendto} sends {@link len} bytes from {@link
 * buf} through the socket {@link socket} to the {@link port} at the
 * address {@link addr}.
 * 
 * @param resource $socket A valid socket resource created using {@link
 *   socket_create}.
 * @param string $buf The sent data will be taken from buffer {@link
 *   buf}.
 * @param int $len {@link len} bytes from {@link buf} will be sent.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following flags, joined with the binary OR (|) operator.
 *   Possible values for {@link flags} MSG_OOB Send OOB (out-of-band)
 *   data. MSG_EOR Indicate a record mark. The sent data completes the
 *   record. MSG_EOF Close the sender side of the socket and include an
 *   appropriate notification of this at the end of the sent data. The
 *   sent data completes the transaction. MSG_DONTROUTE Bypass routing,
 *   use direct interface.
 * @param string $addr IP address of the remote host.
 * @param int $port {@link port} is the remote port number at which the
 *   data will be sent.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_sendto($socket, $buf, $len, $flags, $addr, $port){}

/**
 * The {@link socket_set_block} function removes the O_NONBLOCK flag on
 * the socket specified by the {@link socket} parameter.
 * 
 * When an operation (e.g. receive, send, connect, accept, ...) is
 * performed on a blocking socket, the script will pause its execution
 * until it receives a signal or it can perform the operation.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function socket_set_block($socket){}

/**
 * The {@link socket_set_nonblock} function sets the O_NONBLOCK flag on
 * the socket specified by the {@link socket} parameter.
 * 
 * When an operation (e.g. receive, send, connect, accept, ...) is
 * performed on a non-blocking socket, the script not pause its execution
 * until it receives a signal or it can perform the operation. Rather, if
 * the operation would result in a block, the called function will fail.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_set_nonblock($socket){}

/**
 * The {@link socket_set_option} function sets the option specified by
 * the {@link optname} parameter, at the specified protocol {@link
 * level}, to the value pointed to by the {@link optval} parameter for
 * the {@link socket}.
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create} or {@link socket_accept}.
 * @param int $level The {@link level} parameter specifies the protocol
 *   level at which the option resides. For example, to retrieve options
 *   at the socket level, a {@link level} parameter of SOL_SOCKET would
 *   be used. Other levels, such as TCP, can be used by specifying the
 *   protocol number of that level. Protocol numbers can be found by
 *   using the {@link getprotobyname} function.
 * @param int $optname The available socket options are the same as
 *   those for the {@link socket_get_option} function.
 * @param mixed $optval The option value.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function socket_set_option($socket, $level, $optname, $optval){}

/**
 * The {@link socket_shutdown} function allows you to stop incoming,
 * outgoing or all data (the default) from being sent through the {@link
 * socket}
 * 
 * @param resource $socket A valid socket resource created with {@link
 *   socket_create}.
 * @param int $how The value of {@link how} can be one of the
 *   following: possible values for {@link how} 0 Shutdown socket reading
 *   1 Shutdown socket writing 2 Shutdown socket reading and writing
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_shutdown($socket, $how){}

/**
 * {@link socket_strerror} takes as its {@link errno} parameter a socket
 * error code as returned by {@link socket_last_error} and returns the
 * corresponding explanatory text.
 * 
 * @param int $errno A valid socket error number, likely produced by
 *   {@link socket_last_error}.
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_strerror($errno){}

/**
 * The function {@link socket_write} writes to the {@link socket} from
 * the given {@link buffer}.
 * 
 * @param resource $socket
 * @param string $buffer The buffer to be written.
 * @param int $length The optional parameter {@link length} can specify
 *   an alternate length of bytes written to the socket. If this length
 *   is greater then the buffer length, it is silently truncated to the
 *   length of the buffer.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function socket_write($socket, $buffer, $length){}

/**
 * This function returns the current version of the extension as a
 * string.
 * 
 * @return string
 * @since PECL solr >= 0.9.1
 **/
function solr_get_version(){}

/**
 * This function sorts an array. Elements will be arranged from lowest to
 * highest when this function has completed.
 * 
 * @param array $array The input array.
 * @param int $sort_flags The optional second parameter {@link
 *   sort_flags} may be used to modify the sorting behavior using these
 *   values: Sorting type flags: SORT_REGULAR - compare items normally
 *   (don't change types) SORT_NUMERIC - compare items numerically
 *   SORT_STRING - compare items as strings SORT_LOCALE_STRING - compare
 *   items as strings, based on the current locale. Added in PHP 4.4.0
 *   and 5.0.2, it uses the system locale, which can be changed using
 *   {@link setlocale}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sort(&$array, $sort_flags){}

/**
 * Calculates the soundex key of {@link str}.
 * 
 * Soundex keys have the property that words pronounced similarly produce
 * the same soundex key, and can thus be used to simplify searches in
 * databases where you know the pronunciation but not the spelling. This
 * soundex function returns a string 4 characters long, starting with a
 * letter.
 * 
 * This particular soundex function is one described by Donald Knuth in
 * "The Art Of Computer Programming, vol. 3: Sorting And Searching",
 * Addison-Wesley (1973), pp. 391-392.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function soundex($str){}

/**
 * Splits a {@link string} into array by regular expression.
 * 
 * @param string $pattern Case sensitive regular expression. If you
 *   want to split on any of the characters which are considered special
 *   by regular expressions, you'll need to escape them first. If you
 *   think {@link split} (or any other regex function, for that matter)
 *   is doing something weird, please read the file regex.7, included in
 *   the regex/ subdirectory of the PHP distribution. It's in manpage
 *   format, so you'll want to do something along the lines of man
 *   /usr/local/src/regex/regex.7 in order to read it.
 * @param string $string The input string.
 * @param int $limit If {@link limit} is set, the returned array will
 *   contain a maximum of {@link limit} elements with the last element
 *   containing the whole rest of {@link string}.
 * @return array
 * @since PHP 4, PHP 5
 **/
function split($pattern, $string, $limit){}

/**
 * Splits a {@link string} into array by regular expression.
 * 
 * This function is identical to {@link split} except that this ignores
 * case distinction when matching alphabetic characters.
 * 
 * @param string $pattern Case insensitive regular expression. If you
 *   want to split on any of the characters which are considered special
 *   by regular expressions, you'll need to escape them first. If you
 *   think {@link spliti} (or any other regex function, for that matter)
 *   is doing something weird, please read the file regex.7, included in
 *   the regex/ subdirectory of the PHP distribution. It's in manpage
 *   format, so you'll want to do something along the lines of man
 *   /usr/local/src/regex/regex.7 in order to read it.
 * @param string $string The input string.
 * @param int $limit If {@link limit} is set, the returned array will
 *   contain a maximum of {@link limit} elements with the last element
 *   containing the whole rest of {@link string}.
 * @return array
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function spliti($pattern, $string, $limit){}

/**
 * This function is intended to be used as a default implementation for
 * {@link __autoload}. If nothing else is specified and {@link
 * spl_autoload_register} is called without any parameters then this
 * functions will be used for any later call to {@link __autoload}.
 * 
 * @param string $class_name
 * @param string $file_extensions By default it checks all include
 *   paths to contain filenames built up by the lowercase class name
 *   appended by the filename extensions .inc and .php.
 * @return void
 * @since PHP 5 >= 5.1.2
 **/
function spl_autoload($class_name, $file_extensions){}

/**
 * This function can be used to manually search for a class or interface
 * using the registered __autoload functions.
 * 
 * @param string $class_name The class name being searched.
 * @return void
 * @since PHP 5 >= 5.1.2
 **/
function spl_autoload_call($class_name){}

/**
 * This function can modify and check the file extensions that the built
 * in {@link __autoload} fallback function {@link spl_autoload} will be
 * using.
 * 
 * @param string $file_extensions When calling without an argument, it
 *   simply returns the current list of extensions each separated by
 *   comma. To modify the list of file extensions, simply invoke the
 *   functions with the new list of file extensions to use in a single
 *   string with each extensions separated by comma.
 * @return string
 * @since PHP 5 >= 5.1.2
 **/
function spl_autoload_extensions($file_extensions){}

/**
 * Get all registered __autoload() functions.
 * 
 * @return array
 * @since PHP 5 >= 5.1.2
 **/
function spl_autoload_functions(){}

/**
 * Register a function with the spl provided __autoload stack. If the
 * stack is not yet activated it will be activated.
 * 
 * If your code has an existing __autoload function then this function
 * must be explicitly registered on the __autoload stack. This is because
 * spl_autoload_register() will effectively replace the engine cache for
 * the __autoload function by either spl_autoload() or
 * spl_autoload_call().
 * 
 * If there must be multiple autoload functions, {@link
 * spl_autoload_register} allows for this. It effectively creates a queue
 * of autoload functions, and runs through each of them in the order they
 * are defined. By contrast, {@link __autoload} may only be defined once.
 * 
 * @param callback $autoload_function The autoload function being
 *   registered. If no parameter is provided, then the default
 *   implementation of {@link spl_autoload} will be registered.
 * @param bool $throw This parameter specifies whether {@link
 *   spl_autoload_register} should throw exceptions on error.
 * @param bool $prepend If true, {@link spl_autoload_register} will
 *   prepend the autoloader on the autoload stack instead of appending
 *   it.
 * @return bool
 * @since PHP 5 >= 5.1.2
 **/
function spl_autoload_register($autoload_function, $throw, $prepend){}

/**
 * Unregister a function from the spl provided __autoload stack. If the
 * stack is activated and empty after unregistering the given function
 * then it will be deactivated.
 * 
 * When this function results in the autoload stack being deactivated,
 * any __autoload function that previously existed will not be
 * reactivated.
 * 
 * @param mixed $autoload_function The autoload function being
 *   unregistered.
 * @return bool
 * @since PHP 5 >= 5.1.2
 **/
function spl_autoload_unregister($autoload_function){}

/**
 * This function returns an array with the current available SPL classes.
 * 
 * @return array
 * @since PHP 5
 **/
function spl_classes(){}

/**
 * This function returns a unique identifier for the object. This id can
 * be used as a hash key for storing objects or for identifying an
 * object.
 * 
 * @param object $obj Any object.
 * @return string
 * @since PHP 5 >= 5.2.0
 **/
function spl_object_hash($obj){}

/**
 * Returns a string produced according to the formatting string {@link
 * format}.
 * 
 * @param string $format The format string is composed of zero or more
 *   directives: ordinary characters (excluding %) that are copied
 *   directly to the result, and conversion specifications, each of which
 *   results in fetching its own parameter. This applies to both {@link
 *   sprintf} and {@link printf}. Each conversion specification consists
 *   of a percent sign (%), followed by one or more of these elements, in
 *   order: An optional sign specifier that forces a sign (- or +) to be
 *   used on a number. By default, only the - sign is used on a number if
 *   it's negative. This specifier forces positive numbers to have the +
 *   sign attached as well, and was added in PHP 4.3.0. An optional
 *   padding specifier that says what character will be used for padding
 *   the results to the right string size. This may be a space character
 *   or a 0 (zero character). The default is to pad with spaces. An
 *   alternate padding character can be specified by prefixing it with a
 *   single quote ('). See the examples below. An optional alignment
 *   specifier that says if the result should be left-justified or
 *   right-justified. The default is right-justified; a - character here
 *   will make it left-justified. An optional number, a width specifier
 *   that says how many characters (minimum) this conversion should
 *   result in. An optional precision specifier in the form of a period
 *   (`.') followed by an optional decimal digit string that says how
 *   many decimal digits should be displayed for floating-point numbers.
 *   When using this specifier on a string, it acts as a cutoff point,
 *   setting a maximum character limit to the string. A type specifier
 *   that says what type the argument data should be treated as. Possible
 *   types: % - a literal percent character. No argument is required. b -
 *   the argument is treated as an integer, and presented as a binary
 *   number. c - the argument is treated as an integer, and presented as
 *   the character with that ASCII value. d - the argument is treated as
 *   an integer, and presented as a (signed) decimal number. e - the
 *   argument is treated as scientific notation (e.g. 1.2e+2). The
 *   precision specifier stands for the number of digits after the
 *   decimal point since PHP 5.2.1. In earlier versions, it was taken as
 *   number of significant digits (one less). E - like %e but uses
 *   uppercase letter (e.g. 1.2E+2). u - the argument is treated as an
 *   integer, and presented as an unsigned decimal number. f - the
 *   argument is treated as a float, and presented as a floating-point
 *   number (locale aware). F - the argument is treated as a float, and
 *   presented as a floating-point number (non-locale aware). Available
 *   since PHP 4.3.10 and PHP 5.0.3. g - shorter of %e and %f. G -
 *   shorter of %E and %f. o - the argument is treated as an integer, and
 *   presented as an octal number. s - the argument is treated as and
 *   presented as a string. x - the argument is treated as an integer and
 *   presented as a hexadecimal number (with lowercase letters). X - the
 *   argument is treated as an integer and presented as a hexadecimal
 *   number (with uppercase letters). The format string supports argument
 *   numbering/swapping. Here is an example: Argument swapping
 *   
 *   <?php $format = 'There are %d monkeys in the %s'; printf($format,
 *   $num, $location); ?>
 *   
 *   This might output, "There are 5 monkeys in the tree". But imagine we
 *   are creating a format string in a separate file, commonly because we
 *   would like to internationalize it and we rewrite it as: Argument
 *   swapping
 *   
 *   <?php $format = 'The %s contains %d monkeys'; printf($format, $num,
 *   $location); ?>
 *   
 *   We now have a problem. The order of the placeholders in the format
 *   string does not match the order of the arguments in the code. We
 *   would like to leave the code as is and simply indicate in the format
 *   string which arguments the placeholders refer to. We would write the
 *   format string like this instead: Argument swapping
 *   
 *   <?php $format = 'The %2$s contains %1$d monkeys'; printf($format,
 *   $num, $location); ?>
 *   
 *   An added benefit here is that you can repeat the placeholders
 *   without adding more arguments in the code. For example: Argument
 *   swapping
 *   
 *   <?php $format = 'The %2$s contains %1$d monkeys. That\'s a nice %2$s
 *   full of %1$d monkeys.'; printf($format, $num, $location); ?>
 * @param mixed $args
 * @return string
 * @since PHP 4, PHP 5
 **/
function sprintf($format, $args){}

/**
 * {@link sqlite_array_query} executes the given query and returns an
 * array of the entire result set. It is similar to calling {@link
 * sqlite_query} and then {@link sqlite_fetch_array} for each row in the
 * result set. {@link sqlite_array_query} is significantly faster than
 * the aforementioned.
 * 
 * @param resource $dbhandle The query to be executed. Data inside the
 *   query should be properly escaped.
 * @param string $query The SQLite Database resource; returned from
 *   {@link sqlite_open} when used procedurally. This parameter is not
 *   required when using the object-oriented method.
 * @param int $result_type
 * @param bool $decode_binary
 * @return array
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_array_query($dbhandle, $query, $result_type, $decode_binary){}

/**
 * Set the maximum time, in milliseconds, that SQLite will wait for a
 * {@link dbhandle} to become ready for use.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param int $milliseconds The number of milliseconds. When set to 0,
 *   busy handlers will be disabled and SQLite will return immediately
 *   with a SQLITE_BUSY status code if another process/thread has the
 *   database locked for an update. PHP sets the default busy timeout to
 *   be 60 seconds when the database is opened.
 * @return void
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_busy_timeout($dbhandle, $milliseconds){}

/**
 * Returns the numbers of rows that were changed by the most recent SQL
 * statement executed against the {@link dbhandle} database handle.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @return int
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_changes($dbhandle){}

/**
 * Closes the given {@link database} handle. If the database was
 * persistent, it will be closed and removed from the persistent list.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally.
 * @return void
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_close($dbhandle){}

/**
 * Fetches the value of a column named {@link index_or_name} (if it is a
 * string), or of the ordinal column numbered {@link index_or_name} (if
 * it is an integer) from the current row of the query result handle
 * {@link result}.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param mixed $index_or_name The column index or name to fetch.
 * @param bool $decode_binary
 * @return mixed
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_column($result, $index_or_name, $decode_binary){}

/**
 * {@link sqlite_create_aggregate} is similar to {@link
 * sqlite_create_function} except that it registers functions that can be
 * used to calculate a result aggregated across all the rows of a query.
 * 
 * The key difference between this function and {@link
 * sqlite_create_function} is that two functions are required to manage
 * the aggregate; {@link step_func} is called for each row of the result
 * set. Your PHP function should accumulate the result and store it into
 * the aggregation context. Once all the rows have been processed, {@link
 * finalize_func} will be called and it should then take the data from
 * the aggregation context and return the result. Callback functions
 * should return a type understood by SQLite (i.e. scalar type).
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param string $function_name The name of the function used in SQL
 *   statements.
 * @param callback $step_func Callback function called for each row of
 *   the result set.
 * @param callback $finalize_func Callback function to aggregate the
 *   "stepped" data from each row.
 * @param int $num_args Hint to the SQLite parser if the callback
 *   function accepts a predetermined number of arguments.
 * @return void
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_create_aggregate($dbhandle, $function_name, $step_func, $finalize_func, $num_args){}

/**
 * {@link sqlite_create_function} allows you to register a PHP function
 * with SQLite as an UDF (User Defined Function), so that it can be
 * called from within your SQL statements.
 * 
 * The UDF can be used in any SQL statement that can call functions, such
 * as SELECT and UPDATE statements and also in triggers.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param string $function_name The name of the function used in SQL
 *   statements.
 * @param callback $callback Callback function to handle the defined
 *   SQL function.
 * @param int $num_args Hint to the SQLite parser if the callback
 *   function accepts a predetermined number of arguments.
 * @return void
 * @since PHP 5, sqlite >= 1.0.0
 **/
function sqlite_create_function($dbhandle, $function_name, $callback, $num_args){}

/**
 * {@link sqlite_current} is identical to {@link sqlite_fetch_array}
 * except that it does not advance to the next row prior to returning the
 * data; it returns the data from the current position only.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param int $result_type
 * @param bool $decode_binary
 * @return array
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_current($result, $result_type, $decode_binary){}

/**
 * Returns a human readable description of the {@link error_code}
 * returned from {@link sqlite_last_error}.
 * 
 * @param int $error_code The error code being used, which might be
 *   passed in from {@link sqlite_last_error}.
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_error_string($error_code){}

/**
 * {@link sqlite_escape_string} will correctly quote the string specified
 * by {@link item} for use in an SQLite SQL statement. This includes
 * doubling up single-quote characters (') and checking for binary-unsafe
 * characters in the query string.
 * 
 * Although the encoding makes it safe to insert the data, it will render
 * simple text comparisons and LIKE clauses in your queries unusable for
 * the columns that contain the binary data. In practice, this shouldn't
 * be a problem, as your schema should be such that you don't use such
 * things on binary columns (in fact, it might be better to store binary
 * data using other means, such as in files).
 * 
 * @param string $item The string being quoted. If the {@link item}
 *   contains a NUL character, or if it begins with a character whose
 *   ordinal value is 0x01, PHP will apply a binary encoding scheme so
 *   that you can safely store and retrieve binary data.
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_escape_string($item){}

/**
 * Executes an SQL statement given by the {@link query} against a given
 * database handle (specified by the {@link dbhandle} parameter).
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param string $query The query to be executed. Data inside the query
 *   should be properly escaped.
 * @param string $error_msg The specified variable will be filled if an
 *   error occurs. This is specially important because SQL syntax errors
 *   can't be fetched using the {@link sqlite_last_error} function.
 * @return bool
 * @since PHP 5, PECL sqlite >= 1.0.3
 **/
function sqlite_exec($dbhandle, $query, &$error_msg){}

/**
 * {@link sqlite_factory} behaves similarly to {@link sqlite_open} in
 * that it opens an SQLite database or attempts to create it if it does
 * not exist. However, a SQLiteDatabase object is returned rather than a
 * resource. Please see the {@link sqlite_open} reference page for
 * further usage and caveats.
 * 
 * @param string $filename The filename of the SQLite database.
 * @param int $mode The mode of the file. Intended to be used to open
 *   the database in read-only mode. Presently, this parameter is ignored
 *   by the sqlite library. The default value for mode is the octal value
 *   0666 and this is the recommended value.
 * @param string $error_message Passed by reference and is set to hold
 *   a descriptive error message explaining why the database could not be
 *   opened if there was an error.
 * @return SQLiteDatabase
 * @since PHP 5
 **/
function sqlite_factory($filename, $mode, &$error_message){}

/**
 * {@link sqlite_fetch_all} returns an array of the entire result set
 * from the {@link result} resource. It is similar to calling {@link
 * sqlite_query} (or {@link sqlite_unbuffered_query}) and then {@link
 * sqlite_fetch_array} for each row in the result set.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param int $result_type
 * @param bool $decode_binary
 * @return array
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_fetch_all($result, $result_type, $decode_binary){}

/**
 * Fetches the next row from the given {@link result} handle. If there
 * are no more rows, returns , otherwise returns an associative array
 * representing the row data.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param int $result_type
 * @param bool $decode_binary
 * @return array
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_fetch_array($result, $result_type, $decode_binary){}

/**
 * {@link sqlite_fetch_column_types} returns an array of column data
 * types from the specified {@link table_name} table.
 * 
 * @param string $table_name The table name to query.
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param int $result_type The optional {@link result_type} parameter
 *   accepts a constant and determines how the returned array will be
 *   indexed. Using SQLITE_ASSOC will return only associative indices
 *   (named fields) while SQLITE_NUM will return only numerical indices
 *   (ordinal field numbers). SQLITE_BOTH will return both associative
 *   and numerical indices. SQLITE_ASSOC is the default for this
 *   function.
 * @return array
 * @since PHP 5
 **/
function sqlite_fetch_column_types($table_name, $dbhandle, $result_type){}

/**
 * @param resource $result
 * @param string $class_name
 * @param array $ctor_params
 * @param bool $decode_binary
 * @return object
 * @since PHP 5
 **/
function sqlite_fetch_object($result, $class_name, $ctor_params, $decode_binary){}

/**
 * {@link sqlite_fetch_single} is identical to {@link sqlite_fetch_array}
 * except that it returns the value of the first column of the rowset.
 * 
 * This is the most optimal way to retrieve data when you are only
 * interested in the values from a single column of data.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param bool $decode_binary
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.1
 **/
function sqlite_fetch_single($result, $decode_binary){}

/**
 * {@link sqlite_fetch_string} is identical to {@link sqlite_fetch_array}
 * except that it returns the value of the first column of the rowset.
 * 
 * This is the most optimal way to retrieve data when you are only
 * interested in the values from a single column of data.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param bool $decode_binary
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_fetch_string($result, $decode_binary){}

/**
 * Given the ordinal column number, {@link field_index}, {@link
 * sqlite_field_name} returns the name of that field in the result set
 * {@link result}.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param int $field_index The ordinal column number in the result set.
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_field_name($result, $field_index){}

/**
 * Finds whether more rows are available from the given result set.
 * 
 * @param resource $result The SQLite result resource.
 * @return bool
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_has_more($result){}

/**
 * Find whether there are more previous rows from the given result
 * handle.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return bool
 * @since PHP 5
 **/
function sqlite_has_prev($result){}

/**
 * {@link sqlite_key} returns the current row index of the buffered
 * result set {@link result}.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function sqlite_key($result){}

/**
 * Returns the error code from the last operation performed on {@link
 * dbhandle} (the database handle), or 0 when no error occurred. A human
 * readable description of the error code can be retrieved using {@link
 * sqlite_error_string}.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @return int
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_last_error($dbhandle){}

/**
 * Returns the rowid of the row that was most recently inserted into the
 * database {@link dbhandle}, if it was created as an auto-increment
 * field.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @return int
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_last_insert_rowid($dbhandle){}

/**
 * The SQLite library may be compiled in either ISO-8859-1 or UTF-8
 * compatible modes. This function allows you to determine which encoding
 * scheme is used by your version of the library.
 * 
 * When compiled with UTF-8 support, sqlite handles encoding and decoding
 * of UTF-8 multi-byte character sequences, but does not yet do a
 * complete job when working with the data (no normalization is performed
 * for example), and some comparison operations may still not be carried
 * out correctly.
 * 
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_libencoding(){}

/**
 * Returns the version of the linked SQLite library.
 * 
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_libversion(){}

/**
 * {@link sqlite_next} advances the result handle {@link result} to the
 * next row.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return bool
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_next($result){}

/**
 * Returns the number of fields in the {@link result} set.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return int
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_num_fields($result){}

/**
 * Returns the number of rows in the buffered {@link result} set.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return int
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_num_rows($result){}

/**
 * Opens an SQLite database or creates the database if it does not exist.
 * 
 * @param string $filename The filename of the SQLite database. If the
 *   file does not exist, SQLite will attempt to create it. PHP must have
 *   write permissions to the file if data is inserted, the database
 *   schema is modified or to create the database if it does not exist.
 * @param int $mode The mode of the file. Intended to be used to open
 *   the database in read-only mode. Presently, this parameter is ignored
 *   by the sqlite library. The default value for mode is the octal value
 *   0666 and this is the recommended value.
 * @param string $error_message Passed by reference and is set to hold
 *   a descriptive error message explaining why the database could not be
 *   opened if there was an error.
 * @return resource
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_open($filename, $mode, &$error_message){}

/**
 * {@link sqlite_popen} will first check to see if a persistent handle
 * has already been opened for the given {@link filename}. If it finds
 * one, it returns that handle to your script, otherwise it opens a fresh
 * handle to the database.
 * 
 * The benefit of this approach is that you don't incur the performance
 * cost of re-reading the database and index schema on each page hit
 * served by persistent web server SAPI's (any SAPI except for regular
 * CGI or CLI).
 * 
 * @param string $filename The filename of the SQLite database. If the
 *   file does not exist, SQLite will attempt to create it. PHP must have
 *   write permissions to the file if data is inserted, the database
 *   schema is modified or to create the database if it does not exist.
 * @param int $mode The mode of the file. Intended to be used to open
 *   the database in read-only mode. Presently, this parameter is ignored
 *   by the sqlite library. The default value for mode is the octal value
 *   0666 and this is the recommended value.
 * @param string $error_message Passed by reference and is set to hold
 *   a descriptive error message explaining why the database could not be
 *   opened if there was an error.
 * @return resource
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_popen($filename, $mode, &$error_message){}

/**
 * {@link sqlite_prev} seeks back the {@link result} handle to the
 * previous row.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return bool
 * @since PHP 5
 **/
function sqlite_prev($result){}

/**
 * Executes an SQL statement given by the {@link query} against a given
 * database handle.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param string $query The query to be executed. Data inside the query
 *   should be properly escaped.
 * @param int $result_type
 * @param string $error_msg The specified variable will be filled if an
 *   error occurs. This is specially important because SQL syntax errors
 *   can't be fetched using the {@link sqlite_last_error} function.
 * @return resource
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_query($dbhandle, $query, $result_type, &$error_msg){}

/**
 * {@link sqlite_rewind} seeks back to the first row in the given result
 * set.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return bool
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_rewind($result){}

/**
 * {@link sqlite_seek} seeks to the row given by the parameter {@link
 * rownum}.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @param int $rownum The ordinal row number to seek to. The row number
 *   is zero-based (0 is the first row).
 * @return bool
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_seek($result, $rownum){}

/**
 * @param resource $db
 * @param string $query
 * @param bool $first_row_only
 * @param bool $decode_binary
 * @return array
 * @since PHP 5, PECL sqlite >= 1.0.1
 **/
function sqlite_single_query($db, $query, $first_row_only, $decode_binary){}

/**
 * Decodes binary data passed as parameters to a UDF.
 * 
 * You must call this function on parameters passed to your UDF if you
 * need them to handle binary data, as the binary encoding employed by
 * PHP will obscure the content and of the parameter in its natural,
 * non-coded form.
 * 
 * PHP does not perform this encode/decode operation automatically as it
 * would severely impact performance if it did.
 * 
 * @param string $data The encoded data that will be decoded, data that
 *   was applied by either {@link sqlite_udf_encode_binary} or {@link
 *   sqlite_escape_string}.
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_udf_decode_binary($data){}

/**
 * {@link sqlite_udf_encode_binary} applies a binary encoding to the
 * {@link data} so that it can be safely returned from queries (since the
 * underlying libsqlite API is not binary safe).
 * 
 * If there is a chance that your data might be binary unsafe (e.g.: it
 * contains a NUL byte in the middle rather than at the end, or if it has
 * and 0x01 byte as the first character) then you must call this function
 * to encode the return value from your UDF.
 * 
 * PHP does not perform this encode/decode operation automatically as it
 * would severely impact performance if it did.
 * 
 * @param string $data The string being encoded.
 * @return string
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_udf_encode_binary($data){}

/**
 * {@link sqlite_unbuffered_query} is identical to {@link sqlite_query}
 * except that the result that is returned is a sequential forward-only
 * result set that can only be used to read each row, one after the
 * other.
 * 
 * This function is ideal for generating things such as HTML tables where
 * you only need to process one row at a time and don't need to randomly
 * access the row data.
 * 
 * @param resource $dbhandle The SQLite Database resource; returned
 *   from {@link sqlite_open} when used procedurally. This parameter is
 *   not required when using the object-oriented method.
 * @param string $query The query to be executed. Data inside the query
 *   should be properly escaped.
 * @param int $result_type
 * @param string $error_msg The specified variable will be filled if an
 *   error occurs. This is specially important because SQL syntax errors
 *   can't be fetched using the {@link sqlite_last_error} function.
 * @return resource
 * @since PHP 5, PECL sqlite >= 1.0.0
 **/
function sqlite_unbuffered_query($dbhandle, $query, $result_type, &$error_msg){}

/**
 * Finds whether more rows are available from the given result handle.
 * 
 * @param resource $result The SQLite result resource. This parameter
 *   is not required when using the object-oriented method.
 * @return bool
 * @since PHP 5
 **/
function sqlite_valid($result){}

/**
 * Creates a regular expression for a case insensitive match.
 * 
 * @param string $string The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function sql_regcase($string){}

/**
 * Returns the square root of {@link arg}.
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4, PHP 5
 **/
function sqrt($arg){}

/**
 * Seeds the random number generator with {@link seed} or with a random
 * value if no {@link seed} is given.
 * 
 * @param int $seed Optional seed value
 * @return void
 * @since PHP 4, PHP 5
 **/
function srand($seed){}

/**
 * The function {@link sscanf} is the input analog of {@link printf}.
 * {@link sscanf} reads from the string {@link str} and interprets it
 * according to the specified {@link format}, which is described in the
 * documentation for {@link sprintf}.
 * 
 * Any whitespace in the format string matches any whitespace in the
 * input string. This means that even a tab \t in the format string can
 * match a single space character in the input string.
 * 
 * @param string $str The input string being parsed.
 * @param string $format The interpreted format for {@link str}, which
 *   is described in the documentation for {@link sprintf} with following
 *   differences: Function is not locale-aware. F, g, G and b are not
 *   supported. D stands for decimal number. i stands for integer with
 *   base detection. n stands for number of characters processed so far.
 * @return mixed
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function sscanf($str, $format){}

/**
 * Authenticate using a public hostkey read from a file.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $username
 * @param string $hostname
 * @param string $pubkeyfile
 * @param string $privkeyfile
 * @param string $passphrase If {@link privkeyfile} is encrypted (which
 *   it should be), the passphrase must be provided.
 * @param string $local_username If {@link local_username} is omitted,
 *   then the value for {@link username} will be used for it.
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_auth_hostbased_file($session, $username, $hostname, $pubkeyfile, $privkeyfile, $passphrase, $local_username){}

/**
 * Attempt "none" authentication which usually will (and should) fail. As
 * part of the failure, this function will return an array of accepted
 * authentication methods.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $username Remote user name.
 * @return mixed
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_auth_none($session, $username){}

/**
 * Authenticate over SSH using a plain password
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $username Remote user name.
 * @param string $password Password for {@link username}
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_auth_password($session, $username, $password){}

/**
 * Authenticate using a public key read from a file.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $username
 * @param string $pubkeyfile
 * @param string $privkeyfile
 * @param string $passphrase If {@link privkeyfile} is encrypted (which
 *   it should be), the {@link passphrase} must be provided.
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_auth_pubkey_file($session, $username, $pubkeyfile, $privkeyfile, $passphrase){}

/**
 * Establish a connection to a remote SSH server.
 * 
 * Once connected, the client should verify the server's hostkey using
 * {@link ssh2_fingerprint}, then authenticate using either password or
 * public key.
 * 
 * @param string $host
 * @param int $port
 * @param array $methods {@link methods} may be an associative array
 *   with up to four parameters as described below.
 *   
 *   {@link methods} may be an associative array with any or all of the
 *   following parameters. Index Meaning Supported Values* kex List of
 *   key exchange methods to advertise, comma separated in order of
 *   preference. diffie-hellman-group1-sha1, diffie-hellman-group14-sha1,
 *   and diffie-hellman-group-exchange-sha1 hostkey List of hostkey
 *   methods to advertise, come separated in order of preference. ssh-rsa
 *   and ssh-dss client_to_server Associative array containing crypt,
 *   compression, and message authentication code (MAC) method
 *   preferences for messages sent from client to server.
 *   server_to_client Associative array containing crypt, compression,
 *   and message authentication code (MAC) method preferences for
 *   messages sent from server to client. * - Supported Values are
 *   dependent on methods supported by underlying library. See libssh2
 *   documentation for additional information.
 *   
 *   {@link client_to_server} and {@link server_to_client} may be an
 *   associative array with any or all of the following parameters. Index
 *   Meaning Supported Values* crypt List of crypto methods to advertise,
 *   comma separated in order of preference. rijndael-cbc@lysator.liu.se,
 *   aes256-cbc, aes192-cbc, aes128-cbc, 3des-cbc, blowfish-cbc,
 *   cast128-cbc, arcfour, and none** comp List of compression methods to
 *   advertise, comma separated in order of preference. zlib and none mac
 *   List of MAC methods to advertise, come separated in order of
 *   preference. hmac-sha1, hmac-sha1-96, hmac-ripemd160,
 *   hmac-ripemd160@openssh.com, and none**
 *   
 *   Crypt and MAC method "none" For security reasons, none is disabled
 *   by the underlying libssh2 library unless explicitly enabled during
 *   build time by using the appropriate ./configure options. See
 *   documentation for the underlying library for more information.
 * @param array $callbacks {@link callbacks} may be an associative
 *   array with any or all of the following parameters. Callbacks
 *   parameters Index Meaning Prototype ignore Name of function to call
 *   when an SSH2_MSG_IGNORE packet is received void ignore_cb($message)
 *   debug Name of function to call when an SSH2_MSG_DEBUG packet is
 *   received void debug_cb($message, $language, $always_display)
 *   macerror Name of function to call when a packet is received but the
 *   message authentication code failed. If the callback returns , the
 *   mismatch will be ignored, otherwise the connection will be
 *   terminated. bool macerror_cb($packet) disconnect Name of function to
 *   call when an SSH2_MSG_DISCONNECT packet is received void
 *   disconnect_cb($reason, $message, $language)
 * @return resource
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_connect($host, $port, $methods, $callbacks){}

/**
 * Execute a command at the remote end and allocate a channel for it.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $command
 * @param string $pty
 * @param array $env {@link env} may be passed as an associative array
 *   of name/value pairs to set in the target environment.
 * @param int $width Width of the virtual terminal.
 * @param int $height Height of the virtual terminal.
 * @param int $width_height_type {@link width_height_type} should be
 *   one of SSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.
 * @return resource
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_exec($session, $command, $pty, $env, $width, $height, $width_height_type){}

/**
 * Fetches an alternate substream associated with an SSH2 channel stream.
 * The SSH2 protocol currently defines only one substream, STDERR, which
 * has a substream ID of SSH2_STREAM_STDERR (defined as 1).
 * 
 * @param resource $channel
 * @param int $streamid An SSH2 channel stream.
 * @return resource
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_fetch_stream($channel, $streamid){}

/**
 * Returns a server hostkey hash from an active session.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param int $flags {@link flags} may be either of
 *   SSH2_FINGERPRINT_MD5 or SSH2_FINGERPRINT_SHA1 logically ORed with
 *   SSH2_FINGERPRINT_HEX or SSH2_FINGERPRINT_RAW.
 * @return string
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_fingerprint($session, $flags){}

/**
 * Returns list of negotiated methods.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @return array
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_methods_negotiated($session){}

/**
 * @param resource $pkey Publickey Subsystem resource created by {@link
 *   ssh2_publickey_init}.
 * @param string $algoname Publickey algorithm (e.g.): ssh-dss, ssh-rsa
 * @param string $blob Publickey blob as raw binary data
 * @param bool $overwrite If the specified key already exists, should
 *   it be overwritten?
 * @param array $attributes Associative array of attributes to assign
 *   to this public key. Refer to ietf-secsh-publickey-subsystem for a
 *   list of supported attributes. To mark an attribute as mandatory,
 *   precede its name with an asterisk. If the server is unable to
 *   support an attribute marked mandatory, it will abort the add
 *   process.
 * @return bool
 * @since PECL ssh2 >= 0.10
 **/
function ssh2_publickey_add($pkey, $algoname, $blob, $overwrite, $attributes){}

/**
 * Request the Publickey subsystem from an already connected SSH2 server.
 * 
 * The publickey subsystem allows an already connected and authenticated
 * client to manage the list of authorized public keys stored on the
 * target server in an implementation agnostic manner. If the remote
 * server does not support the publickey subsystem, the {@link
 * ssh2_publickey_init} function will return .
 * 
 * @param resource $session
 * @return resource
 * @since PECL ssh2 >= 0.10
 **/
function ssh2_publickey_init($session){}

/**
 * List currently authorized publickeys.
 * 
 * @param resource $pkey Publickey Subsystem resource
 * @return array
 * @since PECL ssh2 >= 0.10
 **/
function ssh2_publickey_list($pkey){}

/**
 * Removes an authorized publickey.
 * 
 * @param resource $pkey Publickey Subsystem Resource
 * @param string $algoname Publickey algorithm (e.g.): ssh-dss, ssh-rsa
 * @param string $blob Publickey blob as raw binary data
 * @return bool
 * @since PECL ssh2 >= 0.10
 **/
function ssh2_publickey_remove($pkey, $algoname, $blob){}

/**
 * Copy a file from the remote server to the local filesystem using the
 * SCP protocol.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $remote_file Path to the remote file.
 * @param string $local_file Path to the local file.
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_scp_recv($session, $remote_file, $local_file){}

/**
 * Copy a file from the local filesystem to the remote server using the
 * SCP protocol.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $local_file Path to the local file.
 * @param string $remote_file Path to the remote file.
 * @param int $create_mode The file will be created with the mode
 *   specified by {@link create_mode}.
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_scp_send($session, $local_file, $remote_file, $create_mode){}

/**
 * Request the SFTP subsystem from an already connected SSH2 server.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @return resource
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp($session){}

/**
 * Stats a symbolic link on the remote filesystem without following the
 * link.
 * 
 * This function is similar to using the {@link lstat} function with the
 * ssh2.sftp:// wrapper in PHP5 and returns the same values.
 * 
 * @param resource $sftp
 * @param string $path Path to the remote symbolic link.
 * @return array
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_lstat($sftp, $path){}

/**
 * Creates a directory on the remote file server with permissions set to
 * {@link mode}.
 * 
 * This function is similar to using {@link mkdir} with the ssh2.sftp://
 * wrapper.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $dirname Path of the new directory.
 * @param int $mode Permissions on the new directory.
 * @param bool $recursive If {@link recursive} is any parent
 *   directories required for {@link dirname} will be automatically
 *   created as well.
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_mkdir($sftp, $dirname, $mode, $recursive){}

/**
 * Returns the target of a symbolic link.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $link Path of the symbolic link.
 * @return string
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_readlink($sftp, $link){}

/**
 * Translates {@link filename} into the effective real path on the remote
 * filesystem.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $filename
 * @return string
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_realpath($sftp, $filename){}

/**
 * Renames a file on the remote filesystem.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $from The current file that is being renamed.
 * @param string $to The new file name that replaces {@link from}.
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_rename($sftp, $from, $to){}

/**
 * Removes a directory from the remote file server.
 * 
 * This function is similar to using {@link rmdir} with the ssh2.sftp://
 * wrapper.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $dirname
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_rmdir($sftp, $dirname){}

/**
 * Stats a file on the remote filesystem following any symbolic links.
 * 
 * This function is similar to using the {@link stat} function with the
 * ssh2.sftp:// wrapper in PHP5 and returns the same values.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $path
 * @return array
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_stat($sftp, $path){}

/**
 * Creates a symbolic link named {@link link} on the remote filesystem
 * pointing to {@link target}.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $target Target of the symbolic link.
 * @param string $link
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_symlink($sftp, $target, $link){}

/**
 * Deletes a file on the remote filesystem.
 * 
 * @param resource $sftp An SSH2 SFTP resource opened by {@link
 *   ssh2_sftp}.
 * @param string $filename
 * @return bool
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_sftp_unlink($sftp, $filename){}

/**
 * Open a shell at the remote end and allocate a stream for it.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $term_type {@link term_type} should correspond to one
 *   of the entries in the target system's /etc/termcap file.
 * @param array $env {@link env} may be passed as an associative array
 *   of name/value pairs to set in the target environment.
 * @param int $width Width of the virtual terminal.
 * @param int $height Height of the virtual terminal.
 * @param int $width_height_type {@link width_height_type} should be
 *   one of SSH2_TERM_UNIT_CHARS or SSH2_TERM_UNIT_PIXELS.
 * @return resource
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_shell($session, $term_type, $env, $width, $height, $width_height_type){}

/**
 * Open a socket stream to an arbitrary host/port by way of the currently
 * connected SSH server.
 * 
 * @param resource $session An SSH connection link identifier, obtained
 *   from a call to {@link ssh2_connect}.
 * @param string $host
 * @param int $port
 * @return resource
 * @since PECL ssh2 >= 0.9.0
 **/
function ssh2_tunnel($session, $host, $port){}

/**
 * Gathers the statistics of the file named by {@link filename}. If
 * {@link filename} is a symbolic link, statistics are from the file
 * itself, not the symlink.
 * 
 * {@link lstat} is identical to {@link stat} except it would instead be
 * based off the symlinks status.
 * 
 * @param string $filename Path to the file.
 * @return array
 * @since PHP 4, PHP 5
 **/
function stat($filename){}

/**
 * @param array $a
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_absolute_deviation($a){}

/**
 * Method
 * 
 * Cumulative distribution function (P) is calculated directly by code
 * associated with the following reference.
 * 
 * DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit
 * Computation of the Incomplete Beta Function Ratios. ACM Trans. Math.
 * Softw. 18 (1993), 360-373.
 * 
 * Computation of other parameters involve a search for a value that
 * produces the desired value of P. The search relies on the monotonicity
 * of P with the other parameter.
 * 
 * Note
 * 
 * The beta density is proportional to t^(A-1) * (1-t)^(B-1)
 * 
 * Arguments
 * 
 * P -- The integral from 0 to X of the chi-square distribution. Input
 * range: [0, 1].
 * 
 * Q -- 1-P. Input range: [0, 1]. P + Q = 1.0.
 * 
 * X -- Upper limit of integration of beta density. Input range: [0,1].
 * Search range: [0,1]
 * 
 * Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0.
 * 
 * A -- The first parameter of the beta density. Input range: (0,
 * +infinity). Search range: [1D-100,1D100]
 * 
 * B -- The second parameter of the beta density. Input range: (0,
 * +infinity). Search range: [1D-100,1D100]
 * 
 * STATUS -- 0 if calculation completed correctly -I if input parameter
 * number I is out of range 1 if answer appears to be lower than lowest
 * search bound 2 if answer appears to be higher than greatest search
 * bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1
 * 
 * BOUND -- Undefined if STATUS is 0
 * 
 * Bound exceeded by parameter number I if STATUS is negative.
 * 
 * Lower search bound if STATUS is 1.
 * 
 * Upper search bound if STATUS is 2.
 * 
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which Integer indicating which of the next four argument
 *   values is to be calculated from the others. Legal range: 1..4 which
 *   = 1 : Calculate P and Q from X,Y,A and B which = 2 : Calculate X and
 *   Y from P,Q,A and B which = 3 : Calculate A from P,Q,X,Y and B which
 *   = 4 : Calculate B from P,Q,X,Y and A
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_beta($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_binomial($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_cauchy($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_chisquare($par1, $par2, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_exponential($par1, $par2, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_f($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_gamma($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_laplace($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_logistic($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_negative_binomial($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_noncentral_chisquare($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param float $par4
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_noncentral_f($par1, $par2, $par3, $par4, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_poisson($par1, $par2, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_t($par1, $par2, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_uniform($par1, $par2, $par3, $which){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_cdf_weibull($par1, $par2, $par3, $which){}

/**
 * @param array $a
 * @param array $b
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_covariance($a, $b){}

/**
 * @param float $x
 * @param float $a
 * @param float $b
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_beta($x, $a, $b){}

/**
 * @param float $x
 * @param float $ave
 * @param float $stdev
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_cauchy($x, $ave, $stdev){}

/**
 * @param float $x
 * @param float $dfr
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_chisquare($x, $dfr){}

/**
 * @param float $x
 * @param float $scale
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_exponential($x, $scale){}

/**
 * @param float $x
 * @param float $dfr1
 * @param float $dfr2
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_f($x, $dfr1, $dfr2){}

/**
 * @param float $x
 * @param float $shape
 * @param float $scale
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_gamma($x, $shape, $scale){}

/**
 * @param float $x
 * @param float $ave
 * @param float $stdev
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_laplace($x, $ave, $stdev){}

/**
 * @param float $x
 * @param float $ave
 * @param float $stdev
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_logistic($x, $ave, $stdev){}

/**
 * @param float $x
 * @param float $n
 * @param float $pi
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_negative_binomial($x, $n, $pi){}

/**
 * @param float $x
 * @param float $ave
 * @param float $stdev
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_normal($x, $ave, $stdev){}

/**
 * @param float $x
 * @param float $n
 * @param float $pi
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_pmf_binomial($x, $n, $pi){}

/**
 * @param float $n1
 * @param float $n2
 * @param float $N1
 * @param float $N2
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_pmf_hypergeometric($n1, $n2, $N1, $N2){}

/**
 * @param float $x
 * @param float $lb
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_pmf_poisson($x, $lb){}

/**
 * @param float $x
 * @param float $dfr
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_t($x, $dfr){}

/**
 * @param float $x
 * @param float $a
 * @param float $b
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_dens_weibull($x, $a, $b){}

/**
 * @param float $x
 * @param float $a
 * @param float $b
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_den_uniform($x, $a, $b){}

/**
 * @param array $a
 * @return number
 * @since PECL stats >= 1.0.0
 **/
function stats_harmonic_mean($a){}

/**
 * @param array $a
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_kurtosis($a){}

/**
 * Returns a random deviate from the beta distribution with parameters A
 * and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0
 * < x <. Method R. C. H. Cheng.
 * 
 * @param float $a
 * @param float $b
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_beta($a, $b){}

/**
 * @param float $df
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_chisquare($df){}

/**
 * @param float $av
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_exponential($av){}

/**
 * Generates a random deviate from the F (variance ratio) distribution
 * with "dfn" degrees of freedom in the numerator and "dfd" degrees of
 * freedom in the denominator. Method : directly generates ratio of
 * chisquare variates.
 * 
 * @param float $dfn
 * @param float $dfd
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_f($dfn, $dfd){}

/**
 * @param float $low
 * @param float $high
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_funiform($low, $high){}

/**
 * Generates random deviates from the gamma distribution whose density is
 * (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).
 * 
 * @param float $a location parameter of Gamma distribution ({@link a}
 *   > 0).
 * @param float $r shape parameter of Gamma distribution ({@link r} >
 *   0).
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_gamma($a, $r){}

/**
 * @param int $n
 * @param float $pp
 * @return int
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_ibinomial($n, $pp){}

/**
 * @param int $n
 * @param float $p
 * @return int
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_ibinomial_negative($n, $p){}

/**
 * @return int
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_int(){}

/**
 * @param float $mu
 * @return int
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_ipoisson($mu){}

/**
 * @param int $low
 * @param int $high
 * @return int
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_iuniform($low, $high){}

/**
 * @param float $df
 * @param float $xnonc
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_noncenral_chisquare($df, $xnonc){}

/**
 * @param float $dfn
 * @param float $dfd
 * @param float $xnonc
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_noncentral_f($dfn, $dfd, $xnonc){}

/**
 * @param float $df
 * @param float $xnonc
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_noncentral_t($df, $xnonc){}

/**
 * @param float $av
 * @param float $sd
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_normal($av, $sd){}

/**
 * @param float $df
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_gen_t($df){}

/**
 * @return array
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_get_seeds(){}

/**
 * @param string $phrase
 * @return array
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_phrase_to_seeds($phrase){}

/**
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_ranf(){}

/**
 * @param int $iseed1
 * @param int $iseed2
 * @return void
 * @since PECL stats >= 1.0.0
 **/
function stats_rand_setall($iseed1, $iseed2){}

/**
 * @param array $a
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_skew($a){}

/**
 * @param array $a
 * @param bool $sample
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_standard_deviation($a, $sample){}

/**
 * @param int $x
 * @param int $n
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_binomial_coef($x, $n){}

/**
 * @param array $arr1
 * @param array $arr2
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_correlation($arr1, $arr2){}

/**
 * @param int $n
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_gennch($n){}

/**
 * @param array $arr1
 * @param array $arr2
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_independent_t($arr1, $arr2){}

/**
 * @param array $arr1
 * @param array $arr2
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_innerproduct($arr1, $arr2){}

/**
 * @param float $par1
 * @param float $par2
 * @param float $par3
 * @param int $which
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_noncentral_t($par1, $par2, $par3, $which){}

/**
 * @param array $arr1
 * @param array $arr2
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_paired_t($arr1, $arr2){}

/**
 * @param float $df
 * @param float $xnonc
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_percentile($df, $xnonc){}

/**
 * @param array $arr
 * @param float $power
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_stat_powersum($arr, $power){}

/**
 * @param array $a
 * @param bool $sample
 * @return float
 * @since PECL stats >= 1.0.0
 **/
function stats_variance($a, $sample){}

/**
 * Rolls back a transaction in progress.
 * 
 * @param resource $link The transaction to abort.
 * @param string $transaction_id
 * @param array $headers
 * @return bool
 **/
function stomp_abort($link, $transaction_id, $headers){}

/**
 * Acknowledges consumption of a message from a subscription using client
 * acknowledgment.
 * 
 * @param resource $link The message/messageId to be acknowledged.
 * @param mixed $msg
 * @param array $headers
 * @return bool
 **/
function stomp_ack($link, $msg, $headers){}

/**
 * Starts a transaction.
 * 
 * @param resource $link The transaction id.
 * @param string $transaction_id
 * @param array $headers
 * @return bool
 **/
function stomp_begin($link, $transaction_id, $headers){}

/**
 * Closes a previously opened connection.
 * 
 * @param resource $link
 * @return bool
 **/
function stomp_close($link){}

/**
 * Commits a transaction in progress.
 * 
 * @param resource $link The transaction id.
 * @param string $transaction_id
 * @param array $headers
 * @return bool
 **/
function stomp_commit($link, $transaction_id, $headers){}

/**
 * Opens a connection to a stomp compliant Message Broker.
 * 
 * @param string $broker The broker URI
 * @param string $username The username.
 * @param string $password The password.
 * @return resource
 **/
function stomp_connect($broker, $username, $password){}

/**
 * Returns a string description of the last connect error.
 * 
 * @return string
 * @since PECL stomp >= 0.3.0
 **/
function stomp_connect_error(){}

/**
 * Gets the last stomp error.
 * 
 * @param resource $link
 * @return string
 **/
function stomp_error($link){}

/**
 * Gets read timeout
 * 
 * @param resource $link
 * @return array
 **/
function stomp_get_read_timeout($link){}

/**
 * Gets the current stomp session ID.
 * 
 * @param resource $link
 * @return string
 **/
function stomp_get_session_id($link){}

/**
 * Indicates whether or not there is a frame ready to read.
 * 
 * @param resource $link
 * @return bool
 **/
function stomp_has_frame($link){}

/**
 * Reads the next frame. It is possible to instantiate an object of a
 * specific class, and pass parameters to that class's constructor.
 * 
 * @param resource $link The name of the class to instantiate. If not
 *   specified, a stompFrame object is returned.
 * @return array
 **/
function stomp_read_frame($link){}

/**
 * Sends a message to the Message Broker.
 * 
 * @param resource $link Where to send the message
 * @param string $destination Message to send.
 * @param mixed $msg
 * @param array $headers
 * @return bool
 **/
function stomp_send($link, $destination, $msg, $headers){}

/**
 * Sets read timeout.
 * 
 * @param resource $link The seconds part of the timeout to be set.
 * @param integer $seconds The microseconds part of the timeout to be
 *   set.
 * @param integer $microseconds
 * @return void
 **/
function stomp_set_read_timeout($link, $seconds, $microseconds){}

/**
 * Registers to listen to a given destination.
 * 
 * @param resource $link Destination to subscribe to.
 * @param string $destination
 * @param array $headers
 * @return bool
 **/
function stomp_subscribe($link, $destination, $headers){}

/**
 * Removes an existing subscription.
 * 
 * @param resource $link Subscription to remove.
 * @param string $destination
 * @param array $headers
 * @return bool
 **/
function stomp_unsubscribe($link, $destination, $headers){}

/**
 * Returns a string containing the version of the current stomp
 * extension.
 * 
 * @return string
 * @since PECL stomp >= 0.1.0
 **/
function stomp_version(){}

/**
 * Binary safe case-insensitive string comparison.
 * 
 * @param string $str1 The first string
 * @param string $str2 The second string
 * @return int
 * @since PHP 4, PHP 5
 **/
function strcasecmp($str1, $str2){}

/**
 * Returns part of {@link haystack} string from the first occurrence of
 * {@link needle} to the end of {@link haystack}.
 * 
 * @param string $haystack The input string.
 * @param mixed $needle If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @param bool $before_needle If , {@link strstr} returns the part of
 *   the {@link haystack} before the first occurrence of the {@link
 *   needle}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strchr($haystack, $needle, $before_needle){}

/**
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strcmp($str1, $str2){}

/**
 * Note that this comparison is case sensitive, and unlike {@link strcmp}
 * this function is not binary safe.
 * 
 * {@link strcoll} uses the current locale for doing the comparisons. If
 * the current locale is C or POSIX, this function is equivalent to
 * {@link strcmp}.
 * 
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @return int
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function strcoll($str1, $str2){}

/**
 * Returns the length of the initial segment of {@link str1} which does
 * not contain any of the characters in {@link str2}.
 * 
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @param int $start The start position of the string to examine.
 * @param int $length The length of the string to examine.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strcspn($str1, $str2, $start, $length){}

/**
 * @param resource $brigade
 * @param resource $bucket
 * @return void
 * @since PHP 5
 **/
function stream_bucket_append($brigade, $bucket){}

/**
 * @param resource $brigade
 * @return object
 * @since PHP 5
 **/
function stream_bucket_make_writeable($brigade){}

/**
 * @param resource $stream
 * @param string $buffer
 * @return object
 * @since PHP 5
 **/
function stream_bucket_new($stream, $buffer){}

/**
 * @param resource $brigade
 * @param resource $bucket
 * @return void
 * @since PHP 5
 **/
function stream_bucket_prepend($brigade, $bucket){}

/**
 * Creates and returns a stream context with any options supplied in
 * {@link options} preset.
 * 
 * @param array $options Must be an associative array of associative
 *   arrays in the format $arr['wrapper']['option'] = $value. Default to
 *   an empty array.
 * @param array $params Must be an associative array in the format
 *   $arr['parameter'] = $value. Refer to context parameters for a
 *   listing of standard stream parameters.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_context_create($options, $params){}

/**
 * @param array $options
 * @return resource
 * @since PHP 5 >= 5.1.0
 **/
function stream_context_get_default($options){}

/**
 * @param resource $stream_or_context The stream or context to get
 *   options from
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_context_get_options($stream_or_context){}

/**
 * Retrieves parameter and options information from the stream or
 * context.
 * 
 * @param resource $stream_or_context A stream resource or a context
 *   resource
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function stream_context_get_params($stream_or_context){}

/**
 * @param array $options The options to set for the default context.
 * @return resource
 * @since PHP 5 >= 5.3.0
 **/
function stream_context_set_default($options){}

/**
 * @param resource $stream_or_context The stream or context resource to
 *   apply the options too.
 * @param string $wrapper The options to set for the default context.
 * @param string $option
 * @param mixed $value
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_context_set_option($stream_or_context, $wrapper, $option, $value){}

/**
 * Sets parameters on the specified context.
 * 
 * @param resource $stream_or_context The stream or context to apply
 *   the parameters too.
 * @param array $params An array of parameters to set.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_context_set_params($stream_or_context, $params){}

/**
 * Makes a copy of up to {@link maxlength} bytes of data from the current
 * position (or from the {@link offset} position, if specified) in {@link
 * source} to {@link dest}. If {@link maxlength} is not specified, all
 * remaining content in {@link source} will be copied.
 * 
 * @param resource $source The source stream
 * @param resource $dest The destination stream
 * @param int $maxlength Maximum bytes to copy
 * @param int $offset The offset where to start to copy data
 * @return int
 * @since PHP 5
 **/
function stream_copy_to_stream($source, $dest, $maxlength, $offset){}

/**
 * @param resource $stream
 * @param string $encoding
 * @return bool
 **/
function stream_encoding($stream, $encoding){}

/**
 * Adds {@link filtername} to the list of filters attached to {@link
 * stream}.
 * 
 * @param resource $stream The target stream.
 * @param string $filtername The filter name.
 * @param int $read_write By default, {@link stream_filter_append} will
 *   attach the filter to the read filter chain if the file was opened
 *   for reading (i.e. File Mode: r, and/or +). The filter will also be
 *   attached to the write filter chain if the file was opened for
 *   writing (i.e. File Mode: w, a, and/or +). STREAM_FILTER_READ,
 *   STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can also be passed to
 *   the {@link read_write} parameter to override this behavior.
 * @param mixed $params This filter will be added with the specified
 *   {@link params} to the end of the list and will therefore be called
 *   last during stream operations. To add a filter to the beginning of
 *   the list, use {@link stream_filter_prepend}.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_filter_append($stream, $filtername, $read_write, $params){}

/**
 * Adds {@link filtername} to the list of filters attached to {@link
 * stream}.
 * 
 * @param resource $stream The target stream.
 * @param string $filtername The filter name.
 * @param int $read_write By default, {@link stream_filter_prepend}
 *   will attach the filter to the read filter chain if the file was
 *   opened for reading (i.e. File Mode: r, and/or +). The filter will
 *   also be attached to the write filter chain if the file was opened
 *   for writing (i.e. File Mode: w, a, and/or +). STREAM_FILTER_READ,
 *   STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can also be passed to
 *   the {@link read_write} parameter to override this behavior. See
 *   {@link stream_filter_append} for an example of using this parameter.
 * @param mixed $params This filter will be added with the specified
 *   {@link params} to the beginning of the list and will therefore be
 *   called first during stream operations. To add a filter to the end of
 *   the list, use {@link stream_filter_append}.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_filter_prepend($stream, $filtername, $read_write, $params){}

/**
 * {@link stream_filter_register} allows you to implement your own filter
 * on any registered stream used with all the other filesystem functions
 * (such as {@link fopen}, {@link fread} etc.).
 * 
 * @param string $filtername The filter name to be registered.
 * @param string $classname To implement a filter, you need to define a
 *   class as an extension of php_user_filter with a number of member
 *   functions as defined below. When performing read/write operations on
 *   the stream to which your filter is attached, PHP will pass the data
 *   through your filter (and any other filters attached to that stream)
 *   so that the data may be modified as desired. You must implement the
 *   methods exactly as described below - doing otherwise will lead to
 *   undefined behaviour. This method is called whenever data is read
 *   from or written to the attached stream (such as with {@link fread}
 *   or {@link fwrite}). {@link in} is a resource pointing to a bucket
 *   brigade which contains one or more bucket objects containing data to
 *   be filtered. {@link out} is a resource pointing to a second bucket
 *   brigade into which your modified buckets should be placed. {@link
 *   consumed}, which must always be declared by reference, should be
 *   incremented by the length of the data which your filter reads in and
 *   alters. In most cases this means you will increment {@link consumed}
 *   by $bucket->datalen for each $bucket. If the stream is in the
 *   process of closing (and therefore this is the last pass through the
 *   filterchain), the {@link closing} parameter will be set to . The
 *   filter method must return one of three values upon completion.
 *   Return Value Meaning PSFS_PASS_ON Filter processed successfully with
 *   data available in the {@link out} bucket brigade. PSFS_FEED_ME
 *   Filter processed successfully, however no data was available to
 *   return. More data is required from the stream or prior filter.
 *   PSFS_ERR_FATAL (default) The filter experienced an unrecoverable
 *   error and cannot continue.
 *   
 *   Property Contents FilterClass->filtername A string containing the
 *   name the filter was instantiated with. Filters may be registered
 *   under multiple names or under wildcards. Use this property to
 *   determine which name was used. FilterClass->params The contents of
 *   the {@link params} parameter passed to {@link stream_filter_append}
 *   or {@link stream_filter_prepend}. FilterClass->stream The stream
 *   resource being filtered. Maybe available only during filter calls
 *   when the closing parameter is set to . This method is called upon
 *   filter shutdown (typically, this is also during stream shutdown),
 *   and is executed after the flush method is called. If any resources
 *   were allocated or initialized during onCreate() this would be the
 *   time to destroy or dispose of them.
 * @return bool
 * @since PHP 5
 **/
function stream_filter_register($filtername, $classname){}

/**
 * Removes a stream filter previously added to a stream with {@link
 * stream_filter_prepend} or {@link stream_filter_append}. Any data
 * remaining in the filter's internal buffer will be flushed through to
 * the next filter before removing it.
 * 
 * @param resource $stream_filter The stream filter to be removed.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function stream_filter_remove($stream_filter){}

/**
 * Identical to {@link file_get_contents}, except that {@link
 * stream_get_contents} operates on an already open stream resource and
 * returns the remaining contents in a string, up to {@link maxlength}
 * bytes and starting at the specified {@link offset}.
 * 
 * @param resource $handle A stream resource (e.g. returned from {@link
 *   fopen})
 * @param int $maxlength The maximum bytes to read. Defaults to -1
 *   (read all the remaining buffer).
 * @param int $offset Seek to the specified offset before reading.
 * @return string
 * @since PHP 5
 **/
function stream_get_contents($handle, $maxlength, $offset){}

/**
 * @return array
 * @since PHP 5
 **/
function stream_get_filters(){}

/**
 * Gets a line from the given handle.
 * 
 * Reading ends when {@link length} bytes have been read, when the string
 * specified by {@link ending} is found (which is not included in the
 * return value), or on EOF (whichever comes first).
 * 
 * This function is nearly identical to {@link fgets} except in that it
 * allows end of line delimiters other than the standard \n, \r, and
 * \r\n, and does not return the delimiter itself.
 * 
 * @param resource $handle A valid file handle.
 * @param int $length The number of bytes to read from the handle.
 * @param string $ending An optional string delimiter.
 * @return string
 * @since PHP 5
 **/
function stream_get_line($handle, $length, $ending){}

/**
 * Returns information about an existing {@link stream}.
 * 
 * @param resource $stream The stream can be any stream created by
 *   {@link fopen}, {@link fsockopen} and {@link pfsockopen}.
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_get_meta_data($stream){}

/**
 * @return array
 * @since PHP 5
 **/
function stream_get_transports(){}

/**
 * Retrieve list of registered streams available on the running system.
 * 
 * @return array
 * @since PHP 5
 **/
function stream_get_wrappers(){}

/**
 * Checks if a stream, or a URL, is a local one or not.
 * 
 * @param mixed $stream_or_url The stream resource or URL to check.
 * @return bool
 * @since PHP 5 >= 5.2.4
 **/
function stream_is_local($stream_or_url){}

/**
 * A callback function, used by the notification context parameter,
 * called during an event.
 * 
 * @param int $notification_code One of the STREAM_NOTIFY_*
 *   notification constants.
 * @param int $severity One of the STREAM_NOTIFY_SEVERITY_*
 *   notification constants.
 * @param string $message Passed if a descriptive message is available
 *   for the event.
 * @param int $message_code Passed if a descriptive message code is
 *   available for the event. The meaning of this value is dependent on
 *   the specific wrapper in use.
 * @param int $bytes_transferred If applicable, the {@link
 *   bytes_transferred} will be populated.
 * @param int $bytes_max If applicable, the {@link bytes_max} will be
 *   populated.
 * @return void
 * @since PHP 5 >= 5.2.0
 **/
function stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max){}

/**
 * Allows you to implement your own protocol handlers and streams for use
 * with all the other filesystem functions (such as {@link fopen}, {@link
 * fread} etc.).
 * 
 * @param string $protocol The wrapper name to be registered.
 * @param string $classname The classname which implements the {@link
 *   protocol}.
 * @param int $flags Should be set to STREAM_IS_URL if {@link protocol}
 *   is a URL protocol. Default is 0, local stream.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_register_wrapper($protocol, $classname, $flags){}

/**
 * Resolve filename against the include path according to the same rules
 * as {@link fopen}/{@link include} does.
 * 
 * @param string $filename The filename to resolve.
 * @param resource $context A valid context resource created with
 *   {@link stream_context_create}.
 * @return string
 * @since PHP 5 >= 5.3.2
 **/
function stream_resolve_include_path($filename, $context){}

/**
 * The {@link stream_select} function accepts arrays of streams and waits
 * for them to change status. Its operation is equivalent to that of the
 * {@link socket_select} function except in that it acts on streams.
 * 
 * @param array $read The streams listed in the {@link read} array will
 *   be watched to see if characters become available for reading (more
 *   precisely, to see if a read will not block - in particular, a stream
 *   resource is also ready on end-of-file, in which case an {@link
 *   fread} will return a zero length string).
 * @param array $write The streams listed in the {@link write} array
 *   will be watched to see if a write will not block.
 * @param array $except The streams listed in the {@link except} array
 *   will be watched for high priority exceptional ("out-of-band") data
 *   arriving.
 * @param int $tv_sec The {@link tv_sec} and {@link tv_usec} together
 *   form the timeout parameter, {@link tv_sec} specifies the number of
 *   seconds while {@link tv_usec} the number of microseconds. The {@link
 *   timeout} is an upper bound on the amount of time that {@link
 *   stream_select} will wait before it returns. If {@link tv_sec} and
 *   {@link tv_usec} are both set to 0, {@link stream_select} will not
 *   wait for data - instead it will return immediately, indicating the
 *   current status of the streams. If {@link tv_sec} is {@link
 *   stream_select} can block indefinitely, returning only when an event
 *   on one of the watched streams occurs (or if a signal interrupts the
 *   system call).
 * @param int $tv_usec See {@link tv_sec} description.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_select(&$read, &$write, &$except, $tv_sec, $tv_usec){}

/**
 * Sets blocking or non-blocking mode on a {@link stream}.
 * 
 * This function works for any stream that supports non-blocking mode
 * (currently, regular files and socket streams).
 * 
 * @param resource $stream The stream.
 * @param int $mode If {@link mode} is 0, the given stream will be
 *   switched to non-blocking mode, and if 1, it will be switched to
 *   blocking mode. This affects calls like {@link fgets} and {@link
 *   fread} that read from the stream. In non-blocking mode an {@link
 *   fgets} call will always return right away while in blocking mode it
 *   will wait for data to become available on the stream.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_set_blocking($stream, $mode){}

/**
 * Sets the read buffer. It's the equivalent of {@link
 * stream_set_write_buffer}, but for read operations.
 * 
 * @param resource $stream The file pointer.
 * @param int $buffer The number of bytes to buffer. If {@link buffer}
 *   is 0 then read operations are unbuffered. This ensures that all
 *   reads with {@link fread} are completed before other processes are
 *   allowed to write to that output stream.
 * @return int
 * @since PHP 5 >= 5.3.3
 **/
function stream_set_read_buffer($stream, $buffer){}

/**
 * Sets the timeout value on {@link stream}, expressed in the sum of
 * {@link seconds} and {@link microseconds}.
 * 
 * When the stream times out, the 'timed_out' key of the array returned
 * by {@link stream_get_meta_data} is set to , although no error/warning
 * is generated.
 * 
 * @param resource $stream The target stream.
 * @param int $seconds The seconds part of the timeout to be set.
 * @param int $microseconds The microseconds part of the timeout to be
 *   set.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_set_timeout($stream, $seconds, $microseconds){}

/**
 * Sets the buffering for write operations on the given {@link stream} to
 * {@link buffer} bytes.
 * 
 * @param resource $stream The file pointer.
 * @param int $buffer The number of bytes to buffer. If {@link buffer}
 *   is 0 then write operations are unbuffered. This ensures that all
 *   writes with {@link fwrite} are completed before other processes are
 *   allowed to write to that output stream.
 * @return int
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function stream_set_write_buffer($stream, $buffer){}

/**
 * Accept a connection on a socket previously created by {@link
 * stream_socket_server}.
 * 
 * @param resource $server_socket The server socket to accept a
 *   connection from.
 * @param float $timeout Override the default socket accept timeout.
 *   Time should be given in seconds.
 * @param string $peername Will be set to the name (address) of the
 *   client which connected, if included and available from the selected
 *   transport.
 * @return resource
 * @since PHP 5
 **/
function stream_socket_accept($server_socket, $timeout, &$peername){}

/**
 * Initiates a stream or datagram connection to the destination specified
 * by {@link remote_socket}. The type of socket created is determined by
 * the transport specified using standard URL formatting:
 * transport://target. For Internet Domain sockets (AF_INET) such as TCP
 * and UDP, the target portion of the {@link remote_socket} parameter
 * should consist of a hostname or IP address followed by a colon and a
 * port number. For Unix domain sockets, the {@link target} portion
 * should point to the socket file on the filesystem.
 * 
 * @param string $remote_socket Address to the socket to connect to.
 * @param int $errno Will be set to the system level error number if
 *   connection fails.
 * @param string $errstr Will be set to the system level error message
 *   if the connection fails.
 * @param float $timeout Number of seconds until the connect() system
 *   call should timeout. This parameter only applies when not making
 *   asynchronous connection attempts. To set a timeout for
 *   reading/writing data over the socket, use the {@link
 *   stream_set_timeout}, as the {@link timeout} only applies while
 *   making connecting the socket.
 * @param int $flags Bitmask field which may be set to any combination
 *   of connection flags. Currently the select of connection flags is
 *   limited to STREAM_CLIENT_CONNECT (default),
 *   STREAM_CLIENT_ASYNC_CONNECT and STREAM_CLIENT_PERSISTENT.
 * @param resource $context A valid context resource created with
 *   {@link stream_context_create}.
 * @return resource
 * @since PHP 5
 **/
function stream_socket_client($remote_socket, &$errno, &$errstr, $timeout, $flags, $context){}

/**
 * @param resource $stream The stream resource.
 * @param bool $enable Enable/disable cryptography on the stream.
 * @param int $crypto_type Setup encryption on the stream. Valid
 *   methods are STREAM_CRYPTO_METHOD_SSLv2_CLIENT
 *   STREAM_CRYPTO_METHOD_SSLv3_CLIENT STREAM_CRYPTO_METHOD_SSLv23_CLIENT
 *   STREAM_CRYPTO_METHOD_TLS_CLIENT STREAM_CRYPTO_METHOD_SSLv2_SERVER
 *   STREAM_CRYPTO_METHOD_SSLv3_SERVER STREAM_CRYPTO_METHOD_SSLv23_SERVER
 *   STREAM_CRYPTO_METHOD_TLS_SERVER
 * @param resource $session_stream Seed the stream with settings from
 *   {@link session_stream}.
 * @return mixed
 * @since PHP 5 >= 5.1.0
 **/
function stream_socket_enable_crypto($stream, $enable, $crypto_type, $session_stream){}

/**
 * Returns the local or remote name of a given socket connection.
 * 
 * @param resource $handle The socket to get the name of.
 * @param bool $want_peer If set to the remote socket name will be
 *   returned, if set to the local socket name will be returned.
 * @return string
 * @since PHP 5
 **/
function stream_socket_get_name($handle, $want_peer){}

/**
 * {@link stream_socket_pair} creates a pair of connected,
 * indistinguishable socket streams. This function is commonly used in
 * IPC (Inter-Process Communication).
 * 
 * @param int $domain The protocol family to be used: STREAM_PF_INET,
 *   STREAM_PF_INET6 or STREAM_PF_UNIX
 * @param int $type The type of communication to be used:
 *   STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM,
 *   STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM
 * @param int $protocol The protocol to be used: STREAM_IPPROTO_ICMP,
 *   STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP or
 *   STREAM_IPPROTO_UDP
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function stream_socket_pair($domain, $type, $protocol){}

/**
 * {@link stream_socket_recvfrom} accepts data from a remote socket up to
 * {@link length} bytes.
 * 
 * @param resource $socket The remote socket.
 * @param int $length The number of bytes to receive from the {@link
 *   socket}.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following: Possible values for {@link flags} STREAM_OOB
 *   Process OOB (out-of-band) data. STREAM_PEEK Retrieve data from the
 *   socket, but do not consume the buffer. Subsequent calls to {@link
 *   fread} or {@link stream_socket_recvfrom} will see the same data.
 * @param string $address If {@link address} is provided it will be
 *   populated with the address of the remote socket.
 * @return string
 * @since PHP 5
 **/
function stream_socket_recvfrom($socket, $length, $flags, &$address){}

/**
 * Sends the specified {@link data} through the {@link socket}.
 * 
 * @param resource $socket The socket to send {@link data} to.
 * @param string $data The data to be sent.
 * @param int $flags The value of {@link flags} can be any combination
 *   of the following: possible values for {@link flags} STREAM_OOB
 *   Process OOB (out-of-band) data.
 * @param string $address The address specified when the socket stream
 *   was created will be used unless an alternate address is specified in
 *   {@link address}. If specified, it must be in dotted quad (or [ipv6])
 *   format.
 * @return int
 * @since PHP 5
 **/
function stream_socket_sendto($socket, $data, $flags, $address){}

/**
 * Creates a stream or datagram socket on the specified {@link
 * local_socket}.
 * 
 * This function only creates a socket, to begin accepting connections
 * use {@link stream_socket_accept}.
 * 
 * @param string $local_socket The type of socket created is determined
 *   by the transport specified using standard URL formatting:
 *   transport://target. For Internet Domain sockets (AF_INET) such as
 *   TCP and UDP, the target portion of the {@link remote_socket}
 *   parameter should consist of a hostname or IP address followed by a
 *   colon and a port number. For Unix domain sockets, the target portion
 *   should point to the socket file on the filesystem. Depending on the
 *   environment, Unix domain sockets may not be available. A list of
 *   available transports can be retrieved using {@link
 *   stream_get_transports}. See for a list of bulitin transports.
 * @param int $errno If the optional {@link errno} and {@link errstr}
 *   arguments are present they will be set to indicate the actual system
 *   level error that occurred in the system-level socket(), bind(), and
 *   listen() calls. If the value returned in {@link errno} is 0 and the
 *   function returned , it is an indication that the error occurred
 *   before the bind() call. This is most likely due to a problem
 *   initializing the socket. Note that the {@link errno} and {@link
 *   errstr} arguments will always be passed by reference.
 * @param string $errstr See {@link errno} description.
 * @param int $flags A bitmask field which may be set to any
 *   combination of socket creation flags.
 * @param resource $context
 * @return resource
 * @since PHP 5
 **/
function stream_socket_server($local_socket, &$errno, &$errstr, $flags, $context){}

/**
 * Shutdowns (partially or not) a full-duplex connection.
 * 
 * @param resource $stream An open stream (opened with {@link
 *   stream_socket_client}, for example)
 * @param int $how One of the following constants: STREAM_SHUT_RD
 *   (disable further receptions), STREAM_SHUT_WR (disable further
 *   transmissions) or STREAM_SHUT_RDWR (disable further receptions and
 *   transmissions).
 * @return bool
 * @since PHP 5 >= 5.2.1
 **/
function stream_socket_shutdown($stream, $how){}

/**
 * Tells whether the stream supports locking through {@link flock}.
 * 
 * @param resource $stream The stream to check.
 * @return bool
 * @since PHP 5 >= 5.3.0
 **/
function stream_supports_lock($stream){}

/**
 * Allows you to implement your own protocol handlers and streams for use
 * with all the other filesystem functions (such as {@link fopen}, {@link
 * fread} etc.).
 * 
 * @param string $protocol The wrapper name to be registered.
 * @param string $classname The classname which implements the {@link
 *   protocol}.
 * @param int $flags Should be set to STREAM_IS_URL if {@link protocol}
 *   is a URL protocol. Default is 0, local stream.
 * @return bool
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function stream_wrapper_register($protocol, $classname, $flags){}

/**
 * Restores a built-in wrapper previously unregistered with {@link
 * stream_wrapper_unregister}.
 * 
 * @param string $protocol
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function stream_wrapper_restore($protocol){}

/**
 * Allows you to disable an already defined stream wrapper. Once the
 * wrapper has been disabled you may override it with a user-defined
 * wrapper using {@link stream_wrapper_register} or reenable it later on
 * with {@link stream_wrapper_restore}.
 * 
 * @param string $protocol
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function stream_wrapper_unregister($protocol){}

/**
 * Format the time and/or date according to locale settings. Month and
 * weekday names and other language-dependent strings respect the current
 * locale set with {@link setlocale}.
 * 
 * Not all conversion specifiers may be supported by your C library, in
 * which case they will not be supported by PHP's {@link strftime}.
 * Additionally, not all platforms support negative timestamps, so your
 * date range may be limited to no earlier than the Unix epoch. This
 * means that %e, %T, %R and, %D (and possibly others) - as well as dates
 * prior to Jan 1, 1970 - will not work on Windows, some Linux
 * distributions, and a few other operating systems. For Windows systems,
 * a complete overview of supported conversion specifiers can be found at
 * MSDN.
 * 
 * @param string $format The following characters are recognized in the
 *   {@link format} parameter string {@link format} Description Example
 *   returned values Day --- --- %a An abbreviated textual representation
 *   of the day Sun through Sat %A A full textual representation of the
 *   day Sunday through Saturday %d Two-digit day of the month (with
 *   leading zeros) 01 to 31 %e Day of the month, with a space preceding
 *   single digits 1 to 31 %j Day of the year, 3 digits with leading
 *   zeros 001 to 366 %u ISO-8601 numeric representation of the day of
 *   the week 1 (for Monday) though 7 (for Sunday) %w Numeric
 *   representation of the day of the week 0 (for Sunday) through 6 (for
 *   Saturday) Week --- --- %U Week number of the given year, starting
 *   with the first Sunday as the first week 13 (for the 13th full week
 *   of the year) %V ISO-8601:1988 week number of the given year,
 *   starting with the first week of the year with at least 4 weekdays,
 *   with Monday being the start of the week 01 through 53 (where 53
 *   accounts for an overlapping week) %W A numeric representation of the
 *   week of the year, starting with the first Monday as the first week
 *   46 (for the 46th week of the year beginning with a Monday) Month ---
 *   --- %b Abbreviated month name, based on the locale Jan through Dec
 *   %B Full month name, based on the locale January through December %h
 *   Abbreviated month name, based on the locale (an alias of %b) Jan
 *   through Dec %m Two digit representation of the month 01 (for
 *   January) through 12 (for December) Year --- --- %C Two digit
 *   representation of the century (year divided by 100, truncated to an
 *   integer) 19 for the 20th Century %g Two digit representation of the
 *   year going by ISO-8601:1988 standards (see %V) Example: 09 for the
 *   week of January 6, 2009 %G The full four-digit version of %g
 *   Example: 2008 for the week of January 3, 2009 %y Two digit
 *   representation of the year Example: 09 for 2009, 79 for 1979 %Y Four
 *   digit representation for the year Example: 2038 Time --- --- %H Two
 *   digit representation of the hour in 24-hour format 00 through 23 %I
 *   Two digit representation of the hour in 12-hour format 01 through 12
 *   %l (lower-case 'L') Hour in 12-hour format, with a space preceeding
 *   single digits 1 through 12 %M Two digit representation of the minute
 *   00 through 59 %p UPPER-CASE 'AM' or 'PM' based on the given time
 *   Example: AM for 00:31, PM for 22:23 %P lower-case 'am' or 'pm' based
 *   on the given time Example: am for 00:31, pm for 22:23 %r Same as
 *   "%I:%M:%S %p" Example: 09:34:17 PM for 21:34:17 %R Same as "%H:%M"
 *   Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S Two digit
 *   representation of the second 00 through 59 %T Same as "%H:%M:%S"
 *   Example: 21:34:17 for 09:34:17 PM %X Preferred time representation
 *   based on locale, without the date Example: 03:59:16 or 15:59:16 %z
 *   Either the time zone offset from UTC or the abbreviation (depends on
 *   operating system) Example: -0500 or EST for Eastern Time %Z The time
 *   zone offset/abbreviation option NOT given by %z (depends on
 *   operating system) Example: -0500 or EST for Eastern Time Time and
 *   Date Stamps --- --- %c Preferred date and time stamp based on local
 *   Example: Tue Feb 5 00:45:10 2009 for February 4, 2009 at 12:45:10 AM
 *   %D Same as "%m/%d/%y" Example: 02/05/09 for February 5, 2009 %F Same
 *   as "%Y-%m-%d" (commonly used in database datestamps) Example:
 *   2009-02-05 for February 5, 2009 %s Unix Epoch Time timestamp (same
 *   as the {@link time} function) Example: 305815200 for September 10,
 *   1979 08:40:00 AM %x Preferred date representation based on locale,
 *   without the time Example: 02/05/09 for February 5, 2009
 *   Miscellaneous --- --- %n A newline character ("\n") --- %t A Tab
 *   character ("\t") --- %% A literal percentage character ("%") ---
 *   Maximum length of this parameter is 1023 characters.
 * @param int $timestamp
 * @return string
 * @since PHP 4, PHP 5
 **/
function strftime($format, $timestamp){}

/**
 * Returns a string with backslashes stripped off. Recognizes C-like \n,
 * \r ..., octal and hexadecimal representation.
 * 
 * @param string $str The string to be unescaped.
 * @return string
 * @since PHP 4, PHP 5
 **/
function stripcslashes($str){}

/**
 * Returns the numeric position of the first occurrence of {@link needle}
 * in the {@link haystack} string.
 * 
 * Unlike {@link strpos}, {@link stripos} is case-insensitive.
 * 
 * @param string $haystack The string to search in
 * @param string $needle Note that the {@link needle} may be a string
 *   of one or more characters. If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @param int $offset The optional {@link offset} parameter allows you
 *   to specify which character in {@link haystack} to start searching.
 *   The position returned is still relative to the beginning of {@link
 *   haystack}.
 * @return int
 * @since PHP 5
 **/
function stripos($haystack, $needle, $offset){}

/**
 * Un-quotes a quoted string.
 * 
 * An example use of {@link stripslashes} is when the PHP directive
 * magic_quotes_gpc is on (it's on by default), and you aren't inserting
 * this data into a place (such as a database) that requires escaping.
 * For example, if you're simply outputting data straight from an HTML
 * form.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function stripslashes($str){}

/**
 * This function tries to return a string with all NUL bytes, HTML and
 * PHP tags stripped from a given {@link str}. It uses the same tag
 * stripping state machine as the {@link fgetss} function.
 * 
 * @param string $str The input string.
 * @param string $allowable_tags You can use the optional second
 *   parameter to specify tags which should not be stripped.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strip_tags($str, $allowable_tags){}

/**
 * Returns all of {@link haystack} from the first occurrence of {@link
 * needle} to the end.
 * 
 * @param string $haystack The string to search in
 * @param mixed $needle If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @param bool $before_needle If , {@link stristr} returns the part of
 *   the {@link haystack} before the first occurrence of the {@link
 *   needle}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function stristr($haystack, $needle, $before_needle){}

/**
 * Returns the length of the given {@link string}.
 * 
 * @param string $string The string being measured for length.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strlen($string){}

/**
 * This function implements a comparison algorithm that orders
 * alphanumeric strings in the way a human being would. The behaviour of
 * this function is similar to {@link strnatcmp}, except that the
 * comparison is not case sensitive. For more information see: Martin
 * Pool's Natural Order String Comparison page.
 * 
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strnatcasecmp($str1, $str2){}

/**
 * This function implements a comparison algorithm that orders
 * alphanumeric strings in the way a human being would, this is described
 * as a "natural ordering". Note that this comparison is case sensitive.
 * 
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strnatcmp($str1, $str2){}

/**
 * This function is similar to {@link strcasecmp}, with the difference
 * that you can specify the (upper limit of the) number of characters
 * from each string to be used in the comparison.
 * 
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @param int $len The length of strings to be used in the comparison.
 * @return int
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function strncasecmp($str1, $str2, $len){}

/**
 * This function is similar to {@link strcmp}, with the difference that
 * you can specify the (upper limit of the) number of characters from
 * each string to be used in the comparison.
 * 
 * Note that this comparison is case sensitive.
 * 
 * @param string $str1 The first string.
 * @param string $str2 The second string.
 * @param int $len Number of characters to use in the comparison.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strncmp($str1, $str2, $len){}

/**
 * {@link strpbrk} searches the {@link haystack} string for a {@link
 * char_list}.
 * 
 * @param string $haystack The string where {@link char_list} is looked
 *   for.
 * @param string $char_list This parameter is case sensitive.
 * @return string
 * @since PHP 5
 **/
function strpbrk($haystack, $char_list){}

/**
 * Returns the numeric position of the first occurrence of {@link needle}
 * in the {@link haystack} string. Unlike the {@link strrpos} before PHP
 * 5, this function can take a full string as the {@link needle}
 * parameter and the entire string will be used.
 * 
 * @param string $haystack The string to search in
 * @param mixed $needle If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @param int $offset The optional {@link offset} parameter allows you
 *   to specify which character in {@link haystack} to start searching.
 *   The position returned is still relative to the beginning of {@link
 *   haystack}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strpos($haystack, $needle, $offset){}

/**
 * {@link strptime} returns an array with the {@link date} parsed, or on
 * error.
 * 
 * Month and weekday names and other language dependent strings respect
 * the current locale set with {@link setlocale} (LC_TIME).
 * 
 * @param string $date The string to parse (e.g. returned from {@link
 *   strftime})
 * @param string $format The format used in {@link date} (e.g. the same
 *   as used in {@link strftime}). For more information about the format
 *   options, read the {@link strftime} page.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function strptime($date, $format){}

/**
 * This function returns the portion of {@link haystack} which starts at
 * the last occurrence of {@link needle} and goes until the end of {@link
 * haystack}.
 * 
 * @param string $haystack The string to search in
 * @param mixed $needle If {@link needle} contains more than one
 *   character, only the first is used. This behavior is different from
 *   that of {@link strstr}. If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strrchr($haystack, $needle){}

/**
 * Returns {@link string}, reversed.
 * 
 * @param string $string The string to be reversed.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strrev($string){}

/**
 * Find position of last occurrence of a case-insensitive string in a
 * string. Unlike {@link strrpos}, {@link strripos} is case-insensitive.
 * 
 * @param string $haystack The string to search in
 * @param string $needle Note that the {@link needle} may be a string
 *   of one or more characters.
 * @param int $offset The {@link offset} parameter may be specified to
 *   begin searching an arbitrary number of characters into the string.
 *   Negative offset values will start the search at {@link offset}
 *   characters from the start of the string.
 * @return int
 * @since PHP 5
 **/
function strripos($haystack, $needle, $offset){}

/**
 * Returns the numeric position of the last occurrence of {@link needle}
 * in the {@link haystack} string. Note that the needle in this case can
 * only be a single character in PHP 4. If a string is passed as the
 * needle, then only the first character of that string will be used.
 * 
 * @param string $haystack The string to search in.
 * @param string $needle If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @param int $offset May be specified to begin searching an arbitrary
 *   number of characters into the string. Negative values will stop
 *   searching at an arbitrary point prior to the end of the string.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strrpos($haystack, $needle, $offset){}

/**
 * Returns the length of the first group of consecutive characters from
 * {@link mask} found in {@link subject}.
 * 
 * If {@link start} and {@link length} are omitted, then all of {@link
 * subject} will be examined. If they are included, then the effect will
 * be the same as calling strspn(substr($subject, $start, $length),
 * $mask) (see for more information).
 * 
 * The line of code:
 * 
 * <?php $var = strspn("42 is the answer to the 128th question.",
 * "1234567890"); ?>
 * 
 * will assign 2 to $var, because the string "42" is the first segment
 * from {@link subject} to consist only of characters contained within
 * "1234567890".
 * 
 * @param string $subject The string to examine.
 * @param string $mask The list of allowable characters to include in
 *   counted segments.
 * @param int $start The position in {@link subject} to start
 *   searching. If {@link start} is given and is non-negative, then
 *   {@link strspn} will begin examining {@link subject} at the {@link
 *   start}'th position. For instance, in the string 'abcdef', the
 *   character at position 0 is 'a', the character at position 2 is 'c',
 *   and so forth. If {@link start} is given and is negative, then {@link
 *   strspn} will begin examining {@link subject} at the {@link start}'th
 *   position from the end of {@link subject}.
 * @param int $length The length of the segment from {@link subject} to
 *   examine. If {@link length} is given and is non-negative, then {@link
 *   subject} will be examined for {@link length} characters after the
 *   starting position. If {@link length}is given and is negative, then
 *   {@link subject} will be examined from the starting position up to
 *   {@link length} characters from the end of {@link subject}.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strspn($subject, $mask, $start, $length){}

/**
 * Returns part of {@link haystack} string from the first occurrence of
 * {@link needle} to the end of {@link haystack}.
 * 
 * @param string $haystack The input string.
 * @param mixed $needle If {@link needle} is not a string, it is
 *   converted to an integer and applied as the ordinal value of a
 *   character.
 * @param bool $before_needle If , {@link strstr} returns the part of
 *   the {@link haystack} before the first occurrence of the {@link
 *   needle}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strstr($haystack, $needle, $before_needle){}

/**
 * {@link strtok} splits a string ({@link str}) into smaller strings
 * (tokens), with each token being delimited by any character from {@link
 * token}. That is, if you have a string like "This is an example string"
 * you could tokenize this string into its individual words by using the
 * space character as the token.
 * 
 * Note that only the first call to strtok uses the string argument.
 * Every subsequent call to strtok only needs the token to use, as it
 * keeps track of where it is in the current string. To start over, or to
 * tokenize a new string you simply call strtok with the string argument
 * again to initialize it. Note that you may put multiple tokens in the
 * token parameter. The string will be tokenized when any one of the
 * characters in the argument are found.
 * 
 * @param string $str The string being split up into smaller strings
 *   (tokens).
 * @param string $token The delimiter used when splitting up {@link
 *   str}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strtok($str, $token){}

/**
 * Returns {@link string} with all alphabetic characters converted to
 * lowercase.
 * 
 * Note that 'alphabetic' is determined by the current locale. This means
 * that in i.e. the default "C" locale, characters such as umlaut-A ()
 * will not be converted.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strtolower($str){}

/**
 * This function will use the TZ environment variable (if available) to
 * calculate the timestamp. Since PHP 5.1.0 there are easier ways to
 * define the timezone that is used across all date/time functions. That
 * process is explained in the {@link date_default_timezone_get} function
 * page.
 * 
 * @param string $time
 * @param int $now The timestamp which is used as a base for the
 *   calculation of relative dates.
 * @return int
 * @since PHP 4, PHP 5
 **/
function strtotime($time, $now){}

/**
 * Returns {@link string} with all alphabetic characters converted to
 * uppercase.
 * 
 * Note that 'alphabetic' is determined by the current locale. For
 * instance, in the default "C" locale characters such as umlaut-a (ä)
 * will not be converted.
 * 
 * @param string $string The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strtoupper($string){}

/**
 * This function returns a copy of {@link str}, translating all
 * occurrences of each character in {@link from} to the corresponding
 * character in {@link to}.
 * 
 * If {@link from} and {@link to} are different lengths, the extra
 * characters in the longer of the two are ignored.
 * 
 * @param string $str The string being translated.
 * @param string $from The string being translated to {@link to}.
 * @param string $to The string replacing {@link from}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strtr($str, $from, $to){}

/**
 * @param mixed $var The variable that is being converted to a string.
 *   {@link var} may be any scalar type. You cannot use {@link strval} on
 *   arrays or objects.
 * @return string
 * @since PHP 4, PHP 5
 **/
function strval($var){}

/**
 * Similar to {@link fgetcsv} this functions parses a string as its input
 * unlike {@link fgetcsv} which takes a file as its input.
 * 
 * @param string $input The string to parse.
 * @param string $delimiter Set the field delimiter (one character
 *   only).
 * @param string $enclosure Set the field enclosure character (one
 *   character only).
 * @param string $escape Set the escape character (one character only).
 *   Defaults as a backslash (\)
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function str_getcsv($input, $delimiter, $enclosure, $escape){}

/**
 * This function returns a string or an array with all occurrences of
 * {@link search} in {@link subject} (ignoring case) replaced with the
 * given {@link replace} value. If you don't need fancy replacing rules,
 * you should generally use this function instead of {@link preg_replace}
 * with the i modifier.
 * 
 * @param mixed $search
 * @param mixed $replace
 * @param mixed $subject If {@link subject} is an array, then the
 *   search and replace is performed with every entry of {@link subject},
 *   and the return value is an array as well.
 * @param int $count The number of matched and replaced {@link needles}
 *   will be returned in {@link count} which is passed by reference.
 * @return mixed
 * @since PHP 5
 **/
function str_ireplace($search, $replace, $subject, &$count){}

/**
 * This functions returns the {@link input} string padded on the left,
 * the right, or both sides to the specified padding length. If the
 * optional argument {@link pad_string} is not supplied, the {@link
 * input} is padded with spaces, otherwise it is padded with characters
 * from {@link pad_string} up to the limit.
 * 
 * @param string $input The input string.
 * @param int $pad_length If the value of {@link pad_length} is
 *   negative, less than, or equal to the length of the input string, no
 *   padding takes place.
 * @param string $pad_string
 * @param int $pad_type Optional argument {@link pad_type} can be
 *   STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH. If {@link pad_type} is
 *   not specified it is assumed to be STR_PAD_RIGHT.
 * @return string
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function str_pad($input, $pad_length, $pad_string, $pad_type){}

/**
 * Returns {@link input} repeated {@link multiplier} times.
 * 
 * @param string $input The string to be repeated.
 * @param int $multiplier Number of time the {@link input} string
 *   should be repeated. {@link multiplier} has to be greater than or
 *   equal to 0. If the {@link multiplier} is set to 0, the function will
 *   return an empty string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function str_repeat($input, $multiplier){}

/**
 * This function returns a string or an array with all occurrences of
 * {@link search} in {@link subject} replaced with the given {@link
 * replace} value.
 * 
 * If you don't need fancy replacing rules (like regular expressions),
 * you should always use this function instead of {@link ereg_replace} or
 * {@link preg_replace}.
 * 
 * @param mixed $search The value being searched for, otherwise known
 *   as the needle. An array may be used to designate multiple needles.
 * @param mixed $replace The replacement value that replaces found
 *   {@link search} values. An array may be used to designate multiple
 *   replacements.
 * @param mixed $subject The string or array being searched and
 *   replaced on, otherwise known as the haystack. If {@link subject} is
 *   an array, then the search and replace is performed with every entry
 *   of {@link subject}, and the return value is an array as well.
 * @param int $count
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function str_replace($search, $replace, $subject, &$count){}

/**
 * Performs the ROT13 encoding on the {@link str} argument and returns
 * the resulting string.
 * 
 * The ROT13 encoding simply shifts every letter by 13 places in the
 * alphabet while leaving non-alpha characters untouched. Encoding and
 * decoding are done by the same function, passing an encoded string as
 * argument will return the original version.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function str_rot13($str){}

/**
 * @param string $str The input string.
 * @return string
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function str_shuffle($str){}

/**
 * Converts a string to an array.
 * 
 * @param string $string The input string.
 * @param int $split_length Maximum length of the chunk.
 * @return array
 * @since PHP 5
 **/
function str_split($string, $split_length){}

/**
 * Counts the number of words inside {@link string}. If the optional
 * {@link format} is not specified, then the return value will be an
 * integer representing the number of words found. In the event the
 * {@link format} is specified, the return value will be an array,
 * content of which is dependent on the {@link format}. The possible
 * value for the {@link format} and the resultant outputs are listed
 * below.
 * 
 * For the purpose of this function, 'word' is defined as a locale
 * dependent string containing alphabetic characters, which also may
 * contain, but not start with ' and - characters.
 * 
 * @param string $string The string
 * @param int $format Specify the return value of this function. The
 *   current supported values are: 0 - returns the number of words found
 *   1 - returns an array containing all the words found inside the
 *   {@link string} 2 - returns an associative array, where the key is
 *   the numeric position of the word inside the {@link string} and the
 *   value is the actual word itself
 * @param string $charlist A list of additional characters which will
 *   be considered as 'word'
 * @return mixed
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function str_word_count($string, $format, $charlist){}

/**
 * Returns the portion of {@link string} specified by the {@link start}
 * and {@link length} parameters.
 * 
 * @param string $string The input string.
 * @param int $start If {@link start} is non-negative, the returned
 *   string will start at the {@link start}'th position in {@link
 *   string}, counting from zero. For instance, in the string 'abcdef',
 *   the character at position 0 is 'a', the character at position 2 is
 *   'c', and so forth. If {@link start} is negative, the returned string
 *   will start at the {@link start}'th character from the end of {@link
 *   string}. If {@link string} is less than or equal to {@link start}
 *   characters long, will be returned.
 *   
 *   Using a negative {@link start}
 *   
 *   <?php $rest = substr("abcdef", -1); // returns "f" $rest =
 *   substr("abcdef", -2); // returns "ef" $rest = substr("abcdef", -3,
 *   1); // returns "d" ?>
 * @param int $length If {@link length} is given and is positive, the
 *   string returned will contain at most {@link length} characters
 *   beginning from {@link start} (depending on the length of {@link
 *   string}). If {@link length} is given and is negative, then that many
 *   characters will be omitted from the end of {@link string} (after the
 *   start position has been calculated when a {@link start} is
 *   negative). If {@link start} denotes a position beyond this
 *   truncation, an empty string will be returned. If {@link length} is
 *   given and is 0, or an empty string will be returned.
 * @return string
 * @since PHP 4, PHP 5
 **/
function substr($string, $start, $length){}

/**
 * {@link substr_compare} compares {@link main_str} from position {@link
 * offset} with {@link str} up to {@link length} characters.
 * 
 * @param string $main_str The main string being compared.
 * @param string $str The secondary string being compared.
 * @param int $offset The start position for the comparison. If
 *   negative, it starts counting from the end of the string.
 * @param int $length The length of the comparison. The default value
 *   is the largest of the length of the {@link str} compared to the
 *   length of {@link main_str} less the {@link offset}.
 * @param bool $case_insensitivity If {@link case_insensitivity} is ,
 *   comparison is case insensitive.
 * @return int
 * @since PHP 5
 **/
function substr_compare($main_str, $str, $offset, $length, $case_insensitivity){}

/**
 * {@link substr_count} returns the number of times the {@link needle}
 * substring occurs in the {@link haystack} string. Please note that
 * {@link needle} is case sensitive.
 * 
 * @param string $haystack The string to search in
 * @param string $needle The substring to search for
 * @param int $offset The offset where to start counting
 * @param int $length The maximum length after the specified offset to
 *   search for the substring. It outputs a warning if the offset plus
 *   the length is greater than the {@link haystack} length.
 * @return int
 * @since PHP 4, PHP 5
 **/
function substr_count($haystack, $needle, $offset, $length){}

/**
 * {@link substr_replace} replaces a copy of {@link string} delimited by
 * the {@link start} and (optionally) {@link length} parameters with the
 * string given in {@link replacement}.
 * 
 * @param mixed $string The input string.
 * @param string $replacement The replacement string.
 * @param int $start If {@link start} is positive, the replacing will
 *   begin at the {@link start}'th offset into {@link string}. If {@link
 *   start} is negative, the replacing will begin at the {@link start}'th
 *   character from the end of {@link string}.
 * @param int $length If given and is positive, it represents the
 *   length of the portion of {@link string} which is to be replaced. If
 *   it is negative, it represents the number of characters from the end
 *   of {@link string} at which to stop replacing. If it is not given,
 *   then it will default to strlen( {@link string} ); i.e. end the
 *   replacing at the end of {@link string}. Of course, if {@link length}
 *   is zero then this function will have the effect of inserting {@link
 *   replacement} into {@link string} at the given {@link start} offset.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function substr_replace($string, $replacement, $start, $length){}

/**
 * Adds the file, directory or symbolic link at {@link path} to the
 * working directory. The item will be added to the repository the next
 * time you call {@link svn_commit} on the working copy.
 * 
 * @param string $path Path of item to add.
 * @param bool $recursive If item is directory, whether or not to
 *   recursively add all of its contents. Default is
 * @param bool $force If true, Subversion will recurse into already
 *   versioned directories in order to add unversioned files that may be
 *   hiding in those directories. Default is
 * @return bool
 * @since PECL svn >= 0.1.0
 **/
function svn_add($path, $recursive, $force){}

/**
 * Retrieves authentication parameter at {@link key}. For a list of valid
 * keys and their meanings, consult the authentication constants list.
 * 
 * @param string $key String key name. Use the authentication constants
 *   defined by this extension to specify a key.
 * @return string
 * @since PECL svn >= 0.1.0
 **/
function svn_auth_get_parameter($key){}

/**
 * Sets authentication parameter at {@link key} to {@link value}. For a
 * list of valid keys and their meanings, consult the authentication
 * constants list.
 * 
 * @param string $key String key name. Use the authentication constants
 *   defined by this extension to specify a key.
 * @param string $value String value to set to parameter at key. Format
 *   of value varies with the parameter.
 * @return void
 * @since PECL svn >= 0.1.0
 **/
function svn_auth_set_parameter($key, $value){}

/**
 * Get the SVN blame of a file from a repository URL.
 * 
 * @param string $repository_url The repository URL.
 * @param int $revision_no The revision number.
 * @return array
 * @since PECL svn >= 0.3.0
 **/
function svn_blame($repository_url, $revision_no){}

/**
 * Returns the contents of the URL {@link repos_url} to a file in the
 * repository, optionally at revision number {@link revision_no}.
 * 
 * @param string $repos_url String URL path to item in a repository.
 * @param int $revision_no Integer revision number of item to retrieve,
 *   default is the HEAD revision.
 * @return string
 * @since PECL svn >= 0.1.0
 **/
function svn_cat($repos_url, $revision_no){}

/**
 * Checks out a working copy from the repository at {@link repos} to
 * {@link targetpath} at revision {@link revision}.
 * 
 * @param string $repos String URL path to directory in repository to
 *   check out.
 * @param string $targetpath String local path to directory to check
 *   out in to
 * @param int $revision Integer revision number of repository to check
 *   out. Default is HEAD, the most recent revision.
 * @param int $flags Any combination of SVN_NON_RECURSIVE and
 *   SVN_IGNORE_EXTERNALS.
 * @return bool
 * @since PECL svn >= 0.1.0
 **/
function svn_checkout($repos, $targetpath, $revision, $flags){}

/**
 * Recursively cleanup working copy directory {@link workingdir},
 * finishing any incomplete operations and removing working copy locks.
 * Use when a working copy is in limbo and needs to be usable again.
 * 
 * @param string $workingdir String path to local working directory to
 *   cleanup
 * @return bool
 * @since PECL svn >= 0.1.0
 **/
function svn_cleanup($workingdir){}

/**
 * Returns the version of the SVN client libraries
 * 
 * @return string
 * @since PECL svn >= 0.1.0
 **/
function svn_client_version(){}

/**
 * Commits changes made in the local working copy files enumerated in the
 * {@link targets} array to the repository, with the log message {@link
 * log}. Directories in the {@link targets} array will be recursively
 * committed unless {@link dontrecurse} is set to true.
 * 
 * @param string $log String log text to commit
 * @param array $targets Array of local paths of files to be committed
 * @param bool $dontrecurse Boolean flag to disable recursive
 *   committing of directories in the {@link targets} array. Default is .
 * @return array
 * @since PECL svn >= 0.1.0
 **/
function svn_commit($log, $targets, $dontrecurse){}

/**
 * Deletes the file, directory or symbolic link at {@link path} from the
 * working directory. The item will be deleted from the repository the
 * next time you call {@link svn_commit} on the working copy.
 * 
 * @param string $path Path of item to delete.
 * @param bool $force If , the file will be deleted even if it has
 *   local modifications. Otherwise, local modifications will result in a
 *   failure. Default is
 * @return bool
 * @since PECL svn >= 0.4.0
 **/
function svn_delete($path, $force){}

/**
 * Recursively diffs two paths, {@link path1} and {@link path2}.
 * 
 * @param string $path1 First path to diff. This can be a URL to a
 *   file/directory in an SVN repository or a local file/directory path.
 * @param int $rev1 First path's revision number. Use SVN_REVISION_HEAD
 *   to specify the most recent revision.
 * @param string $path2 Second path to diff. See {@link path1} for
 *   description.
 * @param int $rev2 Second path's revision number. See {@link rev1} for
 *   description.
 * @return array
 * @since PECL svn >= 0.1.0
 **/
function svn_diff($path1, $rev1, $path2, $rev2){}

/**
 * Export the contents of either a working copy or repository into a
 * 'clean' directory.
 * 
 * @param string $frompath The path to the current repository.
 * @param string $topath The path to the new repository.
 * @param bool $working_copy If , it will export uncommitted files from
 *   the working copy.
 * @return bool
 * @since PECL svn >= 0.3.0
 **/
function svn_export($frompath, $topath, $working_copy){}

/**
 * Abort a transaction, returns true if everything is okay, false
 * otherwise
 * 
 * @param resource $txn
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_abort_txn($txn){}

/**
 * Creates and returns a stream that will be used to replace
 * 
 * @param resource $root
 * @param string $path
 * @return resource
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_apply_text($root, $path){}

/**
 * Create a new transaction
 * 
 * @param resource $repos
 * @param int $rev
 * @return resource
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_begin_txn2($repos, $rev){}

/**
 * Return true if everything is ok, false otherwise
 * 
 * @param resource $root
 * @param string $path
 * @param string $name
 * @param string $value
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_change_node_prop($root, $path, $name, $value){}

/**
 * Determines what kind of item lives at path in a given repository
 * fsroot
 * 
 * @param resource $fsroot
 * @param string $path
 * @return int
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_check_path($fsroot, $path){}

/**
 * Return true if content is different, false otherwise
 * 
 * @param resource $root1
 * @param string $path1
 * @param resource $root2
 * @param string $path2
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_contents_changed($root1, $path1, $root2, $path2){}

/**
 * Copies a file or a directory, returns true if all is ok, false
 * otherwise
 * 
 * @param resource $from_root
 * @param string $from_path
 * @param resource $to_root
 * @param string $to_path
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_copy($from_root, $from_path, $to_root, $to_path){}

/**
 * Deletes a file or a directory, return true if all is ok, false
 * otherwise
 * 
 * @param resource $root
 * @param string $path
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_delete($root, $path){}

/**
 * Enumerates the directory entries under path; returns a hash of dir
 * names to file type
 * 
 * @param resource $fsroot
 * @param string $path
 * @return array
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_dir_entries($fsroot, $path){}

/**
 * Returns a stream to access the contents of a file from a given version
 * of the fs
 * 
 * @param resource $fsroot
 * @param string $path
 * @return resource
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_file_contents($fsroot, $path){}

/**
 * Returns the length of a file from a given version of the fs
 * 
 * @param resource $fsroot
 * @param string $path
 * @return int
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_file_length($fsroot, $path){}

/**
 * Return true if the path points to a directory, false otherwise
 * 
 * @param resource $root
 * @param string $path
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_is_dir($root, $path){}

/**
 * Return true if the path points to a file, false otherwise
 * 
 * @param resource $root
 * @param string $path
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_is_file($root, $path){}

/**
 * Creates a new empty directory, returns true if all is ok, false
 * otherwise
 * 
 * @param resource $root
 * @param string $path
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_make_dir($root, $path){}

/**
 * Creates a new empty file, returns true if all is ok, false otherwise
 * 
 * @param resource $root
 * @param string $path
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_make_file($root, $path){}

/**
 * Returns the revision in which path under fsroot was created
 * 
 * @param resource $fsroot
 * @param string $path
 * @return int
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_node_created_rev($fsroot, $path){}

/**
 * Returns the value of a property for a node
 * 
 * @param resource $fsroot
 * @param string $path
 * @param string $propname
 * @return string
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_node_prop($fsroot, $path, $propname){}

/**
 * Return true if props are different, false otherwise
 * 
 * @param resource $root1
 * @param string $path1
 * @param resource $root2
 * @param string $path2
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_props_changed($root1, $path1, $root2, $path2){}

/**
 * Fetches the value of a named property
 * 
 * @param resource $fs
 * @param int $revnum
 * @param string $propname
 * @return string
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_revision_prop($fs, $revnum, $propname){}

/**
 * Get a handle on a specific version of the repository root
 * 
 * @param resource $fs
 * @param int $revnum
 * @return resource
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_revision_root($fs, $revnum){}

/**
 * Creates and returns a transaction root
 * 
 * @param resource $txn
 * @return resource
 * @since PECL svn >= 0.2.0
 **/
function svn_fs_txn_root($txn){}

/**
 * Returns the number of the youngest revision in the filesystem
 * 
 * @param resource $fs
 * @return int
 * @since PECL svn >= 0.1.0
 **/
function svn_fs_youngest_rev($fs){}

/**
 * Commits unversioned {@link path} into repository at {@link url}. If
 * {@link path} is a directory and {@link nonrecursive} is , the
 * directory will be imported recursively.
 * 
 * @param string $path Path of file or directory to import.
 * @param string $url Repository URL to import into.
 * @param bool $nonrecursive Whether or not to refrain from recursively
 *   processing directories.
 * @return bool
 * @since PECL svn >= 0.2.0
 **/
function svn_import($path, $url, $nonrecursive){}

/**
 * {@link svn_log} returns the complete history of the item at the
 * repository URL {@link repos_url}, or the history of a specific
 * revision if {@link start_revision} is set. This function is equivalent
 * to svn log --verbose -r $start_revision $repos_url.
 * 
 * @param string $repos_url Repository URL of the item to retrieve log
 *   history from.
 * @param int $start_revision Revision number of the first log to
 *   retrieve. Use SVN_REVISION_HEAD to retrieve the log from the most
 *   recent revision.
 * @param int $end_revision Revision number of the last log to
 *   retrieve. Defaults to {@link start_revision} if specified or to
 *   SVN_REVISION_INITIAL otherwise.
 * @param int $limit Number of logs to retrieve.
 * @param int $flags Any combination of SVN_OMIT_MESSAGES,
 *   SVN_DISCOVER_CHANGED_PATHS and SVN_STOP_ON_COPY.
 * @return array
 * @since PECL svn >= 0.1.0
 **/
function svn_log($repos_url, $start_revision, $end_revision, $limit, $flags){}

/**
 * This function queries the repository URL and returns a list of files
 * and directories, optionally from a specific revision. This is
 * equivalent to svn list $repos_url[@$revision_no]
 * 
 * @param string $repos_url URL of the repository, eg.
 *   http://www.example.com/svnroot. To access a local Subversion
 *   repository via filesystem, use the file URI scheme, eg.
 *   file:///home/user/svn-repos
 * @param int $revision_no Integer revision number to retrieve listing
 *   of. When omitted, the HEAD revision is used.
 * @param bool $recurse Enables recursion.
 * @return array
 * @since PECL svn >= 0.1.0
 **/
function svn_ls($repos_url, $revision_no, $recurse){}

/**
 * Creates a directory in a working copy or repository.
 * 
 * @param string $path The path to the working copy or repository.
 * @return bool
 * @since PECL svn >= 0.4.0
 **/
function svn_mkdir($path){}

/**
 * Create a new subversion repository at path
 * 
 * @param string $path
 * @param array $config
 * @param array $fsconfig
 * @return resource
 * @since PECL svn >= 0.1.0
 **/
function svn_repos_create($path, $config, $fsconfig){}

/**
 * Gets a handle on the filesystem for a repository
 * 
 * @param resource $repos
 * @return resource
 * @since PECL svn >= 0.1.0
 **/
function svn_repos_fs($repos){}

/**
 * Create a new transaction
 * 
 * @param resource $repos
 * @param int $rev
 * @param string $author
 * @param string $log_msg
 * @return resource
 * @since PECL svn >= 0.2.0
 **/
function svn_repos_fs_begin_txn_for_commit($repos, $rev, $author, $log_msg){}

/**
 * Commits a transaction and returns the new revision
 * 
 * @param resource $txn
 * @return int
 * @since PECL svn >= 0.2.0
 **/
function svn_repos_fs_commit_txn($txn){}

/**
 * Make a hot-copy of the repos at repospath; copy it to destpath
 * 
 * @param string $repospath
 * @param string $destpath
 * @param bool $cleanlogs
 * @return bool
 * @since PECL svn >= 0.1.0
 **/
function svn_repos_hotcopy($repospath, $destpath, $cleanlogs){}

/**
 * Open a shared lock on a repository.
 * 
 * @param string $path
 * @return resource
 * @since PECL svn >= 0.1.0
 **/
function svn_repos_open($path){}

/**
 * Run recovery procedures on the repository located at path.
 * 
 * @param string $path
 * @return bool
 * @since PECL svn >= 0.1.0
 **/
function svn_repos_recover($path){}

/**
 * Revert any local changes to the path in a working copy.
 * 
 * @param string $path The path to the working repository.
 * @param bool $recursive Optionally make recursive changes.
 * @return bool
 * @since PECL svn >= 0.3.0
 **/
function svn_revert($path, $recursive){}

/**
 * Returns the status of working copy files and directories, giving
 * modifications, additions, deletions and other changes to items in the
 * working copy.
 * 
 * @param string $path Local path to file or directory to retrieve
 *   status of.
 * @param int $flags Any combination of SVN_NON_RECURSIVE, SVN_ALL
 *   (regardless of modification status), SVN_SHOW_UPDATES (entries will
 *   be added for items that are out-of-date), SVN_NO_IGNORE (disregard
 *   svn:ignore properties when scanning for new files) and
 *   SVN_IGNORE_EXTERNALS.
 * @return array
 * @since PECL svn >= 0.1.0
 **/
function svn_status($path, $flags){}

/**
 * Update working copy at {@link path} to revision {@link revno}. If
 * {@link recurse} is true, directories will be recursively updated.
 * 
 * @param string $path Path to local working copy.
 * @param int $revno Revision number to update to, default is
 *   SVN_REVISION_HEAD.
 * @param bool $recurse Whether or not to recursively update
 *   directories.
 * @return int
 * @since PECL svn >= 0.1.0
 **/
function svn_update($path, $revno, $recurse){}

/**
 * Gets the URL specified by the parameter {@link url} with the given
 * {@link target}.
 * 
 * @param string $url The URL, as a string.
 * @param string $target The target, as a string.
 * @return void
 * @since PHP 4
 **/
function swf_actiongeturl($url, $target){}

/**
 * The {@link swf_actiongotoframe} function will go to the frame
 * specified by {@link framenumber}, play it, and then stop.
 * 
 * @param int $framenumber The frame number.
 * @return void
 * @since PHP 4
 **/
function swf_actiongotoframe($framenumber){}

/**
 * The {@link swf_actiongotolabel} function displays the frame with the
 * label given by the {@link label} parameter and then stops.
 * 
 * @param string $label The frame label.
 * @return void
 * @since PHP 4
 **/
function swf_actiongotolabel($label){}

/**
 * Go forward one frame.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_actionnextframe(){}

/**
 * Start playing the flash movie from the current frame.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_actionplay(){}

/**
 * Go backwards one frame.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_actionprevframe(){}

/**
 * Sets the context for all actions. You can use this to control other
 * flash movies that are currently playing.
 * 
 * @param string $target The target, as a string.
 * @return void
 * @since PHP 4
 **/
function swf_actionsettarget($target){}

/**
 * Stop playing the flash movie at the current frame.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_actionstop(){}

/**
 * Toggle the flash movie between high and low quality.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_actiontogglequality(){}

/**
 * The {@link swf_actionwaitforframe} function will check to see if the
 * frame, specified by the {@link framenumber} parameter has been loaded,
 * if not it will skip the number of actions specified by the {@link
 * skipcount} parameter. This can be useful for "Loading..." type
 * animations.
 * 
 * @param int $framenumber The frame number.
 * @param int $skipcount The number of actions to skip.
 * @return void
 * @since PHP 4
 **/
function swf_actionwaitforframe($framenumber, $skipcount){}

/**
 * Allow you to define the specifics of using a button.
 * 
 * @param int $states Defines what states the button can have, these
 *   can be any or all of the following constants: BSHitTest, BSDown,
 *   BSOver or BSUp.
 * @param int $shapeid The second parameter, the {@link shapeid} is the
 *   look of the button, this is usually the object id of the shape of
 *   the button.
 * @param int $depth This parameter is the placement of the button in
 *   the current frame.
 * @return void
 * @since PHP 4
 **/
function swf_addbuttonrecord($states, $shapeid, $depth){}

/**
 * Sets the global add color to the specified color. This color is then
 * implicitly used by the {@link swf_placeobject}, {@link
 * swf_modifyobject} and {@link swf_addbuttonrecord} functions.
 * 
 * The color of the object will be add by the given values when the
 * object is written to the screen.
 * 
 * @param float $r Red value
 * @param float $g Green value
 * @param float $b Blue value
 * @param float $a Alpha value
 * @return void
 * @since PHP 4
 **/
function swf_addcolor($r, $g, $b, $a){}

/**
 * Close a file that was opened by the {@link swf_openfile} function.
 * 
 * @param int $return_file If set then the contents of the SWF file are
 *   returned from the function.
 * @return void
 * @since PHP 4
 **/
function swf_closefile($return_file){}

/**
 * The {@link swf_definebitmap} function defines a bitmap given an image.
 * 
 * @param int $objid An SWF object id.
 * @param string $image_name A GIF, JPEG, RGB or FI image. The image
 *   will be converted into a Flash JPEG or Flash color map format.
 * @return void
 * @since PHP 4
 **/
function swf_definebitmap($objid, $image_name){}

/**
 * The {@link swf_definefont} function defines a font parameter and gives
 * it the specified id. It then sets the font given by fontname to the
 * current font.
 * 
 * @param int $fontid The id to be given to the font.
 * @param string $fontname The font so be set as current font.
 * @return void
 * @since PHP 4
 **/
function swf_definefont($fontid, $fontname){}

/**
 * Defines a line.
 * 
 * @param int $objid The object id.
 * @param float $x1 x-coordinate of start point.
 * @param float $y1 y-coordinate of start point.
 * @param float $x2 x-coordinate of end point.
 * @param float $y2 y-coordinate of end point.
 * @param float $width The line width.
 * @return void
 * @since PHP 4
 **/
function swf_defineline($objid, $x1, $y1, $x2, $y2, $width){}

/**
 * Defines a polygon given an array of x, y coordinates.
 * 
 * @param int $objid The object id.
 * @param array $coords An array of x, y coordinates.
 * @param int $npoints The number of overall points that are contained
 *   in the array given by {@link coords}
 * @param float $width The width of the polygon's border, if set to 0.0
 *   the polygon is filled.
 * @return void
 * @since PHP 4
 **/
function swf_definepoly($objid, $coords, $npoints, $width){}

/**
 * Defines a rectangle with an upper left hand coordinate and a lower
 * right hand coordinate.
 * 
 * @param int $objid The object id.
 * @param float $x1 x-coordinate of upper left point.
 * @param float $y1 y-coordinate of upper left point.
 * @param float $x2 x-coordinate of lower right point.
 * @param float $y2 y-coordinate of lower right point.
 * @param float $width Width of the rectangles border, if the width is
 *   0.0 then the rectangle is filled.
 * @return void
 * @since PHP 4
 **/
function swf_definerect($objid, $x1, $y1, $x2, $y2, $width){}

/**
 * Defines a text string using the current font and font size.
 * 
 * @param int $objid The object id.
 * @param string $str The text, as a string.
 * @param int $docenter The {@link docenter} is where the word is
 *   centered, if {@link docenter} is 1, then the word is centered in x.
 * @return void
 * @since PHP 4
 **/
function swf_definetext($objid, $str, $docenter){}

/**
 * The {@link swf_endbutton} function ends the definition of the current
 * button.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_endbutton(){}

/**
 * Ends the current action started by the {@link swf_startdoaction}
 * function.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_enddoaction(){}

/**
 * The {@link swf_endshape} completes the definition of the current
 * shape.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_endshape(){}

/**
 * Ends the definition of a symbol that was started by the {@link
 * swf_startsymbol} function.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_endsymbol(){}

/**
 * Changes the font size to the value given by the {@link size}
 * parameter.
 * 
 * @param float $size The font size, as an integer.
 * @return void
 * @since PHP 4
 **/
function swf_fontsize($size){}

/**
 * Set the current font slant to the angle indicated by the {@link slant}
 * parameter.
 * 
 * @param float $slant Positive values create a forward slant, negative
 *   values create a negative slant.
 * @return void
 * @since PHP 4
 **/
function swf_fontslant($slant){}

/**
 * Set the font tracking to the value specified by the {@link tracking}
 * parameter. This function is used to increase the spacing between
 * letters and text, positive values increase the space and negative
 * values decrease the space between letters.
 * 
 * @param float $tracking The font tracking.
 * @return void
 * @since PHP 4
 **/
function swf_fonttracking($tracking){}

/**
 * Returns information about a bitmap.
 * 
 * @param int $bitmapid The bitmap id.
 * @return array
 * @since PHP 4
 **/
function swf_getbitmapinfo($bitmapid){}

/**
 * Gets information about the font by giving the height in pixels of a
 * capital A and a lowercase x.
 * 
 * @return array
 * @since PHP 4
 **/
function swf_getfontinfo(){}

/**
 * The {@link swf_getframe} function gets the number of the current
 * frame.
 * 
 * @return int
 * @since PHP 4
 **/
function swf_getframe(){}

/**
 * Labels the current frame with the given {@link name}.
 * 
 * @param string $name The frame label.
 * @return void
 * @since PHP 4
 **/
function swf_labelframe($name){}

/**
 * Defines a viewing transformation by giving the viewing position and
 * the coordinates of a reference point in the scene.
 * 
 * @param float $view_x x-coordinate for the viewing position
 * @param float $view_y y-coordinate for the viewing position
 * @param float $view_z z-coordinate for the viewing position
 * @param float $reference_x x-coordinate for the reference point
 * @param float $reference_y y-coordinate for the reference point
 * @param float $reference_z z-coordinate for the reference point
 * @param float $twist Controls the rotation along with viewer's z
 *   axis.
 * @return void
 * @since PHP 4
 **/
function swf_lookat($view_x, $view_y, $view_z, $reference_x, $reference_y, $reference_z, $twist){}

/**
 * Updates the position and/or color of the object at the specified
 * {@link depth}.
 * 
 * @param int $depth The depth, as an integer.
 * @param int $how Determines what is updated. {@link how} can either
 *   be the constant MOD_MATRIX or MOD_COLOR or it can be a combination
 *   of both. MOD_COLOR uses the current mulcolor (specified by the
 *   function {@link swf_mulcolor}) and addcolor (specified by the
 *   function {@link swf_addcolor}) to color the object. MOD_MATRIX uses
 *   the current matrix to position the object.
 * @return void
 * @since PHP 4
 **/
function swf_modifyobject($depth, $how){}

/**
 * Sets the global multiply color to the given one. This color is then
 * implicitly used by the {@link swf_placeobject}, {@link
 * swf_modifyobject} and {@link swf_addbuttonrecord} functions.
 * 
 * The color of the object will be multiplied by the given color values
 * when the object is written to the screen.
 * 
 * @param float $r Red value
 * @param float $g Green value
 * @param float $b Blue value
 * @param float $a Alpha value
 * @return void
 * @since PHP 4
 **/
function swf_mulcolor($r, $g, $b, $a){}

/**
 * The {@link swf_nextid} function returns the next available object id.
 * 
 * @return int
 * @since PHP 4
 **/
function swf_nextid(){}

/**
 * The {@link swf_oncondition} function describes a transition that will
 * trigger an action list.
 * 
 * @param int $transition There are several types of possible
 *   transitions, the following are for buttons defined as
 *   TYPE_MENUBUTTON: IdletoOverUp OverUptoIdle OverUptoOverDown
 *   OverDowntoOverUp IdletoOverDown OutDowntoIdle MenuEnter
 *   (IdletoOverUp|IdletoOverDown) MenuExit (OverUptoIdle|OverDowntoIdle)
 *   For TYPE_PUSHBUTTON there are the following options: IdletoOverUp
 *   OverUptoIdle OverUptoOverDown OverDowntoOverUp OverDowntoOutDown
 *   OutDowntoOverDown OutDowntoIdle ButtonEnter
 *   (IdletoOverUp|OutDowntoOverDown) ButtonExit
 *   (OverUptoIdle|OverDowntoOutDown)
 * @return void
 * @since PHP 4
 **/
function swf_oncondition($transition){}

/**
 * Opens a new file. This must be the first function you call, otherwise
 * your script will not work.
 * 
 * @param string $filename The path to the SWF file. If you want to
 *   send your output to the screen, set this to php://stdout.
 * @param float $width The movie width
 * @param float $height The movie height
 * @param float $framerate The frame rate.
 * @param float $r Red value for the background.
 * @param float $g Green value for the background.
 * @param float $b Blue value for the background.
 * @return void
 * @since PHP 4
 **/
function swf_openfile($filename, $width, $height, $framerate, $r, $g, $b){}

/**
 * Defines an 3D orthographic mapping of user coordinates onto the
 * current viewport.
 * 
 * @param float $xmin
 * @param float $xmax
 * @param float $ymin
 * @param float $ymax
 * @param float $zmin
 * @param float $zmax
 * @return void
 * @since PHP 4 >= 4.0.1
 **/
function swf_ortho($xmin, $xmax, $ymin, $ymax, $zmin, $zmax){}

/**
 * Defines a two dimensional orthographic mapping of user coordinates
 * onto the current viewport, this defaults to one to one mapping of the
 * area of the Flash movie.
 * 
 * If a perspective transformation is desired, {@link swf_perspective}
 * can be used.
 * 
 * @param float $xmin
 * @param float $xmax
 * @param float $ymin
 * @param float $ymax
 * @return void
 * @since PHP 4
 **/
function swf_ortho2($xmin, $xmax, $ymin, $ymax){}

/**
 * Defines a perspective projection transformation.
 * 
 * @param float $fovy A field-of-view angle in the y direction.
 * @param float $aspect The aspect ratio of the viewport that is being
 *   drawn onto.
 * @param float $near The near clipping plane.
 * @param float $far The far clipping plane.
 * @return void
 * @since PHP 4
 **/
function swf_perspective($fovy, $aspect, $near, $far){}

/**
 * Places the object in the current frame at a specified {@link depth}.
 * 
 * This uses the current mulcolor (specified by {@link swf_mulcolor}) and
 * the current addcolor (specified by {@link swf_addcolor}) to color the
 * object and it uses the current matrix to position the object.
 * 
 * @param int $objid The object id.
 * @param int $depth Must be between 1 and 65535.
 * @return void
 * @since PHP 4
 **/
function swf_placeobject($objid, $depth){}

/**
 * The {@link swf_polarview} function defines the viewer's position in
 * polar coordinates.
 * 
 * @param float $dist The distance between the viewpoint to the world
 *   space origin.
 * @param float $azimuth Defines the azimuthal angle in the x,y
 *   coordinate plane, measured in distance from the y axis.
 * @param float $incidence Defines the angle of incidence in the y,z
 *   plane, measured in distance from the z axis. The incidence angle is
 *   defined as the angle of the viewport relative to the z axis.
 * @param float $twist Specifies the amount that the viewpoint is to be
 *   rotated about the line of sight using the right hand rule.
 * @return void
 * @since PHP 4
 **/
function swf_polarview($dist, $azimuth, $incidence, $twist){}

/**
 * Pushes the current transformation matrix back onto the stack.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_popmatrix(){}

/**
 * Enables or disables the rounding of the translation when objects are
 * placed or moved, there are times when text becomes more readable
 * because rounding has been enabled.
 * 
 * @param int $round Whether to enable rounding or not, if set to the
 *   value of 1, then rounding is enabled, if set to 0 then rounding is
 *   disabled.
 * @return void
 * @since PHP 4
 **/
function swf_posround($round){}

/**
 * Pushes the current transformation matrix back onto the stack.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_pushmatrix(){}

/**
 * Removes the last object drawn at the depth specified by {@link depth}.
 * 
 * @param int $depth The depth, as an integer.
 * @return void
 * @since PHP 4
 **/
function swf_removeobject($depth){}

/**
 * Rotates the current transformation by a given {@link angle} around the
 * given {@link axis}.
 * 
 * @param float $angle The rotation angle.
 * @param string $axis The axis. Valid values axis are x (the x axis),
 *   y (the y axis) or z (the z axis).
 * @return void
 * @since PHP 4
 **/
function swf_rotate($angle, $axis){}

/**
 * The {@link swf_scale} scales curve coordinates by the given value.
 * 
 * @param float $x x scale factor.
 * @param float $y y scale factor.
 * @param float $z z scale factor.
 * @return void
 * @since PHP 4
 **/
function swf_scale($x, $y, $z){}

/**
 * The {@link swf_setfont} sets the current font to the value given by
 * the {@link fontid} parameter.
 * 
 * @param int $fontid The font identifier.
 * @return void
 * @since PHP 4
 **/
function swf_setfont($fontid){}

/**
 * Changes the active frame to the specified on.
 * 
 * @param int $framenumber The frame number to be set.
 * @return void
 * @since PHP 4
 **/
function swf_setframe($framenumber){}

/**
 * Draws a circular arc.
 * 
 * @param float $x x-coordinate of the center.
 * @param float $y y-coordinate of the center.
 * @param float $r The arc radius.
 * @param float $ang1 The start angle.
 * @param float $ang2 The end angle.
 * @return void
 * @since PHP 4
 **/
function swf_shapearc($x, $y, $r, $ang1, $ang2){}

/**
 * Draws a quadratic bezier curve from the current location, though the
 * two given points.
 * 
 * The current position is then set to the point defined by the {@link
 * x2} and {@link y2} parameters.
 * 
 * @param float $x1 x-coordinate of the first point.
 * @param float $y1 y-coordinate of the first point.
 * @param float $x2 x-coordinate of the second point.
 * @param float $y2 y-coordinate of the second point.
 * @return void
 * @since PHP 4
 **/
function swf_shapecurveto($x1, $y1, $x2, $y2){}

/**
 * Draw a cubic bezier curve using the given coordinates.
 * 
 * The current position is then set to the {@link x3},{@link y3}
 * coordinate.
 * 
 * @param float $x1 x-coordinate of the first off curve control point.
 * @param float $y1 y-coordinate of the first off curve control point.
 * @param float $x2 x-coordinate of the second off curve control point.
 * @param float $y2 y-coordinate of the second off curve control point.
 * @param float $x3 x-coordinate of the endpoint.
 * @param float $y3 y-coordinate of the endpoint.
 * @return void
 * @since PHP 4
 **/
function swf_shapecurveto3($x1, $y1, $x2, $y2, $x3, $y3){}

/**
 * Sets the fill to bitmap clipped, empty spaces will be filled by the
 * bitmap.
 * 
 * @param int $bitmapid The bitmap id.
 * @return void
 * @since PHP 4
 **/
function swf_shapefillbitmapclip($bitmapid){}

/**
 * Sets the fill to bitmap tile, empty spaces will be filled by the
 * bitmap.
 * 
 * @param int $bitmapid The bitmap id.
 * @return void
 * @since PHP 4
 **/
function swf_shapefillbitmaptile($bitmapid){}

/**
 * Turns off filling for the current shape.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_shapefilloff(){}

/**
 * Sets the current fill style to solid, and then sets the fill color to
 * the given color.
 * 
 * @param float $r Red value
 * @param float $g Green value
 * @param float $b Blue value
 * @param float $a Alpha value
 * @return void
 * @since PHP 4
 **/
function swf_shapefillsolid($r, $g, $b, $a){}

/**
 * Sets the current line style to the given color and width.
 * 
 * @param float $r Red value
 * @param float $g Green value
 * @param float $b Blue value
 * @param float $a Alpha value
 * @param float $width The line width. If 0.0 is given then no lines
 *   are drawn.
 * @return void
 * @since PHP 4
 **/
function swf_shapelinesolid($r, $g, $b, $a, $width){}

/**
 * Draws a line to the {@link x} and {@link y} coordinates. The current
 * position is then set to that point.
 * 
 * @param float $x x-coordinate of the target.
 * @param float $y y-coordinate of the target.
 * @return void
 * @since PHP 4
 **/
function swf_shapelineto($x, $y){}

/**
 * Moves the current position to the given point.
 * 
 * @param float $x x-coordinate of the target.
 * @param float $y y-coordinate of the target.
 * @return void
 * @since PHP 4
 **/
function swf_shapemoveto($x, $y){}

/**
 * Outputs the current frame.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_showframe(){}

/**
 * Starts the definition of a button.
 * 
 * @param int $objid The object id.
 * @param int $type Can either be TYPE_MENUBUTTON or TYPE_PUSHBUTTON.
 *   The TYPE_MENUBUTTON constant allows the focus to travel from the
 *   button when the mouse is down, TYPE_PUSHBUTTON does not allow the
 *   focus to travel when the mouse is down.
 * @return void
 * @since PHP 4
 **/
function swf_startbutton($objid, $type){}

/**
 * Starts the description of an action list for the current frame. This
 * must be called before actions are defined for the current frame.
 * 
 * @return void
 * @since PHP 4
 **/
function swf_startdoaction(){}

/**
 * Starts a complex shape.
 * 
 * @param int $objid The object id.
 * @return void
 * @since PHP 4
 **/
function swf_startshape($objid){}

/**
 * Defines an object id as a symbol. Symbols are tiny flash movies that
 * can be played simultaneously.
 * 
 * @param int $objid The object id you want to define as a symbol.
 * @return void
 * @since PHP 4
 **/
function swf_startsymbol($objid){}

/**
 * Gives the width of the string in pixels, using the current font and
 * font size.
 * 
 * @param string $str The string.
 * @return float
 * @since PHP 4
 **/
function swf_textwidth($str){}

/**
 * Translates the current transformation by the given values.
 * 
 * @param float $x x value.
 * @param float $y y value.
 * @param float $z z value.
 * @return void
 * @since PHP 4
 **/
function swf_translate($x, $y, $z){}

/**
 * Selects an area for future drawing for {@link xmin} to {@link xmax}
 * and {@link ymin} to {@link ymax}, if this function is not called the
 * area defaults to the size of the screen.
 * 
 * @param float $xmin
 * @param float $xmax
 * @param float $ymin
 * @param float $ymax
 * @return void
 * @since PHP 4
 **/
function swf_viewport($xmin, $xmax, $ymin, $ymax){}

/**
 * {@link sybase_affected_rows} returns the number of rows affected by
 * the last INSERT, UPDATE or DELETE query on the server associated with
 * the specified link identifier.
 * 
 * This command is not effective for SELECT statements, only on
 * statements which modify records. To retrieve the number of rows
 * returned from a SELECT, use {@link sybase_num_rows}.
 * 
 * @param resource $link_identifier If the link identifier isn't
 *   specified, the last opened link is assumed.
 * @return int
 * @since PHP 4, PHP 5
 **/
function sybase_affected_rows($link_identifier){}

/**
 * {@link sybase_close} closes the link to a Sybase database that's
 * associated with the specified link {@link link_identifier}.
 * 
 * Note that this isn't usually necessary, as non-persistent open links
 * are automatically closed at the end of the script's execution.
 * 
 * {@link sybase_close} will not close persistent links generated by
 * {@link sybase_pconnect}.
 * 
 * @param resource $link_identifier If the link identifier isn't
 *   specified, the last opened link is assumed.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sybase_close($link_identifier){}

/**
 * {@link sybase_connect} establishes a connection to a Sybase server.
 * 
 * In case a second call is made to {@link sybase_connect} with the same
 * arguments, no new link will be established, but instead, the link
 * identifier of the already opened link will be returned.
 * 
 * The link to the server will be closed as soon as the execution of the
 * script ends, unless it's closed earlier by explicitly calling {@link
 * sybase_close}.
 * 
 * @param string $servername The servername argument has to be a valid
 *   servername that is defined in the 'interfaces' file.
 * @param string $username Sybase user name
 * @param string $password Password associated with {@link username}.
 * @param string $charset Specifies the charset for the connection
 * @param string $appname Specifies an appname for the Sybase
 *   connection. This allow you to make separate connections in the same
 *   script to the same database. This may come handy when you have
 *   started a transaction in your current connection, and you need to be
 *   able to do a separate query which cannot be performed inside this
 *   transaction.
 * @param bool $new Whether to open a new connection or use the
 *   existing one.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function sybase_connect($servername, $username, $password, $charset, $appname, $new){}

/**
 * {@link sybase_data_seek} moves the internal row pointer of the Sybase
 * result associated with the specified result identifier to pointer to
 * the specified row number. The next call to {@link sybase_fetch_row}
 * would return that row.
 * 
 * @param resource $result_identifier
 * @param int $row_number
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sybase_data_seek($result_identifier, $row_number){}

/**
 * Using {@link sybase_deadlock_retry_count}, the number of retries can
 * be defined in cases of deadlocks. By default, every deadlock is
 * retried an infinite number of times or until the process is killed by
 * Sybase, the executing script is killed (for instance, by {@link
 * set_time_limit}) or the query succeeds.
 * 
 * @param int $retry_count Values for retry_count -1 Retry forever
 *   (default) 0 Do not retry n Retry n times
 * @return void
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function sybase_deadlock_retry_count($retry_count){}

/**
 * {@link sybase_fetch_array} is an extended version of {@link
 * sybase_fetch_row}. In addition to storing the data in the numeric
 * indices of the result array, it also stores the data in associative
 * indices, using the field names as keys.
 * 
 * An important thing to note is that using {@link sybase_fetch_array} is
 * NOT significantly slower than using {@link sybase_fetch_row}, while it
 * provides a significant added value.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4, PHP 5
 **/
function sybase_fetch_array($result){}

/**
 * {@link sybase_fetch_assoc} is a version of {@link sybase_fetch_row}
 * that uses column names instead of integers for indices in the result
 * array. Columns from different tables with the same names are returned
 * as name, name1, name2, ..., nameN.
 * 
 * An important thing to note is that using {@link sybase_fetch_assoc} is
 * NOT significantly slower than using {@link sybase_fetch_row}, while it
 * provides a significant added value.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function sybase_fetch_assoc($result){}

/**
 * {@link sybase_fetch_field} can be used in order to obtain information
 * about fields in a certain query result.
 * 
 * @param resource $result
 * @param int $field_offset If the field offset isn't specified, the
 *   next field that wasn't yet retrieved by {@link sybase_fetch_field}
 *   is retrieved.
 * @return object
 * @since PHP 4, PHP 5
 **/
function sybase_fetch_field($result, $field_offset){}

/**
 * {@link sybase_fetch_object} is similar to {@link sybase_fetch_assoc},
 * with one difference - an object is returned, instead of an array.
 * 
 * Speed-wise, the function is identical to {@link sybase_fetch_array},
 * and almost as quick as {@link sybase_fetch_row} (the difference is
 * insignificant).
 * 
 * @param resource $result
 * @param mixed $object Use the second {@link object} to specify the
 *   type of object you want to return. If this parameter is omitted, the
 *   object will be of type stdClass.
 * @return object
 * @since PHP 4, PHP 5
 **/
function sybase_fetch_object($result, $object){}

/**
 * {@link sybase_fetch_row} fetches one row of data from the result
 * associated with the specified result identifier.
 * 
 * Subsequent call to {@link sybase_fetch_row} would return the next row
 * in the result set, or if there are no more rows.
 * 
 * @param resource $result
 * @return array
 * @since PHP 4, PHP 5
 **/
function sybase_fetch_row($result){}

/**
 * Seeks to the specified field offset. If the next call to {@link
 * sybase_fetch_field} won't include a field offset, this field would be
 * returned.
 * 
 * @param resource $result
 * @param int $field_offset
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sybase_field_seek($result, $field_offset){}

/**
 * {@link sybase_free_result} only needs to be called if you are worried
 * about using too much memory while your script is running. All result
 * memory will automatically be freed when the script ends. You may call
 * {@link sybase_free_result} with the result identifier as an argument
 * and the associated result memory will be freed.
 * 
 * @param resource $result
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sybase_free_result($result){}

/**
 * {@link sybase_get_last_message} returns the last message reported by
 * the server.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function sybase_get_last_message(){}

/**
 * {@link sybase_min_client_severity} sets the minimum client severity
 * level.
 * 
 * @param int $severity
 * @return void
 * @since PHP 4, PHP 5
 **/
function sybase_min_client_severity($severity){}

/**
 * {@link sybase_min_error_severity} sets the minimum error severity
 * level.
 * 
 * @param int $severity
 * @return void
 * @since PHP 4, PHP 5
 **/
function sybase_min_error_severity($severity){}

/**
 * {@link sybase_min_message_severity} sets the minimum message severity
 * level.
 * 
 * @param int $severity
 * @return void
 * @since PHP 4, PHP 5
 **/
function sybase_min_message_severity($severity){}

/**
 * {@link sybase_min_server_severity} sets the minimum server severity
 * level.
 * 
 * @param int $severity
 * @return void
 * @since PHP 4, PHP 5
 **/
function sybase_min_server_severity($severity){}

/**
 * {@link sybase_num_fields} returns the number of fields in a result
 * set.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function sybase_num_fields($result){}

/**
 * {@link sybase_num_rows} returns the number of rows in a result set.
 * 
 * @param resource $result
 * @return int
 * @since PHP 4, PHP 5
 **/
function sybase_num_rows($result){}

/**
 * {@link sybase_pconnect} acts very much like {@link sybase_connect}
 * with two major differences.
 * 
 * First, when connecting, the function would first try to find a
 * (persistent) link that's already open with the same host, username and
 * password. If one is found, an identifier for it will be returned
 * instead of opening a new connection.
 * 
 * Second, the connection to the SQL server will not be closed when the
 * execution of the script ends. Instead, the link will remain open for
 * future use ({@link sybase_close} will not close links established by
 * {@link sybase_pconnect}).
 * 
 * This type of links is therefore called 'persistent'.
 * 
 * @param string $servername The servername argument has to be a valid
 *   servername that is defined in the 'interfaces' file.
 * @param string $username Sybase user name
 * @param string $password Password associated with {@link username}.
 * @param string $charset Specifies the charset for the connection
 * @param string $appname Specifies an appname for the Sybase
 *   connection. This allow you to make separate connections in the same
 *   script to the same database. This may come handy when you have
 *   started a transaction in your current connection, and you need to be
 *   able to do a separate query which cannot be performed inside this
 *   transaction.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function sybase_pconnect($servername, $username, $password, $charset, $appname){}

/**
 * {@link sybase_query} sends a query to the currently active database on
 * the server that's associated with the specified link identifier.
 * 
 * @param string $query
 * @param resource $link_identifier If the link identifier isn't
 *   specified, the last opened link is assumed. If no link is open, the
 *   function tries to establish a link as if {@link sybase_connect} was
 *   called, and use it.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function sybase_query($query, $link_identifier){}

/**
 * Returns the contents of the cell at the row and offset in the
 * specified Sybase result set.
 * 
 * When working on large result sets, you should consider using one of
 * the functions that fetch an entire row (specified below). As these
 * functions return the contents of multiple cells in one function call,
 * they're MUCH quicker than sybase_result(). Also, note that specifying
 * a numeric offset for the field argument is much quicker than
 * specifying a fieldname or tablename.fieldname argument.
 * 
 * Recommended high-performance alternatives: {@link sybase_fetch_row},
 * {@link sybase_fetch_array} and {@link sybase_fetch_object}.
 * 
 * @param resource $result
 * @param int $row
 * @param mixed $field The field argument can be the field's offset, or
 *   the field's name, or the field's table dot field's name
 *   (tablename.fieldname). If the column name has been aliased ('select
 *   foo as bar from...'), use the alias instead of the column name.
 * @return string
 * @since PHP 4, PHP 5
 **/
function sybase_result($result, $row, $field){}

/**
 * {@link sybase_select_db} sets the current active database on the
 * server that's associated with the specified link identifier.
 * 
 * Every subsequent call to {@link sybase_query} will be made on the
 * active database.
 * 
 * @param string $database_name
 * @param resource $link_identifier If no link identifier is specified,
 *   the last opened link is assumed. If no link is open, the function
 *   will try to establish a link as if {@link sybase_connect} was
 *   called, and use it.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function sybase_select_db($database_name, $link_identifier){}

/**
 * {@link sybase_set_message_handler} sets a user function to handle
 * messages generated by the server. You may specify the name of a global
 * function, or use an array to specify an object reference and a method
 * name.
 * 
 * @param callback $handler The handler expects five arguments in the
 *   following order: message number, severity, state, line number and
 *   description. The first four are integers. The last is a string. If
 *   the function returns , PHP generates an ordinary error message.
 * @param resource $connection
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function sybase_set_message_handler($handler, $connection){}

/**
 * {@link sybase_unbuffered_query} sends a query to the currently active
 * database on the server that's associated with the specified link
 * identifier. If the link identifier isn't specified, the last opened
 * link is assumed. If no link is open, the function tries to establish a
 * link as if {@link sybase_connect} was called, and use it.
 * 
 * Unlike {@link sybase_query}, {@link sybase_unbuffered_query} reads
 * only the first row of the result set. {@link sybase_fetch_array} and
 * similar function read more rows as needed. {@link sybase_data_seek}
 * reads up to the target row. The behavior may produce better
 * performance for large result sets.
 * 
 * {@link sybase_num_rows} will only return the correct number of rows if
 * all result sets have been read. To Sybase, the number of rows is not
 * known and is therefore computed by the client implementation.
 * 
 * @param string $query
 * @param resource $link_identifier
 * @param bool $store_result The optional {@link store_result} can be
 *   to indicate the resultsets shouldn't be fetched into memory, thus
 *   minimizing memory usage which is particularly interesting with very
 *   large resultsets.
 * @return resource
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function sybase_unbuffered_query($query, $link_identifier, $store_result){}

/**
 * {@link symlink} creates a symbolic link to the existing {@link target}
 * with the specified name {@link link}.
 * 
 * @param string $target Target of the link.
 * @param string $link The link name.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function symlink($target, $link){}

/**
 * {@link syslog} generates a log message that will be distributed by the
 * system logger.
 * 
 * For information on setting up a user defined log handler, see the
 * syslog.conf 5 Unix manual page. More information on the syslog
 * facilities and option can be found in the man pages for syslog 3 on
 * Unix machines.
 * 
 * @param int $priority {@link priority} is a combination of the
 *   facility and the level. Possible values are: {@link syslog}
 *   Priorities (in descending order) Constant Description LOG_EMERG
 *   system is unusable LOG_ALERT action must be taken immediately
 *   LOG_CRIT critical conditions LOG_ERR error conditions LOG_WARNING
 *   warning conditions LOG_NOTICE normal, but significant, condition
 *   LOG_INFO informational message LOG_DEBUG debug-level message
 * @param string $message The message to send, except that the two
 *   characters %m will be replaced by the error message string
 *   (strerror) corresponding to the present value of errno.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function syslog($priority, $message){}

/**
 * {@link system} is just like the C version of the function in that it
 * executes the given {@link command} and outputs the result.
 * 
 * The {@link system} call also tries to automatically flush the web
 * server's output buffer after each line of output if PHP is running as
 * a server module.
 * 
 * If you need to execute a command and have all the data from the
 * command passed directly back without any interference, use the {@link
 * passthru} function.
 * 
 * @param string $command The command that will be executed.
 * @param int $return_var If the {@link return_var} argument is
 *   present, then the return status of the executed command will be
 *   written to this variable.
 * @return string
 * @since PHP 4, PHP 5
 **/
function system($command, &$return_var){}

/**
 * Returns three samples representing the average system load (the number
 * of processes in the system run queue) over the last 1, 5 and 15
 * minutes, respectively.
 * 
 * @return array
 * @since PHP 5 >= 5.1.3
 **/
function sys_getloadavg(){}

/**
 * Returns the path of the directory PHP stores temporary files in by
 * default.
 * 
 * @return string
 * @since PHP 5 >= 5.2.1
 **/
function sys_get_temp_dir(){}

/**
 * {@link tan} returns the tangent of the {@link arg} parameter. The
 * {@link arg} parameter is in radians.
 * 
 * @param float $arg The argument to process in radians
 * @return float
 * @since PHP 4, PHP 5
 **/
function tan($arg){}

/**
 * Returns the hyperbolic tangent of {@link arg}, defined as
 * sinh(arg)/cosh(arg).
 * 
 * @param float $arg The argument to process
 * @return float
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function tanh($arg){}

/**
 * This function consults the /etc/hosts.allow and /etc/hosts.deny files
 * to check if access to service {@link daemon} should be granted or
 * denied for a client.
 * 
 * @param string $daemon The service name.
 * @param string $address The client remote address. Can be either an
 *   IP address or a domain name.
 * @param string $user An optional user name.
 * @param bool $nodns If {@link address} looks like domain name then
 *   DNS is used to resolve it to IP address; set {@link nodns} to to
 *   avoid this.
 * @return bool
 * @since PECL tcpwrap >= 0.1.0
 **/
function tcpwrap_check($daemon, $address, $user, $nodns){}

/**
 * Creates a file with a unique filename, with access permission set to
 * 0600, in the specified directory. If the directory does not exist,
 * {@link tempnam} may generate a file in the system's temporary
 * directory, and return the name of that.
 * 
 * @param string $dir The directory where the temporary filename will
 *   be created.
 * @param string $prefix The prefix of the generated temporary
 *   filename.
 * @return string
 * @since PHP 4, PHP 5
 **/
function tempnam($dir, $prefix){}

/**
 * This function sets the domain to search within when calls are made to
 * {@link gettext}, usually the named after an application.
 * 
 * @param string $text_domain The new message domain, or to get the
 *   current setting without changing it
 * @return string
 * @since PHP 4, PHP 5
 **/
function textdomain($text_domain){}

/**
 * {@link tidy_access_count} returns the number of accessibility warnings
 * found for the specified document.
 * 
 * @param tidy $object
 * @return int
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_access_count($object){}

/**
 * This function cleans and repairs the given tidy {@link object}.
 * 
 * @param tidy $object
 * @return bool
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_clean_repair($object){}

/**
 * Returns the number of errors encountered in the configuration of the
 * specified tidy {@link object}.
 * 
 * @param tidy $object
 * @return int
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_config_count($object){}

/**
 * Runs diagnostic tests on the given tidy {@link object}, adding some
 * more information about the document in the error buffer.
 * 
 * @param tidy $object
 * @return bool
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_diagnose($object){}

/**
 * Returns the number of Tidy errors encountered for the specified
 * document.
 * 
 * @param tidy $object
 * @return int
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_error_count($object){}

/**
 * Returns the value of the specified {@link option} for the specified
 * tidy {@link object}.
 * 
 * @param tidy $object
 * @param string $option You will find a list with each configuration
 *   option and their types at: .
 * @return mixed
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_getopt($object, $option){}

/**
 * Returns a tidyNode object starting from the <body> tag of the tidy
 * parse tree.
 * 
 * @param tidy $object
 * @return tidyNode
 * @since PHP 5, PECL tidy 0.5.2-1.0
 **/
function tidy_get_body($object){}

/**
 * Gets the list of the configuration options in use by the given tidy
 * {@link object}.
 * 
 * @param tidy $object
 * @return array
 * @since PHP 5, PECL tidy >= 0.7.0
 **/
function tidy_get_config($object){}

/**
 * Returns warnings and errors which occurred parsing the specified
 * document.
 * 
 * @param tidy $object
 * @return string
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_get_error_buffer($object){}

/**
 * Returns a tidyNode object starting from the <head> tag of the tidy
 * parse tree.
 * 
 * @param tidy $object
 * @return tidyNode
 * @since PHP 5, PECL tidy 0.5.2-1.0.0
 **/
function tidy_get_head($object){}

/**
 * Returns a tidyNode object starting from the <html> tag of the tidy
 * parse tree.
 * 
 * @param tidy $object
 * @return tidyNode
 * @since PHP 5, PECL tidy 0.5.2-1.0.0
 **/
function tidy_get_html($object){}

/**
 * Returns the detected HTML version for the specified tidy {@link
 * object}.
 * 
 * @param tidy $object
 * @return int
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_get_html_ver($object){}

/**
 * {@link tidy_get_opt_doc} returns the documentation for the given
 * option name.
 * 
 * @param tidy $object
 * @param string $optname The option name
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function tidy_get_opt_doc($object, $optname){}

/**
 * Gets a string with the repaired html.
 * 
 * @param tidy $object
 * @return string
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_get_output($object){}

/**
 * Gets the release date of the Tidy library.
 * 
 * @return string
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_get_release(){}

/**
 * Returns a tidyNode object representing the root of the tidy parse
 * tree.
 * 
 * @param tidy $object
 * @return tidyNode
 * @since PHP 5, PECL tidy 0.5.2-1.0.0
 **/
function tidy_get_root($object){}

/**
 * Returns the status for the specified tidy {@link object}.
 * 
 * @param tidy $object
 * @return int
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_get_status($object){}

/**
 * Tells if the document is a XHTML document.
 * 
 * @param tidy $object
 * @return bool
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_is_xhtml($object){}

/**
 * Tells if the document is a generic (non HTML/XHTML) XML document.
 * 
 * @param tidy $object
 * @return bool
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_is_xml($object){}

/**
 * Loads a Tidy configuration file, with the specified {@link encoding}.
 * 
 * @param string $filename
 * @param string $encoding
 * @return void
 * @since PECL tidy >= 0.5.2
 **/
function tidy_load_config($filename, $encoding){}

/**
 * Parses the given file.
 * 
 * @param string $filename If the {@link filename} parameter is given,
 *   this function will also read that file and initialize the object
 *   with the file, acting like {@link tidy_parse_file}.
 * @param mixed $config The config {@link config} can be passed either
 *   as an array or as a string. If a string is passed, it is interpreted
 *   as the name of the configuration file, otherwise, it is interpreted
 *   as the options themselves. For an explanation about each option, see
 *   .
 * @param string $encoding The {@link encoding} parameter sets the
 *   encoding for input/output documents. The possible values for
 *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
 *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
 * @param bool $use_include_path Search for the file in the
 *   include_path.
 * @return tidy
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_parse_file($filename, $config, $encoding, $use_include_path){}

/**
 * Parses a document stored in a string.
 * 
 * @param string $input The data to be parsed.
 * @param mixed $config The config {@link config} can be passed either
 *   as an array or as a string. If a string is passed, it is interpreted
 *   as the name of the configuration file, otherwise, it is interpreted
 *   as the options themselves. For an explanation about each option,
 *   visit .
 * @param string $encoding The {@link encoding} parameter sets the
 *   encoding for input/output documents. The possible values for
 *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
 *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
 * @return tidy
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_parse_string($input, $config, $encoding){}

/**
 * Repairs the given file and returns it as a string.
 * 
 * @param string $filename The file to be repaired.
 * @param mixed $config The config {@link config} can be passed either
 *   as an array or as a string. If a string is passed, it is interpreted
 *   as the name of the configuration file, otherwise, it is interpreted
 *   as the options themselves. Check
 *   http://tidy.sourceforge.net/docs/quickref.html for an explanation
 *   about each option.
 * @param string $encoding The {@link encoding} parameter sets the
 *   encoding for input/output documents. The possible values for
 *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
 *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
 * @param bool $use_include_path Search for the file in the
 *   include_path.
 * @return string
 * @since PHP 5, PECL tidy >= 0.7.0
 **/
function tidy_repair_file($filename, $config, $encoding, $use_include_path){}

/**
 * Repairs the given string.
 * 
 * @param string $data The data to be repaired.
 * @param mixed $config The config {@link config} can be passed either
 *   as an array or as a string. If a string is passed, it is interpreted
 *   as the name of the configuration file, otherwise, it is interpreted
 *   as the options themselves. Check for an explanation about each
 *   option.
 * @param string $encoding The {@link encoding} parameter sets the
 *   encoding for input/output documents. The possible values for
 *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
 *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
 * @return string
 * @since PHP 5, PECL tidy >= 0.7.0
 **/
function tidy_repair_string($data, $config, $encoding){}

/**
 * This function restores the Tidy configuration to the default values.
 * 
 * @return bool
 * @since PECL tidy >= 0.7.0
 **/
function tidy_reset_config(){}

/**
 * Saves current settings to the specified file. Only non-default values
 * are written.
 * 
 * @param string $filename Path to the config file.
 * @return bool
 * @since PECL tidy >= 0.5.2
 **/
function tidy_save_config($filename){}

/**
 * {@link tidy_setopt} updates the specified {@link option} with a new
 * {@link value}.
 * 
 * @param string $option The tidy option name. A list of available
 *   configuration options may be found at: .
 * @param mixed $value The tidy option name.
 * @return bool
 * @since PECL tidy >= 0.5.2
 **/
function tidy_setopt($option, $value){}

/**
 * Sets the encoding for input/output documents.
 * 
 * @param string $encoding The {@link encoding} parameter sets the
 *   encoding for input/output documents. The possible values for
 *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
 *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
 * @return bool
 * @since PECL tidy >= 0.5.2
 **/
function tidy_set_encoding($encoding){}

/**
 * Returns the number of Tidy warnings encountered for the specified
 * document.
 * 
 * @param tidy $object
 * @return int
 * @since PHP 5, PECL tidy >= 0.5.2
 **/
function tidy_warning_count($object){}

/**
 * Returns the current time measured in the number of seconds since the
 * Unix Epoch (January 1 1970 00:00:00 GMT).
 * 
 * @return int
 * @since PHP 4, PHP 5
 **/
function time(){}

/**
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function timezone_abbreviations_list(){}

/**
 * @param int $what One of DateTimeZone class constants.
 * @param string $country A two-letter ISO 3166-1 compatible country
 *   code.
 * @return array
 * @since PHP 5 >= 5.1.0
 **/
function timezone_identifiers_list($what, $country){}

/**
 * Returns location information for a timezone, including country code,
 * latitude/longitude and comments.
 * 
 * @return array
 * @since PHP 5 >= 5.3.0
 **/
function timezone_location_get(){}

/**
 * @param string $abbr Time zone abbreviation.
 * @param int $gmtOffset Offset from GMT in seconds. Defaults to -1
 *   which means that first found time zone corresponding to {@link abbr}
 *   is returned. Otherwise exact offset is searched and only if not
 *   found then the first time zone with any offset is returned.
 * @param int $isdst Daylight saving time indicator. If {@link abbr}
 *   doesn't exist then the time zone is searched solely by {@link
 *   offset} and {@link isdst}.
 * @return string
 * @since PHP 5 >= 5.1.3
 **/
function timezone_name_from_abbr($abbr, $gmtOffset, $isdst){}

/**
 * Returns the name of the timezone.
 * 
 * @return string
 * @since PHP 5 >= 5.1.0
 **/
function timezone_name_get(){}

/**
 * This function returns the offset to GMT for the date/time specified in
 * the {@link datetime} parameter. The GMT offset is calculated with the
 * timezone information contained in the DateTimeZone object being used.
 * 
 * @param DateTimeZone $object DateTime that contains the date/time to
 *   compute the offset from.
 * @param DateTime $datetime
 * @return int
 * @since PHP 5 >= 5.1.0
 **/
function timezone_offset_get($object, $datetime){}

/**
 * Creates new DateTimeZone object.
 * 
 * @param string $timezone One of timezones.
 * @return DateTimeZone
 * @since PHP 5 >= 5.1.0
 **/
function timezone_open($timezone){}

/**
 * @param DateTimeZone $object Begin timestamp.
 * @param int $timestamp_begin End timestamp.
 * @param int $timestamp_end
 * @return array
 * @since PHP 5 >= 5.2.0
 **/
function timezone_transitions_get($object, $timestamp_begin, $timestamp_end){}

/**
 * Returns the current version of the timezonedb.
 * 
 * @return string
 * @since PHP 5 >= 5.3.0
 **/
function timezone_version_get(){}

/**
 * Delays program execution for the given number of {@link seconds} and
 * {@link nanoseconds}.
 * 
 * @param int $seconds Must be a positive integer.
 * @param int $nanoseconds Must be a positive integer less than 1
 *   billion.
 * @return mixed
 * @since PHP 5
 **/
function time_nanosleep($seconds, $nanoseconds){}

/**
 * Makes the script sleep until the specified {@link timestamp}.
 * 
 * @param float $timestamp The timestamp when the script should wake.
 * @return bool
 * @since PHP 5 >= 5.1.0
 **/
function time_sleep_until($timestamp){}

/**
 * Creates a temporary file with a unique name in read-write (w+) mode
 * and returns a file handle .
 * 
 * The file is automatically removed when closed (using {@link fclose}),
 * or when the script ends.
 * 
 * For details, consult your system documentation on the tmpfile(3)
 * function, as well as the stdio.h header file.
 * 
 * @return resource
 * @since PHP 4, PHP 5
 **/
function tmpfile(){}

/**
 * {@link token_get_all} parses the given {@link source} string into PHP
 * language tokens using the Zend engines lexical scanner.
 * 
 * For a list of parser tokens, see , or use {@link token_name} to
 * translate a token value into its string representation.
 * 
 * @param string $source The PHP source to parse.
 * @return array
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function token_get_all($source){}

/**
 * {@link token_name} gets the symbolic name for a PHP {@link token}
 * value.
 * 
 * @param int $token The token value.
 * @return string
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function token_name($token){}

/**
 * Attempts to set the access and modification times of the file named in
 * the {@link filename} parameter to the value given in {@link time}.
 * Note that the access time is always modified, regardless of the number
 * of parameters.
 * 
 * If the file does not exist, it will be created.
 * 
 * @param string $filename The name of the file being touched.
 * @param int $time The touch time. If {@link time} is not supplied,
 *   the current system time is used.
 * @param int $atime If present, the access time of the given filename
 *   is set to the value of {@link atime}. Otherwise, it is set to {@link
 *   time}.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function touch($filename, $time, $atime){}

/**
 * Used to trigger a user error condition, it can be used by in
 * conjunction with the built-in error handler, or with a user defined
 * function that has been set as the new error handler ({@link
 * set_error_handler}).
 * 
 * This function is useful when you need to generate a particular
 * response to an exception at runtime.
 * 
 * @param string $error_msg The designated error message for this
 *   error. It's limited to 1024 characters in length. Any additional
 *   characters beyond 1024 will be truncated.
 * @param int $error_type The designated error type for this error. It
 *   only works with the E_USER family of constants, and will default to
 *   E_USER_NOTICE.
 * @return bool
 * @since PHP 4 >= 4.0.1, PHP 5
 **/
function trigger_error($error_msg, $error_type){}

/**
 * This function returns a string with whitespace stripped from the
 * beginning and end of {@link str}. Without the second parameter, {@link
 * trim} will strip these characters: " " (ASCII 32 (0x20)), an ordinary
 * space. "\t" (ASCII 9 (0x09)), a tab. "\n" (ASCII 10 (0x0A)), a new
 * line (line feed). "\r" (ASCII 13 (0x0D)), a carriage return. "\0"
 * (ASCII 0 (0x00)), the NUL-byte. "\x0B" (ASCII 11 (0x0B)), a vertical
 * tab.
 * 
 * @param string $str The string that will be trimmed.
 * @param string $charlist Optionally, the stripped characters can also
 *   be specified using the {@link charlist} parameter. Simply list all
 *   characters that you want to be stripped. With .. you can specify a
 *   range of characters.
 * @return string
 * @since PHP 4, PHP 5
 **/
function trim($str, $charlist){}

/**
 * This function sorts an array such that array indices maintain their
 * correlation with the array elements they are associated with, using a
 * user-defined comparison function.
 * 
 * This is used mainly when sorting associative arrays where the actual
 * element order is significant.
 * 
 * @param array $array The input array.
 * @param callback $cmp_function See {@link usort} and {@link uksort}
 *   for examples of user-defined comparison functions.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function uasort(&$array, $cmp_function){}

/**
 * Returns a string with the first character of {@link str} capitalized,
 * if that character is alphabetic.
 * 
 * Note that 'alphabetic' is determined by the current locale. For
 * instance, in the default "C" locale characters such as umlaut-a ()
 * will not be converted.
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ucfirst($str){}

/**
 * Returns a string with the first character of each word in {@link str}
 * capitalized, if that character is alphabetic.
 * 
 * The definition of a word is any string of characters that is
 * immediately after a whitespace (These are: space, form-feed, newline,
 * carriage return, horizontal tab, and vertical tab).
 * 
 * @param string $str The input string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function ucwords($str){}

/**
 * {@link udm_add_search_limit} adds search restrictions.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param int $var Defines the parameter, indicating limits. Possible
 *   {@link var} values: UDM_LIMIT_URL - defines document URL limitations
 *   to limit the search through subsection of the database. It supports
 *   SQL % and _ LIKE wildcards, where % matches any number of
 *   characters, even zero characters, and _ matches exactly one
 *   character. E.g. http://www.example.___/catalog may stand for
 *   http://www.example.com/catalog and http://www.example.net/catalog.
 *   UDM_LIMIT_TAG - defines site TAG limitations. In indexer-conf you
 *   can assign specific TAGs to various sites and parts of a site. Tags
 *   in mnoGoSearch 3.1.x are lines, that may contain metasymbols % and
 *   _. Metasymbols allow searching among groups of tags. E.g. there are
 *   links with tags ABCD and ABCE, and search restriction is by ABC_ -
 *   the search will be made among both of the tags. UDM_LIMIT_LANG -
 *   defines document language limitations. UDM_LIMIT_CAT - defines
 *   document category limitations. Categories are similar to tag
 *   feature, but nested. So you can have one category inside another and
 *   so on. You have to use two characters for each level. Use a hex
 *   number going from 0-F or a 36 base number going from 0-Z. Therefore
 *   a top-level category like 'Auto' would be 01. If it has a
 *   subcategory like 'Ford', then it would be 01 (the parent category)
 *   and then 'Ford' which we will give 01. Put those together and you
 *   get 0101. If 'Auto' had another subcategory named 'VW', then it's id
 *   would be 01 because it belongs to the 'Ford' category and then 02
 *   because it's the next category. So it's id would be 0102. If VW had
 *   a sub category called 'Engine' then it's id would start at 01 again
 *   and it would get the 'VW' id 02 and 'Auto' id of 01, making it
 *   010201. If you want to search for sites under that category then you
 *   pass it cat=010201 in the URL. UDM_LIMIT_DATE - defines limitation
 *   by date the document was modified. Format of parameter value: a
 *   string with first character < or >, then with no space - date in
 *   unixtime format, for example:
 *   
 *   <?php udm_add_search_limit($udm, UDM_LIMIT_DATE, "&lt;908012006");
 *   ?>
 *   
 *   If > character is used, then the search will be restricted to those
 *   documents having a modification date greater than entered, if <,
 *   then smaller.
 * @param string $val Defines the value of the current parameter.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_add_search_limit($agent, $var, $val){}

/**
 * Allocate a mnoGoSearch session.
 * 
 * @param string $dbaddr {@link dbaddr} - URL-style database
 *   description, with options (type, host, database name, port, user and
 *   password) to connect to SQL database. Do not matter for built-in
 *   text files support. Format for {@link dbaddr}:
 *   DBType:[//[DBUser[:DBPass]@]DBHost[:DBPort]]/DBName/. Currently
 *   supported DBType values are: mysql, pgsql, msql, solid, mssql,
 *   oracle, and ibase. Actually, it does not matter for native libraries
 *   support, but ODBC users should specify one of the supported values.
 *   If your database type is not supported, you may use unknown instead.
 * @param string $dbmode {@link dbmode} - You may select the SQL
 *   database mode of words storage. Possible values of {@link dbmode}
 *   are: single, multi, crc, or crc-multi. When single is specified, all
 *   words are stored in the same table. If multi is selected, words will
 *   be located in different tables depending of their lengths. "multi"
 *   mode is usually faster, but requires more tables in the database. If
 *   "crc" mode is selected, mnoGoSearch will store 32 bit integer word
 *   IDs calculated by CRC32 algorithm instead of words. This mode
 *   requires less disk space and it is faster comparing with "single"
 *   and "multi" modes. crc-multi uses the same storage structure with
 *   the "crc" mode, but also stores words in different tables depending
 *   on words lengths like in "multi" mode.
 * @return resource
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_alloc_agent($dbaddr, $dbmode){}

/**
 * {@link udm_alloc_agent_array} will create an agent with multiple
 * database connections.
 * 
 * @param array $databases The array {@link databases} must contain one
 *   database URL per element, analog to the first parameter of {@link
 *   udm_alloc_agent}.
 * @return resource
 * @since PHP 4 >= 4.3.3, PHP 5 = 1.0.0
 **/
function udm_alloc_agent_array($databases){}

/**
 * Gets the mnoGoSearch API version.
 * 
 * This function allows the user to identify which API functions are
 * available, e.g. {@link udm_get_doc_count} function is only available
 * in mnoGoSearch 3.1.11 or later.
 * 
 * @return int
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_api_version(){}

/**
 * Gets all the categories on the same level with the current one.
 * 
 * The function can be useful for developing categories tree browser.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param string $category
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.0.0
 **/
function udm_cat_list($agent, $category){}

/**
 * Returns an array describing the path in the categories tree from the
 * tree root to the current one, specified by {@link category}.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param string $category
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5 = 1.0.0
 **/
function udm_cat_path($agent, $category){}

/**
 * @param resource $agent
 * @param string $charset
 * @return bool
 * @since PHP 4 >= 4.2.0, PHP 5 = 1.0.0
 **/
function udm_check_charset($agent, $charset){}

/**
 * @param resource $agent
 * @param int $link
 * @param string $doc_id
 * @return int
 * @since PHP 4 >= 4.2.0
 **/
function udm_check_stored($agent, $link, $doc_id){}

/**
 * {@link udm_clear_search_limits} resets defined search limitations.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_clear_search_limits($agent){}

/**
 * @param resource $agent
 * @param int $link
 * @return int
 * @since PHP 4 >= 4.2.0
 **/
function udm_close_stored($agent, $link){}

/**
 * @param resource $agent
 * @param string $str
 * @return int
 * @since PHP 4 >= 4.2.0, PHP 5 = 1.0.0
 **/
function udm_crc32($agent, $str){}

/**
 * Receiving numeric agent error code.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @return int
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_errno($agent){}

/**
 * Gets the agent error message.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_error($agent){}

/**
 * Performs a search.
 * 
 * The search itself. The first argument - session, the next one - query
 * itself. To find something just type words you want to find and press
 * SUBMIT button. For example, "mysql odbc". You should not use quotes "
 * in query, they are written here only to divide a query from other
 * text. mnoGoSearch will find all documents that contain word "mysql"
 * and/or word "odbc". Best documents having bigger weights will be
 * displayed first. If you use search mode ALL, search will return
 * documents that contain both (or more) words you entered. In case you
 * use mode ANY, the search will return list of documents that contain
 * any of the words you entered. If you want more advanced results you
 * may use query language. You should select "bool" match mode in the
 * search from.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param string $query mnoGoSearch understands the following boolean
 *   operators: & - logical AND. For example, mysql & odbc. mnoGoSearch
 *   will find any URLs that contain both mysql and odbc. | - logical OR.
 *   For example mysql|odbc. mnoGoSearch will find any URLs, that contain
 *   word mysql or word odbc. ~ - logical NOT. For example mysql & ~odbc.
 *   mnoGoSearch will find URLs that contain word mysql and do not
 *   contain word odbc at the same time. Note that ~ just excludes given
 *   word from results. Query ~odbc will find nothing! () - group command
 *   to compose more complex queries. For example (mysql | msql) &
 *   ~postgres. Query language is simple and powerful at the same time.
 *   Just consider query as usual boolean expression.
 * @return resource
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_find($agent, $query){}

/**
 * Freeing up memory allocated for agent session.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @return int
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_free_agent($agent){}

/**
 * Frees the memory allocated for ispell data.
 * 
 * @param int $agent A link to Agent, received after call to {@link
 *   udm_alloc_agent}.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_free_ispell_data($agent){}

/**
 * Freeing up memory allocated for results.
 * 
 * @param resource $res A link to a result identifier, received after
 *   call to {@link udm_find}.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_free_res($res){}

/**
 * {@link udm_get_doc_count} returns the number of documents in the
 * database.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @return int
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_get_doc_count($agent){}

/**
 * Fetch a mnoGoSearch result field.
 * 
 * @param resource $res {@link res} - a link to result identifier,
 *   received after call to {@link udm_find}.
 * @param int $row {@link row} - the number of the link on the current
 *   page. May have values from 0 to {@link UDM_PARAM_NUM_ROWS-1}.
 * @param int $field {@link field} - field identifier, may have the
 *   following values: UDM_FIELD_URL - document URL field
 *   UDM_FIELD_CONTENT - document Content-type field (for example,
 *   text/html). UDM_FIELD_CATEGORY - document category field. Use {@link
 *   udm_cat_path} to get full path to current category from the
 *   categories tree root. (This parameter is available only in PHP 4.0.6
 *   or later). UDM_FIELD_TITLE - document title field.
 *   UDM_FIELD_KEYWORDS - document keywords field (from META KEYWORDS
 *   tag). UDM_FIELD_DESC - document description field (from META
 *   DESCRIPTION tag). UDM_FIELD_TEXT - document body text (the first
 *   couple of lines to give an idea of what the document is about).
 *   UDM_FIELD_SIZE - document size. UDM_FIELD_URLID - unique URL ID of
 *   the link. UDM_FIELD_RATING - page rating (as calculated by
 *   mnoGoSearch). UDM_FIELD_MODIFIED - last-modified field in unixtime
 *   format. UDM_FIELD_ORDER - the number of the current document in set
 *   of found documents. UDM_FIELD_CRC - document CRC.
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_get_res_field($res, $row, $field){}

/**
 * Gets the mnoGoSearch result parameters.
 * 
 * @param resource $res {@link res} - a link to result identifier,
 *   received after call to {@link udm_find}.
 * @param int $param {@link param} - parameter identifier, may have the
 *   following values: UDM_PARAM_NUM_ROWS - number of received found
 *   links on the current page. It is equal to UDM_PARAM_PAGE_SIZE for
 *   all search pages, on the last page - the rest of links.
 *   UDM_PARAM_FOUND - total number of results matching the query.
 *   UDM_PARAM_WORDINFO - information on the words found. E.g. search for
 *   "a good book" will return "a: stopword, good:5637, book: 120"
 *   UDM_PARAM_SEARCHTIME - search time in seconds. UDM_PARAM_FIRST_DOC -
 *   the number of the first document displayed on current page.
 *   UDM_PARAM_LAST_DOC - the number of the last document displayed on
 *   current page.
 * @return string
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_get_res_param($res, $param){}

/**
 * {@link udm_hash32} will take a string {@link str} and return a quite
 * unique 32-bit hash number from it.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param string $str The input string.
 * @return int
 * @since PHP 4 >= 4.3.3, PHP 5 = 1.0.0
 **/
function udm_hash32($agent, $str){}

/**
 * {@link udm_load_ispell_data} loads ispell data.
 * 
 * After using this function to free memory allocated for ispell data,
 * please use {@link udm_free_ispell_data}, even if you use
 * UDM_ISPELL_TYPE_SERVER mode.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param int $var Indicates the source for ispell data. May have the
 *   following values: UDM_ISPELL_TYPE_DB - indicates that ispell data
 *   should be loaded from SQL. In this case, parameters {@link val1} and
 *   {@link val2} are ignored and should be left blank. {@link flag}
 *   should be equal to 1. {@link flag} indicates that after loading
 *   ispell data from defined source it should be sorted (it is necessary
 *   for correct functioning of ispell). In case of loading ispell data
 *   from files there may be several calls to {@link
 *   udm_load_ispell_data}, and there is no sense to sort data after
 *   every call, but only after the last one. Since in db mode all the
 *   data is loaded by one call, this parameter should have the value 1.
 *   In this mode in case of error, e.g. if ispell tables are absent, the
 *   function will return and code and error message will be accessible
 *   through {@link udm_error} and {@link udm_errno}.
 *   UDM_ISPELL_TYPE_AFFIX - indicates that ispell data should be loaded
 *   from file and initiates loading affixes file. In this case {@link
 *   val1} defines double letter language code for which affixes are
 *   loaded, and {@link val2} - file path. Please note, that if a
 *   relative path entered, the module looks for the file not in
 *   UDM_CONF_DIR, but in relation to current path, i.e. to the path
 *   where the script is executed. In case of error in this mode, e.g. if
 *   file is absent, the function will return , and an error message will
 *   be displayed. Error message text cannot be accessed through {@link
 *   udm_error} and {@link udm_errno}, since those functions can only
 *   return messages associated with SQL. Please, see {@link flag}
 *   parameter description in UDM_ISPELL_TYPE_DB. {@link
 *   udm_load_ispell_data} example
 *   
 *   <?php if ((! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'en',
 *   '/opt/ispell/en.aff', 0)) || (! udm_load_ispell_data($udm,
 *   UDM_ISPELL_TYPE_AFFIX, 'ru', '/opt/ispell/ru.aff', 0)) || (!
 *   udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'en',
 *   '/opt/ispell/en.dict', 0)) || (! udm_load_ispell_data($udm,
 *   UDM_ISPELL_TYPE_SPELL, 'ru', '/opt/ispell/ru.dict', 1))) { exit; }
 *   ?>
 *   
 *   {@link flag} is equal to 1 only in the last call.
 *   UDM_ISPELL_TYPE_SPELL - indicates that ispell data should be loaded
 *   from file and initiates loading of ispell dictionary file. In this
 *   case {@link val1} defines double letter language code for which
 *   affixes are loaded, and {@link val2} - file path. Please note, that
 *   if a relative path entered, the module looks for the file not in
 *   UDM_CONF_DIR, but in relation to current path, i.e. to the path
 *   where the script is executed. In case of error in this mode, e.g. if
 *   file is absent, the function will return , and an error message will
 *   be displayed. Error message text cannot be accessed through {@link
 *   udm_error} and {@link udm_errno}, since those functions can only
 *   return messages associated with SQL. Please, see {@link flag}
 *   parameter description in UDM_ISPELL_TYPE_DB.
 *   
 *   <?php if ((! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'en',
 *   '/opt/ispell/en.aff', 0)) || (! udm_load_ispell_data($udm,
 *   UDM_ISPELL_TYPE_AFFIX, 'ru', '/opt/ispell/ru.aff', 0)) || (!
 *   udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'en',
 *   '/opt/ispell/en.dict', 0)) || (! udm_load_ispell_data($udm,
 *   UDM_ISPELL_TYPE_SPELL, 'ru', '/opt/ispell/ru.dict', 1))) { exit; }
 *   ?>
 *   
 *   {@link flag} is equal to 1 only in the last call.
 *   UDM_ISPELL_TYPE_SERVER - enables spell server support. {@link val1}
 *   parameter indicates address of the host running spell server. {@link
 *   val2} ` is not used yet, but in future releases it is going to
 *   indicate number of port used by spell server. {@link flag} parameter
 *   in this case is not needed since ispell data is stored on
 *   spellserver already sorted. Spelld server reads spell-data from a
 *   separate configuration file (/usr/local/mnogosearch/etc/spelld.conf
 *   by default), sorts it and stores in memory. With clients server
 *   communicates in two ways: to indexer all the data is transferred (so
 *   that indexer starts faster), from search.cgi server receives word to
 *   normalize and then passes over to client (search.cgi) list of
 *   normalized word forms. This allows fastest, compared to db and text
 *   modes processing of search queries (by omitting loading and sorting
 *   all the spell data). {@link udm_load_ispell_data} function in
 *   UDM_ISPELL_TYPE_SERVER mode does not actually load ispell data, but
 *   only defines server address. In fact, server is automatically used
 *   by {@link udm_find} function when performing search. In case of
 *   errors, e.g. if spellserver is not running or invalid host
 *   indicated, there are no messages returned and ispell conversion does
 *   not work. This function is available in mnoGoSearch 3.1.12 or later.
 *   Example:
 *   
 *   <?php if (!udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SERVER, '',
 *   '', 1)) { echo "Error loading ispell data from server<br />\n";
 *   exit; } ?>
 *   
 *   The fastest mode is UDM_ISPELL_TYPE_SERVER. UDM_ISPELL_TYPE_TEXT is
 *   slower and UDM_ISPELL_TYPE_DB is the slowest. The above pattern is
 *   for mnoGoSearch 3.1.10 - 3.1.11. It is planned to speed up DB mode
 *   in future versions and it is going to be faster than TEXT mode.
 * @param string $val1
 * @param string $val2
 * @param int $flag
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_load_ispell_data($agent, $var, $val1, $val2, $flag){}

/**
 * @param resource $agent
 * @param string $storedaddr
 * @return int
 * @since PHP 4 >= 4.2.0
 **/
function udm_open_stored($agent, $storedaddr){}

/**
 * Defines mnoGoSearch session parameters.
 * 
 * @param resource $agent A link to Agent, received after call to
 *   {@link udm_alloc_agent}.
 * @param int $var The following parameters and their values are
 *   available: UDM_PARAM_PAGE_NUM - used to choose search results page
 *   number (results are returned by pages beginning from 0, with
 *   UDM_PARAM_PAGE_SIZE results per page). UDM_PARAM_PAGE_SIZE - number
 *   of search results displayed on one page. UDM_PARAM_SEARCH_MODE -
 *   search mode. The following values available: UDM_MODE_ALL - search
 *   for all words; UDM_MODE_ANY - search for any word; UDM_MODE_PHRASE -
 *   phrase search; UDM_MODE_BOOL - boolean search. See {@link udm_find}
 *   for details on boolean search. UDM_PARAM_CACHE_MODE - turns on or
 *   off search result cache mode. When enabled, the search engine will
 *   store search results to disk. In case a similar search is performed
 *   later, the engine will take results from the cache for faster
 *   performance. Available values: UDM_CACHE_ENABLED,
 *   UDM_CACHE_DISABLED. UDM_PARAM_TRACK_MODE - turns on or off
 *   trackquery mode. Since version 3.1.2 mnoGoSearch has a query
 *   tracking support. Note that tracking is implemented in SQL version
 *   only and not available in built-in database. To use tracking, you
 *   have to create tables for tracking support. For MySQL, use
 *   create/mysql/track.txt. When doing a search, front-end uses those
 *   tables to store query words, a number of found documents and current
 *   Unix timestamp in seconds. Available values: UDM_TRACK_ENABLED,
 *   UDM_TRACK_DISABLED. UDM_PARAM_PHRASE_MODE - defines whether index
 *   database using phrases ("phrase" parameter in indexer.conf).
 *   Possible values: UDM_PHRASE_ENABLED and UDM_PHRASE_DISABLED. Please
 *   note, that if phrase search is enabled (UDM_PHRASE_ENABLED), it is
 *   still possible to do search in any mode (ANY, ALL, BOOL or PHRASE).
 *   In 3.1.10 version of mnoGoSearch phrase search is supported only in
 *   sql and built-in database modes, while beginning with 3.1.11 phrases
 *   are supported in cachemode as well. Examples of phrase search:
 *   "Arizona desert" - This query returns all indexed documents that
 *   contain "Arizona desert" as a phrase. Notice that you need to put
 *   double quotes around the phrase UDM_PARAM_CHARSET - defines local
 *   charset. Available values: set of charsets supported by mnoGoSearch,
 *   e.g. koi8-r, cp1251, ... UDM_PARAM_STOPFILE - Defines name and path
 *   to stopwords file. (There is a small difference with mnoGoSearch -
 *   while in mnoGoSearch if relative path or no path entered, it looks
 *   for this file in relation to UDM_CONF_DIR, the module looks for the
 *   file in relation to current path, i.e. to the path where the PHP
 *   script is executed.) UDM_PARAM_STOPTABLE - Load stop words from the
 *   given SQL table. You may use several StopwordTable commands. This
 *   command has no effect when compiled without SQL database support.
 *   UDM_PARAM_WEIGHT_FACTOR - represents weight factors for specific
 *   document parts. Currently body, title, keywords, description, url
 *   are supported. To activate this feature please use degrees of 2 in
 *   *Weight commands of the indexer.conf. Let's imagine that we have
 *   these weights: URLWeight 1 BodyWeight 2 TitleWeight 4 KeywordWeight
 *   8 DescWeight 16 As far as indexer uses bit OR operation for word
 *   weights when some word presents several time in the same document,
 *   it is possible at search time to detect word appearance in different
 *   document parts. Word which appears only in the body will have
 *   00000010 aggregate weight (in binary notation). Word used in all
 *   document parts will have 00011111 aggregate weight. This parameter's
 *   value is a string of hex digits ABCDE. Each digit is a factor for
 *   corresponding bit in word weight. For the given above weights
 *   configuration: E is a factor for weight 1 (URL Weight bit) D is a
 *   factor for weight 2 (BodyWeight bit) C is a factor for weight 4
 *   (TitleWeight bit) B is a factor for weight 8 (KeywordWeight bit) A
 *   is a factor for weight 16 (DescWeight bit) Examples:
 *   UDM_PARAM_WEIGHT_FACTOR=00001 will search through URLs only.
 *   UDM_PARAM_WEIGHT_FACTOR=00100 will search through Titles only.
 *   UDM_PARAM_WEIGHT_FACTOR=11100 will search through
 *   Title,Keywords,Description but not through URL and Body.
 *   UDM_PARAM_WEIGHT_FACTOR=F9421 will search through: Description with
 *   factor 15 (F hex) Keywords with factor 9 Title with factor 4 Body
 *   with factor 2 URL with factor 1 If UDM_PARAM_WEIGHT_FACTOR variable
 *   is omitted, original weight value is taken to sort results. For a
 *   given above weight configuration it means that document description
 *   has a most big weight 16. UDM_PARAM_WORD_MATCH - word match. You may
 *   use this parameter to choose word match type. This feature works
 *   only in "single" and "multi" modes using SQL based and built-in
 *   database. It does not work in cachemode and other modes since they
 *   use word CRC and do not support substring search. Available values:
 *   UDM_MATCH_BEGIN - word beginning match; UDM_MATCH_END - word ending
 *   match; UDM_MATCH_WORD - whole word match; UDM_MATCH_SUBSTR - word
 *   substring match. UDM_PARAM_MIN_WORD_LEN - defines minimal word
 *   length. Any word shorter this limit is considered to be a stopword.
 *   Please note that this parameter value is inclusive, i.e. if
 *   UDM_PARAM_MIN_WORD_LEN=3, a word 3 characters long will not be
 *   considered a stopword, while a word 2 characters long will be.
 *   Default value is 1. UDM_PARAM_ISPELL_PREFIXES - Possible values:
 *   UDM_PREFIXES_ENABLED and UDM_PREFIXES_DISABLED, that respectively
 *   enable or disable using prefixes. E.g. if a word "tested" is in
 *   search query, also words like "test", "testing", etc. Only suffixes
 *   are supported by default. Prefixes usually change word meanings, for
 *   example if somebody is searching for the word "tested" one hardly
 *   wants "untested" to be found. Prefixes support may also be found
 *   useful for site's spelling checking purposes. In order to enable
 *   ispell, you have to load ispell data with {@link
 *   udm_load_ispell_data}. UDM_PARAM_CROSS_WORDS - enables or disables
 *   crosswords support. Possible values: UDM_CROSS_WORDS_ENABLED and
 *   UDM_CROSS_WORDS_DISABLED. The crosswords feature allows to assign
 *   words between <a href="xxx"> and </a> also to a document this link
 *   leads to. It works in SQL database mode and is not supported in
 *   built-in database and Cachemode. UDM_PARAM_VARDIR - specifies a
 *   custom path to directory where indexer stores data when using
 *   built-in database and in cache mode. By default /var directory of
 *   mnoGoSearch installation is used. Can have only string values.
 * @param string $val
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5 = 1.0.0
 **/
function udm_set_agent_param($agent, $var, $val){}

/**
 * {@link uksort} will sort the keys of an array using a user-supplied
 * comparison function. If the array you wish to sort needs to be sorted
 * by some non-trivial criteria, you should use this function.
 * 
 * @param array $array The input array.
 * @param callback $cmp_function The callback comparison function.
 *   Function {@link cmp_function} should accept two parameters which
 *   will be filled by pairs of {@link array} keys. The comparison
 *   function must return an integer less than, equal to, or greater than
 *   zero if the first argument is considered to be respectively less
 *   than, equal to, or greater than the second.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function uksort(&$array, $cmp_function){}

/**
 * {@link umask} sets PHP's umask to {@link mask} & 0777 and returns the
 * old umask. When PHP is being used as a server module, the umask is
 * restored when each request is finished.
 * 
 * @param int $mask The new umask.
 * @return int
 * @since PHP 4, PHP 5
 **/
function umask($mask){}

/**
 * Convert a binary string encoded in {@link encoding} to a unicode
 * string.
 * 
 * @param string $input Try string that is converted.
 * @param string $encoding The encoding of {@link input}.
 * @param int $errmode Conversion error mode. This parameter determines
 *   the action to take when the converter cannot convert a character.
 *   For a list of available modes, refer to {@link
 *   unicode_set_error_mode}. If the parameter is not set, the global
 *   error mode is used.
 * @return unicode
 **/
function unicode_decode($input, $encoding, $errmode){}

/**
 * Takes a unicode string and converts it to a string in the specified
 * {@link encoding}.
 * 
 * @param unicode $input The unicode string that is converted.
 * @param string $encoding The new encoding for {@link input}.
 * @param int $errmode Conversion error mode. This parameter determines
 *   the action to take when the converter cannot convert a character.
 *   For a list of available modes, refer to {@link
 *   unicode_set_error_mode}. If the parameter is not set, the global
 *   error mode is used.
 * @return string
 **/
function unicode_encode($input, $encoding, $errmode){}

/**
 * Return the current error mode for string conversions in {@link
 * direction}.
 * 
 * @param int $direction Get the error mode for conversion {@link
 *   direction}. This can either be FROM_UNICODE or TO_UNICODE. See
 *   {@link unicode_set_error_mode} for more details.
 * @return int
 **/
function unicode_get_error_mode($direction){}

/**
 * Return the substitution character for string conversion errors set by
 * {@link unicode_set_subst_char}.
 * 
 * @return unicode
 **/
function unicode_get_subst_char(){}

/**
 * This function sets the error mode for string conversions between
 * different encodings. An error can occur during conversion when an
 * illegal character is encountered or if a character cannot be
 * represented into the new encoding. By default, when an error is
 * encountered, the conversion stops.
 * 
 * @param int $direction The {@link direction} sets the conversion
 *   direction to which the error mode will apply. This can either be
 *   FROM_UNICODE, which will set the error mode for conversions from a
 *   unicode string to a binary string or TO_UNICODE, which will set the
 *   error mode for conversions from a binary string to a unicode string.
 * @param int $mode {@link mode} determines how the conversion errors
 *   are handled. It should be one of the following constants:
 *   
 *   Available modes Mode Description U_CONV_ERROR_STOP Stop the
 *   conversion. This is the default mode. U_CONV_ERROR_SKIP Skip the
 *   character. U_CONV_ERROR_SUBST Substitute the character. The
 *   substituting character can be set with {@link
 *   unicode_set_subst_char}. U_CONV_ERROR_ESCAPE_UNICODE Escape the
 *   faulty bytes and represent them in the Unicode character format.
 *   U_CONV_ERROR_ESCAPE_ICU Escape the faulty bytes and represent them
 *   in the ICU character format. U_CONV_ERROR_ESCAPE_JAVA Escape the
 *   faulty bytes and print them in the Java character format.
 *   U_CONV_ERROR_ESCAPE_XML_DEC Escape the faulty bytes and represent
 *   them in decimal format. U_CONV_ERROR_ESCAPE_XML_HEX Escape the
 *   faulty bytes and represent them in hexadecimal format.
 * @return bool
 **/
function unicode_set_error_mode($direction, $mode){}

/**
 * When converting a string from or to unicode, an invalid or
 * unconvertible character may be encountered. When the conversion error
 * mode is set to U_CONV_ERROR_SUBST, the character that caused the error
 * is substituted by a character set by this function. The default
 * substitution character is ?.
 * 
 * @param unicode $character The substitution character to use.
 * @return bool
 **/
function unicode_set_subst_char($character){}

/**
 * Gets a prefixed unique identifier based on the current time in
 * microseconds.
 * 
 * @param string $prefix Can be useful, for instance, if you generate
 *   identifiers simultaneously on several hosts that might happen to
 *   generate the identifier at the same microsecond. With an empty
 *   {@link prefix}, the returned string will be 13 characters long. If
 *   {@link more_entropy} is , it will be 23 characters.
 * @param bool $more_entropy If set to , {@link uniqid} will add
 *   additional entropy (using the combined linear congruential
 *   generator) at the end of the return value, which should make the
 *   results more unique.
 * @return string
 * @since PHP 4, PHP 5
 **/
function uniqid($prefix, $more_entropy){}

/**
 * Return the Julian Day for a Unix {@link timestamp} (seconds since
 * 1.1.1970), or for the current day if no {@link timestamp} is given.
 * 
 * @param int $timestamp A unix timestamp to convert.
 * @return int
 * @since PHP 4, PHP 5
 **/
function unixtojd($timestamp){}

/**
 * Deletes {@link filename}. Similar to the Unix C unlink() function. A
 * E_WARNING level error will be generated on failure.
 * 
 * @param string $filename Path to the file.
 * @param resource $context
 * @return bool
 * @since PHP 4, PHP 5
 **/
function unlink($filename, $context){}

/**
 * Unpacks from a binary string into an array according to the given
 * {@link format}.
 * 
 * {@link unpack} works slightly different from Perl as the unpacked data
 * is stored in an associative array. To accomplish this you have to name
 * the different format codes and separate them by a slash /.
 * 
 * @param string $format See {@link pack} for an explanation of the
 *   format codes.
 * @param string $data The packed data.
 * @return array
 * @since PHP 4, PHP 5
 **/
function unpack($format, $data){}

/**
 * @param string $function_name The function name, as a string.
 * @return void
 * @since PHP 4 >= 4.0.3, PHP 5
 **/
function unregister_tick_function($function_name){}

/**
 * @param string $str The serialized string. If the variable being
 *   unserialized is an object, after successfully reconstructing the
 *   object PHP will automatically attempt to call the {@link __wakeup}
 *   member function (if it exists).
 *   
 *   unserialize_callback_func directive It's possible to set a
 *   callback-function which will be called, if an undefined class should
 *   be instantiated during unserializing. (to prevent getting an
 *   incomplete object "__PHP_Incomplete_Class".) Use your , {@link
 *   ini_set} or to define 'unserialize_callback_func'. Everytime an
 *   undefined class should be instantiated, it'll be called. To disable
 *   this feature just empty this setting.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function unserialize($str){}

/**
 * Decodes any %## encoding in the given string. Plus symbols ('+') are
 * decoded to a space character.
 * 
 * @param string $str The string to be decoded.
 * @return string
 * @since PHP 4, PHP 5
 **/
function urldecode($str){}

/**
 * This function is convenient when encoding a string to be used in a
 * query part of a URL, as a convenient way to pass variables to the next
 * page.
 * 
 * @param string $str The string to be encoded.
 * @return string
 * @since PHP 4, PHP 5
 **/
function urlencode($str){}

/**
 * Used to trigger a user error condition, it can be used by in
 * conjunction with the built-in error handler, or with a user defined
 * function that has been set as the new error handler ({@link
 * set_error_handler}).
 * 
 * This function is useful when you need to generate a particular
 * response to an exception at runtime.
 * 
 * @param string $error_msg The designated error message for this
 *   error. It's limited to 1024 characters in length. Any additional
 *   characters beyond 1024 will be truncated.
 * @param int $error_type The designated error type for this error. It
 *   only works with the E_USER family of constants, and will default to
 *   E_USER_NOTICE.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function user_error($error_msg, $error_type){}

/**
 * This function sets whether or not to use the SOAP error handler in the
 * SOAP server. It will return the previous value. If set to , details of
 * errors in a SoapServer application will be sent to the clients. If ,
 * no information will be sent.
 * 
 * @param bool $handler Set to to send error details to clients.
 * @return bool
 * @since Unknown
 **/
function use_soap_error_handler($handler){}

/**
 * Delays program execution for the given number of micro seconds.
 * 
 * @param int $micro_seconds Halt time in micro seconds. A micro second
 *   is one millionth of a second.
 * @return void
 * @since PHP 4, PHP 5
 **/
function usleep($micro_seconds){}

/**
 * This function will sort an array by its values using a user-supplied
 * comparison function. If the array you wish to sort needs to be sorted
 * by some non-trivial criteria, you should use this function.
 * 
 * @param array $array The input array.
 * @param callback $cmp_function The comparison function must return an
 *   integer less than, equal to, or greater than zero if the first
 *   argument is considered to be respectively less than, equal to, or
 *   greater than the second.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function usort(&$array, $cmp_function){}

/**
 * This function decodes {@link data}, assumed to be UTF-8 encoded, to
 * ISO-8859-1.
 * 
 * @param string $data An UTF-8 encoded string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function utf8_decode($data){}

/**
 * This function encodes the string {@link data} to UTF-8, and returns
 * the encoded version. UTF-8 is a standard mechanism used by Unicode for
 * encoding wide character values into a byte stream. UTF-8 is
 * transparent to plain ASCII characters, is self-synchronized (meaning
 * it is possible for a program to figure out where in the bytestream
 * characters start) and can be used with normal string comparison
 * functions for sorting and such. PHP encodes UTF-8 characters in up to
 * four bytes, like this: UTF-8 encoding bytes bits representation 1 7
 * 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16 1110bbbb 10bbbbbb 10bbbbbb 4 21
 * 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each b represents a bit that can
 * be used to store character data.
 * 
 * @param string $data An ISO-8859-1 string.
 * @return string
 * @since PHP 4, PHP 5
 **/
function utf8_encode($data){}

/**
 * Returns the absolute value of a variant.
 * 
 * @param mixed $val The variant.
 * @return mixed
 * @since PHP 5
 **/
function variant_abs($val){}

/**
 * Adds {@link left} to {@link right} using the following rules (taken
 * from the MSDN library), which correspond to those of Visual Basic:
 * Variant Addition Rules If Then Both expressions are of the string type
 * Concatenation One expression is a string type and the other a
 * character Addition One expression is numeric and the other is a string
 * Addition Both expressions are numeric Addition Either expression is
 * NULL NULL is returned Both expressions are empty Integer subtype is
 * returned
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_add($left, $right){}

/**
 * Performs a bitwise AND operation. Note that this is slightly different
 * from a regular AND operation.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_and($left, $right){}

/**
 * This function makes a copy of {@link variant} and then performs a
 * variant cast operation to force the copy to have the type given by
 * {@link type}.
 * 
 * This function wraps VariantChangeType() in the COM library; consult
 * MSDN for more information.
 * 
 * @param variant $variant The variant.
 * @param int $type {@link type} should be one of the VT_XXX constants.
 * @return variant
 * @since PHP 5
 **/
function variant_cast($variant, $type){}

/**
 * Concatenates {@link left} with {@link right} and returns the result.
 * 
 * This function is notionally equivalent to {@link $left} . {@link
 * $right}.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_cat($left, $right){}

/**
 * Compares {@link left} with {@link right}.
 * 
 * This function will only compare scalar values, not arrays or variant
 * records.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @param int $lcid A valid Locale Identifier to use when comparing
 *   strings (this affects string collation).
 * @param int $flags {@link flags} can be one or more of the following
 *   values OR'd together, and affects string comparisons: Variant
 *   Comparision Flags value meaning NORM_IGNORECASE Compare case
 *   insensitively NORM_IGNORENONSPACE Ignore nonspacing characters
 *   NORM_IGNORESYMBOLS Ignore symbols NORM_IGNOREWIDTH Ignore string
 *   width NORM_IGNOREKANATYPE Ignore Kana type NORM_IGNOREKASHIDA Ignore
 *   Arabic kashida characters
 * @return int
 * @since PHP 5
 **/
function variant_cmp($left, $right, $lcid, $flags){}

/**
 * Converts {@link timestamp} from a unix timestamp value into a variant
 * of type VT_DATE. This allows easier interopability between the
 * unix-ish parts of PHP and COM.
 * 
 * @param int $timestamp A unix timestamp.
 * @return variant
 * @since PHP 5
 **/
function variant_date_from_timestamp($timestamp){}

/**
 * Converts {@link variant} from a VT_DATE (or similar) value into a Unix
 * timestamp. This allows easier interopability between the Unix-ish
 * parts of PHP and COM.
 * 
 * @param variant $variant The variant.
 * @return int
 * @since PHP 5
 **/
function variant_date_to_timestamp($variant){}

/**
 * Divides {@link left} by {@link right} and returns the result.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_div($left, $right){}

/**
 * Performs a bitwise equivalence on two variants.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_eqv($left, $right){}

/**
 * Gets the integer portion of a variant.
 * 
 * @param mixed $variant The variant.
 * @return mixed
 * @since PHP 5
 **/
function variant_fix($variant){}

/**
 * Returns the type of a variant object.
 * 
 * @param variant $variant The variant object.
 * @return int
 * @since PHP 5
 **/
function variant_get_type($variant){}

/**
 * Converts {@link left} and {@link right} to integer values, and then
 * performs integer division.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_idiv($left, $right){}

/**
 * Performs a bitwise implication operation.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_imp($left, $right){}

/**
 * Gets the integer portion of a variant.
 * 
 * @param mixed $variant The variant.
 * @return mixed
 * @since PHP 5
 **/
function variant_int($variant){}

/**
 * Divides {@link left} by {@link right} and returns the remainder.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_mod($left, $right){}

/**
 * Multiplies {@link left} by {@link right}.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_mul($left, $right){}

/**
 * Performs logical negation of {@link variant}.
 * 
 * @param mixed $variant The variant.
 * @return mixed
 * @since PHP 5
 **/
function variant_neg($variant){}

/**
 * Performs bitwise not negation on {@link variant} and returns the
 * result.
 * 
 * @param mixed $variant The variant.
 * @return mixed
 * @since PHP 5
 **/
function variant_not($variant){}

/**
 * Performs a bitwise OR operation. Note that this is slightly different
 * from a regular OR operation.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_or($left, $right){}

/**
 * Returns the result of {@link left} to the power of {@link right}.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_pow($left, $right){}

/**
 * Returns the value of {@link variant} rounded to {@link decimals}
 * decimal places.
 * 
 * @param mixed $variant The variant.
 * @param int $decimals Number of decimal places.
 * @return mixed
 * @since PHP 5
 **/
function variant_round($variant, $decimals){}

/**
 * Converts {@link value} to a variant and assigns it to the {@link
 * variant} object; no new variant object is created, and the old value
 * of {@link variant} is freed/released.
 * 
 * @param variant $variant The variant.
 * @param mixed $value
 * @return void
 * @since PHP 5
 **/
function variant_set($variant, $value){}

/**
 * This function is similar to {@link variant_cast} except that the
 * variant is modified "in-place"; no new variant is created. The
 * parameters for this function have identical meaning to those of {@link
 * variant_cast}.
 * 
 * @param variant $variant The variant.
 * @param int $type
 * @return void
 * @since PHP 5
 **/
function variant_set_type($variant, $type){}

/**
 * Subtracts {@link right} from {@link left}.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_sub($left, $right){}

/**
 * Performs a logical exclusion.
 * 
 * @param mixed $left The left operand.
 * @param mixed $right The right operand.
 * @return mixed
 * @since PHP 5
 **/
function variant_xor($left, $right){}

/**
 * @param mixed $expression The variable you want to export.
 * @param mixed $expression
 * @return void
 * @since PHP 4, PHP 5
 **/
function var_dump($expression, $expression){}

/**
 * @param mixed $expression The variable you want to export.
 * @param bool $return If used and set to , {@link var_export} will
 *   return the variable representation instead of outputing it.
 * @return mixed
 * @since PHP 4 >= 4.2.0, PHP 5
 **/
function var_export($expression, $return){}

/**
 * {@link version_compare} compares two "PHP-standardized" version number
 * strings. This is useful if you would like to write programs working
 * only on some versions of PHP.
 * 
 * The function first replaces _, - and + with a dot . in the version
 * strings and also inserts dots . before and after any non number so
 * that for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it splits the
 * results like if you were using explode('.', $ver). Then it compares
 * the parts starting from left to right. If a part contains special
 * version strings these are handled in the following order: any string
 * not found in this list < dev < alpha = a < beta = b < RC = rc < # < pl
 * = p. This way not only versions with different levels like '4.1' and
 * '4.1.2' can be compared but also any PHP specific version containing
 * development state.
 * 
 * @param string $version1 First version number.
 * @param string $version2 Second version number.
 * @param string $operator If you specify the third optional {@link
 *   operator} argument, you can test for a particular relationship. The
 *   possible operators are: <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=,
 *   <>, ne respectively. This parameter is case-sensitive, so values
 *   should be lowercase.
 * @return mixed
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function version_compare($version1, $version2, $operator){}

/**
 * Write a string produced according to {@link format} to the stream
 * resource specified by {@link handle}.
 * 
 * Operates as {@link fprintf} but accepts an array of arguments, rather
 * than a variable number of arguments.
 * 
 * @param resource $handle
 * @param string $format See {@link sprintf} for a description of
 *   {@link format}.
 * @param array $args
 * @return int
 * @since PHP 5
 **/
function vfprintf($handle, $format, $args){}

/**
 * {@link virtual} is an Apache-specific function which is similar to
 * <!--#include virtual...--> in mod_include. It performs an Apache
 * sub-request. It is useful for including CGI scripts or .shtml files,
 * or anything else that you would parse through Apache. Note that for a
 * CGI script, the script must generate valid CGI headers. At the minimum
 * that means it must generate a Content-Type header.
 * 
 * To run the sub-request, all buffers are terminated and flushed to the
 * browser, pending headers are sent too.
 * 
 * @param string $filename The file that the virtual command will be
 *   performed on.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function virtual($filename){}

/**
 * @param string $domain
 * @param string $aliasdomain
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_add_alias_domain($domain, $aliasdomain){}

/**
 * @param string $olddomain
 * @param string $newdomain
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_add_alias_domain_ex($olddomain, $newdomain){}

/**
 * @param string $domain
 * @param string $dir
 * @param int $uid
 * @param int $gid
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_add_domain($domain, $dir, $uid, $gid){}

/**
 * @param string $domain
 * @param string $passwd
 * @param string $quota
 * @param string $bounce
 * @param bool $apop
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_add_domain_ex($domain, $passwd, $quota, $bounce, $apop){}

/**
 * @param string $user
 * @param string $domain
 * @param string $password
 * @param string $gecos
 * @param bool $apop
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_add_user($user, $domain, $password, $gecos, $apop){}

/**
 * @param string $user
 * @param string $domain
 * @param string $alias
 * @return bool
 * @since PHP 4 >= 4.0.7, PECL vpopmail >= 0.2
 **/
function vpopmail_alias_add($user, $domain, $alias){}

/**
 * @param string $user
 * @param string $domain
 * @return bool
 * @since PHP 4 >= 4.0.7, PECL vpopmail >= 0.2
 **/
function vpopmail_alias_del($user, $domain){}

/**
 * @param string $domain
 * @return bool
 * @since PHP 4 >= 4.0.7, PECL vpopmail >= 0.2
 **/
function vpopmail_alias_del_domain($domain){}

/**
 * @param string $alias
 * @param string $domain
 * @return array
 * @since PHP 4 >= 4.0.7, PECL vpopmail >= 0.2
 **/
function vpopmail_alias_get($alias, $domain){}

/**
 * @param string $domain
 * @return array
 * @since PHP 4 >= 4.0.7, PECL vpopmail >= 0.2
 **/
function vpopmail_alias_get_all($domain){}

/**
 * @param string $user
 * @param string $domain
 * @param string $password
 * @param string $apop
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_auth_user($user, $domain, $password, $apop){}

/**
 * @param string $domain
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_del_domain($domain){}

/**
 * @param string $domain
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_del_domain_ex($domain){}

/**
 * @param string $user
 * @param string $domain
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_del_user($user, $domain){}

/**
 * @return string
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_error(){}

/**
 * @param string $user
 * @param string $domain
 * @param string $password
 * @param bool $apop
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_passwd($user, $domain, $password, $apop){}

/**
 * @param string $user
 * @param string $domain
 * @param string $quota
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL vpopmail >= 0.2
 **/
function vpopmail_set_user_quota($user, $domain, $quota){}

/**
 * Display array values as a formatted string according to {@link format}
 * (which is described in the documentation for {@link sprintf}).
 * 
 * Operates as {@link printf} but accepts an array of arguments, rather
 * than a variable number of arguments.
 * 
 * @param string $format See {@link sprintf} for a description of
 *   {@link format}.
 * @param array $args
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function vprintf($format, $args){}

/**
 * Operates as {@link sprintf} but accepts an array of arguments, rather
 * than a variable number of arguments.
 * 
 * @param string $format See {@link sprintf} for a description of
 *   {@link format}.
 * @param array $args
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function vsprintf($format, $args){}

/**
 * You need to call this function if you would like to define a type for
 * a w32api call.
 * 
 * @param string $typename The name of the type.
 * @param string $member1_type A member type can be a user defined
 *   type. All the type names are case sensitive. Built in type names
 *   should be provided in lowercase.
 * @param string $member1_name The member name of {@link member1_type}.
 * @return bool
 * @since PHP 4 >= 4.2.0
 **/
function w32api_deftype($typename, $member1_type, $member1_name){}

/**
 * This function creates an instance of the data type named {@link
 * typename}, filling in the values of the data type.
 * 
 * @param string $typename The {@link typename} parameter is case
 *   sensitive.
 * @param mixed $value You should give the values in the same order as
 *   you defined the data type with {@link w32api_deftype}.
 * @return resource
 * @since PHP 4 >= 4.2.0
 **/
function w32api_init_dtype($typename, $value){}

/**
 * {@link w32api_invoke_function} tries to find the previously registered
 * function, passing the parameters you provided.
 * 
 * @param string $funcname The function name.
 * @param mixed $argument Any of the arguments can be of any PHP type
 *   or {@link w32api_deftype} defined type, as needed.
 * @return mixed
 * @since PHP 4 >= 4.2.0
 **/
function w32api_invoke_function($funcname, $argument){}

/**
 * This function tries to find the {@link function_name} function in
 * {@link library}, and tries to import it into PHP.
 * 
 * @param string $library The library name, as a string.
 * @param string $function_name The function name, as a string.
 * @param string $return_type The function will be registered with the
 *   given {@link return_type}. This type can be a generic PHP type, or a
 *   type defined with {@link w32api_deftype}. All type names are case
 *   sensitive. Built in type names should be provided in lowercase.
 * @return bool
 * @since PHP 4 >= 4.2.0
 **/
function w32api_register_function($library, $function_name, $return_type){}

/**
 * This function sets the method call type.
 * 
 * @param int $method Can be one of DC_CALL_CDECL or DC_CALL_STD (the
 *   extension default).
 * @return void
 * @since PHP 4 >= 4.2.0
 **/
function w32api_set_call_method($method){}

/**
 * Serializes the passed variables and add the result to the given
 * packet.
 * 
 * @param resource $packet_id A WDDX packet, returned by {@link
 *   wddx_packet_start}.
 * @param mixed $var_name Can be either a string naming a variable or
 *   an array containing strings naming the variables or another array,
 *   etc.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function wddx_add_vars($packet_id, $var_name){}

/**
 * Unserializes a WDDX {@link packet}.
 * 
 * @param string $packet A WDDX packet, as a string or stream.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function wddx_deserialize($packet){}

/**
 * Ends and returns the given WDDX packet.
 * 
 * @param resource $packet_id A WDDX packet, returned by {@link
 *   wddx_packet_start}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function wddx_packet_end($packet_id){}

/**
 * Start a new WDDX packet for incremental addition of variables. It
 * automatically creates a structure definition inside the packet to
 * contain the variables.
 * 
 * @param string $comment An optional comment string.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function wddx_packet_start($comment){}

/**
 * Creates a WDDX packet from a single given value.
 * 
 * @param mixed $var The value to be serialized
 * @param string $comment An optional comment string that appears in
 *   the packet header.
 * @return string
 * @since PHP 4, PHP 5
 **/
function wddx_serialize_value($var, $comment){}

/**
 * Creates a WDDX packet with a structure that contains the serialized
 * representation of the passed variables.
 * 
 * @param mixed $var_name Can be either a string naming a variable or
 *   an array containing strings naming the variables or another array,
 *   etc.
 * @return string
 * @since PHP 4, PHP 5
 **/
function wddx_serialize_vars($var_name){}

/**
 * Unserializes a WDDX {@link packet}.
 * 
 * @param string $packet A WDDX packet, as a string or stream.
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function wddx_unserialize($packet){}

/**
 * @param array $details An array of service details: {@link service}
 *   The short name of the service. This is the name that you will use to
 *   control the service using the net command. The service must be
 *   unique (no two services can share the same name), and, ideally,
 *   should avoid having spaces in the name. {@link display} The display
 *   name of the service. This is the name that you will see in the
 *   Services Applet. {@link user} The name of the user account under
 *   which you want the service to run. If omitted, the service will run
 *   as the LocalSystem account. If the username is specified, you must
 *   also provide a password. {@link password} The password that
 *   corresponds to the {@link user}. {@link path} The full path to the
 *   executable module that will be launched when the service is started.
 *   If omitted, the path to the current PHP process will be used. {@link
 *   params} Command line parameters to pass to the service when it
 *   starts. If you want to run a PHP script as the service, then the
 *   first parameter should be the full path to the PHP script that you
 *   intend to run. If the script name or path contains spaces, then wrap
 *   the full path to the PHP script with ". {@link load_order} Controls
 *   the load_order. This is not yet fully supported. {@link svc_type}
 *   Sets the service type. If omitted, the default value is
 *   WIN32_SERVICE_WIN32_OWN_PROCESS. Don't change this unless you know
 *   what you're doing. {@link start_type} Specifies how the service
 *   should be started. The default is WIN32_SERVICE_AUTO_START which
 *   means the service will be launched when the machine starts up.
 *   {@link error_control} Informs the SCM what it should do when it
 *   detects a problem with the service. The default is
 *   WIN32_SERVER_ERROR_IGNORE. Changing this value is not yet fully
 *   supported.
 * @param string $machine The short name of the service. This is the
 *   name that you will use to control the service using the net command.
 *   The service must be unique (no two services can share the same
 *   name), and, ideally, should avoid having spaces in the name.
 * @return mixed
 **/
function win32_create_service($details, $machine){}

/**
 * Attempts to delete a service from the SCM database. Administrative
 * privileges are required for this to succeed.
 * 
 * This function really just marks the service for deletion. If other
 * processes (such as the Services Applet) are open, then the deletion
 * will be deferred until those applications are closed. If a service is
 * marked for deletion, further attempts to delete it will fail, and
 * attempts to create a new service with that name will also fail.
 * 
 * @param string $servicename The short name of the service.
 * @param string $machine The optional machine name. If omitted, the
 *   local machine will be used.
 * @return int
 **/
function win32_delete_service($servicename, $machine){}

/**
 * Returns the control code that was last sent to this service process.
 * When running as a service you should periodically check this to
 * determine if your service needs to stop running.
 * 
 * @return int
 **/
function win32_get_last_control_message(){}

/**
 * Retrieves statistics about all running processes.
 * 
 * @return array
 * @since PECL win32ps >= 1.0.1
 **/
function win32_ps_list_procs(){}

/**
 * Retrieves statistics about the global memory utilization.
 * 
 * @return array
 * @since PECL win32ps >= 1.0.1
 **/
function win32_ps_stat_mem(){}

/**
 * Retrieves statistics about the process with the process id {@link
 * pid}.
 * 
 * @param int $pid The process id of the process to stat. If omitted,
 *   the id of the current process.
 * @return array
 * @since PECL win32ps >= 1.0.1
 **/
function win32_ps_stat_proc($pid){}

/**
 * Queries the current status for a service, returning an array of
 * information.
 * 
 * @param string $servicename The short name of the service.
 * @param string $machine The optional machine name. If omitted, the
 *   local machine will be used.
 * @return mixed
 **/
function win32_query_service_status($servicename, $machine){}

/**
 * Informs the SCM of the current status of a running service. This call
 * is only valid for a running service process.
 * 
 * @param int $status The service status code, one of
 *   WIN32_SERVICE_RUNNING, WIN32_SERVICE_STOPPED,
 *   WIN32_SERVICE_STOP_PENDING, WIN32_SERVICE_START_PENDING,
 *   WIN32_SERVICE_CONTINUE_PENDING, WIN32_SERVICE_PAUSE_PENDING,
 *   WIN32_SERVICE_PAUSED.
 * @return bool
 **/
function win32_set_service_status($status){}

/**
 * Attempts to start the named service. Usually requires administrative
 * privileges.
 * 
 * @param string $servicename The short name of the service.
 * @param string $machine Optional machine name. If omitted, the local
 *   machine is used.
 * @return int
 **/
function win32_start_service($servicename, $machine){}

/**
 * When launched via the Service Control Manager, a service process is
 * required to "check-in" with it to establish service monitoring and
 * communication facilities. This function performs the check-in by
 * spawning a thread to handle the lower-level communication with the
 * service control manager.
 * 
 * Once started, the service process should continue to check-in with the
 * service control manager so that it can determine if it should
 * terminate. This is achieved by periodically calling {@link
 * win32_get_last_control_message} and handling the return code
 * appropriately.
 * 
 * @param string $name The short-name of the service, as registered by
 *   {@link win32_create_service}.
 * @return mixed
 **/
function win32_start_service_ctrl_dispatcher($name){}

/**
 * Stops a named service. Requires administrative privileges.
 * 
 * @param string $servicename The short name of the service.
 * @param string $machine Optional machine name. If omitted, the local
 *   machine is used.
 * @return int
 **/
function win32_stop_service($servicename, $machine){}

/**
 * Retrieves information about file cache content and its usage.
 * 
 * @param bool $summaryonly Controls whether the returned array will
 *   contain information about individual cache entries along with the
 *   file cache summary.
 * @return array
 * @since PECL wincache >= 1.0.0
 **/
function wincache_fcache_fileinfo($summaryonly){}

/**
 * Retrieves information about memory usage by file cache.
 * 
 * @return array
 * @since PECL wincache >= 1.0.0
 **/
function wincache_fcache_meminfo(){}

/**
 * Obtains an exclusive lock on a given key. The execution of the current
 * script will be blocked until the lock can be obtained. Once the lock
 * is obtained, the other scripts that try to request the lock by using
 * the same key will be blocked, until the current script releases the
 * lock by using {@link wincache_unlock}.
 * 
 * @param string $key Name of the key in the cache to get the lock on.
 * @param bool $isglobal Controls whether the scope of the lock is
 *   system-wide or local. Local locks are scoped to the application pool
 *   in IIS FastCGI case or to all php processes that have the same
 *   parent process identifier.
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_lock($key, $isglobal){}

/**
 * Retrieves information about opcode cache content and its usage.
 * 
 * @param bool $summaryonly Controls whether the returned array will
 *   contain information about individual cache entries along with the
 *   opcode cache summary.
 * @return array
 * @since PECL wincache >= 1.0.0
 **/
function wincache_ocache_fileinfo($summaryonly){}

/**
 * Retrieves information about memory usage by opcode cache.
 * 
 * @return array
 * @since PECL wincache >= 1.0.0
 **/
function wincache_ocache_meminfo(){}

/**
 * Refreshes the cache entries for the files, whose names were passed in
 * the input argument. If no argument is specified then refreshes all the
 * entries in the cache.
 * 
 * @param array $files An array of file names for files that need to be
 *   refreshed. An absolute or relative file paths can be used.
 * @return bool
 * @since PECL wincache >= 1.0.0
 **/
function wincache_refresh_if_changed($files){}

/**
 * Retrieves information about cached mappings between relative file
 * paths and corresponding absolute file paths.
 * 
 * @return array
 * @since PECL wincache >= 1.0.0
 **/
function wincache_rplist_fileinfo(){}

/**
 * Retrieves information about memory usage by resolve file path cache.
 * 
 * @return array
 * @since PECL wincache >= 1.0.0
 **/
function wincache_rplist_meminfo(){}

/**
 * Retrieves information about session cache content and its usage.
 * 
 * @param bool $summaryonly Controls whether the returned array will
 *   contain information about individual cache entries along with the
 *   session cache summary.
 * @return array
 * @since PECL wincache >= 1.1.0
 **/
function wincache_scache_info($summaryonly){}

/**
 * Retrieves information about memory usage by session cache.
 * 
 * @return array
 * @since PECL wincache >= 1.1.0
 **/
function wincache_scache_meminfo(){}

/**
 * Adds a variable in user cache, only if this variable doesn't already
 * exist in the cache. The added variable remains in the user cache
 * unless its time to live expires or it is deleted by using {@link
 * wincache_ucache_delete} or {@link wincache_ucache_clear} functions.
 * 
 * @param mixed $key Store the variable using this {@link key} name. If
 *   a variable with same key is already present the function will fail
 *   and return FALSE. {@link key} is case sensitive. To override the
 *   value even if {@link key} is present use {@link wincache_ucache_set}
 *   function instad. {@link key} can also take array of name => value
 *   pairs where names will be used as keys. This can be used to add
 *   multiple values in the cache in one operation, thus avoiding race
 *   condition.
 * @param mixed $value Value of a variable to store. {@link Value}
 *   supports all data types except resources, such as file handles. This
 *   paramter is ignored if first argument is an array. A general
 *   guidance is to pass NULL as {@link value} while using array as
 *   {@link key}.
 * @param int $ttl Time for the variable to live in the cache in
 *   seconds. After the value specified in {@link ttl} has passed the
 *   stored variable will be deleted from the cache. This parameter takes
 *   a default value of 0 which means the variable will stay in the cache
 *   unless explicitly deleted by using {@link wincache_ucache_delete} or
 *   {@link wincache_ucache_clear} functions.
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_add($key, $value, $ttl){}

/**
 * Compares the variable associated with the {@link key} with {@link
 * old_value} and if it matches then assigns the {@link new_value} to it.
 * 
 * @param string $key The {@link key} that is used to store the
 *   variable in the cache. {@link key} is case sensitive.
 * @param long $old_value Old value of the variable pointed by {@link
 *   key} in the user cache. The value should be of type long, otherwise
 *   the function returns FALSE.
 * @param long $new_value New value which will get assigned to variable
 *   pointer by {@link key} if a match is found. The value should be of
 *   type long, otherwise the function returns FALSE.
 * @return mixed
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_cas($key, $old_value, $new_value){}

/**
 * Clears/deletes all the values stored in the user cache.
 * 
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_clear(){}

/**
 * Decrements the value associated with the {@link key} by 1 or as
 * specified by {@link dec_by}.
 * 
 * @param string $key The {@link key} that was used to store the
 *   variable in the cache. {@link key} is case sensitive.
 * @param long $dec_by The value by which the variable associated with
 *   the {@link key} will get decremented. If the argument is a floating
 *   point number it will be truncated to nearest integer. The variable
 *   associated with the {@link key} should be of type long, otherwise
 *   the function fails and returns FALSE.
 * @param bool $success Will be set to TRUE on success and FALSE on
 *   failure.
 * @return mixed
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_dec($key, $dec_by, &$success){}

/**
 * Deletes the elements in the user cache pointed by {@link key}.
 * 
 * @param mixed $key The {@link key} that was used to store the
 *   variable in the cache. {@link key} is case sensitive. {@link key}
 *   can be an array of keys.
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_delete($key){}

/**
 * Checks if a variable with the {@link key} exists in the user cache or
 * not.
 * 
 * @param string $key The {@link key} that was used to store the
 *   variable in the cache. {@link key} is case sensitive.
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_exists($key){}

/**
 * Gets a variable stored in the user cache.
 * 
 * @param mixed $key The {@link key} that was used to store the
 *   variable in the cache. {@link key} is case sensitive. {@link key}
 *   can be an array of keys. In this case the return value will be an
 *   array of values of each element in the {@link key} array.
 * @param bool $success Will be set to TRUE on success and FALSE on
 *   failure.
 * @return mixed
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_get($key, &$success){}

/**
 * Increments the value associated with the {@link key} by 1 or as
 * specified by {@link inc_by}.
 * 
 * @param string $key The {@link key} that was used to store the
 *   variable in the cache. {@link key} is case sensitive.
 * @param long $inc_by The value by which the variable associated with
 *   the {@link key} will get incremented. If the argument is a floating
 *   point number it will be truncated to nearest integer. The variable
 *   associated with the {@link key} should be of type long, otherwise
 *   the function fails and returns FALSE.
 * @param bool $success Will be set to TRUE on success and FALSE on
 *   failure.
 * @return mixed
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_inc($key, $inc_by, &$success){}

/**
 * Retrieves information about data stored in the user cache.
 * 
 * @param bool $summaryonly Controls whether the returned array will
 *   contain information about individual cache entries along with the
 *   user cache summary.
 * @param string $key The key of an entry in the user cache. If
 *   specified then the returned array will contain information only
 *   about that cache entry. If not specified and {@link summaryonly} is
 *   set to false then the returned array will contain information about
 *   all entries in the cache.
 * @return array
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_info($summaryonly, $key){}

/**
 * Retrieves information about memory usage by user cache.
 * 
 * @return array
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_meminfo(){}

/**
 * Adds a variable in user cache. Overwrites a variable if it already
 * exists in the cache. The added or updated variable remains in the user
 * cache unless its time to live expires or it is deleted by using {@link
 * wincache_ucache_delete} or {@link wincache_ucache_clear} functions.
 * 
 * @param mixed $key Store the variable using this {@link key} name. If
 *   a variable with same {@link key} is already present the function
 *   will overwrite the previous value with the new one. {@link key} is
 *   case sensitive. {@link key} can also take array of name => value
 *   pairs where names will be used as keys. This can be used to add
 *   multiple values in the cache in one operation, thus avoiding race
 *   condition.
 * @param mixed $value Value of a variable to store. {@link Value}
 *   supports all data types except resources, such as file handles. This
 *   paramter is ignored if first argument is an array. A general
 *   guidance is to pass NULL as {@link value} while using array as
 *   {@link key}.
 * @param int $ttl Time for the variable to live in the cache in
 *   seconds. After the value specified in {@link ttl} has passed the
 *   stored variable will be deleted from the cache. This parameter takes
 *   a default value of 0 which means the variable will stay in the cache
 *   unless explicitly deleted by using {@link wincache_ucache_delete} or
 *   {@link wincache_ucache_clear} functions.
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_ucache_set($key, $value, $ttl){}

/**
 * Releases an exclusive lock that was obtained on a given key by using
 * {@link wincache_lock}. If any other process was blocked waiting for
 * the lock on this key, that process will be able to obtain the lock.
 * 
 * @param string $key Name of the key in the cache to release the lock
 *   on.
 * @return bool
 * @since PECL wincache >= 1.1.0
 **/
function wincache_unlock($key){}

/**
 * Wraps a string to a given number of characters using a string break
 * character.
 * 
 * @param string $str The input string.
 * @param int $width The column width.
 * @param string $break The line is broken using the optional {@link
 *   break} parameter.
 * @param bool $cut If the {@link cut} is set to , the string is always
 *   wrapped at or before the specified width. So if you have a word that
 *   is larger than the given width, it is broken apart. (See second
 *   example).
 * @return string
 * @since PHP 4 >= 4.0.2, PHP 5
 **/
function wordwrap($str, $width, $break, $cut){}

/**
 * This function gets the value of an extended attribute of a file.
 * 
 * @param string $filename The file from which we get the attribute.
 * @param string $name The name of the attribute.
 * @param int $flags Supported xattr flags XATTR_DONTFOLLOW Do not
 *   follow the symbolic link but operate on symbolic link itself.
 *   XATTR_ROOT Set attribute in root (trusted) namespace. Requires root
 *   privileges.
 * @return string
 * @since PECL xattr >= 0.9.0
 **/
function xattr_get($filename, $name, $flags){}

/**
 * This functions gets a list of names of extended attributes of a file.
 * 
 * @param string $filename The path of the file.
 * @param int $flags Supported xattr flags XATTR_DONTFOLLOW Do not
 *   follow the symbolic link but operate on symbolic link itself.
 *   XATTR_ROOT Set attribute in root (trusted) namespace. Requires root
 *   privileges.
 * @return array
 * @since PECL xattr >= 0.9.0
 **/
function xattr_list($filename, $flags){}

/**
 * This function removes an extended attribute of a file.
 * 
 * @param string $filename The file from which we remove the attribute.
 * @param string $name The name of the attribute to remove.
 * @param int $flags Supported xattr flags XATTR_DONTFOLLOW Do not
 *   follow the symbolic link but operate on symbolic link itself.
 *   XATTR_ROOT Set attribute in root (trusted) namespace. Requires root
 *   privileges.
 * @return bool
 * @since PECL xattr >= 0.9.0
 **/
function xattr_remove($filename, $name, $flags){}

/**
 * This function sets the value of an extended attribute of a file.
 * 
 * @param string $filename The file in which we set the attribute.
 * @param string $name The name of the extended attribute. This
 *   attribute will be created if it doesn't exist or replaced otherwise.
 *   You can change this behaviour by using the {@link flags} parameter.
 * @param string $value The value of the attribute.
 * @param int $flags Supported xattr flags XATTR_CREATE Function will
 *   fail if extended attribute already exists. XATTR_REPLACE Function
 *   will fail if extended attribute doesn't exist. XATTR_DONTFOLLOW Do
 *   not follow the symbolic link but operate on symbolic link itself.
 *   XATTR_ROOT Set attribute in root (trusted) namespace. Requires root
 *   privileges.
 * @return bool
 * @since PECL xattr >= 0.9.0
 **/
function xattr_set($filename, $name, $value, $flags){}

/**
 * This functions checks if the filesystem holding the given file
 * supports extended attributes. Read access to the file is required.
 * 
 * @param string $filename The path of the tested file.
 * @param int $flags Supported xattr flags XATTR_DONTFOLLOW Do not
 *   follow the symbolic link but operate on symbolic link itself.
 * @return bool
 * @since PECL xattr >= 1.0.0
 **/
function xattr_supported($filename, $flags){}

/**
 * Makes a binary diff of two files and stores the result in a patch
 * file. This function works with both text and binary files. Resulting
 * patch file can be later applied using {@link xdiff_file_bpatch}/{@link
 * xdiff_string_bpatch}.
 * 
 * @param string $old_file Path to the first file. This file acts as
 *   "old" file.
 * @param string $new_file Path to the second file. This file acts as
 *   "new" file.
 * @param string $dest Path of the resulting patch file. Resulting file
 *   contains differences between "old" and "new" files. It is in binary
 *   format and is human-unreadable.
 * @return bool
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_bdiff($old_file, $new_file, $dest){}

/**
 * Returns a size of a result file that would be created after applying
 * binary patch from file {@link file} to the original file.
 * 
 * @param string $file The path to the binary patch created by {@link
 *   xdiff_string_bdiff} or {@link xdiff_string_rabdiff} function.
 * @return int
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_bdiff_size($file){}

/**
 * Patches a {@link file} with a binary {@link patch} and stores the
 * result in a file {@link dest}. This function accepts patches created
 * both via {@link xdiff_file_bdiff} and {@link xdiff_file_rabdiff}
 * functions or their string counterparts.
 * 
 * @param string $file The original file.
 * @param string $patch The binary patch file.
 * @param string $dest Path of the resulting file.
 * @return bool
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_bpatch($file, $patch, $dest){}

/**
 * Makes an unified diff containing differences between {@link old_file}
 * and {@link new_file} and stores it in {@link dest} file. The resulting
 * file is human-readable. An optional {@link context} parameter
 * specifies how many lines of context should be added around each
 * change. Setting {@link minimal} parameter to true will result in
 * outputting the shortest patch file possible (can take a long time).
 * 
 * @param string $old_file Path to the first file. This file acts as
 *   "old" file.
 * @param string $new_file Path to the second file. This file acts as
 *   "new" file.
 * @param string $dest Path of the resulting patch file.
 * @param int $context Indicates how many lines of context you want to
 *   include in diff result.
 * @param bool $minimal Set this parameter to if you want to minimalize
 *   size of the result (can take a long time).
 * @return bool
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_diff($old_file, $new_file, $dest, $context, $minimal){}

/**
 * Makes a binary diff of two files and stores the result in a patch
 * file. This function works with both text and binary files. Resulting
 * patch file can be later applied using {@link xdiff_file_bpatch}.
 * 
 * Starting with version 1.5.0 this function is an alias of {@link
 * xdiff_file_bdiff}.
 * 
 * @param string $old_file Path to the first file. This file acts as
 *   "old" file.
 * @param string $new_file Path to the second file. This file acts as
 *   "new" file.
 * @param string $dest Path of the resulting patch file. Resulting file
 *   contains differences between "old" and "new" files. It is in binary
 *   format and is human-unreadable.
 * @return bool
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_diff_binary($old_file, $new_file, $dest){}

/**
 * Merges three files into one and stores the result in a file {@link
 * dest}. The {@link old_file} is an original version while {@link
 * new_file1} and {@link new_file2} are modified versions of an original.
 * 
 * @param string $old_file Path to the first file. It acts as "old"
 *   file.
 * @param string $new_file1 Path to the second file. It acts as
 *   modified version of {@link old_file}.
 * @param string $new_file2 Path to the third file. It acts as modified
 *   version of {@link old_file}.
 * @param string $dest Path of the resulting file, containing merged
 *   changed from both {@link new_file1} and {@link new_file2}.
 * @return mixed
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_merge3($old_file, $new_file1, $new_file2, $dest){}

/**
 * Patches a {@link file} with a {@link patch} and stores the result in a
 * file. {@link patch} has to be an unified diff created by {@link
 * xdiff_file_diff}/{@link xdiff_string_diff} function. An optional
 * {@link flags} parameter specifies mode of operation.
 * 
 * @param string $file The original file.
 * @param string $patch The unified patch file. It has to be created
 *   using {@link xdiff_string_diff}, {@link xdiff_file_diff} functions
 *   or compatible tools.
 * @param string $dest Path of the resulting file.
 * @param int $flags Can be either XDIFF_PATCH_NORMAL (default mode,
 *   normal patch) or XDIFF_PATCH_REVERSE (reversed patch). Starting from
 *   version 1.5.0, you can also use binary OR to enable
 *   XDIFF_PATCH_IGNORESPACE flag.
 * @return mixed
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_patch($file, $patch, $dest, $flags){}

/**
 * Patches a {@link file} with a binary {@link patch} and stores the
 * result in a file {@link dest}. This function accepts patches created
 * both via {@link xdiff_file_bdiff} or {@link xdiff_file_rabdiff}
 * functions or their string counterparts.
 * 
 * Starting with version 1.5.0 this function is an alias of {@link
 * xdiff_file_bpatch}.
 * 
 * @param string $file The original file.
 * @param string $patch The binary patch file.
 * @param string $dest Path of the resulting file.
 * @return bool
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_patch_binary($file, $patch, $dest){}

/**
 * Makes a binary diff of two files and stores the result in a patch
 * file. The difference between this function and {@link
 * xdiff_file_bdiff} is different algorithm used which should result in
 * faster execution and smaller diff produced. This function works with
 * both text and binary files. Resulting patch file can be later applied
 * using {@link xdiff_file_bpatch}/{@link xdiff_string_bpatch}.
 * 
 * For more details about differences between algorithm used please check
 * libxdiff website.
 * 
 * @param string $old_file Path to the first file. This file acts as
 *   "old" file.
 * @param string $new_file Path to the second file. This file acts as
 *   "new" file.
 * @param string $dest Path of the resulting patch file. Resulting file
 *   contains differences between "old" and "new" files. It is in binary
 *   format and is human-unreadable.
 * @return bool
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_file_rabdiff($old_file, $new_file, $dest){}

/**
 * Makes a binary diff of two strings and returns the result. This
 * function works with both text and binary data. Resulting patch can be
 * later applied using {@link xdiff_string_bpatch}/{@link
 * xdiff_file_bpatch}.
 * 
 * @param string $old_data First string with binary data. It acts as
 *   "old" data.
 * @param string $new_data Second string with binary data. It acts as
 *   "new" data.
 * @return string
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_bdiff($old_data, $new_data){}

/**
 * Returns a size of a result file that would be created after applying
 * binary {@link patch} to the original file.
 * 
 * @param string $patch The binary patch created by {@link
 *   xdiff_string_bdiff} or {@link xdiff_string_rabdiff} function.
 * @return int
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_bdiff_size($patch){}

/**
 * Patches a string {@link str} with a binary {@link patch}. This
 * function accepts patches created both via {@link xdiff_string_bdiff}
 * and {@link xdiff_string_rabdiff} functions or their file counterparts.
 * 
 * @param string $str The original binary string.
 * @param string $patch The binary patch string.
 * @return string
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_bpatch($str, $patch){}

/**
 * Makes an unified diff containing differences between {@link old_data}
 * string and {@link new_data} string and returns it. The resulting diff
 * is human-readable. An optional {@link context} parameter specifies how
 * many lines of context should be added around each change. Setting
 * {@link minimal} parameter to true will result in outputting the
 * shortest patch file possible (can take a long time).
 * 
 * @param string $old_data First string with data. It acts as "old"
 *   data.
 * @param string $new_data Second string with data. It acts as "new"
 *   data.
 * @param int $context Indicates how many lines of context you want to
 *   include in the diff result.
 * @param bool $minimal Set this parameter to if you want to minimalize
 *   the size of the result (can take a long time).
 * @return string
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_diff($old_data, $new_data, $context, $minimal){}

/**
 * Merges three strings into one and returns the result. The {@link
 * old_data} is an original version of data while {@link new_file1} and
 * {@link new_file2} are modified versions of an original. An optional
 * {@link error} is used to pass any rejected parts during merging
 * process.
 * 
 * @param string $old_data First string with data. It acts as "old"
 *   data.
 * @param string $new_data1 Second string with data. It acts as
 *   modified version of {@link old_data}.
 * @param string $new_data2 Third string with data. It acts as modified
 *   version of {@link old_data}.
 * @param string $error If provided then rejected parts are stored
 *   inside this variable.
 * @return mixed
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_merge3($old_data, $new_data1, $new_data2, &$error){}

/**
 * Patches a {@link str} string with an unified patch in {@link patch}
 * parameter and returns the result. {@link patch} has to be an unified
 * diff created by {@link xdiff_file_diff}/{@link xdiff_string_diff}
 * function. An optional {@link flags} parameter specifies mode of
 * operation. Any rejected parts of the patch will be stored inside
 * {@link error} variable if it is provided.
 * 
 * @param string $str The original string.
 * @param string $patch The unified patch string. It has to be created
 *   using {@link xdiff_string_diff}, {@link xdiff_file_diff} functions
 *   or compatible tools.
 * @param int $flags {@link flags} can be either XDIFF_PATCH_NORMAL
 *   (default mode, normal patch) or XDIFF_PATCH_REVERSE (reversed
 *   patch). Starting from version 1.5.0, you can also use binary OR to
 *   enable XDIFF_PATCH_IGNORESPACE flag.
 * @param string $error If provided then rejected parts are stored
 *   inside this variable.
 * @return string
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_patch($str, $patch, $flags, &$error){}

/**
 * Patches a string {@link str} with a binary {@link patch}. This
 * function accepts patches created both via {@link xdiff_string_bdiff}
 * and {@link xdiff_string_rabdiff} functions or their file counterparts.
 * 
 * Starting with version 1.5.0 this function is an alias of {@link
 * xdiff_string_bpatch}.
 * 
 * @param string $str The original binary string.
 * @param string $patch The binary patch string.
 * @return string
 * @since PECL xdiff >= 0.2.0
 **/
function xdiff_string_patch_binary($str, $patch){}

/**
 * @param string $xml XML response returned by XMLRPC method.
 * @param string $encoding Input encoding supported by iconv.
 * @return mixed
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_decode($xml, $encoding){}

/**
 * @param string $xml
 * @param string $method
 * @param string $encoding
 * @return mixed
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_decode_request($xml, &$method, $encoding){}

/**
 * @param mixed $value
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_encode($value){}

/**
 * @param string $method Name of the method to call.
 * @param mixed $params Method parameters compatible with method
 *   signature.
 * @param array $output_options Array specifying output options may
 *   contain (default values are emphasised): output_type: php, xml
 *   verbosity: no_white_space, newlines_only, pretty escaping: cdata,
 *   non-ascii, non-print, markup (may be a string with one value or an
 *   array with multiple values) version: simple, xmlrpc, soap 1.1, auto
 *   encoding: iso-8859-1, other character set supported by iconv
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_encode_request($method, $params, $output_options){}

/**
 * This function is especially useful for base64 and datetime strings.
 * 
 * @param mixed $value
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_get_type($value){}

/**
 * @param array $arg Array returned by {@link xmlrpc_decode}.
 * @return bool
 * @since PHP 4 >= 4.3.0, PHP 5
 **/
function xmlrpc_is_fault($arg){}

/**
 * @param string $xml
 * @return array
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_parse_method_descriptions($xml){}

/**
 * @param resource $server
 * @param array $desc
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_server_add_introspection_data($server, $desc){}

/**
 * @param resource $server
 * @param string $xml
 * @param mixed $user_data
 * @param array $output_options
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_server_call_method($server, $xml, $user_data, $output_options){}

/**
 * @return resource
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_server_create(){}

/**
 * @param resource $server
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_server_destroy($server){}

/**
 * @param resource $server
 * @param string $function
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_server_register_introspection_callback($server, $function){}

/**
 * @param resource $server
 * @param string $method_name
 * @param string $function
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_server_register_method($server, $method_name, $function){}

/**
 * Sets xmlrpc type, base64 or datetime, for a PHP string value.
 * 
 * @param string $value Value to set the type
 * @param string $type 'base64' or 'datetime'
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5
 **/
function xmlrpc_set_type(&$value, $type){}

/**
 * Ends the current attribute.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_attribute($xmlwriter){}

/**
 * Ends the current CDATA section.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_cdata($xmlwriter){}

/**
 * Ends the current comment.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0
 **/
function xmlwriter_end_comment($xmlwriter){}

/**
 * Ends the current document.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_document($xmlwriter){}

/**
 * Ends the DTD of the document.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_dtd($xmlwriter){}

/**
 * Ends the current DTD attribute list.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_dtd_attlist($xmlwriter){}

/**
 * Ends the current DTD element.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_dtd_element($xmlwriter){}

/**
 * Ends the current DTD entity.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_dtd_entity($xmlwriter){}

/**
 * Ends the current element.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_element($xmlwriter){}

/**
 * Ends the current processing instruction.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_end_pi($xmlwriter){}

/**
 * Flushes the current buffer.
 * 
 * @param resource $xmlwriter Whether to empty the buffer or no.
 *   Default is .
 * @param bool $empty
 * @return mixed
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0
 **/
function xmlwriter_flush($xmlwriter, $empty){}

/**
 * End the current xml element. Writes an end tag even if the element is
 * empty.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.2.0, PECL xmlwriter >= 2.0.4
 **/
function xmlwriter_full_end_element($xmlwriter){}

/**
 * Creates a new XMLWriter using memory for string output.
 * 
 * @return resource
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_open_memory(){}

/**
 * Creates a new XMLWriter using {@link uri} for the output.
 * 
 * @param string $uri The URI of the resource for the output.
 * @return resource
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_open_uri($uri){}

/**
 * Returns the current buffer.
 * 
 * @param resource $xmlwriter Whether to flush the output buffer or no.
 *   Default is .
 * @param bool $flush
 * @return string
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_output_memory($xmlwriter, $flush){}

/**
 * Toggles indentation on or off.
 * 
 * @param resource $xmlwriter Whether indentation is enabled.
 * @param bool $indent
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_set_indent($xmlwriter, $indent){}

/**
 * Sets the string which will be used to indent each element/attribute of
 * the resulting xml.
 * 
 * @param resource $xmlwriter The indentation string.
 * @param string $indentString
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_set_indent_string($xmlwriter, $indentString){}

/**
 * Starts an attribute.
 * 
 * @param resource $xmlwriter The attribute name.
 * @param string $name
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_attribute($xmlwriter, $name){}

/**
 * Starts a namespaced attribute.
 * 
 * @param resource $xmlwriter The namespace prefix.
 * @param string $prefix The attribute name.
 * @param string $name The namespace URI.
 * @param string $uri
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_attribute_ns($xmlwriter, $prefix, $name, $uri){}

/**
 * Starts a CDATA.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_cdata($xmlwriter){}

/**
 * Starts a comment.
 * 
 * @param resource $xmlwriter
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0
 **/
function xmlwriter_start_comment($xmlwriter){}

/**
 * Starts a document.
 * 
 * @param resource $xmlwriter The version number of the document as
 *   part of the XML declaration. Defaults to 1.0.
 * @param string $version The encoding of the document as part of the
 *   XML declaration. by default.
 * @param string $encoding yes or no.
 * @param string $standalone
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_document($xmlwriter, $version, $encoding, $standalone){}

/**
 * Starts a DTD.
 * 
 * @param resource $xmlwriter The qualified name of the document type
 *   to create.
 * @param string $qualifiedName The external subset public identifier.
 * @param string $publicId The external subset system identifier.
 * @param string $systemId
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_dtd($xmlwriter, $qualifiedName, $publicId, $systemId){}

/**
 * Starts a DTD attribute list.
 * 
 * @param resource $xmlwriter The attribute list name.
 * @param string $name
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_dtd_attlist($xmlwriter, $name){}

/**
 * Starts a DTD element.
 * 
 * @param resource $xmlwriter The qualified name of the document type
 *   to create.
 * @param string $qualifiedName
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_dtd_element($xmlwriter, $qualifiedName){}

/**
 * Starts a DTD entity.
 * 
 * @param resource $xmlwriter The name of the entity.
 * @param string $name
 * @param bool $isparam
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_dtd_entity($xmlwriter, $name, $isparam){}

/**
 * Starts an element.
 * 
 * @param resource $xmlwriter The element name.
 * @param string $name
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_element($xmlwriter, $name){}

/**
 * Starts a namespaced element.
 * 
 * @param resource $xmlwriter The namespace prefix.
 * @param string $prefix The element name.
 * @param string $name The namespace URI.
 * @param string $uri
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_element_ns($xmlwriter, $prefix, $name, $uri){}

/**
 * Starts a processing instruction tag.
 * 
 * @param resource $xmlwriter The target of the processing instruction.
 * @param string $target
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_start_pi($xmlwriter, $target){}

/**
 * Writes a text.
 * 
 * @param resource $xmlwriter The contents of the text.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_text($xmlwriter, $content){}

/**
 * Writes a full attribute.
 * 
 * @param resource $xmlwriter The name of the attribute.
 * @param string $name The value of the attribute.
 * @param string $value
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_attribute($xmlwriter, $name, $value){}

/**
 * Writes a full namespaced attribute.
 * 
 * @param resource $xmlwriter The namespace prefix.
 * @param string $prefix The attribute name.
 * @param string $name The namespace URI.
 * @param string $uri The attribute value.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_attribute_ns($xmlwriter, $prefix, $name, $uri, $content){}

/**
 * Writes a full CDATA.
 * 
 * @param resource $xmlwriter The contents of the CDATA.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_cdata($xmlwriter, $content){}

/**
 * Writes a full comment.
 * 
 * @param resource $xmlwriter The contents of the comment.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_comment($xmlwriter, $content){}

/**
 * Writes a full DTD.
 * 
 * @param resource $xmlwriter The DTD name.
 * @param string $name The external subset public identifier.
 * @param string $publicId The external subset system identifier.
 * @param string $systemId The content of the DTD.
 * @param string $subset
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_dtd($xmlwriter, $name, $publicId, $systemId, $subset){}

/**
 * Writes a DTD attribute list.
 * 
 * @param resource $xmlwriter The name of the DTD attribute list.
 * @param string $name The content of the DTD attribute list.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_dtd_attlist($xmlwriter, $name, $content){}

/**
 * Writes a full DTD element.
 * 
 * @param resource $xmlwriter The name of the DTD element.
 * @param string $name The content of the element.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_dtd_element($xmlwriter, $name, $content){}

/**
 * Writes a full DTD entity.
 * 
 * @param resource $xmlwriter The name of the entity.
 * @param string $name The content of the entity.
 * @param string $content
 * @param bool $pe
 * @param string $pubid
 * @param string $sysid
 * @param string $ndataid
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_dtd_entity($xmlwriter, $name, $content, $pe, $pubid, $sysid, $ndataid){}

/**
 * Writes a full element tag.
 * 
 * @param resource $xmlwriter The element name.
 * @param string $name The element contents.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_element($xmlwriter, $name, $content){}

/**
 * Writes a full namespaced element tag.
 * 
 * @param resource $xmlwriter The namespace prefix.
 * @param string $prefix The element name.
 * @param string $name The namespace URI.
 * @param string $uri The element contents.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_element_ns($xmlwriter, $prefix, $name, $uri, $content){}

/**
 * Writes a processing instruction.
 * 
 * @param resource $xmlwriter The target of the processing instruction.
 * @param string $target The content of the processing instruction.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
 **/
function xmlwriter_write_pi($xmlwriter, $target, $content){}

/**
 * Writes a raw xml text.
 * 
 * @param resource $xmlwriter The text string to write.
 * @param string $content
 * @return bool
 * @since PHP 5 >= 5.2.0, PECL xmlwriter >= 2.0.4
 **/
function xmlwriter_write_raw($xmlwriter, $content){}

/**
 * Gets the XML parser error string associated with the given {@link
 * code}.
 * 
 * @param int $code An error code from {@link xml_get_error_code}.
 * @return string
 * @since PHP 4, PHP 5
 **/
function xml_error_string($code){}

/**
 * Gets the current byte index of the given XML parser.
 * 
 * @param resource $parser A reference to the XML parser to get byte
 *   index from.
 * @return int
 * @since PHP 4, PHP 5
 **/
function xml_get_current_byte_index($parser){}

/**
 * Gets the current column number of the given XML parser.
 * 
 * @param resource $parser A reference to the XML parser to get column
 *   number from.
 * @return int
 * @since PHP 4, PHP 5
 **/
function xml_get_current_column_number($parser){}

/**
 * Gets the current line number for the given XML parser.
 * 
 * @param resource $parser A reference to the XML parser to get line
 *   number from.
 * @return int
 * @since PHP 4, PHP 5
 **/
function xml_get_current_line_number($parser){}

/**
 * Gets the XML parser error code.
 * 
 * @param resource $parser A reference to the XML parser to get error
 *   code from.
 * @return int
 * @since PHP 4, PHP 5
 **/
function xml_get_error_code($parser){}

/**
 * {@link xml_parse} parses an XML document. The handlers for the
 * configured events are called as many times as necessary.
 * 
 * @param resource $parser A reference to the XML parser to use.
 * @param string $data Chunk of data to parse. A document may be parsed
 *   piece-wise by calling {@link xml_parse} several times with new data,
 *   as long as the {@link is_final} parameter is set and when the last
 *   data is parsed.
 * @param bool $is_final If set and , {@link data} is the last piece of
 *   data sent in this parse.
 * @return int
 * @since PHP 4, PHP 5
 **/
function xml_parse($parser, $data, $is_final){}

/**
 * {@link xml_parser_create} creates a new XML parser and returns a
 * resource handle referencing it to be used by the other XML functions.
 * 
 * @param string $encoding The optional {@link encoding} specifies the
 *   character encoding for the input/output in PHP 4. Starting from PHP
 *   5, the input encoding is automatically detected, so that the {@link
 *   encoding} parameter specifies only the output encoding. In PHP 4,
 *   the default output encoding is the same as the input charset. If
 *   empty string is passed, the parser attempts to identify which
 *   encoding the document is encoded in by looking at the heading 3 or 4
 *   bytes. In PHP 5.0.0 and 5.0.1, the default output charset is
 *   ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported
 *   encodings are ISO-8859-1, UTF-8 and US-ASCII.
 * @return resource
 * @since PHP 4, PHP 5
 **/
function xml_parser_create($encoding){}

/**
 * {@link xml_parser_create_ns} creates a new XML parser with XML
 * namespace support and returns a resource handle referencing it to be
 * used by the other XML functions.
 * 
 * @param string $encoding The optional {@link encoding} specifies the
 *   character encoding for the input/output in PHP 4. Starting from PHP
 *   5, the input encoding is automatically detected, so that the {@link
 *   encoding} parameter specifies only the output encoding. In PHP 4,
 *   the default output encoding is the same as the input charset. In PHP
 *   5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in
 *   PHP 5.0.2 and upper is UTF-8. The supported encodings are
 *   ISO-8859-1, UTF-8 and US-ASCII.
 * @param string $separator With a namespace aware parser tag
 *   parameters passed to the various handler functions will consist of
 *   namespace and tag name separated by the string specified in {@link
 *   seperator}.
 * @return resource
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function xml_parser_create_ns($encoding, $separator){}

/**
 * Frees the given XML {@link parser}.
 * 
 * @param resource $parser
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_parser_free($parser){}

/**
 * Gets an option value from an XML parser.
 * 
 * @param resource $parser
 * @param int $option
 * @return mixed
 * @since PHP 4, PHP 5
 **/
function xml_parser_get_option($parser, $option){}

/**
 * Sets an option in an XML parser.
 * 
 * @param resource $parser A reference to the XML parser to set an
 *   option in.
 * @param int $option Which option to set. See below. The following
 *   options are available: XML parser options Option constant Data type
 *   Description XML_OPTION_CASE_FOLDING integer Controls whether
 *   case-folding is enabled for this XML parser. Enabled by default.
 *   XML_OPTION_SKIP_TAGSTART integer Specify how many characters should
 *   be skipped in the beginning of a tag name. XML_OPTION_SKIP_WHITE
 *   integer Whether to skip values consisting of whitespace characters.
 *   XML_OPTION_TARGET_ENCODING string Sets which target encoding to use
 *   in this XML parser.By default, it is set to the same as the source
 *   encoding used by {@link xml_parser_create}. Supported target
 *   encodings are ISO-8859-1, US-ASCII and UTF-8.
 * @param mixed $value The option's new value.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_parser_set_option($parser, $option, $value){}

/**
 * This function parses an XML file into 2 parallel array structures, one
 * ({@link index}) containing pointers to the location of the appropriate
 * values in the {@link values} array. These last two parameters must be
 * passed by reference.
 * 
 * @param resource $parser
 * @param string $data
 * @param array $values
 * @param array $index
 * @return int
 * @since PHP 4, PHP 5
 **/
function xml_parse_into_struct($parser, $data, &$values, &$index){}

/**
 * Sets the character data handler function for the XML parser {@link
 * parser}.
 * 
 * @param resource $parser
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept two parameters: handler resource{@link parser} string{@link
 *   data} {@link parser} The first parameter, parser, is a reference to
 *   the XML parser calling the handler. {@link data} The second
 *   parameter, {@link data}, contains the character data as a string.
 *   Character data handler is called for every piece of a text in the
 *   XML document. It can be called multiple times inside each fragment
 *   (e.g. for non-ASCII strings). If a handler function is set to an
 *   empty string, or , the handler in question is disabled.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_character_data_handler($parser, $handler){}

/**
 * Sets the default handler function for the XML parser {@link parser}.
 * 
 * @param resource $parser
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept two parameters: handler resource{@link parser} string{@link
 *   data} {@link parser} The first parameter, parser, is a reference to
 *   the XML parser calling the handler. {@link data} The second
 *   parameter, {@link data}, contains the character data.This may be the
 *   XML declaration, document type declaration, entities or other data
 *   for which no other handler exists. If a handler function is set to
 *   an empty string, or , the handler in question is disabled.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_default_handler($parser, $handler){}

/**
 * Sets the element handler functions for the XML {@link parser}. {@link
 * start_element_handler} and {@link end_element_handler} are strings
 * containing the names of functions that must exist when {@link
 * xml_parse} is called for {@link parser}.
 * 
 * @param resource $parser
 * @param callback $start_element_handler The function named by {@link
 *   start_element_handler} must accept three parameters:
 *   start_element_handler resource{@link parser} string{@link name}
 *   array{@link attribs} {@link parser} The first parameter, parser, is
 *   a reference to the XML parser calling the handler. {@link name} The
 *   second parameter, {@link name}, contains the name of the element for
 *   which this handler is called.If case-folding is in effect for this
 *   parser, the element name will be in uppercase letters. {@link
 *   attribs} The third parameter, {@link attribs}, contains an
 *   associative array with the element's attributes (if any).The keys of
 *   this array are the attribute names, the values are the attribute
 *   values.Attribute names are case-folded on the same criteria as
 *   element names.Attribute values are not case-folded. The original
 *   order of the attributes can be retrieved by walking through {@link
 *   attribs} the normal way, using {@link each}.The first key in the
 *   array was the first attribute, and so on.
 * @param callback $end_element_handler
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_element_handler($parser, $start_element_handler, $end_element_handler){}

/**
 * Set a handler to be called when leaving the scope of a namespace
 * declaration. This will be called, for each namespace declaration,
 * after the handler for the end tag of the element in which the
 * namespace was declared.
 * 
 * @param resource $parser A reference to the XML parser.
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept three parameters, and should return an integer value. If the
 *   value returned from the handler is (which it will be if no value is
 *   returned), the XML parser will stop parsing and {@link
 *   xml_get_error_code} will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.
 *   handler resource{@link parser} string{@link user_data} string{@link
 *   prefix} {@link parser} The first parameter, parser, is a reference
 *   to the XML parser calling the handler. {@link user_data} {@link
 *   prefix} If a handler function is set to an empty string, or , the
 *   handler in question is disabled.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function xml_set_end_namespace_decl_handler($parser, $handler){}

/**
 * Sets the external entity reference handler function for the XML parser
 * {@link parser}.
 * 
 * @param resource $parser
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept five parameters, and should return an integer value.If the
 *   value returned from the handler is (which it will be if no value is
 *   returned), the XML parser will stop parsing and {@link
 *   xml_get_error_code} will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.
 *   handler resource{@link parser} string{@link open_entity_names}
 *   string{@link base} string{@link system_id} string{@link public_id}
 *   {@link parser} The first parameter, parser, is a reference to the
 *   XML parser calling the handler. {@link open_entity_names} The second
 *   parameter, {@link open_entity_names}, is a space-separated list of
 *   the names of the entities that are open for the parse of this entity
 *   (including the name of the referenced entity). {@link base} This is
 *   the base for resolving the system identifier ({@link system_id}) of
 *   the external entity.Currently this parameter will always be set to
 *   an empty string. {@link system_id} The fourth parameter, {@link
 *   system_id}, is the system identifier as specified in the entity
 *   declaration. {@link public_id} The fifth parameter, {@link
 *   public_id}, is the public identifier as specified in the entity
 *   declaration, or an empty string if none was specified; the
 *   whitespace in the public identifier will have been normalized as
 *   required by the XML spec. If a handler function is set to an empty
 *   string, or , the handler in question is disabled.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_external_entity_ref_handler($parser, $handler){}

/**
 * Sets the notation declaration handler function for the XML parser
 * {@link parser}.
 * 
 * A notation declaration is part of the document's DTD and has the
 * following format:
 * 
 * <!NOTATION <parameter>name</parameter> {
 * <parameter>systemId</parameter> | <parameter>publicId</parameter>?>
 * 
 * See section 4.7 of the XML 1.0 spec for the definition of notation
 * declarations.
 * 
 * @param resource $parser
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept five parameters: handler resource{@link parser} string{@link
 *   notation_name} string{@link base} string{@link system_id}
 *   string{@link public_id} {@link parser} The first parameter, parser,
 *   is a reference to the XML parser calling the handler. {@link
 *   notation_name} This is the notation's {@link name}, as per the
 *   notation format described above. {@link base} This is the base for
 *   resolving the system identifier ({@link system_id}) of the notation
 *   declaration. Currently this parameter will always be set to an empty
 *   string. {@link system_id} System identifier of the external notation
 *   declaration. {@link public_id} Public identifier of the external
 *   notation declaration. If a handler function is set to an empty
 *   string, or , the handler in question is disabled.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_notation_decl_handler($parser, $handler){}

/**
 * This function allows to use {@link parser} inside {@link object}. All
 * callback functions could be set with {@link xml_set_element_handler}
 * etc and assumed to be methods of {@link object}.
 * 
 * @param resource $parser
 * @param object $object
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_object($parser, &$object){}

/**
 * Sets the processing instruction (PI) handler function for the XML
 * parser {@link parser}.
 * 
 * A processing instruction has the following format: <?target data?> You
 * can put PHP code into such a tag, but be aware of one limitation: in
 * an XML PI, the PI end tag (?>) can not be quoted, so this character
 * sequence should not appear in the PHP code you embed with PIs in XML
 * documents.If it does, the rest of the PHP code, as well as the "real"
 * PI end tag, will be treated as character data.
 * 
 * @param resource $parser
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept three parameters: handler resource{@link parser} string{@link
 *   target} string{@link data} {@link parser} The first parameter,
 *   parser, is a reference to the XML parser calling the handler. {@link
 *   target} The second parameter, {@link target}, contains the PI
 *   target. {@link data} The third parameter, {@link data}, contains the
 *   PI data. If a handler function is set to an empty string, or , the
 *   handler in question is disabled.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_processing_instruction_handler($parser, $handler){}

/**
 * Set a handler to be called when a namespace is declared. Namespace
 * declarations occur inside start tags. But the namespace declaration
 * start handler is called before the start tag handler for each
 * namespace declared in that start tag.
 * 
 * @param resource $parser A reference to the XML parser.
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept four parameters, and should return an integer value. If the
 *   value returned from the handler is (which it will be if no value is
 *   returned), the XML parser will stop parsing and {@link
 *   xml_get_error_code} will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.
 *   handler resource{@link parser} string{@link user_data} string{@link
 *   prefix} string{@link uri} {@link parser} The first parameter,
 *   parser, is a reference to the XML parser calling the handler. {@link
 *   user_data} {@link prefix} {@link uri} If a handler function is set
 *   to an empty string, or , the handler in question is disabled.
 * @return bool
 * @since PHP 4 >= 4.0.5, PHP 5
 **/
function xml_set_start_namespace_decl_handler($parser, $handler){}

/**
 * Sets the unparsed entity declaration handler function for the XML
 * parser {@link parser}.
 * 
 * The {@link handler} will be called if the XML parser encounters an
 * external entity declaration with an NDATA declaration, like the
 * following:
 * 
 * <!ENTITY <parameter>name</parameter> {<parameter>publicId</parameter>
 * | <parameter>systemId</parameter>} NDATA
 * <parameter>notationName</parameter>
 * 
 * See section 4.2.2 of the XML 1.0 spec for the definition of notation
 * declared external entities.
 * 
 * @param resource $parser
 * @param callback $handler {@link handler} is a string containing the
 *   name of a function that must exist when {@link xml_parse} is called
 *   for {@link parser}. The function named by {@link handler} must
 *   accept six parameters: handler resource{@link parser} string{@link
 *   entity_name} string{@link base} string{@link system_id} string{@link
 *   public_id} string{@link notation_name} {@link parser} The first
 *   parameter, parser, is a reference to the XML parser calling the
 *   handler. {@link entity_name} The name of the entity that is about to
 *   be defined. {@link base} This is the base for resolving the system
 *   identifier ({@link systemId}) of the external entity.Currently this
 *   parameter will always be set to an empty string. {@link system_id}
 *   System identifier for the external entity. {@link public_id} Public
 *   identifier for the external entity. {@link notation_name} Name of
 *   the notation of this entity (see {@link
 *   xml_set_notation_decl_handler}). If a handler function is set to an
 *   empty string, or , the handler in question is disabled.
 * @return bool
 * @since PHP 4, PHP 5
 **/
function xml_set_unparsed_entity_decl_handler($parser, $handler){}

/**
 * The optional {@link contextnode} can be specified for doing relative
 * XPath queries.
 * 
 * See also {@link xpath_new_context}.
 * 
 * @param XPathContext $xpath_context
 * @param string $xpath_expression
 * @param domnode $contextnode
 * @return XPathObject
 * @since PHP 4
 **/
function xpath_eval($xpath_context, $xpath_expression, $contextnode){}

/**
 * {@link xpath_eval_expression} Example
 * 
 * <?php
 * 
 * include("example.inc");
 * 
 * if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while parsing the
 * document\n"; exit; }
 * 
 * $xpath = xpath_new_context($dom);
 * var_dump(xpath_eval_expression($xpath, '/chapter/@language'));
 * 
 * ?>
 * 
 * object(XPathObject)(2) { ["type"]=> int(1) ["nodeset"]=> array(1) {
 * [0]=> object(domattribute)(5) { ["type"]=> int(2) ["name"]=> string(8)
 * "language" ["value"]=> string(2) "en" [0]=> int(7) [1]=>
 * int(138004256) } } }
 * 
 * See also {@link xpath_eval}.
 * 
 * @param XPathContext $xpath_context
 * @param string $expression
 * @param domnode $contextnode
 * @return XPathObject
 * @since PHP 4
 **/
function xpath_eval_expression($xpath_context, $expression, $contextnode){}

/**
 * Creates a new xpath context.
 * 
 * @param domdocument $dom_document
 * @return XPathContext
 * @since PHP 4
 **/
function xpath_new_context($dom_document){}

/**
 * @param XPathContext $xpath_context
 * @param string $prefix
 * @param string $uri
 * @return bool
 * @since PHP 4 >= 4.2.0
 **/
function xpath_register_ns($xpath_context, $prefix, $uri){}

/**
 * @param XPathContext $xpath_context
 * @param object $context_node
 * @return bool
 * @since PHP 4 >= 4.3.0
 **/
function xpath_register_ns_auto($xpath_context, $context_node){}

/**
 * @param XPathContext $xpath_context
 * @param string $eval_str
 * @param domnode $contextnode
 * @return int
 * @since PHP 4
 **/
function xptr_eval($xpath_context, $eval_str, $contextnode){}

/**
 * @return XPathContext
 * @since PHP 4
 **/
function xptr_new_context(){}

/**
 * {@link xslt_backend_info} gets information about the compilation
 * settings of the backend.
 * 
 * @return string
 * @since PHP 4 >= 4.3.0
 **/
function xslt_backend_info(){}

/**
 * {@link xslt_backend_name} gets the name of the backend.
 * 
 * @return string
 * @since PHP 4 >= 4.3.0
 **/
function xslt_backend_name(){}

/**
 * {@link xslt_backend_version} gets the version number of Sablotron.
 * 
 * @return string
 * @since PHP 4 >= 4.3.0
 **/
function xslt_backend_version(){}

/**
 * Create and return a new XSLT processor resource for manipulation by
 * the other XSLT functions.
 * 
 * @return resource
 * @since PHP 4 >= 4.0.3
 **/
function xslt_create(){}

/**
 * Returns an error code describing the last error that occurred on the
 * passed XSLT processor.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @return int
 * @since PHP 4 >= 4.0.3
 **/
function xslt_errno($xh){}

/**
 * Returns a string describing the last error that occurred on the passed
 * XSLT processor.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @return string
 * @since PHP 4 >= 4.0.3
 **/
function xslt_error($xh){}

/**
 * Free the XSLT processor identified by the given handle.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @return void
 * @since PHP 4 >= 4.0.3
 **/
function xslt_free($xh){}

/**
 * {@link xslt_getopt} returns the options on the given {@link
 * processor}.
 * 
 * @param resource $processor The XSLT processor link identifier,
 *   created with {@link xslt_create}.
 * @return int
 * @since PHP 4 >= 4.3.0
 **/
function xslt_getopt($processor){}

/**
 * The {@link xslt_process} function is the crux of the XSLT extension.
 * It allows you to perform an XSLT transformation using almost any type
 * of input source - the containers. This is accomplished through the use
 * of argument buffers -- a concept taken from the Sablotron XSLT
 * processor (currently the only XSLT processor this extension supports).
 * The input containers default to a filename 'containing' the document
 * to be processed.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param string $xmlcontainer Path to XML file or placeholder for the
 *   XML argument.
 * @param string $xslcontainer Path to XSL file or placeholder for the
 *   XML argument.
 * @param string $resultcontainer The result container defaults to a
 *   filename for the transformed document. If the result container is
 *   not specified - i.e. - than the result is returned.
 * @param array $arguments Instead of files as the XML and XSLT
 *   arguments to the {@link xslt_process} function, you can specify
 *   argument place holders which are then substituted by values given in
 *   the {@link arguments} array.
 * @param array $parameters An array for any top-level parameters that
 *   will be passed to the XSLT document. These parameters can then be
 *   accessed within your XSL files using the <xsl:param
 *   name=parameter_name> instruction. The parameters must be UTF-8
 *   encoded and their values will be interpreted as strings by the
 *   Sablotron processor. In other words - you cannot pass node-sets as
 *   parameters to the XSLT document.
 * @return mixed
 * @since PHP 4 >= 4.0.3
 **/
function xslt_process($xh, $xmlcontainer, $xslcontainer, $resultcontainer, $arguments, $parameters){}

/**
 * {@link xslt_setopt} sets the options specified by {@link newmask} on
 * the given {@link processor}.
 * 
 * @param resource $processor The XSLT processor link identifier,
 *   created with {@link xslt_create}.
 * @param int $newmask {@link newmask} is a bitmask constructed with
 *   the following constants: XSLT_SABOPT_PARSE_PUBLIC_ENTITIES - Tell
 *   the processor to parse public entities. By default this has been
 *   turned off. XSLT_SABOPT_DISABLE_ADDING_META - Do not add the meta
 *   tag "Content-Type" for HTML output. The default is set during the
 *   compilation of the processor. XSLT_SABOPT_DISABLE_STRIPPING -
 *   Suppress the whitespace stripping (on data files only).
 *   XSLT_SABOPT_IGNORE_DOC_NOT_FOUND - Consider unresolved documents
 *   (the document() function) non-lethal.
 * @return mixed
 * @since PHP 4 >= 4.3.0
 **/
function xslt_setopt($processor, $newmask){}

/**
 * Sets the base URI for all XSLT transformations, the base URI is used
 * with Xpath instructions to resolve document() and other commands which
 * access external resources. It is also used to resolve URIs for the
 * <xsl:include> and <xsl:import> elements.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param string $uri The base URI to be used.
 * @return void
 * @since PHP 4 >= 4.0.5
 **/
function xslt_set_base($xh, $uri){}

/**
 * Set the output encoding for the XSLT transformations. When using the
 * Sablotron backend, this option is only available when you compile
 * Sablotron with encoding support.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param string $encoding An output encoding, e.g iso-8859-1.
 * @return void
 * @since PHP 4 >= 4.0.5
 **/
function xslt_set_encoding($xh, $encoding){}

/**
 * Set an error handler function for the XSLT processor given by {@link
 * xh}, this function will be called whenever an error occurs in the XSLT
 * transformation (this function is also called for notices).
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param mixed $handler The user function needs to accept four
 *   parameters: the XSLT processor, the error level, the error code and
 *   an array of messages. The function can be shown as: error_handler
 *   resource{@link xh} int{@link error_level} int{@link error_code}
 *   array{@link messages}
 * @return void
 * @since PHP 4 >= 4.0.4
 **/
function xslt_set_error_handler($xh, $handler){}

/**
 * This function allows you to set the file in which you want XSLT log
 * messages to, XSLT log messages are different than error messages, in
 * that log messages are not actually error messages but rather messages
 * related to the state of the XSLT processor. They are useful for
 * debugging XSLT, when something goes wrong.
 * 
 * By default logging is disabled, in order to enable logging you must
 * first call {@link xslt_set_log} with a boolean parameter which enables
 * logging, then if you want to set the log file to debug to, you must
 * then pass it a string containing the filename.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param mixed $log This parameter is either a boolean value which
 *   toggles logging on and off, or a string containing the logfile in
 *   which log errors too.
 * @return void
 * @since PHP 4 >= 4.0.6
 **/
function xslt_set_log($xh, $log){}

/**
 * This function allows to use the {@link processor} inside an {@link
 * object} and to resolve all callback functions in it.
 * 
 * The callback functions can be declared with {@link
 * xslt_set_sax_handlers}, {@link xslt_set_scheme_handlers} or {@link
 * xslt_set_error_handler} and are assumed to be methods of {@link
 * object}.
 * 
 * @param resource $processor The XSLT processor link identifier,
 *   created with {@link xslt_create}.
 * @param object $obj An object.
 * @return bool
 * @since PHP 4 >= 4.3.0
 **/
function xslt_set_object($processor, &$obj){}

/**
 * Set SAX handlers on the resource handle given by {@link xh}.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param array $handlers SAX handlers should be a two dimensional
 *   array with the format (all top level elements are optional):
 *   
 *   array( [document] => array( start document handler, end document
 *   handler ), [element] => array( start element handler, end element
 *   handler ), [namespace] => array( start namespace handler, end
 *   namespace handler ), [comment] => comment handler, [pi] =>
 *   processing instruction handler, [character] => character data
 *   handler )
 * @return void
 * @since PHP 4 >= 4.0.3
 **/
function xslt_set_sax_handler($xh, $handlers){}

/**
 * {@link xslt_set_sax_handlers} registers the SAX {@link handlers} for
 * the document, given a XSLT {@link processor} resource.
 * 
 * Using {@link xslt_set_sax_handlers} doesn't look very different than
 * running a SAX parser like {@link xml_parse} on the result of an {@link
 * xslt_process} transformation.
 * 
 * @param resource $processor The XSLT processor link identifier,
 *   created with {@link xslt_create}.
 * @param array $handlers {@link handlers} should be an array in the
 *   following format:
 *   
 *   <?php
 *   
 *   $handlers = array(
 *   
 *   "document" => array( "start_doc", "end_doc"),
 *   
 *   "element" => array( "start_element", "end_element"),
 *   
 *   "namespace" => array( "start_namespace", "end_namespace"),
 *   
 *   "comment" => "comment",
 *   
 *   "pi" => "pi",
 *   
 *   "character" => "characters"
 *   
 *   ); ?>
 *   
 *   Where the functions follow the syntax described for the scheme
 *   handler functions. Each of the individual SAX handler functions are
 *   in the format below: start_doc resource{@link processor} end_doc
 *   resource{@link processor} start_element resource{@link processor}
 *   string{@link name} array{@link attributes} end_element
 *   resource{@link processor} string{@link name} start_namespace
 *   resource{@link processor} string{@link prefix} string{@link uri}
 *   end_namespace resource{@link processor} string{@link prefix} comment
 *   resource{@link processor} string{@link contents} pi resource{@link
 *   processor} string{@link target} string{@link contents} characters
 *   resource{@link processor} string{@link contents}
 * @return void
 * @since PHP 4 >= 4.0.6
 **/
function xslt_set_sax_handlers($processor, $handlers){}

/**
 * Set Scheme handlers on the resource handle given by {@link xh}.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param array $handlers Scheme handlers should be an array with the
 *   format (all elements are optional):
 *   
 *   array( [get_all] => get all handler, [open] => open handler, [get]
 *   => get handler, [put] => put handler, [close] => close handler )
 * @return void
 * @since PHP 4 >= 4.0.5
 **/
function xslt_set_scheme_handler($xh, $handlers){}

/**
 * Registers the scheme handlers (XPath handlers) for the document.
 * 
 * @param resource $xh The XSLT processor link identifier, created with
 *   {@link xslt_create}.
 * @param array $handlers An array with the following keys: "get_all",
 *   "open", "get", "put", and "close". Every entry must be a function
 *   name or an array in the following format: array($obj, "method").
 *   Note that the given array does not need to contain all of the
 *   different scheme handler elements (although it can), but it only
 *   needs to conform to the "handler" => "fonction" format described
 *   above. Each of the individual scheme handler functions called are in
 *   the formats below:
 *   
 *   string get_all(resource processor, string scheme, string rest)
 *   resource open(resource processor, string scheme, string rest) int
 *   get(resource processor, resource fp, string &data) int put(resource
 *   processor, resource fp, string data) void close(resource processor,
 *   resource fp)
 * @return void
 * @since PHP 4 >= 4.0.6
 **/
function xslt_set_scheme_handlers($xh, $handlers){}

/**
 * Generate a YAML representation of the provided {@link data}.
 * 
 * @param mixed $data The {@link data} being encoded. Can be any type
 *   except a resource.
 * @param int $encoding Output character encoding chosen from
 *   YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING,
 *   YAML_UTF16BE_ENCODING. Defaults to YAML_ANY_ENCODING.
 * @param int $linebreak Output linebreak style chosen from
 *   YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK.
 *   Defaults to YAML_ANY_BREAK.
 * @return string
 * @since PECL yaml >= 0.5.0
 **/
function yaml_emit($data, $encoding, $linebreak){}

/**
 * Generate a YAML representation of the provided {@link data} in the
 * {@link filename}.
 * 
 * @param string $filename Path to the file.
 * @param mixed $data The {@link data} being encoded. Can be any type
 *   except a resource.
 * @param int $encoding Output character encoding chosen from
 *   YAML_ANY_ENCODING, YAML_UTF8_ENCODING, YAML_UTF16LE_ENCODING,
 *   YAML_UTF16BE_ENCODING. Defaults to YAML_ANY_ENCODING.
 * @param int $linebreak Output linebreak style chosen from
 *   YAML_ANY_BREAK, YAML_CR_BREAK, YAML_LN_BREAK, YAML_CRLN_BREAK.
 *   Defaults to YAML_ANY_BREAK.
 * @return bool
 * @since PECL yaml >= 0.5.0
 **/
function yaml_emit_file($filename, $data, $encoding, $linebreak){}

/**
 * Convert all or part of a YAML document stream to a PHP variable.
 * 
 * @param string $input The string to parse as a YAML document stream.
 * @param int $pos Document to extract from stream (-1 for all
 *   documents, 0 for first document, ...).
 * @param int $ndocs If {@link ndocs} is provided, then it is filled
 *   with the number of documents found in stream.
 * @param array $callbacks Content handlers for YAML nodes. Associative
 *   array of YAML tag => callback mappings.
 * @return mixed
 * @since PECL yaml >= 0.4.0
 **/
function yaml_parse($input, $pos, &$ndocs, $callbacks){}

/**
 * Convert all or part of a YAML document stream read from a file to a
 * PHP variable.
 * 
 * @param string $filename Path to the file.
 * @param int $pos Document to extract from stream (-1 for all
 *   documents, 0 for first document, ...).
 * @param int $ndocs If {@link ndocs} is provided, then it is filled
 *   with the number of documents found in stream.
 * @param array $callbacks Content handlers for YAML nodes. Associative
 *   array of YAML tag => callback mappings.
 * @return mixed
 * @since PECL yaml >= 0.4.0
 **/
function yaml_parse_file($filename, $pos, &$ndocs, $callbacks){}

/**
 * Convert all or part of a YAML document stream read from a URL to a PHP
 * variable.
 * 
 * @param string $url {@link url} should be of the form "scheme://...".
 *   PHP will search for a protocol handler (also known as a wrapper) for
 *   that scheme. If no wrappers for that protocol are registered, PHP
 *   will emit a notice to help you track potential problems in your
 *   script and then continue as though filename specifies a regular
 *   file.
 * @param int $pos Document to extract from stream (-1 for all
 *   documents, 0 for first document, ...).
 * @param int $ndocs If {@link ndocs} is provided, then it is filled
 *   with the number of documents found in stream.
 * @param array $callbacks Content handlers for YAML nodes. Associative
 *   array of YAML tag => callback mappings.
 * @return mixed
 * @since PECL yaml >= 0.4.0
 **/
function yaml_parse_url($url, $pos, &$ndocs, $callbacks){}

/**
 * Returns additional error information for the last request on the
 * server.
 * 
 * With some servers, this function may return the same string as {@link
 * yaz_error}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @return string
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_addinfo($id){}

/**
 * This function configures the CCL query parser for a server with
 * definitions of access points (CCL qualifiers) and their mapping to
 * RPN.
 * 
 * To map a specific CCL query to RPN afterwards call the {@link
 * yaz_ccl_parse} function.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param array $config An array of configuration. Each key of the
 *   array is the name of a CCL field and the corresponding value holds a
 *   string that specifies a mapping to RPN. The mapping is a sequence of
 *   attribute-type, attribute-value pairs. Attribute-type and
 *   attribute-value is separated by an equal sign (=). Each pair is
 *   separated by white space. Additional information can be found on the
 *   CCL page.
 * @return void
 * @since PHP 4 >= 4.0.5, PECL yaz >= 0.9.0
 **/
function yaz_ccl_conf($id, $config){}

/**
 * This function invokes a CCL parser. It converts a given CCL FIND query
 * to an RPN query which may be passed to the {@link yaz_search} function
 * to perform a search.
 * 
 * To define a set of valid CCL fields call {@link yaz_ccl_conf} prior to
 * this function.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $query The CCL FIND query.
 * @param array $result If the function was executed successfully, this
 *   will be an array containing the valid RPN query under the key rpn.
 *   Upon failure, three indexes are set in this array to indicate the
 *   cause of failure: errorcode - the CCL error code (integer)
 *   errorstring - the CCL error string errorpos - approximate position
 *   in query of failure (integer is character position)
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL yaz >= 0.9.0
 **/
function yaz_ccl_parse($id, $query, &$result){}

/**
 * Closes the connection given by parameter {@link id}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @return bool
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_close($id){}

/**
 * This function returns a connection resource on success, zero on
 * failure.
 * 
 * {@link yaz_connect} prepares for a connection to a Z39.50 server. This
 * function is non-blocking and does not attempt to establish a
 * connection - it merely prepares a connect to be performed later when
 * {@link yaz_wait} is called.
 * 
 * @param string $zurl A string that takes the form
 *   host[:port][/database]. If port is omitted, port 210 is used. If
 *   database is omitted Default is used.
 * @param mixed $options If given as a string, it is treated as the
 *   Z39.50 V2 authentication string (OpenAuth). If given as an array,
 *   the contents of the array serves as options. user Username for
 *   authentication. group Group for authentication. password Password
 *   for authentication. cookie Cookie for session (YAZ proxy). proxy
 *   Proxy for connection (YAZ proxy). persistent A boolean. If the
 *   connection is persistent; If the connection is not persistent. By
 *   default connections are persistent. If you open a persistent
 *   connection, you won't be able to close it later with {@link
 *   yaz_close}. piggyback A boolean. If piggyback is enabled for
 *   searches; If piggyback is disabled. By default piggyback is enabled.
 *   Enabling piggyback is more efficient and usually saves a
 *   network-round-trip for first time fetches of records. However, a few
 *   Z39.50 servers do not support piggyback or they ignore element set
 *   names. For those, piggyback should be disabled. charset A string
 *   that specifies character set to be used in Z39.50 language and
 *   character set negotiation. Use strings such as: ISO-8859-1, UTF-8,
 *   UTF-16. Most Z39.50 servers do not support this feature (and thus,
 *   this is ignored). Many servers use the ISO-8859-1 encoding for
 *   queries and messages. MARC21/USMARC records are not affected by this
 *   setting.
 *   
 *   preferredMessageSize An integer that specifies the maximum byte size
 *   of all records to be returned by a target during retrieval. See the
 *   Z39.50 standard for more information. This option is supported in
 *   PECL YAZ 1.0.5 or later.
 *   
 *   maximumRecordSize An integer that specifies the maximum byte size of
 *   a single record to be returned by a target during retrieval. This
 *   entity is referred to as Exceptional-record-size in the Z39.50
 *   standard. This option is supported in PECL YAZ 1.0.5 or later.
 * @return mixed
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_connect($zurl, $options){}

/**
 * This function allows you to change databases within a session by
 * specifying one or more databases to be used in search, retrieval, etc.
 * - overriding databases specified in call to {@link yaz_connect}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $databases A string containing one or more databases.
 *   Multiple databases are separated by a plus sign +.
 * @return bool
 * @since PHP 4 >= 4.0.6, PECL yaz >= 0.9.0
 **/
function yaz_database($id, $databases){}

/**
 * This function sets the element set name for retrieval.
 * 
 * Call this function before {@link yaz_search} or {@link yaz_present} to
 * specify the element set name for records to be retrieved.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $elementset Most servers support F (for full records)
 *   and B (for brief records).
 * @return bool
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_element($id, $elementset){}

/**
 * Returns an error number for the server (last request) identified by
 * {@link id}.
 * 
 * {@link yaz_errno} should be called after network activity for each
 * server - (after {@link yaz_wait} returns) to determine the success or
 * failure of the last operation (e.g. search).
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @return int
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_errno($id){}

/**
 * {@link yaz_error} returns an English text message corresponding to the
 * last error number as returned by {@link yaz_errno}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @return string
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_error($id){}

/**
 * This function prepares for an Extended Service Request. Extended
 * Services is family of various Z39.50 facilities, such as Record
 * Update, Item Order, Database administration etc.
 * 
 * The {@link yaz_es} creates an Extended Service Request packages and
 * puts it into a queue of operations. Use {@link yaz_wait} to send the
 * request(s) to the server. After completion of {@link yaz_wait} the
 * result of the Extended Service operation should be expected with a
 * call to {@link yaz_es_result}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $type A string which represents the type of the
 *   Extended Service: itemorder (Item Order), create (Create Database),
 *   drop (Drop Database), commit (Commit Operation), update (Update
 *   Record), xmlupdate (XML Update). Each type is specified in the
 *   following section.
 * @param array $args An array with extended service options plus
 *   package specific options. The options are identical to those offered
 *   in the C API of ZOOM C. Refer to the ZOOM Extended Services.
 * @return void
 * @since PECL yaz >= 0.9.0
 **/
function yaz_es($id, $type, $args){}

/**
 * This function inspects the last returned Extended Service result from
 * a server. An Extended Service is initiated by either {@link
 * yaz_item_order} or {@link yaz_es}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @return array
 * @since PHP 4 >= 4.2.0, PECL yaz >= 0.9.0
 **/
function yaz_es_result($id){}

/**
 * Returns the value of the option specified with {@link name}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $name The option name.
 * @return string
 * @since PECL yaz >= 0.9.0
 **/
function yaz_get_option($id, $name){}

/**
 * {@link yaz_hits} returns the number of hits for the last search.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param array $searchresult Result array for detailed search result
 *   information.
 * @return int
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_hits($id, &$searchresult){}

/**
 * This function prepares for an Extended Services request using the
 * Profile for the Use of Z39.50 Item Order Extended Service to Transport
 * ILL (Profile/1). See this and the specification.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param array $args Must be an associative array with information
 *   about the Item Order request to be sent. The key of the hash is the
 *   name of the corresponding ASN.1 tag path. For example, the ISBN
 *   below the Item-ID has the key item-id,ISBN. The ILL-Request
 *   parameters are: There are also a few parameters that are part of the
 *   Extended Services Request package and the ItemOrder package:
 * @return void
 * @since PHP 4 >= 4.0.5, PECL yaz >= 0.9.0
 **/
function yaz_itemorder($id, $args){}

/**
 * This function prepares for retrieval of records after a successful
 * search.
 * 
 * The {@link yaz_range} function should be called prior to this function
 * to specify the range of records to be retrieved.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @return bool
 * @since PHP 4 >= 4.0.5, PECL yaz >= 0.9.0
 **/
function yaz_present($id){}

/**
 * Specifies a range of records to retrieve.
 * 
 * This function should be called before {@link yaz_search} or {@link
 * yaz_present}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param int $start Specifies the position of the first record to be
 *   retrieved. The records numbers goes from 1 to {@link yaz_hits}.
 * @param int $number Specifies the number of records to be retrieved.
 * @return void
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_range($id, $start, $number){}

/**
 * The {@link yaz_record} function inspects a record in the current
 * result set at the position specified by parameter {@link pos}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param int $pos The record position. Records positions in a result
 *   set are numbered 1, 2, ... $hits where $hits is the count returned
 *   by {@link yaz_hits}.
 * @param string $type The {@link type} specifies the form of the
 *   returned record. Besides conversion of the transfer record to a
 *   string/array, PHP/YAZ it is also possible to perform a character set
 *   conversion of the record. Especially for USMARC/MARC21 that is
 *   recommended since these are typically returned in the character set
 *   MARC-8 that is not supported by browsers, etc. To specify a
 *   conversion, add ; charset=from, to where from is the original
 *   character set of the record and to is the resulting character set
 *   (as seen by PHP).
 * @return string
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_record($id, $pos, $type){}

/**
 * This function prepares for a Z39.50 Scan Request on the specified
 * connection.
 * 
 * To actually transfer the Scan Request to the server and receive the
 * Scan Response, {@link yaz_wait} must be called. Upon completion of
 * {@link yaz_wait} call {@link yaz_error} and {@link yaz_scan_result} to
 * handle the response.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $type Currently only type rpn is supported.
 * @param string $startterm Starting term point for the scan. The form
 *   in which the starting term is specified is given by parameter {@link
 *   type}. The syntax this parameter is similar to the RPN query as
 *   described in {@link yaz_search}. It consists of zero or more
 *   @attr-operator specifications, then followed by exactly one token.
 * @param array $flags This optional parameter specifies additional
 *   information to control the behaviour of the scan request. Three
 *   indexes are currently read from the flags array: number (number of
 *   terms requested), position (preferred position of term) and stepSize
 *   (preferred step size).
 * @return void
 * @since PHP 4 >= 4.0.5, PECL yaz >= 0.9.0
 **/
function yaz_scan($id, $type, $startterm, $flags){}

/**
 * {@link yaz_scan_result} returns terms and associated information as
 * received from the server in the last performed {@link yaz_scan}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param array $result If given, this array will be modified to hold
 *   additional information taken from the Scan Response: number - Number
 *   of entries returned stepsize - Step size position - Position of term
 *   status - Scan status
 * @return array
 * @since PHP 4 >= 4.0.5, PECL yaz >= 0.9.0
 **/
function yaz_scan_result($id, &$result){}

/**
 * {@link yaz_schema} specifies the schema for retrieval.
 * 
 * This function should be called before {@link yaz_search} or {@link
 * yaz_present}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $schema Must be specified as an OID (Object
 *   Identifier) in a raw dot-notation (like 1.2.840.10003.13.4) or as
 *   one of the known registered schemas: GILS-schema, Holdings, Zthes,
 *   ...
 * @return void
 * @since PHP 4 >= 4.2.0, PECL yaz >= 0.9.0
 **/
function yaz_schema($id, $schema){}

/**
 * {@link yaz_search} prepares for a search on the given connection.
 * 
 * Like {@link yaz_connect} this function is non-blocking and only
 * prepares for a search to be executed later when {@link yaz_wait} is
 * called.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $type This parameter represents the query type - only
 *   "rpn" is supported now in which case the third argument specifies a
 *   Type-1 query in prefix query notation.
 * @param string $query The RPN query is a textual representation of
 *   the Type-1 query as defined by the Z39.50 standard. However, in the
 *   text representation as used by YAZ a prefix notation is used, that
 *   is the operator precedes the operands. The query string is a
 *   sequence of tokens where white space is ignored unless surrounded by
 *   double quotes. Tokens beginning with an at-character (@) are
 *   considered operators, otherwise they are treated as search terms.
 *   You can find information about attributes at the Z39.50 Maintenance
 *   Agency site.
 * @return bool
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_search($id, $type, $query){}

/**
 * Sets one or more options on the given connection.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $name May be either a string or an array. If given as
 *   a string, this will be the name of the option to set. You'll need to
 *   give it's {@link value}. If given as an array, this will be an
 *   associative array (option name => option value).
 * @param string $value The new value of the option. Use this only if
 *   the previous argument is a string.
 * @return void
 * @since PECL yaz >= 0.9.0
 **/
function yaz_set_option($id, $name, $value){}

/**
 * This function sets sorting criteria and enables Z39.50 Sort.
 * 
 * Call this function before {@link yaz_search}. Using this function
 * alone does not have any effect. When used in conjunction with {@link
 * yaz_search}, a Z39.50 Sort will be sent after a search response has
 * been received and before any records are retrieved with Z39.50 Present
 * ({@link yaz_present}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $criteria A string that takes the form field1 flags1
 *   field2 flags2 where field1 specifies the primary attributes for
 *   sort, field2 seconds, etc.. The field specifies either a numerical
 *   attribute combinations consisting of type=value pairs separated by
 *   comma (e.g. 1=4,2=1) ; or the field may specify a plain string
 *   criteria (e.g. title. The flags is a sequence of the following
 *   characters which may not be separated by any white space.
 *   
 *   Sort Flags a Sort ascending d Sort descending i Case insensitive
 *   sorting s Case sensitive sorting
 * @return void
 * @since PHP 4 >= 4.0.7, PECL yaz >= 0.9.0
 **/
function yaz_sort($id, $criteria){}

/**
 * {@link yaz_syntax} specifies the preferred record syntax for retrieval
 * 
 * This function should be called before {@link yaz_search} or {@link
 * yaz_present}.
 * 
 * @param resource $id The connection resource returned by {@link
 *   yaz_connect}.
 * @param string $syntax The syntax must be specified as an OID (Object
 *   Identifier) in a raw dot-notation (like 1.2.840.10003.5.10) or as
 *   one of the known registered record syntaxes (sutrs, usmarc, grs1,
 *   xml, etc.).
 * @return void
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_syntax($id, $syntax){}

/**
 * This function carries out networked (blocked) activity for outstanding
 * requests which have been prepared by the functions {@link
 * yaz_connect}, {@link yaz_search}, {@link yaz_present}, {@link
 * yaz_scan} and {@link yaz_itemorder}.
 * 
 * {@link yaz_wait} returns when all servers have either completed all
 * requests or aborted (in case of errors).
 * 
 * @param array $options An associative array of options: timeout Sets
 *   timeout in seconds. If a server has not responded within the timeout
 *   it is considered dead and {@link yaz_wait} returns. The default
 *   value for timeout is 15 seconds. event A boolean.
 * @return mixed
 * @since PHP 4 >= 4.0.1, PECL yaz >= 0.9.0
 **/
function yaz_wait(&$options){}

/**
 * @param string $domain The NIS domain name.
 * @param string $map The NIS map.
 * @param string $callback
 * @return void
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function yp_all($domain, $map, $callback){}

/**
 * Returns all map entries.
 * 
 * @param string $domain The NIS domain name.
 * @param string $map The NIS map.
 * @return array
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function yp_cat($domain, $map){}

/**
 * Returns the error code of the previous operation.
 * 
 * @return int
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function yp_errno(){}

/**
 * Returns the error message associated with the given error code. Useful
 * to indicate what exactly went wrong.
 * 
 * @param int $errorcode The error code.
 * @return string
 * @since PHP 4 >= 4.0.6, PHP 5
 **/
function yp_err_string($errorcode){}

/**
 * Gets the first key-value pair from the named {@link map} in the named
 * {@link domain}.
 * 
 * @param string $domain The NIS domain name.
 * @param string $map The NIS map.
 * @return array
 * @since PHP 4, PHP 5
 **/
function yp_first($domain, $map){}

/**
 * Returns the default domain of the node. Can be used as the domain
 * parameter for successive NIS calls.
 * 
 * A NIS domain can be described a group of NIS maps. Every host that
 * needs to look up information binds itself to a certain domain. Refer
 * to the documents mentioned at the beginning for more detailed
 * information.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function yp_get_default_domain(){}

/**
 * Returns the machine name of the master NIS server for a {@link map}.
 * 
 * @param string $domain The NIS domain name.
 * @param string $map The NIS map.
 * @return string
 * @since PHP 4, PHP 5
 **/
function yp_master($domain, $map){}

/**
 * Returns the value associated with the passed {@link key} out of the
 * specified {@link map}.
 * 
 * @param string $domain The NIS domain name.
 * @param string $map The NIS map.
 * @param string $key This key must be exact.
 * @return string
 * @since PHP 4, PHP 5
 **/
function yp_match($domain, $map, $key){}

/**
 * Returns the next key-value pair in the named {@link map} after the
 * specified {@link key}.
 * 
 * @param string $domain
 * @param string $map
 * @param string $key
 * @return array
 * @since PHP 4, PHP 5
 **/
function yp_next($domain, $map, $key){}

/**
 * Gets the order number for a map.
 * 
 * @param string $domain
 * @param string $map
 * @return int
 * @since PHP 4, PHP 5
 **/
function yp_order($domain, $map){}

/**
 * This function returns the ID which can be used to display the Zend
 * logo using the built-in image.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function zend_logo_guid(){}

/**
 * This function returns a unique identifier for the current thread.
 * 
 * @return int
 * @since PHP 5
 **/
function zend_thread_id(){}

/**
 * Returns a string containing the version of the currently running Zend
 * Engine.
 * 
 * @return string
 * @since PHP 4, PHP 5
 **/
function zend_version(){}

/**
 * Closes the given ZIP file archive.
 * 
 * @param resource $zip A ZIP file previously opened with {@link
 *   zip_open}.
 * @return void
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_close($zip){}

/**
 * Closes the specified directory entry.
 * 
 * @param resource $zip_entry A directory entry previously opened
 *   {@link zip_entry_open}.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_close($zip_entry){}

/**
 * Returns the compressed size of the specified directory entry.
 * 
 * @param resource $zip_entry A directory entry returned by {@link
 *   zip_read}.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_compressedsize($zip_entry){}

/**
 * Returns the compression method of the directory entry specified by
 * {@link zip_entry}.
 * 
 * @param resource $zip_entry A directory entry returned by {@link
 *   zip_read}.
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_compressionmethod($zip_entry){}

/**
 * Returns the actual size of the specified directory entry.
 * 
 * @param resource $zip_entry A directory entry returned by {@link
 *   zip_read}.
 * @return int
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_filesize($zip_entry){}

/**
 * Returns the name of the specified directory entry.
 * 
 * @param resource $zip_entry A directory entry returned by {@link
 *   zip_read}.
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_name($zip_entry){}

/**
 * Opens a directory entry in a zip file for reading.
 * 
 * @param resource $zip A valid resource handle returned by {@link
 *   zip_open}.
 * @param resource $zip_entry A directory entry returned by {@link
 *   zip_read}.
 * @param string $mode Any of the modes specified in the documentation
 *   of {@link fopen}.
 * @return bool
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_open($zip, $zip_entry, $mode){}

/**
 * Reads from an open directory entry.
 * 
 * @param resource $zip_entry A directory entry returned by {@link
 *   zip_read}.
 * @param int $length The number of bytes to return. If not specified,
 *   this function will attempt to read 1024 bytes.
 * @return string
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_entry_read($zip_entry, $length){}

/**
 * Opens a new zip archive for reading.
 * 
 * @param string $filename The file name of the ZIP archive to open.
 * @return mixed
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_open($filename){}

/**
 * Reads the next entry in a zip file archive.
 * 
 * @param resource $zip A ZIP file previously opened with {@link
 *   zip_open}.
 * @return mixed
 * @since PHP 4 >= 4.1.0, PHP 5 >= 5.2.0, PECL zip >= 1.0.0
 **/
function zip_read($zip){}

/**
 * Returns the coding type used for output compression.
 * 
 * @return string
 * @since PHP 4 >= 4.3.2, PHP 5
 **/
function zlib_get_coding_type(){}

/**
 * Iterates through a file system in a similar fashion to .
 **/
class GlobIterator extends FilesystemIterator implements Iterator, Traversable, SeekableIterator, Countable {
    /**
     * Gets the number of directories and files found by the glob expression.
     * 
     * @return integer
     * @since PHP 5 >= 5.3.0
     **/
    function count(){}

    /**
     * Constructs a new directory iterator from a glob expression.
     * 
     * @param string $path The path of the directory.
     * @param integer $flags Option flags, the flags may be a bitmask of
     *   the FilesystemIterator constants.
     * @since PHP 5 >= 5.3.0
     **/
    function __construct($path, $flags){}

}
/**
 * Description of the class.
 **/
interface Gmagick {
    const COLOR_ALPHA = 0;
    const COLOR_BLACK = 0;
    const COLOR_BLUE = 0;
    const COLOR_CYAN = 0;
    const COLOR_FUZZ = 0;
    const COLOR_GREEN = 0;
    const COLOR_MAGENTA = 0;
    const COLOR_OPACITY = 0;
    const COLOR_RED = 0;
    const COLOR_YELLOW = 0;
    /**
     * Adds new image to Gmagick object from the current position of the
     * source object. After the operation iterator position is moved at the
     * end of the list.
     * 
     * @param Gmagick $Gmagick The source Gmagick object
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function addimage($Gmagick);

    /**
     * Adds random noise to the image.
     * 
     * @param int $NOISE The type of the noise. Refer to this list of noise
     *   constants.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function addnoiseimage($NOISE);

    /**
     * Annotates an image with text.
     * 
     * @param GmagickDraw $GmagickDraw The GmagickDraw object that contains
     *   settings for drawing the text
     * @param int $x Horizontal offset in pixels to the left of text
     * @param int $y Vertical offset in pixels to the baseline of text
     * @param float $angle The angle at which to write the text
     * @param string $text The string to draw
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function annotateimage($GmagickDraw, $x, $y, $angle, $text);

    /**
     * Adds blur filter to image.
     * 
     * @param float $radius Blur radius
     * @param float $sigma Standard deviation
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function blurimage($radius, $sigma);

    /**
     * Surrounds the image with a border of the color defined by the
     * bordercolor GmagickPixel object or a color string.
     * 
     * @param GmagickPixel $color GmagickPixel object or a string
     *   containing the border color
     * @param int $width Border width
     * @param int $height Border height
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function borderimage($color, $width, $height);

    /**
     * Simulates a charcoal drawing.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function charcoalimage($radius, $sigma);

    /**
     * Removes a region of an image and collapses the image to occupy the
     * removed portion.
     * 
     * @param int $width Width of the chopped area
     * @param int $height Height of the chopped area
     * @param int $x X origo of the chopped area
     * @param int $y Y origo of the chopped area
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function chopimage($width, $height, $x, $y);

    /**
     * Clears all resources associated to Gmagick object
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function clear();

    /**
     * Adds a comment to your image.
     * 
     * @param string $comment The comment to add
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function commentimage($comment);

    /**
     * Composite one image onto another at the specified offset.
     * 
     * @param Gmagick $source Gmagick object which holds the composite
     *   image
     * @param int $COMPOSE Composite operator.
     * @param int $x The column offset of the composited image
     * @param int $y The row offset of the composited image
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function compositeimage($source, $COMPOSE, $x, $y);

    /**
     * Extracts a region of the image.
     * 
     * @param int $width The width of the crop
     * @param int $height The height of the crop
     * @param int $x The X coordinate of the cropped region's top left
     *   corner
     * @param int $y The Y coordinate of the cropped region's top left
     *   corner
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function cropimage($width, $height, $x, $y);

    /**
     * Creates a fixed size thumbnail by first scaling the image down and
     * cropping a specified area from the center.
     * 
     * @param int $width The width of the thumbnail
     * @param int $height The Height of the thumbnail
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function cropthumbnailimage($width, $height);

    /**
     * Returns reference to the current gmagick object with image pointer at
     * the correct sequence.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function current();

    /**
     * Displaces an image's colormap by a given number of positions. If you
     * cycle the colormap a number of times you can produce a psychedelic
     * effect.
     * 
     * @param float $displace The amount to displace the colormap.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function cyclecolormapimage($displace);

    /**
     * Compares each image with the next in a sequence and returns the
     * maximum bounding region of any pixel differences it discovers.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function deconstructimages();

    /**
     * Reduces the speckle noise in an image while preserving the edges of
     * the original image.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function despeckleimage();

    /**
     * Destroys the Gmagick object and frees all resources associated with it
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function destroy();

    /**
     * Renders the GmagickDraw object on the current image
     * 
     * @param GmagickDraw $GmagickDraw The drawing operations to render on
     *   the image.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function drawimage($GmagickDraw);

    /**
     * Enhance edges within the image with a convolution filter of the given
     * radius. Use radius 0 and it will be auto-selected.
     * 
     * @param float $radius The radius of the operation.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function edgeimage($radius);

    /**
     * Returns a grayscale image with a three-dimensional effect. We convolve
     * the image with a Gaussian operator of the given radius and standard
     * deviation (sigma). For reasonable results, radius should be larger
     * than sigma. Use a radius of 0 and it will choose a suitable radius for
     * you.
     * 
     * @param float $radius The radius of the effect
     * @param float $sigma The sigma of the effect
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function embossimage($radius, $sigma);

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function enhanceimage();

    /**
     * Equalizes the image histogram.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function equalizeimage();

    /**
     * Creates a vertical mirror image by reflecting the pixels around the
     * central x-axis.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function flipimage();

    /**
     * Creates a horizontal mirror image by reflecting the pixels around the
     * central y-axis.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function flopimage();

    /**
     * Adds a simulated three-dimensional border around the image. The width
     * and height specify the border width of the vertical and horizontal
     * sides of the frame. The inner and outer bevels indicate the width of
     * the inner and outer shadows of the frame.
     * 
     * @param GmagickPixel $color GmagickPixel object or a float
     *   representing the matte color
     * @param int $width The width of the border
     * @param int $height The height of the border
     * @param int $inner_bevel The inner bevel width
     * @param int $outer_bevel The outer bevel width
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function frameimage($color, $width, $height, $inner_bevel, $outer_bevel);

    /**
     * Gamma-corrects an image. The same image viewed on different devices
     * will have perceptual differences in the way the image's intensities
     * are represented on the screen. Specify individual gamma levels for the
     * red, green, and blue channels, or adjust all three with the gamma
     * parameter. Values typically range from 0.8 to 2.3.
     * 
     * @param float $gamma The amount of gamma-correction.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function gammaimage($gamma);

    /**
     * Returns the GraphicsMagick API copyright as a string.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getcopyright();

    /**
     * Returns the filename associated with an image sequence.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfilename();

    /**
     * Returns the image background color.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagebackgroundcolor();

    /**
     * Returns the chromaticity blue primary point for the image.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageblueprimary();

    /**
     * Returns the image border color.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagebordercolor();

    /**
     * Gets the depth for a particular image channel.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagechanneldepth();

    /**
     * Returns the color of the specified colormap index.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagecolors();

    /**
     * Gets the image colorspace.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagecolorspace();

    /**
     * Returns the composite operator associated with the image.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagecompose();

    /**
     * Gets the image delay
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagedelay();

    /**
     * Gets the depth of the image.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagedepth();

    /**
     * Gets the image disposal method
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagedispose();

    /**
     * Returns an associative array with the keys "min" and "max".
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageextrema();

    /**
     * Returns the filename of a particular image in a sequence
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagefilename();

    /**
     * Returns the format of a particular image in a sequence.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageformat();

    /**
     * Gets the image gamma
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagegamma();

    /**
     * Returns the chromaticity green primary point. Returns an array with
     * the keys "x" and "y".
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagegreenprimary();

    /**
     * Returns the image height
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageheight();

    /**
     * Returns the image histogram as an array of GmagickPixel objects. Throw
     * an GmagickException on error.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagehistogram();

    /**
     * Returns the index of the current active image within the Gmagick
     * object.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageindex();

    /**
     * Gets the image interlace scheme.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageinterlacescheme();

    /**
     * Gets the image iterations.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageiterations();

    /**
     * Returns TRUE if the image has a matte channel otherwise false.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagematte();

    /**
     * Returns GmagickPixel object on success. Throw an GmagickException on
     * error.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagemattecolor();

    /**
     * Returns the named image profile.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageprofile();

    /**
     * Returns the chromaticity red primary point as an array with the keys
     * "x" and "y".
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageredprimary();

    /**
     * Gets the image rendering intent
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagerenderingintent();

    /**
     * Returns the resolution as an array.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageresolution();

    /**
     * Gets the image scene.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagescene();

    /**
     * Generates an SHA-256 message digest for the image pixel stream.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagesignature();

    /**
     * Gets the potential image type.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagetype();

    /**
     * Gets the image units of resolution.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimageunits();

    /**
     * Returns the chromaticity white point as an associative array with the
     * keys "x" and "y".
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagewhitepoint();

    /**
     * Returns the width of the image.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getimagewidth();

    /**
     * Returns the GraphicsMagick package name.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getpackagename();

    /**
     * Returns the Gmagick quantum depth as a string.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getquantumdepth();

    /**
     * Returns the GraphicsMagick release date as a string.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getreleasedate();

    /**
     * Gets the horizontal and vertical sampling factor.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getsamplingfactors();

    /**
     * Returns the size associated with the Gmagick object as an array with
     * the keys "columns" and "rows".
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getsize();

    /**
     * Returns the GraphicsMagick API version as a string and as a number.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getversion();

    /**
     * Returns TRUE if the object has more images when traversing the list in
     * the forward direction.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function hasnextimage();

    /**
     * Returns TRUE if the object has more images when traversing the list in
     * the reverse direction
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function haspreviousimage();

    /**
     * Creates a new image that is a copy of an existing one with the image
     * pixels "imploded" by the specified percentage.
     * 
     * @param float $radius The radius of the implode
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function implodeimage($radius);

    /**
     * Adds a label to an image.
     * 
     * @param string $label The label to add
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function labelimage($label);

    /**
     * Adjusts the levels of an image by scaling the colors falling between
     * specified white and black points to the full available quantum range.
     * The parameters provided represent the black, mid, and white points.
     * The black point specifies the darkest color in the image. Colors
     * darker than the black point are set to zero. Mid point specifies a
     * gamma correction to apply to the image. White point specifies the
     * lightest color in the image. Colors brighter than the white point are
     * set to the maximum quantum value.
     * 
     * @param float $blackPoint The image black point
     * @param float $gamma The gamma value
     * @param float $whitePoint The image white point
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function levelimage($blackPoint, $gamma, $whitePoint, $channel);

    /**
     * Conveniently scales an image proportionally to twice its original
     * size.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function magnifyimage();

    /**
     * Replaces the colors of an image with the closest color from a
     * reference image.
     * 
     * @param gmagick $gmagick The reference image
     * @param int $dither Set this integer value to something other than
     *   zero to dither the mapped image
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function mapimage($gmagick, $dither);

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     * Each pixel is replaced by the median in a set of neighboring pixels as
     * defined by radius.
     * 
     * @param float $radius The radius of the pixel neighborhood.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function medianfilterimage($radius);

    /**
     * A convenient method that scales an image proportionally to one-half
     * its original size
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function minifyimage();

    /**
     * Lets you control the brightness, saturation, and hue of an image. Hue
     * is the percentage of absolute rotation from the current position. For
     * example 50 results in a counter-clockwise rotation of 90 degrees, 150
     * results in a clockwise rotation of 90 degrees, with 0 and 200 both
     * resulting in a rotation of 180 degrees.
     * 
     * @param float $brightness The percent change in brighness (-100 thru
     *   +100).
     * @param float $saturation The percent change in saturation (-100 thru
     *   +100)
     * @param float $hue The percent change in hue (-100 thru +100)
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function modulateimage($brightness, $saturation, $hue);

    /**
     * Simulates motion blur. We convolve the image with a Gaussian operator
     * of the given radius and standard deviation (sigma). For reasonable
     * results, radius should be larger than sigma. Use a radius of 0 and
     * MotionBlurImage() selects a suitable radius for you. Angle gives the
     * angle of the blurring motion.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel.
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels.
     * @param float $angle Apply the effect along this angle.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function motionblurimage($radius, $sigma, $angle);

    /**
     * Creates a new image with the specified background color
     * 
     * @param int $width Width of the new image
     * @param int $height Height of the new image
     * @param mixed $background The background color used for this image
     *   (as float)
     * @param string $format Image format.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function newimage($width, $height, $background, $format);

    /**
     * Associates the next image in the image list with an Gmagick object.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function nextimage();

    /**
     * Enhances the contrast of a color image by adjusting the pixels color
     * to span the entire range of colors available.
     * 
     * @param int $channel Identify which channel to normalize
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function normalizeimage($channel);

    /**
     * Applies a special effect filter that simulates an oil painting. Each
     * pixel is replaced by the most frequent color occurring in a circular
     * region defined by radius.
     * 
     * @param float $radius The radius of the circular neighborhood.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function oilpaintimage($radius);

    /**
     * Assocates the previous image in an image list with the Gmagick object.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function previousimage();

    /**
     * Adds or removes a ICC, IPTC, or generic profile from an image. If the
     * profile is NULL, it is removed from the image otherwise added. Use a
     * name of '*' and a profile of NULL to remove all profiles from the
     * image.
     * 
     * @param string $name Name of profile to add or remove: ICC, IPTC, or
     *   generic profile.
     * @param string $profile The profile.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function profileimage($name, $profile);

    /**
     * Analyzes the colors within a reference image and chooses a fixed
     * number of colors to represent the image. The goal of the algorithm is
     * to minimize the color difference between the input and output image
     * while minimizing the processing time.
     * 
     * @param int $numColors The number of colors.
     * @param int $colorspace Perform color reduction in this colorspace,
     *   typically RGBColorspace.
     * @param int $treeDepth Normally, this integer value is zero or one. A
     *   zero or one tells Quantize to choose a optimal tree depth of
     *   Log4(number_colors).% A tree of this depth generally allows the best
     *   representation of the reference image with the least amount of
     *   memory and the fastest computational speed. In some cases, such as
     *   an image with low color dispersion (a few number of colors), a value
     *   other than Log4(number_colors) is required. To expand the color tree
     *   completely, use a value of 8.
     * @param bool $dither A value other than zero distributes the
     *   difference between an original image and the corresponding color
     *   reduced algorithm to neighboring pixels along a Hilbert curve.
     * @param bool $measureError A value other than zero measures the
     *   difference between the original and quantized images. This
     *   difference is the total quantization error. The error is computed by
     *   summing over all pixels in an image the distance squared in RGB
     *   space between each reference pixel value and its quantized value.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function quantizeimage($numColors, $colorspace, $treeDepth, $dither, $measureError);

    /**
     * Analyzes the colors within a sequence of images and chooses a fixed
     * number of colors to represent the image. The goal of the algorithm is
     * to minimize the color difference between the input and output image
     * while minimizing the processing time.
     * 
     * @param int $numColors The number of colors.
     * @param int $colorspace Perform color reduction in this colorspace,
     *   typically RGBColorspace.
     * @param int $treeDepth Normally, this integer value is zero or one. A
     *   zero or one tells Quantize to choose a optimal tree depth of
     *   Log4(number_colors).% A tree of this depth generally allows the best
     *   representation of the reference image with the least amount of
     *   memory and the fastest computational speed. In some cases, such as
     *   an image with low color dispersion (a few number of colors), a value
     *   other than Log4(number_colors) is required. To expand the color tree
     *   completely, use a value of 8.
     * @param bool $dither A value other than zero distributes the
     *   difference between an original image and the corresponding color
     *   reduced algorithm to neighboring pixels along a Hilbert curve.
     * @param bool $measureError A value other than zero measures the
     *   difference between the original and quantized images. This
     *   difference is the total quantization error. The error is computed by
     *   summing over all pixels in an image the distance squared in RGB
     *   space between each reference pixel value and its quantized value.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function quantizeimages($numColors, $colorspace, $treeDepth, $dither, $measureError);

    /**
     * MagickQueryFontMetrics() returns an array representing the font
     * metrics.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function queryfontmetrics();

    /**
     * Returns fonts supported by Gmagick.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function queryfonts();

    /**
     * Returns formats supported by Gmagick.
     * 
     * @param string $pattern Specifies a pointer to a text string
     *   containing a pattern.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function queryformats($pattern);

    /**
     * Radial blurs an image.
     * 
     * @param float $angle The angle of the blur in degrees.
     * @param int $channel Related channel
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function radialblurimage($angle, $channel);

    /**
     * Creates a simulated three-dimensional button-like effect by lightening
     * and darkening the edges of the image. Members width and height of
     * raise_info define the width of the vertical and horizontal edge of the
     * effect.
     * 
     * @param int $width Width of the area to raise.
     * @param int $height Height of the area to raise.
     * @param int $x X coordinate
     * @param int $y Y coordinate
     * @param bool $raise A value other than zero creates a 3-D raise
     *   effect, otherwise it has a lowered effect.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function raiseimage($width, $height, $x, $y, $raise);

    /**
     * Reads image from filename.
     * 
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function read($filename);

    /**
     * Reads image from filename.
     * 
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function readimage($filename);

    /**
     * Reads image from a binary string.
     * 
     * @param string $imageContents Content of image
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function readimageblob($imageContents, $filename);

    /**
     * Reads an image or image sequence from an open file descriptor.
     * 
     * @param string $fp The file descriptor.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function readimagefile($fp);

    /**
     * Smooths the contours of an image while still preserving edge
     * information. The algorithm works by replacing each pixel with its
     * neighbor closest in value. A neighbor is defined by radius. Use a
     * radius of 0 and Gmagick::reduceNoiseImage() selects a suitable radius
     * for you.
     * 
     * @param float $radius The radius of the pixel neighborhood.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function reducenoiseimage($radius);

    /**
     * Removes an image from the image list.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function removeimage();

    /**
     * Removes the named image profile and returns it.
     * 
     * @param string $name Name of profile to return: ICC, IPTC, or generic
     *   profile.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function removeimageprofile($name);

    /**
     * Resample image to desired resolution.
     * 
     * @param float $xResolution The new image x resolution.
     * @param float $yResolution The new image y resolution.
     * @param int $filter Image filter to use.
     * @param float $blur The blur factor where larger than 1 is blurry,
     *   smaller than 1 is sharp.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function resampleimage($xResolution, $yResolution, $filter, $blur);

    /**
     * Scales an image to the desired dimensions with a filter.
     * 
     * @param int $width The number of columns in the scaled image.
     * @param int $height The number of rows in the scaled image.
     * @param int $filter Image filter to use.
     * @param float $blur The blur factor where larger than 1 is blurry,
     *   lesser than 1 is sharp.
     * @param bool $fit
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function resizeimage($width, $height, $filter, $blur, $fit);

    /**
     * Offsets an image as defined by x and y.
     * 
     * @param int $x The x offset.
     * @param int $y The y offset.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function rollimage($x, $y);

    /**
     * Rotates an image the specified number of degrees. Empty triangles left
     * over from rotating the image are filled with the background color.
     * 
     * @param mixed $color The background pixel.
     * @param float $degrees The number of degrees to rotate the image.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function rotateimage($color, $degrees);

    /**
     * Scales the size of an image to the given dimensions. The other
     * parameter will be calculated if 0 is passed as either param.
     * 
     * @param int $width The number of columns in the scaled image.
     * @param int $height The number of rows in the scaled image.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function scaleimage($width, $height);

    /**
     * Separates a channel from the image and returns a grayscale image. A
     * channel is a particular color component of each pixel in the image.
     * 
     * @param int $channel Identify which channel to extract: RedChannel,
     *   GreenChannel, BlueChannel, OpacityChannel, CyanChannel,
     *   MagentaChannel, YellowChannel, BlackChannel.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function separateimagechannel($channel);

    /**
     * Sets the filename before you read or write an image file.
     * 
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfilename($filename);

    /**
     * Sets the image background color.
     * 
     * @param GmagickPixel $color The background pixel wand.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagebackgroundcolor($color);

    /**
     * Sets the image chromaticity blue primary point.
     * 
     * @param float $x The blue primary x-point.
     * @param float $y The blue primary y-point.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageblueprimary($x, $y);

    /**
     * Sets the image border color.
     * 
     * @param GmagickPixel $color The border pixel wand.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagebordercolor($color);

    /**
     * Sets the depth of a particular image channel.
     * 
     * @param int $channel Identify which channel to extract: RedChannel,
     *   GreenChannel, BlueChannel, OpacityChannel, CyanChannel,
     *   MagentaChannel, YellowChannel, BlackChannel.
     * @param int $depth The image depth in bits.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagechanneldepth($channel, $depth);

    /**
     * Sets the image colorspace.
     * 
     * @param int $colorspace The image colorspace: UndefinedColorspace,
     *   RGBColorspace, GRAYColorspace, TransparentColorspace,
     *   OHTAColorspace, XYZColorspace, YCbCrColorspace, YCCColorspace,
     *   YIQColorspace, YPbPrColorspace, YPbPrColorspace, YUVColorspace,
     *   CMYKColorspace, sRGBColorspace, HSLColorspace, or HWBColorspace.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagecolorspace($colorspace);

    /**
     * Sets the image composite operator.
     * 
     * @param int $composite The image composite operator.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagecompose($composite);

    /**
     * Sets the image delay
     * 
     * @param int $delay The image delay in 1/100th of a second.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagedelay($delay);

    /**
     * Sets the image depth
     * 
     * @param float $depth The image depth in bits: 8, 16, or 32.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagedepth($depth);

    /**
     * Sets the image disposal method.
     * 
     * @param int $disposeType The image disposal type.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagedispose($disposeType);

    /**
     * Sets the filename of a particular image in a sequence.
     * 
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagefilename($filename);

    /**
     * Sets the format of a particular image in a sequence.
     * 
     * @param string $imageFormat The image format.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageformat($imageFormat);

    /**
     * Sets the image gamma.
     * 
     * @param float $gamma The image gamma.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagegamma($gamma);

    /**
     * Sets the image chromaticity green primary point.
     * 
     * @param float $x The chromaticity green primary x-point.
     * @param float $y The chromaticity green primary y-point.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagegreenprimary($x, $y);

    /**
     * Set the iterator to the position in the image list specified with the
     * index parameter.
     * 
     * @param int $index The scene number.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageindex($index);

    /**
     * Sets the interlace scheme of the image.
     * 
     * @param int $interlace The image interlace scheme: NoInterlace,
     *   LineInterlace, PlaneInterlace, PartitionInterlace.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageinterlacescheme($interlace);

    /**
     * Sets the image iterations.
     * 
     * @param int $iterations The image delay in 1/100th of a second.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageiterations($iterations);

    /**
     * Adds a named profile to the Gmagick object. If a profile with the same
     * name already exists, it is replaced. This method differs from the
     * Gmagick::ProfileImage() method in that it does not apply any CMS color
     * profiles.
     * 
     * @param string $name Name of profile to add or remove: ICC, IPTC, or
     *   generic profile.
     * @param string $profile The profile.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageprofile($name, $profile);

    /**
     * Sets the image chromaticity red primary point.
     * 
     * @param float $x The red primary x-point.
     * @param float $y The red primary y-point.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageredprimary($x, $y);

    /**
     * Sets the image rendering intent.
     * 
     * @param int $rendering_intent The image rendering intent:
     *   UndefinedIntent, SaturationIntent, PerceptualIntent, AbsoluteIntent,
     *   or RelativeIntent.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagerenderingintent($rendering_intent);

    /**
     * Sets the image resolution.
     * 
     * @param float $xResolution The image x resolution.
     * @param float $yResolution The image y resolution.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageresolution($xResolution, $yResolution);

    /**
     * Sets the image scene.
     * 
     * @param string $scene The image scene number.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagescene($scene);

    /**
     * Sets the image type.
     * 
     * @param string $imgType The image type: UndefinedType, BilevelType,
     *   GrayscaleType, GrayscaleMatteType, PaletteType, PaletteMatteType,
     *   TrueColorType, TrueColorMatteType, ColorSeparationType,
     *   ColorSeparationMatteType, or OptimizeType.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagetype($imgType);

    /**
     * Sets the image units of resolution.
     * 
     * @param int $resolution The image units of resolution :
     *   Undefinedresolution, PixelsPerInchResolution, or
     *   PixelsPerCentimeterResolution.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimageunits($resolution);

    /**
     * Sets the image chromaticity white point.
     * 
     * @param float $x The white x-point.
     * @param float $y The white y-point.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setimagewhitepoint($x, $y);

    /**
     * Sets the image sampling factors.
     * 
     * @param array $factors An array of doubles representing the sampling
     *   factor for each color component (in RGB order).
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setsamplingfactors($factors);

    /**
     * Sets the size of the Gmagick object. Set it before you read a raw
     * image format such as RGB, GRAY, or CMYK.
     * 
     * @param int $columns The width in pixels.
     * @param int $rows The height in pixels.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setsize($columns, $rows);

    /**
     * Slides one edge of an image along the X or Y axis, creating a
     * parallelogram. An X direction shear slides an edge along the X axis,
     * while a Y direction shear slides an edge along the Y axis. The amount
     * of the shear is controlled by a shear angle. For X direction shears,
     * x_shear is measured relative to the Y axis, and similarly, for Y
     * direction shears y_shear is measured relative to the X axis. Empty
     * triangles left over from shearing the image are filled with the
     * background color.
     * 
     * @param mixed $color The background pixel wand.
     * @param float $xShear The number of degrees to shear the image.
     * @param float $yShear The number of degrees to shear the image.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function shearimage($color, $xShear, $yShear);

    /**
     * Applies a special effect to the image, similar to the effect achieved
     * in a photo darkroom by selectively exposing areas of photo sensitive
     * paper to light. Threshold ranges from 0 to QuantumRange and is a
     * measure of the extent of the solarization.
     * 
     * @param float $threshold Define the extent of the solarization.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function solarizeimage($threshold);

    /**
     * Special effects method that randomly displaces each pixel in a block
     * defined by the radius parameter.
     * 
     * @param float $radius Choose a random pixel in a neighborhood of this
     *   extent.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function spreadimage($radius);

    /**
     * Strips an image of all profiles and comments.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function stripimage();

    /**
     * Swirls the pixels about the center of the image, where degrees
     * indicates the sweep of the arc through which each pixel is moved. You
     * get a more dramatic effect as the degrees move from 1 to 360.
     * 
     * @param float $degrees Define the tightness of the swirling effect.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function swirlimage($degrees);

    /**
     * Changes the size of an image to the given dimensions and removes any
     * associated profiles. The goal is to produce small low cost thumbnail
     * images suited for display on the Web. If TRUE is given as a third
     * parameter then columns and rows parameters are used as maximums for
     * each side. Both sides will be scaled down until the match or are
     * smaller than the parameter given for the side.
     * 
     * @param int $width Image width
     * @param int $height Image height
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function thumbnailimage($width, $height);

    /**
     * Remove edges that are the background color from the image.
     * 
     * @param float $fuzz By default target must match a particular pixel
     *   color exactly. However, in many cases two colors may differ by a
     *   small amount. The fuzz member of image defines how much tolerance is
     *   acceptable to consider two colors as the same. This parameter
     *   represents the variation on the quantum range.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function trimimage($fuzz);

    /**
     * Writes an image to the specified filename. If the filename parameter
     * is NULL, the image is written to the filename set by
     * Gmagick::ReadImage() or Gmagick::SetImageFilename().
     * 
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function write($filename);

    /**
     * Writes an image to the specified filename. If the filename parameter
     * is NULL, the image is written to the filename set by
     * Gmagick::ReadImage() or Gmagick::SetImageFilename().
     * 
     * @param string $filename The image filename.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function writeimage($filename);

    /**
     * The Gmagick constructor.
     * 
     * @param string $filename The path to an image to load or array of
     *   paths
     * @since PECL gmagick >= Unknown
     **/
    function __construct($filename);

}
/**
 * Description of the class.
 **/
class GmagickDraw {
    /**
     * Draws text on the image.
     * 
     * @param float $x x ordinate to left of text
     * @param float $y y ordinate to text baseline
     * @param string $text text to draw
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function annotate($x, $y, $text){}

    /**
     * Draws an arc falling within a specified bounding rectangle on the
     * image.
     * 
     * @param float $sx starting x ordinate of bounding rectangle
     * @param float $sy starting y ordinate of bounding rectangle
     * @param float $ex ending x ordinate of bounding rectangle
     * @param float $ey ending y ordinate of bounding rectangle
     * @param float $sd starting degrees of rotation
     * @param float $ed ending degrees of rotation
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function arc($sx, $sy, $ex, $ey, $sd, $ed){}

    /**
     * Draws a bezier curve through a set of points on the image.
     * 
     * @param array $coordinate_array Coordinates array
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function bezier($coordinate_array){}

    /**
     * Draws an ellipse on the image.
     * 
     * @param float $ox origin x ordinate
     * @param float $oy origin y ordinate
     * @param float $rx radius in x
     * @param float $ry radius in y
     * @param float $start starting rotation in degrees
     * @param float $end ending rotation in degrees
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function ellipse($ox, $oy, $rx, $ry, $start, $end){}

    /**
     * Returns the fill color used for drawing filled objects.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfillcolor(){}

    /**
     * Returns the opacity used when drawing
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfillopacity(){}

    /**
     * Returns a string specifying the font used when annotating with text.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfont(){}

    /**
     * Returns the font pointsize used when annotating with text.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfontsize(){}

    /**
     * Returns the font style used when annotating with text.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfontstyle(){}

    /**
     * Returns the font weight used when annotating with text.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getfontweight(){}

    /**
     * Returns the color used for stroking object outlines.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getstrokecolor(){}

    /**
     * Returns the opacity of stroked object outlines.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getstrokeopacity(){}

    /**
     * Returns the width of the stroke used to draw object outlines.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getstrokewidth(){}

    /**
     * Returns the decoration applied when annotating with text.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function gettextdecoration(){}

    /**
     * Returns a string which specifies the code set used for text
     * annotations.
     * 
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function gettextencoding(){}

    /**
     * Draws a line on the image using the current stroke color, stroke
     * opacity, and stroke width.
     * 
     * @param float $sx starting x ordinate
     * @param float $sy starting y ordinate
     * @param float $ex ending x ordinate
     * @param float $ey ending y ordinate
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function line($sx, $sy, $ex, $ey){}

    /**
     * Draws a point using the current stroke color and stroke thickness at
     * the specified coordinates.
     * 
     * @param float $x target x coordinate
     * @param float $y target y coordinate
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function point($x, $y){}

    /**
     * Draws a polygon using the current stroke, stroke width, and fill color
     * or texture, using the specified array of coordinates.
     * 
     * @param array $coordinates coordinate array
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function polygon($coordinates){}

    /**
     * Draws a polyline using the current stroke, stroke width, and fill
     * color or texture, using the specified array of coordinates.
     * 
     * @param array $coordinate_array The array of coordinates
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function polyline($coordinate_array){}

    /**
     * Draws a rectangle given two coordinates and using the current stroke,
     * stroke width, and fill settings.
     * 
     * @param float $x1 x ordinate of first coordinate
     * @param float $y1 y ordinate of first coordinate
     * @param float $x2 x ordinate of second coordinate
     * @param float $y2 y ordinate of second coordinate
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function rectangle($x1, $y1, $x2, $y2){}

    /**
     * Applies the specified rotation to the current coordinate space.
     * 
     * @param float $degrees degrees of rotation
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function rotate($degrees){}

    /**
     * Draws a rounded rectangle given two coordinates, x and y corner
     * radiuses and using the current stroke, stroke width, and fill
     * settings.
     * 
     * @param float $x1 x ordinate of first coordinate
     * @param float $y1 y ordinate of first coordinate
     * @param float $x2 x ordinate of second coordinate
     * @param float $y2 y ordinate of second coordinate
     * @param float $rx radius of corner in horizontal direction
     * @param float $ry radius of corner in vertical direction
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function roundrectangle($x1, $y1, $x2, $y2, $rx, $ry){}

    /**
     * Adjusts the scaling factor to apply in the horizontal and vertical
     * directions to the current coordinate space.
     * 
     * @param float $x horizontal scale factor
     * @param float $y vertical scale factor
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function scale($x, $y){}

    /**
     * Sets the fill color to be used for drawing filled objects.
     * 
     * @param string $color GmagickPixel indicating color to use for
     *   filling.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfillcolor($color){}

    /**
     * Sets the opacity to use when drawing using the fill color or fill
     * texture. Setting it to 1.0 will make fill full opaque.
     * 
     * @param float $fill_opacity Fill opacity
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfillopacity($fill_opacity){}

    /**
     * Sets the fully-specified font to use when annotating with text
     * 
     * @param string $font font name
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfont($font){}

    /**
     * Sets the font pointsize to use when annotating with text.
     * 
     * @param float $pointsize Text pointsize
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfontsize($pointsize){}

    /**
     * Sets the font style to use when annotating with text. The AnyStyle
     * enumeration acts as a wild-card "don't care" option.
     * 
     * @param string $style Font style (NormalStyle, ItalicStyle,
     *   ObliqueStyle, AnyStyle)
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfontstyle($style){}

    /**
     * Sets the font weight to use when annotating with text.
     * 
     * @param int $weight Font weight (valid range 100-900)
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setfontweight($weight){}

    /**
     * Sets the color used for stroking object outlines.
     * 
     * @param GmagickPixel $color GmagickPixel representing the color for
     *   the stroke.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setstrokecolor($color){}

    /**
     * Specifies the opacity of stroked object outlines.
     * 
     * @param float $stroke_opacity Stroke opacity. The value 1.0 is
     *   opaque.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setstrokeopacity($stroke_opacity){}

    /**
     * Sets the width of the stroke used to draw object outlines
     * 
     * @param float $width Stroke width
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setstrokewidth($width){}

    /**
     * Specifies a decoration to be applied when annotating with text.
     * 
     * @param int $decoration Text decoration. One of NoDecoration,
     *   UnderlineDecoration, OverlineDecoration, or LineThroughDecoration
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function settextdecoration($decoration){}

    /**
     * Specifies specifies the code set to use for text annotations. The only
     * character encoding which may be specified at this time is "UTF-8" for
     * representing Unicode as a sequence of bytes. Specify an empty string
     * to set text encoding to the system's default. Successful text
     * annotation using Unicode may require fonts designed to support
     * Unicode.
     * 
     * @param string $encoding Character string specifying text encoding
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function settextencoding($encoding){}

}
/**
 * GmagickException class
 **/
class GmagickException extends Exception {
}
/**
 * Description of the class.
 **/
class GmagickPixel {
    /**
     * Returns the color described by the GmagickPixel object, as an array.
     * If the color has an opacity channel set, this is provided as a fourth
     * value in the list.
     * 
     * @param bool $as_array True to indicate return of array instead of
     *   string
     * @param bool $normalize_array Normalize the color values
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getcolor($as_array, $normalize_array){}

    /**
     * Returns the color count associated with this color
     * 
     * @param bool $as_array
     * @param bool $normalize_array
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getcolorcount($as_array, $normalize_array){}

    /**
     * Retrieves the value of the color channel specified, as a
     * floating-point number between 0 and 1.
     * 
     * @param int $color The channel to check, specified as one of the
     *   Gmagick channel constants.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function getcolorvalue($color){}

    /**
     * Sets the color described by the GmagickPixel object, with a string
     * (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)",
     * etc.).
     * 
     * @param string $color The color definition to use in order to
     *   initialise the GmagickPixel object.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setcolor($color){}

    /**
     * Sets the value of the specified channel of this object to the provided
     * value, which should be between 0 and 1. This function can be used to
     * provide an opacity channel to a GmagickPixel object.
     * 
     * @param int $color One of the Gmagick channel color constants.
     * @param float $value The value to set this channel to, ranging from 0
     *   to 1.
     * @return void
     * @since PECL gmagick >= Unknown
     **/
    function setcolorvalue($color, $value){}

    /**
     * Constructs an GmagickPixel object. If a color is specified, the object
     * is constructed and then initialised with that color before being
     * returned.
     * 
     * @param string $color The optional color string to use as the initial
     *   value of this object.
     * @since PECL gmagick >= Unknown
     **/
    function __construct($color){}

}
/**
 * Description of the class.
 **/
class GmagickPixelException extends Exception {
}
/**
 * Haru PDF Annotation Class.
 **/
class HaruAnnotation {
    /**
     * Defines the style of the border of the annotation. This function may
     * be used with link annotations only.
     * 
     * @param float $width The width of the border line.
     * @param int $dash_on The dash style.
     * @param int $dash_off The dash style.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setBorderStyle($width, $dash_on, $dash_off){}

    /**
     * Defines the appearance of the annotation when clicked. This function
     * may be used with link annotations only.
     * 
     * @param int $mode The highlighting mode of the annotation. Can take
     *   only these values: HaruAnnotation::NO_HIGHLIGHT - no highlighting.
     *   HaruAnnotation::INVERT_BOX - invert the contents of the annotation.
     *   HaruAnnotation::INVERT_BORDER - invert the border of the annotation.
     *   HaruAnnotation::DOWN_APPEARANCE - dent the annotation.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setHighlightMode($mode){}

    /**
     * Defines the style of the annotation icon. This function may be used
     * with text annotations only.
     * 
     * @param int $icon The style of the icon. Can take only these values:
     *   HaruAnnotation::ICON_COMMENT HaruAnnotation::ICON_KEY
     *   HaruAnnotation::ICON_NOTE HaruAnnotation::ICON_HELP
     *   HaruAnnotation::ICON_NEW_PARAGRAPH HaruAnnotation::ICON_PARAGRAPH
     *   HaruAnnotation::ICON_INSERT
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setIcon($icon){}

    /**
     * Defines whether the annotation is initially displayed open. This
     * function may be used with text annotations only.
     * 
     * @param bool $opened means the annotation is initially displayed
     *   open, - means it's closed.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setOpened($opened){}

}
/**
 * Haru PDF Destination Class.
 **/
class HaruDestination {
    /**
     * Defines the appearance of the page to fit the window.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFit(){}

    /**
     * Defines the appearance of the page to fit the bounding box of the page
     * within the window.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFitB(){}

    /**
     * Defines the appearance of the page to magnifying to fit the width of
     * the bounding box and setting the top position of the page to the value
     * of {@link top}.
     * 
     * @param float $top The top coordinates of the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFitBH($top){}

    /**
     * Defines the appearance of the page to magnifying to fit the height of
     * the bounding box and setting the left position of the page to the
     * value of {@link left}.
     * 
     * @param float $left The left coordinates of the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFitBV($left){}

    /**
     * Defines the appearance of the page to fit the window width and sets
     * the top position of the page to the value of {@link top}.
     * 
     * @param float $top The top position of the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFitH($top){}

    /**
     * Defines the appearance of the page to fit the rectangle by the
     * parameters.
     * 
     * @param float $left The left coordinates of the page.
     * @param float $bottom The bottom coordinates of the page.
     * @param float $right The right coordinates of the page.
     * @param float $top The top coordinates of the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFitR($left, $bottom, $right, $top){}

    /**
     * Defines the appearance of the page to fit the window height.
     * 
     * @param float $left The left position of the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFitV($left){}

    /**
     * Defines the appearance of the page using three parameters: {@link
     * left}, {@link top} and {@link zoom}.
     * 
     * @param float $left The left position of the page.
     * @param float $top The top position of the page.
     * @param float $zoom The magnification factor. The value must be
     *   between 0.08 (8%) and 32 (3200%).
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setXYZ($left, $top, $zoom){}

}
/**
 * Haru PDF Document Class.
 **/
class HaruDoc {
    /**
     * Adds a new page to the document.
     * 
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function addPage(){}

    /**
     * Set the numbering style for the specified range of pages.
     * 
     * @param int $first_page The first page included into the labeling
     *   range.
     * @param int $style The numbering style. The following values are
     *   allowed: HaruPage::NUM_STYLE_DECIMAL - page label is displayed using
     *   decimal numerals. HaruPage::NUM_STYLE_UPPER_ROMAN - page label is
     *   displayed using uppercase Roman numerals.
     *   HaruPage::NUM_STYLE_LOWER_ROMAN - page label is displayed using
     *   lowercase Roman numerals. HaruPage::NUM_STYLE_UPPER_LETTER - page
     *   label is displayed using uppercase letters (from A to Z).
     *   HaruPage::NUM_STYLE_LOWER_LETTERS - page label is displayed using
     *   lowercase letters (from a to z).
     * @param int $first_num The first page number in this range.
     * @param string $prefix The prefix for the page label.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function addPageLabel($first_page, $style, $first_num, $prefix){}

    /**
     * Create a HaruOutline instance.
     * 
     * @param string $title The caption of new outline object.
     * @param object $parent_outline A valid HaruOutline instance or .
     * @param object $encoder A valid HaruEncoder instance or .
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function createOutline($title, $parent_outline, $encoder){}

    /**
     * Get the HaruEncoder currently used in the document.
     * 
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function getCurrentEncoder(){}

    /**
     * Get current page of the document.
     * 
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function getCurrentPage(){}

    /**
     * Get the HaruEncoder instance for the specified encoding.
     * 
     * @param string $encoding The encoding name. See Builtin Encodings for
     *   the list of allowed values.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function getEncoder($encoding){}

    /**
     * Get a HaruFont instance.
     * 
     * @param string $fontname The name of the font. See Builtin Fonts for
     *   the list of builtin fonts. You can also use the name of a font
     *   loaded via HaruDoc::loadTTF, HaruDoc::loadTTC and
     *   HaruDoc::loadType1.
     * @param string $encoding The encoding to use. See Builtin Encodings
     *   for the list of supported encodings.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function getFont($fontname, $encoding){}

    /**
     * Get the current value of the specified document attribute.
     * 
     * @param int $type The type of the attribute. The following values are
     *   available: HaruDoc::INFO_AUTHOR HaruDoc::INFO_CREATOR
     *   HaruDoc::INFO_TITLE HaruDoc::INFO_SUBJECT HaruDoc::INFO_KEYWORDS
     *   HaruDoc::INFO_CREATION_DATE HaruDoc::INFO_MOD_DATE
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function getInfoAttr($type){}

    /**
     * Get the current page layout. See HaruDoc::setPageLayout for the list
     * of possible values.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getPageLayout(){}

    /**
     * Get the current page mode. See HaruDoc::setPageMode for the list of
     * possible values.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getPageMode(){}

    /**
     * Get the size of the temporary stream.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getStreamSize(){}

    /**
     * Creates a new page and inserts just before the specified page.
     * 
     * @param object $page A valid HaruPage instance.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function insertPage($page){}

    /**
     * Loads the specified JPEG image.
     * 
     * @param string $filename A valid JPEG image file.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function loadJPEG($filename){}

    /**
     * Loads a PNG image.
     * 
     * Libharu might be built without libpng support, in this case each call
     * to this function would result in exception.
     * 
     * @param string $filename The name of a PNG image file.
     * @param bool $deferred Do not load data immediately. You can set
     *   {@link deferred} parameter to for deferred data loading, in this
     *   case only size and color are loaded immediately.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function loadPNG($filename, $deferred){}

    /**
     * Loads a RAW image.
     * 
     * @param string $filename The name of a RAW image file.
     * @param int $width The width of the image.
     * @param int $height The height of the image.
     * @param int $color_space The color space of the image. Can be one of
     *   the following values: HaruDoc::CS_DEVICE_GRAY HaruDoc::CS_DEVICE_RGB
     *   HaruDoc::CS_DEVICE_CMYK
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function loadRaw($filename, $width, $height, $color_space){}

    /**
     * Loads the TrueType font with the specified index from a TrueType
     * collection file.
     * 
     * @param string $fontfile The TrueType collection file.
     * @param int $index The index of the font in the collection file.
     * @param bool $embed When set to , the glyph data of the font is
     *   embedded into the PDF file, otherwise only the matrix data is
     *   included.
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function loadTTC($fontfile, $index, $embed){}

    /**
     * Loads the given TTF file and (optionally) embed its data into the
     * document.
     * 
     * @param string $fontfile The TTF file to load.
     * @param bool $embed When set to , the glyph data of the font is
     *   embedded into the PDF file, otherwise only the matrix data is
     *   included.
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function loadTTF($fontfile, $embed){}

    /**
     * Loads Type1 font from the given file and registers it in the PDF
     * document.
     * 
     * @param string $afmfile Path to an AFM file.
     * @param string $pfmfile Path to a PFA/PFB file, optional. If it's not
     *   set only the glyph data of the font is embedded into the PDF
     *   document.
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function loadType1($afmfile, $pfmfile){}

    /**
     * Writes the document data into standard output.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function output(){}

    /**
     * Read data from the temporary stream.
     * 
     * @param int $bytes The {@link bytes} parameter specifies how many
     *   bytes to read, though the stream may contain less bytes than
     *   requested.
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function readFromStream($bytes){}

    /**
     * Once an error code is set, most of the operations, including I/O
     * processing functions cannot be performed. In case if you want to
     * continue after the cause of the error has been fixed, you have to
     * invoke this function in order to reset the document error state.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function resetError(){}

    /**
     * Rewinds the temporary stream of the document.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function resetStream(){}

    /**
     * Saves the document into the specified file.
     * 
     * @param string $file The file to save the document to.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function save($file){}

    /**
     * Saves the document data into a temporary stream.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function saveToStream(){}

    /**
     * Defines compression mode for the document. In case when libharu was
     * compiled without Zlib support this function will always throw
     * HaruException.
     * 
     * @param int $mode The compression mode to use. The value is a
     *   combination of the following flags: HaruDoc::COMP_NONE - all
     *   contents is not compressed. HaruDoc::COMP_TEXT - compress the text
     *   data. HaruDoc::COMP_IMAGE - compress the image data.
     *   HaruDoc::COMP_METADATA - compress other data (fonts, cmaps).
     *   HaruDoc::COMP_ALL - compress all data.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setCompressionMode($mode){}

    /**
     * Defines the encoder currently used in the document.
     * 
     * @param string $encoding The name of the encoding to use. See Builtin
     *   Encodings for the list of allowed values.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setCurrentEncoder($encoding){}

    /**
     * Defines encryption mode for the document. The encryption mode cannot
     * be set before setting the password.
     * 
     * @param int $mode The encryption mode to use. Can be one of the
     *   following: HaruDoc::ENCRYPT_R2 - use "revision2" algorithm.
     *   HaruDoc::ENCRYPT_R3 - use "revision3" algorithm. Using this value
     *   bumps the version of PDF to 1.4.
     * @param int $key_len The encryption key length in bytes. This
     *   parameter is optional and used only when mode is
     *   HaruDoc::ENCRYPT_R3. The default value is 5 (40bit).
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setEncryptionMode($mode, $key_len){}

    /**
     * Defines an info attribute. Uses the current encoding of the document.
     * 
     * @param int $type The type of the attribute. Can be one of the
     *   following: HaruDoc::INFO_AUTHOR HaruDoc::INFO_CREATOR
     *   HaruDoc::INFO_TITLE HaruDoc::INFO_SUBJECT HaruDoc::INFO_KEYWORDS
     * @param string $info The value of the attribute.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setInfoAttr($type, $info){}

    /**
     * Sets the datetime info attributes of the document.
     * 
     * @param int $type The type of the attribute. Can be one of the
     *   following: HaruDoc::INFO_CREATION_DATE HaruDoc::INFO_MOD_DATE
     * @param int $year
     * @param int $month Between 1 and 12.
     * @param int $day Between 1 and 31, 30, 29 or 28 (different for each
     *   month).
     * @param int $hour Between 0 and 23.
     * @param int $min Between 0 and 59.
     * @param int $sec Between 0 and 59.
     * @param string $ind The timezone relation to UTC, can be "", " ",
     *   "+", "-" and "Z".
     * @param int $off_hour If {@link ind} is not " " or "", values between
     *   0 and 23 are valid. Otherwise, this parameter is ignored.
     * @param int $off_min If {@link ind} is not " " or "", values between
     *   0 and 59 are valid. Otherwise, this parameter is ignored.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setInfoDateAttr($type, $year, $month, $day, $hour, $min, $sec, $ind, $off_hour, $off_min){}

    /**
     * Defines which page should be shown when the document is opened.
     * 
     * @param object $destination A valid HaruDestination instance.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setOpenAction($destination){}

    /**
     * Defines how pages should be displayed.
     * 
     * @param int $layout The following values are accepted:
     *   HaruDoc::PAGE_LAYOUT_SINGLE - only one page is displayed.
     *   HaruDoc::PAGE_LAYOUT_ONE_COLUMN - display the pages in one column.
     *   HaruDoc::PAGE_LAYOUT_TWO_COLUMN_LEFT - display pages in two columns,
     *   first page left. HaruDoc::PAGE_LAYOUT_TWO_COLUMN_RIGHT - display
     *   pages in two columns, first page right.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setPageLayout($layout){}

    /**
     * Defines how the document should be displayed.
     * 
     * @param int $mode The following values are accepted:
     *   HaruDoc::PAGE_MODE_USE_NONE - display the document with neither
     *   outline nor thumbnail. HaruDoc::PAGE_MODE_USE_OUTLINE - display the
     *   document with outline pane. HaruDoc::PAGE_MODE_USE_THUMBS - display
     *   the document with thumbnail pane. HaruDoc::PAGE_MODE_FULL_SCREEN -
     *   display the document with full screen mode.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setPageMode($mode){}

    /**
     * By default the document has one pages object as a root for all pages.
     * All page objects are create as branches of this object. One pages
     * object can contain only 8191, therefore the maximum number of pages
     * per document is 8191. But you can change that fact by setting {@link
     * page_per_pages} parameter, so that the root pages object contains 8191
     * more pages (not page) objects, which in turn contain 8191 pages each.
     * So the maximum number of pages in the document becomes 8191*{@link
     * page_per_pages}.
     * 
     * @param int $page_per_pages The numbers of pages that a pages object
     *   can contain.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setPagesConfiguration($page_per_pages){}

    /**
     * Defines owner and user passwords for the document. Setting the
     * passwords makes the document contents encrypted.
     * 
     * @param string $owner_password The password of the owner, which can
     *   change permissions of the document. Empty password is not accepted.
     *   Owner's password cannot be the same as the user's password.
     * @param string $user_password The password of the user. Can be empty.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setPassword($owner_password, $user_password){}

    /**
     * Defines permissions for the document.
     * 
     * @param int $permission The values is a combination of these flags:
     *   HaruDoc::ENABLE_READ - user can read the document.
     *   HaruDoc::ENABLE_PRINT - user can print the document.
     *   HaruDoc::ENABLE_EDIT_ALL - user can edit the contents of the
     *   document other than annotations and form fields.
     *   HaruDoc::ENABLE_COPY - user can copy the text and the graphics of
     *   the document. HaruDoc::ENABLE_EDIT - user can add or modify the
     *   annotations and form fields of the document.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setPermission($permission){}

    /**
     * Enables Chinese simplified encodings.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useCNSEncodings(){}

    /**
     * Enables builtin Chinese simplified fonts.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useCNSFonts(){}

    /**
     * Enables Chinese traditional encodings.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useCNTEncodings(){}

    /**
     * Enables builtin Chinese traditional fonts.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useCNTFonts(){}

    /**
     * Enables Japanese encodings.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useJPEncodings(){}

    /**
     * Enables builtin Japanese fonts.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useJPFonts(){}

    /**
     * Enables Korean encodings.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useKREncodings(){}

    /**
     * Enables builtin Korean fonts.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function useKRFonts(){}

    /**
     * Constructs new HaruDoc instance.
     * 
     * @return void
     * @since PECL haru >= 0.0.1
     **/
    function __construct(){}

}
/**
 * Haru PDF Encoder Class.
 **/
class HaruEncoder {
    /**
     * Get the type of the byte in the text.
     * 
     * @param string $text The text.
     * @param int $index The position in the text.
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getByteType($text, $index){}

    /**
     * Get the type of the encoder.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getType(){}

    /**
     * Converts the specified character to unicode.
     * 
     * @param int $character The character code to convert.
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getUnicode($character){}

    /**
     * Get the writing mode of the encoder.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getWritingMode(){}

}
/**
 * Haru PDF Exception Class.
 **/
class HaruException extends Exception {
}
/**
 * Haru PDF Font Class.
 **/
class HaruFont {
    /**
     * Get the vertical ascent of the font.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getAscent(){}

    /**
     * Get the distance from the baseline of uppercase letters.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getCapHeight(){}

    /**
     * Get the vertical descent of the font.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getDescent(){}

    /**
     * Get the name of the font encoding.
     * 
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function getEncodingName(){}

    /**
     * Get the name of the font.
     * 
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function getFontName(){}

    /**
     * Get the total width of the text, number of characters, number of words
     * and number of spaces.
     * 
     * @param string $text The text to measure.
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getTextWidth($text){}

    /**
     * Get the width of the character in the font.
     * 
     * @param int $character The code of the character.
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getUnicodeWidth($character){}

    /**
     * Gets the distance from the baseline of lowercase letters.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getXHeight(){}

    /**
     * Calculate the number of characters which can be included within the
     * specified width.
     * 
     * @param string $text The text to fit the width.
     * @param float $width The width of the area to put the text to.
     * @param float $font_size The size of the font.
     * @param float $char_space The character spacing.
     * @param float $word_space The word spacing.
     * @param bool $word_wrap When this parameter is set to the function
     *   "emulates" word wrapping and doesn't include the part of the current
     *   word if reached the end of the area.
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function measureText($text, $width, $font_size, $char_space, $word_space, $word_wrap){}

}
/**
 * Haru PDF Image Class.
 **/
class HaruImage {
    /**
     * Gets the number of bits used to describe each color component of the
     * image.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getBitsPerComponent(){}

    /**
     * Get the name of the color space.
     * 
     * @return string
     * @since PECL haru >= 0.0.1
     **/
    function getColorSpace(){}

    /**
     * Get the height of the image.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getHeight(){}

    /**
     * Get the size of the image.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getSize(){}

    /**
     * Get the width of the image.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getWidth(){}

    /**
     * Defines the transparent color of the image using the RGB range values.
     * The color within the range is displayed as a transparent color. The
     * color space of the image must be RGB.
     * 
     * @param int $rmin The lower limit of red. Must be between 0 and 255.
     * @param int $rmax The upper limit of red. Must be between 0 and 255.
     * @param int $gmin The lower limit of green. Must be between 0 and
     *   255.
     * @param int $gmax The upper limit of green. Must be between 0 and
     *   255.
     * @param int $bmin The lower limit of blue. Must be between 0 and 255.
     * @param int $bmax The upper limit of blue. Must be between 0 and 255.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setColorMask($rmin, $rmax, $gmin, $gmax, $bmin, $bmax){}

    /**
     * Sets the image used as image-mask. It must be 1bit gray-scale color
     * image.
     * 
     * @param object $mask_image A valid HaruImage instance.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setMaskImage($mask_image){}

}
/**
 * Haru PDF Outline Class.
 **/
class HaruOutline {
    /**
     * Sets a destination object which becomes a target to jump to when the
     * outline is clicked.
     * 
     * @param object $destination A valid HaruDestination instance.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setDestination($destination){}

    /**
     * Defines whether this node is opened or not when the outline is
     * displayed for the first time.
     * 
     * @param bool $opened means open, - closed.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setOpened($opened){}

}
/**
 * Haru PDF Page Class.
 **/
class HaruPage {
    /**
     * Appends an arc to the current path.
     * 
     * @param float $x Horizontal coordinate of the center.
     * @param float $y Vertical coordinate of the center.
     * @param float $ray The ray of the arc.
     * @param float $ang1 The angle of the beginning.
     * @param float $ang2 The angle of the end. Must be greater than {@link
     *   ang1}.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function arc($x, $y, $ray, $ang1, $ang2){}

    /**
     * Begins new text object and sets the current text position to (0,0).
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function beginText(){}

    /**
     * Appends a circle to the current path.
     * 
     * @param float $x Horizontal coordinate of the center point.
     * @param float $y Vertical coordinate of the center point.
     * @param float $ray The ray of the circle.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function circle($x, $y, $ray){}

    /**
     * Appends a straight line from the current point to the start point of
     * the path.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function closePath(){}

    /**
     * Concatenates current transformation matrix of the page and the
     * specified matrix.
     * 
     * @param float $a
     * @param float $b
     * @param float $c
     * @param float $d
     * @param float $x
     * @param float $y
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function concat($a, $b, $c, $d, $x, $y){}

    /**
     * Create a new HaruDestination instance.
     * 
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function createDestination(){}

    /**
     * Creates a new HaruAnnotation instance.
     * 
     * @param array $rectangle An array with 4 coordinates of the clickable
     *   area.
     * @param object $destination Valid HaruDestination instance.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function createLinkAnnotation($rectangle, $destination){}

    /**
     * Creates a new HaruAnnotation instance.
     * 
     * @param array $rectangle An array with 4 coordinates of the
     *   annotation area.
     * @param string $text The text to be displayed.
     * @param object $encoder Optional HaruEncoder instance.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function createTextAnnotation($rectangle, $text, $encoder){}

    /**
     * Creates a new HaruAnnotation instance.
     * 
     * @param array $rectangle An array with 4 coordinates of the clickable
     *   area.
     * @param string $url The URL to open.
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function createURLAnnotation($rectangle, $url){}

    /**
     * Append a Bezier curve to the current path. The point (x1, y1) and the
     * point (x2, y2) are used as the control points for a Bezier curve and
     * current point is moved to the point (x3, y3).
     * 
     * @param float $x1 A Bezier curve control point.
     * @param float $y1 A Bezier curve control point.
     * @param float $x2 A Bezier curve control point.
     * @param float $y2 A Bezier curve control point.
     * @param float $x3 The current point moves here.
     * @param float $y3 The current point moves here.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function curveTo($x1, $y1, $x2, $y2, $x3, $y3){}

    /**
     * Appends a Bezier curve to the current path. The current point and the
     * point (x2, y2) are used as the control points for the Bezier curve and
     * current point is moved to the point (x3, y3).
     * 
     * @param float $x2 A Bezier curve control point.
     * @param float $y2 A Bezier curve control point.
     * @param float $x3 The current point moves here.
     * @param float $y3 The current point moves here.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function curveTo2($x2, $y2, $x3, $y3){}

    /**
     * Appends a Bezier curve to the current path. The point (x1, y1) and the
     * point (x3, y3) are used as the control points for a Bezier curve and
     * current point is moved to the point (x3, y3).
     * 
     * @param float $x1 A Bezier curve control point.
     * @param float $y1 A Bezier curve control point.
     * @param float $x3 The current point moves here.
     * @param float $y3 The current point moves here.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function curveTo3($x1, $y1, $x3, $y3){}

    /**
     * Show image at the page.
     * 
     * @param object $image Valid HaruImage instance.
     * @param float $x The left border of the area where the image is
     *   displayed.
     * @param float $y The lower border of the area where the image is
     *   displayed.
     * @param float $width The width of the image area.
     * @param float $height The height of the image area.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function drawImage($image, $x, $y, $width, $height){}

    /**
     * Appends an ellipse to the current path.
     * 
     * @param float $x Horizontal coordinate of the center.
     * @param float $y Vertical coordinate of the center.
     * @param float $xray The ray of the ellipse in the x direction.
     * @param float $yray The ray of the ellipse in the y direction.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function ellipse($x, $y, $xray, $yray){}

    /**
     * Ends current path object without performing filling and painting
     * operations.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function endPath(){}

    /**
     * Finalizes current text object.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function endText(){}

    /**
     * Fills current path using even-odd rule.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function eofill(){}

    /**
     * Fills current path using even-odd rule, then paints the path.
     * 
     * @param bool $close_path Optional parameter. When set to , the
     *   function closes the current path. Default to .
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function eoFillStroke($close_path){}

    /**
     * Fills current path using nonzero winding number rule.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function fill(){}

    /**
     * Fills current path using nonzero winding number rule, then paints the
     * path.
     * 
     * @param bool $close_path Optional parameter. When set to , the
     *   function closes the current path. Default to .
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function fillStroke($close_path){}

    /**
     * Get the current value of character spacing.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getCharSpace(){}

    /**
     * Returns the current filling color.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getCMYKFill(){}

    /**
     * Get the current stroking color.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getCMYKStroke(){}

    /**
     * Get the currently used font.
     * 
     * @return object
     * @since PECL haru >= 0.0.1
     **/
    function getCurrentFont(){}

    /**
     * Get the current font size.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getCurrentFontSize(){}

    /**
     * Get the current position for path painting.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getCurrentPos(){}

    /**
     * Get the current position for text printing.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getCurrentTextPos(){}

    /**
     * Get the current dash pattern. See HaruPage::setDash for more
     * information on dash patterns.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getDash(){}

    /**
     * Get the current filling color space.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getFillingColorSpace(){}

    /**
     * Get the flatness of the page.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getFlatness(){}

    /**
     * Get the current graphics mode.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getGMode(){}

    /**
     * Get the current filling color.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getGrayFill(){}

    /**
     * Get the current stroking color.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getGrayStroke(){}

    /**
     * Get the height of the page.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getHeight(){}

    /**
     * Get the current value of the horizontal scaling.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getHorizontalScaling(){}

    /**
     * Get the current line cap style.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getLineCap(){}

    /**
     * Get the current line join style.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getLineJoin(){}

    /**
     * Get the current line width.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getLineWidth(){}

    /**
     * Get the value of the miter limit.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getMiterLimit(){}

    /**
     * Get the current filling color.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getRGBFill(){}

    /**
     * Get the current stroking color.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getRGBStroke(){}

    /**
     * Get the current stroking color space.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getStrokingColorSpace(){}

    /**
     * Get the current value of line spacing.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getTextLeading(){}

    /**
     * Get the current text transformation matrix of the page.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getTextMatrix(){}

    /**
     * Get the current text rendering mode.
     * 
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function getTextRenderingMode(){}

    /**
     * Get the current value of text rising.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getTextRise(){}

    /**
     * Get the width of the text using current fontsize, character spacing
     * and word spacing
     * 
     * @param string $text The text to measure.
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getTextWidth($text){}

    /**
     * Get the current transformation matrix of the page.
     * 
     * @return array
     * @since PECL haru >= 0.0.1
     **/
    function getTransMatrix(){}

    /**
     * Get the width of the page.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getWidth(){}

    /**
     * Get the current value of word spacing.
     * 
     * @return float
     * @since PECL haru >= 0.0.1
     **/
    function getWordSpace(){}

    /**
     * Draws a line from the current point to the specified point.
     * 
     * @param float $x
     * @param float $y
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function lineTo($x, $y){}

    /**
     * Get the number of characters which can be included within the
     * specified width.
     * 
     * @param string $text The text to measure.
     * @param float $width The width of the area to put the text to.
     * @param bool $wordwrap When this parameter is set to the function
     *   "emulates" word wrapping and doesn't include the part of the current
     *   word if reached the end of the area.
     * @return int
     * @since PECL haru >= 0.0.1
     **/
    function measureText($text, $width, $wordwrap){}

    /**
     * Moves text position to the specified offset. If the start position of
     * the current line is (x1, y1), the start of the next line is (x1 +
     * {@link x}, y1 + {@link y}).
     * 
     * @param float $x The specified text position offset.
     * @param float $y The specified text position offset.
     * @param bool $set_leading If set to , the function sets the text
     *   leading to -{@link y}.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function moveTextPos($x, $y, $set_leading){}

    /**
     * Defines starting point for new drawing path.
     * 
     * @param float $x A new starting point coordinate.
     * @param float $y A new starting point coordinate.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function moveTo($x, $y){}

    /**
     * Moves text position to the start of the next line.
     * 
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function moveToNextLine(){}

    /**
     * Appends a rectangle to the current drawing path.
     * 
     * @param float $x The left border of the rectangle.
     * @param float $y The lower border of the rectangle.
     * @param float $width The width of the rectangle.
     * @param float $height The height of the rectangle.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function rectangle($x, $y, $width, $height){}

    /**
     * Defines character spacing for the page.
     * 
     * @param float $char_space The new character spacing for the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setCharSpace($char_space){}

    /**
     * Defines filling color for the page.
     * 
     * @param float $c
     * @param float $m
     * @param float $y
     * @param float $k
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setCMYKFill($c, $m, $y, $k){}

    /**
     * Defines stroking color for the page.
     * 
     * @param float $c
     * @param float $m
     * @param float $y
     * @param float $k
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setCMYKStroke($c, $m, $y, $k){}

    /**
     * Defines the dash pattern for the page.
     * 
     * @param array $pattern An array (8 elements max) which contains a
     *   pattern of dashes and gaps used for lines on the page.
     * @param int $phase The phase on which the pattern begins.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setDash($pattern, $phase){}

    /**
     * Defines flatness for the page.
     * 
     * @param float $flatness The defined flatness for the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFlatness($flatness){}

    /**
     * Defines current font and its size for the page.
     * 
     * @param object $font A valid HaruFont instance.
     * @param float $size The size of the font.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setFontAndSize($font, $size){}

    /**
     * Defines filling color for the page.
     * 
     * @param float $value The value of gray level between 0 and 1.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setGrayFill($value){}

    /**
     * Defines stroking color for the page.
     * 
     * @param float $value The value of gray level between 0 and 1.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setGrayStroke($value){}

    /**
     * Defines height of the page.
     * 
     * @param float $height The defined height for the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setHeight($height){}

    /**
     * Set the horizontal scaling for the page.
     * 
     * @param float $scaling The horizontal scaling for text showing on the
     *   page. The initial value is 100.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setHorizontalScaling($scaling){}

    /**
     * Defines the shape to be used at the ends of lines.
     * 
     * @param int $cap Must be one of the following values:
     *   HaruPage::BUTT_END - the line is squared off at the endpoint of the
     *   path. HaruPage::ROUND_END - the end of the line becomes a semicircle
     *   with center in the end point of the path.
     *   HaruPage::PROJECTING_SCUARE_END - the line continues to the point
     *   that exceeds half of the stroke width the end point.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setLineCap($cap){}

    /**
     * Defines line join style for the page.
     * 
     * @param int $join Must be one of the following values:
     *   HaruPage::MITER_JOIN HaruPage::ROUND_JOIN HaruPage::BEVEL_JOIN
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setLineJoin($join){}

    /**
     * Defines line width for the page.
     * 
     * @param float $width The defined line width for the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setLineWidth($width){}

    /**
     * Set the current value of the miter limit of the page.
     * 
     * @param float $limit Defines the current value of the miter limit of
     *   the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setMiterLimit($limit){}

    /**
     * Defines filling color for the page. All values must be between 0 and
     * 1.
     * 
     * @param float $r
     * @param float $g
     * @param float $b
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setRGBFill($r, $g, $b){}

    /**
     * Defines stroking color for the page. All values must be between 0 and
     * 1.
     * 
     * @param float $r
     * @param float $g
     * @param float $b
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setRGBStroke($r, $g, $b){}

    /**
     * Defines rotation angle of the page.
     * 
     * @param int $angle Must be a multiple of 90 degrees.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setRotate($angle){}

    /**
     * Changes size and direction of the page to a predefined format.
     * 
     * @param int $size Must be one of the following values:
     *   HaruPage::SIZE_LETTER HaruPage::SIZE_LEGAL HaruPage::SIZE_A3
     *   HaruPage::SIZE_A4 HaruPage::SIZE_A5 HaruPage::SIZE_B4
     *   HaruPage::SIZE_B5 HaruPage::SIZE_EXECUTIVE HaruPage::SIZE_US4x6
     *   HaruPage::SIZE_US4x8 HaruPage::SIZE_US5x7 HaruPage::SIZE_COMM10
     * @param int $direction Must be one of the following values:
     *   HaruPage::PORTRAIT HaruPage::LANDSCAPE
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setSize($size, $direction){}

    /**
     * Defines transition style for the page.
     * 
     * @param int $type Must be one of the following values:
     *   HaruPage::TS_WIPE_RIGHT HaruPage::TS_WIPE_LEFT HaruPage::TS_WIPE_UP
     *   HaruPage::TS_WIPE_DOWN HaruPage::TS_BARN_DOORS_HORIZONTAL_OUT
     *   HaruPage::TS_BARN_DOORS_HORIZONTAL_IN
     *   HaruPage::TS_BARN_DOORS_VERTICAL_OUT
     *   HaruPage::TS_BARN_DOORS_VERTICAL_IN HaruPage::TS_BOX_OUT
     *   HaruPage::TS_BOX_IN HaruPage::TS_BLINDS_HORIZONTAL
     *   HaruPage::TS_BLINDS_VERTICAL HaruPage::TS_DISSOLVE
     *   HaruPage::TS_GLITTER_RIGHT HaruPage::TS_GLITTER_DOWN
     *   HaruPage::TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT HaruPage::TS_REPLACE
     * @param float $disp_time The display duration of the page in seconds.
     * @param float $trans_time The duration of the transition effect in
     *   seconds.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setSlideShow($type, $disp_time, $trans_time){}

    /**
     * Set the text leading (line spacing) for the page.
     * 
     * @param float $text_leading Defines line spacing for the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setTextLeading($text_leading){}

    /**
     * Defines the text transformation matrix of the page.
     * 
     * @param float $a Width multiplier.
     * @param float $b Vertical skew in radians.
     * @param float $c Horizontal skew in radians.
     * @param float $d Height multiplier.
     * @param float $x Horizontal position for text.
     * @param float $y Vertical position for text.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setTextMatrix($a, $b, $c, $d, $x, $y){}

    /**
     * Defines text rendering mode for the page.
     * 
     * @param int $mode Must be one of the following values: HaruPage::FILL
     *   HaruPage::STROKE HaruPage::FILL_THEN_STROKE HaruPage::INVISIBLE
     *   HaruPage::FILL_CLIPPING HaruPage::STROKE_CLIPPING
     *   HaruPage::FILL_STROKE_CLIPPING HaruPage::CLIPPING
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setTextRenderingMode($mode){}

    /**
     * Set the current value of text rising.
     * 
     * @param float $rise Defines the current value of text rising.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setTextRise($rise){}

    /**
     * Set the width of the page.
     * 
     * @param float $width Defines width of the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setWidth($width){}

    /**
     * Set the word spacing for the page.
     * 
     * @param float $word_space Defines word spacing for the page.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function setWordSpace($word_space){}

    /**
     * Prints out the text at the current position of the page.
     * 
     * @param string $text The text to show.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function showText($text){}

    /**
     * Moves the current position to the start of the next line and print out
     * the text.
     * 
     * @param string $text The text to show.
     * @param float $word_space The word spacing.
     * @param float $char_space The character spacing.
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function showTextNextLine($text, $word_space, $char_space){}

    /**
     * Paints the current path.
     * 
     * @param bool $close_path Closes the current path if set to .
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function stroke($close_path){}

    /**
     * Prints the text on the specified position.
     * 
     * @param float $x
     * @param float $y
     * @param string $text
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function textOut($x, $y, $text){}

    /**
     * Prints the text inside the specified region.
     * 
     * @param float $left Left border of the text area.
     * @param float $top Top border of the text area.
     * @param float $right Right border of the text area.
     * @param float $bottom Lower border of the text area.
     * @param string $text The text to print.
     * @param int $align Text alignment. Must be one of the following
     *   values: HaruPage::TALIGN_LEFT HaruPage::TALIGN_RIGHT
     *   HaruPage::TALIGN_CENTER HaruPage::TALIGN_JUSTIFY
     * @return bool
     * @since PECL haru >= 0.0.1
     **/
    function textRect($left, $top, $right, $bottom, $text, $align){}

}
class HttpDeflateStream {
    /**
     * Creates a new HttpDeflateStream object instance.
     * 
     * See the deflate stream constants table for possible {@link flags}.
     * 
     * @param int $flags initialization flags
     * @param string $class_name name of a subclass of HttpDeflateStream
     * @return HttpDeflateStream
     * @since PECL pecl_http >= 1.4.0
     **/
    function factory($flags, $class_name){}

    /**
     * Finalizes the deflate stream. The deflate stream can be reused after
     * finalizing.
     * 
     * @param string $data data to deflate
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function finish($data){}

    /**
     * Flushes the deflate stream.
     * 
     * @param string $data more data to deflate
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function flush($data){}

    /**
     * Passes more data through the deflate stream.
     * 
     * @param string $data data to deflate
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function update($data){}

    /**
     * Creates a new HttpDeflateStream object instance.
     * 
     * See the deflate stream constants table for possible {@link flags}.
     * 
     * @param int $flags initialization flags
     * @return void
     * @since PECL pecl_http >= 0.21.0
     **/
    function __construct($flags){}

}
class HttpInflateStream {
    /**
     * Creates a new HttpInflateStream object instance.
     * 
     * See the inflate constants table for possible {@link flags}.
     * 
     * @param int $flags initialization flags
     * @param string $class_name name of a subclass of HttpInflateStream
     * @return HttpInflateStream
     * @since PECL pecl_http >= 1.4.0
     **/
    function factory($flags, $class_name){}

    /**
     * Finalizes the inflate stream. The inflate stream can be reused after
     * finalizing.
     * 
     * @param string $data data to inflate
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function finish($data){}

    /**
     * Flushes the inflate stream.
     * 
     * @param string $data more data to inflate
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function flush($data){}

    /**
     * Passes more data through the inflate stream.
     * 
     * @param string $data data to inflate
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function update($data){}

    /**
     * Creates a new HttpInflateStream object instance.
     * 
     * See the inflate constants table for possible {@link flags}.
     * 
     * @param int $flags initialization flags
     * @return void
     * @since PECL pecl_http >= 1.0.0
     **/
    function __construct($flags){}

}
class HttpMessage implements Iterator, Countable, Serializable {
    /**
     * Add headers. If append is true, headers with the same name will be
     * separated, else overwritten.
     * 
     * @param array $headers associative array containing the additional
     *   HTTP headers to add to the messages existing headers
     * @param bool $append if true, and a header with the same name of one
     *   to add exists already, this respective header will be converted to
     *   an array containing both header values, otherwise it will be
     *   overwritten with the new header value
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function addHeaders($headers, $append){}

    /**
     * Returns a clone of an HttpMessage object detached from any parent
     * messages.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.22.0
     **/
    function detach(){}

    /**
     * Create an HttpMessage object from a string.
     * 
     * @param string $raw_message a single or several consecutive HTTP
     *   messages
     * @param string $class_name a class extending HttpMessage
     * @return HttpMessage
     * @since PECL pecl_http >= 1.4.0
     **/
    function factory($raw_message, $class_name){}

    /**
     * Create an HttpMessage object from script environment.
     * 
     * @param int $message_type The message type. See HttpMessage type
     *   constants.
     * @param string $class_name a class extending HttpMessage
     * @return HttpMessage
     * @since PECL pecl_http >= 1.5.0
     **/
    function fromEnv($message_type, $class_name){}

    /**
     * Create an HttpMessage object from a string.
     * 
     * @param string $raw_message a single or several consecutive HTTP
     *   messages
     * @param string $class_name a class extending HttpMessage
     * @return HttpMessage
     * @since PECL pecl_http 0.10.0-1.3.3
     **/
    function fromString($raw_message, $class_name){}

    /**
     * Get the body of the parsed HttpMessage.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getBody(){}

    /**
     * Get message header.
     * 
     * @param string $header header name
     * @return string
     * @since PECL pecl_http >= 1.1.0
     **/
    function getHeader($header){}

    /**
     * Get message headers.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getHeaders(){}

    /**
     * Get the HTTP Protocol Version of the Message.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getHttpVersion(){}

    /**
     * Get parent Message.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.10.0
     **/
    function getParentMessage(){}

    /**
     * Get the Request Method of the Message.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getRequestMethod(){}

    /**
     * Get the Request URL of the Message.
     * 
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function getRequestUrl(){}

    /**
     * Get the Response Code of the Message.
     * 
     * @return int
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseCode(){}

    /**
     * Get the Response Status of the message (i.e. the string following the
     * response code).
     * 
     * @return string
     * @since PECL pecl_http >= 0.23.0
     **/
    function getResponseStatus(){}

    /**
     * Get Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or
     * HTTP_MSG_RESPONSE.
     * 
     * @return int
     * @since PECL pecl_http >= 0.10.0
     **/
    function getType(){}

    /**
     * Attempts to guess the content type of the message body through
     * libmagic.
     * 
     * @param string $magic_file the magic.mime database to use
     * @param int $magic_mode flags for libmagic
     * @return string
     * @since PECL pecl_http >= 1.0.0
     **/
    function guessContentType($magic_file, $magic_mode){}

    /**
     * Prepends message(s) to the HTTP message.
     * 
     * @param HttpMessage $message HttpMessage object to prepend
     * @param bool $top whether to prepend to the top most or right this
     *   message
     * @return void
     * @since PECL pecl_http >= 0.22.0
     **/
    function prepend($message, $top){}

    /**
     * Reorders the message chain in reverse order.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.23.0
     **/
    function reverse(){}

    /**
     * Send the Message according to its type as Response or Request.
     * 
     * This provides limited functionality compared to HttpRequest and
     * HttpResponse.
     * 
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function send(){}

    /**
     * Set the body of the HttpMessage.
     * 
     * @param string $body the new body of the message
     * @return void
     * @since PECL pecl_http >= 0.14.0
     **/
    function setBody($body){}

    /**
     * Sets new headers.
     * 
     * @param array $headers associative array containing the new HTTP
     *   headers, which will replace all previous HTTP headers of the message
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function setHeaders($headers){}

    /**
     * Set the HTTP Protocol version of the Message.
     * 
     * @param string $version the HTTP protocol version
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setHttpVersion($version){}

    /**
     * Set the Request Method of the HTTP Message.
     * 
     * @param string $method the request method name
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setRequestMethod($method){}

    /**
     * Set the Request URL of the HTTP Message.
     * 
     * @param string $url the request URL
     * @return bool
     * @since PECL pecl_http >= 0.21.0
     **/
    function setRequestUrl($url){}

    /**
     * Set the response code of an HTTP Response Message.
     * 
     * @param int $code HTTP response code
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setResponseCode($code){}

    /**
     * Set the Response Status of the HTTP message (i.e. the string following
     * the response code).
     * 
     * @param string $status the response status text
     * @return bool
     * @since PECL pecl_http >= 0.23.0
     **/
    function setResponseStatus($status){}

    /**
     * Set Message Type. Either HTTP_MSG_NONE, HTTP_MSG_REQUEST or
     * HTTP_MSG_RESPONSE.
     * 
     * @param int $type the HttpMessage::TYPE
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function setType($type){}

    /**
     * Creates an object regarding to the type of the message.
     * 
     * @return HttpRequest|HttpResponse
     * @since PECL pecl_http >= 0.22.0
     **/
    function toMessageTypeObject(){}

    /**
     * Get the string representation of the Message.
     * 
     * @param bool $include_parent specifies whether the returned string
     *   should also contain any parent messages
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function toString($include_parent){}

    /**
     * Instantiate a new HttpMessage object.
     * 
     * The constructed object will actually represent the last message of the
     * passed string. If there were prior messages, those can be accessed by
     * HttpMessage::{@link getParentMessage}.
     * 
     * @param string $message a single or several consecutive HTTP messages
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function __construct($message){}

}
class HttpQueryString implements ArrayAccess, Serializable {
    /**
     * Get (part of) the query string.
     * 
     * The type parameter is either one of the HttpQueryString::TYPE_*
     * constants or a type abbreviation like b for bool, i for int, f for
     * float, s for string, a for array and o for a stdClass object.
     * 
     * @param string $key key of the query string param to retrieve
     * @param mixed $type which variable type to enforce
     * @param mixed $defval default value if key does not exist
     * @param bool $delete whether to remove the key/value pair from the
     *   query string
     * @return mixed
     * @since PECL pecl_http >= 0.22.0
     **/
    function get($key, $type, $defval, $delete){}

    /**
     * Copies the query string object and sets provided params at the clone.
     * 
     * @param mixed $params query string params to add
     * @return HttpQueryString
     * @since PECL pecl_http >= 1.1.0
     **/
    function mod($params){}

    /**
     * Set query string entry/entries. NULL values will unset the variable.
     * 
     * @param mixed $params query string params to add
     * @return string
     * @since PECL pecl_http >= 0.22.0
     **/
    function set($params){}

    /**
     * Get a single instance (differentiates between the global setting).
     * 
     * @param bool $global whether to operate on $_GET and
     *   $_SERVER['QUERY_STRING']
     * @return HttpQueryString
     * @since PECL pecl_http >= 0.25.0
     **/
    function singleton($global){}

    /**
     * Get the query string represented as associative array.
     * 
     * @return array
     * @since PECL pecl_http >= 0.22.0
     **/
    function toArray(){}

    /**
     * Get the query string.
     * 
     * @return string
     * @since PECL pecl_http >= 0.22.0
     **/
    function toString(){}

    /**
     * Converts the query string from the source encoding ie to the target
     * encoding oe.
     * 
     * @param string $ie input encoding
     * @param string $oe output encoding
     * @return bool
     * @since PECL pecl_http >= 0.25.0
     **/
    function xlate($ie, $oe){}

    /**
     * Creates a new HttpQueryString object instance.
     * 
     * Operates on and modifies $_GET and $_SERVER['QUERY_STRING'] if global
     * is TRUE.
     * 
     * @param bool $global whether to operate on $_GET and
     *   $_SERVER['QUERY_STRING']
     * @param mixed $add additional/initial query string parameters
     * @return void
     * @since PECL pecl_http >= 0.22.0
     **/
    function __construct($global, $add){}

}
class HttpRequest {
    /**
     * Add custom cookies.
     * 
     * @param array $cookies an associative array containing any cookie
     *   name/value pairs to add
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function addCookies($cookies){}

    /**
     * Add request header name/value pairs.
     * 
     * @param array $headers an associative array as parameter containing
     *   additional header name/value pairs
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function addHeaders($headers){}

    /**
     * Adds POST data entries, leaving previously set unchanged, unless a
     * post entry with the same name already exists.
     * 
     * Affects only POST and custom requests.
     * 
     * @param array $post_data an associative array as parameter containing
     *   the post fields
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function addPostFields($post_data){}

    /**
     * Add a file to the POST request, leaving previously set files
     * unchanged.
     * 
     * Affects only POST and custom requests. Cannot be used with raw post
     * data.
     * 
     * @param string $name the form element name
     * @param string $file the path to the file
     * @param string $content_type the content type of the file
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function addPostFile($name, $file, $content_type){}

    /**
     * Add PUT data, leaving previously set PUT data unchanged.
     * 
     * Affects only PUT requests.
     * 
     * @param string $put_data the data to concatenate
     * @return bool
     * @since PECL pecl_http >= 0.25.0
     **/
    function addPutData($put_data){}

    /**
     * Add parameters to the query parameter list, leaving previously set
     * unchanged.
     * 
     * Affects any request type.
     * 
     * @param array $query_params an associative array as parameter
     *   containing the query fields to add
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function addQueryData($query_params){}

    /**
     * Add raw post data, leaving previously set raw post data unchanged.
     * 
     * Affects only POST and custom requests.
     * 
     * @param string $raw_post_data the raw post data to concatenate
     * @return bool
     * @since PECL pecl_http 0.14.0-1.4.1
     **/
    function addRawPostData($raw_post_data){}

    /**
     * Set additional SSL options.
     * 
     * @param array $options an associative array as parameter containing
     *   additional SSL specific options
     * @return bool
     * @since PECL pecl_http >= 0.12.0
     **/
    function addSslOptions($options){}

    /**
     * Clears all history messages.
     * 
     * @return void
     * @since PECL pecl_http >= 0.15.0
     **/
    function clearHistory(){}

    /**
     * Enable automatic sending of received cookies.
     * 
     * @return bool
     * @since PECL pecl_http >= 1.0.0
     **/
    function enableCookies(){}

    /**
     * Get the previously set content type.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getContentType(){}

    /**
     * Get previously set cookies.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getCookies(){}

    /**
     * Get previously set request headers.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getHeaders(){}

    /**
     * Get all sent requests and received responses as an HttpMessage object.
     * 
     * If you want to record history, set the instance variable
     * HttpRequest::recordHistory to TRUE.
     * 
     * The returned object references the last received response, use {@link
     * HttpMessage::getParentMessage} to access the data of previously sent
     * requests and received responses.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.15.0
     **/
    function getHistory(){}

    /**
     * Get the previously set request method.
     * 
     * @return int
     * @since PECL pecl_http >= 0.10.0
     **/
    function getMethod(){}

    /**
     * Get currently set options.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getOptions(){}

    /**
     * Get previously set POST data.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getPostFields(){}

    /**
     * Get all previously added POST files.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getPostFiles(){}

    /**
     * Get previously set PUT data.
     * 
     * @return string
     * @since PECL pecl_http >= 0.25.0
     **/
    function getPutData(){}

    /**
     * Get previously set put file.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getPutFile(){}

    /**
     * Get the current query data in form of an urlencoded query string.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getQueryData(){}

    /**
     * Get previously set raw post data.
     * 
     * @return string
     * @since PECL pecl_http 0.14.0-1.4.1
     **/
    function getRawPostData(){}

    /**
     * Get sent HTTP message.
     * 
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function getRawRequestMessage(){}

    /**
     * Get the entire HTTP response.
     * 
     * @return string
     * @since PECL pecl_http >= 0.21.0
     **/
    function getRawResponseMessage(){}

    /**
     * Get sent HTTP message.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response. Use {@link
     * HttpMessage::getParentMessage} to access the data of previously sent
     * requests within this request cycle.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.11.0
     **/
    function getRequestMessage(){}

    /**
     * Get the response body after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseBody(){}

    /**
     * Get the response code after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     * 
     * @return int
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseCode(){}

    /**
     * Get response cookie(s) after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     * 
     * @param int $flags {@link http_parse_cookie} flags
     * @param array $allowed_extras allowed keys treated as extra
     *   information instead of cookie names
     * @return array
     * @since PECL pecl_http >= 0.23.0
     **/
    function getResponseCookies($flags, $allowed_extras){}

    /**
     * * Get all response data after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseData(){}

    /**
     * Get response header(s) after the request has been sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     * 
     * @param string $name header to read; if empty, all response headers
     *   will be returned
     * @return mixed
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseHeader($name){}

    /**
     * Get response info after the request has been sent.
     * 
     * See {@link http_get} for a full list of returned info.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response.
     * 
     * @param string $name the info to read; if empty or omitted, an
     *   associative array containing all available info will be returned
     * @return mixed
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseInfo($name){}

    /**
     * Get the full response as HttpMessage object after the request has been
     * sent.
     * 
     * If redirects were allowed and several responses were received, the
     * data references the last received response. Use {@link
     * HttpMessage::getParentMessage} to access the data of previously
     * received responses within this request cycle.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.10.0
     **/
    function getResponseMessage(){}

    /**
     * Get the response status (i.e. the string after the response code)
     * after the message has been sent.
     * 
     * @return string
     * @since PECL pecl_http >= 0.23.0
     **/
    function getResponseStatus(){}

    /**
     * Get previously set SSL options.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getSslOptions(){}

    /**
     * Get the previously set request URL.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getUrl(){}

    /**
     * Reset all automatically received/sent cookies.
     * 
     * @param bool $session_only whether only session cookies should be
     *   reset (needs libcurl >= v7.15.4, else libcurl >= v7.14.1)
     * @return bool
     * @since PECL pecl_http >= 1.0.0
     **/
    function resetCookies($session_only){}

    /**
     * Send the HTTP request.
     * 
     * @return HttpMessage
     * @since PECL pecl_http >= 0.10.0
     **/
    function send(){}

    /**
     * Set the content type the post request should have.
     * 
     * @param string $content_type the content type of the request
     *   (primary/secondary)
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setContentType($content_type){}

    /**
     * Set custom cookies.
     * 
     * @param array $cookies an associative array as parameter containing
     *   cookie name/value pairs; if empty or omitted, all previously set
     *   cookies will be unset
     * @return bool
     * @since PECL pecl_http >= 0.12.0
     **/
    function setCookies($cookies){}

    /**
     * Set request header name/value pairs.
     * 
     * @param array $headers an associative array as parameter containing
     *   header name/value pairs; if empty or omitted, all previously set
     *   headers will be unset
     * @return bool
     * @since PECL pecl_http >= 0.12.0
     **/
    function setHeaders($headers){}

    /**
     * Set the request method.
     * 
     * @param int $request_method the request method to use
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setMethod($request_method){}

    /**
     * Set the request options to use.
     * 
     * @param array $options an associative array, which values will
     *   overwrite the currently set request options; if empty or omitted,
     *   the options of the HttpRequest object will be reset
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setOptions($options){}

    /**
     * Set the POST data entries, overwriting previously set POST data.
     * 
     * Affects only POST and custom requests.
     * 
     * @param array $post_data an associative array containing the post
     *   fields; if empty, the post data will be unset
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setPostFields($post_data){}

    /**
     * Set files to post, overwriting previously set post files.
     * 
     * Affects only POST and requests. Cannot be used with raw post data.
     * 
     * @param array $post_files an array containing the files to post; if
     *   empty, the post files will be unset
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setPostFiles($post_files){}

    /**
     * Set PUT data to send, overwriting previously set PUT data.
     * 
     * Affects only PUT requests.
     * 
     * Only either PUT data or PUT file can be used for each request. PUT
     * data has higher precedence and will be used even if a PUT file is set.
     * 
     * @param string $put_data the data to upload
     * @return bool
     * @since PECL pecl_http >= 0.25.0
     **/
    function setPutData($put_data){}

    /**
     * Set file to put. Affects only PUT requests.
     * 
     * @param string $file the path to the file to send; if empty or
     *   omitted the put file will be unset
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setPutFile($file){}

    /**
     * Set the URL query parameters to use, overwriting previously set query
     * parameters.
     * 
     * Affects any request types.
     * 
     * @param mixed $query_data a string or associative array parameter
     *   containing the pre-encoded query string or to be encoded query
     *   fields; if empty, the query data will be unset
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setQueryData($query_data){}

    /**
     * Set raw post data to send, overwriting previously set raw post data.
     * Don't forget to specify a content type. Affects only POST and custom
     * requests.
     * 
     * Only either post fields or raw post data can be used for each request.
     * Raw post data has higher precedence and will be used even if post
     * fields are set.
     * 
     * @param string $raw_post_data raw post data
     * @return bool
     * @since PECL pecl_http 0.14.0-1.4.1
     **/
    function setRawPostData($raw_post_data){}

    /**
     * Set SSL options.
     * 
     * @param array $options an associative array containing any SSL
     *   specific options; if empty or omitted, the SSL options will be reset
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setSslOptions($options){}

    /**
     * Set the request URL.
     * 
     * @param string $url the request url
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setUrl($url){}

    /**
     * Instantiate a new HttpRequest object.
     * 
     * @param string $url the target request url
     * @param int $request_method the request method to use
     * @param array $options an associative array with request options
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function __construct($url, $request_method, $options){}

}
class HttpRequestPool implements Iterator, Countable {
    /**
     * Attach an HttpRequest object to this HttpRequestPool.
     * 
     * @param HttpRequest $request an HttpRequest object not already
     *   attached to any HttpRequestPool object
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function attach($request){}

    /**
     * Detach an HttpRequest object from this HttpRequestPool.
     * 
     * @param HttpRequest $request an HttpRequest object attached to this
     *   HttpRequestPool object
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function detach($request){}

    /**
     * Get attached HttpRequest objects.
     * 
     * @return array
     * @since PECL pecl_http >= 0.16.0
     **/
    function getAttachedRequests(){}

    /**
     * Get attached HttpRequest objects that already have finished their
     * work.
     * 
     * @return array
     * @since PECL pecl_http >= 0.16.0
     **/
    function getFinishedRequests(){}

    /**
     * Detach all attached HttpRequest objects.
     * 
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function reset(){}

    /**
     * Send all attached HttpRequest objects in parallel.
     * 
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function send(){}

    /**
     * Returns TRUE until each request has finished its transaction.
     * 
     * @return bool
     * @since PECL pecl_http >= 0.15.0
     **/
    function socketPerform(){}

    /**
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function socketSelect(){}

    /**
     * Instantiate a new HttpRequestPool object. An HttpRequestPool is able
     * to send several HttpRequests in parallel.
     * 
     * Accepts virtually infinite optional parameters each referencing an
     * HttpRequest object.
     * 
     * @param HttpRequest $request HttpRequest object to attach
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function __construct($request){}

    /**
     * Clean up HttpRequestPool object.
     * 
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function __destruct(){}

}
class HttpResponse {
    /**
     * Capture script output.
     * 
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function capture(){}

    /**
     * Get current buffer size.
     * 
     * @return int
     * @since PECL pecl_http >= 0.10.0
     **/
    function getBufferSize(){}

    /**
     * Get current caching setting.
     * 
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function getCache(){}

    /**
     * Get current Cache-Control header setting.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getCacheControl(){}

    /**
     * Get current Content-Disposition setting.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getContentDisposition(){}

    /**
     * Get current Content-Type header setting.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getContentType(){}

    /**
     * Get the previously set data to be sent.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getData(){}

    /**
     * Get calculated or previously set custom ETag.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getETag(){}

    /**
     * Get the previously set file to be sent.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getFile(){}

    /**
     * Get current gzip'ing setting.
     * 
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function getGzip(){}

    /**
     * Get header(s) about to be sent.
     * 
     * @param string $name specifies the name of the header to read; if
     *   empty or omitted, an associative array with all headers will be
     *   returned
     * @return mixed
     * @since PECL pecl_http >= 0.12.0
     **/
    function getHeader($name){}

    /**
     * Get calculated or previously set custom Last-Modified date.
     * 
     * @return int
     * @since PECL pecl_http >= 0.12.0
     **/
    function getLastModified(){}

    /**
     * {@link http_get_request_body}.
     * 
     * @return string
     * @since PECL pecl_http >= 0.10.0
     **/
    function getRequestBody(){}

    /**
     * {@link http_get_request_body_stream}.
     * 
     * @return resource
     * @since PECL pecl_http >= 0.10.0
     **/
    function getRequestBodyStream(){}

    /**
     * {@link http_get_request_headers}.
     * 
     * @return array
     * @since PECL pecl_http >= 0.10.0
     **/
    function getRequestHeaders(){}

    /**
     * Get the previously set resource to be sent.
     * 
     * @return resource
     * @since PECL pecl_http >= 0.10.0
     **/
    function getStream(){}

    /**
     * Get the current throttle delay.
     * 
     * @return double
     * @since PECL pecl_http >= 0.10.0
     **/
    function getThrottleDelay(){}

    /**
     * Attempts to guess the content type of supplied payload through
     * libmagic.
     * 
     * If the attempt is successful, the guessed Content-Type will
     * automatically be set as response Content-Type.
     * 
     * @param string $magic_file specifies the magic.mime database to use
     * @param int $magic_mode flags for libmagic
     * @return string
     * @since PECL pecl_http >= 0.13.0
     **/
    function guessContentType($magic_file, $magic_mode){}

    /**
     * {@link http_redirect}.
     * 
     * @param string $url
     * @param array $params
     * @param bool $session
     * @param int $status
     * @return void
     * @since PECL pecl_http >= 0.10.0
     **/
    function redirect($url, $params, $session, $status){}

    /**
     * Finally send the entity.
     * 
     * A successful caching attempt will exit PHP, and write a log entry if
     * the http.log.cache is set.
     * 
     * @param bool $clean_ob whether to destroy all previously started
     *   output handlers and their buffers
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function send($clean_ob){}

    /**
     * Sets the send buffer size of the throttling mechanism.
     * 
     * @param int $bytes the chunk size in bytes
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setBufferSize($bytes){}

    /**
     * Whether it should be attempted to cache the entity.
     * 
     * This will result in necessary caching headers and checks of clients
     * If-Modified-Since and If-None-Match headers. If one of those headers
     * matches a 304 Not Modified status code will be issued.
     * 
     * @param bool $cache whether caching should be attempted
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setCache($cache){}

    /**
     * Define a custom Cache-Control header, usually being private or public;
     * 
     * @param string $control the primary cache control setting
     * @param int $max_age the max-age in seconds, suggesting how long the
     *   cache entry is valid on the client side
     * @param bool $must_revalidate whether the cached entity should be
     *   revalidated by the client for every request
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setCacheControl($control, $max_age, $must_revalidate){}

    /**
     * Set the Content-Disposition.
     * 
     * @param string $filename the file name the Save as... dialog should
     *   display
     * @param bool $inline if set to true and the user agent knows how to
     *   handle the content type, it will probably not cause the popup window
     *   to be shown
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setContentDisposition($filename, $inline){}

    /**
     * Set the Content-Type of the sent entity.
     * 
     * @param string $content_type the content type of the sent entity
     *   (primary/secondary)
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setContentType($content_type){}

    /**
     * Set the data to be sent.
     * 
     * @param mixed $data data to send
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setData($data){}

    /**
     * Set a custom ETag. Use this only if you know what you're doing.
     * 
     * @param string $etag unquoted string as parameter containing the ETag
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setETag($etag){}

    /**
     * Set the file to be sent.
     * 
     * @param string $file the path to the file to send
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setFile($file){}

    /**
     * Enable on-thy-fly gzip'ing of the sent entity.
     * 
     * @param bool $gzip whether GZip compression should be enabled
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setGzip($gzip){}

    /**
     * Send an HTTP header.
     * 
     * @param string $name the name of the header
     * @param mixed $value the value of the header; if not set, no header
     *   with this name will be sent
     * @param bool $replace whether an existing header should be replaced
     * @return bool
     * @since PECL pecl_http >= 0.12.0
     **/
    function setHeader($name, $value, $replace){}

    /**
     * Set a custom Last-Modified date.
     * 
     * @param int $timestamp Unix timestamp representing the last
     *   modification time of the sent entity
     * @return bool
     * @since PECL pecl_http >= 0.12.0
     **/
    function setLastModified($timestamp){}

    /**
     * Set the resource to be sent.
     * 
     * @param resource $stream already opened stream from which the data to
     *   send will be read
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setStream($stream){}

    /**
     * Sets the throttle delay.
     * 
     * @param float $seconds seconds to sleep after each chunk sent
     * @return bool
     * @since PECL pecl_http >= 0.10.0
     **/
    function setThrottleDelay($seconds){}

    /**
     * {@link http_send_status}.
     * 
     * @param int $status
     * @return bool
     * @since PECL pecl_http >= 0.12.0
     **/
    function status($status){}

}
class hw_api {
    /**
     * This function checks in an object or a whole hierarchy of objects. The
     * parameters array contains the required element 'objectIdentifier' and
     * the optional element 'version', 'comment', 'mode' and 'objectQuery'.
     * 'version' sets the version of the object. It consists of the major and
     * minor version separated by a period. If the version is not set, the
     * minor version is incremented. 'mode' can be one of the following
     * values: HW_API_CHECKIN_NORMAL Checks in and commits the object. The
     * object must be a document. HW_API_CHECKIN_RECURSIVE If the object to
     * check in is a collection, all children will be checked in recursively
     * if they are documents. Trying to check in a collection would result in
     * an error. HW_API_CHECKIN_FORCE_VERSION_CONTROL Checks in an object
     * even if it is not under version control.
     * HW_API_CHECKIN_REVERT_IF_NOT_CHANGED Check if the new version is
     * different from the last version. Unless this is the case the object
     * will be checked in. HW_API_CHECKIN_KEEP_TIME_MODIFIED Keeps the time
     * modified from the most recent object. HW_API_CHECKIN_NO_AUTO_COMMIT
     * The object is not automatically committed on check-in.
     * 
     * @param array $parameter
     * @return bool
     **/
    function checkin($parameter){}

    /**
     * This function checks out an object or a whole hierarchy of objects.
     * 
     * @param array $parameter The parameters array contains the required
     *   element 'objectIdentifier' and the optional element 'version',
     *   'mode' and 'objectQuery'. 'mode' can be one of the following values:
     *   HW_API_CHECKIN_NORMAL Checks out an object. The object must be a
     *   document. HW_API_CHECKIN_RECURSIVE If the object to check out is a
     *   collection, all children will be checked out recursively if they are
     *   documents. Trying to check out a collection would result in an
     *   error.
     * @return bool
     **/
    function checkout($parameter){}

    /**
     * Retrieves the children of a collection or the attributes of a
     * document. The children can be further filtered by specifying an object
     * query.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectIdentifier' and the optional elements
     *   'attributeSelector' and 'objectQuery'.
     * @return array
     **/
    function children($parameter){}

    /**
     * This function returns the content of a document as an object of type
     * hw_api_content.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectidentifier' and the optional element 'mode'. The
     *   mode can be one of the constants HW_API_CONTENT_ALLLINKS,
     *   HW_API_CONTENT_REACHABLELINKS or HW_API_CONTENT_PLAIN.
     *   HW_API_CONTENT_ALLLINKS means to insert all anchors even if the
     *   destination is not reachable. HW_API_CONTENT_REACHABLELINKS tells
     *   this method to insert only reachable links and HW_API_CONTENT_PLAIN
     *   will lead to document without any links.
     * @return HW_API_Content
     **/
    function content($parameter){}

    /**
     * This function will make a physical copy including the content if it
     * exists and returns the new object or an error object.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectIdentifier' and 'destinationParentIdentifier'. The
     *   optional parameter is 'attributeSelector'`
     * @return hw_api_content
     **/
    function copy($parameter){}

    /**
     * Returns statistics about database server.
     * 
     * @param array $parameter
     * @return hw_api_object
     **/
    function dbstat($parameter){}

    /**
     * Returns statistics about document cache server.
     * 
     * @param array $parameter
     * @return hw_api_object
     **/
    function dcstat($parameter){}

    /**
     * Retrieves all destination anchors of an object.
     * 
     * @param array $parameter The parameter array contains the required
     *   element 'objectIdentifier' and the optional elements
     *   'attributeSelector' and 'objectQuery'.
     * @return array
     **/
    function dstanchors($parameter){}

    /**
     * Retrieves the destination object pointed by the specified source
     * anchors. The destination object can either be a destination anchor or
     * a whole document.
     * 
     * @param array $parameter The parameters array contains the required
     *   element 'objectIdentifier' and the optional element
     *   'attributeSelector'.
     * @return hw_api_object
     **/
    function dstofsrcanchor($parameter){}

    /**
     * This functions searches for objects either by executing a key or/and
     * full text query. The found objects can further be filtered by an
     * optional object query. They are sorted by their importance. The second
     * search operation is relatively slow and its result can be limited to a
     * certain number of hits. This allows to perform an incremental search,
     * each returning just a subset of all found documents, starting at a
     * given index.
     * 
     * @param array $parameter The parameter array contains the 'keyquery'
     *   or/and 'fulltextquery' depending on who you would like to search.
     *   Optional parameters are 'objectquery', 'scope', 'languages' and
     *   'attributeselector'. In case of an incremental search the optional
     *   parameters 'startIndex', 'numberOfObjectsToGet' and 'exactMatchUnit'
     *   can be passed.
     * @return array
     **/
    function find($parameter){}

    /**
     * Returns statistics about fulltext server.
     * 
     * @param array $parameter
     * @return hw_api_object
     **/
    function ftstat($parameter){}

    /**
     * Returns statistics about Hyperwave server.
     * 
     * @param array $parameter
     * @return hw_api_object
     **/
    function hwstat($parameter){}

    /**
     * Logs into the Hyperwave Server.
     * 
     * @param array $parameter The parameter array must contain the
     *   elements 'username' and 'password'.
     * @return bool
     **/
    function identify($parameter){}

    /**
     * Returns information about server configuration.
     * 
     * @param array $parameter
     * @return array
     **/
    function info($parameter){}

    /**
     * Insert a new object. The object type can be user, group, document or
     * anchor. Depending on the type other object attributes has to be set.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'object' and 'content' (if the object is a document) and
     *   the optional parameters 'parameters', 'mode' and
     *   'attributeSelector'. The 'object' must contain all attributes of the
     *   object. 'parameters' is an object as well holding further attributes
     *   like the destination (attribute key is 'Parent'). 'content' is the
     *   content of the document. 'mode' can be a combination of the
     *   following flags: HW_API_INSERT_NORMAL The object in inserted into
     *   the server. HW_API_INSERT_FORCE_VERSION_CONTROL
     *   HW_API_INSERT_AUTOMATIC_CHECKOUT HW_API_INSERT_PLAIN
     *   HW_API_INSERT_KEEP_TIME_MODIFIED HW_API_INSERT_DELAY_INDEXING
     * @return hw_api_object
     **/
    function insert($parameter){}

    /**
     * This function is a shortcut for {@link hwapi_insert}. It inserts an
     * object of type anchor and sets some of the attributes required for an
     * anchor.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'object' and 'documentIdentifier' and the optional elements
     *   'destinationIdentifier', 'parameter', 'hint' and
     *   'attributeSelector'. The 'documentIdentifier' specifies the document
     *   where the anchor shall be inserted. The target of the anchor is set
     *   in 'destinationIdentifier' if it already exists. If the target does
     *   not exists the element 'hint' has to be set to the name of object
     *   which is supposed to be inserted later. Once it is inserted the
     *   anchor target is resolved automatically.
     * @return hw_api_object
     **/
    function insertanchor($parameter){}

    /**
     * This function is a shortcut for {@link hwapi_insert}. It inserts an
     * object of type collection and sets some of the attributes required for
     * a collection.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'object' and 'parentIdentifier' and the optional elements
     *   'parameter' and 'attributeSelector'. See {@link hwapi_insert} for
     *   the meaning of each element.
     * @return hw_api_object
     **/
    function insertcollection($parameter){}

    /**
     * This function is a shortcut for {@link hwapi_insert}. It inserts an
     * object with content and sets some of the attributes required for a
     * document.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'object', 'parentIdentifier' and 'content' and the optional
     *   elements 'mode', 'parameter' and 'attributeSelector'. See {@link
     *   hwapi_insert} for the meaning of each element.
     * @return hw_api_object
     **/
    function insertdocument($parameter){}

    /**
     * Creates a link to an object. Accessing this link is like accessing the
     * object to links points to.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectIdentifier' and 'destinationParentIdentifier'.
     *   'destinationParentIdentifier' is the target collection.
     * @return bool
     **/
    function link($parameter){}

    /**
     * Locks an object for exclusive editing by the user calling this
     * function. The object can be only unlocked by this user or the system
     * user.
     * 
     * @param array $parameter The parameter array contains the required
     *   element 'objectIdentifier' and the optional parameters 'mode' and
     *   'objectquery'. 'mode' determines how an object is locked.
     *   HW_API_LOCK_NORMAL means, an object is locked until it is unlocked.
     *   HW_API_LOCK_RECURSIVE is only valid for collection and locks all
     *   objects within the collection and possible subcollections.
     *   HW_API_LOCK_SESSION means, an object is locked only as long as the
     *   session is valid.
     * @return bool
     **/
    function lock($parameter){}

    /**
     * Moves object between collections.
     * 
     * @param array $parameter
     * @return bool
     **/
    function move($parameter){}

    /**
     * This function retrieves the attribute information of an object of any
     * version. It will not return the document content.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectIdentifier' and the optional elements
     *   'attributeSelector' and 'version'.
     * @return hw_api_object
     **/
    function object($parameter){}

    /**
     * This function retrieves an object the specified anchor belongs to.
     * 
     * @param array $parameter The parameter array contains the required
     *   element 'objectIdentifier' and the optional element
     *   'attributeSelector'.
     * @return hw_api_object
     **/
    function objectbyanchor($parameter){}

    /**
     * Retrieves the parents of an object. The parents can be further
     * filtered by specifying an object query.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectidentifier' and the optional elements
     *   'attributeselector' and 'objectquery'.
     * @return array
     **/
    function parents($parameter){}

    /**
     * Removes an object from the specified parent. Collections will be
     * removed recursively.
     * 
     * @param array $parameter You can pass an optional object query to
     *   remove only those objects which match the query. An object will be
     *   deleted physically if it is the last instance. The parameter array
     *   contains the required elements 'objectidentifier' and
     *   'parentidentifier'. If you want to remove a user or group
     *   'parentidentifier' can be skipped. The optional parameter 'mode'
     *   determines how the deletion is performed. In normal mode the object
     *   will not be removed physically until all instances are removed. In
     *   physical mode all instances of the object will be deleted
     *   immediately. In removelinks mode all references to and from the
     *   objects will be deleted as well. In nonrecursive the deletion is not
     *   performed recursive. Removing a collection which is not empty will
     *   cause an error.
     * @return bool
     **/
    function remove($parameter){}

    /**
     * Replaces the attributes and the content of an object.
     * 
     * @param array $parameter The parameter array contains the required
     *   elements 'objectIdentifier' and 'object' and the optional parameters
     *   'content', 'parameters', 'mode' and 'attributeSelector'.
     *   'objectIdentifier' contains the object to be replaced. 'object'
     *   contains the new object. 'content' contains the new content.
     *   'parameters' contain extra information for HTML documents.
     *   HTML_Language is the letter abbreviation of the language of the
     *   title. HTML_Base sets the base attribute of the HTML document.
     *   'mode' can be a combination of the following flags:
     *   HW_API_REPLACE_NORMAL The object on the server is replace with the
     *   object passed. HW_API_REPLACE_FORCE_VERSION_CONTROL
     *   HW_API_REPLACE_AUTOMATIC_CHECKOUT HW_API_REPLACE_AUTOMATIC_CHECKIN
     *   HW_API_REPLACE_PLAIN HW_API_REPLACE_REVERT_IF_NOT_CHANGED
     *   HW_API_REPLACE_KEEP_TIME_MODIFIED
     * @return hw_api_object
     **/
    function replace($parameter){}

    /**
     * Commits a version of a document. The committed version is the one
     * which is visible to users with read access. By default the last
     * version is the committed version.
     * 
     * @param array $parameter
     * @return hw_api_object
     **/
    function setcommittedversion($parameter){}

    /**
     * Retrieves all source anchors of an object.
     * 
     * @param array $parameter The parameter array contains the required
     *   element 'objectIdentifier' and the optional elements
     *   'attributeSelector' and 'objectQuery'.
     * @return array
     **/
    function srcanchors($parameter){}

    /**
     * Retrieves all the source anchors pointing to the specified
     * destination. The destination object can either be a destination anchor
     * or a whole document.
     * 
     * @param array $parameter The parameters array contains the required
     *   element 'objectIdentifier' and the optional element
     *   'attributeSelector' and 'objectQuery'. The function returns an array
     *   of objects or an error.
     * @return array
     **/
    function srcsofdst($parameter){}

    /**
     * Unlocks a locked object. Only the user who has locked the object and
     * the system user may unlock an object.
     * 
     * @param array $parameter The parameter array contains the required
     *   element 'objectIdentifier' and the optional parameters 'mode' and
     *   'objectquery'. The meaning of 'mode' is the same as in function
     *   {@link hwapi_lock}.
     * @return bool
     **/
    function unlock($parameter){}

    /**
     * Returns the own user object.
     * 
     * @param array $parameter
     * @return hw_api_object
     **/
    function user($parameter){}

    /**
     * Returns a list of all logged in users.
     * 
     * @param array $parameter
     * @return array
     **/
    function userlist($parameter){}

}
class hw_api_attribute {
    /**
     * Returns the name of the attribute.
     * 
     * @return string
     **/
    function key(){}

    /**
     * Returns the value in the given language of the attribute.
     * 
     * @param string $language
     * @return string
     **/
    function langdepvalue($language){}

    /**
     * Gets the value of the attribute.
     * 
     * @return string
     **/
    function value(){}

    /**
     * Gets all values of the attribute.
     * 
     * @return array
     **/
    function values(){}

}
class hw_api_content {
    /**
     * Returns the mimetype of the content.
     * 
     * @return string
     **/
    function mimetype(){}

    /**
     * Reads {@link len} bytes from the content into the given buffer.
     * 
     * @param string $buffer
     * @param int $len Number of bytes to read.
     * @return string
     **/
    function read($buffer, $len){}

}
class hw_api_error {
    /**
     * Returns the number of error reasons.
     * 
     * @return int
     **/
    function count(){}

    /**
     * Returns the first error reason.
     * 
     * @return HW_API_Reason
     **/
    function reason(){}

}
class hw_api_object {
    /**
     * Clones the attributes of an object.
     * 
     * @param array $parameter
     * @return bool
     **/
    function assign($parameter){}

    /**
     * Checks whether an attribute is editable.
     * 
     * @param array $parameter
     * @return bool
     **/
    function attreditable($parameter){}

    /**
     * Returns the number of attributes.
     * 
     * @param array $parameter
     * @return int
     **/
    function count($parameter){}

    /**
     * Adds an attribute to the object.
     * 
     * @param HW_API_Attribute $attribute
     * @return bool
     **/
    function insert($attribute){}

    /**
     * Removes the attribute with the given name.
     * 
     * @param string $name The attribute name.
     * @return bool
     **/
    function remove($name){}

    /**
     * Returns the title attribute.
     * 
     * @param array $parameter
     * @return string
     **/
    function title($parameter){}

    /**
     * Returns value of an attribute.
     * 
     * @param string $name The attribute name.
     * @return string
     **/
    function value($name){}

}
class hw_api_reason {
    /**
     * Returns the description of a reason
     * 
     * @return string
     **/
    function description(){}

    /**
     * Returns the type of a reason.
     * 
     * @return HW_API_Reason
     **/
    function type(){}

}
/**
 * The Imagick class has the ability to hold and operate on multiple
 * images simultaneously. This is achieved through an internal stack.
 * There is always an internal pointer that points at the current image.
 * Some functions operate on all images in the Imagick class, but most
 * operate only on the current image in the internal stack. As a
 * convention, method names can contain the word Image to denote they
 * affect only the current image in the stack.
 * 
 * Because there are so many methods, here is a handy list of methods,
 * somewhat reduced to their general purpose:
 **/
class Imagick implements Iterator, Traversable {
    /**
     * Adds an adaptive blur filter to image. The intensity of an adaptive
     * blur depends is dramatically decreased at edge of the image, whereas a
     * standard blur is uniform across the image.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel. Provide a value of 0 and the radius will
     *   be chosen automagically.
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels.
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function adaptiveBlurImage($radius, $sigma, $channel){}

    /**
     * Adaptively resize image with data-dependent triangulation. Avoids
     * blurring across sharp color changes. Most useful when used to shrink
     * images slightly to a slightly smaller "web size"; may not look good
     * when a full-sized image is adaptively resized to a thumbnail.
     * 
     * @param int $columns The number of columns in the scaled image.
     * @param int $rows The number of rows in the scaled image.
     * @param bool $bestfit Whether to fit the image inside a bounding box.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function adaptiveResizeImage($columns, $rows, $bestfit){}

    /**
     * Adaptively sharpen the image by sharpening more intensely near image
     * edges and less intensely far from edges.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel. Use 0 for auto-select.
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels.
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function adaptiveSharpenImage($radius, $sigma, $channel){}

    /**
     * Selects an individual threshold for each pixel based on the range of
     * intensity values in its local neighborhood. This allows for
     * thresholding of an image whose global intensity histogram doesn't
     * contain distinctive peaks.
     * 
     * @param int $width Width of the local neighborhood.
     * @param int $height Height of the local neighborhood.
     * @param int $offset The mean offset
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function adaptiveThresholdImage($width, $height, $offset){}

    /**
     * Adds new image to Imagick object from the current position of the
     * source object. After the operation iterator position is moved at the
     * end of the list.
     * 
     * @param Imagick $source The source Imagick object
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function addImage($source){}

    /**
     * Adds random noise to the image.
     * 
     * @param int $noise_type The type of the noise. Refer to this list of
     *   noise constants.
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function addNoiseImage($noise_type, $channel){}

    /**
     * Transforms an image as dictated by the affine matrix.
     * 
     * @param ImagickDraw $matrix The affine matrix
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function affineTransformImage($matrix){}

    /**
     * This method animates the image onto a local or remote X server. This
     * method is not available on Windows.
     * 
     * @param string $x_server X server address
     * @return bool
     **/
    function animateImages($x_server){}

    /**
     * Annotates an image with text.
     * 
     * @param ImagickDraw $draw_settings The ImagickDraw object that
     *   contains settings for drawing the text
     * @param float $x Horizontal offset in pixels to the left of text
     * @param float $y Vertical offset in pixels to the baseline of text
     * @param float $angle The angle at which to write the text
     * @param string $text The string to draw
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function annotateImage($draw_settings, $x, $y, $angle, $text){}

    /**
     * Append a set of images into one larger image.
     * 
     * @param bool $stack The direction of the stack (top to bottom or
     *   bottom to top)
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function appendImages($stack){}

    /**
     * Average a set of images.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function averageImages(){}

    /**
     * Is like Imagick::thresholdImage() but forces all pixels below the
     * threshold into black while leaving all pixels above the threshold
     * unchanged.
     * 
     * @param mixed $threshold The threshold below which everything turns
     *   black
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function blackThresholdImage($threshold){}

    /**
     * Adds blur filter to image. Optional third parameter to blur a specific
     * channel.
     * 
     * @param float $radius Blur radius
     * @param float $sigma Standard deviation
     * @param int $channel The Channeltype constant. When not supplied, all
     *   channels are blurred.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function blurImage($radius, $sigma, $channel){}

    /**
     * Surrounds the image with a border of the color defined by the
     * bordercolor ImagickPixel object.
     * 
     * @param mixed $bordercolor ImagickPixel object or a string containing
     *   the border color
     * @param int $width Border width
     * @param int $height Border height
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function borderImage($bordercolor, $width, $height){}

    /**
     * Simulates a charcoal drawing.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function charcoalImage($radius, $sigma){}

    /**
     * Removes a region of an image and collapses the image to occupy the
     * removed portion.
     * 
     * @param int $width Width of the chopped area
     * @param int $height Height of the chopped area
     * @param int $x X origo of the chopped area
     * @param int $y Y origo of the chopped area
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function chopImage($width, $height, $x, $y){}

    /**
     * Clears all resources associated to Imagick object
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clear(){}

    /**
     * Clips along the first path from the 8BIM profile, if present.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clipImage(){}

    /**
     * Clips along the named paths from the 8BIM profile, if present. Later
     * operations take effect inside the path. It may be a number if preceded
     * with #, to work on a numbered path, e.g., "#1" to use the first path.
     * 
     * @param string $pathname The name of the path
     * @param bool $inside If later operations take effect inside clipping
     *   path. Otherwise later operations take effect outside clipping path.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clipPathImage($pathname, $inside){}

    /**
     * Replaces colors in the image from a color lookup table. Optional
     * second parameter to replace colors in a specific channel.
     * 
     * @param Imagick $lookup_table Imagick object containing the color
     *   lookup table
     * @param float $channel The Channeltype constant. When not supplied,
     *   default channels are replaced.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clutImage($lookup_table, $channel){}

    /**
     * Composites a set of images while respecting any page offsets and
     * disposal methods. GIF, MIFF, and MNG animation sequences typically
     * start with an image background and each subsequent image varies in
     * size and offset. Returns a new Imagick object where each image in the
     * sequence is the same size as the first and composited with the next
     * image in the sequence.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function coalesceImages(){}

    /**
     * Changes the color value of any pixel that matches target and is an
     * immediate neighbor.
     * 
     * @param mixed $fill ImagickPixel object containing the fill color
     * @param float $fuzz The amount of fuzz. For example, set fuzz to 10
     *   and the color red at intensities of 100 and 102 respectively are now
     *   interpreted as the same color for the purposes of the floodfill.
     * @param mixed $bordercolor ImagickPixel object containing the border
     *   color
     * @param int $x X start position of the floodfill
     * @param int $y Y start position of the floodfill
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function colorFloodfillImage($fill, $fuzz, $bordercolor, $x, $y){}

    /**
     * Blends the fill color with each pixel in the image.
     * 
     * @param mixed $colorize ImagickPixel object or a string containing
     *   the colorize color
     * @param mixed $opacity ImagickPixel object or an float containing the
     *   opacity value. 1.0 is fully opaque and 0.0 is fully transparent.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function colorizeImage($colorize, $opacity){}

    /**
     * Combines one or more images into a single image. The grayscale value
     * of the pixels of each image in the sequence is assigned in order to
     * the specified channels of the combined image. The typical ordering
     * would be image 1 => Red, 2 => Green, 3 => Blue, etc.
     * 
     * @param int $channelType Provide any channel constant that is valid
     *   for your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function combineImages($channelType){}

    /**
     * Adds a comment to your image.
     * 
     * @param string $comment The comment to add
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function commentImage($comment){}

    /**
     * Compares one or more images and returns the difference image.
     * 
     * @param Imagick $image Imagick object containing the image to
     *   compare.
     * @param int $channelType Provide any channel constant that is valid
     *   for your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @param int $metricType One of the metric type constants.
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function compareImageChannels($image, $channelType, $metricType){}

    /**
     * Compares each image with the next in a sequence and returns the
     * maximum bounding region of any pixel differences it discovers.
     * 
     * @param int $method One of the layer method constants.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function compareImageLayers($method){}

    /**
     * Returns an array containing a reconstructed image and the difference
     * between images.
     * 
     * @param Imagick $compare An image to compare to.
     * @param int $metric Provide a valid metric type constant. Refer to
     *   this list of metric constants.
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function compareImages($compare, $metric){}

    /**
     * Composite one image onto another at the specified offset.
     * 
     * @param Imagick $composite_object Imagick object which holds the
     *   composite image
     * @param int $composite Composite operator. See Composite Operator
     *   Constants
     * @param int $x The column offset of the composited image
     * @param int $y The row offset of the composited image
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function compositeImage($composite_object, $composite, $x, $y, $channel){}

    /**
     * Enhances the intensity differences between the lighter and darker
     * elements of the image. Set sharpen to a value other than 0 to increase
     * the image contrast otherwise the contrast is reduced.
     * 
     * @param bool $sharpen The sharpen value
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function contrastImage($sharpen){}

    /**
     * Enhances the contrast of a color image by adjusting the pixels color
     * to span the entire range of colors available.
     * 
     * @param float $black_point The black point.
     * @param float $white_point The white point.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Imagick::CHANNEL_ALL.
     *   Refer to this list of channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function contrastStretchImage($black_point, $white_point, $channel){}

    /**
     * Applies a custom convolution kernel to the image.
     * 
     * @param array $kernel The convolution kernel
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function convolveImage($kernel, $channel){}

    /**
     * Extracts a region of the image.
     * 
     * @param int $width The width of the crop
     * @param int $height The height of the crop
     * @param int $x The X coordinate of the cropped region's top left
     *   corner
     * @param int $y The Y coordinate of the cropped region's top left
     *   corner
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function cropImage($width, $height, $x, $y){}

    /**
     * Creates a fixed size thumbnail by first scaling the image up or down
     * and cropping a specified area from the center.
     * 
     * @param int $width The width of the thumbnail
     * @param int $height The Height of the thumbnail
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function cropThumbnailImage($width, $height){}

    /**
     * Returns reference to the current imagick object with image pointer at
     * the correct sequence.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function current(){}

    /**
     * Displaces an image's colormap by a given number of positions. If you
     * cycle the colormap a number of times you can produce a psychedelic
     * effect.
     * 
     * @param int $displace The amount to displace the colormap.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function cycleColormapImage($displace){}

    /**
     * Deciphers image that has been enciphered before. The image must be
     * enciphered using {@link Imagick::encipherImage}.
     * 
     * @param string $passphrase The passphrase
     * @return bool
     **/
    function decipherImage($passphrase){}

    /**
     * Compares each image with the next in a sequence and returns the
     * maximum bounding region of any pixel differences it discovers.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function deconstructImages(){}

    /**
     * This method can be used to remove skew from for example scanned images
     * where the paper was not properly placed on the scanning surface.
     * 
     * @param float $threshold Deskew threshold
     * @return void
     **/
    function deskewImage($threshold){}

    /**
     * Reduces the speckle noise in an image while preserving the edges of
     * the original image.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function despeckleImage(){}

    /**
     * Destroys the Imagick object and frees all resources associated with
     * it.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function destroy(){}

    /**
     * This method displays an image on a X server.
     * 
     * @param string $servername The X server name
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function displayImage($servername){}

    /**
     * Displays an image or image sequence on a X server.
     * 
     * @param string $servername The X server name
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function displayImages($servername){}

    /**
     * Distorts an image using various distortion methods, by mapping color
     * lookups of the source image to a new destination image usually of the
     * same size as the source image, unless 'bestfit' is set to .
     * 
     * If 'bestfit' is enabled, and distortion allows it, the destination
     * image is adjusted to ensure the whole source 'image' will just fit
     * within the final destination image, which will be sized and offset
     * accordingly. Also in many cases the virtual offset of the source image
     * will be taken into account in the mapping.
     * 
     * @param int $method The method of image distortion. See distortion
     *   constants
     * @param array $arguments The arguments for this distortion method
     * @param bool $bestfit Attempt to resize destination to fit distorted
     *   source
     * @return bool
     * @since PECL imagick 2.0.1
     **/
    function distortImage($method, $arguments, $bestfit){}

    /**
     * Renders the ImagickDraw object on the current image.
     * 
     * @param ImagickDraw $draw The drawing operations to render on the
     *   image.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function drawImage($draw){}

    /**
     * Enhance edges within the image with a convolution filter of the given
     * radius. Use radius 0 and it will be auto-selected.
     * 
     * @param float $radius The radius of the operation.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function edgeImage($radius){}

    /**
     * Returns a grayscale image with a three-dimensional effect. We convolve
     * the image with a Gaussian operator of the given radius and standard
     * deviation (sigma). For reasonable results, radius should be larger
     * than sigma. Use a radius of 0 and it will choose a suitable radius for
     * you.
     * 
     * @param float $radius The radius of the effect
     * @param float $sigma The sigma of the effect
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function embossImage($radius, $sigma){}

    /**
     * Converts plain pixels to enciphered pixels. The image is not readable
     * until it has been deciphered using {@link Imagick::decipherImage}
     * 
     * @param string $passphrase The passphrase
     * @return bool
     **/
    function encipherImage($passphrase){}

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function enhanceImage(){}

    /**
     * Equalizes the image histogram.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function equalizeImage(){}

    /**
     * Applys an arithmetic, relational, or logical expression to an image.
     * Use these operators to lighten or darken an image, to increase or
     * decrease contrast in an image, or to produce the "negative" of an
     * image.
     * 
     * @param int $op The operator
     * @param float $constant The value of the operator
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function evaluateImage($op, $constant, $channel){}

    /**
     * Exports image pixels into an array. The map defines the ordering of
     * the exported pixels. The size of the returned array is width * height
     * * strlen(map).
     * 
     * @param int $x X-coordinate of the exported area
     * @param int $y Y-coordinate of the exported area
     * @param int $width Width of the exported aread
     * @param int $height Height of the exported area
     * @param string $map Ordering of the exported pixels. For example
     *   "RGB". Valid characters for the map are R, G, B, A, O, C, Y, M, K, I
     *   and P.
     * @param int $STORAGE Refer to this list of pixel type constants
     * @return array
     **/
    function exportImagePixels($x, $y, $width, $height, $map, $STORAGE){}

    /**
     * Comfortability method for setting image size. The method sets the
     * image size and allows setting x,y coordinates where the new area
     * begins.
     * 
     * @param int $width The new width
     * @param int $height The new height
     * @param int $x X position for the new size
     * @param int $y Y position for the new size
     * @return bool
     **/
    function extentImage($width, $height, $x, $y){}

    /**
     * Merges a sequence of images. This is useful for combining Photoshop
     * layers into a single image.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function flattenImages(){}

    /**
     * Creates a vertical mirror image by reflecting the pixels around the
     * central x-axis.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function flipImage(){}

    /**
     * Changes the color value of any pixel that matches target and is an
     * immediate neighbor. This method is a replacement for deprecated {@link
     * Imagick::paintFloodFillImage}.
     * 
     * @param mixed $fill ImagickPixel object or a string containing the
     *   fill color
     * @param float $fuzz
     * @param mixed $target ImagickPixel object or a string containing the
     *   target color to paint
     * @param int $x X start position of the floodfill
     * @param int $y Y start position of the floodfill
     * @param bool $invert If paints any pixel that does not match the
     *   target color.
     * @param int $channel
     * @return bool
     **/
    function floodFillPaintImage($fill, $fuzz, $target, $x, $y, $invert, $channel){}

    /**
     * Creates a horizontal mirror image by reflecting the pixels around the
     * central y-axis.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function flopImage(){}

    /**
     * Adds a simulated three-dimensional border around the image. The width
     * and height specify the border width of the vertical and horizontal
     * sides of the frame. The inner and outer bevels indicate the width of
     * the inner and outer shadows of the frame.
     * 
     * @param mixed $matte_color ImagickPixel object or a string
     *   representing the matte color
     * @param int $width The width of the border
     * @param int $height The height of the border
     * @param int $inner_bevel The inner bevel width
     * @param int $outer_bevel The outer bevel width
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function frameImage($matte_color, $width, $height, $inner_bevel, $outer_bevel){}

    /**
     * Applies an arithmetic, relational, or logical expression to an image.
     * Use these operators to create lighter or darker versions of an image,
     * to increase or decrease contrast in an image, or to negate the image
     * colors.
     * 
     * @param integer $function Refer to this list of function constants
     * @param array $arguments Array of arguments to pass to this function.
     * @return boolean
     **/
    function functionImage($function, $arguments){}

    /**
     * Evaluate expression for each pixel in the image. Consult The Fx
     * Special Effects Image Operator for more information.
     * 
     * @param string $expression The expression.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function fxImage($expression, $channel){}

    /**
     * Gamma-corrects an image. The same image viewed on different devices
     * will have perceptual differences in the way the image's intensities
     * are represented on the screen. Specify individual gamma levels for the
     * red, green, and blue channels, or adjust all three with the gamma
     * parameter. Values typically range from 0.8 to 2.3.
     * 
     * @param float $gamma The amount of gamma-correction.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function gammaImage($gamma, $channel){}

    /**
     * Blurs an image. We convolve the image with a Gaussian operator of the
     * given radius and standard deviation (sigma). For reasonable results,
     * the radius should be larger than sigma. Use a radius of 0 and selects
     * a suitable radius for you.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel.
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function gaussianBlurImage($radius, $sigma, $channel){}

    /**
     * Gets the object compression type.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getCompression(){}

    /**
     * Gets the object compression quality.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getCompressionQuality(){}

    /**
     * Returns the ImageMagick API copyright as a string.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getCopyright(){}

    /**
     * Returns the filename associated with an image sequence.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getFilename(){}

    /**
     * Returns the objects font property.
     * 
     * @return string
     * @since PECL imagick 2.1.0
     **/
    function getFont(){}

    /**
     * Returns the format of the Imagick object.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getFormat(){}

    /**
     * Gets the global gravity property for the Imagick object.
     * 
     * @return bool
     **/
    function getGravity(){}

    /**
     * Returns the ImageMagick home URL.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getHomeURL(){}

    /**
     * Returns a new Imagick object with the current image sequence.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function getImage(){}

    /**
     * Gets the image alpha channel value. The returned value is one of the
     * alpha channel constants.
     * 
     * @return int
     **/
    function getImageAlphaChannel(){}

    /**
     * Returns the image background color.
     * 
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getImageBackgroundColor(){}

    /**
     * Implements direct to memory image formats. It returns the image
     * sequence as a string. The format of the image determines the format of
     * the returned blob (GIF, JPEG, PNG, etc.). To return a different image
     * format, use Imagick::setImageFormat().
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageBlob(){}

    /**
     * Returns the chromaticity blue primary point for the image.
     * 
     * @param float $x The chromaticity blue primary x-point.
     * @param float $y The chromaticity blue primary y-point.
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageBluePrimary($x, $y){}

    /**
     * Returns the image border color.
     * 
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getImageBorderColor(){}

    /**
     * Gets the depth for a particular image channel.
     * 
     * @param int $channel
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageChannelDepth($channel){}

    /**
     * Compares one or more image channels of an image to a reconstructed
     * image and returns the specified distortion metric.
     * 
     * @param Imagick $reference Imagick object to compare to.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @param int $metric One of the metric type constants.
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getImageChannelDistortion($reference, $channel, $metric){}

    /**
     * Compares one or more image channels of an image to a reconstructed
     * image and returns the specified distortion metrics
     * 
     * @param Imagick $reference Imagick object containing the reference
     *   image
     * @param int $metric Refer to this list of metric type constants.
     * @param int $channel
     * @return double
     **/
    function getImageChannelDistortions($reference, $metric, $channel){}

    /**
     * Gets the extrema for one or more image channels. Return value is an
     * associative array with the keys "minima" and "maxima".
     * 
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageChannelExtrema($channel){}

    /**
     * Get the kurtosis and skewness of a specific channel.
     * 
     * @param int $channel
     * @return array
     **/
    function getImageChannelKurtosis($channel){}

    /**
     * Gets the mean and standard deviation of one or more image channels.
     * Return value is an associative array with the keys "mean" and
     * "standardDeviation".
     * 
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageChannelMean($channel){}

    /**
     * Gets the range for one or more image channels.
     * 
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.2.1
     **/
    function getImageChannelRange($channel){}

    /**
     * Returns statistics for each channel in the image. The statistics
     * include the channel depth, its minima and maxima, the mean, and the
     * standard deviation. You can access the red channel mean, for example,
     * like this:
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageChannelStatistics(){}

    /**
     * Returns the image clip mask. The clip mask is an Imagick object
     * containing the clip mask.
     * 
     * @return Imagick
     **/
    function getImageClipMask(){}

    /**
     * Returns the color of the specified colormap index.
     * 
     * @param int $index The offset into the image colormap.
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getImageColormapColor($index){}

    /**
     * Gets the number of unique colors in the image.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageColors(){}

    /**
     * Gets the image colorspace.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageColorspace(){}

    /**
     * Returns the composite operator associated with the image.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageCompose(){}

    /**
     * Gets the current image's compression type.
     * 
     * @return int
     * @since PECL imagick 2.2.2
     **/
    function getImageCompression(){}

    /**
     * Gets the image delay.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageDelay(){}

    /**
     * Gets the image depth.
     * 
     * @return int
     **/
    function getImageDepth(){}

    /**
     * Gets the image disposal method.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageDispose(){}

    /**
     * Compares an image to a reconstructed image and returns the specified
     * distortion metric.
     * 
     * @param MagickWand $reference Imagick object to compare to.
     * @param int $metric One of the metric type constants.
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getImageDistortion($reference, $metric){}

    /**
     * Gets the extrema for the image. Returns an associative array with the
     * keys "min" and "max".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageExtrema(){}

    /**
     * Returns the filename of a particular image in a sequence.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageFilename(){}

    /**
     * Returns the format of a particular image in a sequence.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageFormat(){}

    /**
     * Gets the image gamma.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getImageGamma(){}

    /**
     * Returns the width and height as an associative array.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageGeometry(){}

    /**
     * Gets the current gravity value of the image. Unlike {@link
     * Imagick::getGravity}, this method returns the gravity defined for the
     * current image sequence.
     * 
     * @return bool
     **/
    function getImageGravity(){}

    /**
     * Returns the chromaticity green primary point. Returns an array with
     * the keys "x" and "y".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageGreenPrimary(){}

    /**
     * Returns the image height.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageHeight(){}

    /**
     * Returns the image histogram as an array of ImagickPixel objects.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageHistogram(){}

    /**
     * Returns the index of the current active image within the Imagick
     * object. This method has been deprecated. See Imagick::getIteratorIndex
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageIndex(){}

    /**
     * Gets the image interlace scheme.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageInterlaceScheme(){}

    /**
     * Returns the interpolation method for the specified image. The method
     * is one of the Imagick::INTERPOLATE_* constants.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageInterpolateMethod(){}

    /**
     * Gets the image iterations.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageIterations(){}

    /**
     * Returns the image length in bytes
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageLength(){}

    /**
     * Returns a string containing the ImageMagick license
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageMagickLicense(){}

    /**
     * Returns if the image has a matte channel otherwise false.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageMatte(){}

    /**
     * Returns the image matte color.
     * 
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getImageMatteColor(){}

    /**
     * Gets the image orientation. The return value is one of the orientation
     * constants.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageOrientation(){}

    /**
     * Returns the page geometry associated with the image in an array with
     * the keys "width", "height", "x", and "y".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImagePage(){}

    /**
     * Returns the color of the specified pixel.
     * 
     * @param int $x The x-coordinate of the pixel
     * @param int $y The y-coordinate of the pixel
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getImagePixelColor($x, $y){}

    /**
     * Returns the named image profile.
     * 
     * @param string $name The name of the profile to return.
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageProfile($name){}

    /**
     * Returns all associated profiles that match the pattern. If is passed
     * as second parameter only the profile names are returned.
     * 
     * @param string $pattern The pattern for profile names.
     * @param bool $only_names Whether to return only profile names. If
     *   then values are returned as well
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageProfiles($pattern, $only_names){}

    /**
     * Returns all associated properties that match the pattern. If is passed
     * as second parameter only the property names are returned.
     * 
     * @param string $pattern The pattern for property names.
     * @param bool $only_names Whether to return only property names. If
     *   then also the values are returned
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageProperties($pattern, $only_names){}

    /**
     * Returns the named image property.
     * 
     * @param string $name name of the property (for example Exif:DateTime)
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageProperty($name){}

    /**
     * Returns the chromaticity red primary point as an array with the keys
     * "x" and "y".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageRedPrimary(){}

    /**
     * Extracts a region of the image and returns it as a new Imagick object.
     * 
     * @param int $width The width of the extracted region.
     * @param int $height The height of the extracted region.
     * @param int $x X-coordinate of the top-left corner of the extracted
     *   region.
     * @param int $y Y-coordinate of the top-left corner of the extracted
     *   region.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function getImageRegion($width, $height, $x, $y){}

    /**
     * Gets the image rendering intent.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageRenderingIntent(){}

    /**
     * Gets the image X and Y resolution.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageResolution(){}

    /**
     * Implements direct to memory image formats. It returns all image
     * sequences as a string. The format of the image determines the format
     * of the returned blob (GIF, JPEG, PNG, etc.). To return a different
     * image format, use Imagick::setImageFormat().
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImagesBlob(){}

    /**
     * Gets the image scene.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageScene(){}

    /**
     * Generates an SHA-256 message digest for the image pixel stream.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getImageSignature(){}

    /**
     * Returns the image length in bytes
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageSize(){}

    /**
     * Gets the image ticks-per-second.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageTicksPerSecond(){}

    /**
     * Gets the image total ink density.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getImageTotalInkDensity(){}

    /**
     * Gets the potential image type.
     * 
     * @return int
     **/
    function getImageType(){}

    /**
     * Gets the image units of resolution.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageUnits(){}

    /**
     * Returns the virtual pixel method for the specified image.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageVirtualPixelMethod(){}

    /**
     * Returns the chromaticity white point as an associative array with the
     * keys "x" and "y".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getImageWhitePoint(){}

    /**
     * Returns the image width.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getImageWidth(){}

    /**
     * Gets the object interlace scheme.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getInterlaceScheme(){}

    /**
     * Returns the index of the current active image within the Imagick
     * object.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getIteratorIndex(){}

    /**
     * Returns the number of images associated with Imagick object.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getNumberImages(){}

    /**
     * Returns a value associated within the object for the specified key.
     * 
     * @param string $key The name of the option
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getOption($key){}

    /**
     * Returns the ImageMagick package name.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getPackageName(){}

    /**
     * Returns the page geometry associated with the Imagick object in an
     * associative array with the keys "width", "height", "x", and "y".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getPage(){}

    /**
     * Returns a MagickPixelIterator.
     * 
     * @return ImagickPixelIterator
     * @since PECL imagick 2.0.0
     **/
    function getPixelIterator(){}

    /**
     * Get an ImagickPixelIterator for an image section.
     * 
     * @param int $x The x-coordinate of the region.
     * @param int $y The y-coordinate of the region.
     * @param int $columns The width of the region.
     * @param int $rows The height of the region.
     * @return ImagickPixelIterator
     * @since PECL imagick 2.0.0
     **/
    function getPixelRegionIterator($x, $y, $columns, $rows){}

    /**
     * Returns the objects point size property.
     * 
     * @return string
     **/
    function getPointSize(){}

    /**
     * Returns the Imagick quantum depth as a string.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getQuantumDepth(){}

    /**
     * Returns the Imagick quantum range as a string.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getQuantumRange(){}

    /**
     * Returns the ImageMagick release date as a string.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getReleaseDate(){}

    /**
     * Returns the specified resource's memory usage in megabytes.
     * 
     * @param int $type Refer to the list of resourcetype constants.
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getResource($type){}

    /**
     * Returns the specified resource limit in megabytes.
     * 
     * @param int $type Refer to the list of resourcetype constants.
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getResourceLimit($type){}

    /**
     * Gets the horizontal and vertical sampling factor.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getSamplingFactors(){}

    /**
     * Returns the size associated with the Imagick object as an array with
     * the keys "columns" and "rows".
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getSize(){}

    /**
     * Returns the size offset associated with the Imagick object.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getSizeOffset(){}

    /**
     * Returns the ImageMagick API version as a string and as a number.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getVersion(){}

    /**
     * Replaces colors in the image using a Hald lookup table. Hald images
     * can be created using HALD color coder.
     * 
     * @param Imagick $clut Imagick object containing the Hald lookup
     *   image.
     * @param int $channel
     * @return boolean
     **/
    function haldClutImage($clut, $channel){}

    /**
     * Returns if the object has more images when traversing the list in the
     * forward direction.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function hasNextImage(){}

    /**
     * Returns if the object has more images when traversing the list in the
     * reverse direction
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function hasPreviousImage(){}

    /**
     * Identifies an image and returns the attributes. Attributes include the
     * image width, height, size, and others.
     * 
     * @param bool $appendRawOutput
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function identifyImage($appendRawOutput){}

    /**
     * Creates a new image that is a copy of an existing one with the image
     * pixels "imploded" by the specified percentage.
     * 
     * @param float $radius The radius of the implode
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function implodeImage($radius){}

    /**
     * Imports pixels from an array into an image. The {@link map} is usually
     * 'RGB'. This method imposes the following constraints for the
     * parameters: amount of pixels in the array must match {@link width} x
     * {@link height} x length of the map.
     * 
     * @param int $x The image x position
     * @param int $y The image y position
     * @param int $width The image width
     * @param int $height The image height
     * @param string $map Map of pixel ordering as a string. This can be
     *   for example RGB. The value can be any combination or order of R =
     *   red, G = green, B = blue, A = alpha (0 is transparent), O = opacity
     *   (0 is opaque), C = cyan, Y = yellow, M = magenta, K = black, I =
     *   intensity (for grayscale), P = pad.
     * @param int $storage The pixel storage method. Refer to this list of
     *   pixel constants.
     * @param array $pixels The array of pixels
     * @return bool
     **/
    function importImagePixels($x, $y, $width, $height, $map, $storage, $pixels){}

    /**
     * Adds a label to an image.
     * 
     * @param string $label The label to add
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function labelImage($label){}

    /**
     * Adjusts the levels of an image by scaling the colors falling between
     * specified white and black points to the full available quantum range.
     * The parameters provided represent the black, mid, and white points.
     * The black point specifies the darkest color in the image. Colors
     * darker than the black point are set to zero. Mid point specifies a
     * gamma correction to apply to the image. White point specifies the
     * lightest color in the image. Colors brighter than the white point are
     * set to the maximum quantum value.
     * 
     * @param float $blackPoint The image black point
     * @param float $gamma The gamma value
     * @param float $whitePoint The image white point
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function levelImage($blackPoint, $gamma, $whitePoint, $channel){}

    /**
     * Stretches with saturation the image intensity.
     * 
     * @param float $blackPoint The image black point
     * @param float $whitePoint The image white point
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function linearStretchImage($blackPoint, $whitePoint){}

    /**
     * This method scales the images using liquid rescaling method. This
     * method is an implementation of a technique called seam carving. In
     * order for this method to work as expected ImageMagick must be compiled
     * with liblqr support.
     * 
     * @param int $width The width of the target size
     * @param int $height The height of the target size
     * @param float $delta_x How much the seam can traverse on x-axis.
     *   Passing 0 causes the seams to be straight.
     * @param float $rigidity Introduces a bias for non-straight seams.
     *   This parameter is typically 0.
     * @return bool
     **/
    function liquidRescaleImage($width, $height, $delta_x, $rigidity){}

    /**
     * Is a convenience method that scales an image proportionally to twice
     * its original size.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function magnifyImage(){}

    /**
     * @param Imagick $map
     * @param bool $dither
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function mapImage($map, $dither){}

    /**
     * Changes the transparency value of any pixel that matches target and is
     * an immediate neighbor. If the method FillToBorderMethod is specified,
     * the transparency value is changed for any neighbor pixel that does not
     * match the bordercolor member of image.
     * 
     * @param float $alpha The level of transparency: 1.0 is fully opaque
     *   and 0.0 is fully transparent.
     * @param float $fuzz The fuzz member of image defines how much
     *   tolerance is acceptable to consider two colors as the same.
     * @param mixed $bordercolor An ImagickPixel object or string
     *   representing the border color.
     * @param int $x The starting x coordinate of the operation.
     * @param int $y The starting y coordinate of the operation.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function matteFloodfillImage($alpha, $fuzz, $bordercolor, $x, $y){}

    /**
     * Applies a digital filter that improves the quality of a noisy image.
     * Each pixel is replaced by the median in a set of neighboring pixels as
     * defined by radius.
     * 
     * @param float $radius The radius of the pixel neighborhood.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function medianFilterImage($radius){}

    /**
     * Merges image layers into one. This method is useful when working with
     * image formats that use multiple layers such as PSD. The merging is
     * controlled using the {@link layer_method} which defines how the layers
     * are merged.
     * 
     * @param int $layer_method One of the Imagick::LAYERMETHOD_* constants
     * @return bool
     * @since PECL imagick 2.1.0
     **/
    function mergeImageLayers($layer_method){}

    /**
     * Is a convenience method that scales an image proportionally to
     * one-half its original size
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function minifyImage(){}

    /**
     * Lets you control the brightness, saturation, and hue of an image. Hue
     * is the percentage of absolute rotation from the current position. For
     * example 50 results in a counter-clockwise rotation of 90 degrees, 150
     * results in a clockwise rotation of 90 degrees, with 0 and 200 both
     * resulting in a rotation of 180 degrees.
     * 
     * @param float $brightness
     * @param float $saturation
     * @param float $hue
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function modulateImage($brightness, $saturation, $hue){}

    /**
     * Creates a composite image by combining several separate images. The
     * images are tiled on the composite image with the name of the image
     * optionally appearing just below the individual tile.
     * 
     * @param ImagickDraw $draw The font name, size, and color are obtained
     *   from this object.
     * @param string $tile_geometry The number of tiles per row and page
     *   (e.g. 6x4+0+0).
     * @param string $thumbnail_geometry Preferred image size and border
     *   size of each thumbnail (e.g. 120x120+4+3>).
     * @param int $mode Thumbnail framing mode, see Montage Mode constants.
     * @param string $frame Surround the image with an ornamental border
     *   (e.g. 15x15+3+3). The frame color is that of the thumbnail's matte
     *   color.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function montageImage($draw, $tile_geometry, $thumbnail_geometry, $mode, $frame){}

    /**
     * Method morphs a set of images. Both the image pixels and size are
     * linearly interpolated to give the appearance of a meta-morphosis from
     * one image to the next.
     * 
     * @param int $number_frames The number of in-between images to
     *   generate.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function morphImages($number_frames){}

    /**
     * Inlays an image sequence to form a single coherent picture. It returns
     * a wand with each image in the sequence composited at the location
     * defined by the page offset of the image.
     * 
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function mosaicImages(){}

    /**
     * Simulates motion blur. We convolve the image with a Gaussian operator
     * of the given radius and standard deviation (sigma). For reasonable
     * results, radius should be larger than sigma. Use a radius of 0 and
     * MotionBlurImage() selects a suitable radius for you. Angle gives the
     * angle of the blurring motion.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel.
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels.
     * @param float $angle Apply the effect along this angle.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants. The channel argument affects only if Imagick is
     *   compiled against ImageMagick version 6.4.4 or greater.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function motionBlurImage($radius, $sigma, $angle, $channel){}

    /**
     * Negates the colors in the reference image. The Grayscale option means
     * that only grayscale values within the image are negated.
     * 
     * @param bool $gray Whether to only negate grayscale pixels within the
     *   image.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function negateImage($gray, $channel){}

    /**
     * Creates a new image and associates ImagickPixel value as background
     * color
     * 
     * @param int $cols Columns in the new image
     * @param int $rows Rows in the new image
     * @param mixed $background The background color used for this image
     * @param string $format Image format. This parameter was added in
     *   Imagick version 2.0.1.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function newImage($cols, $rows, $background, $format){}

    /**
     * Creates a new image using ImageMagick pseudo-formats.
     * 
     * @param int $columns columns in the new image
     * @param int $rows rows in the new image
     * @param string $pseudoString string containing pseudo image
     *   definition.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function newPseudoImage($columns, $rows, $pseudoString){}

    /**
     * Associates the next image in the image list with an Imagick object.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function nextImage(){}

    /**
     * Enhances the contrast of a color image by adjusting the pixels color
     * to span the entire range of colors available.
     * 
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function normalizeImage($channel){}

    /**
     * Applies a special effect filter that simulates an oil painting. Each
     * pixel is replaced by the most frequent color occurring in a circular
     * region defined by radius.
     * 
     * @param float $radius The radius of the circular neighborhood.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function oilPaintImage($radius){}

    /**
     * Changes any pixel that matches color with the color defined by fill.
     * 
     * @param mixed $target ImagickPixel object or a string containing the
     *   color to change
     * @param mixed $fill The replacement color
     * @param float $fuzz
     * @param bool $invert If paints any pixel that does not match the
     *   target color.
     * @param int $channel
     * @return bool
     **/
    function opaquePaintImage($target, $fill, $fuzz, $invert, $channel){}

    /**
     * Compares each image the GIF disposed forms of the previous image in
     * the sequence. From this it attempts to select the smallest cropped
     * image to replace each frame, while preserving the results of the
     * animation.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function optimizeImageLayers(){}

    /**
     * Performs an ordered dither based on a number of pre-defined dithering
     * threshold maps, but over multiple intensity levels, which can be
     * different for different channels, according to the input arguments.
     * 
     * @param string $threshold_map A string containing the name of the
     *   threshold dither map to use
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.2.2
     **/
    function orderedPosterizeImage($threshold_map, $channel){}

    /**
     * Changes the color value of any pixel that matches target and is an
     * immediate neighbor. As of ImageMagick 6.3.8 this method has been
     * deprecated and {@link Imagick::floodfillPaintImage} should be used
     * instead.
     * 
     * @param mixed $fill ImagickPixel object or a string containing the
     *   fill color
     * @param float $fuzz The amount of fuzz. For example, set fuzz to 10
     *   and the color red at intensities of 100 and 102 respectively are now
     *   interpreted as the same color for the purposes of the floodfill.
     * @param mixed $bordercolor ImagickPixel object or a string containing
     *   the border color
     * @param int $x X start position of the floodfill
     * @param int $y Y start position of the floodfill
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.1.0
     **/
    function paintFloodfillImage($fill, $fuzz, $bordercolor, $x, $y, $channel){}

    /**
     * Changes any pixel that matches color with the color defined by fill.
     * 
     * @param mixed $target Change this target color to the fill color
     *   within the image. An ImagickPixel object or a string representing
     *   the target color.
     * @param mixed $fill An ImagickPixel object or a string representing
     *   the fill color.
     * @param float $fuzz The fuzz member of image defines how much
     *   tolerance is acceptable to consider two colors as the same.
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function paintOpaqueImage($target, $fill, $fuzz, $channel){}

    /**
     * Changes any pixel that matches color with the color defined by fill.
     * 
     * @param mixed $target Change this target color to specified opacity
     *   value within the image.
     * @param float $alpha The level of transparency: 1.0 is fully opaque
     *   and 0.0 is fully transparent.
     * @param float $fuzz The fuzz member of image defines how much
     *   tolerance is acceptable to consider two colors as the same.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function paintTransparentImage($target, $alpha, $fuzz){}

    /**
     * This method can be used to query image width, height, size, and format
     * without reading the whole image in to memory.
     * 
     * @param string $filename The filename to read the information from.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pingImage($filename){}

    /**
     * This method can be used to query image width, height, size, and format
     * without reading the whole image to memory.
     * 
     * @param string $image A string containing the image.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pingImageBlob($image){}

    /**
     * This method can be used to query image width, height, size, and format
     * without reading the whole image to memory.
     * 
     * @param resource $filehandle An open filehandle to the image.
     * @param string $fileName Optional filename for this image.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pingImageFile($filehandle, $fileName){}

    /**
     * Simulates a Polaroid picture.
     * 
     * @param ImagickDraw $properties The polaroid properties
     * @param float $angle The polaroid angle
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function polaroidImage($properties, $angle){}

    /**
     * Reduces the image to a limited number of color level.
     * 
     * @param int $levels
     * @param bool $dither
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function posterizeImage($levels, $dither){}

    /**
     * Tiles 9 thumbnails of the specified image with an image processing
     * operation applied at varying strengths. This is helpful to quickly
     * pin-point an appropriate parameter for an image processing operation.
     * 
     * @param int $preview Preview type. See Preview type constants
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function previewImages($preview){}

    /**
     * Assocates the previous image in an image list with the Imagick object.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function previousImage(){}

    /**
     * Adds or removes a ICC, IPTC, or generic profile from an image. If the
     * profile is NULL, it is removed from the image otherwise added. Use a
     * name of '*' and a profile of NULL to remove all profiles from the
     * image.
     * 
     * @param string $name
     * @param string $profile
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function profileImage($name, $profile){}

    /**
     * @param int $numberColors
     * @param int $colorspace
     * @param int $treedepth
     * @param bool $dither
     * @param bool $measureError
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function quantizeImage($numberColors, $colorspace, $treedepth, $dither, $measureError){}

    /**
     * @param int $numberColors
     * @param int $colorspace
     * @param int $treedepth
     * @param bool $dither
     * @param bool $measureError
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function quantizeImages($numberColors, $colorspace, $treedepth, $dither, $measureError){}

    /**
     * Returns a multi-dimensional array representing the font metrics.
     * 
     * @param ImagickDraw $properties ImagickDraw object containing font
     *   properties
     * @param string $text The text
     * @param bool $multiline Multiline parameter. If left empty it is
     *   autodetected
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function queryFontMetrics($properties, $text, $multiline){}

    /**
     * Returns the configured fonts.
     * 
     * @param string $pattern The query pattern
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function queryFonts($pattern){}

    /**
     * Returns formats supported by Imagick.
     * 
     * @param string $pattern
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function queryFormats($pattern){}

    /**
     * Radial blurs an image.
     * 
     * @param float $angle
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function radialBlurImage($angle, $channel){}

    /**
     * Creates a simulated three-dimensional button-like effect by lightening
     * and darkening the edges of the image. Members width and height of
     * raise_info define the width of the vertical and horizontal edge of the
     * effect.
     * 
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @param bool $raise
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function raiseImage($width, $height, $x, $y, $raise){}

    /**
     * Changes the value of individual pixels based on the intensity of each
     * pixel compared to threshold. The result is a high-contrast, two color
     * image.
     * 
     * @param float $low The low point
     * @param float $high The high point
     * @param int $channel Provide any channel constant that is valid for
     *   your channel mode. To apply to more than one channel, combine
     *   channeltype constants using bitwise operators. Refer to this list of
     *   channel constants.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function randomThresholdImage($low, $high, $channel){}

    /**
     * Reads image from filename
     * 
     * @param string $filename
     * @return bool
     **/
    function readImage($filename){}

    /**
     * Reads image from a binary string
     * 
     * @param string $image
     * @param string $filename
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function readImageBlob($image, $filename){}

    /**
     * Reads image from open filehandle
     * 
     * @param resource $filehandle
     * @param string $fileName
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function readImageFile($filehandle, $fileName){}

    /**
     * Translate, scale, shear, or rotate image colors. This method supports
     * variable sized matrices but normally 5x5 matrix is used for RGBA and
     * 6x6 is used for CMYK. The last row should contain the normalized
     * values.
     * 
     * @param array $matrix The matrix containing the color values
     * @return bool
     **/
    function recolorImage($matrix){}

    /**
     * Smooths the contours of an image while still preserving edge
     * information. The algorithm works by replacing each pixel with its
     * neighbor closest in value. A neighbor is defined by radius. Use a
     * radius of 0 and Imagick::reduceNoiseImage() selects a suitable radius
     * for you.
     * 
     * @param float $radius
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function reduceNoiseImage($radius){}

    /**
     * Replaces colors an image with those defined by {@link replacement}.
     * The colors are replaced with the closest possible color.
     * 
     * @param Imagick $replacement An Imagick object containing the
     *   replacement colors
     * @param int $DITHER Refer to this list of dither method constants
     * @return void
     **/
    function remapImage($replacement, $DITHER){}

    /**
     * Removes an image from the image list.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function removeImage(){}

    /**
     * Removes the named image profile and returns it.
     * 
     * @param string $name
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function removeImageProfile($name){}

    /**
     * Renders all preceding drawing commands.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function render(){}

    /**
     * Resample image to desired resolution.
     * 
     * @param float $x_resolution
     * @param float $y_resolution
     * @param int $filter
     * @param float $blur
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function resampleImage($x_resolution, $y_resolution, $filter, $blur){}

    /**
     * The page definition as a string. The string is in format WxH+x+y.
     * 
     * @param string $page The page definition. For example 7168x5147+0+0
     * @return bool
     **/
    function resetImagePage($page){}

    /**
     * Scales an image to the desired dimensions with a filter.
     * 
     * @param int $columns Width of the image
     * @param int $rows Height of the image
     * @param int $filter Refer to the list of filter constants.
     * @param float $blur The blur factor where > 1 is blurry, < 1 is
     *   sharp.
     * @param bool $bestfit Optional fit parameter.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function resizeImage($columns, $rows, $filter, $blur, $bestfit){}

    /**
     * Offsets an image as defined by x and y.
     * 
     * @param int $x The X offset.
     * @param int $y The Y offset.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function rollImage($x, $y){}

    /**
     * Rotates an image the specified number of degrees. Empty triangles left
     * over from rotating the image are filled with the background color.
     * 
     * @param mixed $background The background color
     * @param float $degrees The number of degrees to rotate the image
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function rotateImage($background, $degrees){}

    /**
     * Rounds image corners. The first two parameters control the amount of
     * rounding and the three last parameters can be used to fine-tune the
     * rounding process.
     * 
     * @param float $x_rounding x rounding
     * @param float $y_rounding y rounding
     * @param float $stroke_width stroke width
     * @param float $displace image displace
     * @param float $size_correction size correction
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function roundCorners($x_rounding, $y_rounding, $stroke_width, $displace, $size_correction){}

    /**
     * Scales an image to the desired dimensions with pixel sampling. Unlike
     * other scaling methods, this method does not introduce any additional
     * color into the scaled image.
     * 
     * @param int $columns
     * @param int $rows
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function sampleImage($columns, $rows){}

    /**
     * Scales the size of an image to the given dimensions. The other
     * parameter will be calculated if 0 is passed as either param.
     * 
     * @param int $cols
     * @param int $rows
     * @param bool $bestfit
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function scaleImage($cols, $rows, $bestfit){}

    /**
     * Analyses the image and identifies units that are similar.
     * 
     * @param int $COLORSPACE One of the COLORSPACE constants.
     * @param float $cluster_threshold A percentage describing minimum
     *   number of pixels contained in hexedra before it is considered valid.
     * @param float $smooth_threshold Eliminates noise from the histogram.
     * @param boolean $verbose Whether to output detailed information about
     *   recognised classes.
     * @return void
     **/
    function segmentImage($COLORSPACE, $cluster_threshold, $smooth_threshold, $verbose){}

    /**
     * Separates a channel from the image and returns a grayscale image. A
     * channel is a particular color component of each pixel in the image.
     * 
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function separateImageChannel($channel){}

    /**
     * Applies a special effect to the image, similar to the effect achieved
     * in a photo darkroom by sepia toning. Threshold ranges from 0 to
     * QuantumRange and is a measure of the extent of the sepia toning. A
     * threshold of 80 is a good starting point for a reasonable tone.
     * 
     * @param float $threshold
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function sepiaToneImage($threshold){}

    /**
     * Sets the object's default background color.
     * 
     * @param mixed $background
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setBackgroundColor($background){}

    /**
     * Sets the object's default compression type
     * 
     * @param int $compression
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setCompression($compression){}

    /**
     * Sets the object's default compression quality.
     * 
     * @param int $quality
     * @return bool
     **/
    function setCompressionQuality($quality){}

    /**
     * Sets the filename before you read or write an image file.
     * 
     * @param string $filename
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFilename($filename){}

    /**
     * Sets the Imagick iterator to the first image.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFirstIterator(){}

    /**
     * Sets object's font property. This method can be used for example to
     * set font for caption: pseudo-format. The font needs to be configured
     * in ImageMagick confiration or a file by the name of {@link font} must
     * exist. This method should not be confused with {@link
     * ImagickDraw::setFont} which sets the font for a specific ImagickDraw
     * object.
     * 
     * @param string $font Font name or a filename
     * @return bool
     * @since PECL imagick 2.1.0
     **/
    function setFont($font){}

    /**
     * Sets the format of the Imagick object.
     * 
     * @param string $format
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFormat($format){}

    /**
     * Sets the global gravity property for the Imagick object.
     * 
     * @param int $gravity The gravity property. Refer to the list of
     *   gravity constants.
     * @return bool
     **/
    function setGravity($gravity){}

    /**
     * Replaces the current image sequence with the image from replace
     * object.
     * 
     * @param Imagick $replace The replace Imagick object
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImage($replace){}

    /**
     * Activate or deactivate image alpha channel. The {@link mode} is one of
     * the Imagick::ALPHACHANNEL_* constants.
     * 
     * @param int $mode One of the Imagick::ALPHACHANNEL_* constants
     * @return bool
     **/
    function setImageAlphaChannel($mode){}

    /**
     * Sets the image background color.
     * 
     * @param mixed $background
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageBackgroundColor($background){}

    /**
     * Sets the image bias for any method that convolves an image (e.g.
     * Imagick::ConvolveImage()).
     * 
     * @param float $bias
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageBias($bias){}

    /**
     * Sets the image chromaticity blue primary point.
     * 
     * @param float $x
     * @param float $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageBluePrimary($x, $y){}

    /**
     * Sets the image border color.
     * 
     * @param mixed $border The border color
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageBorderColor($border){}

    /**
     * Sets the depth of a particular image channel.
     * 
     * @param int $channel
     * @param int $depth
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageChannelDepth($channel, $depth){}

    /**
     * Sets image clip mask from another Imagick object.
     * 
     * @param Imagick $clip_mask The Imagick object containing the clip
     *   mask
     * @return bool
     **/
    function setImageClipMask($clip_mask){}

    /**
     * Sets the color of the specified colormap index.
     * 
     * @param int $index
     * @param ImagickPixel $color
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageColormapColor($index, $color){}

    /**
     * Sets the image colorspace.
     * 
     * @param int $colorspace
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageColorspace($colorspace){}

    /**
     * Sets the image composite operator, useful for specifying how to
     * composite the image thumbnail when using the Imagick::montageImage()
     * method.
     * 
     * @param int $compose
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageCompose($compose){}

    /**
     * @param int $compression One of the COMPRESSION constants
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageCompression($compression){}

    /**
     * Sets the image compression quality.
     * 
     * @param int $quality The image compression quality as an integer
     * @return bool
     **/
    function setImageCompressionQuality($quality){}

    /**
     * Sets the image delay.
     * 
     * @param int $delay
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageDelay($delay){}

    /**
     * Sets the image depth.
     * 
     * @param int $depth
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageDepth($depth){}

    /**
     * Sets the image disposal method.
     * 
     * @param int $dispose
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageDispose($dispose){}

    /**
     * Sets the image size (i.e. columns & rows).
     * 
     * @param int $columns
     * @param int $rows
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageExtent($columns, $rows){}

    /**
     * Sets the filename of a particular image in a sequence.
     * 
     * @param string $filename
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageFilename($filename){}

    /**
     * Sets the format of a particular image in a sequence.
     * 
     * @param string $format String presentation of the image format.
     *   Format support depends on the ImageMagick installation.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageFormat($format){}

    /**
     * Sets the image gamma.
     * 
     * @param float $gamma
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageGamma($gamma){}

    /**
     * Sets the gravity property for the current image. This method can be
     * used to set the gravity property for a single image sequence.
     * 
     * @param int $gravity The gravity property. Refer to the list of
     *   gravity constants.
     * @return bool
     **/
    function setImageGravity($gravity){}

    /**
     * Sets the image chromaticity green primary point.
     * 
     * @param float $x
     * @param float $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageGreenPrimary($x, $y){}

    /**
     * Set the iterator to the position in the image list specified with the
     * index parameter.
     * 
     * This method has been deprecated. See Imagick::setIteratorIndex
     * 
     * @param int $index The position to set the iterator to
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageIndex($index){}

    /**
     * Sets the image compression.
     * 
     * @param int $interlace_scheme
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageInterlaceScheme($interlace_scheme){}

    /**
     * Sets the image interpolate pixel method.
     * 
     * @param int $method The method is one of the Imagick::INTERPOLATE_*
     *   constants
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageInterpolateMethod($method){}

    /**
     * Sets the image iterations.
     * 
     * @param int $iterations
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageIterations($iterations){}

    /**
     * Sets the image matte channel.
     * 
     * @param bool $matte True activates the matte channel and false
     *   disables it.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageMatte($matte){}

    /**
     * Sets the image matte color.
     * 
     * @param mixed $matte
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageMatteColor($matte){}

    /**
     * Sets the image to the specified opacity level.
     * 
     * @param float $opacity The level of transparency: 1.0 is fully opaque
     *   and 0.0 is fully transparent.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageOpacity($opacity){}

    /**
     * Sets the image orientation.
     * 
     * @param int $orientation One of the orientation constants
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageOrientation($orientation){}

    /**
     * Sets the page geometry of the image.
     * 
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImagePage($width, $height, $x, $y){}

    /**
     * Adds a named profile to the Imagick object. If a profile with the same
     * name already exists, it is replaced. This method differs from the
     * Imagick::ProfileImage() method in that it does not apply any CMS color
     * profiles.
     * 
     * @param string $name
     * @param string $profile
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageProfile($name, $profile){}

    /**
     * Sets a named property to the image.
     * 
     * @param string $name
     * @param string $value
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageProperty($name, $value){}

    /**
     * Sets the image chromaticity red primary point.
     * 
     * @param float $x
     * @param float $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageRedPrimary($x, $y){}

    /**
     * Sets the image rendering intent.
     * 
     * @param int $rendering_intent
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageRenderingIntent($rendering_intent){}

    /**
     * Sets the image resolution.
     * 
     * @param float $x_resolution
     * @param float $y_resolution
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageResolution($x_resolution, $y_resolution){}

    /**
     * Sets the image scene.
     * 
     * @param int $scene
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageScene($scene){}

    /**
     * Sets the image ticks-per-second.
     * 
     * @param int $ticks_persecond
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageTicksPerSecond($ticks_persecond){}

    /**
     * Sets the image type.
     * 
     * @param int $image_type
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageType($image_type){}

    /**
     * Sets the image units of resolution.
     * 
     * @param int $units
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageUnits($units){}

    /**
     * Sets the image virtual pixel method.
     * 
     * @param int $method
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageVirtualPixelMethod($method){}

    /**
     * Sets the image chromaticity white point.
     * 
     * @param float $x
     * @param float $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setImageWhitePoint($x, $y){}

    /**
     * Sets the image compression.
     * 
     * @param int $interlace_scheme
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setInterlaceScheme($interlace_scheme){}

    /**
     * Set the iterator to the position in the image list specified with the
     * index parameter.
     * 
     * @param int $index The position to set the iterator to
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setIteratorIndex($index){}

    /**
     * Sets the Imagick iterator to the last image.
     * 
     * @return bool
     * @since PECL imagick 2.0.1
     **/
    function setLastIterator(){}

    /**
     * Associates one or more options with the wand.
     * 
     * @param string $key
     * @param string $value
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setOption($key, $value){}

    /**
     * Sets the page geometry of the Imagick object.
     * 
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setPage($width, $height, $x, $y){}

    /**
     * Sets object's point size property. This method can be used for example
     * to set font size for caption: pseudo-format.
     * 
     * @param float $point_size Point size
     * @return bool
     * @since PECL imagick 2.1.0
     **/
    function setPointSize($point_size){}

    /**
     * Sets the image resolution.
     * 
     * @param float $x_resolution
     * @param float $y_resolution
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setResolution($x_resolution, $y_resolution){}

    /**
     * Sets the limit for a particular resource in megabytes.
     * 
     * @param int $type
     * @param int $limit
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setResourceLimit($type, $limit){}

    /**
     * Sets the image sampling factors.
     * 
     * @param array $factors
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setSamplingFactors($factors){}

    /**
     * Sets the size of the Imagick object. Set it before you read a raw
     * image format such as RGB, GRAY, or CMYK.
     * 
     * @param int $columns
     * @param int $rows
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setSize($columns, $rows){}

    /**
     * Sets the size and offset of the Imagick object. Set it before you read
     * a raw image format such as RGB, GRAY, or CMYK.
     * 
     * @param int $columns The width in pixels.
     * @param int $rows The height in pixels.
     * @param int $offset The image offset.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setSizeOffset($columns, $rows, $offset){}

    /**
     * Sets the image type attribute.
     * 
     * @param int $image_type
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setType($image_type){}

    /**
     * Shines a distant light on an image to create a three-dimensional
     * effect. You control the positioning of the light with azimuth and
     * elevation; azimuth is measured in degrees off the x axis and elevation
     * is measured in pixels above the Z axis.
     * 
     * @param bool $gray A value other than zero shades the intensity of
     *   each pixel.
     * @param float $azimuth Defines the light source direction.
     * @param float $elevation Defines the light source direction.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function shadeImage($gray, $azimuth, $elevation){}

    /**
     * Simulates an image shadow.
     * 
     * @param float $opacity
     * @param float $sigma
     * @param int $x
     * @param int $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function shadowImage($opacity, $sigma, $x, $y){}

    /**
     * Sharpens an image. We convolve the image with a Gaussian operator of
     * the given radius and standard deviation (sigma). For reasonable
     * results, the radius should be larger than sigma. Use a radius of 0 and
     * selects a suitable radius for you.
     * 
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function sharpenImage($radius, $sigma, $channel){}

    /**
     * Shaves pixels from the image edges. It allocates the memory necessary
     * for the new Image structure and returns a pointer to the new image.
     * 
     * @param int $columns
     * @param int $rows
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function shaveImage($columns, $rows){}

    /**
     * Slides one edge of an image along the X or Y axis, creating a
     * parallelogram. An X direction shear slides an edge along the X axis,
     * while a Y direction shear slides an edge along the Y axis. The amount
     * of the shear is controlled by a shear angle. For X direction shears,
     * x_shear is measured relative to the Y axis, and similarly, for Y
     * direction shears y_shear is measured relative to the X axis. Empty
     * triangles left over from shearing the image are filled with the
     * background color.
     * 
     * @param mixed $background The background color
     * @param float $x_shear The number of degrees to shear on the x axis
     * @param float $y_shear The number of degrees to shear on the y axis
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function shearImage($background, $x_shear, $y_shear){}

    /**
     * Adjusts the contrast of an image with a non-linear sigmoidal contrast
     * algorithm. Increase the contrast of the image using a sigmoidal
     * transfer function without saturating highlights or shadows. Contrast
     * indicates how much to increase the contrast (0 is none; 3 is typical;
     * 20 is pushing it); mid-point indicates where midtones fall in the
     * resultant image (0 is white; 50 is middle-gray; 100 is black). Set
     * sharpen to to increase the image contrast otherwise the contrast is
     * reduced.
     * 
     * @param bool $sharpen
     * @param float $alpha
     * @param float $beta
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function sigmoidalContrastImage($sharpen, $alpha, $beta, $channel){}

    /**
     * Simulates a pencil sketch. We convolve the image with a Gaussian
     * operator of the given radius and standard deviation (sigma). For
     * reasonable results, radius should be larger than sigma. Use a radius
     * of 0 and Imagick::sketchImage() selects a suitable radius for you.
     * Angle gives the angle of the blurring motion.
     * 
     * @param float $radius The radius of the Gaussian, in pixels, not
     *   counting the center pixel
     * @param float $sigma The standard deviation of the Gaussian, in
     *   pixels.
     * @param float $angle Apply the effect along this angle.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function sketchImage($radius, $sigma, $angle){}

    /**
     * Applies a special effect to the image, similar to the effect achieved
     * in a photo darkroom by selectively exposing areas of photo sensitive
     * paper to light. Threshold ranges from 0 to QuantumRange and is a
     * measure of the extent of the solarization.
     * 
     * @param int $threshold
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function solarizeImage($threshold){}

    /**
     * Given the arguments array containing numeric values this method
     * interpolates the colors found at those coordinates across the whole
     * image using {@link sparse_method}.
     * 
     * @param int $SPARSE_METHOD Refer to this list of sparse method
     *   constants
     * @param array $arguments An array containing the coordinates. The
     *   array is in format array(1,1, 2,45)
     * @param int $channel
     * @return boolean
     **/
    function sparseColorImage($SPARSE_METHOD, $arguments, $channel){}

    /**
     * Splices a solid color into the image.
     * 
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function spliceImage($width, $height, $x, $y){}

    /**
     * Special effects method that randomly displaces each pixel in a block
     * defined by the radius parameter.
     * 
     * @param float $radius
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function spreadImage($radius){}

    /**
     * Hides a digital watermark within the image. Recover the hidden
     * watermark later to prove that the authenticity of an image. Offset
     * defines the start position within the image to hide the watermark.
     * 
     * @param Imagick $watermark_wand
     * @param int $offset
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function steganoImage($watermark_wand, $offset){}

    /**
     * Composites two images and produces a single image that is the
     * composite of a left and right image of a stereo pair.
     * 
     * @param Imagick $offset_wand
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function stereoImage($offset_wand){}

    /**
     * Strips an image of all profiles and comments.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function stripImage(){}

    /**
     * Swirls the pixels about the center of the image, where degrees
     * indicates the sweep of the arc through which each pixel is moved. You
     * get a more dramatic effect as the degrees move from 1 to 360.
     * 
     * @param float $degrees
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function swirlImage($degrees){}

    /**
     * Repeatedly tiles the texture image across and down the image canvas.
     * 
     * @param Imagick $texture_wand
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function textureImage($texture_wand){}

    /**
     * Changes the value of individual pixels based on the intensity of each
     * pixel compared to threshold. The result is a high-contrast, two color
     * image.
     * 
     * @param float $threshold
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function thresholdImage($threshold, $channel){}

    /**
     * Changes the size of an image to the given dimensions and removes any
     * associated profiles. The goal is to produce small low cost thumbnail
     * images suited for display on the Web.
     * 
     * If is given as a third parameter then columns and rows parameters are
     * used as maximums for each side. Both sides will be scaled down until
     * the match or are smaller than the parameter given for the side.
     * 
     * @param int $columns Image width
     * @param int $rows Image height
     * @param bool $bestfit Whether to force maximum values
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function thumbnailImage($columns, $rows, $bestfit){}

    /**
     * Applies a color vector to each pixel in the image. The length of the
     * vector is 0 for black and white and at its maximum for the midtones.
     * The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).
     * 
     * @param mixed $tint
     * @param mixed $opacity
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function tintImage($tint, $opacity){}

    /**
     * A convenience method for setting crop size and the image geometry from
     * strings.
     * 
     * @param string $crop A crop geometry string. This geometry defines a
     *   subregion of the image to crop.
     * @param string $geometry An image geometry string. This geometry
     *   defines the final size of the image.
     * @return Imagick
     * @since PECL imagick 2.0.0
     **/
    function transformImage($crop, $geometry){}

    /**
     * Paints pixels matching the target color transparent.
     * 
     * @param mixed $target The target color to paint
     * @param float $alpha
     * @param float $fuzz
     * @param bool $invert If paints any pixel that does not match the
     *   target color.
     * @return bool
     **/
    function transparentPaintImage($target, $alpha, $fuzz, $invert){}

    /**
     * Creates a vertical mirror image by reflecting the pixels around the
     * central x-axis while rotating them 90-degrees.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function transposeImage(){}

    /**
     * Creates a horizontal mirror image by reflecting the pixels around the
     * central y-axis while rotating them 270-degrees.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function transverseImage(){}

    /**
     * Remove edges that are the background color from the image.
     * 
     * @param float $fuzz By default target must match a particular pixel
     *   color exactly. However, in many cases two colors may differ by a
     *   small amount. The fuzz member of image defines how much tolerance is
     *   acceptable to consider two colors as the same. This parameter
     *   represents the variation on the quantum range.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function trimImage($fuzz){}

    /**
     * Discards all but one of any pixel color.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function uniqueImageColors(){}

    /**
     * Sharpens an image. We convolve the image with a Gaussian operator of
     * the given radius and standard deviation (sigma). For reasonable
     * results, radius should be larger than sigma. Use a radius of 0 and
     * Imagick::UnsharpMaskImage() selects a suitable radius for you.
     * 
     * @param float $radius
     * @param float $sigma
     * @param float $amount
     * @param float $threshold
     * @param int $channel
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function unsharpMaskImage($radius, $sigma, $amount, $threshold, $channel){}

    /**
     * Checks if the current item is valid.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function valid(){}

    /**
     * Softens the edges of the image in vignette style.
     * 
     * @param float $blackPoint The black point.
     * @param float $whitePoint The white point
     * @param int $x X offset of the ellipse
     * @param int $y Y offset of the ellipse
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function vignetteImage($blackPoint, $whitePoint, $x, $y){}

    /**
     * Applies a wave filter to the image.
     * 
     * @param float $amplitude The amplitude of the wave.
     * @param float $length The length of the wave.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function waveImage($amplitude, $length){}

    /**
     * Is like Imagick::ThresholdImage() but force all pixels above the
     * threshold into white while leaving all pixels below the threshold
     * unchanged.
     * 
     * @param mixed $threshold
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function whiteThresholdImage($threshold){}

    /**
     * Writes an image to the specified filename. If the filename parameter
     * is NULL, the image is written to the filename set by
     * Imagick::ReadImage() or Imagick::SetImageFilename().
     * 
     * @param string $filename
     * @return bool
     **/
    function writeImage($filename){}

    /**
     * Writes the image sequence to an open filehandle. The handle must be
     * opened with for example fopen.
     * 
     * @param resource $filehandle Filehandle where to write the image
     * @return bool
     **/
    function writeImageFile($filehandle){}

    /**
     * Writes an image or image sequence.
     * 
     * @param string $filename
     * @param bool $adjoin
     * @return bool
     **/
    function writeImages($filename, $adjoin){}

    /**
     * Writes all image frames into an open filehandle. This method can be
     * used to write animated gifs or other multiframe images into open
     * filehandle.
     * 
     * @param resource $filehandle Filehandle where to write the images
     * @return bool
     **/
    function writeImagesFile($filehandle){}

    /**
     * The Imagick constructor
     * 
     * @param mixed $files The path to an image to load or array of paths
     * @return Imagick
     **/
    function __construct($files){}

}
class ImagickDraw {
    /**
     * Adjusts the current affine transformation matrix with the specified
     * affine transformation matrix.
     * 
     * @param array $affine Affine matrix parameters
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function affine($affine){}

    /**
     * Draws text on the image.
     * 
     * @param float $x The x coordinate where text is drawn
     * @param float $y The y coordinate where text is drawn
     * @param string $text The text to draw on the image
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function annotation($x, $y, $text){}

    /**
     * Draws an arc falling within a specified bounding rectangle on the
     * image.
     * 
     * @param float $sx Starting x ordinate of bounding rectangle
     * @param float $sy starting y ordinate of bounding rectangle
     * @param float $ex ending x ordinate of bounding rectangle
     * @param float $ey ending y ordinate of bounding rectangle
     * @param float $sd starting degrees of rotation
     * @param float $ed ending degrees of rotation
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function arc($sx, $sy, $ex, $ey, $sd, $ed){}

    /**
     * Draws a bezier curve through a set of points on the image.
     * 
     * @param array $coordinates Multidimensional array like array( array(
     *   'x' => 1, 'y' => 2 ), array( 'x' => 3, 'y' => 4 ) )
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function bezier($coordinates){}

    /**
     * Draws a circle on the image.
     * 
     * @param float $ox origin x coordinate
     * @param float $oy origin y coordinate
     * @param float $px perimeter x coordinate
     * @param float $py perimeter y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function circle($ox, $oy, $px, $py){}

    /**
     * Clears the ImagickDraw object of any accumulated commands, and resets
     * the settings it contains to their defaults.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clear(){}

    /**
     * Draws color on image using the current fill color, starting at
     * specified position, and using specified paint method.
     * 
     * @param float $x x coordinate of the paint
     * @param float $y y coordinate of the paint
     * @param int $paintMethod one of the PAINT_ constants
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function color($x, $y, $paintMethod){}

    /**
     * Adds a comment to a vector output stream.
     * 
     * @param string $comment The comment string to add to vector output
     *   stream
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function comment($comment){}

    /**
     * Composites an image onto the current image, using the specified
     * composition operator, specified position, and at the specified size.
     * 
     * @param int $compose composition operator. One of COMPOSITE_
     *   constants
     * @param float $x x coordinate of the top left corner
     * @param float $y y coordinate of the top left corner
     * @param float $width width of the composition image
     * @param float $height height of the composition image
     * @param Imagick $compositeWand the Imagick object where composition
     *   image is taken from
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function composite($compose, $x, $y, $width, $height, $compositeWand){}

    /**
     * Frees all resources associated with the ImagickDraw object.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function destroy(){}

    /**
     * Draws an ellipse on the image.
     * 
     * @param float $ox
     * @param float $oy
     * @param float $rx
     * @param float $ry
     * @param float $start
     * @param float $end
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function ellipse($ox, $oy, $rx, $ry, $start, $end){}

    /**
     * Obtains the current clipping path ID.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getClipPath(){}

    /**
     * Returns the current polygon fill rule to be used by the clipping path.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getClipRule(){}

    /**
     * Returns the interpretation of clip path units.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getClipUnits(){}

    /**
     * Returns the fill color used for drawing filled objects.
     * 
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getFillColor(){}

    /**
     * Returns the opacity used when drawing using the fill color or fill
     * texture. Fully opaque is 1.0.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getFillOpacity(){}

    /**
     * Returns the fill rule used while drawing polygons.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getFillRule(){}

    /**
     * Returns a string specifying the font used when annotating with text.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getFont(){}

    /**
     * Returns the font family to use when annotating with text.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getFontFamily(){}

    /**
     * Returns the font pointsize used when annotating with text.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getFontSize(){}

    /**
     * Returns the font style used when annotating with text.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getFontStyle(){}

    /**
     * Returns the font weight used when annotating with text.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getFontWeight(){}

    /**
     * Returns the text placement gravity used when annotating with text.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getGravity(){}

    /**
     * Returns the current stroke antialias setting. Stroked outlines are
     * antialiased by default. When antialiasing is disabled stroked pixels
     * are thresholded to determine if the stroke color or underlying canvas
     * color should be used.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function getStrokeAntialias(){}

    /**
     * Returns the color used for stroking object outlines.
     * 
     * @param ImagickPixel $stroke_color
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getStrokeColor($stroke_color){}

    /**
     * Returns an array representing the pattern of dashes and gaps used to
     * stroke paths.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getStrokeDashArray(){}

    /**
     * Returns the offset into the dash pattern to start the dash.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getStrokeDashOffset(){}

    /**
     * Returns the shape to be used at the end of open subpaths when they are
     * stroked.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getStrokeLineCap(){}

    /**
     * Returns the shape to be used at the corners of paths (or other vector
     * shapes) when they are stroked.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getStrokeLineJoin(){}

    /**
     * Returns the miter limit. When two line segments meet at a sharp angle
     * and miter joins have been specified for 'lineJoin', it is possible for
     * the miter to extend far beyond the thickness of the line stroking the
     * path. The 'miterLimit' imposes a limit on the ratio of the miter
     * length to the 'lineWidth'.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getStrokeMiterLimit(){}

    /**
     * Returns the opacity of stroked object outlines.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getStrokeOpacity(){}

    /**
     * Returns the width of the stroke used to draw object outlines.
     * 
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getStrokeWidth(){}

    /**
     * Returns the alignment applied when annotating with text.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getTextAlignment(){}

    /**
     * Returns the current text antialias setting, which determines whether
     * text is antialiased. Text is antialiased by default.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function getTextAntialias(){}

    /**
     * Returns the decoration applied when annotating with text.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getTextDecoration(){}

    /**
     * Returns a string which specifies the code set used for text
     * annotations.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getTextEncoding(){}

    /**
     * Returns the color of a background rectangle to place under text
     * annotations.
     * 
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function getTextUnderColor(){}

    /**
     * Returns a string which specifies the vector graphics generated by any
     * graphics calls made since the ImagickDraw object was instantiated.
     * 
     * @return string
     * @since PECL imagick 2.0.0
     **/
    function getVectorGraphics(){}

    /**
     * Draws a line on the image using the current stroke color, stroke
     * opacity, and stroke width.
     * 
     * @param float $sx starting x coordinate
     * @param float $sy starting y coordinate
     * @param float $ex ending x coordinate
     * @param float $ey ending y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function line($sx, $sy, $ex, $ey){}

    /**
     * Paints on the image's opacity channel in order to set effected pixels
     * to transparent, to influence the opacity of pixels.
     * 
     * @param float $x x coordinate of the matte
     * @param float $y y coordinate of the matte
     * @param int $paintMethod PAINT_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function matte($x, $y, $paintMethod){}

    /**
     * Adds a path element to the current path which closes the current
     * subpath by drawing a straight line from the current point to the
     * current subpath's most recent starting point (usually, the most recent
     * moveto point).
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathClose(){}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point at the beginning of the curve and (x2,y2)
     * as the control point at the end of the curve using absolute
     * coordinates. At the end of the command, the new current point becomes
     * the final (x,y) coordinate pair used in the polybezier.
     * 
     * @param float $x1 x coordinate of the first control point
     * @param float $y1 y coordinate of the first control point
     * @param float $x2 x coordinate of the second control point
     * @param float $y2 y coordinate of the first control point
     * @param float $x x coordinate of the curve end
     * @param float $y y coordinate of the curve end
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToAbsolute($x1, $y1, $x2, $y2, $x, $y){}

    /**
     * Draws a quadratic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point using absolute coordinates. At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     * 
     * @param float $x1 x coordinate of the control point
     * @param float $y1 y coordinate of the control point
     * @param float $x x coordinate of the end point
     * @param float $y y coordinate of the end point
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToQuadraticBezierAbsolute($x1, $y1, $x, $y){}

    /**
     * Draws a quadratic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point using relative coordinates. At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     * 
     * @param float $x1 starting x coordinate
     * @param float $y1 starting y coordinate
     * @param float $x ending x coordinate
     * @param float $y ending y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToQuadraticBezierRelative($x1, $y1, $x, $y){}

    /**
     * Draws a quadratic Bezier curve (using absolute coordinates) from the
     * current point to (x,y). The control point is assumed to be the
     * reflection of the control point on the previous command relative to
     * the current point. (If there is no previous command or if the previous
     * command was not a DrawPathCurveToQuadraticBezierAbsolute,
     * DrawPathCurveToQuadraticBezierRelative,
     * DrawPathCurveToQuadraticBezierSmoothAbsolut or
     * DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point
     * is coincident with the current point.). At the end of the command, the
     * new current point becomes the final (x,y) coordinate pair used in the
     * polybezier.
     * 
     * @param float $x ending x coordinate
     * @param float $y ending y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToQuadraticBezierSmoothAbsolute($x, $y){}

    /**
     * Draws a quadratic Bezier curve (using relative coordinates) from the
     * current point to (x, y). The control point is assumed to be the
     * reflection of the control point on the previous command relative to
     * the current point. (If there is no previous command or if the previous
     * command was not a DrawPathCurveToQuadraticBezierAbsolute,
     * DrawPathCurveToQuadraticBezierRelative,
     * DrawPathCurveToQuadraticBezierSmoothAbsolut or
     * DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point
     * is coincident with the current point). At the end of the command, the
     * new current point becomes the final (x, y) coordinate pair used in the
     * polybezier.
     * 
     * @param float $x ending x coordinate
     * @param float $y ending y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToQuadraticBezierSmoothRelative($x, $y){}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * (x1,y1) as the control point at the beginning of the curve and (x2,y2)
     * as the control point at the end of the curve using relative
     * coordinates. At the end of the command, the new current point becomes
     * the final (x,y) coordinate pair used in the polybezier.
     * 
     * @param float $x1 x coordinate of starting control point
     * @param float $y1 y coordinate of starting control point
     * @param float $x2 x coordinate of ending control point
     * @param float $y2 y coordinate of ending control point
     * @param float $x ending x coordinate
     * @param float $y ending y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToRelative($x1, $y1, $x2, $y2, $x, $y){}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * absolute coordinates. The first control point is assumed to be the
     * reflection of the second control point on the previous command
     * relative to the current point. (If there is no previous command or if
     * the previous command was not an DrawPathCurveToAbsolute,
     * DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or
     * DrawPathCurveToSmoothRelative, assume the first control point is
     * coincident with the current point.) (x2,y2) is the second control
     * point (i.e., the control point at the end of the curve). At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     * 
     * @param float $x2 x coordinate of the second control point
     * @param float $y2 y coordinate of the second control point
     * @param float $x x coordinate of the ending point
     * @param float $y y coordinate of the ending point
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToSmoothAbsolute($x2, $y2, $x, $y){}

    /**
     * Draws a cubic Bezier curve from the current point to (x,y) using
     * relative coordinates. The first control point is assumed to be the
     * reflection of the second control point on the previous command
     * relative to the current point. (If there is no previous command or if
     * the previous command was not an DrawPathCurveToAbsolute,
     * DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or
     * DrawPathCurveToSmoothRelative, assume the first control point is
     * coincident with the current point.) (x2,y2) is the second control
     * point (i.e., the control point at the end of the curve). At the end of
     * the command, the new current point becomes the final (x,y) coordinate
     * pair used in the polybezier.
     * 
     * @param float $x2 x coordinate of the second control point
     * @param float $y2 y coordinate of the second control point
     * @param float $x x coordinate of the ending point
     * @param float $y y coordinate of the ending point
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathCurveToSmoothRelative($x2, $y2, $x, $y){}

    /**
     * Draws an elliptical arc from the current point to (x, y) using
     * absolute coordinates. The size and orientation of the ellipse are
     * defined by two radii (rx, ry) and an xAxisRotation, which indicates
     * how the ellipse as a whole is rotated relative to the current
     * coordinate system. The center (cx, cy) of the ellipse is calculated
     * automatically to satisfy the constraints imposed by the other
     * parameters. largeArcFlag and sweepFlag contribute to the automatic
     * calculations and help determine how the arc is drawn. If largeArcFlag
     * is then draw the larger of the available arcs. If sweepFlag is true,
     * then draw the arc matching a clock-wise rotation.
     * 
     * @param float $rx x radius
     * @param float $ry y radius
     * @param float $x_axis_rotation x axis rotation
     * @param bool $large_arc_flag large arc flag
     * @param bool $sweep_flag sweep flag
     * @param float $x x coordinate
     * @param float $y y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathEllipticArcAbsolute($rx, $ry, $x_axis_rotation, $large_arc_flag, $sweep_flag, $x, $y){}

    /**
     * Draws an elliptical arc from the current point to (x, y) using
     * relative coordinates. The size and orientation of the ellipse are
     * defined by two radii (rx, ry) and an xAxisRotation, which indicates
     * how the ellipse as a whole is rotated relative to the current
     * coordinate system. The center (cx, cy) of the ellipse is calculated
     * automatically to satisfy the constraints imposed by the other
     * parameters. largeArcFlag and sweepFlag contribute to the automatic
     * calculations and help determine how the arc is drawn. If largeArcFlag
     * is then draw the larger of the available arcs. If sweepFlag is true,
     * then draw the arc matching a clock-wise rotation.
     * 
     * @param float $rx x radius
     * @param float $ry y radius
     * @param float $x_axis_rotation x axis rotation
     * @param bool $large_arc_flag large arc flag
     * @param bool $sweep_flag sweep flag
     * @param float $x x coordinate
     * @param float $y y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathEllipticArcRelative($rx, $ry, $x_axis_rotation, $large_arc_flag, $sweep_flag, $x, $y){}

    /**
     * Terminates the current path.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathFinish(){}

    /**
     * Draws a line path from the current point to the given coordinate using
     * absolute coordinates. The coordinate then becomes the new current
     * point.
     * 
     * @param float $x starting x coordinate
     * @param float $y ending x coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathLineToAbsolute($x, $y){}

    /**
     * Draws a horizontal line path from the current point to the target
     * point using absolute coordinates. The target point then becomes the
     * new current point.
     * 
     * @param float $x x coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathLineToHorizontalAbsolute($x){}

    /**
     * Draws a horizontal line path from the current point to the target
     * point using relative coordinates. The target point then becomes the
     * new current point.
     * 
     * @param float $x x coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathLineToHorizontalRelative($x){}

    /**
     * Draws a line path from the current point to the given coordinate using
     * relative coordinates. The coordinate then becomes the new current
     * point.
     * 
     * @param float $x starting x coordinate
     * @param float $y starting y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathLineToRelative($x, $y){}

    /**
     * Draws a vertical line path from the current point to the target point
     * using absolute coordinates. The target point then becomes the new
     * current point.
     * 
     * @param float $y y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathLineToVerticalAbsolute($y){}

    /**
     * Draws a vertical line path from the current point to the target point
     * using relative coordinates. The target point then becomes the new
     * current point.
     * 
     * @param float $y y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathLineToVerticalRelative($y){}

    /**
     * Starts a new sub-path at the given coordinate using absolute
     * coordinates. The current point then becomes the specified coordinate.
     * 
     * @param float $x x coordinate of the starting point
     * @param float $y y coordinate of the starting point
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathMoveToAbsolute($x, $y){}

    /**
     * Starts a new sub-path at the given coordinate using relative
     * coordinates. The current point then becomes the specified coordinate.
     * 
     * @param float $x target x coordinate
     * @param float $y target y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathMoveToRelative($x, $y){}

    /**
     * Declares the start of a path drawing list which is terminated by a
     * matching DrawPathFinish() command. All other DrawPath commands must be
     * enclosed between a and a DrawPathFinish() command. This is because
     * path drawing commands are subordinate commands and they do not
     * function by themselves.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pathStart(){}

    /**
     * Draws a point using the current stroke color and stroke thickness at
     * the specified coordinates.
     * 
     * @param float $x point's x coordinate
     * @param float $y point's y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function point($x, $y){}

    /**
     * Draws a polygon using the current stroke, stroke width, and fill color
     * or texture, using the specified array of coordinates.
     * 
     * @param array $coordinates multidimensional array like array( array(
     *   'x' => 3, 'y' => 4 ), array( 'x' => 2, 'y' => 6 ) );
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function polygon($coordinates){}

    /**
     * Draws a polyline using the current stroke, stroke width, and fill
     * color or texture, using the specified array of coordinates.
     * 
     * @param array $coordinates array of x and y coordinates: array(
     *   array( 'x' => 4, 'y' => 6 ), array( 'x' => 8, 'y' => 10 ) )
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function polyline($coordinates){}

    /**
     * Destroys the current ImagickDraw in the stack, and returns to the
     * previously pushed ImagickDraw. Multiple ImagickDraws may exist. It is
     * an error to attempt to pop more ImagickDraws than have been pushed,
     * and it is proper form to pop all ImagickDraws which have been pushed.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pop(){}

    /**
     * Terminates a clip path definition.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function popClipPath(){}

    /**
     * Terminates a definition list.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function popDefs(){}

    /**
     * Terminates a pattern definition.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function popPattern(){}

    /**
     * Clones the current ImagickDraw to create a new ImagickDraw, which is
     * then added to the ImagickDraw stack. The original drawing
     * ImagickDraw(s) may be returned to by invoking pop(). The ImagickDraws
     * are stored on a ImagickDraw stack. For every Pop there must have
     * already been an equivalent Push.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function push(){}

    /**
     * Starts a clip path definition which is comprised of any number of
     * drawing commands and terminated by a ImagickDraw::popClipPath()
     * command.
     * 
     * @param string $clip_mask_id Clip mask Id
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pushClipPath($clip_mask_id){}

    /**
     * Indicates that commands up to a terminating ImagickDraw::popDefs()
     * command create named elements (e.g. clip-paths, textures, etc.) which
     * may safely be processed earlier for the sake of efficiency.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pushDefs(){}

    /**
     * Indicates that subsequent commands up to a DrawPopPattern() command
     * comprise the definition of a named pattern. The pattern space is
     * assigned top left corner coordinates, a width and height, and becomes
     * its own drawing space. Anything which can be drawn may be used in a
     * pattern definition. Named patterns may be used as stroke or brush
     * definitions.
     * 
     * @param string $pattern_id the pattern Id
     * @param float $x x coordinate of the top-left corner
     * @param float $y y coordinate of the top-left corner
     * @param float $width width of the pattern
     * @param float $height height of the pattern
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function pushPattern($pattern_id, $x, $y, $width, $height){}

    /**
     * Draws a rectangle given two coordinates and using the current stroke,
     * stroke width, and fill settings.
     * 
     * @param float $x1 x coordinate of the top left corner
     * @param float $y1 y coordinate of the top left corner
     * @param float $x2 x coordinate of the bottom right corner
     * @param float $y2 y coordinate of the bottom right corner
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function rectangle($x1, $y1, $x2, $y2){}

    /**
     * Renders all preceding drawing commands onto the image.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function render(){}

    /**
     * Applies the specified rotation to the current coordinate space.
     * 
     * @param float $degrees degrees to rotate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function rotate($degrees){}

    /**
     * Draws a rounded rectangle given two coordinates, x & y corner radiuses
     * and using the current stroke, stroke width, and fill settings.
     * 
     * @param float $x1 x coordinate of the top left corner
     * @param float $y1 y coordinate of the top left corner
     * @param float $x2 x coordinate of the bottom right
     * @param float $y2 y coordinate of the bottom right
     * @param float $rx x rounding
     * @param float $ry y rounding
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function roundRectangle($x1, $y1, $x2, $y2, $rx, $ry){}

    /**
     * Adjusts the scaling factor to apply in the horizontal and vertical
     * directions to the current coordinate space.
     * 
     * @param float $x horizontal factor
     * @param float $y vertical factor
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function scale($x, $y){}

    /**
     * Associates a named clipping path with the image. Only the areas drawn
     * on by the clipping path will be modified as long as it remains in
     * effect.
     * 
     * @param string $clip_mask the clipping path name
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setClipPath($clip_mask){}

    /**
     * Set the polygon fill rule to be used by the clipping path.
     * 
     * @param int $fill_rule FILLRULE_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setClipRule($fill_rule){}

    /**
     * Sets the interpretation of clip path units.
     * 
     * @param int $clip_units the number of clip units
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setClipUnits($clip_units){}

    /**
     * Sets the opacity to use when drawing using the fill color or fill
     * texture. Fully opaque is 1.0.
     * 
     * @param float $opacity fill alpha
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFillAlpha($opacity){}

    /**
     * Sets the fill color to be used for drawing filled objects.
     * 
     * @param ImagickPixel $fill_pixel ImagickPixel to use to set the color
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFillColor($fill_pixel){}

    /**
     * Sets the opacity to use when drawing using the fill color or fill
     * texture. Fully opaque is 1.0.
     * 
     * @param float $fillOpacity the fill opacity
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFillOpacity($fillOpacity){}

    /**
     * Sets the URL to use as a fill pattern for filling objects. Only local
     * URLs ("#identifier") are supported at this time. These local URLs are
     * normally created by defining a named fill pattern with
     * DrawPushPattern/DrawPopPattern.
     * 
     * @param string $fill_url URL to use to obtain fill pattern.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFillPatternURL($fill_url){}

    /**
     * Sets the fill rule to use while drawing polygons.
     * 
     * @param int $fill_rule FILLRULE_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFillRule($fill_rule){}

    /**
     * Sets the fully-specified font to use when annotating with text.
     * 
     * @param string $font_name
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFont($font_name){}

    /**
     * Sets the font family to use when annotating with text.
     * 
     * @param string $font_family the font family
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFontFamily($font_family){}

    /**
     * Sets the font pointsize to use when annotating with text.
     * 
     * @param float $pointsize the point size
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFontSize($pointsize){}

    /**
     * Sets the font stretch to use when annotating with text. The AnyStretch
     * enumeration acts as a wild-card "don't care" option.
     * 
     * @param int $fontStretch STRETCH_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFontStretch($fontStretch){}

    /**
     * Sets the font style to use when annotating with text. The AnyStyle
     * enumeration acts as a wild-card "don't care" option.
     * 
     * @param int $style STYLETYPE_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFontStyle($style){}

    /**
     * Sets the font weight to use when annotating with text.
     * 
     * @param int $font_weight
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setFontWeight($font_weight){}

    /**
     * Sets the text placement gravity to use when annotating with text.
     * 
     * @param int $gravity GRAVITY_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setGravity($gravity){}

    /**
     * Specifies the opacity of stroked object outlines.
     * 
     * @param float $opacity opacity
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeAlpha($opacity){}

    /**
     * Controls whether stroked outlines are antialiased. Stroked outlines
     * are antialiased by default. When antialiasing is disabled stroked
     * pixels are thresholded to determine if the stroke color or underlying
     * canvas color should be used.
     * 
     * @param bool $stroke_antialias the antialias setting
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeAntialias($stroke_antialias){}

    /**
     * Sets the color used for stroking object outlines.
     * 
     * @param ImagickPixel $stroke_pixel the stroke color
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeColor($stroke_pixel){}

    /**
     * Specifies the pattern of dashes and gaps used to stroke paths. The
     * strokeDashArray represents an array of numbers that specify the
     * lengths of alternating dashes and gaps in pixels. If an odd number of
     * values is provided, then the list of values is repeated to yield an
     * even number of values. To remove an existing dash array, pass a zero
     * number_elements argument and null dash_array. A typical
     * strokeDashArray_ array might contain the members 5 3 2.
     * 
     * @param array $dashArray array of floats
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeDashArray($dashArray){}

    /**
     * Specifies the offset into the dash pattern to start the dash.
     * 
     * @param float $dash_offset dash offset
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeDashOffset($dash_offset){}

    /**
     * Specifies the shape to be used at the end of open subpaths when they
     * are stroked.
     * 
     * @param int $linecap LINECAP_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeLineCap($linecap){}

    /**
     * Specifies the shape to be used at the corners of paths (or other
     * vector shapes) when they are stroked.
     * 
     * @param int $linejoin LINEJOIN_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeLineJoin($linejoin){}

    /**
     * Specifies the miter limit. When two line segments meet at a sharp
     * angle and miter joins have been specified for 'lineJoin', it is
     * possible for the miter to extend far beyond the thickness of the line
     * stroking the path. The miterLimit' imposes a limit on the ratio of the
     * miter length to the 'lineWidth'.
     * 
     * @param int $miterlimit the miter limit
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeMiterLimit($miterlimit){}

    /**
     * Specifies the opacity of stroked object outlines.
     * 
     * @param float $stroke_opacity stroke opacity. 1.0 is fully opaque
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeOpacity($stroke_opacity){}

    /**
     * Sets the pattern used for stroking object outlines.
     * 
     * @param string $stroke_url stroke URL
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokePatternURL($stroke_url){}

    /**
     * Sets the width of the stroke used to draw object outlines.
     * 
     * @param float $stroke_width stroke width
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setStrokeWidth($stroke_width){}

    /**
     * Specifies a text alignment to be applied when annotating with text.
     * 
     * @param int $alignment ALIGN_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setTextAlignment($alignment){}

    /**
     * Controls whether text is antialiased. Text is antialiased by default.
     * 
     * @param bool $antiAlias
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setTextAntialias($antiAlias){}

    /**
     * Specifies a decoration to be applied when annotating with text.
     * 
     * @param int $decoration DECORATION_ constant
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setTextDecoration($decoration){}

    /**
     * Specifies specifies the code set to use for text annotations. The only
     * character encoding which may be specified at this time is "UTF-8" for
     * representing Unicode as a sequence of bytes. Specify an empty string
     * to set text encoding to the system's default. Successful text
     * annotation using Unicode may require fonts designed to support
     * Unicode.
     * 
     * @param string $encoding the encoding name
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setTextEncoding($encoding){}

    /**
     * Specifies the color of a background rectangle to place under text
     * annotations.
     * 
     * @param ImagickPixel $under_color the under color
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setTextUnderColor($under_color){}

    /**
     * Sets the vector graphics associated with the specified ImagickDraw
     * object. Use this method with ImagickDraw::getVectorGraphics() as a
     * method to persist the vector graphics state.
     * 
     * @param string $xml xml containing the vector graphics
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setVectorGraphics($xml){}

    /**
     * Sets the overall canvas size to be recorded with the drawing vector
     * data. Usually this will be specified using the same size as the canvas
     * image. When the vector data is saved to SVG or MVG formats, the
     * viewbox is use to specify the size of the canvas image that a viewer
     * will render the vector data on.
     * 
     * @param int $x1 left x coordinate
     * @param int $y1 left y coordinate
     * @param int $x2 right x coordinate
     * @param int $y2 right y coordinate
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setViewbox($x1, $y1, $x2, $y2){}

    /**
     * Skews the current coordinate system in the horizontal direction.
     * 
     * @param float $degrees degrees to skew
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function skewX($degrees){}

    /**
     * Skews the current coordinate system in the vertical direction.
     * 
     * @param float $degrees degrees to skew
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function skewY($degrees){}

    /**
     * Applies a translation to the current coordinate system which moves the
     * coordinate system origin to the specified coordinate.
     * 
     * @param float $x horizontal translation
     * @param float $y vertical translation
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function translate($x, $y){}

    /**
     * The ImagickDraw constructor
     * 
     * @return ImagickDraw
     **/
    function __construct(){}

}
class ImagickPixel {
    /**
     * Clears the ImagickPixel object, leaving it in a fresh state. This also
     * unsets any color associated with the object.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clear(){}

    /**
     * Deallocates any resources used by the ImagickPixel object, and unsets
     * any associated color. The object should not be used after the destroy
     * function has been called.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function destroy(){}

    /**
     * Returns the color described by the ImagickPixel object, as an array.
     * If the color has an opacity channel set, this is provided as a fourth
     * value in the list.
     * 
     * @param bool $normalized Normalize the color values
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getColor($normalized){}

    /**
     * Returns the color of the ImagickPixel object as a string.
     * 
     * @return string
     * @since PECL imagick 2.1.0
     **/
    function getColorAsString(){}

    /**
     * Returns the color count associated with this color.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getColorCount(){}

    /**
     * Retrieves the value of the color channel specified, as a
     * floating-point number between 0 and 1.
     * 
     * @param int $color The channel to check, specified as one of the
     *   Imagick channel constants.
     * @return float
     * @since PECL imagick 2.0.0
     **/
    function getColorValue($color){}

    /**
     * Returns the normalized HSL color described by the ImagickPixel object,
     * with each of the three values as floating point numbers between 0.0
     * and 1.0.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getHSL(){}

    /**
     * Checks the distance between the color described by this ImagickPixel
     * object and that of the provided object, by plotting their RGB values
     * on the color cube. If the distance between the two points is less than
     * the fuzz value given, the colors are similar.
     * 
     * @param ImagickPixel $color The ImagickPixel object to compare this
     *   object against.
     * @param float $fuzz The maximum distance within which to consider
     *   these colors as similar. The theoretical maximum for this value is
     *   the square root of three (1.732).
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function isSimilar($color, $fuzz){}

    /**
     * Sets the color described by the ImagickPixel object, with a string
     * (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)",
     * etc.).
     * 
     * @param string $color The color definition to use in order to
     *   initialise the ImagickPixel object.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setColor($color){}

    /**
     * Sets the value of the specified channel of this object to the provided
     * value, which should be between 0 and 1. This function can be used to
     * provide an opacity channel to an ImagickPixel object.
     * 
     * @param int $color One of the Imagick channel color constants.
     * @param float $value The value to set this channel to, ranging from 0
     *   to 1.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setColorValue($color, $value){}

    /**
     * Sets the color described by the ImagickPixel object using normalized
     * values for hue, saturation and luminosity.
     * 
     * @param float $hue The normalized value for hue, described as a
     *   fractional arc (between 0 and 1) of the hue circle, where the zero
     *   value is red.
     * @param float $saturation The normalized value for saturation, with 1
     *   as full saturation.
     * @param float $luminosity The normalized value for luminosity, on a
     *   scale from black at 0 to white at 1, with the full HS value at 0.5
     *   luminosity.
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setHSL($hue, $saturation, $luminosity){}

    /**
     * Constructs an ImagickPixel object. If a color is specified, the object
     * is constructed and then initialised with that color before being
     * returned.
     * 
     * @param string $color The optional color string to use as the initial
     *   value of this object.
     * @return ImagickPixel
     * @since PECL imagick 2.0.0
     **/
    function __construct($color){}

}
class ImagickPixelIterator {
    /**
     * Clear resources associated with a PixelIterator.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function clear(){}

    /**
     * Deallocates resources associated with a PixelIterator.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function destroy(){}

    /**
     * Returns the current row as an array of ImagickPixel objects from the
     * pixel iterator.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getCurrentIteratorRow(){}

    /**
     * Returns the current pixel iterator row.
     * 
     * @return int
     * @since PECL imagick 2.0.0
     **/
    function getIteratorRow(){}

    /**
     * Returns the next row as an array of pixel wands from the pixel
     * iterator.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getNextIteratorRow(){}

    /**
     * Returns the previous row as an array of pixel wands from the pixel
     * iterator.
     * 
     * @return array
     * @since PECL imagick 2.0.0
     **/
    function getPreviousIteratorRow(){}

    /**
     * Returns a new pixel iterator.
     * 
     * @param Imagick $wand
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function newPixelIterator($wand){}

    /**
     * Returns a new pixel iterator.
     * 
     * @param Imagick $wand
     * @param int $x
     * @param int $y
     * @param int $columns
     * @param int $rows
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function newPixelRegionIterator($wand, $x, $y, $columns, $rows){}

    /**
     * Resets the pixel iterator. Use it in conjunction with
     * ImagickPixelIterator::getNextIteratorRow() to iterate over all the
     * pixels in a pixel container.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function resetIterator(){}

    /**
     * Sets the pixel iterator to the first pixel row.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setIteratorFirstRow(){}

    /**
     * Sets the pixel iterator to the last pixel row.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setIteratorLastRow(){}

    /**
     * Set the pixel iterator row.
     * 
     * @param int $row
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function setIteratorRow($row){}

    /**
     * Syncs the pixel iterator.
     * 
     * @return bool
     * @since PECL imagick 2.0.0
     **/
    function syncIterator(){}

    /**
     * The ImagickPixelIterator constructor
     * 
     * @param Imagick $wand
     * @return ImagickPixelIterator
     * @since PECL imagick 2.0.0
     **/
    function __construct($wand){}

}
/**
 * The allows one to infinitely iterate over an iterator without having
 * to manually rewind the iterator upon reaching its end.
 **/
class InfiniteIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Moves the inner Iterator forward to its next element if there is one,
     * otherwise rewinds the inner Iterator back to the beginning.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Constructs an InfiniteIterator from an Iterator.
     * 
     * @param Iterator $iterator The iterator to infinitely iterate over.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator){}

}
class IntlDateFormatter {
    /**
     * Create a date formatter
     * 
     * @param string $locale Locale to use when formatting or parsing.
     * @param int $datetype Date type to use (none, short, medium, long,
     *   full). This is one of the IntlDateFormatter constants.
     * @param int $timetype Time type to use (none, short, medium, long,
     *   full). This is one of the IntlDateFormatter constants.
     * @param string $timezone Time zone ID, default is system default.
     * @param int $calendar Calendar to use for formatting or parsing;
     *   default is Gregorian. This is one of the IntlDateFormatter calendar
     *   constants.
     * @param string $pattern Optional pattern to use when formatting or
     *   parsing. Possible patterns are documented at .
     * @return IntlDateFormatter
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function create($locale, $datetype, $timetype, $timezone, $calendar, $pattern){}

    /**
     * Formats the time value as a string.
     * 
     * @param mixed $value The date formatter resource.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function format($value){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getCalendar(){}

    /**
     * Returns date type used by the formatter.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDateType(){}

    /**
     * Get the error code from last operation. Returns error code from the
     * last number formatting operation.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorCode(){}

    /**
     * Get the error text from the last operation.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorMessage(){}

    /**
     * Get locale used by the formatter.
     * 
     * @param int $which The formatter resource
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getLocale($which){}

    /**
     * Get pattern used by the formatter.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getPattern(){}

    /**
     * Return time type used by the formatter.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getTimeType(){}

    /**
     * Get the timezone-id used for the IntlDateFormatter.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getTimeZoneId(){}

    /**
     * Check if the parser is strict or lenient in interpreting inputs that
     * do not match the pattern exactly.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function isLenient(){}

    /**
     * Converts string $value to a field-based time value ( an array of
     * various fields), starting at $parse_pos and consuming as much of the
     * input value as possible.
     * 
     * @param string $value The formatter resource
     * @param int $position string to convert to a time
     * @return array
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function localtime($value, &$position){}

    /**
     * Converts string $value to an incremental time value, starting at
     * $parse_pos and consuming as much of the input value as possible.
     * 
     * @param string $value The formatter resource
     * @param int $position string to convert to a time
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function parse($value, &$position){}

    /**
     * Sets the calendar used by the formatter.
     * 
     * @param int $which The formatter resource.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setCalendar($which){}

    /**
     * Define if the parser is strict or lenient in interpreting inputs that
     * do not match the pattern exactly. Enabling lenient parsing allows the
     * parser to accept otherwise flawed date or time patterns, parsing as
     * much as possible to obtain a value. Extra space, unrecognized tokens,
     * or invalid values ("February 30th") are not accepted.
     * 
     * @param bool $lenient The formatter resource
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setLenient($lenient){}

    /**
     * Set the pattern used for the IntlDateFormatter.
     * 
     * @param string $pattern The formatter resource.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setPattern($pattern){}

    /**
     * Sets the time zone to use.
     * 
     * @param string $zone The formatter resource.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setTimeZoneId($zone){}

}
/**
 * Exception thrown if an argument does not match with the expected value
 **/
class InvalidArgumentException extends LogicException {
}
/**
 * Interface for external iterators or objects that can be iterated
 * themselves internally.
 **/
interface Iterator extends Traversable {
    /**
     * Returns the current element.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function current();

    /**
     * Returns the key of the current element.
     * 
     * @return scalar
     * @since PHP 5 >= 5.1.0
     **/
    function key();

    /**
     * Moves the current position to the next element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next();

    /**
     * Rewinds back to the first element of the Iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind();

    /**
     * This method is called after Iterator::rewind and Iterator::next to
     * check if the current position is valid.
     * 
     * @return boolean
     * @since PHP 5 >= 5.1.0
     **/
    function valid();

}
/**
 * Interface to create an external Iterator.
 **/
interface IteratorAggregate extends Traversable {
    /**
     * Returns an external iterator.
     * 
     * @return Traversable
     * @since PHP 5 >= 5.1.0
     **/
    function getIterator();

}
/**
 * This iterator wrapper allows the conversion of anything that is into
 * an Iterator. It is important to understand that most classes that do
 * not implement Iterators have reasons as most likely they do not allow
 * the full Iterator feature set. If so, techniques should be provided to
 * prevent misuse, otherwise expect exceptions or fatal errors.
 **/
class IteratorIterator implements Iterator, Traversable, OuterIterator {
    /**
     * Get the value of the current element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * Get the inner iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator(){}

    /**
     * Get the key of the current element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Forward to the next element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Rewinds to the first element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Checks if the iterator is valid.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

    /**
     * Creates an iterator from anything that is traversable.
     * 
     * @param Traversable $iterator The traversable iterator.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator){}

}
interface KTaglib_ID3v2_AttachedPictureFrame {
    const Artist = 0;
    const BackCover = 0;
    const Band = 0;
    const BandLogo = 0;
    const ColouredFish = 0;
    const Composer = 0;
    const Conductor = 0;
    const DuringPerformance = 0;
    const DuringRecording = 0;
    const FileIcon = 0;
    const FrontCover = 0;
    const Illustration = 0;
    const LeadArtist = 0;
    const LeafletPage = 0;
    const Lyricist = 0;
    const Media = 0;
    const MovieScreenCapture = 0;
    const Other = 0;
    const OtherFileIcon = 0;
    const RecordingLocation = 0;
    /**
     * Returns the attached description for a picture frame in an ID3v2.x
     * frame.
     * 
     * @return string
     * @since 0.0.1
     **/
    function getDescription();

    /**
     * Sets the mime type of the image. This should in most cases be
     * "image/png" or "image/jpeg".
     * 
     * @param string $type
     * @return string
     * @since 0.2.0
     **/
    function getMimeType($type);

    /**
     * Returns the type of the image.
     * 
     * The ID3v2 specification allows an AttachedPictureFrame to set the type
     * of an image. This can be e.g. FrontCover or FileIcon. Please refer to
     * the KTagLib_ID3v2_AttachedPictureFrame class description for a list of
     * available types.
     * 
     * @return int
     * @since 0.2.0
     **/
    function getType();

    /**
     * Saves the attached picture to the given filename.
     * 
     * @param string $filename
     * @return bool
     * @since 0.0.1
     **/
    function savePicture($filename);

    /**
     * Sets the picture to the give image. The image is loaded from the given
     * filename. Please note that the picture is not saved unless you call
     * the save method of the corresponding file object.
     * 
     * @param string $filename
     * @return void
     * @since 0.0.1
     **/
    function setPicture($filename);

    /**
     * Sets the type of the image. This can be e.g. FrontCover or FileIcon.
     * Please refer to the KTaglib_ID3v2_AttachedPictureFrame class
     * description for a list of available types and their constant mappings.
     * 
     * @param int $type
     * @return void
     * @since 0.2.0
     **/
    function setType($type);

}
class KTaglib_ID3v2_Frame extends KTagLib_ID3v2_Frame {
    /**
     * Returns the size of the frame in bytes. Please refer to id3.org to see
     * what ID3v2 frames are and how they are defined.
     * 
     * @return int
     * @since 0.0.1
     **/
    function getSize(){}

    /**
     * Returns a string representation of the frame. This might be just the
     * frame id, but might contain more information. Please see the ktaglib
     * documentation for more information
     * 
     * @return string
     * @since 0.0.1
     **/
    function __toString(){}

}
class KTaglib_ID3v2_Tag {
    /**
     * Adds a frame to the ID3v2 tag. The frame must be a valid
     * KTagLib_ID3v2_Frame object. To save the tag, the save function needs
     * to be invoked.
     * 
     * @param KTagLib_ID3v2_Frame $frame
     * @return bool
     * @since 0.0.1
     **/
    function addFrame($frame){}

    /**
     * Returns an array of ID3v2 frames, associated with the ID3v2 tag.
     * 
     * @return array
     * @since 0.0.1
     **/
    function getFrameList(){}

}
class KTaglib_MPEG_AudioProperties {
    /**
     * Returns the bitrate of the MPEG file
     * 
     * @return int
     * @since 0.0.1
     **/
    function getBitrate(){}

    /**
     * Returns the amount of channels of the MPEG file
     * 
     * @return int
     * @since 0.0.1
     **/
    function getChannels(){}

    /**
     * Returns the layer of the MPEG file (usually 3 for MP3).
     * 
     * @return int
     * @since 0.0.1
     **/
    function getLayer(){}

    /**
     * Returns the length of the MPEG file
     * 
     * @return int
     * @since 0.0.1
     **/
    function getLength(){}

    /**
     * Returns the sample bitrate of the MPEG file
     * 
     * @return int
     * @since 0.0.1
     **/
    function getSampleBitrate(){}

    /**
     * Returns the version of the MPEG file header. The possible versions are
     * defined in Tag_MPEG_Header (Version1, Version2, Version2.5).
     * 
     * @return int
     * @since 0.0.1
     **/
    function getVersion(){}

    /**
     * Returns true if the MPEG file is copyrighted
     * 
     * @return bool
     * @since 0.0.1
     **/
    function isCopyrighted(){}

    /**
     * Returns true if the file is marked as the original file
     * 
     * @return bool
     * @since 0.0.1
     **/
    function isOriginal(){}

    /**
     * Returns true if protection mechanism (like DRM) are enabled for this
     * file
     * 
     * @return bool
     * @since 0.0.1
     **/
    function isProtectionEnabled(){}

}
class KTagLib_MPEG_File {
    /**
     * Returns an object that provides access to the audio properties of the
     * mpeg file.
     * 
     * @return KTaglib_MPEG_File:
     * @since 0.0.1
     **/
    function getAudioProperties(){}

    /**
     * Returns an object that represents an ID3v1 tag, which can be used to
     * get information about the ID3v1 tag.
     * 
     * @param bool $create
     * @return KTaglib_ID3v1_Tag
     * @since 0.0.1
     **/
    function getID3v1Tag($create){}

    /**
     * Returns a ID3v2 object for the mpeg file. If no ID3v2 Tag is present,
     * an KTaglib_TagNotFoundException is thrown.
     * 
     * @param bool $create
     * @return KTaglib_ID3v2_Tag
     * @since 0.0.1
     **/
    function getID3v2Tag($create){}

}
interface KTaglib_MPEG_Header {
    const Version1 = 0;
    const Version2 = 0;
    const Version2_5 = 0;
}
class KTagLib_Tag extends KTagLib_Tag {
    /**
     * Returns the album string of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     * 
     * @return string
     * @since 0.0.1
     **/
    function getAlbum(){}

    /**
     * Returns the artist string of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     * 
     * @return string
     * @since 0.0.1
     **/
    function getArtist(){}

    /**
     * Returns the comment of an ID3 tag. This method is implemented in ID3v1
     * and ID3v2 tags.
     * 
     * @return string
     * @since 0.0.1
     **/
    function getComment(){}

    /**
     * Returns the genre of an ID3 tag. This method is implemented in ID3v1
     * and ID3v2 tags.
     * 
     * @return string
     * @since 0.0.1
     **/
    function getGenre(){}

    /**
     * Returns the title string of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     * 
     * @return string
     * @since 0.0.1
     **/
    function getTitle(){}

    /**
     * Returns the track number of an ID3 tag. This method is implemented in
     * ID3v1 and ID3v2 tags.
     * 
     * @return int
     * @since 0.0.1
     **/
    function getTrack(){}

    /**
     * Returns the year of an ID3 tag. This method is implemented in ID3v1
     * and ID3v2 tags.
     * 
     * @return int
     * @since 0.0.1
     **/
    function getYear(){}

    /**
     * Returns true if the tag exists, but is empty. This method is
     * implemented in ID3v1 and ID3v2 tags.
     * 
     * @return bool
     * @since 0.0.1
     **/
    function isEmpty(){}

}
/**
 * Exception thrown if a length is invalid
 **/
class LengthException extends LogicException {
}
/**
 * Contains various information about errors thrown by libxml. The error
 * codes are described within the official .
 **/
class libXMLError {
}
/**
 * The class allows iteration over a limited subset of items in an .
 **/
class LimitIterator extends IteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Gets the current element of the inner Iterator.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * Gets the inner Iterator.
     * 
     * @return Iterator
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator(){}

    /**
     * Gets the current zero-based position of the inner Iterator.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getPosition(){}

    /**
     * Gets the key for the current item in the inner Iterator.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Moves the iterator forward.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Rewinds the iterator to the starting offset specified in
     * LimitIterator::__construct.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Moves the iterator to the offset specified by {@link position}.
     * 
     * @param int $position The position to seek to.
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function seek($position){}

    /**
     * Checks whether the current element is valid.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

    /**
     * Constructs a new LimitIterator from an {@link iterator} with a given
     * starting {@link offset} and maximum {@link count}.
     * 
     * @param Iterator $iterator The Iterator to limit.
     * @param int $offset Optional offset of the limit.
     * @param int $count Optional count of the limit.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator, $offset, $count){}

}
/**
 * Examples of identifiers include:
 **/
class Locale {
    /**
     * Tries to find locale that can satisfy the language list that is
     * requested by the HTTP "Accept-Language" header.
     * 
     * @param string $header The string containing the "Accept-Language"
     *   header according to format in RFC 2616.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function acceptFromHttp($header){}

    /**
     * Returns a correctly ordered and delimited locale ID the keys identify
     * the particular locale ID subtags, and the values are the associated
     * subtag values.
     * 
     * @param array $subtags an array containing a list of key-value pairs,
     *   where the keys identify the particular locale ID subtags, and the
     *   values are the associated subtag values. The 'variant' and 'private'
     *   subtags can take maximum 15 values whereas 'extlang' can take
     *   maximum 3 values.e.g. Variants are allowed with the suffix ranging
     *   from 0-14. Hence the keys for the input array can be variant0,
     *   variant1, ...,variant14. In the returned locale id, the subtag is
     *   ordered by suffix resulting in variant0 followed by variant1
     *   followed by variant2 and so on. The 'variant', 'private' and
     *   'extlang' multiple values can be specified both as array under
     *   specific key (e.g. 'variant') and as multiple numbered keys (e.g.
     *   'variant0', 'variant1', etc.).
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function composeLocale($subtags){}

    /**
     * Checks if a $langtag filter matches with $locale according to RFC
     * 4647's basic filtering algorithm
     * 
     * @param string $langtag The language tag to check
     * @param string $locale The language range to check against
     * @param bool $canonicalize If true, the arguments will be converted
     *   to canonical form before matching.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function filterMatches($langtag, $locale, $canonicalize){}

    /**
     * Gets the variants for the input locale
     * 
     * @param string $locale The locale to extract the variants from
     * @return array
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getAllVariants($locale){}

    /**
     * Gets the default locale value. At the PHP initialization this value is
     * set to 'intl.default_locale' value from if that value exists or from
     * ICU's function uloc_getDefault().
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDefault(){}

    /**
     * Returns an appropriately localized display name for language of the
     * input locale. If is then the default locale is used.
     * 
     * @param string $locale The locale to return a display language for
     * @param string $in_locale Optional format locale to use to display
     *   the language name
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDisplayLanguage($locale, $in_locale){}

    /**
     * Returns an appropriately localized display name for the input locale.
     * If is then the default locale is used.
     * 
     * @param string $locale The locale to return a display name for.
     * @param string $in_locale optional format locale
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDisplayName($locale, $in_locale){}

    /**
     * Returns an appropriately localized display name for region of the
     * input locale. If is then the default locale is used.
     * 
     * @param string $locale The locale to return a display region for.
     * @param string $in_locale Optional format locale to use to display
     *   the region name
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDisplayRegion($locale, $in_locale){}

    /**
     * Returns an appropriately localized display name for script of the
     * input locale. If is then the default locale is used.
     * 
     * @param string $locale The locale to return a display script for
     * @param string $in_locale Optional format locale to use to display
     *   the script name
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDisplayScript($locale, $in_locale){}

    /**
     * Returns an appropriately localized display name for variants of the
     * input locale. If is then the default locale is used.
     * 
     * @param string $locale The locale to return a display variant for
     * @param string $in_locale Optional format locale to use to display
     *   the variant name
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getDisplayVariant($locale, $in_locale){}

    /**
     * Gets the keywords for the input locale.
     * 
     * @param string $locale The locale to extract the keywords from
     * @return array
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getKeywords($locale){}

    /**
     * Gets the primary language for the input locale
     * 
     * @param string $locale The locale to extract the primary language
     *   code from
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getPrimaryLanguage($locale){}

    /**
     * Gets the region for the input locale.
     * 
     * @param string $locale The locale to extract the region code from
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getRegion($locale){}

    /**
     * Gets the script for the input locale.
     * 
     * @param string $locale The locale to extract the script code from
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getScript($locale){}

    /**
     * Searches the items in {@link langtag} for the best match to the
     * language range specified in {@link locale} according to RFC 4647's
     * lookup algorithm.
     * 
     * @param array $langtag An array containing a list of language tags to
     *   compare to {@link locale}. Maximum 100 items allowed.
     * @param string $locale The locale to use as the language range when
     *   matching.
     * @param bool $canonicalize If true, the arguments will be converted
     *   to canonical form before matching.
     * @param string $default The locale to use if no match is found.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function lookup($langtag, $locale, $canonicalize, $default){}

    /**
     * Returns a key-value array of locale ID subtag elements.
     * 
     * @param string $locale The locale to extract the subtag array from.
     *   Note: The 'variant' and 'private' subtags can take maximum 15 values
     *   whereas 'extlang' can take maximum 3 values.
     * @return array
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function parseLocale($locale){}

    /**
     * Sets the default runtime locale to $locale. This changes the value of
     * INTL global 'default_locale' locale identifier. UAX #35 extensions are
     * accepted.
     * 
     * @param string $locale Is a BCP 47 compliant language tag containing
     *   the
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setDefault($locale){}

}
/**
 * Exception thrown if a logic expression is invalid
 **/
class LogicException extends Exception {
}
class maxdb {
    /**
     * {@link maxdb_affected_rows} returns the number of rows affected by the
     * last INSERT, UPDATE, or DELETE query associated with the provided
     * {@link link} parameter. If this number cannot be determined, this
     * function will return -1.
     * 
     * The {@link maxdb_affected_rows} function only works with queries which
     * modify a table. In order to return the number of rows from a SELECT
     * query, use the {@link maxdb_num_rows} function instead.
     * 
     * @var int
     **/
    var $affected_rows;
    /**
     * The {@link maxdb_errno} function will return the last error code for
     * the most recent MaxDB function call that can succeed or fail with
     * respect to the database link defined by the {@link link} parameter. If
     * no errors have occured, this function will return zero.
     * 
     * @var int
     **/
    var $errno;
    /**
     * The {@link maxdb_error} function is identical to the corresponding
     * {@link maxdb_errno} function in every way, except instead of returning
     * an integer error code the {@link maxdb_error} function will return a
     * string representation of the last error to occur for the database
     * connection represented by the {@link link} parameter. If no error has
     * occured, this function will return an empty string.
     * 
     * @var string
     **/
    var $error;
    /**
     * The {@link maxdb_get_host_info} function returns a string describing
     * the connection represented by the {@link link} parameter is using.
     * 
     * @var string
     **/
    var $host_info;
    /**
     * The {@link maxdb_info} function returns a string providing information
     * about the last query executed. The nature of this string is provided
     * below:
     * 
     * Possible maxdb_info return values Query type Example result string
     * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0 INSERT
     * INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0 Warnings: 0
     * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
     * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0 UPDATE ... Rows
     * matched: 40 Changed: 40 Warnings: 0
     * 
     * @var string
     **/
    var $info;
    /**
     * The {@link maxdb_insert_id} function returns the ID generated by a
     * query on a table with a column having the DEFAULT SERIAL attribute. If
     * the last query wasn't an INSERT or UPDATE statement or if the modified
     * table does not have a column with the DEFAULT SERIAL attribute, this
     * function will return zero.
     * 
     * @var mixed
     **/
    var $insert_id;
    /**
     * Returns the number of rows in the result set.
     * 
     * The use of {@link maxdb_num_rows} depends on whether you use buffered
     * or unbuffered result sets. In case you use unbuffered resultsets
     * {@link maxdb_num_rows} will not correct the correct number of rows
     * until all the rows in the result have been retrieved.
     * 
     * @var int
     **/
    var $num_rows;
    /**
     * Returns an integer representing the MaxDB protocol version used by the
     * connection represented by the {@link link} parameter.
     * 
     * @var string
     **/
    var $protocol_version;
    /**
     * Returns a string representing the version of the MaxDB server that the
     * MaxDB extension is connected to (represented by the {@link link}
     * parameter).
     * 
     * @var string
     **/
    var $server_info;
    /**
     * The {@link maxdb_get_server_version} function returns the version of
     * the server connected to (represented by the {@link link} parameter) as
     * an integer.
     * 
     * The form of this version number is main_version * 10000 +
     * minor_version * 100 + sub_version (i.e. version 7.5.0 is 70500).
     * 
     * @var int
     **/
    var $server_version;
    /**
     * Returns a string containing the SQLSTATE error code for the last
     * error. The error code consists of five characters. '00000' means no
     * error. The values are specified by ANSI SQL and ODBC.
     * 
     * @var string
     **/
    var $sqlstate;
    /**
     * The {@link maxdb_thread_id} function returns the thread ID for the
     * current connection which can then be killed using the {@link
     * maxdb_kill} function. If the connection is lost and you reconnect with
     * {@link maxdb_ping}, the thread ID will be other. Therefore you should
     * get the thread ID only when you need it.
     * 
     * @var int
     **/
    var $thread_id;
    /**
     * {@link maxdb_warning_count} returns the number of warnings from the
     * last query in the connection represented by the {@link link}
     * parameter.
     * 
     * @var int
     **/
    var $warning_count;
    /**
     * {@link maxdb_autocommit} is used to turn on or off auto-commit mode on
     * queries for the database connection represented by the {@link link}
     * resource.
     * 
     * @param bool $mode
     * @return bool
     **/
    function auto_commit($mode){}

    /**
     * {@link maxdb_change_user} is used to change the user of the specified
     * database connection as given by the {@link link} parameter and to set
     * the current database to that specified by the {@link database}
     * parameter.
     * 
     * In order to successfully change users a valid {@link username} and
     * {@link password} parameters must be provided and that user must have
     * sufficient permissions to access the desired database. If for any
     * reason authorization fails, the current user authentication will
     * remain.
     * 
     * @param string $user
     * @param string $password
     * @param string $database
     * @return bool
     **/
    function change_user($user, $password, $database){}

    /**
     * Returns the current character set for the database connection
     * specified by the {@link link} parameter.
     * 
     * @return string
     **/
    function character_set_name(){}

    /**
     * The {@link maxdb_close} function closes a previously opened database
     * connection specified by the {@link link} parameter.
     * 
     * @return bool
     **/
    function close(){}

    /**
     * Commits the current transaction for the database connection specified
     * by the {@link link} parameter.
     * 
     * @return bool
     **/
    function commit(){}

    /**
     * @return void
     **/
    function disable_reads_from_master(){}

    /**
     * Returns the number of columns for the most recent query on the
     * connection represented by the {@link link} parameter. This function
     * can be useful when using the {@link maxdb_store_result} function to
     * determine if the query should have produced a non-empty result set or
     * not without knowing the nature of the query.
     * 
     * @return int
     **/
    function field_count(){}

    /**
     * This function is used to disconnect from a MaxDB server specified by
     * the {@link processid} parameter.
     * 
     * @param int $processid
     * @return bool
     **/
    function kill($processid){}

    /**
     * Returns the current character set for the database connection
     * specified by the {@link link} parameter.
     * 
     * @return string
     **/
    function maxdb_client_encoding(){}

    /**
     * This function is used to create a legal SQL string that you can use in
     * an SQL statement. The string escapestr is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     * 
     * Characters encoded are ', ".
     * 
     * @param string $escapestr
     * @return string
     **/
    function maxdb_escape_string($escapestr){}

    /**
     * {@link maxdb_maxdb_set_opt} can be used to set extra connect
     * maxdb_set_opt and affect behavior for a connection.
     * 
     * This function may be called multiple times to set several
     * maxdb_set_opt.
     * 
     * {@link maxdb_maxdb_set_opt} should be called after {@link maxdb_init}
     * and before {@link maxdb_real_connect}.
     * 
     * The parameter {@link option} is the option that you want to set, the
     * {@link value} is the value for the option. For detailed description of
     * the maxdb_set_opt see The parameter {@link option} can be one of the
     * following values: Valid maxdb_set_opt Name Description MAXDB_COMPNAME
     * The component name used to initialise the SQLDBC runtime environment.
     * MAXDB_APPLICATION The application to be connected to the database.
     * MAXDB_APPVERSION The version of the application. MAXDB_SQLMODE The SQL
     * mode. MAXDB_UNICODE TRUE, if the connection is an unicode (UCS2)
     * client or FALSE, if not. MAXDB_TIMEOUT The maximum allowed time of
     * inactivity after which the connection to the database is closed by the
     * system. MAXDB_ISOLATIONLEVEL Specifies whether and how shared locks
     * and exclusive locks are implicitly requested or released.
     * MAXDB_PACKETCOUNT The number of different request packets used for the
     * connection. MAXDB_STATEMENTCACHESIZE The number of prepared statements
     * to be cached for the connection for re-use. MAXDB_CURSORPREFIX The
     * prefix to use for result tables that are automatically named.
     * 
     * @param int $option
     * @param mixed $value
     * @return bool
     **/
    function maxdb_set_opt($option, $value){}

    /**
     * The {@link maxdb_multi_query} works like the function {@link
     * maxdb_query}. Multiple queries are not yet supported.
     * 
     * @param string $query
     * @return bool
     **/
    function multi_query($query){}

    /**
     * {@link maxdb_options} can be used to set extra connect options and
     * affect behavior for a connection.
     * 
     * This function may be called multiple times to set several options.
     * 
     * {@link maxdb_options} should be called after {@link maxdb_init} and
     * before {@link maxdb_real_connect}.
     * 
     * The parameter {@link option} is the option that you want to set, the
     * {@link value} is the value for the option. For detailed description of
     * the options see The parameter {@link option} can be one of the
     * following values: Valid options Name Description MAXDB_COMPNAME The
     * component name used to initialise the SQLDBC runtime environment.
     * MAXDB_APPLICATION The application to be connected to the database.
     * MAXDB_APPVERSION The version of the application. MAXDB_SQLMODE The SQL
     * mode. MAXDB_UNICODE TRUE, if the connection is an unicode (UCS2)
     * client or FALSE, if not. MAXDB_TIMEOUT The maximum allowed time of
     * inactivity after which the connection to the database is closed by the
     * system. MAXDB_ISOLATIONLEVEL Specifies whether and how shared locks
     * and exclusive locks are implicitly requested or released.
     * MAXDB_PACKETCOUNT The number of different request packets used for the
     * connection. MAXDB_STATEMENTCACHESIZE The number of prepared statements
     * to be cached for the connection for re-use. MAXDB_CURSORPREFIX The
     * prefix to use for result tables that are automatically named.
     * 
     * @param int $option
     * @param mixed $value
     * @return bool
     **/
    function options($option, $value){}

    /**
     * Checks whether the connection to the server is working. If it has gone
     * down, and global option maxdb.reconnect is enabled an automatic
     * reconnection is attempted.
     * 
     * This function can be used by clients that remain idle for a long
     * while, to check whether the server has closed the connection and
     * reconnect if necessary.
     * 
     * @return bool
     **/
    function ping(){}

    /**
     * {@link maxdb_prepare} prepares the SQL query pointed to by the
     * null-terminated string query, and returns a statement handle to be
     * used for further operations on the statement. The query must consist
     * of a single SQL statement.
     * 
     * The parameter {@link query} can include one or more parameter markers
     * in the SQL statement by embedding question mark (?) characters at the
     * appropriate positions.
     * 
     * The parameter markers must be bound to application variables using
     * {@link maxdb_stmt_bind_param} and/or {@link maxdb_stmt_bind_result}
     * before executing the statement or fetching rows.
     * 
     * @param string $query
     * @return maxdb_stmt
     **/
    function prepare($query){}

    /**
     * The {@link maxdb_query} function is used to simplify the act of
     * performing a query against the database represented by the {@link
     * link} parameter.
     * 
     * @param string $query
     * @return mixed
     **/
    function query($query){}

    /**
     * {@link maxdb_real_connect} attempts to establish a connection to a
     * MaxDB database engine running on {@link hostname}.
     * 
     * This function differs from {@link maxdb_connect}:
     * 
     * @param string $hostname
     * @param string $username
     * @param string $passwd
     * @param string $dbname
     * @param int $port
     * @param string $socket
     * @return bool
     **/
    function real_connect($hostname, $username, $passwd, $dbname, $port, $socket){}

    /**
     * This function is used to create a legal SQL string that you can use in
     * an SQL statement. The string escapestr is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     * 
     * Characters encoded are ', ".
     * 
     * @param string $escapestr
     * @return string
     **/
    function real_escape_sring($escapestr){}

    /**
     * The {@link maxdb_real_query} is functionally identical with the {@link
     * maxdb_query}.
     * 
     * @param string $query
     * @return bool
     **/
    function real_query($query){}

    /**
     * Rollbacks the current transaction for the database specified by the
     * {@link link} parameter.
     * 
     * @return bool
     **/
    function rollback(){}

    /**
     * @return int
     **/
    function rpl_query_type(){}

    /**
     * @param string $query
     * @return bool
     **/
    function send_query($query){}

    /**
     * @param string $key
     * @param string $cert
     * @param string $ca
     * @param string $capath
     * @param string $cipher
     * @return bool
     **/
    function ssl_set($key, $cert, $ca, $capath, $cipher){}

    /**
     * {@link maxdb_stat} returns a string containing several information
     * about the MaxDB server running.
     * 
     * @return string
     **/
    function stat(){}

    /**
     * Allocates and initializes a statement resource suitable for {@link
     * maxdb_stmt_prepare}.
     * 
     * @return object
     **/
    function stmt_init(){}

    /**
     * This function has no functionally effect.
     * 
     * @return object
     **/
    function store_result(){}

    /**
     * {@link maxdb_use_result} has no effect.
     * 
     * @return resource
     **/
    function use_result(){}

}
class maxdb_result {
    /**
     * Returns the position of the field cursor used for the last {@link
     * maxdb_fetch_field} call. This value can be used as an argument to
     * {@link maxdb_field_seek}.
     * 
     * @var int
     **/
    var $current_field;
    /**
     * {@link maxdb_num_fields} returns the number of fields from specified
     * result set.
     * 
     * @var int
     **/
    var $field_count;
    /**
     * The {@link maxdb_fetch_lengths} function returns an array containing
     * the lengths of every column of the current row within the result set
     * represented by the {@link result} parameter. If successful, a
     * numerically indexed array representing the lengths of each column is
     * returned.
     * 
     * @var array
     **/
    var $lengths;
    /**
     * The {@link maxdb_data_seek} function seeks to an arbitrary result
     * pointer specified by the {@link offset} in the result set represented
     * by {@link result}. The {@link offset} parameter must be between zero
     * and the total number of rows minus one (0..{@link maxdb_num_rows} -
     * 1).
     * 
     * @param int $offset
     * @return bool
     **/
    function data_seek($offset){}

    /**
     * Returns an array that corresponds to the fetched row or if there are
     * no more rows for the resultset represented by the {@link result}
     * parameter.
     * 
     * {@link maxdb_fetch_array} is an extended version of the {@link
     * maxdb_fetch_row} function. In addition to storing the data in the
     * numeric indices of the result array, the {@link maxdb_fetch_array}
     * function can also store the data in associative indices, using the
     * field names of the result set as keys.
     * 
     * If two or more columns of the result have the same field names, the
     * last column will take precedence and overwrite the earlier data. In
     * order to access multiple columns with the same name, the numerically
     * indexed version of the row must be used.
     * 
     * The optional second argument {@link resulttype} is a constant
     * indicating what type of array should be produced from the current row
     * data. The possible values for this parameter are the constants
     * MAXDB_ASSOC, MAXDB_ASSOC_UPPER, MAXDB_ASSOC_LOWER, MAXDB_NUM, or
     * MAXDB_BOTH. By default the {@link maxdb_fetch_array} function will
     * assume MAXDB_BOTH, which is a combination of MAXDB_NUM and MAXDB_ASSOC
     * for this parameter.
     * 
     * By using the MAXDB_ASSOC constant this function will behave
     * identically to the {@link maxdb_fetch_assoc}, while MAXDB_NUM will
     * behave identically to the {@link maxdb_fetch_row} function. The final
     * option MAXDB_BOTH will create a single array with the attributes of
     * both.
     * 
     * By using the MAXDB_ASSOC_UPPER constant, the behaviour of this
     * function is identical to the use of MAXDB_ASSOC except the array index
     * of a column is the fieldname in upper case.
     * 
     * By using the MAXDB_ASSOC_LOWER constant, the behaviour of this
     * function is identical to the use of MAXDB_ASSOC except the array index
     * of a column is the fieldname in lower case.
     * 
     * @param int $resulttype
     * @return mixed
     **/
    function fetch_array($resulttype){}

    /**
     * Returns an associative array that corresponds to the fetched row or if
     * there are no more rows.
     * 
     * The {@link maxdb_fetch_assoc} function is used to return an
     * associative array representing the next row in the result set for the
     * result represented by the {@link result} parameter, where each key in
     * the array represents the name of one of the result set's columns.
     * 
     * If two or more columns of the result have the same field names, the
     * last column will take precedence. To access the other column(s) of the
     * same name, you either need to access the result with numeric indices
     * by using {@link maxdb_fetch_row} or add alias names.
     * 
     * @return array
     **/
    function fetch_assoc(){}

    /**
     * The {@link maxdb_fetch_field} returns the definition of one column of
     * a result set as an resource. Call this function repeatedly to retrieve
     * information about all columns in the result set. {@link
     * maxdb_fetch_field} returns when no more fields are left.
     * 
     * @return mixed
     **/
    function fetch_field(){}

    /**
     * This function serves an identical purpose to the {@link
     * maxdb_fetch_field} function with the single difference that, instead
     * of returning one resource at a time for each field, the columns are
     * returned as an array of resources.
     * 
     * @return mixed
     **/
    function fetch_fields(){}

    /**
     * {@link maxdb_fetch_field_direct} returns an resource which contains
     * field definition information from specified resultset. The value of
     * fieldnr must be in the range from 0 to number of fields - 1.
     * 
     * @param int $fieldnr
     * @return mixed
     **/
    function fetch_field_direct($fieldnr){}

    /**
     * The {@link maxdb_fetch_object} will return the current row result set
     * as an object where the attributes of the object represent the names of
     * the fields found within the result set. If no more rows exist in the
     * current result set, is returned.
     * 
     * @return object
     **/
    function fetch_object(){}

    /**
     * Returns an array that corresponds to the fetched row, or if there are
     * no more rows.
     * 
     * {@link maxdb_fetch_row} fetches one row of data from the result set
     * represented by {@link result} and returns it as an enumerated array,
     * where each column is stored in an array offset starting from 0 (zero).
     * Each subsequent call to the {@link maxdb_fetch_row} function will
     * return the next row within the result set, or if there are no more
     * rows.
     * 
     * @return mixed
     **/
    function fetch_row(){}

    /**
     * Sets the field cursor to the given offset. The next call to {@link
     * maxdb_fetch_field} will retrieve the field definition of the column
     * associated with that offset.
     * 
     * @param int $fieldnr
     * @return bool
     **/
    function field_seek($fieldnr){}

    /**
     * The {@link maxdb_free_result} function frees the memory associated
     * with the result represented by the {@link result} parameter, which was
     * allocated by {@link maxdb_query}, {@link maxdb_store_result} or {@link
     * maxdb_use_result}.
     * 
     * @return void
     **/
    function free(){}

}
class maxdb_stmt {
    /**
     * {@link maxdb_stmt_affected_rows} returns the number of rows affected
     * by INSERT, UPDATE, or DELETE query. If the last query was invalid or
     * the number of rows can not determined, this function will return -1.
     * 
     * @var int
     **/
    var $affected_rows;
    /**
     * For the statement specified by stmt, {@link maxdb_stmt_errno} returns
     * the error code for the most recently invoked statement function that
     * can succeed or fail.
     * 
     * @var int
     **/
    var $errno;
    /**
     * For the statement specified by stmt, {@link maxdb_stmt_error} returns
     * a containing the error message for the most recently invoked statement
     * function that can succeed or fail.
     * 
     * @var string
     **/
    var $error;
    /**
     * Returns the number of rows in the result set.
     * 
     * @var int
     **/
    var $num_rows;
    /**
     * {@link maxdb_stmt_param_count} returns the number of parameter markers
     * present in the prepared statement.
     * 
     * @var int
     **/
    var $param_count;
    /**
     * {@link maxdb_stmt_param_count} returns the number of parameter markers
     * present in the prepared statement.
     * 
     * @var int
     **/
    var $param_count;
    /**
     * (extended syntax):
     * 
     * (extended syntax):
     * 
     * {@link maxdb_stmt_bind_param} is used to bind variables for the
     * parameter markers in the SQL statement that was passed to {@link
     * maxdb_prepare}. The string {@link types} contains one or more
     * characters which specify the types for the corresponding bind
     * variables.
     * 
     * The extended syntax of {@link maxdb_stmt_bind_param} allows to give
     * the parameters as an array instead of a variable list of PHP variables
     * to the function. If the array variable has not been used before
     * calling {@link maxdb_stmt_bind_param}, it has to be initialized as an
     * emtpy array. See the examples how to use {@link maxdb_stmt_bind_param}
     * with extended syntax.
     * 
     * Variables for SELECT INTO SQL statements can also be bound using
     * {@link maxdb_stmt_bind_param}. Parameters for database procedures can
     * be bound using {@link maxdb_stmt_bind_param}. See the examples how to
     * use {@link maxdb_stmt_bind_param} in this cases.
     * 
     * If a variable bound as INTO variable to an SQL statement was used
     * before, the content of this variable is overwritten by the data of the
     * SELECT INTO statement. A reference to this variable will be invalid
     * after a call to {@link maxdb_stmt_bind_param}.
     * 
     * For INOUT parameters of database procedures the content of the bound
     * INOUT variable is overwritten by the output value of the database
     * procedure. A reference to this variable will be invalid after a call
     * to {@link maxdb_stmt_bind_param}.
     * 
     * Type specification chars Character Description i corresponding
     * variable has type integer d corresponding variable has type double s
     * corresponding variable has type string b corresponding variable is a
     * blob and will be sent in packages
     * 
     * @param string $types
     * @param mixed $var1
     * @return bool
     **/
    function bind_param($types, &$var1){}

    /**
     * {@link maxdb_stmt_bind_result} is used to associate (bind) columns in
     * the result set to variables. When {@link maxdb_stmt_fetch} is called
     * to fetch data, the MaxDB client/server protocol places the data for
     * the bound columns into the specified variables {@link var1, ...}.
     * 
     * @param mixed $var1
     * @return bool
     **/
    function bind_result(&$var1){}

    /**
     * Closes a prepared statement. {@link maxdb_stmt_close} also deallocates
     * the statement handle pointed to by {@link stmt}. If the current
     * statement has pending or unread results, this function cancels them so
     * that the next query can be executed.
     * 
     * @return bool
     **/
    function close(){}

    /**
     * This function has to be called after a sequence of {@link
     * maxdb_stmt_send_long_data}, that was started after {@link
     * maxdb_execute}.
     * 
     * {@link param_nr} indicates which parameter to associate the end of
     * data with. Parameters are numbered beginning with 0.
     * 
     * @return bool
     **/
    function close_long_data(){}

    /**
     * The {@link maxdb_stmt_data_seek} function seeks to an arbitrary result
     * pointer specified by the {@link offset} in the statement result set
     * represented by {@link statement}. The {@link offset} parameter must be
     * between zero and the total number of rows minus one (0..{@link
     * maxdb_stmt_num_rows} - 1).
     * 
     * @param int $offset
     * @return bool
     **/
    function data_seek($offset){}

    /**
     * The {@link maxdb_stmt_execute} function executes a query that has been
     * previously prepared using the {@link maxdb_prepare} function
     * represented by the {@link stmt} resource. When executed any parameter
     * markers which exist will automatically be replaced with the appropiate
     * data.
     * 
     * If the statement is UPDATE, DELETE, or INSERT, the total number of
     * affected rows can be determined by using the {@link
     * maxdb_stmt_affected_rows} function. Likewise, if the query yields a
     * result set the {@link maxdb_fetch} function is used.
     * 
     * @return bool
     **/
    function execute(){}

    /**
     * {@link maxdb_stmt_fetch} returns row data using the variables bound by
     * {@link maxdb_stmt_bind_result}.
     * 
     * @return bool
     **/
    function fetch(){}

    /**
     * The {@link maxdb_stmt_free_result} function frees the result memory
     * associated with the statement represented by the {@link stmt}
     * parameter, which was allocated by {@link maxdb_stmt_store_result}.
     * 
     * @return void
     **/
    function free_result(){}

    /**
     * (extended syntax):
     * 
     * (extended syntax):
     * 
     * {@link maxdb_stmt_maxdb_bind_param} is used to bind variables for the
     * parameter markers in the SQL statement that was passed to {@link
     * maxdb_prepare}. The string {@link types} contains one or more
     * characters which specify the types for the corresponding bind
     * variables.
     * 
     * The extended syntax of {@link maxdb_stmt_maxdb_bind_param} allows to
     * give the parameters as an array instead of a variable list of PHP
     * variables to the function. If the array variable has not been used
     * before calling {@link maxdb_stmt_maxdb_bind_param}, it has to be
     * initialized as an emtpy array. See the examples how to use {@link
     * maxdb_stmt_maxdb_bind_param} with extended syntax.
     * 
     * Variables for SELECT INTO SQL statements can also be bound using
     * {@link maxdb_stmt_maxdb_bind_param}. Parameters for database
     * procedures can be bound using {@link maxdb_stmt_maxdb_bind_param}. See
     * the examples how to use {@link maxdb_stmt_maxdb_bind_param} in this
     * cases.
     * 
     * If a variable bound as INTO variable to an SQL statement was used
     * before, the content of this variable is overwritten by the data of the
     * SELECT INTO statement. A reference to this variable will be invalid
     * after a call to {@link maxdb_stmt_maxdb_bind_param}.
     * 
     * For INOUT parameters of database procedures the content of the bound
     * INOUT variable is overwritten by the output value of the database
     * procedure. A reference to this variable will be invalid after a call
     * to {@link maxdb_stmt_maxdb_bind_param}.
     * 
     * Type specification chars Character Description i corresponding
     * variable has type integer d corresponding variable has type double s
     * corresponding variable has type string b corresponding variable is a
     * blob and will be sent in packages
     * 
     * @param string $types
     * @param mixed $var1
     * @return bool
     **/
    function maxdb_bind_param($types, &$var1){}

    /**
     * {@link maxdb_stmt_maxdb_bind_result} is used to associate (bind)
     * columns in the result set to variables. When {@link maxdb_stmt_fetch}
     * is called to fetch data, the MaxDB client/server protocol places the
     * data for the bound columns into the specified variables {@link var1,
     * ...}.
     * 
     * @param mixed $var1
     * @return bool
     **/
    function maxdb_bind_result(&$var1){}

    /**
     * This function has to be called after a sequence of {@link
     * maxdb_stmt_send_long_data}, that was started after {@link
     * maxdb_execute}.
     * 
     * {@link param_nr} indicates which parameter to associate the end of
     * data with. Parameters are numbered beginning with 0.
     * 
     * @return bool
     **/
    function maxdb_close_long_data(){}

    /**
     * The {@link maxdb_stmt_maxdb_execute} function maxdb_executes a query
     * that has been previously prepared using the {@link maxdb_prepare}
     * function represented by the {@link stmt} resource. When maxdb_executed
     * any parameter markers which exist will automatically be replaced with
     * the appropiate data.
     * 
     * If the statement is UPDATE, DELETE, or INSERT, the total number of
     * affected rows can be determined by using the {@link
     * maxdb_stmt_affected_rows} function. Likewise, if the query yields a
     * result set the {@link maxdb_fetch} function is used.
     * 
     * @return bool
     **/
    function maxdb_execute(){}

    /**
     * {@link maxdb_stmt_maxdb_fetch} returns row data using the variables
     * bound by {@link maxdb_stmt_bind_result}.
     * 
     * @return bool
     **/
    function maxdb_fetch(){}

    /**
     * If a statement passed to {@link maxdb_prepare} is one that produces a
     * result set, {@link maxdb_stmt_maxdb_get_metadata} returns the result
     * resource that can be used to process the meta information such as
     * total number of fields and individual field information.
     * 
     * The result set structure should be freed when you are done with it,
     * which you can do by passing it to {@link maxdb_free_result}
     * 
     * @return resource
     **/
    function maxdb_get_metadata(){}

    /**
     * Allows to send parameter data to the server in pieces (or chunks).
     * This function can be called multiple times to send the parts of a
     * character or binary data value for a column, which must be one of the
     * TEXT or BLOB datatypes.
     * 
     * {@link param_nr} indicates which parameter to associate the data with.
     * Parameters are numbered beginning with 0. {@link data} is a string
     * containing data to be sent.
     * 
     * @param int $param_nr
     * @param string $data
     * @return bool
     **/
    function maxdb_send_long_data($param_nr, $data){}

    /**
     * {@link maxdb_stmt_prepare} prepares the SQL query pointed to by the
     * null-terminated string query. The statement resource has to be
     * allocated by {@link maxdb_stmt_init}. The query must consist of a
     * single SQL statement.
     * 
     * The parameter {@link query} can include one or more parameter markers
     * in the SQL statement by embedding question mark (?) characters at the
     * appropriate positions.
     * 
     * The parameter markers must be bound to application variables using
     * {@link maxdb_stmt_bind_param} and/or {@link maxdb_stmt_bind_result}
     * before executing the statement or fetching rows.
     * 
     * @param string $query
     * @return mixed
     **/
    function prepare($query){}

    /**
     * @return bool
     **/
    function reset(){}

    /**
     * If a statement passed to {@link maxdb_prepare} is one that produces a
     * result set, {@link maxdb_stmt_result_metadata} returns the result
     * resource that can be used to process the meta information such as
     * total number of fields and individual field information.
     * 
     * The result set structure should be freed when you are done with it,
     * which you can do by passing it to {@link maxdb_free_result}
     * 
     * @return resource
     **/
    function result_metadata(){}

    /**
     * Allows to send parameter data to the server in pieces (or chunks).
     * This function can be called multiple times to send the parts of a
     * character or binary data value for a column, which must be one of the
     * TEXT or BLOB datatypes.
     * 
     * {@link param_nr} indicates which parameter to associate the data with.
     * Parameters are numbered beginning with 0. {@link data} is a string
     * containing data to be sent.
     * 
     * @param int $param_nr
     * @param string $data
     * @return bool
     **/
    function stmt_send_long_data($param_nr, $data){}

}
/**
 * Represents a connection to a set of memcache servers.
 **/
class Memcache {
    /**
     * {@link Memcache::add} stores variable {@link var} with {@link key}
     * only if such key doesn't exist at the server yet. Also you can use
     * {@link memcache_add} function.
     * 
     * @param string $key The key that will be associated with the item.
     * @param mixed $var The variable to store. Strings and integers are
     *   stored as is, other types are stored serialized.
     * @param int $flag Use MEMCACHE_COMPRESSED to store the item
     *   compressed (uses zlib).
     * @param int $expire Expiration time of the item. If it's equal to
     *   zero, the item will never expire. You can also use Unix timestamp or
     *   a number of seconds starting from current time, but in the latter
     *   case the number of seconds may not exceed 2592000 (30 days).
     * @return bool
     * @since PECL memcache >= 0.2.0
     **/
    function add($key, $var, $flag, $expire){}

    /**
     * {@link Memcache::addServer} adds a server to the connection pool. The
     * connection, which was opened using {@link Memcache::addServer} will be
     * automatically closed at the end of script execution, you can also
     * close it manually with {@link Memcache::close}. You can also use the
     * {@link memcache_add_server} function.
     * 
     * When using this method (as opposed to {@link Memcache::connect} and
     * {@link Memcache::pconnect}) the network connection is not established
     * until actually needed. Thus there is no overhead in adding a large
     * number of servers to the pool, even though they might not all be used.
     * 
     * Failover may occur at any stage in any of the methods, as long as
     * other servers are available the request the user won't notice. Any
     * kind of socket or Memcached server level errors (except out-of-memory)
     * may trigger the failover. Normal client errors such as adding an
     * existing key will not trigger a failover.
     * 
     * @param string $host Point to the host where memcached is listening
     *   for connections. This parameter may also specify other transports
     *   like unix:///path/to/memcached.sock to use UNIX domain sockets, in
     *   this case {@link port} must also be set to 0.
     * @param int $port Point to the port where memcached is listening for
     *   connections. Set this parameter to 0 when using UNIX domain sockets.
     * @param bool $persistent Controls the use of a persistent connection.
     *   Default to .
     * @param int $weight Number of buckets to create for this server which
     *   in turn control its probability of it being selected. The
     *   probability is relative to the total weight of all servers.
     * @param int $timeout Value in seconds which will be used for
     *   connecting to the daemon. Think twice before changing the default
     *   value of 1 second - you can lose all the advantages of caching if
     *   your connection is too slow.
     * @param int $retry_interval Controls how often a failed server will
     *   be retried, the default value is 15 seconds. Setting this parameter
     *   to -1 disables automatic retry. Neither this nor the {@link
     *   persistent} parameter has any effect when the extension is loaded
     *   dynamically via {@link dl}. Each failed connection struct has its
     *   own timeout and before it has expired the struct will be skipped
     *   when selecting backends to serve a request. Once expired the
     *   connection will be successfully reconnected or marked as failed for
     *   another {@link retry_interval} seconds. The typical effect is that
     *   each web server child will retry the connection about every {@link
     *   retry_interval} seconds when serving a page.
     * @param bool $status Controls if the server should be flagged as
     *   online. Setting this parameter to and {@link retry_interval} to -1
     *   allows a failed server to be kept in the pool so as not to affect
     *   the key distribution algorithm. Requests for this server will then
     *   failover or fail immediately depending on the {@link
     *   memcache.allow_failover} setting. Default to , meaning the server
     *   should be considered online.
     * @param callback $failure_callback Allows the user to specify a
     *   callback function to run upon encountering an error. The callback is
     *   run before failover is attempted. The function takes two parameters,
     *   the hostname and port of the failed server.
     * @param int $timeoutms
     * @return bool
     * @since PECL memcache >= 2.0.0
     **/
    function addServer($host, $port, $persistent, $weight, $timeout, $retry_interval, $status, $failure_callback, $timeoutms){}

    /**
     * {@link Memcache::close} closes connection to memcached server. This
     * function doesn't close persistent connections, which are closed only
     * during web-server shutdown/restart. Also you can use {@link
     * memcache_close} function.
     * 
     * @return bool
     * @since PECL memcache >= 0.4.0
     **/
    function close(){}

    /**
     * {@link Memcache::connect} establishes a connection to the memcached
     * server. The connection, which was opened using {@link
     * Memcache::connect} will be automatically closed at the end of script
     * execution. Also you can close it with {@link Memcache::close}. Also
     * you can use {@link memcache_connect} function.
     * 
     * @param string $host Point to the host where memcached is listening
     *   for connections. This parameter may also specify other transports
     *   like unix:///path/to/memcached.sock to use UNIX domain sockets, in
     *   this case {@link port} must also be set to 0.
     * @param int $port Point to the port where memcached is listening for
     *   connections. Set this parameter to 0 when using UNIX domain sockets.
     * @param int $timeout Value in seconds which will be used for
     *   connecting to the daemon. Think twice before changing the default
     *   value of 1 second - you can lose all the advantages of caching if
     *   your connection is too slow.
     * @return bool
     * @since PECL memcache >= 0.2.0
     **/
    function connect($host, $port, $timeout){}

    /**
     * {@link Memcache::decrement} decrements value of the item by {@link
     * value}. Similarly to {@link Memcache::increment}, current value of the
     * item is being converted to numerical and after that {@link value} is
     * substracted. New item's value will not be less than zero. Do not use
     * {@link Memcache::decrement} with item, which was stored compressed,
     * because consequent call to {@link Memcache::get} will fail. {@link
     * Memcache::decrement} does not create an item if it didn't exist. Also
     * you can use {@link memcache_decrement} function.
     * 
     * @param string $key Key of the item do decrement.
     * @param int $value Decrement the item by {@link value}.
     * @return int
     * @since PECL memcache >= 0.2.0
     **/
    function decrement($key, $value){}

    /**
     * {@link Memcache::delete} deletes item with the {@link key}. If
     * parameter {@link timeout} is specified, the item will expire after
     * {@link timeout} seconds. Also you can use {@link memcache_delete}
     * function.
     * 
     * @param string $key The key associated with the item to delete.
     * @param int $timeout Execution time of the item. If it's equal to
     *   zero, the item will be deleted right away whereas if you set it to
     *   30, the item will be deleted in 30 seconds.
     * @return bool
     * @since PECL memcache >= 0.2.0
     **/
    function delete($key, $timeout){}

    /**
     * {@link Memcache::flush} immediately invalidates all existing items.
     * {@link Memcache::flush} doesn't actually free any resources, it only
     * marks all the items as expired, so occupied memory will be overwritten
     * by new items. Also you can use {@link memcache_flush} function.
     * 
     * @return bool
     * @since PECL memcache >= 1.0.0
     **/
    function flush(){}

    /**
     * {@link Memcache::get} returns previously stored data if an item with
     * such {@link key} exists on the server at this moment.
     * 
     * You can pass array of keys to {@link Memcache::get} to get array of
     * values. The result array will contain only found key-value pairs.
     * 
     * @param string $key The key or array of keys to fetch.
     * @param int $flags If present, flags fetched along with the values
     *   will be written to this parameter. These flags are the same as the
     *   ones given to for example {@link Memcache::set}. The lowest byte of
     *   the int is reserved for pecl/memcache internal usage (e.g. to
     *   indicate compression and serialization status).
     * @return string
     * @since PECL memcache >= 0.2.0
     **/
    function get($key, &$flags){}

    /**
     * {@link Memcache::getExtendedStats} returns a two-dimensional
     * associative array with server statistics. Array keys correspond to
     * host:port of server and values contain the individual server
     * statistics. A failed server will have its corresponding entry set to .
     * You can also use the {@link memcache_get_extended_stats} function.
     * 
     * @param string $type The type of statistics to fetch. Valid values
     *   are {reset, malloc, maps, cachedump, slabs, items, sizes}. According
     *   to the memcached protocol spec these additional arguments "are
     *   subject to change for the convenience of memcache developers".
     * @param int $slabid Used in conjunction with {@link type} set to
     *   cachedump to identify the slab to dump from. The cachedump command
     *   ties up the server and is strictly to be used for debugging
     *   purposes.
     * @param int $limit Used in conjunction with {@link type} set to
     *   cachedump to limit the number of entries to dump.
     * @return array
     * @since PECL memcache >= 2.0.0
     **/
    function getExtendedStats($type, $slabid, $limit){}

    /**
     * {@link Memcache::getServerStatus} returns a the servers online/offline
     * status. You can also use {@link memcache_get_server_status} function.
     * 
     * @param string $host Point to the host where memcached is listening
     *   for connections.
     * @param int $port Point to the port where memcached is listening for
     *   connections.
     * @return int
     * @since PECL memcache >= 2.1.0
     **/
    function getServerStatus($host, $port){}

    /**
     * {@link Memcache::getStats} returns an associative array with server's
     * statistics. Array keys correspond to stats parameters and values to
     * parameter's values. Also you can use {@link memcache_get_stats}
     * function.
     * 
     * @param string $type The type of statistics to fetch. Valid values
     *   are {reset, malloc, maps, cachedump, slabs, items, sizes}. According
     *   to the memcached protocol spec these additional arguments "are
     *   subject to change for the convenience of memcache developers".
     * @param int $slabid Used in conjunction with {@link type} set to
     *   cachedump to identify the slab to dump from. The cachedump command
     *   ties up the server and is strictly to be used for debugging
     *   purposes.
     * @param int $limit Used in conjunction with {@link type} set to
     *   cachedump to limit the number of entries to dump.
     * @return array
     * @since PECL memcache >= 0.2.0
     **/
    function getStats($type, $slabid, $limit){}

    /**
     * {@link Memcache::getVersion} returns a string with server's version
     * number. Also you can use {@link memcache_get_version} function.
     * 
     * @return string
     * @since PECL memcache >= 0.2.0
     **/
    function getVersion(){}

    /**
     * {@link Memcache::increment} increments value of an item by the
     * specified {@link value}. If item specified by {@link key} was not
     * numeric and cannot be converted to a number, it will change its value
     * to {@link value}. {@link Memcache::increment} does not create an item
     * if it doesn't already exist. Do not use {@link Memcache::increment}
     * with items that have been stored compressed because subsequent calls
     * to {@link Memcache::get} will fail. Also you can use {@link
     * memcache_increment} function.
     * 
     * @param string $key Key of the item to increment.
     * @param int $value Increment the item by {@link value}.
     * @return int
     * @since PECL memcache >= 0.2.0
     **/
    function increment($key, $value){}

    /**
     * {@link Memcache::pconnect} is similar to {@link Memcache::connect}
     * with the difference, that the connection it establishes is persistent.
     * This connection is not closed after the end of script execution and by
     * {@link Memcache::close} function. Also you can use {@link
     * memcache_pconnect} function.
     * 
     * @param string $host Point to the host where memcached is listening
     *   for connections. This parameter may also specify other transports
     *   like unix:///path/to/memcached.sock to use UNIX domain sockets, in
     *   this case {@link port} must also be set to 0.
     * @param int $port Point to the port where memcached is listening for
     *   connections. Set this parameter to 0 when using UNIX domain sockets.
     * @param int $timeout Value in seconds which will be used for
     *   connecting to the daemon. Think twice before changing the default
     *   value of 1 second - you can lose all the advantages of caching if
     *   your connection is too slow.
     * @return bool
     * @since PECL memcache >= 0.4.0
     **/
    function pconnect($host, $port, $timeout){}

    /**
     * {@link Memcache::replace} should be used to replace value of existing
     * item with {@link key}. In case if item with such key doesn't exists,
     * {@link Memcache::replace} returns . For the rest {@link
     * Memcache::replace} behaves similarly to {@link Memcache::set}. Also
     * you can use {@link memcache_replace} function.
     * 
     * @param string $key The key that will be associated with the item.
     * @param mixed $var The variable to store. Strings and integers are
     *   stored as is, other types are stored serialized.
     * @param int $flag Use MEMCACHE_COMPRESSED to store the item
     *   compressed (uses zlib).
     * @param int $expire Expiration time of the item. If it's equal to
     *   zero, the item will never expire. You can also use Unix timestamp or
     *   a number of seconds starting from current time, but in the latter
     *   case the number of seconds may not exceed 2592000 (30 days).
     * @return bool
     * @since PECL memcache >= 0.2.0
     **/
    function replace($key, $var, $flag, $expire){}

    /**
     * {@link Memcache::set} stores an item {@link var} with {@link key} on
     * the memcached server. Parameter {@link expire} is expiration time in
     * seconds. If it's 0, the item never expires (but memcached server
     * doesn't guarantee this item to be stored all the time, it could be
     * deleted from the cache to make place for other items). You can use
     * MEMCACHE_COMPRESSED constant as {@link flag} value if you want to use
     * on-the-fly compression (uses zlib). Remember that resource variables
     * (i.e. file and connection descriptors) cannot be stored in the cache,
     * because they cannot be adequately represented in serialized state.
     * Also you can use {@link memcache_set} function.
     * 
     * @param string $key The key that will be associated with the item.
     * @param mixed $var The variable to store. Strings and integers are
     *   stored as is, other types are stored serialized.
     * @param int $flag Use MEMCACHE_COMPRESSED to store the item
     *   compressed (uses zlib).
     * @param int $expire Expiration time of the item. If it's equal to
     *   zero, the item will never expire. You can also use Unix timestamp or
     *   a number of seconds starting from current time, but in the latter
     *   case the number of seconds may not exceed 2592000 (30 days).
     * @return bool
     * @since PECL memcache >= 0.2.0
     **/
    function set($key, $var, $flag, $expire){}

    /**
     * {@link Memcache::setCompressThreshold} enables automatic compression
     * of large values. You can also use the {@link
     * memcache_set_compress_threshold} function.
     * 
     * @param int $threshold Controls the minimum value length before
     *   attempting to compress automatically.
     * @param float $min_savings Specifies the minimum amount of savings to
     *   actually store the value compressed. The supplied value must be
     *   between 0 and 1. Default value is 0.2 giving a minimum 20%
     *   compression savings.
     * @return bool
     * @since PECL memcache >= 2.0.0
     **/
    function setCompressThreshold($threshold, $min_savings){}

    /**
     * {@link Memcache::setServerParams} changes server parameters at
     * runtime. You can also use the {@link memcache_set_server_params}
     * function.
     * 
     * @param string $host Point to the host where memcached is listening
     *   for connections.
     * @param int $port Point to the port where memcached is listening for
     *   connections.
     * @param int $timeout Value in seconds which will be used for
     *   connecting to the daemon. Think twice before changing the default
     *   value of 1 second - you can lose all the advantages of caching if
     *   your connection is too slow.
     * @param int $retry_interval Controls how often a failed server will
     *   be retried, the default value is 15 seconds. Setting this parameter
     *   to -1 disables automatic retry. Neither this nor the {@link
     *   persistent} parameter has any effect when the extension is loaded
     *   dynamically via {@link dl}.
     * @param bool $status Controls if the server should be flagged as
     *   online. Setting this parameter to and {@link retry_interval} to -1
     *   allows a failed server to be kept in the pool so as not to affect
     *   the key distribution algoritm. Requests for this server will then
     *   failover or fail immediately depending on the {@link
     *   memcache.allow_failover} setting. Default to , meaning the server
     *   should be considered online.
     * @param callback $failure_callback Allows the user to specify a
     *   callback function to run upon encountering an error. The callback is
     *   run before failover is attempted. The function takes two parameters,
     *   the hostname and port of the failed server.
     * @return bool
     * @since PECL memcache >= 2.1.0
     **/
    function setServerParams($host, $port, $timeout, $retry_interval, $status, $failure_callback){}

}
/**
 * Represents a connection to a set of memcached servers.
 **/
interface Memcached {
    const DISTRIBUTION_CONSISTENT = 0;
    const DISTRIBUTION_MODULA = 0;
    const GET_PRESERVE_ORDER = 0;
    const HASH_CRC = 0;
    const HASH_DEFAULT = 0;
    const HASH_FNV1A_32 = 0;
    const HASH_FNV1A_64 = 0;
    const HASH_FNV1_32 = 0;
    const HASH_FNV1_64 = 0;
    const HASH_HSIEH = 0;
    const HASH_MD5 = 0;
    const HASH_MURMUR = 0;
    const HAVE_IGBINARY = 0;
    const HAVE_JSON = 0;
    const OPT_BINARY_PROTOCOL = 0;
    const OPT_BUFFER_WRITES = 0;
    const OPT_CACHE_LOOKUPS = 0;
    const OPT_COMPRESSION = 0;
    const OPT_CONNECT_TIMEOUT = 0;
    const OPT_DISTRIBUTION = 0;
    const OPT_HASH = 0;
    const OPT_LIBKETAMA_COMPATIBLE = 0;
    const OPT_NO_BLOCK = 0;
    const OPT_POLL_TIMEOUT = 0;
    const OPT_PREFIX_KEY = 0;
    const OPT_RECV_TIMEOUT = 0;
    const OPT_RETRY_TIMEOUT = 0;
    const OPT_SEND_TIMEOUT = 0;
    const OPT_SERIALIZER = 0;
    const OPT_SERVER_FAILURE_LIMIT = 0;
    const OPT_SOCKET_RECV_SIZE = 0;
    const OPT_SOCKET_SEND_SIZE = 0;
    const OPT_TCP_NODELAY = 0;
    const RES_BAD_KEY_PROVIDED = 0;
    const RES_BUFFERED = 0;
    const RES_CLIENT_ERROR = 0;
    const RES_CONNECTION_SOCKET_CREATE_FAILURE = 0;
    const RES_DATA_EXISTS = 0;
    const RES_END = 0;
    const RES_ERRNO = 0;
    const RES_FAILURE = 0;
    const RES_HOST_LOOKUP_FAILURE = 0;
    const RES_NOTFOUND = 0;
    const RES_NOTSTORED = 0;
    const RES_NO_SERVERS = 0;
    const RES_PARTIAL_READ = 0;
    const RES_PAYLOAD_FAILURE = 0;
    const RES_PROTOCOL_ERROR = 0;
    const RES_SERVER_ERROR = 0;
    const RES_SOME_ERRORS = 0;
    const RES_SUCCESS = 0;
    const RES_TIMEOUT = 0;
    const RES_UNKNOWN_READ_FAILURE = 0;
    const RES_WRITE_FAILURE = 0;
    const SERIALIZER_IGBINARY = 0;
    const SERIALIZER_JSON = 0;
    const SERIALIZER_PHP = 0;
    /**
     * {@link Memcached::add} is similar to Memcached::set, but the operation
     * fails if the {@link key} already exists on the server.
     * 
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function add($key, $value, $expiration);

    /**
     * {@link Memcached::addByKey} is functionally equivalent to
     * Memcached::add, except that the free-form {@link server_key} can be
     * used to map the {@link key} to a specific server. This is useful if
     * you need to keep a bunch of related keys on a certain server.
     * 
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function addByKey($server_key, $key, $value, $expiration);

    /**
     * {@link Memcached::addServer} adds the specified server to the server
     * pool. No connection is established to the server at this time, but if
     * you are using consistent key distribution option (via
     * Memcached::DISTRIBUTION_CONSISTENT or
     * Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data
     * structures will have to be updated. Thus, if you need to add multiple
     * servers, it is better to use Memcached::addServers as the update then
     * happens only once.
     * 
     * The same server may appear multiple times in the server pool, because
     * no duplication checks are made. This is not advisable; instead, use
     * the {@link weight} option to increase the selection weighting of this
     * server.
     * 
     * @param string $host The hostname of the memcache server. If the
     *   hostname is invalid, data-related operations will set
     *   Memcached::RES_HOST_LOOKUP_FAILURE result code.
     * @param int $port The port on which memcache is running. Usually,
     *   this is 11211.
     * @param int $weight The weight of the server relative to the total
     *   weight of all the servers in the pool. This controls the probability
     *   of the server being selected for operations. This is used only with
     *   consistent distribution option and usually corresponds to the amount
     *   of memory available to memcache on that server.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function addServer($host, $port, $weight);

    /**
     * {@link Memcached::addServers} adds {@link servers} to the server pool.
     * Each entry in {@link servers} is supposed to an array containing
     * hostname, port, and, optionally, weight of the server. No connection
     * is established to the servers at this time.
     * 
     * The same server may appear multiple times in the server pool, because
     * no duplication checks are made. This is not advisable; instead, use
     * the {@link weight} option to increase the selection weighting of this
     * server.
     * 
     * @param array $servers Array of the servers to add to the pool.
     * @return bool
     * @since PECL memcached >= 0.1.1
     **/
    function addServers($servers);

    /**
     * {@link Memcached::append} appends the given {@link value} string to
     * the value of an existing item. The reason that {@link value} is forced
     * to be a string is that appending mixed types is not well-defined.
     * 
     * @param string $key
     * @param string $value The string to append.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function append($key, $value);

    /**
     * {@link Memcached::appendByKey} is functionally equivalent to
     * Memcached::append, except that the free-form {@link server_key} can be
     * used to map the {@link key} to a specific server.
     * 
     * @param string $server_key
     * @param string $key
     * @param string $value The string to append.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function appendByKey($server_key, $key, $value);

    /**
     * {@link Memcached::cas} performs a "check and set" operation, so that
     * the item will be stored only if no other client has updated it since
     * it was last fetched by this client. The check is done via the {@link
     * cas_token} parameter which is a unique 64-bit value assigned to the
     * existing item by memcache. See the documentation for Memcached::get*
     * methods for how to obtain this token. Note that the token is
     * represented as a double due to the limitations of PHP's integer space.
     * 
     * @param float $cas_token Unique value associated with the existing
     *   item. Generated by memcache.
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function cas($cas_token, $key, $value, $expiration);

    /**
     * {@link Memcached::casByKey} is functionally equivalent to
     * Memcached::cas, except that the free-form {@link server_key} can be
     * used to map the {@link key} to a specific server. This is useful if
     * you need to keep a bunch of related keys on a certain server.
     * 
     * @param float $cas_token Unique value associated with the existing
     *   item. Generated by memcache.
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function casByKey($cas_token, $server_key, $key, $value, $expiration);

    /**
     * {@link Memcached::decrement} decrements a numeric item's value by the
     * specified {@link offset}. If the item's value is not numeric, it is
     * treated as if the value were 0. If the operation would decrease the
     * value below 0, the new value will be 0. {@link Memcached::decrement}
     * will fail if the item does not exist.
     * 
     * @param string $key The key of the item to decrement.
     * @param int $offset The amount by which to decrement the item's
     *   value.
     * @return int
     * @since PECL memcached >= 0.1.0
     **/
    function decrement($key, $offset);

    /**
     * {@link Memcached::delete} deletes the {@link key} from the server. The
     * {@link time} parameter is the amount of time in seconds (or Unix time
     * until which) the client wishes the server to refuse add and replace
     * commands for this key. For this amount of time, the item is put into a
     * delete queue, which means that it won't possible to retrieve it by the
     * get command, but add and replace command with this key will also fail
     * (the set command will succeed, however). After the time passes, the
     * item is finally deleted from server memory. The parameter {@link time}
     * defaults to 0 (which means that the item will be deleted immediately
     * and further storage commands with this key will succeed).
     * 
     * @param string $key The key to be deleted.
     * @param int $time The amount of time the server will wait to delete
     *   the item.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function delete($key, $time);

    /**
     * {@link Memcached::deleteByKey} is functionally equivalent to
     * Memcached::delete, except that the free-form {@link server_key} can be
     * used to map the {@link key} to a specific server.
     * 
     * @param string $server_key
     * @param string $key The key to be deleted.
     * @param int $time The amount of time the server will wait to delete
     *   the item.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function deleteByKey($server_key, $key, $time);

    /**
     * {@link Memcached::fetch} retrieves the next result from the last
     * request.
     * 
     * @return array
     * @since PECL memcached >= 0.1.0
     **/
    function fetch();

    /**
     * {@link Memcached::fetchAll} retrieves all the remaining results from
     * the last request.
     * 
     * @return array
     * @since PECL memcached >= 0.1.0
     **/
    function fetchAll();

    /**
     * {@link Memcached::flush} invalidates all existing cache items
     * immediately (by default) or after the {@link delay} specified. After
     * invalidation none of the items will be returned in response to a
     * retrieval command (unless it's stored again under the same key after
     * {@link Memcached::flush} has invalidated the items). The flush does
     * not actually free all the memory taken up by the existing items; that
     * will happen gradually as new items are stored.
     * 
     * @param int $delay Numer of seconds to wait before invalidating the
     *   items.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function flush($delay);

    /**
     * {@link Memcached::get} returns the item that was previously stored
     * under the {@link key}. If the item is found and {@link cas_token}
     * variable is provided, it will contain the CAS token value for the
     * item. See Memcached::cas for how to use CAS tokens. Read-through
     * caching callback may be specified via {@link cache_cb} parameter.
     * 
     * @param string $key The key of the item to retrieve.
     * @param callback $cache_cb Read-through caching callback or .
     * @param float $cas_token The variable to store the CAS token in.
     * @return mixed
     * @since PECL memcached >= 0.1.0
     **/
    function get($key, $cache_cb, &$cas_token);

    /**
     * {@link Memcached::getByKey} is functionally equivalent to
     * Memcached::get, except that the free-form {@link server_key} can be
     * used to map the {@link key} to a specific server.
     * 
     * @param string $server_key
     * @param string $key The key of the item to fetch.
     * @param callback $cache_cb Read-through caching callback or
     * @param float $cas_token The variable to store the CAS token in.
     * @return mixed
     * @since PECL memcached >= 0.1.0
     **/
    function getByKey($server_key, $key, $cache_cb, &$cas_token);

    /**
     * {@link Memcached::getDelayed} issues a request to memcache for
     * multiple items the keys of which are specified in the {@link keys}
     * array. The method does not wait for response and returns right away.
     * When you are ready to collect the items, call either Memcached::fetch
     * or Memcached::fetchAll. If {@link with_cas} is true, the CAS token
     * values will also be requested.
     * 
     * Instead of fetching the results explicitly, you can specify a result
     * callback via {@link value_cb} parameter.
     * 
     * @param array $keys Array of keys to request.
     * @param bool $with_cas Whether to request CAS token values also.
     * @param callback $value_cb The result callback or .
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function getDelayed($keys, $with_cas, $value_cb);

    /**
     * {@link Memcached::getDelayedByKey} is functionally equivalent to
     * Memcached::getDelayed, except that the free-form {@link server_key}
     * can be used to map the {@link keys} to a specific server.
     * 
     * @param string $server_key
     * @param array $keys Array of keys to request.
     * @param bool $with_cas Whether to request CAS token values also.
     * @param callback $value_cb The result callback or .
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function getDelayedByKey($server_key, $keys, $with_cas, $value_cb);

    /**
     * {@link Memcached::getMulti} is similar to Memcached::get, but instead
     * of a single key item, it retrievess multiple items the keys of which
     * are specified in the {@link keys} array. If {@link cas_tokens}
     * variable is provided, it is filled with the CAS token values for the
     * found items. Unlike Memcached::get it is not possible to specify a
     * read-through cache callback for {@link Memcached::getMulti}, because
     * the memcache protocol does not provide information on which keys were
     * not found in the multi-key request.
     * 
     * The {@link flags} parameter can be used to specify additional options
     * for {@link Memcached::getMulti}. Currently, the only available option
     * is Memcached::GET_PRESERVE_ORDER that ensures that the keys are
     * returned in the same order as they were requested in.
     * 
     * @param array $keys Array of keys to retrieve.
     * @param array $cas_tokens The variable to store the CAS tokens for
     *   the found items.
     * @param int $flags The flags for the get operation.
     * @return mixed
     * @since PECL memcached >= 0.1.0
     **/
    function getMulti($keys, &$cas_tokens, $flags);

    /**
     * {@link Memcached::getMultiByKey} is functionally equivalent to
     * Memcached::getMulti, except that the free-form {@link server_key} can
     * be used to map the {@link keys} to a specific server.
     * 
     * @param string $server_key
     * @param array $keys Array of keys to retrieve.
     * @param string $cas_tokens The variable to store the CAS tokens for
     *   the found items.
     * @param int $flags The flags for the get operation.
     * @return void
     * @since PECL memcached >= 0.1.0
     **/
    function getMultiByKey($server_key, $keys, &$cas_tokens, $flags);

    /**
     * This method returns the value of a Memcached {@link option}. Some
     * options correspond to the ones defined by libmemcached, and some are
     * specific to the extension. See Memcached Constants for more
     * information.
     * 
     * @param int $option One of the Memcached::OPT_* constants.
     * @return mixed
     * @since PECL memcached >= 0.1.0
     **/
    function getOption($option);

    /**
     * {@link Memcached::getResultCode} returns one of the Memcached::RES_*
     * constants that is the result of the last executed Memcached method.
     * 
     * @return int
     * @since PECL memcached >= 0.1.0
     **/
    function getResultCode();

    /**
     * {@link Memcached::getResultMessage} returns a string that describes
     * the result code of the last executed Memcached method.
     * 
     * @return string
     * @since PECL memcached >= 1.0.0
     **/
    function getResultMessage();

    /**
     * {@link Memcached::getServerByKey} returns the server that would be
     * selected by a particular {@link server_key} in all the {@link
     * Memcached::*ByKey} operations.
     * 
     * @param string $server_key
     * @return array
     * @since PECL memcached >= 0.1.0
     **/
    function getServerByKey($server_key);

    /**
     * {@link Memcached::getServerList} returns the list of all servers that
     * are in its server pool.
     * 
     * @return array
     * @since PECL memcached >= 0.1.0
     **/
    function getServerList();

    /**
     * {@link Memcached::getStats} returns an array containing the state of
     * all available memcache servers. See memcache protocol specification
     * for details on these statistics.
     * 
     * @return array
     * @since PECL memcached >= 0.1.0
     **/
    function getStats();

    /**
     * {@link Memcached::getVersion} returns an array containing the version
     * info for all available memcache servers.
     * 
     * @return array
     * @since PECL memcached >= 0.1.5
     **/
    function getVersion();

    /**
     * {@link Memcached::increment} increments a numeric item's value by the
     * specified {@link offset}. If the item's value is not numeric, it is
     * treated as if the value were 0. {@link Memcached::increment} will fail
     * if the item does not exist.
     * 
     * @param string $key The key of the item to increment.
     * @param int $offset The amount by which to increment the item's
     *   value.
     * @return int
     * @since PECL memcached >= 0.1.0
     **/
    function increment($key, $offset);

    /**
     * {@link Memcached::prepend} prepends the given {@link value} string to
     * the value of an existing item. The reason that {@link value} is forced
     * to be a string is that prepending mixed types is not well-defined.
     * 
     * @param string $key The key of the item to prepend the data to.
     * @param string $value The string to prepend.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function prepend($key, $value);

    /**
     * {@link Memcached::prependByKey} is functionally equivalent to
     * Memcached::prepend, except that the free-form {@link server_key} can
     * be used to map the {@link key} to a specific server.
     * 
     * @param string $server_key
     * @param string $key The key of the item to prepend the data to.
     * @param string $value The string to prepend.
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function prependByKey($server_key, $key, $value);

    /**
     * {@link Memcached::replace} is similar to Memcached::set, but the
     * operation fails if the {@link key} does not exist on the server.
     * 
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function replace($key, $value, $expiration);

    /**
     * {@link Memcached::replaceByKey} is functionally equivalent to
     * Memcached::replace, except that the free-form {@link server_key} can
     * be used to map the {@link key} to a specific server. This is useful if
     * you need to keep a bunch of related keys on a certain server.
     * 
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function replaceByKey($server_key, $key, $value, $expiration);

    /**
     * {@link Memcached::set} stores the {@link value} on a memcache server
     * under the specified {@link key}. The {@link expiration} parameter can
     * be used to control when the value is considered expired.
     * 
     * The value can be any valid PHP type except for resources, because
     * those cannot be represented in a serialized form. If the
     * Memcached::OPT_COMPRESSION option is turned on, the serialized value
     * will also be compressed before storage.
     * 
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function set($key, $value, $expiration);

    /**
     * {@link Memcached::setByKey} is functionally equivalent to
     * Memcached::set, except that the free-form {@link server_key} can be
     * used to map the {@link key} to a specific server. This is useful if
     * you need to keep a bunch of related keys on a certain server.
     * 
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function setByKey($server_key, $key, $value, $expiration);

    /**
     * {@link Memcached::setMulti} is similar to Memcached::set, but instead
     * of a single key/value item, it works on multiple items specified in
     * {@link items}. The {@link expiration} time applies to all the items at
     * once.
     * 
     * @param array $items
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function setMulti($items, $expiration);

    /**
     * {@link Memcached::setMultiByKey} is functionally equivalent to
     * Memcached::setMulti, except that the free-form {@link server_key} can
     * be used to map the keys from {@link items} to a specific server. This
     * is useful if you need to keep a bunch of related keys on a certain
     * server.
     * 
     * @param string $server_key
     * @param array $items
     * @param int $expiration
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function setMultiByKey($server_key, $items, $expiration);

    /**
     * This method sets the value of a Memcached {@link option}. Some options
     * correspond to the ones defined by libmemcached, and some are specific
     * to the extension. See Memcached Constants for more information.
     * 
     * The options listed below require values specified via constants.
     * Memcached::OPT_HASH requires Memcached::HASH_* values.
     * Memcached::OPT_DISTRIBUTION requires Memcached::DISTRIBUTION_* values.
     * 
     * @param int $option
     * @param mixed $value
     * @return bool
     * @since PECL memcached >= 0.1.0
     **/
    function setOption($option, $value);

}
/**
 * Description of the class.
 **/
class MemcachedException extends RuntimeException {
}
class MessageFormatter {
    /**
     * Constructs a new Message Formatter
     * 
     * @param string $locale The locale to use when formatting arguments
     * @param string $pattern The pattern string to stick arguments into.
     *   The pattern uses an 'apostrophe-friendly' syntax; it is run through
     *   umsg_autoQuoteApostrophe before being interpreted.
     * @return MessageFormatter
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function create($locale, $pattern){}

    /**
     * Format the message by substituting the data into the format string
     * according to the locale rules
     * 
     * @param array $args The message formatter
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function format($args){}

    /**
     * Quick formatting function that formats the string without having to
     * explicitly create the formatter object. Use this function when the
     * format operation is done only once and does not need and parameters or
     * state to be kept.
     * 
     * @param string $locale The locale to use for formatting
     *   locale-dependent parts
     * @param string $pattern The pattern string to insert things into. The
     *   pattern uses an 'apostrophe-friendly' syntax; it is run through
     *   umsg_autoQuoteApostrophe before being interpreted.
     * @param array $args The array of values to insert into the format
     *   string
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function formatMessage($locale, $pattern, $args){}

    /**
     * Get the error code from last operation.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorCode(){}

    /**
     * Get the error text from the last operation.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorMessage(){}

    /**
     * Get the locale for which the formatter was created.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getLocale(){}

    /**
     * Get the pattern used by the formatter
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getPattern(){}

    /**
     * Parses input string and return any extracted items as an array.
     * 
     * @param string $value The message formatter
     * @return array
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function parse($value){}

    /**
     * Parses input string without explicitly creating the formatter object.
     * Use this function when the format operation is done only once and does
     * not need and parameters or state to be kept.
     * 
     * @param string $locale The locale to use for parsing locale-dependent
     *   parts
     * @param string $value The string to parse for items
     * @return array
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function parseMessage($locale, $value){}

    /**
     * Set the pattern used by the formatter
     * 
     * @param string $pattern The message formatter
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setPattern($pattern){}

}
/**
 * The connection point between MongoDB and PHP.
 * 
 * This class is used to initiate a connection and for database server
 * commands. A typical use is:
 * 
 * See for more information about creating connections.
 **/
class Mongo {
    /**
     * This method does not need to be called, except in unusual
     * circumstances. The driver will cleanly close the database connection
     * when the Mongo object goes out of scope.
     * 
     * If you are using a service where objects do not go out of scope
     * between requests, you may wish to call close() at the end of your
     * program to keep old connections from hanging around. However, it is
     * probably more efficient to take advantage of this fact and simply use
     * a persistent connection, which will automatically create a connection
     * if needed and use it for as many requests as the application server
     * allows it to exist.
     * 
     * You may also wish to call close() if you are unsure of the state of a
     * connection and wish to guarantee a new connection will happen. For
     * example:
     * 
     * vs.
     * 
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function close(){}

    /**
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function connect(){}

    /**
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function connectUtil(){}

    /**
     * @param mixed $db The database to drop. Can be a MongoDB object or
     *   the name of the database.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function dropDB($db){}

    /**
     * Use {@link MongoDB::forceError} instead.
     * 
     * @return bool
     **/
    function forceError(){}

    /**
     * Use {@link MongoDB::lastError} instead.
     * 
     * @return array
     **/
    function lastError(){}

    /**
     * @return array
     * @since PECL mongo >=1.0.4
     **/
    function listDBs(){}

    /**
     * Pass a string of the form "mongodb://server1,server2" to the
     * constructor instead of using this method.
     * 
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function pairConnect(){}

    /**
     * Pass "mongodb://server1,server2" and array("persist" => $id) to the
     * constructor instead of using this method.
     * 
     * @param string $username A username used to identify the connection.
     * @param string $password A password used to identify the connection.
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function pairPersistConnect($username, $password){}

    /**
     * Pass array("persist" => $id) to the constructor instead of using this
     * method.
     * 
     * @param string $username A username used to identify the connection.
     * @param string $password A password used to identify the connection.
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function persistConnect($username, $password){}

    /**
     * Use {@link MongoDB::prevError} instead.
     * 
     * @return array
     **/
    function prevError(){}

    /**
     * Use {@link MongoDB::resetError} instead.
     * 
     * @return array
     **/
    function resetError(){}

    /**
     * @param string $db The database name.
     * @param string $collection The collection name.
     * @return MongoCollection
     * @since PECL mongo >=0.9.0
     **/
    function selectCollection($db, $collection){}

    /**
     * @param string $name The database name.
     * @return MongoDB
     * @since PECL mongo >=0.9.0
     **/
    function selectDB($name){}

    /**
     * If no parameters are passed, this connects to "localhost:27017" (or
     * whatever was specified in php.ini for mongo.default_host and
     * mongo.default_port).
     * 
     * As of version 1.0.2, {@link server} can have a special form:
     * 
     * mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/db
     * 
     * It starts with mongodb://, to indicate it is a connection string in
     * this form.
     * 
     * If username and password are specified, the constructor will attempt
     * to authenticate the connection with the database before returning.
     * Username and password are optional and must be followed by an @, if
     * specified.
     * 
     * At least one host must be given (port optional, always defaulting to
     * 27017) and as many hosts as desired may be connected to. Host names
     * are comma-separated and the constructor will return successfully if it
     * connected to at least one host. If it could not connect to any of the
     * hosts, it will throw a MongoConnectionException.
     * 
     * Finally, if you specified a username and password, you may specify a
     * database to authenticate with. If db is not specified, "admin" will be
     * used.
     * 
     * If you elect not to connect immediately (you pass the option
     * array("connect" => false)), you will need to call {@link
     * Mongo::connect} before doing any database operations.
     * 
     * @param string $server The server name.
     * @param array $options An array of options for the connection.
     *   Currently available options include: "connect" If the constructor
     *   should connect before returning. Default is . "persist" If the
     *   connection should be persistent. If set, the connection will be
     *   persistent. The string representation of the value is used as an id
     *   for the connection, so two instances of Mongo that are initialized
     *   with array("persist" => "foobar") will share the same database
     *   connection, whereas an instance initialized with array("persist" =>
     *   "barbaz") will use a different database connection. "timeout" For
     *   how long the driver should try to connect to the database (in
     *   milliseconds).
     * @since PECL mongo >=0.9.0
     **/
    function __construct($server, $options){}

    /**
     * This is the cleanest way of getting a database. If the database name
     * has any special characters, {@link Mongo::selectDB} will need to be
     * used. However, in most cases, this should be sufficient.
     * 
     * <?php
     * 
     * $mongo = new Mongo();
     * 
     * // the following two lines are equivalent $db =
     * $mongo->selectDB("foo"); $db = $mongo->foo;
     * 
     * ?>
     * 
     * @param string $dbname The database name.
     * @return MongoDB
     * @since PECL mongo >=1.0.2
     **/
    function __get($dbname){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function __toString(){}

}
/**
 * An object that can be used to store or retrieve binary data from the
 * database.
 * 
 * The maximum size of a single object that can be inserted into the
 * database is 4Mb. For data that is larger than this (movies, music,
 * Henry Kissinger's autobiography), use . For data that is smaller than
 * 4Mb, it's probably be easier to just embed it into the document using
 * .
 * 
 * For example, to embed an image in a document, one could write:
 * 
 * This class contains a field, which currently gives no additional
 * functionality in the driver or the database. There are five predefined
 * types (which are the class constants listed below), and the user can
 * create their own (at the risk of the BSON spec catching up with them).
 * By default, the PHP driver always uses type 2: a byte array.
 **/
class MongoBinData {
    /**
     * Creates a new binary data object.
     * 
     * There are five types of binary data currently recognized by the BSON
     * spec: function (0x01), byte array (0x02), UUID (0x03), MD5 (0x05), and
     * user defined (0x80). The default type is byte array (0x02). There is
     * no particular difference in how the driver or server interpret
     * different types, so by and large they are irrelevant for now. Any
     * number (between 0 and 255) could be used for type, if the user is
     * willing to assume the risk that the database might eventually do
     * something with binary data based on type.
     * 
     * @param string $data Binary data.
     * @param int $type Data type.
     * @since PECL mongo >= 0.8.1
     **/
    function __construct($data, $type){}

    /**
     * @return string
     * @since PECL mongo >= 0.8.1
     **/
    function __toString(){}

}
/**
 * Represents JavaScript code for the database.
 * 
 * MongoCode objects are composed of two parts: a string of code and an
 * optional scope. The string of code must be valid JavaScript. The scope
 * is a associative array of variable name/value pairs.
 **/
class MongoCode {
    /**
     * @param string $code A string of code.
     * @param array $scope The scope to use for the code.
     * @since PECL mongo >= 0.8.3
     **/
    function __construct($code, $scope){}

    /**
     * @return string
     * @since PECL mongo >= 0.8.3
     **/
    function __toString(){}

}
/**
 * Representations a database collection.
 * 
 * Collection names can use any character in the ASCII set. Some valid
 * collection names are , ..., my collection, and *&#@.
 * 
 * User-defined collection names cannot contain the $ symbol. There are
 * certain system collections which use a $ in their names (e.g.,
 * local.oplog.$main), but it is a reserved character. If you attempt to
 * create and use a collection with a $ in the name, MongoDB will assert.
 **/
class MongoCollection extends MongoCollection {
    /**
     * @param array $a An array of arrays.
     * @param array $options Options for the inserts. "safe" Check that the
     *   inserts succeeded.
     * @return mixed
     * @since PECL mongo >=0.9.0
     **/
    function batchInsert($a, $options){}

    /**
     * @param mixed $query Array or object with fields to match.
     * @return int
     * @since PECL mongo >=0.9.0
     **/
    function count($query){}

    /**
     * @param array $a Object to which to create a reference.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function createDBRef($a){}

    /**
     * This method is identical to:
     * 
     * Each index, when created, is given a unique name. This is generally
     * user-set (with {@link MongoCollection::ensureIndex}'s "name" option)
     * or generated by the driver from a combination of key names and
     * directions. This name is then used by {@link
     * MongoCollection::deleteIndex} to remove the function.
     * 
     * Unfortunately, the {@link MongoCollection::ensureIndex} generates
     * slightly different names than the shell and, due to backwards
     * compatibility issues, {@link MongoCollection::deleteIndex} cannot
     * delete custom-named indexes as well. Thus, the best way to delete
     * indexes created in the shell or with custom names is to directly call
     * the deleteIndexes database command.
     * 
     * Thus, if you named an index "superfast query", you could delete it
     * with:
     * 
     * To find what an index is named, you can query the system.indexes
     * collection of a database and look for the name field.
     * 
     * @param string|array $keys Field or fields from which to delete the
     *   index.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function deleteIndex($keys){}

    /**
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function deleteIndexes(){}

    /**
     * Drops this collection and deletes its indices.
     * 
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function drop(){}

    /**
     * A unique index cannot be created on a field if multiple existing
     * documents do not contain the field. The field is effectively for these
     * documents and thus already non-unique.
     * 
     * @param array $keys Field or fields to use as index.
     * @param array $options This parameter is an associative array of the
     *   form array("optionname" => <boolean>, ...). Currently supported
     *   options are: "unique" Create a unique index. "dropDups" If a unique
     *   index is being created and duplicate values exist, drop all but one
     *   duplicate value. "background" If you are using MongoDB version
     *   1.3.2+, you can create indexes in the background while other
     *   operations are taking place. By default, index creation happens
     *   synchronously. If you specify with this option, index creation will
     *   be asynchronous. "safe" Starting with driver version 1.0.4, you can
     *   specify a boolean value for checking if the index creation
     *   succeeded. The driver will throw a MongoCursorException if index
     *   creation failed. "name" After driver version 1.0.4 (NOT including
     *   1.0.4) you can specify an index name. This can be useful if you are
     *   indexing many keys and Mongo complains about the index name being
     *   too long.
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function ensureIndex($keys, $options){}

    /**
     * @param array $query The fields for which to search.
     * @param array $fields Fields of the results to return.
     * @return MongoCursor
     * @since PECL mongo >=0.9.0
     **/
    function find($query, $fields){}

    /**
     * @param array $query The fields for which to search.
     * @param array $fields Fields of the results to return.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function findOne($query, $fields){}

    /**
     * @param array $ref A database reference.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function getDBRef($ref){}

    /**
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function getIndexInfo(){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function getName(){}

    /**
     * @param mixed $keys Fields to group by. If an array or non-code
     *   object is passed, it will be the key used to group results. 1.0.4+:
     *   If {@link keys} is an instance of MongoCode, {@link keys} will be
     *   treated as a function that returns the key to group by (see the
     *   "Passing a {@link keys} function" example below).
     * @param array $initial Initial value of the aggregation counter
     *   object.
     * @param MongoCode $reduce A function that takes two arguments (the
     *   current document and the aggregation to this point) and does the
     *   aggregation.
     * @param array $condition Optional parameters to the group command.
     *   Valid options include:
     * @return array
     * @since PECL mongo >=0.9.2
     **/
    function group($keys, $initial, $reduce, $condition){}

    /**
     * All strings sent to the database must be UTF-8. If a string is not
     * UTF-8, a MongoException will be thrown. To insert (or query for) a
     * non-UTF-8 string, use MongoBinData.
     * 
     * @param array $a An array.
     * @param array $options Options for the insert. "safe" Check that the
     *   insert succeeded.
     * @return mixed
     * @since PECL mongo >=0.9.0
     **/
    function insert($a, $options){}

    /**
     * @param array $criteria Description of records to remove.
     * @param array $options Options for remove. "justOne" Remove at most
     *   one record matching this criteria. "safe" Check that the remove
     *   succeeded and how many items were removed.
     * @return mixed
     * @since PECL mongo >=0.9.0
     **/
    function remove($criteria, $options){}

    /**
     * If the object is from the database, update the existing database
     * object, otherwise insert this object.
     * 
     * @param array $a Array to save.
     * @param array $options Options for the save. "safe" Check that the
     *   save succeeded.
     * @return mixed
     * @since PECL mongo >=0.9.0
     **/
    function save($a, $options){}

    /**
     * @param array $criteria Description of the objects to update.
     * @param array $newobj The object with which to update the matching
     *   records.
     * @param array $options This parameter is an associative array of the
     *   form array("optionname" => <boolean>, ...). Currently supported
     *   options are: "upsert" If no document matches $criteria, a new
     *   document will be created from $criteria and $newobj (see upsert
     *   example below). "multiple" All documents matching $criteria will be
     *   updated. {@link MongoCollection::update} has exactly the opposite
     *   behavior of {@link MongoCollection::remove}: it updates one document
     *   by default, not all matching documents. It is recommended that you
     *   always specify whether you want to update multiple documents or a
     *   single document, as the database may change its default behavior at
     *   some point in the future. "safe" Check that the update succeeded.
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function update($criteria, $newobj, $options){}

    /**
     * @param bool $scan_data Only validate indices, not the base
     *   collection.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function validate($scan_data){}

    /**
     * @param MongoDB $db Parent database.
     * @param string $name Name for this collection.
     * @since PECL mongo >=0.9.0
     **/
    function __construct($db, $name){}

    /**
     * A concise syntax for getting a collection with a dot-separated name.
     * If a collection name contains strange characters, you may have to use
     * {@link MongoDB::selectCollection} instead.
     * 
     * <?php
     * 
     * $mongo = new Mongo();
     * 
     * // the following two lines are equivalent $collection =
     * $mongo->selectDB("foo")->selectCollection("bar.baz"); $collection =
     * $mongo->foo->bar->baz;
     * 
     * ?>
     * 
     * @param string $name The next string in the collection name.
     * @return MongoCollection
     * @since PECL mongo >=1.0.2
     **/
    function __get($name){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function __toString(){}

}
class MongoCursor extends MongoCursor {
    /**
     * This is an advanced function and should not be used unless you know
     * what you're doing.
     * 
     * A query can optionally be nested in a "query" field if other options,
     * such as a sort or hint, are given. For instance, adding a sort causes
     * the query to become a subfield of a bigger query object, like:
     * 
     * <?php
     * 
     * $query = array("query" => $query, "orderby" => $sort);
     * 
     * ?>
     * 
     * This method is for adding a top-level field to a query. It makes the
     * query a subobject (if it isn't already) and adds the key/value pair of
     * your chosing to the top level.
     * 
     * @param string $key Fieldname to add.
     * @param mixed $value Value to add.
     * @return MongoCursor
     * @since PECL mongo >=1.0.4
     **/
    function addOption($key, $value){}

    /**
     * @param boolean $all Send cursor limit and skip information to the
     *   count function, if applicable.
     * @return int
     * @since PECL mongo >=0.9.2
     **/
    function count($all){}

    /**
     * This returns until {@link MongoCursor::next} is called.
     * 
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function current(){}

    /**
     * The database sends responses in batches of documents, up to 4Mb of
     * documents per response. This method checks if the database has more
     * batches or if the result set has been exhausted.
     * 
     * A cursor being "dead" does not mean that {@link MongoCursor::hasNext}
     * will return , it only means that the database is done sending results
     * to the client. The client should continue iterating through results
     * until {@link MongoCursor::hasNext} is .
     * 
     * @return boolean
     * @since PECL mongo >=0.9.6
     **/
    function dead(){}

    /**
     * @return void
     **/
    function doQuery(){}

    /**
     * @return array
     * @since PECL mongo >=0.9.2
     **/
    function explain(){}

    /**
     * Fields are specified by "fieldname" : bool. indicates that a field
     * should be returned, indicates that it should not be returned. You can
     * also use 1 and 0 instead of and .
     * 
     * Thus, to return only the "summary" field, one could say:
     * 
     * To return all fields except the "hidden" field:
     * 
     * @param array $f Fields to return (or not return).
     * @return MongoCursor
     * @since PECL mongo >=1.0.6
     **/
    function fields($f){}

    /**
     * This is identical to the function:
     * 
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function getNext(){}

    /**
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function hasNext(){}

    /**
     * @param array $key_pattern Indexes to use for the query.
     * @return MongoCursor
     * @since PECL mongo >=0.9.0
     **/
    function hint($key_pattern){}

    /**
     * After remaining idle for some amount of time, cursor, by default,
     * "die." This is generally the behavior one wants. The database cleans
     * up a cursor once all of its results have been sent to the client, but
     * if the client doesn't request all of the results, the cursor will
     * languish there, taking up resources. Thus, after a few minutes, the
     * cursor "times out" and the database assumes the client has gotten
     * everything it needs and cleans up its the cursor's resources.
     * 
     * If, for some reason, you need a cursor to hang around for a long time,
     * you can prevent the database from cleaning it up by using this method.
     * However, if you make a cursor immortal, you need to iterate through
     * all of its results (or at least until {@link Cursor::dead} returns )
     * or the cursor will hang around the database forever, taking up
     * resources.
     * 
     * @param boolean $liveForever If the cursor should be immortal.
     * @return MongoCursor
     * @since PECL mongo >=1.0.1
     **/
    function immortal($liveForever){}

    /**
     * This can be called before or after the query.
     * 
     * @return array
     * @since PECL mongo >=1.0.5
     **/
    function info(){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function key(){}

    /**
     * @param int $num The number of results to return.
     * @return MongoCursor
     * @since PECL mongo >=0.9.0
     **/
    function limit($num){}

    /**
     * @return void
     * @since PECL mongo >=0.9.0
     **/
    function next(){}

    /**
     * @return void
     * @since PECL mongo >=0.9.0
     **/
    function reset(){}

    /**
     * This is identical to the function:
     * 
     * @return void
     * @since PECL mongo >=0.9.0
     **/
    function rewind(){}

    /**
     * @param int $num The number of results to skip.
     * @return MongoCursor
     * @since PECL mongo >=0.9.0
     **/
    function skip($num){}

    /**
     * This method will override the static class variable slaveOkay.
     * 
     * @param boolean $okay If it is okay to query the slave.
     * @return MongoCursor
     * @since PECL mongo >=0.9.4
     **/
    function slaveOkay($okay){}

    /**
     * Use snapshot mode for the query. Snapshot mode assures no duplicates
     * are returned, or objects missed, which were present at both the start
     * and end of the query's execution (if an object is new during the
     * query, or deleted during the query, it may or may not be returned,
     * even with snapshot mode).
     * 
     * Note that short query responses (less than 1MB) are always effectively
     * snapshotted.
     * 
     * Currently, snapshot mode may not be used with sorting or explicit
     * hints.
     * 
     * @return MongoCursor
     * @since PECL mongo >=0.9.4
     **/
    function snapshot(){}

    /**
     * @param array $fields The fields by which to sort.
     * @return MongoCursor
     * @since PECL mongo >=0.9.0
     **/
    function sort($fields){}

    /**
     * Mongo has a feature known as tailable cursors which are similar to the
     * Unix "tail -f" command.
     * 
     * Tailable means cursor is not closed when the last data is retrieved.
     * Rather, the cursor marks the final object's position. you can resume
     * using the cursor later, from where it was located, if more data were
     * received.
     * 
     * Like any "latent cursor", the cursor may become invalid at some point
     * -- for example if that final object it references were deleted. Thus,
     * you should be prepared to requery if the cursor is {@link
     * MongoCursor::dead}.
     * 
     * @param boolean $tail If the cursor should be tailable.
     * @return MongoCursor
     * @since PECL mongo >=0.9.4
     **/
    function tailable($tail){}

    /**
     * A timeout can be set at any time and will affect subsequent queries on
     * the cursor, including fetching more results from the database. For
     * example, to wait forever for an initial response but timeout after 100
     * ms for subsequent results, one could say:
     * 
     * <?php
     * 
     * $cursor = $collection->find();
     * 
     * // $cursor->hasNext() executes the query. No timeout has been set, so
     * the // program will wait as long as necessary for a response.
     * 
     * while ($cursor->hasNext()) { $cursor->timeout(100);
     * 
     * // now the timeout has been set, so if the cursor needs to get more
     * results // from the database, it will only wait 100 ms for the
     * database's reply
     * 
     * try { print_r($cursor->getNext()); } catch(MongoCursorTimeoutException
     * $e) { echo "query took too long!"; } }
     * 
     * ?>
     * 
     * A timeout of 0 (or a negative number) will wait forever so it can be
     * used to reset the cursor if a timeout is no longer needed.
     * 
     * @param int $ms The number of milliseconds for the cursor to wait for
     *   a response. By default, the cursor will wait forever.
     * @return MongoCursor
     * @since PECL mongo >=1.0.3
     **/
    function timeout($ms){}

    /**
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function valid(){}

    /**
     * @param resource $connection Database connection.
     * @param string $ns Full name of database and collection.
     * @param array $query Database query.
     * @param array $fields Fields to return.
     * @since PECL mongo >=0.9.0
     **/
    function __construct($connection, $ns, $query, $fields){}

}
class MongoCursorException extends MongoCursorException {
}
/**
 * Represent date objects for the database. This class should be used to
 * save dates to the database and to query for dates. For example:
 **/
class MongoDate {
    /**
     * Creates a new date. If no parameters are given, the current time is
     * used.
     * 
     * @param long $sec Number of seconds since January 1st, 1970.
     * @param long $usec Microseconds.
     * @since PECL mongo >= 0.8.1
     **/
    function __construct($sec, $usec){}

    /**
     * Returns a string representation of this date, similar to the
     * representation returned by {@link microtime()}.
     * 
     * @return string
     * @since PECL mongo >= 0.8.1
     **/
    function __toString(){}

}
/**
 * Instances of this class are used to interact with a database. To get a
 * database: Database names can use almost any character in the ASCII
 * range. However, they cannot contain , . or be the empty string.
 * 
 * A few unusual, but valid, database names: null, [x,y], 3, \, /.
 * 
 * Unlike collection names, database names may contain $.
 **/
class MongoDB {
    /**
     * This method causes its connection to be authenticated. If
     * authentication is enabled for the database server (it's not, by
     * default), you need to log in before the database will allow you to do
     * anything.
     * 
     * This method is identical to running:
     * 
     * <?php
     * 
     * $salted = "${username}:mongo:${password}"; $hash = md5($salted);
     * 
     * $nonce = $db->command(array("getnonce" => 1));
     * 
     * $saltedHash = md5($nonce["nonce"]."${username}${hash}");
     * 
     * $result = $db->command(array("authenticate" => 1, "user" => $username,
     * "nonce" => $nonce["nonce"], "key" => $saltedHash);
     * 
     * ?>
     * 
     * Once a connection has been authenticated, it can only be
     * un-authenticated by using the "logout" database command:
     * 
     * <?php
     * 
     * $db->command(array("logout" => 1));
     * 
     * ?>
     * 
     * @param string $username The username.
     * @param string $password The password (in plaintext).
     * @return array
     * @since PECL mongo >=1.0.1
     **/
    function authenticate($username, $password){}

    /**
     * Almost everything that is not a CRUD operation can be done with a
     * database command. Need to know the database version? There's a command
     * for that. Need to do aggregation? There's a command for that. Need to
     * turn up logging? You get the idea.
     * 
     * This method is identical to the function:
     * 
     * <?php
     * 
     * public function command($data) { return
     * $this->selectCollection('$cmd')->findOne($data); }
     * 
     * ?>
     * 
     * @param array $data The query to send.
     * @return array
     * @since PECL mongo >=0.9.2
     **/
    function command($data){}

    /**
     * This method is used to create capped collections and other collections
     * requiring special options. It is identical to running:
     * 
     * <?php
     * 
     * $collection = $db->command(array("create" => $name, "size" => $size,
     * "capped" => $capped, "max" => $max));
     * 
     * ?>
     * 
     * See {@link MongoDB::command} for more information about database
     * commands.
     * 
     * @param string $name The name of the collection.
     * @param bool $capped If the collection should be a fixed size.
     * @param int $size If the collection is fixed size, its size in bytes.
     * @param int $max If the collection is fixed size, the maximum number
     *   of elements to store in the collection.
     * @return MongoCollection
     * @since PECL mongo >=0.9.0
     **/
    function createCollection($name, $capped, $size, $max){}

    /**
     * This method is a flexible interface for creating database refrences
     * (see MongoDBRef).
     * 
     * @param string $collection The collection to which the database
     *   reference will point.
     * @param mixed $a Object or _id to which to create a reference. If an
     *   object or associative array is given, this will create a reference
     *   using the _id field.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function createDBRef($collection, $a){}

    /**
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function drop(){}

    /**
     * @param mixed $coll MongoCollection or name of collection to drop.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function dropCollection($coll){}

    /**
     * The Mongo database server runs a JavaScript engine. This method allows
     * you to run arbitary JavaScript on the database. This can be useful if
     * you want touch a number of collections lightly, or process some
     * results on the database side to reduce the amount that has to be sent
     * to the client.
     * 
     * @param mixed $code MongoCode or string to execute.
     * @param array $args Arguments to be passed to code.
     * @return array
     * @since PECL mongo >=0.9.3
     **/
    function execute($code, $args){}

    /**
     * @return bool
     * @since PECL mongo >=0.9.5
     **/
    function forceError(){}

    /**
     * @param array $ref A database reference.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function getDBRef($ref){}

    /**
     * @param string $prefix The prefix for the files and chunks
     *   collections.
     * @return MongoGridFS
     * @since PECL mongo >=0.9.0
     **/
    function getGridFS($prefix){}

    /**
     * @return int
     * @since PECL mongo >=0.9.0
     **/
    function getProfilingLevel(){}

    /**
     * @return array
     * @since PECL mongo >=0.9.5
     **/
    function lastError(){}

    /**
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function listCollections(){}

    /**
     * @return array
     * @since PECL mongo >=0.9.5
     **/
    function prevError(){}

    /**
     * @param bool $preserve_cloned_files If cloned files should be kept if
     *   the repair fails.
     * @param bool $backup_original_files If original files should be
     *   backed up.
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function repair($preserve_cloned_files, $backup_original_files){}

    /**
     * @return array
     * @since PECL mongo >=0.9.5
     **/
    function resetError(){}

    /**
     * @param string $name The name of the collection.
     * @return MongoCollection
     * @since PECL mongo >=0.9.0
     **/
    function selectCollection($name){}

    /**
     * @param int $level Profiling level.
     * @return int
     * @since PECL mongo >=0.9.0
     **/
    function setProfilingLevel($level){}

    /**
     * This method is not meant to be called directly. The preferred way to
     * create an instance of MongoDB is through {@link Mongo::__get} or
     * {@link Mongo::selectDB}.
     * 
     * If you're ignoring the previous paragraph and want to call it directly
     * you can do so:
     * 
     * But don't. Isn't this much nicer:
     * 
     * @param Mongo $conn Database connection.
     * @param string $name Database name.
     * @since PECL mongo >=0.9.0
     **/
    function __construct($conn, $name){}

    /**
     * This is the easiest way of getting a collection from a database
     * object. If a collection name contains strange characters, you may have
     * to use {@link MongoDB::selectCollection} instead.
     * 
     * <?php
     * 
     * $mongo = new Mongo();
     * 
     * // the following two lines are equivalent $collection =
     * $mongo->selectDB("foo")->selectCollection("bar"); $collection =
     * $mongo->foo->bar;
     * 
     * ?>
     * 
     * @param string $name The name of the collection.
     * @return MongoCollection
     * @since PECL mongo >=1.0.2
     **/
    function __get($name){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function __toString(){}

}
/**
 * This class can be used to create lightweight links between objects in
 * different collections.
 * 
 * : Suppose we need to refer to a document in another collection. The
 * easiest way is to create a field in the current document. For example,
 * if we had a "people" collection and an "addresses" collection, we
 * might want to create a link between each person document and and
 * address document:
 * 
 * Then, later on, we can find the person's address by querying the
 * "addresses" collection with the we saved in the "people" collection.
 * 
 * Suppose now that we have a more general case, where we don't know
 * which collection (or even which database) contains the referenced
 * document. is a good choice for this case, as it is a common format
 * that all of the drivers and the database understand.
 * 
 * If each person had a list of things they liked which could come from
 * multiple collections, such as "hobbies", "sports", "books", etc., we
 * could use s to keep track of what "like" went with what collection:
 * 
 * Database references can be thought of as hyperlinks: they give the
 * unique address of another document, but they do not load it or
 * automatically follow the link/reference.
 * 
 * A database reference is just a normal associative array, not an
 * instance of , so this class is a little different than the other data
 * type classes. This class contains exclusively static methods for
 * manipulating database references.
 **/
class MongoDBRef {
    /**
     * If no database is given, the current database is used.
     * 
     * @param string $collection Collection name.
     * @param mixed $id The _id field of the object to which to link.
     * @param string $database Database name.
     * @return array
     * @since PECL mongo >= 0.9.0
     **/
    function create($collection, $id, $database){}

    /**
     * @param MongoDB $db Database to use.
     * @param array $ref Reference to fetch.
     * @return array
     * @since PECL mongo >= 0.9.0
     **/
    function get($db, $ref){}

    /**
     * This not actually follow the reference, so it does not determine if it
     * is broken or not. It merely checks that {@link ref} is in valid
     * database reference format (in that it is an object or array with $ref
     * and $id fields).
     * 
     * @param mixed $ref Array or object to check.
     * @return boolean
     * @since PECL mongo >= 0.9.0
     **/
    function isRef($ref){}

}
class MongoException extends MongoException {
}
class MongoGridFS {
    /**
     * @param mixed $id _id of the file to remove.
     * @return boolean
     * @since PECL mongo >=1.0.8
     **/
    function delete($id){}

    /**
     * @return array
     * @since PECL mongo >=0.9.0
     **/
    function drop(){}

    /**
     * @param array $query The query.
     * @param array $fields Fields to return.
     * @return MongoGridFSCursor
     * @since PECL mongo >=0.9.0
     **/
    function find($query, $fields){}

    /**
     * @param mixed $query The filename or criteria for which to search.
     * @return MongoGridFSFile
     * @since PECL mongo >=0.9.0
     **/
    function findOne($query){}

    /**
     * @param mixed $id _id of the file to find.
     * @return MongoGridFSFile
     * @since PECL mongo >=1.0.8
     **/
    function get($id){}

    /**
     * @param string $filename The name of the file.
     * @param array $extra Other metadata to add to the file saved.
     * @return mixed
     * @since PECL mongo >=1.0.8
     **/
    function put($filename, $extra){}

    /**
     * @param array $criteria The filename or criteria for which to search.
     * @return boolean
     * @since PECL mongo >=0.9.0
     **/
    function remove($criteria){}

    /**
     * @param string $bytes A string of bytes to store.
     * @param array $extra Other metadata to add to the file saved.
     * @param array $options Options for the store. "safe" Check that this
     *   store succeeded.
     * @return mixed
     * @since PECL mongo >=0.9.2
     **/
    function storeBytes($bytes, $extra, $options){}

    /**
     * @param string $filename The name of the file.
     * @param array $extra Other metadata to add to the file saved.
     * @param array $options Options for the store. "safe" Check that this
     *   store succeeded.
     * @return mixed
     * @since PECL mongo >=0.9.0
     **/
    function storeFile($filename, $extra, $options){}

    /**
     * @param string $name The name field of the uploaded file.
     * @param string $filename String to be used as filename field in the
     *   database.
     * @return mixed
     * @since PECL mongo >=0.9.0
     **/
    function storeUpload($name, $filename){}

    /**
     * Files as stored across two collections, the first containing file meta
     * information, the second containing chunks of the actual file. By
     * default, fs.files and fs.chunks are the collection names used.
     * 
     * Use one argument to specify a prefix other than "fs":
     * 
     * $fs = new MongoGridFS($db, "myfiles");
     * 
     * uses myfiles.files and myfiles.chunks collections.
     * 
     * @param MongoDB $db Database.
     * @param string $prefix Optional collection name prefix.
     * @since PECL mongo >=0.9.0
     **/
    function __construct($db, $prefix){}

}
class MongoGridFSCursor {
    /**
     * @return MongoGridFSFile
     * @since PECL mongo >=0.9.0
     **/
    function current(){}

    /**
     * @return MongoGridFSFile
     * @since PECL mongo >=0.9.0
     **/
    function getNext(){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function key(){}

    /**
     * @param MongoGridFS $gridfs Related GridFS collection.
     * @param resource $connection Database connection.
     * @param string $ns Full name of database and collection.
     * @param array $query Database query.
     * @param array $fields Fields to return.
     * @since PECL mongo >=0.9.0
     **/
    function __construct($gridfs, $connection, $ns, $query, $fields){}

}
/**
 * A database file object.
 **/
class MongoGridFSFile {
    /**
     * Warning: this will load the file into memory. If the file is bigger
     * than your memory, this will cause problems!
     * 
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function getBytes(){}

    /**
     * @return string
     * @since PECL mongo >=0.9.0
     **/
    function getFilename(){}

    /**
     * @return int
     * @since PECL mongo >=0.9.0
     **/
    function getSize(){}

    /**
     * @param string $filename The location to which to write the file. If
     *   none is given, the stored filename will be used.
     * @return int
     * @since PECL mongo >=0.9.0
     **/
    function write($filename){}

    /**
     * @param MongoGridFS $gridfs The parent MongoGridFS instance.
     * @param array $file A file from the database.
     * @since PECL mongo >=0.9.0
     **/
    function __construct($gridfs, $file){}

}
/**
 * A unique identifier created for database objects. If an object is
 * inserted into the database without an _id field, an _id field will be
 * added to it with a instance as its value. If the data has a naturally
 * occuring unique field (say, a username or timestamp) it is fine to use
 * this as the _id field instead, and it will not be replaced with a .
 * 
 * Instances of the class fulfill the role that autoincrementing does in
 * a relational database: to provide a unique key if the data does not
 * natually have one. Autoincrementing does not work well with a sharded
 * database, as it is impossible to find what the next number should be
 * quickly. This class fulfills the constraints of quickly generating a
 * value that is unique across shards.
 * 
 * Each MongoId is 12 bytes (making its string form 24 hexidecimal
 * characters). The first four bytes are a timestamp, the next three are
 * a hash of the client machine's hostname, the next two are the two
 * least significant bytes of the process id running the script, and the
 * last three bytes are an incrementing value.
 * 
 * s are serializable/unserializable. Their serialized form is similar to
 * their string form:
 **/
class MongoId {
    /**
     * This returns the hostname MongoId is using to generate unique ids.
     * This should be the same value {@link gethostname} returns.
     * 
     * It is identical to the function:
     * 
     * @return string
     * @since PECL mongo >= 1.0.8
     **/
    function getHostname(){}

    /**
     * This returns the same thing as running {@link time()} when the id is
     * created.
     * 
     * @return int
     * @since PECL mongo >= 1.0.1
     **/
    function getTimestamp(){}

    /**
     * @param string $id A string to use as the id. Must be 24 hexidecimal
     *   characters. If an invalid string is passed to this constructor, the
     *   constructor will ignore it and create a new id value.
     * @since PECL mongo >= 0.8.0
     **/
    function __construct($id){}

    /**
     * This function is only used by PHP internally, it shouldn't need to
     * ever be called by the user.
     * 
     * It is identical to the function:
     * 
     * @param array $props Theoretically, an array of properties used to
     *   create the new id. However, as MongoId instances have no properties,
     *   this is not used.
     * @return MongoId
     * @since PECL mongo >= 1.0.8
     **/
    function __set_state($props){}

    /**
     * @return string
     * @since PECL mongo >= 0.8.0
     **/
    function __toString(){}

}
/**
 * is a special type used by the database that evaluates to greater than
 * any other type. Thus, if a query is sorted by a given field in
 * ascending order, any document with a as its value will be returned
 * last.
 * 
 * has no associated fields, methods, or constants. It is merely the
 * "largest" thing that can be inserted into the database.
 * 
 * The cursor will contain the staff meeting document, then the dishes
 * document. The dishes document will always be returned last, regardless
 * of what else is added to the collection (unless other documents are
 * added with in the "do by" field).
 **/
class MongoMaxKey {
}
/**
 * is a special type used by the database that evaluates to less than any
 * other type. Thus, if a query is sorted by a given field in ascending
 * order, any document with a as its value will be returned first.
 * 
 * has no associated fields, methods, or constants. It is merely the
 * "smallest" thing that can be inserted into the database.
 * 
 * The cursor will contain the lunch document, then the staff meeting
 * document. The lunch document will always be returned first, regardless
 * of what else is added to the collection (unless other documents are
 * added with in the "do by" field).
 **/
class MongoMinKey {
}
/**
 * This class can be used to create regular expressions. Typically, these
 * expressions will be used to query the database and find matching
 * strings. More unusually, they can be saved to the database and
 * retrieved.
 * 
 * Mongo recognizes six regular expression flags:
 **/
class MongoRegex {
    /**
     * Creates a new regular expression.
     * 
     * @param string $regex Regular expression string of the form
     *   /expr/flags.
     * @since PECL mongo >= 0.8.1
     **/
    function __construct($regex){}

    /**
     * Returns a string representation of this regular expression.
     * 
     * @return string
     * @since PECL mongo >= 0.8.1
     **/
    function __toString(){}

}
/**
 * is used by sharding. If you're not looking to write sharding tools,
 * what you probably want is .
 * 
 * is 4 bytes of timestamp (seconds since the epoch) and 4 bytes of
 * increment.
 * 
 * Unless you are writing something that interacts with the sharding
 * internals, stop, go directly to , do not pass go, do not collect 200
 * dollars. This is not the class you are looking for.
 * 
 * If you are writing sharding tools, read on.
 **/
class MongoTimestamp {
    /**
     * Creates a new timestamp. If no parameters are given, the current time
     * is used and the increment is automatically provided. The increment is
     * set to 0 when the module is loaded and is incremented every time this
     * constructor is called (without the $inc parameter passed in).
     * 
     * @param long $sec Number of seconds since January 1st, 1970.
     * @param long $inc Increment.
     * @since PECL mongo >= 1.0.1
     **/
    function __construct($sec, $inc){}

    /**
     * Returns the "sec" field of this timestamp.
     * 
     * @return string
     * @since PECL mongo >= 1.0.1
     **/
    function __toString(){}

}
/**
 * An Iterator that iterates over several iterators one after the other.
 **/
class MultipleIterator implements Iterator, Traversable {
    /**
     * Attaches iterator information.
     * 
     * @param Iterator $iterator The new iterator to attach.
     * @param string $infos The associative information for the Iterator,
     *   which must be an integer, a string, or .
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function attachIterator($iterator, $infos){}

    /**
     * Checks if an iterator is attached or not.
     * 
     * @param Iterator $iterator The iterator to check.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function containsIterator($iterator){}

    /**
     * Gets the number of attached iterator instances.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function countIterators(){}

    /**
     * Get the registered iterator instances.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * Detaches an iterator.
     * 
     * @param Iterator $iterator The iterator to detach.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function detachIterator($iterator){}

    /**
     * Gets information about the flags.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function getFlags(){}

    /**
     * Get the registered iterator instances.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Moves all attached iterator instances forward.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * Rewinds all attached iterator instances.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * Sets flags.
     * 
     * @param integer $flags The flags to set, according to the Flag
     *   Constants
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setFlags($flags){}

    /**
     * Checks the validity of sub iterators.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function valid(){}

    /**
     * Construct a new MultipleIterator.
     * 
     * @param integer $flags The flags to set, according to the Flag
     *   Constants
     * @since PHP 5 >= 5.3.0
     **/
    function __construct($flags){}

}
/**
 * Represents a connection between PHP and a MySQL database.
 **/
class MySQLi {
    /**
     * Returns the number of rows affected by the last INSERT, UPDATE,
     * REPLACE or DELETE query.
     * 
     * For SELECT statements {@link mysqli_affected_rows} works like {@link
     * mysqli_num_rows}.
     * 
     * @var int
     **/
    var $affected_rows;
    /**
     * Returns a string that represents the MySQL client library version.
     * 
     * @var string
     **/
    var $client_info;
    /**
     * Returns client version number as an integer.
     * 
     * @var int
     **/
    var $client_version;
    /**
     * Returns client version number as an integer.
     * 
     * @var int
     **/
    var $client_version;
    /**
     * Returns the last error code number from the last call to {@link
     * mysqli_connect}.
     * 
     * @var string
     **/
    var $connect_errno;
    /**
     * Returns the last error message string from the last call to {@link
     * mysqli_connect}.
     * 
     * @var string
     **/
    var $connect_error;
    /**
     * Returns the last error code for the most recent MySQLi function call
     * that can succeed or fail.
     * 
     * Client error message numbers are listed in the MySQL errmsg.h header
     * file, server error message numbers are listed in mysqld_error.h. In
     * the MySQL source distribution you can find a complete list of error
     * messages and error numbers in the file Docs/mysqld_error.txt.
     * 
     * @var int
     **/
    var $errno;
    /**
     * Returns the last error message for the most recent MySQLi function
     * call that can succeed or fail.
     * 
     * @var string
     **/
    var $error;
    /**
     * Returns a string describing the connection represented by the {@link
     * link} parameter (including the server host name).
     * 
     * @var string
     **/
    var $host_info;
    /**
     * The {@link mysqli_info} function returns a string providing
     * information about the last query executed. The nature of this string
     * is provided below:
     * 
     * Possible mysqli_info return values Query type Example result string
     * INSERT INTO...SELECT... Records: 100 Duplicates: 0 Warnings: 0 INSERT
     * INTO...VALUES (...),(...),(...) Records: 3 Duplicates: 0 Warnings: 0
     * LOAD DATA INFILE ... Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
     * ALTER TABLE ... Records: 3 Duplicates: 0 Warnings: 0 UPDATE ... Rows
     * matched: 40 Changed: 40 Warnings: 0
     * 
     * @var string
     **/
    var $info;
    /**
     * The {@link mysqli_insert_id} function returns the ID generated by a
     * query on a table with a column having the AUTO_INCREMENT attribute. If
     * the last query wasn't an INSERT or UPDATE statement or if the modified
     * table does not have a column with the AUTO_INCREMENT attribute, this
     * function will return zero.
     * 
     * @var mixed
     **/
    var $insert_id;
    /**
     * Returns an integer representing the MySQL protocol version used by the
     * connection represented by the {@link link} parameter.
     * 
     * @var string
     **/
    var $protocol_version;
    /**
     * Returns a string representing the version of the MySQL server that the
     * MySQLi extension is connected to.
     * 
     * @var string
     **/
    var $server_info;
    /**
     * The {@link mysqli_get_server_version} function returns the version of
     * the server connected to (represented by the {@link link} parameter) as
     * an integer.
     * 
     * @var int
     **/
    var $server_version;
    /**
     * Returns a string containing the SQLSTATE error code for the last
     * error. The error code consists of five characters. '00000' means no
     * error. The values are specified by ANSI SQL and ODBC. For a list of
     * possible values, see .
     * 
     * @var string
     **/
    var $sqlstate;
    /**
     * The {@link mysqli_thread_id} function returns the thread ID for the
     * current connection which can then be killed using the {@link
     * mysqli_kill} function. If the connection is lost and you reconnect
     * with {@link mysqli_ping}, the thread ID will be other. Therefore you
     * should get the thread ID only when you need it.
     * 
     * @var int
     **/
    var $thread_id;
    /**
     * Returns the number of warnings from the last query in the connection.
     * 
     * @var int
     **/
    var $warning_count;
    /**
     * Turns on or off auto-commit mode on queries for the database
     * connection.
     * 
     * To determine the current state of autocommit use the SQL command
     * SELECT @@autocommit.
     * 
     * @param bool $mode Whether to turn on auto-commit or not.
     * @return bool
     **/
    function autocommit($mode){}

    /**
     * Changes the user of the specified database connection and sets the
     * current database.
     * 
     * In order to successfully change users a valid {@link username} and
     * {@link password} parameters must be provided and that user must have
     * sufficient permissions to access the desired database. If for any
     * reason authorization fails, the current user authentication will
     * remain.
     * 
     * @param string $user The MySQL user name.
     * @param string $password The MySQL password.
     * @param string $database The database to change to. If desired, the
     *   value may be passed resulting in only changing the user and not
     *   selecting a database. To select a database in this case use the
     *   {@link mysqli_select_db} function.
     * @return bool
     **/
    function change_user($user, $password, $database){}

    /**
     * Returns the current character set for the database connection.
     * 
     * @return string
     **/
    function character_set_name(){}

    /**
     * Closes a previously opened database connection.
     * 
     * @return bool
     **/
    function close(){}

    /**
     * Commits the current transaction for the database connection.
     * 
     * @return bool
     **/
    function commit(){}

    /**
     * Performs debugging operations using the Fred Fish debugging library.
     * 
     * @param string $message A string representing the debugging operation
     *   to perform
     * @return bool
     **/
    function debug($message){}

    /**
     * @return void
     **/
    function disable_reads_from_master(){}

    /**
     * This function is designed to be executed by an user with the SUPER
     * privilege and is used to dump debugging information into the log for
     * the MySQL Server relating to the connection.
     * 
     * @return bool
     **/
    function dump_debug_info(){}

    /**
     * This function is used to create a legal SQL string that you can use in
     * an SQL statement. The given string is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     * 
     * @param string $escapestr The string to be escaped. Characters
     *   encoded are NUL (ASCII 0), \n, \r, \, ', ", and Control-Z.
     * @return string
     **/
    function escape_string($escapestr){}

    /**
     * Returns a character set object providing several properties of the
     * current active character set.
     * 
     * @return object
     **/
    function get_charset(){}

    /**
     * Returns a string that represents the MySQL client library version.
     * 
     * @return string
     **/
    function get_client_info(){}

    /**
     * Returns statistics about the client connection.
     * 
     * @return bool
     **/
    function get_connection_stats(){}

    /**
     * @return mysqli_warning
     **/
    function get_warnings(){}

    /**
     * Allocates or initializes a MYSQL object suitable for {@link
     * mysqli_options} and {@link mysqli_real_connect}.
     * 
     * @return mysqli
     **/
    function init(){}

    /**
     * This function is used to ask the server to kill a MySQL thread
     * specified by the {@link processid} parameter. This value must be
     * retrieved by calling the {@link mysqli_thread_id} function.
     * 
     * To stop a running query you should use the SQL command KILL QUERY
     * processid.
     * 
     * @param int $processid
     * @return bool
     **/
    function kill($processid){}

    /**
     * Indicates if one or more result sets are available from a previous
     * call to {@link mysqli_multi_query}.
     * 
     * @return bool
     **/
    function more_results(){}

    /**
     * Executes one or multiple queries which are concatenated by a
     * semicolon.
     * 
     * To retrieve the resultset from the first query you can use {@link
     * mysqli_use_result} or {@link mysqli_store_result}. All subsequent
     * query results can be processed using {@link mysqli_more_results} and
     * {@link mysqli_next_result}.
     * 
     * @param string $query The query, as a string. Data inside the query
     *   should be properly escaped.
     * @return bool
     **/
    function multi_query($query){}

    /**
     * Prepares next result set from a previous call to {@link
     * mysqli_multi_query} which can be retrieved by {@link
     * mysqli_store_result} or {@link mysqli_use_result}.
     * 
     * @return bool
     **/
    function next_result(){}

    /**
     * Used to set extra connect options and affect behavior for a
     * connection.
     * 
     * This function may be called multiple times to set several options.
     * 
     * {@link mysqli_options} should be called after {@link mysqli_init} and
     * before {@link mysqli_real_connect}.
     * 
     * @param int $option The option that you want to set. It can be one of
     *   the following values: Valid options Name Description
     *   MYSQLI_OPT_CONNECT_TIMEOUT connection timeout in seconds (supported
     *   on Windows with TCP/IP since PHP 5.3.1) MYSQLI_OPT_LOCAL_INFILE
     *   enable/disable use of LOAD LOCAL INFILE MYSQLI_INIT_COMMAND command
     *   to execute after when connecting to MySQL server
     *   MYSQLI_READ_DEFAULT_FILE Read options from named option file instead
     *   of my.cnf MYSQLI_READ_DEFAULT_GROUP Read options from the named
     *   group from my.cnf or the file specified with
     *   MYSQL_READ_DEFAULT_FILE.
     * @param mixed $value The value for the option.
     * @return bool
     **/
    function options($option, $value){}

    /**
     * Checks whether the connection to the server is working. If it has gone
     * down, and global option mysqli.reconnect is enabled an automatic
     * reconnection is attempted.
     * 
     * This function can be used by clients that remain idle for a long
     * while, to check whether the server has closed the connection and
     * reconnect if necessary.
     * 
     * @return bool
     **/
    function ping(){}

    /**
     * Poll connections.
     * 
     * @param array $read
     * @param array $error
     * @param array $reject
     * @param int $sec Number of seconds to wait, must be non-negative.
     * @param int $usec Number of microseconds to wait, must be
     *   non-negative.
     * @return int
     **/
    function poll(&$read, &$error, &$reject, $sec, $usec){}

    /**
     * Prepares the SQL query, and returns a statement handle to be used for
     * further operations on the statement. The query must consist of a
     * single SQL statement.
     * 
     * The parameter markers must be bound to application variables using
     * {@link mysqli_stmt_bind_param} and/or {@link mysqli_stmt_bind_result}
     * before executing the statement or fetching rows.
     * 
     * @param string $query The query, as a string. This parameter can
     *   include one or more parameter markers in the SQL statement by
     *   embedding question mark (?) characters at the appropriate positions.
     * @return mysqli_stmt
     **/
    function prepare($query){}

    /**
     * Performs a {@link query} against the database.
     * 
     * Functionally, using this function is identical to calling {@link
     * mysqli_real_query} followed either by {@link mysqli_use_result} or
     * {@link mysqli_store_result}.
     * 
     * @param string $query The query string. Data inside the query should
     *   be properly escaped.
     * @param int $resultmode Either the constant MYSQLI_USE_RESULT or
     *   MYSQLI_STORE_RESULT depending on the desired behavior. By default,
     *   MYSQLI_STORE_RESULT is used. If you use MYSQLI_USE_RESULT all
     *   subsequent calls will return error Commands out of sync unless you
     *   call {@link mysqli_free_result} With MYSQLI_ASYNC (available with
     *   mysqlnd), it is possible to perform query asynchronously. {@link
     *   mysqli_poll} is then used to get results from such queries.
     * @return mixed
     **/
    function query($query, $resultmode){}

    /**
     * Establish a connection to a MySQL database engine.
     * 
     * This function differs from {@link mysqli_connect}:
     * 
     * @param string $host Can be either a host name or an IP address.
     *   Passing the value or the string "localhost" to this parameter, the
     *   local host is assumed. When possible, pipes will be used instead of
     *   the TCP/IP protocol.
     * @param string $username The MySQL user name.
     * @param string $passwd If provided or , the MySQL server will attempt
     *   to authenticate the user against those user records which have no
     *   password only. This allows one username to be used with different
     *   permissions (depending on if a password as provided or not).
     * @param string $dbname If provided will specify the default database
     *   to be used when performing queries.
     * @param int $port Specifies the port number to attempt to connect to
     *   the MySQL server.
     * @param string $socket Specifies the socket or named pipe that should
     *   be used.
     * @param int $flags With the parameter {@link flags} you can set
     *   different connection options:
     * @return bool
     **/
    function real_connect($host, $username, $passwd, $dbname, $port, $socket, $flags){}

    /**
     * This function is used to create a legal SQL string that you can use in
     * an SQL statement. The given string is encoded to an escaped SQL
     * string, taking into account the current character set of the
     * connection.
     * 
     * @param string $escapestr The string to be escaped. Characters
     *   encoded are NUL (ASCII 0), \n, \r, \, ', ", and Control-Z.
     * @return string
     **/
    function real_escape_string($escapestr){}

    /**
     * Executes a single query against the database whose result can then be
     * retrieved or stored using the {@link mysqli_store_result} or {@link
     * mysqli_use_result} functions.
     * 
     * In order to determine if a given query should return a result set or
     * not, see {@link mysqli_field_count}.
     * 
     * @param string $query The query, as a string. Data inside the query
     *   should be properly escaped.
     * @return bool
     **/
    function real_query($query){}

    /**
     * Get result from async query.
     * 
     * @return mysqli_result
     **/
    function reap_async_query(){}

    /**
     * Rollbacks the current transaction for the database.
     * 
     * @return bool
     **/
    function rollback(){}

    /**
     * Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN
     * depending on a query type. INSERT, UPDATE and similar are master
     * queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.
     * 
     * @param string $query
     * @return int
     **/
    function rpl_query_type($query){}

    /**
     * Selects the default database to be used when performing queries
     * against the database connection.
     * 
     * @param string $dbname The database name.
     * @return bool
     **/
    function select_db($dbname){}

    /**
     * @param string $query
     * @return bool
     **/
    function send_query($query){}

    /**
     * Sets the default character set to be used when sending data from and
     * to the database server.
     * 
     * @param string $charset The charset to be set as default.
     * @return bool
     **/
    function set_charset($charset){}

    /**
     * Set callback function for LOAD DATA LOCAL INFILE command
     * 
     * The callbacks task is to read input from the file specified in the
     * LOAD DATA LOCAL INFILE and to reformat it into the format understood
     * by LOAD DATA INFILE.
     * 
     * The returned data needs to match the format specified in the LOAD DATA
     * 
     * @param mysqli $link A callback function or object method taking the
     *   following parameters:
     * @param callback $read_func A PHP stream associated with the SQL
     *   commands INFILE
     * @return bool
     **/
    function set_local_infile_handler($link, $read_func){}

    /**
     * Used for establishing secure connections using SSL. It must be called
     * before {@link mysqli_real_connect}. This function does nothing unless
     * OpenSSL support is enabled.
     * 
     * Note that MySQL Native Driver does not support SSL, so calling this
     * function when using MySQL Native Driver will result in an error. MySQL
     * Native Driver is enabled by default on Microsoft Windows from PHP
     * version 5.3 onwards.
     * 
     * @param string $key The path name to the key file.
     * @param string $cert The path name to the certificate file.
     * @param string $ca The path name to the certificate authority file.
     * @param string $capath The pathname to a directory that contains
     *   trusted SSL CA certificates in PEM format.
     * @param string $cipher A list of allowable ciphers to use for SSL
     *   encryption.
     * @return bool
     **/
    function ssl_set($key, $cert, $ca, $capath, $cipher){}

    /**
     * {@link mysqli_stat} returns a string containing information similar to
     * that provided by the 'mysqladmin status' command. This includes uptime
     * in seconds and the number of running threads, questions, reloads, and
     * open tables.
     * 
     * @return string
     **/
    function stat(){}

    /**
     * Allocates and initializes a statement object suitable for {@link
     * mysqli_stmt_prepare}.
     * 
     * @return mysqli_stmt
     **/
    function stmt_init(){}

    /**
     * Transfers the result set from the last query on the database
     * connection represented by the {@link link} parameter to be used with
     * the {@link mysqli_data_seek} function.
     * 
     * @return mysqli_result
     **/
    function store_result(){}

    /**
     * Used to initiate the retrieval of a result set from the last query
     * executed using the {@link mysqli_real_query} function on the database
     * connection.
     * 
     * Either this or the {@link mysqli_store_result} function must be called
     * before the results of a query can be retrieved, and one or the other
     * must be called to prevent the next query on that database connection
     * from failing.
     * 
     * @return mysqli_result
     **/
    function use_result(){}

}
class MySQLi_Driver {
    /**
     * @return void
     **/
    function embedded_server_end(){}

    /**
     * @param bool $start
     * @param array $arguments
     * @param array $groups
     * @return bool
     **/
    function embedded_server_start($start, $arguments, $groups){}

}
class MySQLi_Result {
    /**
     * Returns the position of the field cursor used for the last {@link
     * mysqli_fetch_field} call. This value can be used as an argument to
     * {@link mysqli_field_seek}.
     * 
     * @var int
     **/
    var $current_field;
    /**
     * Returns the number of fields from specified result set.
     * 
     * @var int
     **/
    var $field_count;
    /**
     * Returns the number of columns for the most recent query on the
     * connection represented by the {@link link} parameter. This function
     * can be useful when using the {@link mysqli_store_result} function to
     * determine if the query should have produced a non-empty result set or
     * not without knowing the nature of the query.
     * 
     * @var int
     **/
    var $field_count;
    /**
     * The {@link mysqli_fetch_lengths} function returns an array containing
     * the lengths of every column of the current row within the result set.
     * 
     * @var array
     **/
    var $lengths;
    /**
     * Returns the number of rows in the result set.
     * 
     * The use of {@link mysqli_num_rows} depends on whether you use buffered
     * or unbuffered result sets. In case you use unbuffered resultsets
     * {@link mysqli_num_rows} will not return the correct number of rows
     * until all the rows in the result have been retrieved.
     * 
     * @var int
     **/
    var $num_rows;
    /**
     * Frees the memory associated with the result.
     * 
     * @return void
     **/
    function close(){}

    /**
     * The {@link mysqli_data_seek} function seeks to an arbitrary result
     * pointer specified by the {@link offset} in the result set.
     * 
     * @param int $offset The field offset. Must be between zero and the
     *   total number of rows minus one (0..{@link mysqli_num_rows} - 1).
     * @return bool
     **/
    function data_seek($offset){}

    /**
     * {@link mysqli_fetch_all} fetches all result rows and returns the
     * result set as an associative array, a numeric array, or both.
     * 
     * @param int $resulttype This optional parameter is a constant
     *   indicating what type of array should be produced from the current
     *   row data. The possible values for this parameter are the constants
     *   MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH.
     * @return mixed
     **/
    function fetch_all($resulttype){}

    /**
     * Returns an array that corresponds to the fetched row or if there are
     * no more rows for the resultset represented by the {@link result}
     * parameter.
     * 
     * {@link mysqli_fetch_array} is an extended version of the {@link
     * mysqli_fetch_row} function. In addition to storing the data in the
     * numeric indices of the result array, the {@link mysqli_fetch_array}
     * function can also store the data in associative indices, using the
     * field names of the result set as keys.
     * 
     * If two or more columns of the result have the same field names, the
     * last column will take precedence and overwrite the earlier data. In
     * order to access multiple columns with the same name, the numerically
     * indexed version of the row must be used.
     * 
     * @param int $resulttype This optional parameter is a constant
     *   indicating what type of array should be produced from the current
     *   row data. The possible values for this parameter are the constants
     *   MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH. By using the MYSQLI_ASSOC
     *   constant this function will behave identically to the {@link
     *   mysqli_fetch_assoc}, while MYSQLI_NUM will behave identically to the
     *   {@link mysqli_fetch_row} function. The final option MYSQLI_BOTH will
     *   create a single array with the attributes of both.
     * @return mixed
     **/
    function fetch_array($resulttype){}

    /**
     * Returns an associative array that corresponds to the fetched row or if
     * there are no more rows.
     * 
     * @return array
     **/
    function fetch_assoc(){}

    /**
     * Returns the definition of one column of a result set as an object.
     * Call this function repeatedly to retrieve information about all
     * columns in the result set.
     * 
     * @return object
     **/
    function fetch_field(){}

    /**
     * This function serves an identical purpose to the {@link
     * mysqli_fetch_field} function with the single difference that, instead
     * of returning one object at a time for each field, the columns are
     * returned as an array of objects.
     * 
     * @return array
     **/
    function fetch_fields(){}

    /**
     * Returns an object which contains field definition information from the
     * specified result set.
     * 
     * @param int $fieldnr The field number. This value must be in the
     *   range from 0 to number of fields - 1.
     * @return object
     **/
    function fetch_field_direct($fieldnr){}

    /**
     * The {@link mysqli_fetch_object} will return the current row result set
     * as an object where the attributes of the object represent the names of
     * the fields found within the result set.
     * 
     * @param string $class_name The name of the class to instantiate, set
     *   the properties of and return. If not specified, a stdClass object is
     *   returned.
     * @param array $params An optional array of parameters to pass to the
     *   constructor for {@link class_name} objects.
     * @return object
     **/
    function fetch_object($class_name, $params){}

    /**
     * Fetches one row of data from the result set and returns it as an
     * enumerated array, where each column is stored in an array offset
     * starting from 0 (zero). Each subsequent call to this function will
     * return the next row within the result set, or if there are no more
     * rows.
     * 
     * @return mixed
     **/
    function fetch_row(){}

    /**
     * Sets the field cursor to the given offset. The next call to {@link
     * mysqli_fetch_field} will retrieve the field definition of the column
     * associated with that offset.
     * 
     * @param int $fieldnr The field number. This value must be in the
     *   range from 0 to number of fields - 1.
     * @return bool
     **/
    function field_seek($fieldnr){}

    /**
     * Frees the memory associated with the result.
     * 
     * @return void
     **/
    function free(){}

    /**
     * Frees the memory associated with the result.
     * 
     * @return void
     **/
    function free_result(){}

}
class MySQLi_STMT {
    /**
     * Returns the number of rows affected by INSERT, UPDATE, or DELETE
     * query.
     * 
     * This function only works with queries which update a table. In order
     * to get the number of rows from a SELECT query, use {@link
     * mysqli_stmt_num_rows} instead.
     * 
     * @var int
     **/
    var $affected_rows;
    /**
     * Returns the error code for the most recently invoked statement
     * function that can succeed or fail.
     * 
     * Client error message numbers are listed in the MySQL errmsg.h header
     * file, server error message numbers are listed in mysqld_error.h. In
     * the MySQL source distribution you can find a complete list of error
     * messages and error numbers in the file Docs/mysqld_error.txt.
     * 
     * @var int
     **/
    var $errno;
    /**
     * Returns a containing the error message for the most recently invoked
     * statement function that can succeed or fail.
     * 
     * @var string
     **/
    var $error;
    /**
     * @var int
     **/
    var $field_count;
    /**
     * @var int
     **/
    var $insert_id;
    /**
     * Returns the number of rows in the result set. The use of {@link
     * mysqli_stmt_num_rows} depends on whether or not you used {@link
     * mysqli_stmt_store_result} to buffer the entire result set in the
     * statement handle.
     * 
     * If you use {@link mysqli_stmt_store_result}, {@link
     * mysqli_stmt_num_rows} may be called immediately.
     * 
     * @var int
     **/
    var $num_rows;
    /**
     * Returns the number of parameter markers present in the prepared
     * statement.
     * 
     * @var int
     **/
    var $param_count;
    /**
     * Returns a string containing the SQLSTATE error code for the most
     * recently invoked prepared statement function that can succeed or fail.
     * The error code consists of five characters. '00000' means no error.
     * The values are specified by ANSI SQL and ODBC. For a list of possible
     * values, see .
     * 
     * @var string
     **/
    var $sqlstate;
    /**
     * Gets the current value of a statement attribute.
     * 
     * @param int $attr The attribute that you want to get.
     * @return int
     **/
    function attr_get($attr){}

    /**
     * Used to modify the behavior of a prepared statement. This function may
     * be called multiple times to set several attributes.
     * 
     * @param int $attr The attribute that you want to set. It can have one
     *   of the following values: Attribute values Character Description
     *   MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH If set to 1, causes {@link
     *   mysqli_stmt_store_result} to update the metadata
     *   MYSQL_FIELD->max_length value. MYSQLI_STMT_ATTR_CURSOR_TYPE Type of
     *   cursor to open for statement when {@link mysqli_stmt_execute} is
     *   invoked. {@link mode} can be MYSQLI_CURSOR_TYPE_NO_CURSOR (the
     *   default) or MYSQLI_CURSOR_TYPE_READ_ONLY.
     *   MYSQLI_STMT_ATTR_PREFETCH_ROWS Number of rows to fetch from server
     *   at a time when using a cursor. {@link mode} can be in the range from
     *   1 to the maximum value of unsigned long. The default is 1. If you
     *   use the MYSQLI_STMT_ATTR_CURSOR_TYPE option with
     *   MYSQLI_CURSOR_TYPE_READ_ONLY, a cursor is opened for the statement
     *   when you invoke {@link mysqli_stmt_execute}. If there is already an
     *   open cursor from a previous {@link mysqli_stmt_execute} call, it
     *   closes the cursor before opening a new one. {@link
     *   mysqli_stmt_reset} also closes any open cursor before preparing the
     *   statement for re-execution. {@link mysqli_stmt_free_result} closes
     *   any open cursor. If you open a cursor for a prepared statement,
     *   {@link mysqli_stmt_store_result} is unnecessary.
     * @param int $mode The value to assign to the attribute.
     * @return bool
     **/
    function attr_set($attr, $mode){}

    /**
     * Bind variables for the parameter markers in the SQL statement that was
     * passed to {@link mysqli_prepare}.
     * 
     * @param string $types A string that contains one or more characters
     *   which specify the types for the corresponding bind variables: Type
     *   specification chars Character Description i corresponding variable
     *   has type integer d corresponding variable has type double s
     *   corresponding variable has type string b corresponding variable is a
     *   blob and will be sent in packets
     * @param mixed $var1 The number of variables and length of string
     *   {@link types} must match the parameters in the statement.
     * @return bool
     **/
    function bind_param($types, &$var1){}

    /**
     * Binds columns in the result set to variables.
     * 
     * When {@link mysqli_stmt_fetch} is called to fetch data, the MySQL
     * client/server protocol places the data for the bound columns into the
     * specified variables {@link var1, ...}.
     * 
     * @param mixed $var1 The variable to be bound.
     * @return bool
     **/
    function bind_result(&$var1){}

    /**
     * Closes a prepared statement. {@link mysqli_stmt_close} also
     * deallocates the statement handle. If the current statement has pending
     * or unread results, this function cancels them so that the next query
     * can be executed.
     * 
     * @return bool
     **/
    function close(){}

    /**
     * Seeks to an arbitrary result pointer in the statement result set.
     * 
     * {@link mysqli_stmt_store_result} must be called prior to {@link
     * mysqli_stmt_data_seek}.
     * 
     * @param int $offset Must be between zero and the total number of rows
     *   minus one (0.. {@link mysqli_stmt_num_rows} - 1).
     * @return void
     **/
    function data_seek($offset){}

    /**
     * Executes a query that has been previously prepared using the {@link
     * mysqli_prepare} function. When executed any parameter markers which
     * exist will automatically be replaced with the appropriate data.
     * 
     * If the statement is UPDATE, DELETE, or INSERT, the total number of
     * affected rows can be determined by using the {@link
     * mysqli_stmt_affected_rows} function. Likewise, if the query yields a
     * result set the {@link mysqli_stmt_fetch} function is used.
     * 
     * @return bool
     **/
    function execute(){}

    /**
     * Fetch the result from a prepared statement into the variables bound by
     * {@link mysqli_stmt_bind_result}.
     * 
     * @return bool
     **/
    function fetch(){}

    /**
     * Frees the result memory associated with the statement, which was
     * allocated by {@link mysqli_stmt_store_result}.
     * 
     * @return void
     **/
    function free_result(){}

    /**
     * @param mysqli_stmt $stmt
     * @return object
     **/
    function get_warnings($stmt){}

    /**
     * Prepares the SQL query pointed to by the null-terminated string query.
     * 
     * The parameter markers must be bound to application variables using
     * {@link mysqli_stmt_bind_param} and/or {@link mysqli_stmt_bind_result}
     * before executing the statement or fetching rows.
     * 
     * @param string $query The query, as a string. It must consist of a
     *   single SQL statement. You can include one or more parameter markers
     *   in the SQL statement by embedding question mark (?) characters at
     *   the appropriate positions.
     * @return mixed
     **/
    function prepare($query){}

    /**
     * Resets a prepared statement on client and server to state after
     * prepare.
     * 
     * It resets the statement on the server, data sent using {@link
     * mysqli_stmt_send_long_data}, unbuffered result sets and current
     * errors. It does not clear bindings or stored result sets. Stored
     * result sets will be cleared when executing the prepared statement (or
     * closing it).
     * 
     * To prepare a statement with another query use function {@link
     * mysqli_stmt_prepare}.
     * 
     * @return bool
     **/
    function reset(){}

    /**
     * If a statement passed to {@link mysqli_prepare} is one that produces a
     * result set, {@link mysqli_stmt_result_metadata} returns the result
     * object that can be used to process the meta information such as total
     * number of fields and individual field information.
     * 
     * The result set structure should be freed when you are done with it,
     * which you can do by passing it to {@link mysqli_free_result}
     * 
     * @return mysqli_result
     **/
    function result_metadata(){}

    /**
     * Allows to send parameter data to the server in pieces (or chunks),
     * e.g. if the size of a blob exceeds the size of max_allowed_packet.
     * This function can be called multiple times to send the parts of a
     * character or binary data value for a column, which must be one of the
     * TEXT or BLOB datatypes.
     * 
     * @param int $param_nr Indicates which parameter to associate the data
     *   with. Parameters are numbered beginning with 0.
     * @param string $data A string containing data to be sent.
     * @return bool
     **/
    function send_long_data($param_nr, $data){}

    /**
     * You must call {@link mysqli_stmt_store_result} for every query that
     * successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN),
     * and only if you want to buffer the complete result set by the client,
     * so that the subsequent {@link mysqli_stmt_fetch} call returns buffered
     * data.
     * 
     * @return bool
     **/
    function store_result(){}

}
class mysqli_warning {
    /**
     * @return void
     **/
    function next(){}

    function __construct(){}

}
/**
 * This iterator cannot be rewinded.
 **/
class NoRewindIterator extends IteratorIterator {
    /**
     * Gets the current value.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * Gets the inner iterator, that was passed in to NoRewindIterator.
     * 
     * @return iterator
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator(){}

    /**
     * Gets the current key.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Forwards to the next element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Prevents the rewind operation on the inner iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Checks whether the iterator is valid.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

    /**
     * Constructs a NoRewindIterator.
     * 
     * @param Iterator $iterator The iterator being used.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator){}

}
/**
 * The Unicode Consortium has defined a number of normalization forms
 * reflecting the various needs of applications: The different forms are
 * defined in terms of a set of transformations on the text,
 * transformations that are expressed by both an algorithm and a set of
 * data files.
 **/
class Normalizer {
    /**
     * Checks if the provided string is already in the specified
     * normalization form.
     * 
     * @param string $input The input string to normalize
     * @param string $form One of the normalization forms.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function isNormalized($input, $form){}

    /**
     * Normalizes the input provided and returns the normalized string
     * 
     * @param string $input The input string to normalize
     * @param string $form One of the normalization forms.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function normalize($input, $form){}

}
/**
 * For currencies you can use currency format type to create a formatter
 * that returns a string with the formatted number and the appropriate
 * currency sign. Of course, the NumberFormatter class is unaware of
 * exchange rates so, the number output is the same regardless of the
 * specified currency. This means that the same number has different
 * monetary values depending on the currency locale. If the number is
 * 9988776.65 the results will be:
 **/
class NumberFormatter {
    /**
     * Creates a number formatter.
     * 
     * @param string $locale Locale in which the number would be formatted
     *   (locale name, e.g. en_CA).
     * @param int $style Style of the formatting, one of the format style
     *   constants. If NumberFormatter::PATTERN_DECIMAL or
     *   NumberFormatter::PATTERN_RULEBASED is passed then the number format
     *   is opened using the given pattern, which must conform to the syntax
     *   described in ICU DecimalFormat documentation or ICU
     *   RuleBasedNumberFormat documentation, respectively.
     * @param string $pattern Pattern string in case chosen style requires
     *   pattern.
     * @return NumberFormatter
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function create($locale, $style, $pattern){}

    /**
     * Format a numeric value according to the formatter rules.
     * 
     * @param number $value NumberFormatter object.
     * @param int $type The value to format. Can be integer or double,
     *   other values will be converted to a numeric value.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function format($value, $type){}

    /**
     * Format the currency value according to the formatter rules.
     * 
     * @param float $value NumberFormatter object.
     * @param string $currency The numeric currency value.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function formatCurrency($value, $currency){}

    /**
     * Get a numeric attribute associated with the formatter. An example of a
     * numeric attribute is the number of integer digits the formatter will
     * produce.
     * 
     * @param int $attr NumberFormatter object.
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getAttribute($attr){}

    /**
     * Get error code from the last function performed by the formatter.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorCode(){}

    /**
     * Get error message from the last function performed by the formatter.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getErrorMessage(){}

    /**
     * Get formatter locale name.
     * 
     * @param int $type NumberFormatter object.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getLocale($type){}

    /**
     * Extract pattern used by the formatter.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getPattern(){}

    /**
     * Get a symbol associated with the formatter. The formatter uses symbols
     * to represent the special locale-dependent characters in a number, for
     * example the percent sign. This API is not supported for rule-based
     * formatters.
     * 
     * @param int $attr NumberFormatter object.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getSymbol($attr){}

    /**
     * Get a text attribute associated with the formatter. An example of a
     * text attribute is the suffix for positive numbers. If the formatter
     * does not understand the attribute, U_UNSUPPORTED_ERROR error is
     * produced. Rule-based formatters only understand
     * NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
     * 
     * @param int $attr NumberFormatter object.
     * @return string
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function getTextAttribute($attr){}

    /**
     * Parse a string into a number using the current formatter rules.
     * 
     * @param string $value NumberFormatter object.
     * @param int $type The formatting type to use. By default,
     *   NumberFormatter::TYPE_DOUBLE is used.
     * @param int $position Offset in the string at which to begin parsing.
     *   On return, this value will hold the offset at which parsing ended.
     * @return mixed
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function parse($value, $type, &$position){}

    /**
     * Parse a string into a double and a currency using the current
     * formatter.
     * 
     * @param string $value NumberFormatter object.
     * @param string $currency Parameter to receive the currency name
     *   (3-letter ISO 4217 currency code).
     * @param int $position Offset in the string at which to begin parsing.
     *   On return, this value will hold the offset at which parsing ended.
     * @return float
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function parseCurrency($value, &$currency, &$position){}

    /**
     * Set a numeric attribute associated with the formatter. An example of a
     * numeric attribute is the number of integer digits the formatter will
     * produce.
     * 
     * @param int $attr NumberFormatter object.
     * @param int $value Attribute specifier - one of the numeric attribute
     *   constants.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setAttribute($attr, $value){}

    /**
     * Set the pattern used by the formatter. Can not be used on a rule-based
     * formatter.
     * 
     * @param string $pattern NumberFormatter object.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setPattern($pattern){}

    /**
     * Set a symbol associated with the formatter. The formatter uses symbols
     * to represent the special locale-dependent characters in a number, for
     * example the percent sign. This API is not supported for rule-based
     * formatters.
     * 
     * @param int $attr NumberFormatter object.
     * @param string $value Symbol specifier, one of the format symbol
     *   constants.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setSymbol($attr, $value){}

    /**
     * Set a text attribute associated with the formatter. An example of a
     * text attribute is the suffix for positive numbers. If the formatter
     * does not understand the attribute, U_UNSUPPORTED_ERROR error is
     * produced. Rule-based formatters only understand
     * NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
     * 
     * @param int $attr NumberFormatter object.
     * @param string $value Attribute specifier - one of the text attribute
     *   constants.
     * @return bool
     * @since PHP 5 >= 5.3.0, PECL intl >= 1.0.0
     **/
    function setTextAttribute($attr, $value){}

}
/**
 * The OAuth extension provides a simple interface to interact with data
 * providers using the OAuth HTTP specification to protect private
 * resources.
 **/
class OAuth {
    /**
     * Turns off verbose request information (off by default). Alternatively,
     * the debug property can be set to a value to turn debug off.
     * 
     * @return bool
     * @since PECL OAuth >= 0.99.3
     **/
    function disableDebug(){}

    /**
     * Disable redirects from being followed automatically, thus allowing the
     * request to be manually redirected.
     * 
     * @return bool
     * @since PECL OAuth >= 0.99.9
     **/
    function disableRedirects(){}

    /**
     * Turns off the usual SSL peer certificate and host checks, this is not
     * for production environments. Alternatively, the {@link sslChecks}
     * member can be set to to turn SSL checks off.
     * 
     * @return bool
     * @since PECL OAuth >= 0.99.5
     **/
    function disableSSLChecks(){}

    /**
     * Turns on verbose request information useful for debugging, the debug
     * information is stored in the {@link debugInfo} member. Alternatively,
     * the {@link debug} member can be set to a non- value to turn debug on.
     * 
     * @return bool
     * @since PECL OAuth >= 0.99.3
     **/
    function enableDebug(){}

    /**
     * Follow and sign redirects automatically, which is enabled by default.
     * 
     * @return bool
     * @since PECL OAuth >= 0.99.9
     **/
    function enableRedirects(){}

    /**
     * Turns on the usual SSL peer certificate and host checks (enabled by
     * default). Alternatively, the {@link sslChecks} member can be set to a
     * non- value to turn SSL checks off.
     * 
     * @return bool
     * @since PECL OAuth >= 0.99.5
     **/
    function enableSSLChecks(){}

    /**
     * Fetch a resource.
     * 
     * @param string $protected_resource_url URL to the OAuth protected
     *   resource.
     * @param array $extra_parameters Extra parameters to send with the
     *   request for the resource.
     * @param string $http_method One of the OAUTH_HTTP_METHOD_* OAUTH
     *   constants, which includes GET, POST, PUT, HEAD, or DELETE. HEAD
     *   (OAUTH_HTTP_METHOD_HEAD) can be useful for discovering information
     *   prior to the request (if OAuth credentials are in the Authorization
     *   header).
     * @param array $http_headers HTTP client headers (such as User-Agent,
     *   Accept, etc.)
     * @return mixed
     * @since PECL OAuth >= 0.99.1
     **/
    function fetch($protected_resource_url, $extra_parameters, $http_method, $http_headers){}

    /**
     * Fetch an access token, secret and any additional response parameters
     * from the service provider.
     * 
     * @param string $access_token_url URL to the access token API.
     * @param string $auth_session_handle Authorization session handle,
     *   this parameter does not have any citation in the core OAuth 1.0
     *   specification but may be implemented by large providers. See
     *   ScalableOAuth for more information.
     * @param string $verifier_token For service providers which support
     *   1.0a, a {@link verifier_token} must be passed while exchanging the
     *   request token for the access token. If the {@link verifier_token} is
     *   present in {@link $_GET} or {@link $_POST} it is passed
     *   automatically and the caller does not need to specify a {@link
     *   verifier_token} (usually if the access token is exchanged at the
     *   oauth_callback URL). See ScalableOAuth for more information.
     * @return array
     * @since PECL OAuth >= 0.99.1
     **/
    function getAccessToken($access_token_url, $auth_session_handle, $verifier_token){}

    /**
     * Gets the Certificate Authority information, which includes the ca_path
     * and ca_info set by OAuth::setCaPath.
     * 
     * @return array
     * @since PECL OAuth >= 0.99.8
     **/
    function getCAPath(){}

    /**
     * Get the raw response of the most recent request.
     * 
     * @return string
     * @since PECL OAuth >= 0.99.1
     **/
    function getLastResponse(){}

    /**
     * Get HTTP information about the last response.
     * 
     * @return array
     * @since PECL OAuth >= 0.99.1
     **/
    function getLastResponseInfo(){}

    /**
     * Fetch a request token, secret and any additional response parameters
     * from the service provider.
     * 
     * @param string $request_token_url URL to the request token API.
     * @param string $callback_url OAuth callback URL. If {@link
     *   callback_url} is passed and is an empty value, it is set to "oob" to
     *   address the OAuth 2009.1 advisory.
     * @return array
     * @since PECL OAuth >= 0.99.1
     **/
    function getRequestToken($request_token_url, $callback_url){}

    /**
     * Set where the OAuth parameters should be passed.
     * 
     * @param int $auth_type {@link auth_type} can be one of the following
     *   flags (in order of decreasing preference as per OAuth 1.0 section
     *   5.2): OAUTH_AUTH_TYPE_AUTHORIZATION Pass the OAuth parameters in the
     *   HTTP Authorization header. OAUTH_AUTH_TYPE_FORM Append the OAuth
     *   parameters to the HTTP POST request body. OAUTH_AUTH_TYPE_URI Append
     *   the OAuth parameters to the request URI. OAUTH_AUTH_TYPE_NONE None.
     * @return mixed
     * @since PECL OAuth >= 0.99.1
     **/
    function setAuthType($auth_type){}

    /**
     * Sets the Certificate Authority (CA), both for path and info.
     * 
     * @param string $ca_path The CA Path being set.
     * @param string $ca_info The CA Info being set.
     * @return mixed
     * @since PECL OAuth >= 0.99.8
     **/
    function setCAPath($ca_path, $ca_info){}

    /**
     * Sets the nonce for all subsequent requests.
     * 
     * @param string $nonce The value for oauth_nonce.
     * @return mixed
     * @since PECL OAuth >= 0.99.1
     **/
    function setNonce($nonce){}

    /**
     * Sets the Request Engine, that will be sending the HTTP requests.
     * 
     * @param string $reqengine The desired request engine. Set to
     *   OAUTH_REQENGINE_STREAMS to use PHP Streams, or OAUTH_REQENGINE_CURL
     *   to use Curl.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function setRequestEngine($reqengine){}

    /**
     * Sets the RSA certificate.
     * 
     * @param string $cert The RSA certificate.
     * @return mixed
     * @since PECL OAuth >= 1.0.0
     **/
    function setRSACertificate($cert){}

    /**
     * Sets the OAuth timestamp for subsequent requests.
     * 
     * @param string $timestamp The timestamp.
     * @return mixed
     * @since PECL OAuth >= 1.0.0
     **/
    function setTimestamp($timestamp){}

    /**
     * Set the token and secret for subsequent requests.
     * 
     * @param string $token The OAuth token.
     * @param string $token_secret The OAuth token secret.
     * @return bool
     * @since PECL OAuth >= 0.99.1
     **/
    function setToken($token, $token_secret){}

    /**
     * Sets the OAuth version for subsequent requests
     * 
     * @param string $version OAuth version, default value is always "1.0"
     * @return bool
     * @since PECL OAuth >= 0.99.1
     **/
    function setVersion($version){}

    /**
     * Creates a new OAuth object
     * 
     * @param string $consumer_key The consumer key provided by the service
     *   provider.
     * @param string $consumer_secret The consumer secret provided by the
     *   service provider.
     * @param string $signature_method This optional parameter defines
     *   which signature method to use, by default it is
     *   OAUTH_SIG_METHOD_HMACSHA1 (HMAC-SHA1).
     * @param int $auth_type This optional parameter defines how to pass
     *   the OAuth parameters to a consumer, by default it is
     *   OAUTH_AUTH_TYPE_AUTHORIZATION (in the Authorization header).
     * @since PECL OAuth >= 0.99.1
     **/
    function __construct($consumer_key, $consumer_secret, $signature_method, $auth_type){}

    /**
     * The destructor.
     * 
     * @return void
     * @since PECL OAuth >= 0.99.9
     **/
    function __destruct(){}

}
/**
 * This exception is thrown when exceptional errors occur while using the
 * OAuth extension and contains useful debugging information.
 **/
class OAuthException extends Exception {
}
/**
 * Manages an OAuth provider class.
 * 
 * See also an external in-depth tutorial titled , which takes a hands-on
 * approach to providing this service. There are also within the OAuth
 * extensions sources.
 **/
class OAuthProvider {
    /**
     * Add required oauth provider parameters.
     * 
     * @param string $req_params The required parameters.
     * @return bool
     * @since PECL OAuth >= 1.0.0
     **/
    function addRequiredParameter($req_params){}

    /**
     * Calls the registered consumer handler callback function, which is set
     * with OAuthProvider::consumerHandler.
     * 
     * @return void
     **/
    function callconsumerHandler(){}

    /**
     * Calls the registered timestamp handler callback function, which is set
     * with OAuthProvider::timestampNonceHandler.
     * 
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function callTimestampNonceHandler(){}

    /**
     * Calls the registered token handler callback function, which is set
     * with OAuthProvider::tokenHandler.
     * 
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function calltokenHandler(){}

    /**
     * Checks an OAuth request.
     * 
     * @param string $uri The optional URI, or endpoint.
     * @param string $method The HTTP method. Optionally pass in one of the
     *   OAUTH_HTTP_METHOD_* OAuth constants.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function checkOAuthRequest($uri, $method){}

    /**
     * Sets the consumer handler callback, which will later be called with
     * OAuthProvider::callConsumerHandler.
     * 
     * @param callback $callback_function The callback functions name.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function consumerHandler($callback_function){}

    /**
     * Generates a string of pseudo-random bytes.
     * 
     * @param int $size The desired token length, in terms of bytes.
     * @param bool $strong Setting to means /dev/random will be used for
     *   entropy, as otherwise the non-blocking /dev/urandom is used. This
     *   parameter is ignored on Windows.
     * @return string
     * @since PECL OAuth >= 1.0.0
     **/
    function generateToken($size, $strong){}

    /**
     * The 2-legged flow, or request signing. It does not require a token.
     * 
     * @param mixed $params_array
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function is2LeggedEndpoint($params_array){}

    /**
     * @param bool $will_issue_request_token Sets whether or not it will
     *   issue a request token, thus determining if
     *   OAuthProvider::tokenHandler needs to be called.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function isRequestTokenEndpoint($will_issue_request_token){}

    /**
     * Removes a required parameter.
     * 
     * @param string $req_params The required parameter to be removed.
     * @return bool
     * @since PECL OAuth >= 1.0.0
     **/
    function removeRequiredParameter($req_params){}

    /**
     * Pass in a problem as an OAuthException, with possible problems listed
     * in the OAuth constants section.
     * 
     * @param string $oauthexception The OAuthException.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function reportProblem($oauthexception){}

    /**
     * Sets a parameter.
     * 
     * @param string $param_key The parameter key.
     * @param mixed $param_val The optional parameter value.
     * @return bool
     * @since PECL OAuth >= 1.0.0
     **/
    function setParam($param_key, $param_val){}

    /**
     * Sets the request tokens path.
     * 
     * @param string $path The path.
     * @return bool
     * @since PECL OAuth >= 1.0.0
     **/
    function setRequestTokenPath($path){}

    /**
     * Sets the timestamp nonce handler callback, which will later be called
     * with OAuthProvider::callTimestampNonceHandler. Errors related to
     * timestamp/nonce are thrown to this callback.
     * 
     * @param callback $callback_function The callback functions name.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function timestampNonceHandler($callback_function){}

    /**
     * Sets the token handler callback, which will later be called with
     * OAuthProvider::callTokenHandler.
     * 
     * @param callback $callback_function The callback functions name.
     * @return void
     * @since PECL OAuth >= 1.0.0
     **/
    function tokenHandler($callback_function){}

    /**
     * Initiates a new OAuthProvider object.
     * 
     * @param array $params_array Setting these these optional parameters
     *   is limited to the CLI SAPI.
     * @since PECL OAuth >= 1.0.0
     **/
    function __construct($params_array){}

}
/**
 * Classes implementing can be used to iterate over iterators.
 **/
interface OuterIterator extends Iterator {
    /**
     * Returns the inner iterator for the current iterator entry.
     * 
     * @return Iterator
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator();

}
/**
 * Exception thrown if a value is not a valid key
 **/
class OutOfBoundsException extends RuntimeException {
}
/**
 * Exception thrown when a value does not match with a range
 **/
class OutOfRangeException extends LogicException {
}
/**
 * Exception thrown when you add an element into a full container
 **/
class OverflowException extends RuntimeException {
}
/**
 * ...
 **/
class ParentIterator extends RecursiveFilterIterator implements RecursiveIterator, OuterIterator, Traversable, Iterator {
    /**
     * Determines if the current element has children.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function accept(){}

    /**
     * Get the inner iterator's children contained in a ParentIterator.
     * 
     * @return ParentIterator
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren(){}

    /**
     * Check whether the inner iterator's current element has children.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasChildren(){}

    /**
     * Moves the iterator forward.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Rewinds the iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Constructs a ParentIterator on an iterator.
     * 
     * @param RecursiveIterator $iterator The iterator being constructed
     *   upon.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator){}

}
/**
 * Represents a connection between PHP and a database server.
 **/
interface PDO {
    const ATTR_AUTOCOMMIT = 0;
    const ATTR_CASE = 0;
    const ATTR_CLIENT_VERSION = 0;
    const ATTR_CONNECTION_STATUS = 0;
    const ATTR_CURSOR = 0;
    const ATTR_CURSOR_NAME = 0;
    const ATTR_DEFAULT_FETCH_MODE = 0;
    const ATTR_DRIVER_NAME = '';
    const ATTR_EMULATE_PREPARES = 0;
    const ATTR_ERRMODE = 0;
    const ATTR_FETCH_CATALOG_NAMES = 0;
    const ATTR_FETCH_TABLE_NAMES = 0;
    const ATTR_MAX_COLUMN_LEN = 0;
    const ATTR_ORACLE_NULLS = 0;
    const ATTR_PERSISTENT = 0;
    const ATTR_PREFETCH = 0;
    const ATTR_SERVER_INFO = 0;
    const ATTR_SERVER_VERSION = 0;
    const ATTR_STATEMENT_CLASS = 0;
    const ATTR_STRINGIFY_FETCHES = 0;
    const ATTR_TIMEOUT = 0;
    const CASE_LOWER = 0;
    const CASE_NATURAL = 0;
    const CASE_UPPER = 0;
    const CURSOR_FWDONLY = 0;
    const CURSOR_SCROLL = 0;
    const ERRMODE_EXCEPTION = 0;
    const ERRMODE_SILENT = 0;
    const ERRMODE_WARNING = 0;
    const ERR_NONE = '';
    const FB_ATTR_DATE_FORMAT = 0;
    const FB_ATTR_TIMESTAMP_FORMAT = 0;
    const FB_ATTR_TIME_FORMAT = 0;
    const FETCH_ASSOC = 0;
    const FETCH_BOTH = 0;
    const FETCH_BOUND = 0;
    const FETCH_CLASS = 0;
    const FETCH_CLASSTYPE = 0;
    const FETCH_COLUMN = 0;
    const FETCH_FUNC = 0;
    const FETCH_GROUP = 0;
    const FETCH_INTO = 0;
    const FETCH_KEY_PAIR = 0;
    const FETCH_LAZY = 0;
    const FETCH_NAMED = 0;
    const FETCH_NUM = 0;
    const FETCH_OBJ = 0;
    const FETCH_ORI_ABS = 0;
    const FETCH_ORI_FIRST = 0;
    const FETCH_ORI_LAST = 0;
    const FETCH_ORI_NEXT = 0;
    const FETCH_ORI_PRIOR = 0;
    const FETCH_ORI_REL = 0;
    const FETCH_PROPS_LATE = 0;
    const FETCH_SERIALIZE = 0;
    const FETCH_UNIQUE = 0;
    const MYSQL_ATTR_DIRECT_QUERY = 0;
    const MYSQL_ATTR_INIT_COMMAND = 0;
    const MYSQL_ATTR_LOCAL_INFILE = 0;
    const MYSQL_ATTR_MAX_BUFFER_SIZE = 0;
    const MYSQL_ATTR_READ_DEFAULT_FILE = 0;
    const MYSQL_ATTR_READ_DEFAULT_GROUP = 0;
    const MYSQL_ATTR_USE_BUFFERED_QUERY = 0;
    const NULL_EMPTY_STRING = 0;
    const NULL_NATURAL = 0;
    const NULL_TO_STRING = 0;
    const PARAM_BOOL = 0;
    const PARAM_EVT_ALLOC = 0;
    const PARAM_EVT_EXEC_POST = 0;
    const PARAM_EVT_EXEC_PRE = 0;
    const PARAM_EVT_FETCH_POST = 0;
    const PARAM_EVT_FETCH_PRE = 0;
    const PARAM_EVT_FREE = 0;
    const PARAM_EVT_NORMALIZE = 0;
    const PARAM_INPUT_OUTPUT = 0;
    const PARAM_INT = 0;
    const PARAM_LOB = 0;
    const PARAM_NULL = 0;
    const PARAM_STMT = 0;
    const PARAM_STR = 0;
    /**
     * Turns off autocommit mode. While autocommit mode is turned off,
     * changes made to the database via the PDO object instance are not
     * committed until you end the transaction by calling {@link
     * PDO::commit}. Calling {@link PDO::rollBack} will roll back all changes
     * to the database and return the connection to autocommit mode.
     * 
     * Some databases, including MySQL, automatically issue an implicit
     * COMMIT when a database definition language (DDL) statement such as
     * DROP TABLE or CREATE TABLE is issued within a transaction. The
     * implicit COMMIT will prevent you from rolling back any other changes
     * within the transaction boundary.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function beginTransaction();

    /**
     * Commits a transaction, returning the database connection to autocommit
     * mode until the next call to {@link PDO::beginTransaction} starts a new
     * transaction.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function commit();

    /**
     * @return mixed
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function errorCode();

    /**
     * @return array
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function errorInfo();

    /**
     * {@link PDO::exec} executes an SQL statement in a single function call,
     * returning the number of rows affected by the statement.
     * 
     * {@link PDO::exec} does not return results from a SELECT statement. For
     * a SELECT statement that you only need to issue once during your
     * program, consider issuing {@link PDO::query}. For a statement that you
     * need to issue multiple times, prepare a PDOStatement object with
     * {@link PDO::prepare} and issue the statement with {@link
     * PDOStatement::execute}.
     * 
     * @param string $statement The SQL statement to prepare and execute.
     *   Data inside the query should be properly escaped.
     * @return int
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function exec($statement);

    /**
     * This function returns the value of a database connection attribute. To
     * retrieve PDOStatement attributes, refer to {@link
     * PDOStatement::getAttribute}.
     * 
     * Note that some database/driver combinations may not support all of the
     * database connection attributes.
     * 
     * @param int $attribute One of the PDO::ATTR_* constants. The
     *   constants that apply to database connections are as follows:
     *   PDO::ATTR_AUTOCOMMIT PDO::ATTR_CASE PDO::ATTR_CLIENT_VERSION
     *   PDO::ATTR_CONNECTION_STATUS PDO::ATTR_DRIVER_NAME PDO::ATTR_ERRMODE
     *   PDO::ATTR_ORACLE_NULLS PDO::ATTR_PERSISTENT PDO::ATTR_PREFETCH
     *   PDO::ATTR_SERVER_INFO PDO::ATTR_SERVER_VERSION PDO::ATTR_TIMEOUT
     * @return mixed
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function getAttribute($attribute);

    /**
     * This function returns all currently available PDO drivers which can be
     * used in {@link DSN} parameter of {@link PDO::__construct}. This is a
     * static method.
     * 
     * @return array
     * @since PHP 5 >= 5.1.3, PECL pdo >= 1.0.3
     **/
    function getAvailableDrivers();

    /**
     * Returns the ID of the last inserted row, or the last value from a
     * sequence object, depending on the underlying driver. For example,
     * {@link PDO_PGSQL} requires you to specify the name of a sequence
     * object for the {@link name} parameter.
     * 
     * @param string $name Name of the sequence object from which the ID
     *   should be returned.
     * @return string
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function lastInsertId($name);

    /**
     * {@link PDO::pgsqlLOBCreate} creates a large object and returns the OID
     * of that object. You may then open a stream on the object using {@link
     * PDO::pgsqlLOBOpen} to read or write data to it. The OID can be stored
     * in columns of type OID and be used to reference the large object,
     * without causing the row to grow arbitrarily large. The large object
     * will continue to live in the database until it is removed by calling
     * {@link PDO::pgsqlLOBUnlink}.
     * 
     * Large objects can be up to 2GB in size, but are cumbersome to use; you
     * need to ensure that {@link PDO::pgsqlLOBUnlink} is called prior to
     * deleting the last row that references its OID from your database. In
     * addition, large objects have no access controls. As an alternative,
     * try the bytea column type; recent versions of PostgreSQL allow bytea
     * columns of up to 1GB in size and transparently manage the storage for
     * optimal row size.
     * 
     * @return string
     * @since PHP 5 >= 5.1.2, PECL pdo_pgsql >= 1.0.2
     **/
    function pgsqlLOBCreate();

    /**
     * {@link PDO::pgsqlLOBOpen} opens a stream to access the data referenced
     * by {@link oid}. If {@link mode} is r, the stream is opened for
     * reading, if {@link mode} is w, then the stream will be opened for
     * writing. You can use all the usual filesystem functions, such as
     * {@link fread}, {@link fwrite} and {@link fgets} to manipulate the
     * contents of the stream.
     * 
     * @param string $oid A large object identifier.
     * @param string $mode If mode is r, open the stream for reading. If
     *   mode is w, open the stream for writing.
     * @return resource
     * @since PHP 5 >= 5.1.2, PECL pdo_pgsql >= 1.0.2
     **/
    function pgsqlLOBOpen($oid, $mode);

    /**
     * Deletes a large object from the database identified by OID.
     * 
     * @param string $oid A large object identifier
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL pdo_pgsql >= 1.0.2
     **/
    function pgsqlLOBUnlink($oid);

    /**
     * Prepares an SQL statement to be executed by the {@link
     * PDOStatement::execute} method. The SQL statement can contain zero or
     * more named (:name) or question mark (?) parameter markers for which
     * real values will be substituted when the statement is executed. You
     * cannot use both named and question mark parameter markers within the
     * same SQL statement; pick one or the other parameter style. Use these
     * parameters to bind any user-input, do not include the user-input
     * directly in the query.
     * 
     * You must include a unique parameter marker for each value you wish to
     * pass in to the statement when you call {@link PDOStatement::execute}.
     * You cannot use a named parameter marker of the same name twice in a
     * prepared statement. You cannot bind multiple values to a single named
     * parameter in, for example, the IN() clause of an SQL statement.
     * 
     * Calling {@link PDO::prepare} and {@link PDOStatement::execute} for
     * statements that will be issued multiple times with different parameter
     * values optimizes the performance of your application by allowing the
     * driver to negotiate client and/or server side caching of the query
     * plan and meta information, and helps to prevent SQL injection attacks
     * by eliminating the need to manually quote the parameters.
     * 
     * PDO will emulate prepared statements/bound parameters for drivers that
     * do not natively support them, and can also rewrite named or question
     * mark style parameter markers to something more appropriate, if the
     * driver supports one style but not the other.
     * 
     * @param string $statement This must be a valid SQL statement for the
     *   target database server.
     * @param array $driver_options This array holds one or more key=>value
     *   pairs to set attribute values for the PDOStatement object that this
     *   method returns. You would most commonly use this to set the
     *   PDO::ATTR_CURSOR value to PDO::CURSOR_SCROLL to request a scrollable
     *   cursor. Some drivers have driver specific options that may be set at
     *   prepare-time.
     * @return PDOStatement
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function prepare($statement, $driver_options);

    /**
     * {@link PDO::query} executes an SQL statement in a single function
     * call, returning the result set (if any) returned by the statement as a
     * PDOStatement object.
     * 
     * For a query that you need to issue multiple times, you will realize
     * better performance if you prepare a PDOStatement object using {@link
     * PDO::prepare} and issue the statement with multiple calls to {@link
     * PDOStatement::execute}.
     * 
     * If you do not fetch all of the data in a result set before issuing
     * your next call to {@link PDO::query}, your call may fail. Call {@link
     * PDOStatement::closeCursor} to release the database resources
     * associated with the PDOStatement object before issuing your next call
     * to {@link PDO::query}.
     * 
     * @param string $statement The SQL statement to prepare and execute.
     *   Data inside the query should be properly escaped.
     * @return PDOStatement
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function query($statement);

    /**
     * {@link PDO::quote} places quotes around the input string (if required)
     * and escapes special characters within the input string, using a
     * quoting style appropriate to the underlying driver.
     * 
     * If you are using this function to build SQL statements, you are
     * strongly recommended to use {@link PDO::prepare} to prepare SQL
     * statements with bound parameters instead of using {@link PDO::quote}
     * to interpolate user input into an SQL statement. Prepared statements
     * with bound parameters are not only more portable, more convenient,
     * immune to SQL injection, but are often much faster to execute than
     * interpolated queries, as both the server and client side can cache a
     * compiled form of the query.
     * 
     * Not all PDO drivers implement this method (notably PDO_ODBC). Consider
     * using prepared statements instead.
     * 
     * @param string $string The string to be quoted.
     * @param int $parameter_type Provides a data type hint for drivers
     *   that have alternate quoting styles.
     * @return string
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.1
     **/
    function quote($string, $parameter_type);

    /**
     * Rolls back the current transaction, as initiated by {@link
     * PDO::beginTransaction}. It is an error to call this method if no
     * transaction is active.
     * 
     * If the database was set to autocommit mode, this function will restore
     * autocommit mode after it has rolled back the transaction.
     * 
     * Some databases, including MySQL, automatically issue an implicit
     * COMMIT when a database definition language (DDL) statement such as
     * DROP TABLE or CREATE TABLE is issued within a transaction. The
     * implicit COMMIT will prevent you from rolling back any other changes
     * within the transaction boundary.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function rollBack();

    /**
     * Sets an attribute on the database handle. Some of the available
     * generic attributes are listed below; some drivers may make use of
     * additional driver specific attributes. PDO::ATTR_CASE: Force column
     * names to a specific case. PDO::CASE_LOWER: Force column names to lower
     * case. PDO::CASE_NATURAL: Leave column names as returned by the
     * database driver. PDO::CASE_UPPER: Force column names to upper case.
     * PDO::ATTR_ERRMODE: Error reporting. PDO::ERRMODE_SILENT: Just set
     * error codes. PDO::ERRMODE_WARNING: Raise E_WARNING.
     * PDO::ERRMODE_EXCEPTION: Throw exceptions. PDO::ATTR_ORACLE_NULLS
     * (available with all drivers, not just Oracle): Conversion of NULL and
     * empty strings. PDO::NULL_NATURAL: No conversion.
     * PDO::NULL_EMPTY_STRING: Empty string is converted to .
     * PDO::NULL_TO_STRING: NULL is converted to an empty string.
     * PDO::ATTR_STRINGIFY_FETCHES: Convert numeric values to strings when
     * fetching. Requires bool. PDO::ATTR_STATEMENT_CLASS: Set user-supplied
     * statement class derived from PDOStatement. Cannot be used with
     * persistent PDO instances. Requires array(string classname, array(mixed
     * constructor_args)). PDO::ATTR_TIMEOUT: Specifies the timeout duration
     * in seconds. Not all drivers support this option, and it's meaning may
     * differ from driver to driver. For example, sqlite will wait for up to
     * this time value before giving up on obtaining an writable lock, but
     * other drivers may interpret this as a connect or a read timeout
     * interval. Requires int. PDO::ATTR_AUTOCOMMIT (available in OCI,
     * Firebird and MySQL): Whether to autocommit every single statement.
     * PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (available in MySQL): Use buffered
     * queries.
     * 
     * @param int $attribute
     * @param mixed $value
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function setAttribute($attribute, $value);

    /**
     * This method is similar to except that it registers functions that can
     * be used to calculate a result aggregated across all the rows of a
     * query.
     * 
     * The key difference between this method and is that two functions are
     * required to manage the aggregate.
     * 
     * @param string $function_name The name of the function used in SQL
     *   statements.
     * @param callback $step_func Callback function called for each row of
     *   the result set. Your PHP function should accumulate the result and
     *   store it in the aggregation context. This function need to be
     *   defined as: step mixed{@link context} int{@link rownumber}
     *   mixed{@link value1} mixed{@link value2} mixed{@link ..} context will
     *   be for the first row; on subsequent rows it will have the value that
     *   was previously returned from the step function; you should use this
     *   to maintain the aggregate state. rownumber will hold the current row
     *   number.
     * @param callback $finalize_func Callback function to aggregate the
     *   "stepped" data from each row. Once all the rows have been processed,
     *   this function will be called and it should then take the data from
     *   the aggregation context and return the result. Callback functions
     *   should return a type understood by SQLite (i.e. scalar type). This
     *   function need to be defined as: fini mixed{@link context} int{@link
     *   rownumber} context will hold the return value from the very last
     *   call to the step function. rownumber will hold the number of rows
     *   over which the aggregate was performed. The return value of this
     *   function will be used as the return value for the aggregate.
     * @param int $num_args Hint to the SQLite parser if the callback
     *   function accepts a predetermined number of arguments.
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo_sqlite >= 1.0.0
     **/
    function sqliteCreateAggregate($function_name, $step_func, $finalize_func, $num_args);

    /**
     * This method allows you to register a PHP function with SQLite as an
     * UDF (User Defined Function), so that it can be called from within your
     * SQL statements.
     * 
     * The UDF can be used in any SQL statement that can call functions, such
     * as SELECT and UPDATE statements and also in triggers.
     * 
     * @param string $function_name The name of the function used in SQL
     *   statements.
     * @param callback $callback Callback function to handle the defined
     *   SQL function.
     * @param int $num_args Hint to the SQLite parser if the callback
     *   function accepts a predetermined number of arguments.
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo_sqlite >= 1.0.0
     **/
    function sqliteCreateFunction($function_name, $callback, $num_args);

}
/**
 * Represents an error raised by PDO. You should not throw a from your
 * own code. See for more information about Exceptions in PHP.
 **/
class PDOException extends RuntimeException {
}
/**
 * Represents a prepared statement and, after the statement is executed,
 * an associated result set.
 **/
class PDOStatement implements Traversable {
    /**
     * {@link PDOStatement::bindColumn} arranges to have a particular
     * variable bound to a given column in the result-set from a query. Each
     * call to {@link PDOStatement::fetch} or {@link PDOStatement::fetchAll}
     * will update all the variables that are bound to columns.
     * 
     * @param mixed $column Number of the column (1-indexed) or name of the
     *   column in the result set. If using the column name, be aware that
     *   the name should match the case of the column, as returned by the
     *   driver.
     * @param mixed $param Name of the PHP variable to which the column
     *   will be bound.
     * @param int $type Data type of the parameter, specified by the
     *   PDO::PARAM_* constants.
     * @param int $maxlen A hint for pre-allocation.
     * @param mixed $driverdata Optional parameter(s) for the driver.
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function bindColumn($column, &$param, $type, $maxlen, $driverdata){}

    /**
     * Binds a PHP variable to a corresponding named or question mark
     * placeholder in the SQL statement that was use to prepare the
     * statement. Unlike {@link PDOStatement::bindValue}, the variable is
     * bound as a reference and will only be evaluated at the time that
     * {@link PDOStatement::execute} is called.
     * 
     * Most parameters are input parameters, that is, parameters that are
     * used in a read-only fashion to build up the query. Some drivers
     * support the invocation of stored procedures that return data as output
     * parameters, and some also as input/output parameters that both send in
     * data and are updated to receive it.
     * 
     * @param mixed $parameter Parameter identifier. For a prepared
     *   statement using named placeholders, this will be a parameter name of
     *   the form :name. For a prepared statement using question mark
     *   placeholders, this will be the 1-indexed position of the parameter.
     * @param mixed $variable Name of the PHP variable to bind to the SQL
     *   statement parameter.
     * @param int $data_type Explicit data type for the parameter using the
     *   PDO::PARAM_* constants. To return an INOUT parameter from a stored
     *   procedure, use the bitwise OR operator to set the
     *   PDO::PARAM_INPUT_OUTPUT bits for the {@link data_type} parameter.
     * @param int $length Length of the data type. To indicate that a
     *   parameter is an OUT parameter from a stored procedure, you must
     *   explicitly set the length.
     * @param mixed $driver_options
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function bindParam($parameter, &$variable, $data_type, $length, $driver_options){}

    /**
     * Binds a value to a corresponding named or question mark placeholder in
     * the SQL statement that was use to prepare the statement.
     * 
     * @param mixed $parameter Parameter identifier. For a prepared
     *   statement using named placeholders, this will be a parameter name of
     *   the form :name. For a prepared statement using question mark
     *   placeholders, this will be the 1-indexed position of the parameter.
     * @param mixed $value The value to bind to the parameter.
     * @param int $data_type Explicit data type for the parameter using the
     *   PDO::PARAM_* constants.
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 1.0.0
     **/
    function bindValue($parameter, $value, $data_type){}

    /**
     * {@link PDOStatement::closeCursor} frees up the connection to the
     * server so that other SQL statements may be issued, but leaves the
     * statement in a state that enables it to be executed again.
     * 
     * This method is useful for database drivers that do not support
     * executing a PDOStatement object when a previously executed
     * PDOStatement object still has unfetched rows. If your database driver
     * suffers from this limitation, the problem may manifest itself in an
     * out-of-sequence error.
     * 
     * {@link PDOStatement::closeCursor} is implemented either as an optional
     * driver specific method (allowing for maximum efficiency), or as the
     * generic PDO fallback if no driver specific function is installed. The
     * PDO generic fallback is semantically the same as writing the following
     * code in your PHP script:
     * 
     * <?php do { while ($stmt->fetch()) ; if (!$stmt->nextRowset()) break; }
     * while (true); ?>
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.9.0
     **/
    function closeCursor(){}

    /**
     * Use {@link PDOStatement::columnCount} to return the number of columns
     * in the result set represented by the PDOStatement object.
     * 
     * If the PDOStatement object was returned from {@link PDO::query}, the
     * column count is immediately available.
     * 
     * If the PDOStatement object was returned from {@link PDO::prepare}, an
     * accurate column count will not be available until you invoke {@link
     * PDOStatement::execute}.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function columnCount(){}

    /**
     * Dumps the informations contained by a prepared statement directly on
     * the output. It will provide the SQL query in use, the number of
     * parameters used (Params), the list of parameters, with their name,
     * type (paramtype) as an integer, their key name or position, the value,
     * and the position in the query (if this is supported by the PDO driver,
     * otherwise, it will be -1).
     * 
     * This is a debug function, which dump directly the data on the normal
     * output.
     * 
     * This will only dumps the parameters in the statement at the moment of
     * the dump. Extra parameters are not stored in the statement, and not
     * displayed.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.9.0
     **/
    function debugDumpParams(){}

    /**
     * @return string
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function errorCode(){}

    /**
     * @return array
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function errorInfo(){}

    /**
     * Execute the prepared statement. If the prepared statement included
     * parameter markers, you must either: call {@link
     * PDOStatement::bindParam} to bind PHP variables to the parameter
     * markers: bound variables pass their value as input and receive the
     * output value, if any, of their associated parameter markers or pass an
     * array of input-only parameter values
     * 
     * @param array $input_parameters An array of values with as many
     *   elements as there are bound parameters in the SQL statement being
     *   executed. All values are treated as PDO::PARAM_STR. You cannot bind
     *   multiple values to a single parameter; for example, you cannot bind
     *   two values to a single named parameter in an IN() clause.
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function execute($input_parameters){}

    /**
     * Fetches a row from a result set associated with a PDOStatement object.
     * The {@link fetch_style} parameter determines how PDO returns the row.
     * 
     * @param int $fetch_style Controls how the next row will be returned
     *   to the caller. This value must be one of the PDO::FETCH_* constants,
     *   defaulting to PDO::FETCH_BOTH. PDO::FETCH_ASSOC: returns an array
     *   indexed by column name as returned in your result set
     *   PDO::FETCH_BOTH (default): returns an array indexed by both column
     *   name and 0-indexed column number as returned in your result set
     *   PDO::FETCH_BOUND: returns and assigns the values of the columns in
     *   your result set to the PHP variables to which they were bound with
     *   the {@link PDOStatement::bindColumn} method PDO::FETCH_CLASS:
     *   returns a new instance of the requested class, mapping the columns
     *   of the result set to named properties in the class. If {@link
     *   fetch_style} includes PDO::FETCH_CLASSTYPE (e.g. PDO::FETCH_CLASS |
     *   PDO::FETCH_CLASSTYPE) then the name of the class is determined from
     *   a value of the first column. PDO::FETCH_INTO: updates an existing
     *   instance of the requested class, mapping the columns of the result
     *   set to named properties in the class PDO::FETCH_LAZY: combines
     *   PDO::FETCH_BOTH and PDO::FETCH_OBJ, creating the object variable
     *   names as they are accessed PDO::FETCH_NUM: returns an array indexed
     *   by column number as returned in your result set, starting at column
     *   0 PDO::FETCH_OBJ: returns an anonymous object with property names
     *   that correspond to the column names returned in your result set
     * @param int $cursor_orientation For a PDOStatement object
     *   representing a scrollable cursor, this value determines which row
     *   will be returned to the caller. This value must be one of the
     *   PDO::FETCH_ORI_* constants, defaulting to PDO::FETCH_ORI_NEXT. To
     *   request a scrollable cursor for your PDOStatement object, you must
     *   set the PDO::ATTR_CURSOR attribute to PDO::CURSOR_SCROLL when you
     *   prepare the SQL statement with {@link PDO::prepare}.
     * @param int $cursor_offset For a PDOStatement object representing a
     *   scrollable cursor for which the cursor_orientation parameter is set
     *   to PDO::FETCH_ORI_ABS, this value specifies the absolute number of
     *   the row in the result set that shall be fetched. For a PDOStatement
     *   object representing a scrollable cursor for which the
     *   cursor_orientation parameter is set to PDO::FETCH_ORI_REL, this
     *   value specifies the row to fetch relative to the cursor position
     *   before {@link PDOStatement::fetch} was called.
     * @return mixed
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function fetch($fetch_style, $cursor_orientation, $cursor_offset){}

    /**
     * @param int $fetch_style Controls the contents of the returned array
     *   as documented in {@link PDOStatement::fetch}. To return an array
     *   consisting of all values of a single column from the result set,
     *   specify PDO::FETCH_COLUMN. You can specify which column you want
     *   with the {@link column-index} parameter. To fetch only the unique
     *   values of a single column from the result set, bitwise-OR
     *   PDO::FETCH_COLUMN with PDO::FETCH_UNIQUE. To return an associative
     *   array grouped by the values of a specified column, bitwise-OR
     *   PDO::FETCH_COLUMN with PDO::FETCH_GROUP.
     * @param int $column_index Returns the indicated 0-indexed column when
     *   the value of {@link fetch_style} is PDO::FETCH_COLUMN.
     * @param array $ctor_args Arguments of custom class constructor.
     * @return array
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function fetchAll($fetch_style, $column_index, $ctor_args){}

    /**
     * Returns a single column from the next row of a result set or if there
     * are no more rows.
     * 
     * @param int $column_number 0-indexed number of the column you wish to
     *   retrieve from the row. If no value is supplied, {@link
     *   PDOStatement::fetchColumn} fetches the first column.
     * @return string
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.9.0
     **/
    function fetchColumn($column_number){}

    /**
     * Fetches the next row and returns it as an object. This function is an
     * alternative to {@link PDOStatement::fetch} with PDO::FETCH_CLASS or
     * PDO::FETCH_OBJ style.
     * 
     * @param string $class_name Name of the created class.
     * @param array $ctor_args Elements of this array are passed to the
     *   constructor.
     * @return mixed
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.4
     **/
    function fetchObject($class_name, $ctor_args){}

    /**
     * Gets an attribute of the statement. Currently, no generic attributes
     * exist but only driver specific: PDO::ATTR_CURSOR_NAME (Firebird and
     * ODBC specific): Get the name of cursor for UPDATE ... WHERE CURRENT
     * OF.
     * 
     * @param int $attribute
     * @return mixed
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function getAttribute($attribute){}

    /**
     * Retrieves the metadata for a 0-indexed column in a result set as an
     * associative array.
     * 
     * @param int $column The 0-indexed column in the result set.
     * @return array
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function getColumnMeta($column){}

    /**
     * Some database servers support stored procedures that return more than
     * one rowset (also known as a result set). {@link
     * PDOStatement::nextRowset} enables you to access the second and
     * subsequent rowsets associated with a PDOStatement object. Each rowset
     * can have a different set of columns from the preceding rowset.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function nextRowset(){}

    /**
     * {@link PDOStatement::rowCount} returns the number of rows affected by
     * the last DELETE, INSERT, or UPDATE statement executed by the
     * corresponding PDOStatement object.
     * 
     * If the last SQL statement executed by the associated PDOStatement was
     * a SELECT statement, some databases may return the number of rows
     * returned by that statement. However, this behaviour is not guaranteed
     * for all databases and should not be relied on for portable
     * applications.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.1.0
     **/
    function rowCount(){}

    /**
     * Sets an attribute on the statement. Currently, no generic attributes
     * are set but only driver specific: PDO::ATTR_CURSOR_NAME (Firebird and
     * ODBC specific): Set the name of cursor for UPDATE ... WHERE CURRENT
     * OF.
     * 
     * @param int $attribute
     * @param mixed $value
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function setAttribute($attribute, $value){}

    /**
     * @param int $mode The fetch mode must be one of the PDO::FETCH_*
     *   constants.
     * @return bool
     * @since PHP 5 >= 5.1.0, PECL pdo >= 0.2.0
     **/
    function setFetchMode($mode){}

}
class Phar extends RecursiveDirectoryIterator implements Countable, ArrayAccess {
    const BZ2 = 0;
    const COMPRESSED = 0;
    const GZ = 0;
    const MD5 = 0;
    const NONE = 0;
    const OPENSSL = 0;
    const PHAR = 0;
    const PHP = 0;
    const PHPS = 0;
    const SAME = 0;
    const SHA1 = 0;
    const SHA256 = 0;
    const SHA512 = 0;
    const TAR = 0;
    const ZIP = 0;
    /**
     * With this method, an empty directory is created with path dirname.
     * This method is similar to {@link ZipArchive::addEmptyDir}.
     * 
     * @param string $dirname The name of the empty directory to create in
     *   the phar archive
     * @return void
     * @since Unknown
     **/
    function addEmptyDir($dirname){}

    /**
     * With this method, any file or URL can be added to the tar/zip archive.
     * If the optional second parameter localname is specified, the file will
     * be stored in the archive with that name, otherwise the file parameter
     * is used as the path to store within the archive. URLs must have a
     * localname or an exception is thrown. This method is similar to {@link
     * ZipArchive::addFile}.
     * 
     * @param string $file Full or relative path to a file on disk to be
     *   added to the phar archive.
     * @param string $localname Path that the file will be stored in the
     *   archive.
     * @return void
     * @since Unknown
     **/
    function addFile($file, $localname){}

    /**
     * With this method, any string can be added to the phar archive. The
     * file will be stored in the archive with localname as its path. This
     * method is similar to {@link ZipArchive::addFromString}.
     * 
     * @param string $localname Path that the file will be stored in the
     *   archive.
     * @param string $contents The file contents to store
     * @return void
     * @since Unknown
     **/
    function addFromString($localname, $contents){}

    /**
     * Return the API version of the phar file format that will be used when
     * creating phars. The Phar extension supports reading API version 1.0.0
     * or newer. API version 1.1.0 is required for SHA-256 and SHA-512 hash,
     * and API version 1.1.1 is required to store empty directories.
     * 
     * @return string
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function apiVersion(){}

    /**
     * Populate a tar/zip archive from directory contents. The optional
     * second parameter is a regular expression (pcre) that is used to
     * exclude files. Any filename that matches the regular expression will
     * be included, all others will be excluded. For more fine-grained
     * control, use {@link PharData::buildFromIterator}.
     * 
     * @param string $base_dir The full or relative path to the directory
     *   that contains all files to add to the archive.
     * @param string $regex An optional pcre regular expression that is
     *   used to filter the list of files. Only file paths matching the
     *   regular expression will be included in the archive.
     * @return array
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function buildFromDirectory($base_dir, $regex){}

    /**
     * Populate a phar archive from an iterator. Two styles of iterators are
     * supported, iterators that map the filename within the phar to the name
     * of a file on disk, and iterators like DirectoryIterator that return
     * SplFileInfo objects. For iterators that return SplFileInfo objects,
     * the second parameter is required.
     * 
     * @param Iterator $iter Any iterator that either associatively maps
     *   phar file to location or returns SplFileInfo objects
     * @param string $base_directory For iterators that return SplFileInfo
     *   objects, the portion of each file's full path to remove when adding
     *   to the phar archive
     * @return array
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function buildFromIterator($iter, $base_directory){}

    /**
     * This should be used to test whether compression is possible prior to
     * loading a phar archive containing compressed files.
     * 
     * @param int $type Either Phar::GZ or Phar::BZ2 can be used to test
     *   whether compression is possible with a specific compression
     *   algorithm (zlib or bzip2).
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function canCompress($type){}

    /**
     * This static method determines whether write access has been disabled
     * in the system php.ini via the phar.readonly ini variable.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function canWrite(){}

    /**
     * For tar-based and phar-based phar archives, this method compresses the
     * entire archive using gzip compression or bzip2 compression. The
     * resulting file can be processed with the gunzip command/bunzip
     * command, or accessed directly and transparently with the Phar
     * extension.
     * 
     * For Zip-based phar archives, this method fails with an exception. The
     * zlib extension must be enabled to compress with gzip compression, the
     * bzip2 extension must be enabled in order to compress with bzip2
     * compression. As with all functionality that modifies the contents of a
     * phar, the phar.readonly INI variable must be off in order to succeed.
     * 
     * In addition, this method automatically renames the archive, appending
     * .gz, .bz2 or removing the extension if passed Phar::NONE to remove
     * compression. Alternatively, a file extension may be specified with the
     * second parameter.
     * 
     * @param int $compression Compression must be one of Phar::GZ,
     *   Phar::BZ2 to add compression, or Phar::NONE to remove compression.
     * @param string $extension By default, the extension is .phar.gz or
     *   .phar.bz2 for compressing phar archives, and .phar.tar.gz or
     *   .phar.tar.bz2 for compressing tar archives. For decompressing, the
     *   default file extensions are .phar and .phar.tar.
     * @return object
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function compress($compression, $extension){}

    /**
     * This method compresses all files in the Phar archive using bzip2
     * compression. The bzip2 extension must be enabled to take advantage of
     * this feature. In addition, if any files are already compressed using
     * gzip compression, the zlib extension must be enabled in order to
     * decompress the files prior to re-compressing with bzip2 compression.
     * As with all functionality that modifies the contents of a phar, the
     * phar.readonly INI variable must be off in order to succeed.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function compressAllFilesBZIP2(){}

    /**
     * For tar-based phar archives, this method compresses the entire archive
     * using gzip compression. The resulting file can be processed with the
     * gunzip command, or accessed directly and transparently with the Phar
     * extension.
     * 
     * For Zip-based and phar-based phar archives, this method compresses all
     * files in the Phar archive using gzip compression. The zlib extension
     * must be enabled to take advantage of this feature. In addition, if any
     * files are already compressed using bzip2 compression, the bzip2
     * extension must be enabled in order to decompress the files prior to
     * re-compressing with gzip compression. As with all functionality that
     * modifies the contents of a phar, the phar.readonly INI variable must
     * be off in order to succeed.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function compressAllFilesGZ(){}

    /**
     * For tar-based phar archives, this method throws a
     * BadMethodCallException, as compression of individual files within a
     * tar archive is not supported by the file format. Use {@link
     * Phar::compress} to compress an entire tar-based phar archive.
     * 
     * For Zip-based and phar-based phar archives, this method compresses all
     * files in the Phar archive using the specified compression. The zlib or
     * bzip2 extensions must be enabled to take advantage of this feature. In
     * addition, if any files are already compressed using bzip2/zlib
     * compression, the respective extension must be enabled in order to
     * decompress the files prior to re-compressing. As with all
     * functionality that modifies the contents of a phar, the phar.readonly
     * INI variable must be off in order to succeed.
     * 
     * @param int $compression Compression must be one of Phar::GZ,
     *   Phar::BZ2 to add compression, or Phar::NONE to remove compression.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function compressFiles($compression){}

    /**
     * This method is used to convert an executable phar archive to either a
     * tar or zip file. To make the tar or zip non-executable, the phar stub
     * and phar alias files are removed from the newly created archive.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException if the archive is in phar file format. For
     * archives in tar or zip file format, this method converts the archive
     * to a non-executable archive.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * PharData object. The old archive is not removed from disk, and should
     * be done manually after the process has finished.
     * 
     * @param int $format This should be one of Phar::TAR or Phar::ZIP. If
     *   set to , the existing file format will be preserved.
     * @param int $compression This should be one of Phar::NONE for no
     *   whole-archive compression, Phar::GZ for zlib-based compression, and
     *   Phar::BZ2 for bzip-based compression.
     * @param string $extension This parameter is used to override the
     *   default file extension for a converted archive. Note that .phar
     *   cannot be used anywhere in the filename for a non-executable tar or
     *   zip archive. If converting to a tar-based phar archive, the default
     *   extensions are .tar, .tar.gz, and .tar.bz2 depending on specified
     *   compression. For zip-based archives, the default extension is .zip.
     * @return PharData
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function convertToData($format, $compression, $extension){}

    /**
     * This method is used to convert a phar archive to another file format.
     * For instance, it can be used to create a tar-based executable phar
     * archive from a zip-based executable phar archive, or from an
     * executable phar archive in the phar file format. In addition, it can
     * be used to apply whole-archive compression to a tar or phar-based
     * archive.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * Phar object. The old archive is not removed from disk, and should be
     * done manually after the process has finished.
     * 
     * @param int $format This should be one of Phar::PHAR, Phar::TAR, or
     *   Phar::ZIP. If set to , the existing file format will be preserved.
     * @param int $compression This should be one of Phar::NONE for no
     *   whole-archive compression, Phar::GZ for zlib-based compression, and
     *   Phar::BZ2 for bzip-based compression.
     * @param string $extension This parameter is used to override the
     *   default file extension for a converted archive. Note that all zip-
     *   and tar-based phar archives must contain .phar in their file
     *   extension in order to be processed as a phar archive. If converting
     *   to a phar-based archive, the default extensions are .phar, .phar.gz,
     *   or .phar.bz2 depending on the specified compression. For tar-based
     *   phar archives, the default extensions are .phar.tar, .phar.tar.gz,
     *   and .phar.tar.bz2. For zip-based phar archives, the default
     *   extension is .phar.zip.
     * @return Phar
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function convertToExecutable($format, $compression, $extension){}

    /**
     * Copy a file internal to the phar archive to another new file within
     * the phar. This is an object-oriented alternative to using {@link copy}
     * with the phar stream wrapper.
     * 
     * @param string $oldfile
     * @param string $newfile
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function copy($oldfile, $newfile){}

    /**
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function count(){}

    /**
     * This method is intended for creation of phar-file format-specific
     * stubs, and is not intended for use with tar- or zip-based phar
     * archives.
     * 
     * Phar archives contain a bootstrap loader, or stub written in PHP that
     * is executed when the archive is executed in PHP either via include:
     * <?php include 'myphar.phar'; ?> or by simple execution: php
     * myphar.phar
     * 
     * This method provides a simple and easy method to create a stub that
     * will run a startup file from the phar archive. In addition, different
     * files can be specified for running the phar archive from the command
     * line versus through a web server. The loader stub also calls {@link
     * Phar::interceptFileFuncs} to allow easy bundling of a PHP application
     * that accesses the file system. If the phar extension is not present,
     * the loader stub will extract the phar archive to a temporary directory
     * and then operate on the files. A shutdown function erases the
     * temporary files on exit.
     * 
     * @param string $indexfile
     * @param string $webindexfile
     * @return string
     * @since Unknown
     **/
    function createDefaultStub($indexfile, $webindexfile){}

    /**
     * For tar-based and phar-based phar archives, this method decompresses
     * the entire archive.
     * 
     * For Zip-based phar archives, this method fails with an exception. The
     * zlib extension must be enabled to decompress an archive compressed
     * with with gzip compression, and the bzip2 extension must be enabled in
     * order to decompress an archive compressed with bzip2 compression. As
     * with all functionality that modifies the contents of a phar, the
     * phar.readonly INI variable must be off in order to succeed.
     * 
     * In addition, this method automatically changes the file extension of
     * the archive, .phar by default for phar archives, or .phar.tar for
     * tar-based phar archives. Alternatively, a file extension may be
     * specified with the second parameter.
     * 
     * @param string $extension For decompressing, the default file
     *   extensions are .phar and .phar.tar. Use this parameter to specify
     *   another file extension. Be aware that all executable phar archives
     *   must contain .phar in their filename.
     * @return object
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function decompress($extension){}

    /**
     * For tar-based phar archives, this method throws a
     * BadMethodCallException, as compression of individual files within a
     * tar archive is not supported by the file format. Use {@link
     * Phar::compress} to compress an entire tar-based phar archive.
     * 
     * For Zip-based and phar-based phar archives, this method decompresses
     * all files in the Phar archive. The zlib or bzip2 extensions must be
     * enabled to take advantage of this feature if any files are compressed
     * using bzip2/zlib compression. As with all functionality that modifies
     * the contents of a phar, the phar.readonly INI variable must be off in
     * order to succeed.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function decompressFiles(){}

    /**
     * Delete a file within an archive. This is the functional equivalent of
     * calling {@link unlink} on the stream wrapper equivalent, as shown in
     * the example below.
     * 
     * @param string $entry Path within an archive to the file to delete.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function delete($entry){}

    /**
     * Deletes the global metadata of the phar
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.2.0
     **/
    function delMetadata(){}

    /**
     * Extract all files within a phar archive to disk. Extracted files and
     * directories preserve permissions as stored in the archive. The
     * optional parameters allow optional control over which files are
     * extracted, and whether existing files on disk can be overwritten. The
     * second parameter files can be either the name of a file or directory
     * to extract, or an array of names of files and directories to extract.
     * By default, this method will not overwrite existing files, the third
     * parameter can be set to true to enable overwriting of files. This
     * method is similar to {@link ZipArchive::extractTo}.
     * 
     * @param string $pathto Path within an archive to the file to delete.
     * @param string|array $files The name of a file or directory to
     *   extract, or an array of files/directories to extract
     * @param bool $overwrite Set to to enable overwriting existing files
     * @return bool
     * @since Unknown
     **/
    function extractTo($pathto, $files, $overwrite){}

    /**
     * Retrieve archive meta-data. Meta-data can be any PHP variable that can
     * be serialized.
     * 
     * @return mixed
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getMetaData(){}

    /**
     * This method can be used to determine whether a phar has either had an
     * internal file deleted, or contents of a file changed in some way.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getModified(){}

    /**
     * Returns the verification signature of a phar archive in a hexadecimal
     * string.
     * 
     * @return array
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getSignature(){}

    /**
     * Phar archives contain a bootstrap loader, or stub written in PHP that
     * is executed when the archive is executed in PHP either via include:
     * <?php include 'myphar.phar'; ?> or by simple execution: php
     * myphar.phar
     * 
     * @return string
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getStub(){}

    /**
     * @return array
     * @since PHP >= 5.3.0, PECL phar >= 1.2.0
     **/
    function getSupportedCompression(){}

    /**
     * Return array of supported signature types
     * 
     * @return array
     * @since PHP >= 5.3.0, PECL phar >= 1.1.0
     **/
    function getSupportedSignatures(){}

    /**
     * Returns the API version of an opened Phar archive.
     * 
     * @return string
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getVersion(){}

    /**
     * Returns whether phar has global meta-data set.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.2.0
     **/
    function hasMetadata(){}

    /**
     * instructs phar to intercept {@link fopen}, {@link readfile}, {@link
     * file_get_contents}, {@link opendir}, and all of the stat-related
     * functions. If any of these functions is called from within a phar
     * archive with a relative path, the call is modified to access a file
     * within the phar archive. Absolute paths are assumed to be attempts to
     * load external files from the filesystem.
     * 
     * This function makes it possible to run PHP applications designed to
     * run off of a hard disk as a phar application.
     * 
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function interceptFileFuncs(){}

    /**
     * This method can be used to determine whether a Phar will save changes
     * to disk immediately, or whether a call to {@link Phar->stopBuffering}
     * is needed to enable saving changes.
     * 
     * Phar write buffering is per-archive, buffering active for the foo.phar
     * Phar archive does not affect changes to the bar.phar Phar archive.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function isBuffering(){}

    /**
     * Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed
     * (.tar.gz/tar.bz and so on). Zip-based phar archives cannot be
     * compressed as a file, and so this method will always return if a
     * zip-based phar archive is queried.
     * 
     * @return mixed
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function isCompressed(){}

    /**
     * @param int $format Either Phar::PHAR, Phar::TAR, or Phar::ZIP to
     *   test for the format of the archive.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function isFileFormat($format){}

    /**
     * Returns whether the given filename is a valid phar filename that will
     * be recognized as a phar archive by the phar extension. This can be
     * used to test a name without having to instantiate a phar archive and
     * catch the inevitable Exception that will be thrown if an invalid name
     * is specified.
     * 
     * @param string $filename The name or full path to a phar archive not
     *   yet created
     * @param bool $executable This parameter determines whether the
     *   filename should be treated as a phar executable archive, or a data
     *   non-executable archive
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.2.0
     **/
    function isValidPharFilename($filename, $executable){}

    /**
     * This method returns if phar.readonly is 0, and the actual phar archive
     * on disk is not read-only.
     * 
     * @return bool
     * @since Unknown
     **/
    function isWritable(){}

    /**
     * This can be used to read the contents of an external Phar archive.
     * This is most useful for assigning an alias to a phar so that
     * subsequent references to the phar can use the shorter alias, or for
     * loading Phar archives that only contain data and are not intended for
     * execution/inclusion in PHP scripts.
     * 
     * @param string $filename the full or relative path to the phar
     *   archive to open
     * @param string $alias The alias that may be used to refer to the phar
     *   archive. Note that many phar archives specify an explicit alias
     *   inside the phar archive, and a PharException will be thrown if a new
     *   alias is specified in this case.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function loadPhar($filename, $alias){}

    /**
     * This static method can only be used inside a Phar archive's loader
     * stub in order to initialize the phar when it is directly executed, or
     * when it is included in another script.
     * 
     * @param string $alias The alias that can be used in phar:// URLs to
     *   refer to this archive, rather than its full path.
     * @param int $dataoffset Unused variable, here for compatibility with
     *   PEAR's PHP_Archive.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function mapPhar($alias, $dataoffset){}

    /**
     * Much like the unix file system concept of mounting external devices to
     * paths within the directory tree, {@link Phar::mount} allows referring
     * to external files and directories as if they were inside of an
     * archive. This allows powerful abstraction such as referring to
     * external configuration files as if they were inside the archive.
     * 
     * @param string $pharpath The internal path within the phar archive to
     *   use as the mounted path location. If executed within a phar archive,
     *   this may be a relative path, otherwise this must be a full phar URL.
     * @param string $externalpath A path or URL to an external file or
     *   directory to mount within the phar archive
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function mount($pharpath, $externalpath){}

    /**
     * {@link Phar::mungServer} should only be called within the stub of a
     * phar archive.
     * 
     * Defines a list of up to 4 $_SERVER variables that should be modified
     * for execution. Variables that can be modified to remove traces of phar
     * execution are REQUEST_URI, PHP_SELF, SCRIPT_NAME and SCRIPT_FILENAME.
     * 
     * On its own, this method does nothing. Only when combined with {@link
     * Phar::webPhar} does it take effect, and only when the requested file
     * is a PHP file to be parsed. Note that the PATH_INFO and
     * PATH_TRANSLATED variables are always modified.
     * 
     * The original values of variables that are modified are stored in the
     * SERVER array with PHAR_ prepended, so for instance SCRIPT_NAME would
     * be saved as PHAR_SCRIPT_NAME.
     * 
     * @param array $munglist an array containing as string indices any of
     *   REQUEST_URI, PHP_SELF, SCRIPT_NAME and SCRIPT_FILENAME. Other values
     *   trigger an exception, and {@link Phar::mungServer} is
     *   case-sensitive.
     * @return void
     * @since Unknown
     **/
    function mungServer($munglist){}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets.
     * 
     * offsetExists() is called whenever {@link isset} is called.
     * 
     * @param string $offset The filename (relative path) to look for in a
     *   Phar.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function offsetExists($offset){}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets. Phar::offsetGet is used for retrieving files from a Phar
     * archive.
     * 
     * @param string $offset The filename (relative path) to look for in a
     *   Phar.
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function offsetGet($offset){}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets. offsetSet is used for modifying an existing file, or adding
     * a new file to a Phar archive.
     * 
     * @param string $offset The filename (relative path) to modify in a
     *   Phar.
     * @param string $value Content of the file.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function offsetSet($offset, $value){}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a Phar archive using array access
     * brackets. offsetUnset is used for deleting an existing file, and is
     * called by the {@link unset} language construct.
     * 
     * @param string $offset The filename (relative path) to modify in a
     *   Phar.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function offsetUnset($offset){}

    /**
     * Returns the full path to the running phar archive. This is intended
     * for use much like the __FILE__ magic constant, and only has effect
     * inside an executing phar archive.
     * 
     * Inside the stub of an archive, {@link Phar::running} returns . Simply
     * use __FILE__ to access the current running phar inside a stub.
     * 
     * @param bool $retphar If , the full path on disk to the phar archive
     *   is returned. If , a full phar URL is returned.
     * @return string
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function running($retphar){}

    /**
     * Set the alias for the Phar archive, and write it as the permanent
     * alias for this phar archive. An alias can be used internally to a phar
     * archive to ensure that use of the phar stream wrapper to access
     * internal files always works regardless of the location of the phar
     * archive on the filesystem. Another alternative is to rely upon Phar's
     * interception of {@link include} or to use {@link
     * Phar::interceptFileFuncs} and use relative paths.
     * 
     * @param string $alias A shorthand string that this archive can be
     *   referred to in phar stream wrapper access.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.2.1
     **/
    function setAlias($alias){}

    /**
     * This method is a convenience method that combines the functionality of
     * {@link Phar::createDefaultStub} and {@link Phar::setStub}.
     * 
     * @param string $index Relative path within the phar archive to run if
     *   accessed on the command-line
     * @param string $webindex Relative path within the phar archive to run
     *   if accessed through a web browser
     * @return bool
     * @since Unknown
     **/
    function setDefaultStub($index, $webindex){}

    /**
     * {@link Phar::setMetadata} should be used to store customized data that
     * describes something about the phar archive as a complete entity.
     * {@link PharFileInfo::setMetadata} should be used for file-specific
     * meta-data. Meta-data can slow down the performance of loading a phar
     * archive if the data is large.
     * 
     * Some possible uses for meta-data include specifying which file within
     * the archive should be used to bootstrap the archive, or the location
     * of a file manifest like PEAR's package.xml file. However, any useful
     * data that describes the phar archive may be stored.
     * 
     * @param mixed $metadata Any PHP variable containing information to
     *   store that describes the phar archive
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function setMetadata($metadata){}

    /**
     * set the signature algorithm for a phar and apply it. The signature
     * algorithm must be one of Phar::MD5, Phar::SHA1, Phar::SHA256,
     * Phar::SHA512, or Phar::PGP (pgp not yet supported and falls back to
     * SHA-1).
     * 
     * @param int $sigtype One of Phar::MD5, Phar::SHA1, Phar::SHA256,
     *   Phar::SHA512, or Phar::PGP
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.1.0
     **/
    function setSignatureAlgorithm($sigtype){}

    /**
     * This method is used to add a PHP bootstrap loader stub to a new Phar
     * archive, or to replace the loader stub in an existing Phar archive.
     * 
     * The loader stub for a Phar archive is used whenever an archive is
     * included directly as in this example:
     * 
     * The loader is not accessed when including a file through the phar
     * stream wrapper like so:
     * 
     * @param string $stub A string or an open stream handle to use as the
     *   executable stub for this phar archive.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function setStub($stub){}

    /**
     * Although technically unnecessary, the {@link Phar::startBuffering}
     * method can provide a significant performance boost when creating or
     * modifying a Phar archive with a large number of files. Ordinarily,
     * every time a file within a Phar archive is created or modified in any
     * way, the entire Phar archive will be recreated with the changes. In
     * this way, the archive will be up-to-date with the activity performed
     * on it.
     * 
     * However, this can be unnecessary when simply creating a new Phar
     * archive, when it would make more sense to write the entire archive out
     * at once. Similarly, it is often necessary to make a series of changes
     * and to ensure that they all are possible before making any changes on
     * disk, similar to the relational database concept of transactions. the
     * {@link Phar::startBuffering}/{@link Phar::stopBuffering} pair of
     * methods is provided for this purpose.
     * 
     * Phar write buffering is per-archive, buffering active for the foo.phar
     * Phar archive does not affect changes to the bar.phar Phar archive.
     * 
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function startBuffering(){}

    /**
     * {@link Phar::stopBuffering} is used in conjunction with the {@link
     * Phar::startBuffering} method. {@link Phar::startBuffering} can provide
     * a significant performance boost when creating or modifying a Phar
     * archive with a large number of files. Ordinarily, every time a file
     * within a Phar archive is created or modified in any way, the entire
     * Phar archive will be recreated with the changes. In this way, the
     * archive will be up-to-date with the activity performed on it.
     * 
     * However, this can be unnecessary when simply creating a new Phar
     * archive, when it would make more sense to write the entire archive out
     * at once. Similarly, it is often necessary to make a series of changes
     * and to ensure that they all are possible before making any changes on
     * disk, similar to the relational database concept of transactions. The
     * {@link Phar::startBuffering}/{@link Phar::stopBuffering} pair of
     * methods is provided for this purpose.
     * 
     * Phar write buffering is per-archive, buffering active for the foo.phar
     * Phar archive does not affect changes to the bar.phar Phar archive.
     * 
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function stopBuffering(){}

    /**
     * This method decompresses all files in the Phar archive. If any files
     * are already compressed using gzip compression, the zlib extension must
     * be enabled in order to decompress the files, and any files compressed
     * using bzip2 compression require the bzip2 extension to decompress the
     * files. As with all functionality that modifies the contents of a phar,
     * the phar.readonly INI variable must be off in order to succeed.
     * 
     * @return bool
     * @since PECL phar < 2.0.0
     **/
    function uncompressAllFiles(){}

    /**
     * Removes a phar archive for disk and memory.
     * 
     * @param string $archive The path on disk to the phar archive.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function unlinkArchive($archive){}

    /**
     * {@link Phar::mapPhar} for web-based phars. This method parses
     * $_SERVER['REQUEST_URI'] and routes a request from a web browser to an
     * internal file within the phar archive. In essence, it simulates a web
     * server, routing requests to the correct file, echoing the correct
     * headers and parsing PHP files as needed. This powerful method is part
     * of what makes it easy to convert an existing PHP application into a
     * phar archive. Combined with {@link Phar::mungServer} and {@link
     * Phar::interceptFileFuncs}, any web application can be used unmodified
     * from a phar archive.
     * 
     * {@link Phar::webPhar} should only be called from the stub of a phar
     * archive (see here for more information on what a stub is).
     * 
     * @param string $alias The alias that can be used in phar:// URLs to
     *   refer to this archive, rather than its full path.
     * @param string $index The location within the phar of the directory
     *   index.
     * @param string $f404 The location of the script to run when a file is
     *   not found. This script should output the proper HTTP 404 headers.
     * @param array $mimetypes An array mapping additional file extensions
     *   to MIME type. By default, these extensions are mapped to these mime
     *   types: <?php $mimes = array( 'phps' => 2, // pass to
     *   highlight_file() 'c' => 'text/plain', 'cc' => 'text/plain', 'cpp' =>
     *   'text/plain', 'c++' => 'text/plain', 'dtd' => 'text/plain', 'h' =>
     *   'text/plain', 'log' => 'text/plain', 'rng' => 'text/plain', 'txt' =>
     *   'text/plain', 'xsd' => 'text/plain', 'php' => 1, // parse as PHP
     *   'inc' => 1, // parse as PHP 'avi' => 'video/avi', 'bmp' =>
     *   'image/bmp', 'css' => 'text/css', 'gif' => 'image/gif', 'htm' =>
     *   'text/html', 'html' => 'text/html', 'htmls' => 'text/html', 'ico' =>
     *   'image/x-ico', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'jpeg'
     *   => 'image/jpeg', 'js' => 'application/x-javascript', 'midi' =>
     *   'audio/midi', 'mid' => 'audio/midi', 'mod' => 'audio/mod', 'mov' =>
     *   'movie/quicktime', 'mp3' => 'audio/mp3', 'mpg' => 'video/mpeg',
     *   'mpeg' => 'video/mpeg', 'pdf' => 'application/pdf', 'png' =>
     *   'image/png', 'swf' => 'application/shockwave-flash', 'tif' =>
     *   'image/tiff', 'tiff' => 'image/tiff', 'wav' => 'audio/wav', 'xbm' =>
     *   'image/xbm', 'xml' => 'text/xml', ); ?>
     * @param array $rewrites An array mapping URI to internal file,
     *   simulating mod_rewrite of apache. For example: <?php array( 'myinfo'
     *   => 'myinfo.php' ); ?> would route calls to
     *   http://<host>/myphar.phar/myinfo to the file
     *   phar:///path/to/myphar.phar/myinfo.php, preserving GET/POST. This
     *   does not quite work like mod_rewrite in that it would not match
     *   http://<host>/myphar.phar/myinfo/another.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function webPhar($alias, $index, $f404, $mimetypes, $rewrites){}

    /**
     * @param string $fname Path to an existing Phar archive or
     *   to-be-created archive
     * @param int $flags Flags to pass to parent class
     *   RecursiveDirectoryIterator.
     * @param string $alias Alias with which this Phar archive should be
     *   referred to in calls to stream functionality.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function __construct($fname, $flags, $alias){}

}
class PharData extends Phar {
    /**
     * With this method, an empty directory is created with path dirname.
     * This method is similar to {@link ZipArchive::addEmptyDir}.
     * 
     * @param string $dirname The name of the empty directory to create in
     *   the phar archive
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function addEmptyDir($dirname){}

    /**
     * With this method, any string can be added to the tar/zip archive. The
     * file will be stored in the archive with localname as its path. This
     * method is similar to {@link ZipArchive::addFromString}.
     * 
     * @param string $localname Path that the file will be stored in the
     *   archive.
     * @param string $contents The file contents to store
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function addFromString($localname, $contents){}

    /**
     * Populate a tar or zip archive from an iterator. Two styles of
     * iterators are supported, iterators that map the filename within the
     * tar/zip to the name of a file on disk, and iterators like
     * DirectoryIterator that return SplFileInfo objects. For iterators that
     * return SplFileInfo objects, the second parameter is required.
     * 
     * @param Iterator $iter Any iterator that either associatively maps
     *   tar/zip file to location or returns SplFileInfo objects
     * @param string $base_directory For iterators that return SplFileInfo
     *   objects, the portion of each file's full path to remove when adding
     *   to the tar/zip archive
     * @return array
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function buildFromIterator($iter, $base_directory){}

    /**
     * For tar archives, this method compresses the entire archive using gzip
     * compression or bzip2 compression. The resulting file can be processed
     * with the gunzip command/bunzip command, or accessed directly and
     * transparently with the Phar extension.
     * 
     * For zip archives, this method fails with an exception. The zlib
     * extension must be enabled to compress with gzip compression, the bzip2
     * extension must be enabled in order to compress with bzip2 compression.
     * 
     * In addition, this method automatically renames the archive, appending
     * .gz, .bz2 or removing the extension if passed Phar::NONE to remove
     * compression. Alternatively, a file extension may be specified with the
     * second parameter.
     * 
     * @param int $compression Compression must be one of Phar::GZ,
     *   Phar::BZ2 to add compression, or Phar::NONE to remove compression.
     * @param string $extension By default, the extension is .tar.gz or
     *   .tar.bz2 for compressing a tar, and .tar for decompressing.
     * @return object
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function compress($compression, $extension){}

    /**
     * For tar-based archives, this method throws a BadMethodCallException,
     * as compression of individual files within a tar archive is not
     * supported by the file format. Use {@link PharData::compress} to
     * compress an entire tar-based archive.
     * 
     * For Zip-based archives, this method compresses all files in the
     * archive using the specified compression. The zlib or bzip2 extensions
     * must be enabled to take advantage of this feature. In addition, if any
     * files are already compressed using bzip2/zlib compression, the
     * respective extension must be enabled in order to decompress the files
     * prior to re-compressing.
     * 
     * @param int $compression Compression must be one of Phar::GZ,
     *   Phar::BZ2 to add compression, or Phar::NONE to remove compression.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function compressFiles($compression){}

    /**
     * This method is used to convert a non-executable tar or zip archive to
     * another non-executable format.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException. This method should be used to convert a tar
     * archive to zip format or vice-versa. Although it is possible to simply
     * change the compression of a tar archive using this method, it is
     * better to use the {@link PharData::compress} method for logical
     * consistency.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * PharData object. The old archive is not removed from disk, and should
     * be done manually after the process has finished.
     * 
     * @param int $format This should be one of Phar::TAR or Phar::ZIP. If
     *   set to , the existing file format will be preserved.
     * @param int $compression This should be one of Phar::NONE for no
     *   whole-archive compression, Phar::GZ for zlib-based compression, and
     *   Phar::BZ2 for bzip-based compression.
     * @param string $extension This parameter is used to override the
     *   default file extension for a converted archive. Note that .phar
     *   cannot be used anywhere in the filename for a non-executable tar or
     *   zip archive. If converting to a tar-based phar archive, the default
     *   extensions are .tar, .tar.gz, and .tar.bz2 depending on specified
     *   compression. For zip-based archives, the default extension is .zip.
     * @return PharData
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function convertToData($format, $compression, $extension){}

    /**
     * This method is used to convert a non-executable tar or zip archive to
     * an executable phar archive. Any of the three executable file formats
     * (phar, tar or zip) can be used, and whole-archive compression can also
     * be performed.
     * 
     * If no changes are specified, this method throws a
     * BadMethodCallException.
     * 
     * If successful, the method creates a new archive on disk and returns a
     * Phar object. The old archive is not removed from disk, and should be
     * done manually after the process has finished.
     * 
     * @param int $format This should be one of Phar::PHAR, Phar::TAR, or
     *   Phar::ZIP. If set to , the existing file format will be preserved.
     * @param int $compression This should be one of Phar::NONE for no
     *   whole-archive compression, Phar::GZ for zlib-based compression, and
     *   Phar::BZ2 for bzip-based compression.
     * @param string $extension This parameter is used to override the
     *   default file extension for a converted archive. Note that all zip-
     *   and tar-based phar archives must contain .phar in their file
     *   extension in order to be processed as a phar archive. If converting
     *   to a phar-based archive, the default extensions are .phar, .phar.gz,
     *   or .phar.bz2 depending on the specified compression. For tar-based
     *   phar archives, the default extensions are .phar.tar, .phar.tar.gz,
     *   and .phar.tar.bz2. For zip-based phar archives, the default
     *   extension is .phar.zip.
     * @return Phar
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function convertToExecutable($format, $compression, $extension){}

    /**
     * Copy a file internal to the tar/zip archive to another new file within
     * the same archive. This is an object-oriented alternative to using
     * {@link copy} with the phar stream wrapper.
     * 
     * @param string $oldfile
     * @param string $newfile
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function copy($oldfile, $newfile){}

    /**
     * For tar-based archives, this method decompresses the entire archive.
     * 
     * For Zip-based archives, this method fails with an exception. The zlib
     * extension must be enabled to decompress an archive compressed with
     * with gzip compression, and the bzip2 extension must be enabled in
     * order to decompress an archive compressed with bzip2 compression.
     * 
     * In addition, this method automatically renames the file extension of
     * the archive, .tar by default. Alternatively, a file extension may be
     * specified with the second parameter.
     * 
     * @param string $extension For decompressing, the default file
     *   extension is .phar.tar. Use this parameter to specify another file
     *   extension. Be aware that no non-executable archives cannot contain
     *   .phar in their filename.
     * @return object
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function decompress($extension){}

    /**
     * For tar-based archives, this method throws a BadMethodCallException,
     * as compression of individual files within a tar archive is not
     * supported by the file format. Use {@link PharData::compress} to
     * compress an entire tar-based archive.
     * 
     * For Zip-based archives, this method decompresses all files in the
     * archive. The zlib or bzip2 extensions must be enabled to take
     * advantage of this feature if any files are compressed using bzip2/zlib
     * compression.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function decompressFiles(){}

    /**
     * Delete a file within an archive. This is the functional equivalent of
     * calling {@link unlink} on the stream wrapper equivalent, as shown in
     * the example below.
     * 
     * @param string $entry Path within an archive to the file to delete.
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function delete($entry){}

    /**
     * Deletes the global metadata of the zip archive
     * 
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function delMetadata(){}

    /**
     * Extract all files within a tar/zip archive to disk. Extracted files
     * and directories preserve permissions as stored in the archive. The
     * optional parameters allow optional control over which files are
     * extracted, and whether existing files on disk can be overwritten. The
     * second parameter files can be either the name of a file or directory
     * to extract, or an array of names of files and directories to extract.
     * By default, this method will not overwrite existing files, the third
     * parameter can be set to true to enable overwriting of files. This
     * method is similar to {@link ZipArchive::extractTo}.
     * 
     * @param string $pathto Path within an archive to the file to delete.
     * @param string|array $files The name of a file or directory to
     *   extract, or an array of files/directories to extract
     * @param bool $overwrite Set to to enable overwriting existing files
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function extractTo($pathto, $files, $overwrite){}

    /**
     * This method returns if the tar/zip archive on disk is not read-only.
     * Unlike {@link Phar::isWritable}, data-only tar/zip archives can be
     * modified even if phar.readonly is set to 1.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function isWritable(){}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a tar/zip archive using array access
     * brackets. offsetSet is used for modifying an existing file, or adding
     * a new file to a tar/zip archive.
     * 
     * @param string $offset The filename (relative path) to modify in a
     *   tar or zip archive.
     * @param string $value Content of the file.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function offsetSet($offset, $value){}

    /**
     * This is an implementation of the ArrayAccess interface allowing direct
     * manipulation of the contents of a tar/zip archive using array access
     * brackets. offsetUnset is used for deleting an existing file, and is
     * called by the {@link unset} language construct.
     * 
     * @param string $offset The filename (relative path) to modify in the
     *   tar/zip archive.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function offsetUnset($offset){}

    /**
     * Non-executable tar/zip archives cannot have an alias, so this method
     * simply throws an exception.
     * 
     * @param string $alias A shorthand string that this archive can be
     *   referred to in phar stream wrapper access. This parameter is
     *   ignored.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function setAlias($alias){}

    /**
     * Non-executable tar/zip archives cannot have a stub, so this method
     * simply throws an exception.
     * 
     * @param string $index Relative path within the phar archive to run if
     *   accessed on the command-line
     * @param string $webindex Relative path within the phar archive to run
     *   if accessed through a web browser
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function setDefaultStub($index, $webindex){}

    /**
     * Non-executable tar/zip archives cannot have a stub, so this method
     * simply throws an exception.
     * 
     * @param string $stub A string or an open stream handle to use as the
     *   executable stub for this phar archive. This parameter is ignored.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 2.0.0
     **/
    function setStub($stub){}

    /**
     * @param string $fname Path to an existing tar/zip archive or
     *   to-be-created archive
     * @param int $flags Flags to pass to Phar parent class
     *   RecursiveDirectoryIterator.
     * @return void
     **/
    function __construct($fname, $flags){}

}
class PharException extends Exception {
}
class PharFileInfo extends SplFileInfo {
    /**
     * {@link PharFileInfo::chmod} allows setting of the executable file
     * permissions bit, as well as read-only bits. Writeable bits are
     * ignored, and set at runtime based on the phar.readonly INI variable.
     * As with all functionality that modifies the contents of a phar, the
     * phar.readonly INI variable must be off in order to succeed if the file
     * is within a Phar archive. Files within PharData archives do not have
     * this restriction.
     * 
     * @param int $permissions permissions (see {@link chmod})
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function chmod($permissions){}

    /**
     * This method compresses the file inside the Phar archive using either
     * bzip2 compression or zlib compression. The bzip2 or zlib extension
     * must be enabled to take advantage of this feature. In addition, if the
     * file is already compressed, the respective extension must be enabled
     * in order to decompress the file. As with all functionality that
     * modifies the contents of a phar, the phar.readonly INI variable must
     * be off in order to succeed if the file is within a Phar archive. Files
     * within PharData archives do not have this restriction.
     * 
     * @param int $compression
     * @return bool
     **/
    function compress($compression){}

    /**
     * This method decompresses the file inside the Phar archive. Depending
     * on how the file is compressed, the bzip2 or zlib extensions must be
     * enabled to take advantage of this feature. As with all functionality
     * that modifies the contents of a phar, the phar.readonly INI variable
     * must be off in order to succeed if the file is within a Phar archive.
     * Files within PharData archives do not have this restriction.
     * 
     * @return bool
     **/
    function decompress(){}

    /**
     * Deletes the metadata of the entry, if any.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.2.0
     **/
    function delMetadata(){}

    /**
     * This returns the size of the file within the Phar archive.
     * Uncompressed files will return the same value for getCompressedSize as
     * they will with {@link filesize}
     * 
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getCompressedSize(){}

    /**
     * This returns the {@link crc32} checksum of the file within the Phar
     * archive.
     * 
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getCRC32(){}

    /**
     * Return meta-data that was saved in the Phar archive's manifest for
     * this file.
     * 
     * @return mixed
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getMetaData(){}

    /**
     * This returns the flags set in the manifest for a Phar. This will
     * always return 0 in the current implementation.
     * 
     * @return int
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function getPharFlags(){}

    /**
     * Returns the metadata of a file within a phar archive.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.2.0
     **/
    function hasMetadata(){}

    /**
     * This returns whether a file is compressed within a Phar archive with
     * either Gzip or Bzip2 compression.
     * 
     * @param int $compression_type One of Phar::GZ or Phar::BZ2, defaults
     *   to any compression.
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function isCompressed($compression_type){}

    /**
     * This returns whether a file is compressed within a Phar archive with
     * Bzip2 compression.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function isCompressedBZIP2(){}

    /**
     * This returns whether a file is compressed within a Phar archive with
     * Gzip compression.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function isCompressedGZ(){}

    /**
     * This returns whether a file within a Phar archive has had its CRC
     * verified.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function isCRCChecked(){}

    /**
     * This method compresses the file inside the Phar archive using bzip2
     * compression. The bzip2 extension must be enabled to take advantage of
     * this feature. In addition, if the file is already compressed using
     * gzip compression, the zlib extension must be enabled in order to
     * decompress the file. As with all functionality that modifies the
     * contents of a phar, the phar.readonly INI variable must be off in
     * order to succeed.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function setCompressedBZIP2(){}

    /**
     * This method compresses the file inside the Phar archive using gzip
     * compression. The zlib extension must be enabled to take advantage of
     * this feature. In addition, if the file is already compressed using
     * bzip2 compression, the bzip2 extension must be enabled in order to
     * decompress the file. As with all functionality that modifies the
     * contents of a phar, the phar.readonly INI variable must be off in
     * order to succeed.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function setCompressedGZ(){}

    /**
     * {@link PharFileInfo::setMetaData} should only be used to store
     * customized data in a file that cannot be represented with existing
     * information stored with a file. Meta-data can significantly slow down
     * the performance of loading a phar archive if the data is large, or if
     * there are many files containing meta-data. It is important to note
     * that file permissions are natively supported inside a phar; it is
     * possible to set them with the {@link PharFileInfo::chmod} method. As
     * with all functionality that modifies the contents of a phar, the
     * phar.readonly INI variable must be off in order to succeed if the file
     * is within a Phar archive. Files within PharData archives do not have
     * this restriction.
     * 
     * Some possible uses for meta-data include passing a user/group that
     * should be set when a file is extracted from the phar to disk. Other
     * uses could include explicitly specifying a MIME type to return.
     * However, any useful data that describes a file, but should not be
     * contained inside of it may be stored.
     * 
     * @param mixed $metadata Any PHP variable containing information to
     *   store alongside a file
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function setMetaData($metadata){}

    /**
     * This method decompresses the file inside the Phar archive. Depending
     * on how the file is compressed, the bzip2 or zlib extensions must be
     * enabled to take advantage of this feature. As with all functionality
     * that modifies the contents of a phar, the phar.readonly INI variable
     * must be off in order to succeed.
     * 
     * @return bool
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function setUncompressed(){}

    /**
     * This should not be called directly. Instead, a PharFileInfo object is
     * initialized by calling {@link Phar::offsetGet} through array access.
     * 
     * @param string $entry The full url to retrieve a file. If you wish to
     *   retrieve the information for the file my/file.php from the phar
     *   boo.phar, the entry should be phar://boo.phar/my/file.php.
     * @return void
     * @since PHP >= 5.3.0, PECL phar >= 1.0.0
     **/
    function __construct($entry){}

}
/**
 * Exception thrown when an invalid range is given.
 **/
class RangeException extends RuntimeException {
}
/**
 * This class represents a RAR archive, which may be formed by several
 * volumes (parts) and which contains a number of RAR entries (i.e.,
 * files, directories and other special objects such as symbolic links).
 * 
 * Objects of this class can be traversed, yielding the entries stored in
 * the respective RAR archive. Those entries can also be obtained through
 * and .
 **/
class RarArchive implements Traversable {
    /**
     * Close RAR archive and free all allocated resources.
     * 
     * @return bool
     * @since PECL rar >= 2.0.0
     **/
    function close(){}

    /**
     * Get the (global) comment stored in the RAR archive. It may be up to 64
     * KiB long.
     * 
     * @return string
     * @since PECL rar >= 2.0.0
     **/
    function getComment(){}

    /**
     * Get entries list (files and directories) from the RAR archive.
     * 
     * @return array
     * @since PECL rar >= 2.0.0
     **/
    function getEntries(){}

    /**
     * Get entry object (file or directory) from the RAR archive.
     * 
     * @param string $entryname A RarArchive object, opened with {@link
     *   rar_open}.
     * @return RarEntry
     * @since PECL rar >= 2.0.0
     **/
    function getEntry($entryname){}

    /**
     * This function determines whether an archive is incomplete, i.e., if a
     * volume is missing or a volume is truncated.
     * 
     * @return bool
     * @since PECL rar >= 3.0.0
     **/
    function isBroken(){}

    /**
     * Check whether the RAR archive is solid. Individual file extraction is
     * slower on solid archives.
     * 
     * @return bool
     * @since PECL rar >= 2.0.0
     **/
    function isSolid(){}

    /**
     * Open specified RAR archive and return RarArchive instance representing
     * it.
     * 
     * @param string $filename Path to the Rar archive.
     * @param string $password A plain password, if needed to decrypt the
     *   headers. It will also be used by default if encrypted files are
     *   found. Note that the files may have different passwords in respect
     *   to the headers and among them.
     * @param callback $volume_callback A function that receives one
     *   parameter – the path of the volume that was not found – and
     *   returns a string with the correct path for such volume or NULL if
     *   such volume does not exist or is not known. The programmer should
     *   ensure the passed function doesn't cause loops as this function is
     *   called repetedly if the path returned in a previous call did not
     *   correspond to the needed volume. Specifying this parameter omits the
     *   notice that would otherwise be emitted whenever a volume is not
     *   found; an implementation that only returns can therefore be used to
     *   merely omit such notices.
     * @return RarArchive
     * @since PECL rar >= 2.0.0
     **/
    function open($filename, $password, $volume_callback){}

    /**
     * This method defines whether broken archives can be read or all the
     * operations that attempt to extract the archive entries will fail.
     * Broken archives are archives for which no error is detected when the
     * file is opened but an error occurs when reading the entries.
     * 
     * @param bool $allow_broken A RarArchive object, opened with {@link
     *   rar_open}.
     * @return bool
     * @since PECL rar >= 3.0.0
     **/
    function setAllowBroken($allow_broken){}

    /**
     * Provides a string representation for this RarArchive object. It
     * currently shows the full path name of the archive volume that was
     * opened and whether the resource is valid or was already closed through
     * a call to RarArchive::close.
     * 
     * This method may be used only for debugging purposes, as there are no
     * guarantees as to which information the result contains or how it is
     * formatted.
     * 
     * @return void
     * @since PECL rar >= 2.0.0
     **/
    function __toString(){}

}
/**
 * A RAR entry, representing a directory or a compressed file inside a
 * RAR archive.
 **/
class RarEntry {
    /**
     * RarEntry::extract extracts the entry's data. It will create new file
     * in the specified {@link dir} with the name identical to the entry's
     * name, unless the second argument is specified. See below for more
     * information.
     * 
     * @param string $dir Path to the directory where files should be
     *   extracted. This parameter is considered if and only if {@link
     *   filepath} is not. If both parameters are empty an extraction to the
     *   current directory will be attempted.
     * @param string $filepath Path (relative or absolute) containing the
     *   directory and filename of the extracted file. This parameter
     *   overrides both the parameter {@link dir} and the original file name.
     * @param string $password The password used to encrypt this entry. If
     *   the entry is not encrypted, this value will not be used and can be
     *   omitted. If this parameter is omitted and the entry is encrypted,
     *   the password given to {@link rar_open}, if any, will be used. If a
     *   wrong password is given, either explicitly or implicitly via {@link
     *   rar_open}, CRC checking will fail and this method will fail and
     *   return . If no password is given and one is required, this method
     *   will fail and return . You can check whether an entry is encrypted
     *   with RarEntry::isEncrypted.
     * @param bool $extended_data If , extended information such as NTFS
     *   ACLs and Unix owner information will be set in the extract files, as
     *   long as it's present in the archive.
     * @return bool
     * @since PECL rar >= 0.1
     **/
    function extract($dir, $filepath, $password, $extended_data){}

    /**
     * Returns the OS-dependent attributes of the archive entry.
     * 
     * @return int
     * @since PECL rar >= 0.1
     **/
    function getAttr(){}

    /**
     * Returns an hexadecimal string representation of the CRC of the archive
     * entry.
     * 
     * @return string
     * @since PECL rar >= 0.1
     **/
    function getCrc(){}

    /**
     * Gets entry last modification time.
     * 
     * @return string
     * @since PECL rar >= 0.1
     **/
    function getFileTime(){}

    /**
     * Returns the code of the host OS of the archive entry.
     * 
     * @return int
     * @since PECL rar >= 0.1
     **/
    function getHostOs(){}

    /**
     * RarEntry::getMethod returns number of the method used when adding
     * current archive entry.
     * 
     * @return int
     * @since PECL rar >= 0.1
     **/
    function getMethod(){}

    /**
     * Returns the name (with path) of the archive entry.
     * 
     * @return string
     * @since PECL rar >= 0.1
     **/
    function getName(){}

    /**
     * Get packed size of the archive entry.
     * 
     * @return int
     * @since PECL rar >= 0.1
     **/
    function getPackedSize(){}

    /**
     * Returns a file handler that supports read operations. This handler
     * provides on-the-fly decompression for this entry.
     * 
     * The handler is not invalidated by calling {@link rar_close}.
     * 
     * @param string $password The password used to encrypt this entry. If
     *   the entry is not encrypted, this value will not be used and can be
     *   omitted. If this parameter is omitted and the entry is encrypted,
     *   the password given to {@link rar_open}, if any, will be used. If a
     *   wrong password is given, either explicitly or implicitly via {@link
     *   rar_open}, this method's resulting stream will produce wrong output.
     *   If no password is given and one is required, this method will fail
     *   and return . You can check whether an entry is encrypted with
     *   RarEntry::isEncrypted.
     * @return resource
     * @since PECL rar >= 2.0.0
     **/
    function getStream($password){}

    /**
     * Get unpacked size of the archive entry.
     * 
     * @return int
     * @since PECL rar >= 0.1
     **/
    function getUnpackedSize(){}

    /**
     * Returns minimum version of RAR program (e.g. WinRAR) required to
     * unpack the entry. It is encoded as 10 * major version + minor version.
     * 
     * @return int
     * @since PECL rar >= 0.1
     **/
    function getVersion(){}

    /**
     * Tests whether the current entry is a directory.
     * 
     * @return bool
     * @since PECL rar >= 2.0.0
     **/
    function isDirectory(){}

    /**
     * Tests whether the current entry contents are encrypted.
     * 
     * @return bool
     * @since PECL rar >= 2.0.0
     **/
    function isEncrypted(){}

    /**
     * RarEntry::__toString returns a textual representation for this entry.
     * It includes whether the entry is a file or a directory (symbolic links
     * and other special objects will be treated as files), the UTF-8 name of
     * the entry and its CRC. The form and content of this representation may
     * be changed in the future, so they cannot be relied upon.
     * 
     * @return string
     * @since PECL rar >= 2.0.0
     **/
    function __toString(){}

}
/**
 * This class serves two purposes: it is the type of the exceptions
 * thrown by the RAR extension functions and methods and it allows,
 * through static methods to query and define the error behaviour of the
 * extension, i.e., whether exceptions are thrown or only warnings are
 * emitted.
 * 
 * The following error codes are used:
 **/
class RarException extends Exception {
    /**
     * Checks whether the RAR functions will emit warnings and return error
     * values or whether they will throw exceptions in most of the
     * circumstances (does not include some programmatic errors such as
     * passing the wrong type of arguments).
     * 
     * @return bool
     * @since PECL rar >= 2.0.0
     **/
    function isUsingExceptions(){}

    /**
     * If and only if the argument is , then, instead of emitting warnings
     * and returning a special value indicating error when the UnRAR library
     * encounters an error, an exception of type RarException will be thrown.
     * 
     * Exceptions will also be thrown for the following errors, which occur
     * outside the library (their error code will be -1):
     * 
     * @param bool $using_exceptions Should be to activate exception
     *   throwing, to deactivate (the default).
     * @return void
     * @since PECL rar >= 2.0.0
     **/
    function setUsingExceptions($using_exceptions){}

}
/**
 * This iterator allows to unset and modify values and keys while
 * iterating over Arrays and Objects in the same way as the .
 * Additionally it is possible to iterate over the current iterator
 * entry.
 **/
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator {
    /**
     * Returns an iterator for the current iterator entry.
     * 
     * @return RecursiveArrayIterator
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren(){}

    /**
     * Returns whether current entry is an array or an object for which an
     * iterator can be obtained via RecursiveArrayIterator::getChildren.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasChildren(){}

}
/**
 * ...
 **/
class RecursiveCachingIterator extends CachingIterator implements Countable, ArrayAccess, Iterator, Traversable, OuterIterator, RecursiveIterator {
    /**
     * @return RecursiveCachingIterator
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren(){}

    /**
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasChildren(){}

    /**
     * Constructs a new RecursiveCachingIterator, which consists of a passed
     * in {@link iterator}.
     * 
     * @param Iterator $iterator The iterator being used.
     * @param string $flags The flags. Use CALL_TOSTRING to call
     *   RecursiveCachingIterator::__toString for every element (the
     *   default), and/or CATCH_GET_CHILD to catch exceptions when trying to
     *   get children.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator, $flags){}

}
/**
 * ...
 **/
class RecursiveDirectoryIterator extends DirectoryIterator implements Traversable, Iterator, RecursiveIterator {
    /**
     * @return object
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren(){}

    /**
     * Gets the sub path.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getSubPath(){}

    /**
     * Gets the sub path and filename.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getSubPathname(){}

    /**
     * @param bool $allow_links
     * @return bool
     * @since PHP 5
     **/
    function hasChildren($allow_links){}

    /**
     * @return string
     * @since PHP 5
     **/
    function key(){}

    /**
     * @return void
     * @since PHP 5
     **/
    function next(){}

    /**
     * @return void
     * @since PHP 5
     **/
    function rewind(){}

    /**
     * Constructs a RecursiveDirectoryIterator.
     * 
     * @param string $path Directory path.
     * @param string $flags Optional flags.
     * @since PHP 5 >= 5.1.2
     **/
    function __construct($path, $flags){}

}
/**
 * This abstract iterator filters out unwanted values for a . This class
 * should be extended to implement custom filters. The must be
 * implemented in the subclass.
 **/
class RecursiveFilterIterator extends FilterIterator implements Iterator, Traversable, OuterIterator, RecursiveIterator {
    /**
     * Return the inner iterator's children contained in a
     * RecursiveFilterIterator.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren(){}

    /**
     * Check whether the inner iterator's current element has children.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function hasChildren(){}

    /**
     * Create a RecursiveFilterIterator from a RecursiveIterator.
     * 
     * @param RecursiveIterator $iterator The RecursiveIterator to be
     *   filtered.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($iterator){}

}
/**
 * Classes implementing can be used to iterate over iterators
 * recursively.
 **/
interface RecursiveIterator extends Iterator {
    /**
     * Returns an iterator for the current iterator entry.
     * 
     * @return RecursiveIterator
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren();

    /**
     * Returns if an iterator can be created fot the current entry.
     * RecursiveIterator::getChildren.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasChildren();

}
/**
 * Can be used to iterate through recursive iterators.
 **/
class RecursiveIteratorIterator implements OuterIterator, Traversable, Iterator {
    const CHILD_FIRST = 0;
    const LEAVES_ONLY = 0;
    const SELF_FIRST = 0;
    /**
     * Is called after calling RecursiveIteratorIterator::getChildren, and
     * its associated RecursiveIteratorIterator::rewind.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function beginChildren(){}

    /**
     * Called when iteration begins (after the first
     * RecursiveIteratorIterator::rewind call.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function beginIteration(){}

    /**
     * Get children of the current element.
     * 
     * @return RecursiveIterator
     * @since PHP 5 >= 5.1.0
     **/
    function callGetChildren(){}

    /**
     * Called for each element to test whether it has children.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function callHasChildren(){}

    /**
     * @return mixed
     * @since PHP 5
     **/
    function current(){}

    /**
     * Called when end recursing one level.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function endChildren(){}

    /**
     * Called when the iteration ends (when RecursiveIteratorIterator::valid
     * first returns .
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function endIteration(){}

    /**
     * @return int
     * @since PHP 5
     **/
    function getDepth(){}

    /**
     * Gets the current active sub iterator.
     * 
     * @return iterator
     * @since PHP 5 >= 5.1.0
     **/
    function getInnerIterator(){}

    /**
     * Gets the maximum allowable depth.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function getMaxDepth(){}

    /**
     * @return RecursiveIterator
     * @since PHP 5
     **/
    function getSubIterator(){}

    /**
     * @return mixed
     * @since PHP 5
     **/
    function key(){}

    /**
     * @return void
     * @since PHP 5
     **/
    function next(){}

    /**
     * Called when the next element is available.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function nextElement(){}

    /**
     * @return void
     * @since PHP 5
     **/
    function rewind(){}

    /**
     * Set the maximum allowed depth.
     * 
     * @param string $max_depth The maximum allowed depth. -1 is used for
     *   any depth.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setMaxDepth($max_depth){}

    /**
     * @return bool
     * @since PHP 5
     **/
    function valid(){}

    /**
     * Creates a RecursiveIteratorIterator from a RecursiveIterator.
     * 
     * @param Traversable $iterator The iterator being constructed from,
     *   which is from a RecursiveIterator or IteratorAggregate.
     * @param int $mode The mode. Options are LEAVES_ONLY (default),
     *   SELF_FIRST and CHILD_FIRST.
     * @param int $flags
     * @since PHP 5 >= 5.1.3
     **/
    function __construct($iterator, $mode, $flags){}

}
/**
 * This recursive iterator can filter another recursive iterator via a
 * regular expression.
 **/
class RecursiveRegexIterator extends RegexIterator implements RecursiveIterator {
    /**
     * Returns an iterator for the current iterator entry.
     * 
     * @return RecursiveRegexIterator
     * @since PHP 5 >= 5.2.0
     **/
    function getChildren(){}

    /**
     * Returns whether an iterator can be obtained for the current entry.
     * This iterator can be obtained via RecursiveRegexIterator::getChildren.
     * 
     * @return bool
     * @since PHP 5 >= 5.2.0
     **/
    function hasChildren(){}

}
/**
 * Allows iterating over a to generate an ASCII graphic tree.
 **/
class RecursiveTreeIterator extends RecursiveIteratorIterator implements OuterIterator, Traversable, Iterator {
    /**
     * Called when recursing one level down.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function beginChildren(){}

    /**
     * Called when iteration begins (after the first
     * RecursiveTreeIterator::rewind call).
     * 
     * @return RecursiveIterator
     * @since PHP 5 >= 5.3.0
     **/
    function beginIteration(){}

    /**
     * Gets children of the current element.
     * 
     * @return RecursiveIterator
     * @since PHP 5 >= 5.3.0
     **/
    function callGetChildren(){}

    /**
     * Called for each element to test whether it has children.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function callHasChildren(){}

    /**
     * Gets the current element prefixed and postfixed.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * Called when end recursing one level.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function endChildren(){}

    /**
     * Called when the iteration ends (when RecursiveTreeIterator::valid
     * first returns )
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function endIteration(){}

    /**
     * Gets the part of the tree built for the current element.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function getEntry(){}

    /**
     * Gets the string to place after the current element.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function getPostfix(){}

    /**
     * Gets the string to place in front of current element
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function getPrefix(){}

    /**
     * Gets the current key prefixed and postfixed.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Moves forward to the next element.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * Called when the next element is available.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function nextElement(){}

    /**
     * Rewinds the iterator to the first element of the top level inner
     * iterator.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * Sets a part of the prefix used in the graphic tree.
     * 
     * @param int $part One of the RecursiveTreeIterator::PREFIX_*
     *   constants.
     * @param string $value The value to assign to the part of the prefix
     *   specified in {@link part}.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setPrefixPart($part, $value){}

    /**
     * Check whether the current position is valid.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function valid(){}

    /**
     * Constructs a new RecursiveTreeIterator from the supplied recursive
     * iterator.
     * 
     * @param RecursiveIterator|IteratorAggregate $it The RecursiveIterator
     *   or IteratorAggregate to iterate over.
     * @param int $flags Flags may be provided which will affect the
     *   behavior of some methods. A list of the flags can found under
     *   RecursiveTreeIterator predefined constants.
     * @param int $cit_flags Flags to affect the behavior of the
     *   RecursiveCachingIterator used internally.
     * @param int $mode Flags to affect the behavior of the
     *   RecursiveIteratorIterator used internally.
     * @since PHP 5 >= 5.3.0
     **/
    function __construct($it, $flags, $cit_flags, $mode){}

}
/**
 * The reflection class.
 **/
class Reflection {
    /**
     * Exports a reflection.
     * 
     * @param Reflector $reflector
     * @param string $return
     * @return void
     * @since PHP 5
     **/
    function export($reflector, $return){}

    /**
     * Gets modifier names.
     * 
     * @param int $modifiers The modifiers to get, which is from a numeric
     *   value.
     * @return array
     * @since PHP 5
     **/
    function getModifierNames($modifiers){}

}
/**
 * The class reports information about a class.
 **/
class ReflectionClass implements Reflector {
    /**
     * Exports a reflected class.
     * 
     * @param mixed $argument
     * @param bool $return
     * @return string
     * @since PHP 5
     **/
    function export($argument, $return){}

    /**
     * Gets the defined constants.
     * 
     * @param string $name
     * @return mixed
     * @since PHP 5
     **/
    function getConstant($name){}

    /**
     * Gets defined constants from a class.
     * 
     * @return array
     * @since PHP 5
     **/
    function getConstants(){}

    /**
     * Gets the constructor from a class.
     * 
     * @return object
     * @since PHP 5
     **/
    function getConstructor(){}

    /**
     * Gets default properties from a class.
     * 
     * @return array
     * @since PHP 5
     **/
    function getDefaultProperties(){}

    /**
     * Gets doc comments from a class.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getDocComment(){}

    /**
     * Gets end line number from a user-defined class definition.
     * 
     * @return int
     * @since PHP 5
     **/
    function getEndLine(){}

    /**
     * Gets an extensions ReflectionExtension object.
     * 
     * @return ReflectionExtension
     * @since PHP 5
     **/
    function getExtension(){}

    /**
     * Gets an extensions name.
     * 
     * @return string
     * @since PHP 5
     **/
    function getExtensionName(){}

    /**
     * Gets a filename.
     * 
     * @return string
     * @since PHP 5
     **/
    function getFileName(){}

    /**
     * Get the interface names.
     * 
     * @return array
     * @since PHP 5
     **/
    function getInterfaceNames(){}

    /**
     * Gets the interfaces.
     * 
     * @return array
     * @since PHP 5
     **/
    function getInterfaces(){}

    /**
     * Gets a ReflectionMethod about a method.
     * 
     * @param string $name The method name to reflect.
     * @return object
     * @since PHP 5
     **/
    function getMethod($name){}

    /**
     * Gets a list of methods.
     * 
     * @param string $filter Any combination of
     *   ReflectionMethod::IS_STATIC, ReflectionMethod::IS_PUBLIC,
     *   ReflectionMethod::IS_PROTECTED, ReflectionMethod::IS_PRIVATE,
     *   ReflectionMethod::IS_ABSTRACT, ReflectionMethod::IS_FINAL.
     * @return array
     * @since PHP 5
     **/
    function getMethods($filter){}

    /**
     * @return int
     * @since PHP 5
     **/
    function getModifiers(){}

    /**
     * Gets the class name.
     * 
     * @return string
     * @since PHP 5
     **/
    function getName(){}

    /**
     * Gets the namespace name.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function getNamespaceName(){}

    /**
     * @return object
     * @since PHP 5
     **/
    function getParentClass(){}

    /**
     * Retrieves reflected properties.
     * 
     * @param int $filter The optional filter, for filtering desired
     *   property types. It's configured using the ReflectionProperty
     *   constants, and defaults to all property types.
     * @return array
     * @since PHP 5
     **/
    function getProperties($filter){}

    /**
     * Gets a property.
     * 
     * @param string $name The property name.
     * @return ReflectionProperty
     * @since PHP 5
     **/
    function getProperty($name){}

    /**
     * Gets the short name of the class, the part without the namespace.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function getShortName(){}

    /**
     * Get the starting line number.
     * 
     * @return int
     * @since PHP 5
     **/
    function getStartLine(){}

    /**
     * Get the static properties.
     * 
     * @return array
     * @since PHP 5
     **/
    function getStaticProperties(){}

    /**
     * Gets the static property values.
     * 
     * @param string $name
     * @param string $default
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function getStaticPropertyValue($name, $default){}

    /**
     * Checks whether the class has a specific constant defined or not.
     * 
     * @param string $name The name of the constant being checked for.
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasConstant($name){}

    /**
     * Checks whether a specific method is defined in a class.
     * 
     * @param string $name Name of the method being checked for.
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasMethod($name){}

    /**
     * Checks whether the specified property is defined.
     * 
     * @param string $name Name of the property being checked for.
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function hasProperty($name){}

    /**
     * Checks whether it implements an interface.
     * 
     * @param string $interface The interface name.
     * @return bool
     * @since PHP 5
     **/
    function implementsInterface($interface){}

    /**
     * Checks if this class is defined in a namespace.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function inNamespace(){}

    /**
     * Checks if the class is abstract.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isAbstract(){}

    /**
     * Checks if a class is final.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isFinal(){}

    /**
     * Checks if an object is an instance of a class.
     * 
     * @param object $object The object being compared to.
     * @return bool
     * @since PHP 5
     **/
    function isInstance($object){}

    /**
     * Checks if the class is instanciable.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isInstantiable(){}

    /**
     * Checks whether the class is an interface.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isInterface(){}

    /**
     * Checks whether the class is internal, as opposed to user-defined.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isInternal(){}

    /**
     * Checks whether the class is iterateable.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isIterateable(){}

    /**
     * Checks if the class is a subclass of a specified class.
     * 
     * @param string $class The class name being checked against.
     * @return bool
     * @since PHP 5
     **/
    function isSubclassOf($class){}

    /**
     * Checks whether the class is user-defined, as opposed to internal.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isUserDefined(){}

    /**
     * A new instance.
     * 
     * @param mixed $args Accepts a variable number of arguments which are
     *   passed to the function much like {@link call_user_func}.
     * @return object
     * @since PHP 5
     **/
    function newInstance($args){}

    /**
     * New instance args.
     * 
     * @param array $args
     * @return object
     * @since PHP 5 >= 5.1.3
     **/
    function newInstanceArgs($args){}

    /**
     * Sets static property value.
     * 
     * @param string $name Property name.
     * @param string $value New property value.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setStaticPropertyValue($name, $value){}

    /**
     * Clones.
     * 
     * @return void
     * @since PHP 5
     **/
    function __clone(){}

    /**
     * Constructs a new ReflectionClass object.
     * 
     * @param string $argument The class being reflected.
     * @since PHP 5
     **/
    function __construct($argument){}

    /**
     * To a string.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * The ReflectionException class.
 **/
class ReflectionException extends Exception {
}
/**
 * The class reports information about an extension.
 **/
class ReflectionExtension implements Reflector {
    /**
     * Exports a reflected extension. The output format of this function is
     * the same as the CLI argument --re [extension].
     * 
     * @param string $name
     * @param string $return
     * @return string
     * @since PHP 5
     **/
    function export($name, $return){}

    /**
     * Gets a list of classes from an extension.
     * 
     * @return array
     * @since PHP 5
     **/
    function getClasses(){}

    /**
     * Gets a listing of class names as defined in the extension.
     * 
     * @return array
     * @since PHP 5
     **/
    function getClassNames(){}

    /**
     * Get defined constants from an extension.
     * 
     * @return array
     * @since PHP 5
     **/
    function getConstants(){}

    /**
     * Gets dependencies, by listing both required and conflicting
     * dependencies.
     * 
     * @return array
     * @since PHP 5
     **/
    function getDependencies(){}

    /**
     * Get defined functions from an extension.
     * 
     * @return array
     * @since PHP 5
     **/
    function getFunctions(){}

    /**
     * Get the ini entries for an extension.
     * 
     * @return array
     * @since PHP 5
     **/
    function getINIEntries(){}

    /**
     * Gets the extensions name.
     * 
     * @return string
     * @since PHP 5
     **/
    function getName(){}

    /**
     * Gets the version of the extension.
     * 
     * @return string
     * @since PHP 5
     **/
    function getVersion(){}

    /**
     * Gets information about an extension.
     * 
     * @return string
     * @since PHP 5
     **/
    function info(){}

    /**
     * The clone method prevents an object from being cloned. Reflection
     * objects cannot be cloned.
     * 
     * @return void
     * @since PHP 5
     **/
    function __clone(){}

    /**
     * Construct a ReflectionExtension object.
     * 
     * @param string $name Name of the extension.
     * @since PHP 5
     **/
    function __construct($name){}

    /**
     * Exports a reflected extension and returns it as a string. This is the
     * same as the ReflectionExtension::export with the {@link return} set to
     * .
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * The class reports information about a function.
 * 
 * Parent class has the same methods except , , and .
 **/
class ReflectionFunction extends ReflectionFunctionAbstract implements Reflector {
    /**
     * Exports a Reflected function.
     * 
     * @param string $name
     * @param string $return
     * @return string
     * @since PHP 5
     **/
    function export($name, $return){}

    /**
     * Invokes a reflected function.
     * 
     * @param string $args The passed in argument list. It accepts a
     *   variable number of arguments which are passed to the function much
     *   like {@link call_user_func} is.
     * @return mixed
     * @since PHP 5
     **/
    function invoke($args){}

    /**
     * Invokes args.
     * 
     * @param array $args The args to invoke.
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function invokeArgs($args){}

    /**
     * Checks if the function is disabled, via the disable_functions
     * directive.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isDisabled(){}

    /**
     * Constructs a ReflectionFunction object.
     * 
     * @param string $name The name of the function to reflect.
     * @since PHP 5
     **/
    function __construct($name){}

    /**
     * To string.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * A parent class to , read its description for details.
 **/
class ReflectionFunctionAbstract implements Reflector {
    /**
     * Get a Doc comment from a function.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getDocComment(){}

    /**
     * Get the ending line number.
     * 
     * @return int
     * @since PHP 5
     **/
    function getEndLine(){}

    /**
     * Get the extension information of a function.
     * 
     * @return ReflectionExtension
     * @since PHP 5
     **/
    function getExtension(){}

    /**
     * Get the extensions name.
     * 
     * @return string
     * @since PHP 5
     **/
    function getExtensionName(){}

    /**
     * Gets the file name from a user-defined function.
     * 
     * @return string
     * @since PHP 5
     **/
    function getFileName(){}

    /**
     * Get the name of the function.
     * 
     * @return string
     * @since PHP 5
     **/
    function getName(){}

    /**
     * Get the namespace name where the class is defined.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function getNamespaceName(){}

    /**
     * Get the number of parameters that a function defines, both optional
     * and required.
     * 
     * @return int
     * @since PHP 5 >= 5.0.3
     **/
    function getNumberOfParameters(){}

    /**
     * Get the number of required parameters that a function defines.
     * 
     * @return int
     * @since PHP 5 >= 5.0.3
     **/
    function getNumberOfRequiredParameters(){}

    /**
     * Get the parameters as an array of ReflectionParameter.
     * 
     * @return array
     * @since PHP 5
     **/
    function getParameters(){}

    /**
     * Get the short name of the function (without the namespace part).
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function getShortName(){}

    /**
     * Gets the starting line number of the function.
     * 
     * @return int
     * @since PHP 5
     **/
    function getStartLine(){}

    /**
     * Get the static variables.
     * 
     * @return array
     * @since PHP 5
     **/
    function getStaticVariables(){}

    /**
     * Checks whether a function is defined in a namespace.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function inNamespace(){}

    /**
     * Checks whether it's a closure.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function isClosure(){}

    /**
     * Checks whether the function is deprecated.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isDeprecated(){}

    /**
     * Checks whether the function is internal, as opposed to user-defined.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isInternal(){}

    /**
     * Checks whether the function is user-defined, as opposed to internal.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isUserDefined(){}

    /**
     * Checks whether the function returns a reference.
     * 
     * @return bool
     * @since PHP 5
     **/
    function returnsReference(){}

    /**
     * Clones a function.
     * 
     * @return void
     * @since PHP 5
     **/
    function __clone(){}

    /**
     * To string.
     * 
     * @return void
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * The class reports information about a method.
 **/
class ReflectionMethod extends ReflectionFunctionAbstract implements Reflector {
    /**
     * Exports a ReflectionMethod.
     * 
     * @param string $class The class name.
     * @param string $name The name of the method.
     * @param bool $return
     * @return string
     * @since PHP 5
     **/
    function export($class, $name, $return){}

    /**
     * Gets the declaring class.
     * 
     * @return ReflectionClass
     * @since PHP 5
     **/
    function getDeclaringClass(){}

    /**
     * Gets the modifiers.
     * 
     * @return int
     * @since PHP 5
     **/
    function getModifiers(){}

    /**
     * Gets the methods prototype.
     * 
     * @return void
     * @since PHP 5
     **/
    function getPrototype(){}

    /**
     * Invokes a reflected method.
     * 
     * @param object $object The object to invoke.
     * @param string $args The passed in argument list. It accepts a
     *   variable number of arguments which are passed to the function much
     *   like {@link call_user_func} is.
     * @return mixed
     * @since PHP 5
     **/
    function invoke($object, $args){}

    /**
     * Invoke arguments.
     * 
     * @param string $object
     * @param array $args
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function invokeArgs($object, $args){}

    /**
     * Checks if the method is abstract.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isAbstract(){}

    /**
     * Checks if the method is a constructor.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isConstructor(){}

    /**
     * Checks if the method is a destructor.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isDestructor(){}

    /**
     * Checks if the method is final.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isFinal(){}

    /**
     * Checks if the method is private.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isPrivate(){}

    /**
     * Checks if the method is protected.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isProtected(){}

    /**
     * Checks if the method is public.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isPublic(){}

    /**
     * Checks if the method is static.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isStatic(){}

    /**
     * Sets a method to be accessible. For example, it may allow protected
     * and private methods to be invoked.
     * 
     * @param bool $accessible to allow accessibility, or .
     * @return void
     **/
    function setAccessible($accessible){}

    /**
     * Constructs a new ReflectionMethod.
     * 
     * @param string $class_or_method
     * @param string $name
     * @since PHP 5
     **/
    function __construct($class_or_method, $name){}

    /**
     * To string.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * The class reports information about an .
 **/
class ReflectionObject extends ReflectionClass implements Reflector {
    /**
     * Exports a reflection.
     * 
     * @param string $argument
     * @param bool $return
     * @return string
     * @since PHP 5
     **/
    function export($argument, $return){}

    /**
     * Constructs a ReflectionObject.
     * 
     * @param object $argument An object instance.
     * @since PHP 5
     **/
    function __construct($argument){}

}
/**
 * The class retrieves information about a function's or method's
 * parameters.
 * 
 * To introspect function parameters, first create an instance of the or
 * classes and then use their method to retrieve an array of parameters.
 **/
class ReflectionParameter implements Reflector {
    /**
     * Checks whether the parameter allows .
     * 
     * @return bool
     * @since PHP 5
     **/
    function allowsNull(){}

    /**
     * Exports.
     * 
     * @param string $function The function name.
     * @param string $parameter The parameter name.
     * @param bool $return
     * @return string
     * @since PHP 5
     **/
    function export($function, $parameter, $return){}

    /**
     * Gets a class.
     * 
     * @return ReflectionClass
     * @since PHP 5
     **/
    function getClass(){}

    /**
     * Gets the declaring class.
     * 
     * @return ReflectionClass
     * @since PHP 5
     **/
    function getDeclaringClass(){}

    /**
     * Gets the declaring function.
     * 
     * @return ReflectionFunction
     * @since PHP 5 >= 5.2.3
     **/
    function getDeclaringFunction(){}

    /**
     * Gets the default value of the parameter for a user-defined function or
     * method. If the parameter is not optional a ReflectionException will be
     * thrown.
     * 
     * @return mixed
     * @since PHP 5 >= 5.0.3
     **/
    function getDefaultValue(){}

    /**
     * Gets the name of the parameter.
     * 
     * @return string
     * @since PHP 5
     **/
    function getName(){}

    /**
     * Gets the position of the parameter.
     * 
     * @return int
     * @since PHP 5 >= 5.2.3
     **/
    function getPosition(){}

    /**
     * Checks if the parameter expects an array.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function isArray(){}

    /**
     * Checks if a default value for the parameter is available.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.3
     **/
    function isDefaultValueAvailable(){}

    /**
     * Checks if the parameter is optional.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.3
     **/
    function isOptional(){}

    /**
     * Checks if the parameter is passed in by reference.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isPassedByReference(){}

    /**
     * Clones.
     * 
     * @return void
     * @since PHP 5
     **/
    function __clone(){}

    /**
     * Constructs a ReflectionParameter class.
     * 
     * @param string $function The function to reflect parameters from.
     * @param string $parameter The parameter.
     * @since PHP 5
     **/
    function __construct($function, $parameter){}

    /**
     * To string.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * The class reports information about a classes properties.
 **/
class ReflectionProperty implements Reflector {
    /**
     * Exports a reflection.
     * 
     * @param mixed $class
     * @param string $name The property name.
     * @param bool $return
     * @return string
     * @since PHP 5
     **/
    function export($class, $name, $return){}

    /**
     * Gets the declaring class.
     * 
     * @return ReflectionClass
     * @since PHP 5
     **/
    function getDeclaringClass(){}

    /**
     * Gets the doc comment.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function getDocComment(){}

    /**
     * Gets the modifiers.
     * 
     * @return int
     * @since PHP 5
     **/
    function getModifiers(){}

    /**
     * Gets the properties name.
     * 
     * @return string
     * @since PHP 5
     **/
    function getName(){}

    /**
     * Gets the properties value.
     * 
     * @param string $object The object being reflected.
     * @return mixed
     * @since PHP 5
     **/
    function getValue($object){}

    /**
     * Checks whether the property is the default.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isDefault(){}

    /**
     * Checks whether the property is private.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isPrivate(){}

    /**
     * Checks whether the property is protected.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isProtected(){}

    /**
     * Checks whether the property is public.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isPublic(){}

    /**
     * Checks whether the property is static.
     * 
     * @return bool
     * @since PHP 5
     **/
    function isStatic(){}

    /**
     * Sets a property to be accessible. For example, it may allow protected
     * and private properties to be accessed.
     * 
     * @param bool $accessible to allow accessibility, or .
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setAccessible($accessible){}

    /**
     * Sets (changes) a properties value.
     * 
     * @param object $object The object name.
     * @param mixed $value The new value.
     * @return void
     * @since PHP 5
     **/
    function setValue($object, $value){}

    /**
     * Clones.
     * 
     * @return void
     * @since PHP 5
     **/
    function __clone(){}

    /**
     * @param mixed $class The class name, that contains the property.
     * @param string $name The name of the property being reflected.
     * @since PHP 5
     **/
    function __construct($class, $name){}

    /**
     * To string.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * is an interface implemented by all exportable Reflection classes.
 **/
class Reflector {
    /**
     * Exports.
     * 
     * @return string
     * @since PHP 5
     **/
    function export(){}

    /**
     * To string.
     * 
     * @return string
     * @since PHP 5
     **/
    function __toString(){}

}
/**
 * This iterator can be used to filter another iterator based on a
 * regular expression.
 **/
class RegexIterator extends FilterIterator {
    /**
     * Matches (string) RegexIterator::current (or RegexIterator::key if the
     * RegexIterator::USE_KEY flag is set) against the regular expression.
     * 
     * @return bool
     * @since PHP 5 >= 5.2.0
     **/
    function accept(){}

    /**
     * Returns the flags, see RegexIterator::setFlags for a list of available
     * flags.
     * 
     * @return int
     * @since PHP 5 >= 5.2.0
     **/
    function getFlags(){}

    /**
     * Returns the operation mode, see RegexIterator::setMode for the list of
     * operation modes.
     * 
     * @return int
     * @since PHP 5 >= 5.2.0
     **/
    function getMode(){}

    /**
     * Returns the regular expression flags, see RegexIterator::__construct
     * for the list of flags.
     * 
     * @return int
     * @since PHP 5 >= 5.2.0
     **/
    function getPregFlags(){}

    /**
     * Sets the flags.
     * 
     * @param int $flags The flags to set, a bitmask of class constants.
     *   The available flags are listed below. The actual meanings of these
     *   flags are described in the predefined constants. RegexIterator flags
     *   value constant 1 RegexIterator::USE_KEY
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function setFlags($flags){}

    /**
     * Sets the operation mode.
     * 
     * @param int $mode The operation mode. The available modes are listed
     *   below. The actual meanings of these modes are described in the
     *   predefined constants. RegexIterator modes value constant 0
     *   RegexIterator::MATCH 1 RegexIterator::GET_MATCH 2
     *   RegexIterator::ALL_MATCHES 3 RegexIterator::SPLIT 4
     *   RegexIterator::REPLACE
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function setMode($mode){}

    /**
     * Sets the regular expression flags.
     * 
     * @param int $preg_flags The regular expression flags. See
     *   RegexIterator::__construct for an overview of available flags.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function setPregFlags($preg_flags){}

}
class ResourceBundle {
    /**
     * Get the number of elements in the bundle.
     * 
     * @return int
     **/
    function count(){}

    /**
     * Creates a resource bundle.
     * 
     * @param string $locale Locale for which the resources should be
     *   loaded (locale name, e.g. en_CA).
     * @param string $bundlename The directory where the data is stored or
     *   the name of the .dat file.
     * @param bool $fallback Whether locale should match exactly or
     *   fallback to parent locale is allowed.
     * @return ResourceBundle
     **/
    function create($locale, $bundlename, $fallback){}

    /**
     * Get the data from the bundle by index or string key.
     * 
     * @param string|int $index ResourceBundle object.
     * @return mixed
     **/
    function get($index){}

    /**
     * Get error code from the last function performed by the bundle object.
     * 
     * @return int
     **/
    function getErrorCode(){}

    /**
     * Get error message from the last function performed by the bundle
     * object.
     * 
     * @return string
     **/
    function getErrorMessage(){}

    /**
     * Get the list of locales supported by the bundle. The list is taken
     * from the bundle table named res_index which should contain a table
     * named InstalledLocales, which contains locales as keys. This bundle
     * should be either in data directory as .res file or part of the .dat
     * file for this function to work.
     * 
     * @return array
     **/
    function getLocales(){}

}
class Runkit_Sandbox_Parent {
    /**
     * Instantiating the Runkit_Sandbox_Parent class from within a sandbox
     * environment created from the Runkit_Sandbox class provides some
     * (controlled) means for a sandbox child to access its parent.
     * 
     * In order for any of the Runkit_Sandbox_Parent features to function.
     * Support must be enabled on a per-sandbox basis by enabling the
     * parent_access flag from the parent's context.
     * 
     * @return void
     **/
    function __construct(){}

}
/**
 * Exception thrown if an error which can only be found on runtime occurs
 **/
class RuntimeException extends Exception {
}
class SAMConnection {
    /**
     * Contains the numeric error code of the last executed SAM operation on
     * this connection. If the last operation completed successfully this
     * property contains 0.
     * 
     * @var int
     **/
    var $errno;
    /**
     * Contains the text description of the last failed SAM operation on this
     * connection. If the last operation completed successfully this property
     * contains an empty string.
     * 
     * @var string
     **/
    var $error;
    /**
     * Calling the "commit" method on a Connection object commits (completes)
     * all in-flight transactions that are part of the current unit of work.
     * 
     * @return bool
     * @since PECL sam >= 0.1.0
     **/
    function commit(){}

    /**
     * Calling the "connect" method on a SAMConnection object connects the
     * PHP script to a messaging server. No messages can be sent or received
     * until a connection is made.
     * 
     * @param string $protocol
     * @param array $properties
     * @return bool
     * @since PECL sam >= 0.1.0
     **/
    function connect($protocol, $properties){}

    /**
     * Calling the "disconnect" method on a SAMConnection object disconnects
     * the PHP script from a messaging server. No messages can be sent or
     * received after a connection has been disconnected.
     * 
     * @return bool
     * @since PECL sam >= 0.1.0
     **/
    function disconnect(){}

    /**
     * Calling the "isConnected" method on a Connection object will check
     * whether the PHP script is connected to a messaging server. No messages
     * can be sent or received unless a connection has been established with
     * a Messaging server.
     * 
     * @return bool
     * @since PECL sam >= 0.1.0
     **/
    function isConnected(){}

    /**
     * @param string $target The identity of the queue from which to peek
     *   the message.
     * @param array $properties An optional associative array of properties
     *   describing other parameters to control the peek operation. Property
     *   name Possible values SAM_CORRELID This is the target correlation id
     *   string of the message. This would typically have been returned by a
     *   "send" request. SAM_MESSAGEID This is the message id string of the
     *   message which is to be peeked.
     * @return SAMMessage
     * @since PECL sam >= 0.1.0
     **/
    function peek($target, $properties){}

    /**
     * @param string $target The identity of the queue from which messages
     *   should be peeked.
     * @param array $properties An optional associative array of properties
     *   describing other parameters to control the peek operation. Property
     *   name Possible values SAM_CORRELID This is the target correlation id
     *   string of messages to be peeked. This would typically have been
     *   returned by a "send" request. SAM_MESSAGEID This is the message id
     *   string of a message which is to be peeked.
     * @return array
     * @since PECL sam >= 0.2.0
     **/
    function peekAll($target, $properties){}

    /**
     * @param string $target The identity of the queue, topic or
     *   subscription from which to receive the message.
     * @param array $properties An optional associative array of properties
     *   describing other parameters to control the receive operation.
     *   Property name Possible values SAM_CORRELID Used to request selection
     *   of the message to receive based upon the correlation id string of
     *   the message. SAM_MESSAGEID Used to request selection of the message
     *   to receive based upon the message id string of the message. SAM_WAIT
     *   Timeout value in milliseconds to control how long the request should
     *   block waiting to receive a message before returning with a failure
     *   if no message is available on the queue or topic. The default value
     *   is 0 meaning wait indefinitely and should be used with caution as
     *   the request may wait until the overall PHP script processing time
     *   limit has expired if no message becomes available.
     * @return SAMMessage
     * @since PECL sam >= 0.1.0
     **/
    function receive($target, $properties){}

    /**
     * Removes a message from a queue.
     * 
     * @param string $target The identity of the queue from which to remove
     *   the message.
     * @param array $properties An optional associative array of properties
     *   describing other parameters to control the remove operation.
     *   Property name Possible values SAM_CORRELID This is the target
     *   correlation id string of the message. This would typically have been
     *   returned by a "send" request. SAM_MESSAGEID This is the message id
     *   string of the message which is to be removed.
     * @return SAMMessage
     * @since PECL sam >= 0.1.0
     **/
    function remove($target, $properties){}

    /**
     * Rolls back an in-flight unit of work.
     * 
     * @return bool
     * @since PECL sam >= 0.1.0
     **/
    function rollback(){}

    /**
     * The "send" method is used to send a message to a specific queue or to
     * publish to a specific topic. The method returns a correlation id that
     * can be used as a selector to identify reply or response messages when
     * these are requested.
     * 
     * @param string $target If sending a message, the identity of the
     *   queue (queue://queuename) or if publishing to a topic the identity
     *   of the topic (topic://topicname) to which the message is to be
     *   delivered.
     * @param SAMMessage $msg The message to be sent or published.
     * @param array $properties An optional associative array of properties
     *   describing other parameters to control the receive operation.
     *   Property name Possible values SAM_DELIVERYMODE Indicates whether the
     *   messaging server should ensure delivery or whether it is acceptable
     *   for messages to be lost in the case of system failures. The value of
     *   this property may be set to either SAM_PERSISTENT, to indicate that
     *   message loss is not acceptable, or SAM_NON_PERSISTENT, if message
     *   loss is acceptable. The resulting behaviour of the send will vary
     *   depending on the capabilities of the messaging server the PHP script
     *   is currently connected to. If the server does not support persistent
     *   messages and SAM_PERSISTENT is specified the send request will fail
     *   with an error indication showing the capability is not available.
     *   SAM_PRIORITY A numeric value between 0 and 9 indicating the desired
     *   message delivery priority. A priority value of 0 indicates the
     *   lowest priority while 9 indicates highest priority. If no priority
     *   is specified a default will be assigned which is dependent on the
     *   messaging server being used. SAM_CORRELID A string to be assigned as
     *   a correlation id for this message. If no value is given the
     *   messaging server may assign a value automatically. SAM_TIMETOLIVE A
     *   time in milliseconds indicating how long the messaging server should
     *   retain the message on a queue before discarding it. The default
     *   value is 0 indicating the message should be retained indefinitely.
     *   SAM_WMQ_TARGET_CLIENT This property is only valid when using
     *   WebSphere MQ and indicates whether or not an RFH2 header should be
     *   included with the message. This option may be set to either 'jms' or
     *   'mq'. The default is 'jms' which means that an RFH2 header is
     *   included. If the value 'mq' is specified then no RFH2 is included
     *   with the message.
     * @return string
     * @since PECL sam >= 0.1.0
     **/
    function send($target, $msg, $properties){}

    /**
     * The "setdebug" method is used to turn on or off additional debugging
     * output. The SAM framework will provide method/function entry and exit
     * trace data plus additional information. Protocol specific
     * implementations also provide extra output.
     * 
     * @param bool $switch If this parameter is set to additional debugging
     *   output will be provided. If the value is set to output of additional
     *   information will be stopped.
     * @return void
     * @since PECL sam >= 1.1.0
     **/
    function setDebug($switch){}

    /**
     * The "subscribe" method is used to create a new subscription to a
     * specified topic.
     * 
     * @param string $targetTopic The identity of the topic
     *   (topic://topicname) to subscribe to.
     * @return string
     * @since PECL sam >= 0.1.0
     **/
    function subscribe($targetTopic){}

    /**
     * The "unsubscribe" method is used to delete an existing subscription to
     * a specified topic.
     * 
     * @param string $subscriptionId The identifier of an existing
     *   subscription as returned by a call to the subscribe method.
     * @param string $targetTopic
     * @return bool
     * @since PECL sam >= 0.1.0
     **/
    function unsubscribe($subscriptionId, $targetTopic){}

}
class SAMMessage {
    /**
     * The "body" property contains the actual body of the message. It may
     * not always be set.
     * 
     * @var string
     **/
    var $body;
    /**
     * The header property is a container for any system or user properties
     * that area associated with the message.
     * 
     * Properties may be assigned by the sender of a message to control the
     * way the messaging systems handles it or may be assigned by the
     * messaging system itself to tell the recipient extra information about
     * the message or the way in which it has been handled.
     * 
     * Some properties are understood by SAM in which case constants have
     * been defined for them. The majority of properties however are ignored
     * by the SAM implementation and simply passed through to the underlying
     * messaging systems allowing the application to use messaging specific
     * property names or to define its own "user" properties.
     * 
     * The SAM defined properties are as follows: Property name Possible
     * values SAM_MESSAGEID When a message is received this field contains
     * the unique identifier of the message as allocated by the underlying
     * messaging system. When sending a message this field is ignored.
     * SAM_REPLY_TO A string providing the identity of the queue on to which
     * responses to this message should be posted. SAM_TYPE An indication of
     * the type of message to be sent. The value may be SAM_TEXT indicating
     * the contents of the message body is a text string, or SAM_BYTES
     * indicating the contents of the message body are some application
     * defined format. The way in which this property is used may depend on
     * the underlying messaging server. For instance a messaging server that
     * supports the JMS (Java Message Service) specification may interpret
     * this value and send messages of type "jms_text" and "jms_bytes". In
     * addition, if the SAM_TYPE property is set to SAM_TEXT the data
     * provided for the message body is expected to be a UTF8 encoded string.
     * 
     * When setting the values of properties it is often useful to give a
     * hint as to the format in which the property should be delivered to the
     * messaging system. By default property values are delivered as text and
     * the following simple syntax may be used to set a value:
     * 
     * Setting a text format property using the default syntax
     * 
     * <?php $msg = new SAMMessage();
     * 
     * $msg->header->myPropertyName = 'textData'; ?>
     * 
     * If it is desired to pass type information an alternative syntax may be
     * used where the value and the type hint are passed in an associative
     * array:
     * 
     * Setting a text format property using a type hint
     * 
     * <?php $msg = new SAMMessage();
     * 
     * $msg->header->myPropertyName = array('textData', SAM_STRING); ?>
     * 
     * When passing a type hint the type entry should be one of the SAM
     * defined constant values as defined by the following table: Constant
     * Type description SAM_BOOLEAN Any value passed will be interpreted as
     * logical true or false. If the value cannot be interpreted as a PHP
     * boolean value the value passed to the messaging system is undefined.
     * SAM_BYTE An 8-bit signed integer value. SAM will attempt to convert
     * the property value specified into a single byte value to pass to the
     * messaging system. If a string value is passed an attempt will be made
     * to interpret the string as a numeric value. If the numeric value
     * cannot be expressed as an 8-bit signed binary value data may be lost
     * in the conversion. SAM_DOUBLE A long floating point value. SAM will
     * attempt to convert the property value specified into a floating point
     * value with 15 digits of precision. If a string value is passed an
     * attempt will be made to interpret the string as a numeric value. If
     * the passed value cannot be expressed as a 15 digit floating point
     * value data may be lost in the conversion. SAM_FLOAT A short floating
     * point value. SAM will attempt to convert the property value specified
     * into a floating point value with 7 digits of precision. If a string
     * value is passed an attempt will be made to interpret the string as a
     * numeric value. If the passed value cannot be expressed as a 7 digit
     * floating point value data may be lost in the conversion. SAM_INT An
     * 32-bit signed integer value. SAM will attempt to convert the property
     * value specified into a 32-bit value to pass to the messaging system.
     * If a string value is passed an attempt will be made to interpret the
     * string as a numeric value. If the numeric value cannot be expressed as
     * an 32-bit signed binary value data may be lost in the conversion.
     * SAM_LONG An 64-bit signed integer value. SAM will attempt to convert
     * the property value specified into a 64-bit value to pass to the
     * messaging system. If a string value is passed an attempt will be made
     * to interpret the string as a numeric value. If the numeric value
     * cannot be expressed as an 64-bit signed binary value data may be lost
     * in the conversion. SAM_STRING SAM will interpret the property value
     * specified as a string and pass it to the messaging system accordingly.
     * 
     * @var object
     **/
    var $header;
}
class SCA {
    /**
     * This method is used inside an SCA component that needs to create an
     * SDO to return. The parameters are the desired SDO's namespace URI and
     * type name. The namespace and type must be defined in one of the schema
     * files which are specified on the @types annotation within the
     * component.
     * 
     * @param string $type_namespace_uri The namespace of the type.
     * @param string $type_name The name of the type.
     * @return SDO_DataObject
     * @since PECL SDO >= 0.5.0
     **/
    function createDataObject($type_namespace_uri, $type_name){}

    /**
     * Examine the target and initialize and return a proxy of the
     * appropriate sort. If the target is for a local PHP component the
     * returned proxy will be an SCA_LocalProxy. If the target is for a WSDL
     * file, the returned proxy will be a SCA_SoapProxy.
     * 
     * @param string $target An absolute or relative path to the target
     *   service or service description (e.g. a URL to a json-rpc service
     *   description, a PHP component, a WSDL file, and so on.). A relative
     *   path, if specified, is resolved relative to the location of the
     *   script issuing the {@link getService} call, and not against the
     *   include_path or current working directory.
     * @param string $binding The binding (i.e. protocol) to use to
     *   communicate with the service (e.g binding.jsonrpc for a json-rpc
     *   service). Note, some service types can be deduced from the target
     *   parameter (e.g. if the target parameter ends in .wsdl then SCA will
     *   assume binding.soap). Any binding which can be specified in an
     *   annotation can be specified here. For example 'binding.soap' is
     *   equivalent to the '@binding.soap' annotation.
     * @param array $config Any additional configuration properties for the
     *   binding (e.g. array('location' => 'http://example.org')). Any
     *   binding configuration which can be specified in an annotation can be
     *   specified here. For example, 'location' is equivalent to the
     *   '@location' annotation to configure the location of a target soap
     *   service.
     * @return mixed
     * @since PECL SDO >= 0.5.0
     **/
    function getService($target, $binding, $config){}

}
class SCA_LocalProxy {
    /**
     * This method is used inside either an ordinary PHP script or an SCA
     * component that needs to create an SDO to pass to a local service. The
     * parameters are the desired SDO's namespace URI and type name. The
     * namespace and type must be defined in the interface of the component
     * that is to be called, so the namespace and type must be defined in one
     * of the schema files which are specified on the @types annotation
     * within the component for which the SCA_LocalProxy object is a proxy.
     * 
     * @param string $type_namespace_uri The namespace of the type.
     * @param string $type_name The name of the type.
     * @return SDO_DataObject
     * @since PECL SDO >= 0.5.0
     **/
    function createDataObject($type_namespace_uri, $type_name){}

}
class SCA_SoapProxy {
    /**
     * This method is used inside either an ordinary PHP script or an SCA
     * component that needs to create an SDO to pass to a web service. The
     * parameters are the desired SDO's namespace URI and type name. The
     * namespace and type must be defined in the interface of the component
     * that is to be called, so the namespace and type must be defined within
     * the WSDL for the web service. If the web service is also an SCA
     * component then the types will have been defined within one of the
     * schema files which are specified on the @types annotation within the
     * component for which the SCA_SoapProxy object is a proxy.
     * 
     * @param string $type_namespace_uri The namespace of the type.
     * @param string $type_name The name of the type.
     * @return SDO_DataObject
     * @since PECL SDO >= 0.5.0
     **/
    function createDataObject($type_namespace_uri, $type_name){}

}
interface SDO_DAS_ChangeSummary {
    const ADDITION = 0;
    const DELETION = 0;
    const MODIFICATION = 0;
    const NONE = 0;
    /**
     * Begin logging changes made to the SDO_DataObject.
     * 
     * @return void
     * @since ^
     **/
    function beginLogging();

    /**
     * End logging changes made to an SDO_DataObject.
     * 
     * @return void
     * @since ^
     **/
    function endLogging();

    /**
     * Get an SDO_List of the SDO_DataObjects which have been changed. These
     * data objects can then be used to identify the types of change made to
     * each, along with the old values.
     * 
     * @return SDO_List
     * @since ^
     **/
    function getChangedDataObjects();

    /**
     * Get the type of change which has been made to the supplied
     * SDO_DataObject.
     * 
     * @param SDO_DataObject $dataObject The SDO_DataObject which has been
     *   changed.
     * @return int
     * @since ^
     **/
    function getChangeType($dataObject);

    /**
     * Get the old container (SDO_DataObject) for a deleted SDO_DataObject.
     * 
     * @param SDO_DataObject $data_object The SDO_DataObject which has been
     *   deleted and whose container we wish to identify.
     * @return SDO_DataObject
     * @since ^
     **/
    function getOldContainer($data_object);

    /**
     * Get a list of the old values for a given changed SDO_DataObject.
     * Returns a list of SDO_DAS_Settings describing the old values for the
     * changed properties of the SDO_DataObject.
     * 
     * @param SDO_DataObject $data_object The data object which has been
     *   changed.
     * @return SDO_List
     * @since ^
     **/
    function getOldValues($data_object);

    /**
     * Test to see whether change logging is switched on.
     * 
     * @return bool
     * @since ^
     **/
    function isLogging();

}
class SDO_DAS_DataFactory {
    /**
     * Adds a property to a type. The type must already be known to the
     * SDO_DAS_DataFactory (i.e. have been added using addType()). The
     * property becomes a property of the type. This is how the graph model
     * for the structure of an SDO_DataObject is built.
     * 
     * @param string $parent_type_namespace_uri The namespace URI for the
     *   parent type.
     * @param string $parent_type_name The type name for the parent type.
     * @param string $property_name The name by which the property will be
     *   known in the parent type.
     * @param string $type_namespace_uri The namespace URI for the type of
     *   the property.
     * @param string $type_name The type name for the type of the property
     * @param array $options This array holds one or more key=>value pairs
     *   to set attribute values for the property. The optional keywords are:
     * @return void
     * @since ^
     **/
    function addPropertyToType($parent_type_namespace_uri, $parent_type_name, $property_name, $type_namespace_uri, $type_name, $options){}

    /**
     * Add a new type to the SDO_DAS_DataFactory, defined by its namespace
     * and type name. The type becomes part of the model of data objects that
     * the data factory can create.
     * 
     * @param string $type_namespace_uri The namespace of the type.
     * @param string $type_name The name of the type.
     * @param array $options This array holds one or more key=>value pairs
     *   to set attribute values for the type. The optional keywords are:
     * @return void
     * @since ^
     **/
    function addType($type_namespace_uri, $type_name, $options){}

    /**
     * Static method to get an instance of an SDO_DAS_DataFactory. This
     * instance is initially only configured with the basic SDO types. A Data
     * Access Service is responsible for populating the data factory model
     * and then allowing PHP applications to create SDOs based on the model
     * through the SDO_DataFactory interface. PHP applications should always
     * obtain a data factory from a configured Data Access Service, not
     * through this interface.
     * 
     * @return SDO_DAS_DataFactory
     * @since ^
     **/
    function getDataFactory(){}

}
class SDO_DAS_DataObject {
    /**
     * Get the SDO_DAS_ChangeSummary for an SDO_DAS_DataObject, or NULL if it
     * does not have one.
     * 
     * @return SDO_DAS_ChangeSummary
     * @since ^
     **/
    function getChangeSummary(){}

}
class SDO_DAS_Relational {
    /**
     * Given a PDO database handle and the special root object of a data
     * graph, examine the change summary in the datagraph and applies the
     * changes to the database. The changes that it can apply can be
     * creations of data objects, deletes of data objects, and modifications
     * to properties of data objects.
     * 
     * @param PDO $database_handle Constructed using the PDO extension. A
     *   typical line to construct a PDO database handle might look like
     *   this:
     *   
     *   $dbh = new
     *   PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
     * @param SDODataObject $root_data_object The special root object which
     *   is at the top of every SDO data graph.
     * @return void
     * @since ^
     **/
    function applyChanges($database_handle, $root_data_object){}

    /**
     * Returns the special root object at the top of an otherwise empty data
     * graph. This call is used when the application wants to create a data
     * graph from scratch, without having called {@link executeQuery} to
     * create a data graph.
     * 
     * The special root object has one multi-valued containment property,
     * with a name of the application root type that was passed when the
     * Relational DAS was constructed. The property can take values of only
     * that type. The only thing that the application can usefully do with
     * the root type is to call {@link createDataObject} on it, passing the
     * name of the application root type, in order to create a data object of
     * their own application type.
     * 
     * @return SDODataObject
     * @since ^
     **/
    function createRootDataObject(){}

    /**
     * Executes a given query against the relational database, using the
     * supplied PDO database handle. Differs from the simpler {@link
     * executeQuery} in that it takes a prepared statement and a list of
     * values. This is the appropriate call to use either when the statement
     * is to executed a number of times with different arguments, and there
     * is therefore a performance benefit to be had from preparing the
     * statement only once, or when the SQL statement is to contain varying
     * values taken from a source that cannot be completely trusted. In this
     * latter case it may be unsafe to construct the SQL statement by simply
     * concatenating the parts of the statement together, since the values
     * may contain pieces of SQL. To guard against this, a so-called SQL
     * injection attack, it is safer to prepare the SQL statement with
     * placeholders (also known as parameter markers, denoted by '?') and
     * supply a list of the values to be substituted as a separate argument.
     * Otherwise this function is the same as {@link executeQuery} in that it
     * uses the model that it built from the metadata to interpret the result
     * set and returns a data graph.
     * 
     * @param PDO $database_handle Constructed using the PDO extension. A
     *   typical line to construct a PDO database handle might look like
     *   this:
     *   
     *   $dbh = new
     *   PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
     * @param PDOStatement $prepared_statement A prepared SQL statement to
     *   be executed against the database. This will have been prepared by
     *   PDO's {@link prepare} method.
     * @param array $value_list An array of the values to be substituted
     *   into the SQL statement in place of the placeholders. In the event
     *   that there are no placeholders or parameter markers in the SQL
     *   statement then this argument can be specified as or as an empty
     *   array;
     * @param array $column_specifier The Relational DAS needs to examine
     *   the result set and for every column, know which table and which
     *   column of that table it came from. In some circumstances it can find
     *   this information for itself, but sometimes it cannot. In these cases
     *   a column specifier is needed, which is an array that identifies the
     *   columns. Each entry in the array is simply a string in the form
     *   table-name.column_name. The column specifier is needed when there
     *   are duplicate column names in the database metadata, For example, in
     *   the database used within the examples, all the tables have both a id
     *   and a name column. When the Relational DAS fetches the result set
     *   from PDO it can do so with the PDO_FETCH_ASSOC attribute, which will
     *   cause the columns in the results set to be labelled with the column
     *   name, but will not distinguish duplicates. So this will only work
     *   when there are no duplicates possible in the results set. To
     *   summarise, specify a column specifier array whenever there is any
     *   uncertainty about which column could be from which table and only
     *   omit it when every column name in the database metadata is unique.
     *   All of the examples in the Examples use a column specifier. There is
     *   one example in the Scenarios directory of the installation that does
     *   not: that which works with just the employee table, and because it
     *   works with just one table, there can not exist duplicate column
     *   names.
     * @return SDODataObject
     * @since ^
     **/
    function executePreparedQuery($database_handle, $prepared_statement, $value_list, $column_specifier){}

    /**
     * Executes a given query against the relational database, using the
     * supplied PDO database handle. Uses the model that it built from the
     * metadata to interpret the result set. Returns a data graph.
     * 
     * @param PDO $database_handle Constructed using the PDO extension. A
     *   typical line to construct a PDO database handle might look like
     *   this:
     *   
     *   $dbh = new
     *   PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
     * @param string $SQL_statement The SQL statement to be executed
     *   against the database.
     * @param array $column_specifier The Relational DAS needs to examine
     *   the result set and for every column, know which table and which
     *   column of that table it came from. In some circumstances it can find
     *   this information for itself, but sometimes it cannot. In these cases
     *   a column specifier is needed, which is an array that identifies the
     *   columns. Each entry in the array is simply a string in the form
     *   table-name.column_name. The column specifier is needed when there
     *   are duplicate column names in the database metadata. For example, in
     *   the database used within the examples, all the tables have both a id
     *   and a name column. When the Relational DAS fetches the result set
     *   from PDO it can do so with the PDO_FETCH_ASSOC attribute, which will
     *   cause the columns in the results set to be labelled with the column
     *   name, but will not distinguish duplicates. So this will only work
     *   when there are no duplicates possible in the results set. To
     *   summarise, specify a column specifier array whenever there is any
     *   uncertainty about which column could be from which table and only
     *   omit it when every column name in the database metadata is unique.
     *   All of the examples in the Examples use a column specifier. There is
     *   one example in the Scenarios directory of the installation that does
     *   not: that which works with just the employee table, and because it
     *   works with just one table, there can not exist duplicate column
     *   names.
     * @return SDODataObject
     * @since ^
     **/
    function executeQuery($database_handle, $SQL_statement, $column_specifier){}

    /**
     * Constructs an instance of a Relational Data Access Service from the
     * passed metadata.
     * 
     * @param array $database_metadata An array containing one or more
     *   table definitions, each of which is an associative array containing
     *   the keys name, columns, PK, and optionally, FK. For a full
     *   discussion of the metadata, see the metadata section in the general
     *   information about the Relational DAS.
     * @param string $application_root_type The root of each data graph is
     *   an object of a special root type and the application data objects
     *   come below that. Of the various application types in the SDO model,
     *   one has to be the application type immediately below the root of the
     *   data graph. If there is only one table in the database metadata, so
     *   the application root type can be inferred, this argument can be
     *   omitted.
     * @param array $SDO_containment_references_metadata An array
     *   containing one or more definitions of a containment relation, each
     *   of which is an associative array containing the keys parent and
     *   child. The containment relations describe how the types in the model
     *   are connected to form a tree. The type specified as the application
     *   root type must be present as one of the parent types in the
     *   containment references. If the application only needs to work with
     *   one table at a time, and there are no containment relations in the
     *   model, this argument can be omitted. For a full discussion of the
     *   metadata, see the metadata section in the general information about
     *   the Relational DAS.
     * @return SDO_DAS_Relational
     * @since ^
     **/
    function __construct($database_metadata, $application_root_type, $SDO_containment_references_metadata){}

}
class SDO_DAS_Setting {
    /**
     * Get the list index for a modification made to an element of a
     * many-valued property. For example, if we modified the third element of
     * a many-valued property we could obtain an SDO_DAS_Setting from the
     * change summary corresponding to that modification. A call to {@link
     * getListIndex} on that setting would return the value 2 (lists are
     * indexed from zero).
     * 
     * @return int
     * @since ^
     **/
    function getListIndex(){}

    /**
     * Returns the property index for the changed property. This index
     * identifies the property which was modified in data object.
     * 
     * @return int
     * @since ^
     **/
    function getPropertyIndex(){}

    /**
     * Returns the property name for the changed property. This name
     * identifies the property which was modified in data object.
     * 
     * @return string
     * @since ^
     **/
    function getPropertyName(){}

    /**
     * Returns the old value for the changed property. This can be used by a
     * Data Access Service when writing updates to a data source. The DAS
     * uses the old value to detect conflicts by comparing it with the
     * current value in the data source. If they do not match, then the data
     * source has been updated since the data object was originally
     * populated, and therefore writing any new updates risks compromising
     * the integrity of the data.
     * 
     * @return mixed
     * @since ^
     **/
    function getValue(){}

}
class SDO_DAS_XML {
    /**
     * Load a second or subsequent schema file to an XML DAS that has already
     * been created with the static method {@link create}. Although the file
     * may be any valid schema file, a likely reason for using this method is
     * to add a schema file containing definitions of extra complex types,
     * hence the name. See Example 4 of the parent document for an example.
     * 
     * @param string $xsd_file Path to XSD Schema file.
     * @return void
     * @since ^
     **/
    function addTypes($xsd_file){}

    /**
     * This is the only static method of SDO_DAS_XML class. Used to
     * instantiate SDO_DAS_XML object.
     * 
     * @param mixed $xsd_file Path to XSD Schema file. This is optional. If
     *   omitted a DAS will be created that only has the SDO base types
     *   defined. Schema files can then be loaded with the {@link addTypes}
     *   method. Can be string or array of values.
     * @param string $key
     * @return SDO_DAS_XML
     * @since ^
     **/
    function create($xsd_file, $key){}

    /**
     * Creates SDO_DataObject for a given namespace URI and type name. The
     * type should be defined in the underlying model otherwise
     * SDO_TypeNotFoundException will be thrown.
     * 
     * @param string $namespace_uri Namespace URI of the type name.
     * @param string $type_name Type Name.
     * @return SDO_DataObject
     * @since ^
     **/
    function createDataObject($namespace_uri, $type_name){}

    /**
     * Creates an XML Document object. This will contain just one empty root
     * element on which none of the properties will have been set. The
     * purpose of this call is to allow an application to create an XML
     * document from scratch without the need to load a document from a file
     * or string. The document that is created will be as if a document had
     * been loaded that contained just a single empty document element with
     * no attributes set or elements within it.
     * 
     * {@link createDocument} may need to be told what the document element
     * is. This will not be necessary in simple cases. When there is no
     * ambiguity then no parameter need be passed to the method. However it
     * is possible to load more than one schema file into the same XML DAS
     * and in this case there may be more than one possible document element
     * defined: furthermore it is even possible that there are two possible
     * document elements that differ only in the namespace. To cope with
     * these cases it is possible to specify either the document element
     * name, or both the document element name and namespace to the method.
     * 
     * @param string $document_element_name The name of the document
     *   element. Only needed if there is more than one possibility.
     * @return SDO_DAS_XML_Document
     * @since ^
     **/
    function createDocument($document_element_name){}

    /**
     * Constructs the tree of SDO_DataObjects from the given address to xml
     * instance document. Returns SDO_DAS_XML_Document Object. Use
     * SDO_DAS_XML_Document::getRootDataObject method to get root data
     * object.
     * 
     * @param string $xml_file Path to Instance document. This can be a
     *   path to a local file or it can be a URL.
     * @return SDO_XMLDocument
     * @since ^
     **/
    function loadFile($xml_file){}

    /**
     * Constructs the tree of SDO_DataObjects from the given xml instance
     * string. Returns SDO_DAS_XML_Document Object. Use
     * SDO_DAS_XML_Document::getRootDataObject method to get root data
     * object.
     * 
     * @param string $xml_string xml string.
     * @return SDO_DAS_XML_Document
     * @since ^
     **/
    function loadString($xml_string){}

    /**
     * Saves the SDO_DAS_XML_Document object to a file.
     * 
     * @param SDO_XMLDocument $xdoc SDO_DAS_XML_Document object.
     * @param string $xml_file xml file.
     * @param int $indent Optional argument to specify that the xml should
     *   be formatted. A non-negative integer is the amount to indent each
     *   level of the xml. So, the integer 2, for example, will indent the
     *   xml so that each contained element is two spaces further to the
     *   right than its containing element. The integer 0 will cause the xml
     *   to be completely left-aligned. The integer -1 means no formatting -
     *   the xml will come out on one long line.
     * @return void
     * @since ^
     **/
    function saveFile($xdoc, $xml_file, $indent){}

    /**
     * Saves the SDO_DAS_XML_Document object to string.
     * 
     * @param SDO_XMLDocument $xdoc SDO_DAS_XML_Document object.
     * @param int $indent Optional argument to specify that the xml should
     *   be formatted. A non-negative integer is the amount to indent each
     *   level of the xml. So, the integer 2, for example, will indent the
     *   xml so that each contained element is two spaces further to the
     *   right than its containing element. The integer 0 will cause the xml
     *   to be completely left-aligned. The integer -1 means no formatting -
     *   the xml will come out on one long line.
     * @return string
     * @since ^
     **/
    function saveString($xdoc, $indent){}

}
class SDO_DAS_XML_Document {
    /**
     * Returns the root SDO_DataObject.
     * 
     * @return SDO_DataObject
     * @since ^
     **/
    function getRootDataObject(){}

    /**
     * Returns root element's name.
     * 
     * @return string
     * @since ^
     **/
    function getRootElementName(){}

    /**
     * Returns root element's URI string.
     * 
     * @return string
     * @since ^
     **/
    function getRootElementURI(){}

    /**
     * Sets the given string as encoding.
     * 
     * @param string $encoding Encoding string.
     * @return void
     * @since ^
     **/
    function setEncoding($encoding){}

    /**
     * Controls whether an XML declaration will be generated at the start of
     * the XML document. Set to to generate the XML declaration, or to
     * suppress it.
     * 
     * @param bool $xmlDeclatation Boolean value to set the XML
     *   declaration.
     * @return void
     * @since ^
     **/
    function setXMLDeclaration($xmlDeclatation){}

    /**
     * Sets the given string as xml version.
     * 
     * @param string $xmlVersion xml version string.
     * @return void
     * @since ^
     **/
    function setXMLVersion($xmlVersion){}

}
class SDO_DataFactory {
    /**
     * Create a new SDO_DataObject given the data object's namespace URI and
     * type name.
     * 
     * @param string $type_namespace_uri The namespace of the type.
     * @param string $type_name The name of the type.
     * @return void
     * @since ^
     **/
    function create($type_namespace_uri, $type_name){}

}
class SDO_DataObject {
    /**
     * Clear an SDO_DataObject's properties. Read-only properties are
     * unaffected. Subsequent calls to isset() for the data object will
     * return .
     * 
     * @return void
     * @since ^
     **/
    function clear(){}

    /**
     * Create a child SDO_DataObject of the default type for the property
     * identified. The data object is automatically inserted into the tree
     * and a reference to it is returned.
     * 
     * @param mixed $identifier Identifies the property for the data object
     *   type to be created. Can be either a property name (string), a
     *   property index (int), or an SDO_Model_Property.
     * @return SDO_DataObject
     * @since ^
     **/
    function createDataObject($identifier){}

    /**
     * Get the data object which contains this data object.
     * 
     * @return SDO_DataObject
     * @since ^
     **/
    function getContainer(){}

    /**
     * Return the SDO_Sequence for this SDO_DataObject. Accessing the
     * SDO_DataObject through the SDO_Sequence interface acts on the same
     * SDO_DataObject instance data, but preserves ordering across
     * properties.
     * 
     * @return SDO_Sequence
     * @since ^
     **/
    function getSequence(){}

    /**
     * Return the name of the type for a data object. A convenience method
     * corresponding to SDO_Model_ReflectionDataObject::getType().getName().
     * 
     * @return string
     * @since ^
     **/
    function getTypeName(){}

    /**
     * Return the namespace URI of the type for a data object. A convenience
     * method corresponding to
     * SDO_Model_ReflectionDataObject::getType().getNamespaceURI().
     * 
     * @return string
     * @since ^
     **/
    function getTypeNamespaceURI(){}

}
class SDO_Exception {
    /**
     * Returns the cause of this exception or NULL if the cause is
     * nonexistent or unknown. Typically the cause will be an
     * SDO_CPPException object, which may be used to obtain additional
     * diagnostic information.
     * 
     * @return mixed
     * @since ^
     **/
    function getCause(){}

}
class SDO_List {
    /**
     * Insert a new element at a specified position in the list. All
     * subsequent list items are moved up.
     * 
     * @param mixed $value The new value to be inserted. This can be either
     *   a primitive or an SDO_DataObject.
     * @param int $index The position at which to insert the new element.
     *   If this argument is not specified then the new value will be
     *   appended.
     * @return void
     * @since ^
     **/
    function insert($value, $index){}

}
class SDO_Model_Property {
    /**
     * Returns the SDO_Model_Type which contains this property.
     * 
     * @return SDO_Model_Type
     * @since ^
     **/
    function getContainingType(){}

    /**
     * Returns the default value for the property. Only primitive data type
     * properties can have default values.
     * 
     * @return mixed
     * @since ^
     **/
    function getDefault(){}

    /**
     * Returns the name of the SDO_Model_Property.
     * 
     * @return string
     * @since ^
     **/
    function getName(){}

    /**
     * Get the SDO_Model_Type of the property. The SDO_Model_Type describes
     * the type information for the property, such as its type name,
     * namespace URI, whether it is a primitive data type, and so on.
     * 
     * @return SDO_Model_Type
     * @since ^
     **/
    function getType(){}

    /**
     * Test to see if the property corresponds to a containment relationship.
     * Returns if the property defines a containment relationship, or if it
     * is reference.
     * 
     * @return bool
     * @since ^
     **/
    function isContainment(){}

    /**
     * Test to see if the property is many-valued. Returns if this is a
     * many-valued property, otherwise returns .
     * 
     * @return bool
     * @since ^
     **/
    function isMany(){}

}
class SDO_Model_ReflectionDataObject {
    /**
     * Get a string describing the SDO_DataObject. The default behaviour is
     * to print the output, but if is specified for return, it is returned as
     * a string.
     * 
     * @param SDO_Model_ReflectionDataObject $rdo An
     *   SDO_Model_ReflectionDataObject.
     * @param bool $return If , return the output as a string, otherwise
     *   print it.
     * @return mixed
     * @since ^
     **/
    function export($rdo, $return){}

    /**
     * Get the SDO_Model_Property that contains the SDO_DataObject. This
     * method is used to navigate up to the parent's property which contains
     * the data object which has been reflected upon.
     * 
     * @return SDO_Model_Property
     * @since ^
     **/
    function getContainmentProperty(){}

    /**
     * Get the instance properties for the SDO_DataObject. The instance
     * properties consist of all the properties defined on the data object's
     * type, plus any instance properties from open content (if the data
     * object is an open type).
     * 
     * @return array
     * @since ^
     **/
    function getInstanceProperties(){}

    /**
     * Returns the SDO_Model_Type for the SDO_DataObject. The SDO_Model_Type
     * holds all the information about the data object's type, such as
     * namespace URI, type name, whether it is a primitive data type, and so
     * on.
     * 
     * @return SDO_Model_Type
     * @since ^
     **/
    function getType(){}

    /**
     * Construct an SDO_Model_ReflectionDataObject to reflect on an
     * SDO_DataObject. Reflecting on an SDO_DataObject gives access to
     * information about its model. The model contains information such as
     * the data object's type, and whether that type is sequenced (preserves
     * ordering across properties) or open (each instance can have its model
     * extended). The model also holds information about the data object's
     * properties, any default values they may have, and so on.
     * 
     * @param SDO_DataObject $data_object The SDO_DataObject being
     *   reflected upon.
     * @return SDO_Model_ReflectionDataObject
     * @since ^
     **/
    function __construct($data_object){}

}
class SDO_Model_Type {
    /**
     * Get the base type for this type. Returns the SDO_Model_Type for the
     * base type if this type inherits from another, otherwise returns . An
     * example of when base types occur is when a type defined in XML schema
     * inherits from another type by using <extension base="..."> .
     * 
     * @return SDO_Model_Type
     * @since ^
     **/
    function getBaseType(){}

    /**
     * Returns the name of the type. The combination of type name and
     * namespace URI is used to uniquely identify the type.
     * 
     * @return string
     * @since ^
     **/
    function getName(){}

    /**
     * Returns the namespace URI of the type. The combination of namespace
     * URI and type name is used to uniquely identify the type.
     * 
     * @return string
     * @since ^
     **/
    function getNamespaceURI(){}

    /**
     * Get an array of SDO_Model_Property objects describing the properties
     * defined for the SDO_Model_Type. Each SDO_Model_Property holds
     * information such as the property name, default value, and so on.
     * 
     * @return array
     * @since ^
     **/
    function getProperties(){}

    /**
     * Get an SDO_Model_Property of the type, identified by its property
     * index or property name.
     * 
     * @param mixed $identifier The property index or property name.
     * @return SDO_Model_Property
     * @since ^
     **/
    function getProperty($identifier){}

    /**
     * Test to see if this SDO_Model_Type is an abstract data type. Returns
     * if this type is abstract, that is, no SDO_DataObject of this type can
     * be instantiated, though other types may inherit from it.
     * 
     * @return bool
     * @since ^
     **/
    function isAbstractType(){}

    /**
     * Test to see if this SDO_Model_Type is a primitive data type. Returns
     * if this type is a primitive data type, otherwise returns .
     * 
     * @return bool
     * @since ^
     **/
    function isDataType(){}

    /**
     * Test for an SDO_DataObject being an instance of this SDO_Model_Type.
     * Returns if the SDO_DataObject provided is an instance of this
     * SDO_Model_Type, or a derived type, otherwise returns .
     * 
     * @param SDO_DataObject $data_object The SDO_DataObject to be tested.
     * @return bool
     * @since ^
     **/
    function isInstance($data_object){}

    /**
     * Test to see if this type is open. Returns if this type is open,
     * otherwise returns . An SDO_DataObject whose type is open can have
     * properties added to them which are not described by the type. This
     * capability is used to support working with XML documents whose schema
     * support open content, such as that defined by an <xsd:any> element.
     * 
     * @return bool
     * @since ^
     **/
    function isOpenType(){}

    /**
     * Test to see if this is a sequenced type. Returns if this type is
     * sequence, otherwise returns . Sequenced types can have the ordering
     * across properties preserved and can contain unstructured text. For
     * more information on sequenced types see the section on Working with
     * Sequenced Data Objects.
     * 
     * @return bool
     * @since ^
     **/
    function isSequencedType(){}

}
class SDO_Sequence {
    /**
     * Return the property for the specified sequence index.
     * 
     * @param int $sequence_index The position of the element in the
     *   sequence.
     * @return SDO_Model_Property
     * @since ^
     **/
    function getProperty($sequence_index){}

    /**
     * Insert a new element at a specified position in the sequence. All
     * subsequent sequence items are moved up.
     * 
     * @param mixed $value The new value to be inserted. This can be either
     *   a primitive or an SDO_DataObject.
     * @param int $sequenceIndex The position at which to insert the new
     *   element. Default is NULL, which results in the new value being
     *   appended to the sequence.
     * @param mixed $propertyIdentifier Either a property index, a property
     *   name, or an SDO_Model_Property, used to identify a property in the
     *   sequence's corresponding SDO_DataObject. A value of NULL signifies
     *   unstructured text.
     * @return void
     * @since ^
     **/
    function insert($value, $sequenceIndex, $propertyIdentifier){}

    /**
     * Modify the position of the item in the sequence, without altering the
     * value of the property in the SDO_DataObject.
     * 
     * @param int $toIndex The destination sequence index. If this index is
     *   less than zero or greater than the size of the sequence then the
     *   value is appended.
     * @param int $fromIndex The source sequence index.
     * @return void
     * @since ^
     **/
    function move($toIndex, $fromIndex){}

}
/**
 * The Seekable iterator.
 **/
interface SeekableIterator extends Iterator {
    /**
     * Seeks to a given position in the iterator.
     * 
     * @param int $position The position to seek to.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function seek($position);

}
/**
 * Interface for customized serializing.
 * 
 * Classes that implement this interface no longer support and . The
 * method serialize is called whenever an instance needs to be
 * serialized. This does not invoke __destruct() or has any other side
 * effect unless programmed inside the method. When the data is
 * unserialized the class is known and the appropriate unserialize()
 * method is called as a constructor instead of calling __construct(). If
 * you need to execute the standard constructor you may do so in the
 * method.
 **/
interface Serializable {
    /**
     * Should return the string representation of the object.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function serialize();

    /**
     * Called during unserialization of the object.
     * 
     * @param string $serialized The string representation of the object.
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function unserialize($serialized);

}
/**
 * Represents an element in XML document.
 **/
class SimpleXMLElement {
    /**
     * Adds an attribute to the SimpleXML element.
     * 
     * @param string $name The name of the attribute to add.
     * @param string $value The value of the attribute.
     * @param string $namespace If specified, the namespace to which the
     *   attribute belongs.
     * @return void
     * @since PHP 5 >= 5.1.3
     **/
    function addAttribute($name, $value, $namespace){}

    /**
     * Adds a child element to the node and returns a SimpleXMLElement of the
     * child.
     * 
     * @param string $name The name of the child element to add.
     * @param string $value If specified, the value of the child element.
     * @param string $namespace If specified, the namespace to which the
     *   child element belongs.
     * @return SimpleXMLElement
     * @since PHP 5 >= 5.1.3
     **/
    function addChild($name, $value, $namespace){}

    /**
     * The asXML method formats the parent object's data in XML version 1.0.
     * 
     * @param string $filename If specified, the function writes the data
     *   to the file rather than returning it.
     * @return mixed
     * @since PHP 5 >= 5.0.1
     **/
    function asXML($filename){}

    /**
     * This function provides the attributes and values defined within an xml
     * tag.
     * 
     * @param string $ns An optional namespace for the retrieved attributes
     * @param bool $is_prefix Default to
     * @return SimpleXMLElement
     * @since PHP 5 >= 5.0.1
     **/
    function attributes($ns, $is_prefix){}

    /**
     * This method finds the children of an element. The result follows
     * normal iteration rules.
     * 
     * @param string $ns An XML namespace.
     * @param bool $is_prefix If {@link is_prefix} is , {@link ns} will be
     *   regarded as a prefix. If , {@link ns} will be regarded as a
     *   namespace URL.
     * @return SimpleXMLElement
     * @since PHP 5 >= 5.0.1
     **/
    function children($ns, $is_prefix){}

    /**
     * This method counts the number of children of an element.
     * 
     * @return integer
     * @since PHP 5 >= 5.3.0
     **/
    function count(){}

    /**
     * Returns namespaces declared in document
     * 
     * @param bool $recursive If specified, returns all namespaces declared
     *   in parent and child nodes. Otherwise, returns only namespaces
     *   declared in root node.
     * @return array
     * @since PHP 5 >= 5.1.2
     **/
    function getDocNamespaces($recursive){}

    /**
     * Gets the name of the XML element.
     * 
     * @return string
     * @since PHP 5 >= 5.1.3
     **/
    function getName(){}

    /**
     * Returns namespaces used in document
     * 
     * @param bool $recursive If specified, returns all namespaces used in
     *   parent and child nodes. Otherwise, returns only namespaces used in
     *   root node.
     * @return array
     * @since PHP 5 >= 5.1.2
     **/
    function getNamespaces($recursive){}

    /**
     * Creates a prefix/ns context for the next XPath query. In particular,
     * this is helpful if the provider of the given XML document alters the
     * namespace prefixes. registerXPathNamespace will create a prefix for
     * the associated namespace, allowing one to access nodes in that
     * namespace without the need to change code to allow for the new
     * prefixes dictated by the provider.
     * 
     * @param string $prefix The namespace prefix to use in the XPath query
     *   for the namespace given in {@link ns}.
     * @param string $ns The namespace to use for the XPath query. This
     *   must match a namespace in use by the XML document or the XPath query
     *   using {@link prefix} will not return any results.
     * @return bool
     * @since PHP 5 >= 5.2.0
     **/
    function registerXPathNamespace($prefix, $ns){}

    /**
     * The xpath method searches the SimpleXML node for children matching the
     * XPath {@link path}.
     * 
     * @param string $path An XPath path
     * @return array
     * @since PHP 5 >= 5.2.0
     **/
    function xpath($path){}

}
/**
 * The SimpleXMLIterator provides recursive iteration over all nodes of a
 * object.
 **/
class SimpleXMLIterator extends SimpleXMLElement implements RecursiveIterator, Traversable, Iterator, Countable {
    /**
     * This method returns the current element as a SimpleXMLIterator object
     * or .
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.3
     **/
    function current(){}

    /**
     * This method returns a SimpleXMLIterator object containing sub-elements
     * of the current SimpleXMLIterator element.
     * 
     * @return object
     * @since PHP 5 >= 5.1.3
     **/
    function getChildren(){}

    /**
     * This method checks whether the current SimpleXMLIterator element has
     * sub-elements.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.3
     **/
    function hasChildren(){}

    /**
     * This method gets the XML tag name of the current element.
     * 
     * @return mixed
     * @since PHP 5 >= 5.1.3
     **/
    function key(){}

    /**
     * This method moves the SimpleXMLIterator to the next element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.3
     **/
    function next(){}

    /**
     * This method rewinds the SimpleXMLIterator to the first element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.3
     **/
    function rewind(){}

    /**
     * This method checks if the current element is valid after calls to
     * SimpleXMLIterator::rewind or SimpleXMLIterator::next.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.3
     **/
    function valid(){}

}
/**
 * The SoapClient class provides a client for , servers. It can be used
 * in WSDL or non-WSDL mode.
 **/
class SoapClient {
    /**
     * SoapClient::SoapClient
     * 
     * @param mixed $wsdl
     * @param array $options
     * @since PHP 5 >= 5.0.1
     **/
    function SoapClient($wsdl, $options){}

    /**
     * This method is deprecated. Use instead of it.
     * 
     * @param string $function_name
     * @param string $arguments
     * @return mixed
     * @since PHP 5 >= 5.0.1
     **/
    function __call($function_name, $arguments){}

    /**
     * Performs SOAP request over HTTP.
     * 
     * This method can be overridden in subclasses to implement different
     * transport layers, perform additional XML processing or other purpose.
     * 
     * @param string $request The XML SOAP request.
     * @param string $location The URL to request.
     * @param string $action The SOAP action.
     * @param int $version The SOAP version.
     * @param int $one_way If one_way is set to 1, this method returns
     *   nothing. Use this where a response is not expected.
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __doRequest($request, $location, $action, $version, $one_way){}

    /**
     * Returns an array of functions described in the WSDL for the Web
     * service.
     * 
     * @return array
     * @since PHP 5 >= 5.0.1
     **/
    function __getFunctions(){}

    /**
     * Returns the XML sent in the last SOAP request.
     * 
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __getLastRequest(){}

    /**
     * Returns the SOAP headers from the last request.
     * 
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __getLastRequestHeaders(){}

    /**
     * Returns the XML received in the last SOAP response.
     * 
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __getLastResponse(){}

    /**
     * Returns the SOAP headers from the last response.
     * 
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __getLastResponseHeaders(){}

    /**
     * Returns an array of types described in the WSDL for the Web service.
     * 
     * @return array
     * @since PHP 5 >= 5.0.1
     **/
    function __getTypes(){}

    /**
     * Defines a cookie to be sent along with the SOAP requests.
     * 
     * @param string $name The name of the cookie.
     * @param string $value The value of the cookie. If not specified, the
     *   cookie will be deleted.
     * @return void
     * @since PHP 5 >= 5.0.4
     **/
    function __setCookie($name, $value){}

    /**
     * Sets the endpoint URL that will be touched by following SOAP requests.
     * This is equivalent to specifying the location option when constructing
     * the SoapClient.
     * 
     * @param string $new_location The new endpoint URL.
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __setLocation($new_location){}

    /**
     * Defines headers to be sent along with the SOAP requests.
     * 
     * @param mixed $soapheaders The headers to be set. It could be
     *   SoapHeader object or array of SoapHeader objects. If not specified
     *   or set to , the headers will be deleted.
     * @return bool
     * @since PHP 5 >= 5.0.5
     **/
    function __setSoapHeaders($soapheaders){}

    /**
     * This is a low level API function that is used to make a SOAP call.
     * Usually, in WSDL mode, SOAP functions can be called as methods of the
     * SoapClient object. This method is useful in non-WSDL mode when
     * soapaction is unknown, uri differs from the default or when sending
     * and/or receiving SOAP Headers.
     * 
     * On error, a call to a SOAP function can cause PHP to throw exceptions
     * or return a SoapFault object if exceptions are disabled. To check if
     * the function call failed to catch the SoapFault exceptions, check the
     * result with {@link is_soap_fault}.
     * 
     * @param string $function_name The name of the SOAP function to call.
     * @param array $arguments An array of the arguments to pass to the
     *   function. This can be either an ordered or an associative array.
     * @param array $options An associative array of options to pass to the
     *   client. The location option is the URL of the remote Web service.
     *   The uri option is the target namespace of the SOAP service. The
     *   soapaction option is the action to call.
     * @param mixed $input_headers An array of headers to be sent along
     *   with the SOAP request.
     * @param array $output_headers If supplied, this array will be filled
     *   with the headers from the SOAP response.
     * @return mixed
     * @since PHP 5 >= 5.0.1
     **/
    function __soapCall($function_name, $arguments, $options, $input_headers, &$output_headers){}

}
/**
 * Represents a SOAP fault.
 **/
class SoapFault extends Exception {
    /**
     * This class is used to send SOAP fault responses from the PHP handler.
     * {@link faultcode}, {@link faultstring}, {@link faultactor} and {@link
     * details} are standard elements of a SOAP Fault.
     * 
     * @param string $faultcode The error code of the SoapFault.
     * @param string $faultstring The error message of the SoapFault.
     * @param string $faultactor A string identifying the actor that caused
     *   the error.
     * @param string $detail More details about the cause of the error.
     * @param string $faultname Can be used to select the proper fault
     *   encoding from WSDL.
     * @param string $headerfault Can be used during SOAP header handling
     *   to report an error in the response header.
     * @since PHP 5 >= 5.0.1
     **/
    function SoapFault($faultcode, $faultstring, $faultactor, $detail, $faultname, $headerfault){}

    /**
     * SoapFault::SoapFault
     * 
     * @param string $faultcode
     * @param string $faultstring
     * @param string $faultactor
     * @param string $detail
     * @param string $faultname
     * @param string $headerfault
     * @since PHP 5 >= 5.0.1
     **/
    function __construct($faultcode, $faultstring, $faultactor, $detail, $faultname, $headerfault){}

    /**
     * Returns a string representation of the SoapFault.
     * 
     * @return string
     * @since PHP 5 >= 5.0.1
     **/
    function __toString(){}

}
/**
 * Represents a SOAP header.
 **/
class SoapHeader {
    /**
     * Constructs a new SoapHeader object.
     * 
     * @param string $namespace The namespace of the SOAP header element.
     * @param string $name The name of the SoapHeader object.
     * @param mixed $data A SOAP header's content. It can be a PHP value or
     *   a SoapVar object.
     * @param bool $mustunderstand Value of the mustUnderstand attribute of
     *   the SOAP header element.
     * @param string $actor Value of the actor attribute of the SOAP header
     *   element.
     * @since PHP 5 >= 5.0.1
     **/
    function SoapHeader($namespace, $name, $data, $mustunderstand, $actor){}

    /**
     * SoapHeader::SoapHeader
     * 
     * @param string $namespace
     * @param string $name
     * @param mixed $data
     * @param bool $mustunderstand
     * @param string $actor
     * @since PHP 5 >= 5.0.1
     **/
    function __construct($namespace, $name, $data, $mustunderstand, $actor){}

}
/**
 * Represents parameter to a SOAP call.
 **/
class SoapParam {
    /**
     * Constructs a new SoapParam object.
     * 
     * @param mixed $data The data to pass or return. This parameter can be
     *   passed directly as PHP value, but in this case it will be named as
     *   paramN and the SOAP service may not understand it.
     * @param string $name The parameter name.
     * @since PHP 5 >= 5.0.1
     **/
    function SoapParam($data, $name){}

    /**
     * SoapParam::SoapParam
     * 
     * @param mixed $data
     * @param string $name
     * @since PHP 5 >= 5.0.1
     **/
    function __construct($data, $name){}

}
/**
 * The SoapServer class provides a server for the and protocols. It can
 * be used with or without a WSDL service description.
 **/
class SoapServer {
    /**
     * Exports one or more functions for remote clients
     * 
     * @param string $functions To export one function, pass the function
     *   name into this parameter as a string. To export several functions,
     *   pass an array of function names. To export all the functions, pass a
     *   special constant SOAP_FUNCTIONS_ALL.
     * @return void
     * @since PHP 5 >= 5.0.1
     **/
    function addFunction($functions){}

    /**
     * Adds a SOAP header to be returned with the response to the current
     * request.
     * 
     * @param SoapHeader $object The header to be returned.
     * @return void
     * @since PHP 5 >= 5.0.1
     **/
    function addSoapHeader($object){}

    /**
     * Sends a response to the client of the current request indicating an
     * error.
     * 
     * @param string $code The error code to return
     * @param string $string A brief description of the error
     * @param string $actor A string identifying the actor that caused the
     *   fault.
     * @param string $details More details of the fault
     * @param string $name The name of the fault. This can be used to
     *   select a name from a WSDL file.
     * @return void
     * @since PHP 5 >= 5.0.1
     **/
    function fault($code, $string, $actor, $details, $name){}

    /**
     * Returns a list of the defined functions in the SoapServer object. This
     * method returns the list of all functions added by
     * SoapServer::addFunction or SoapServer::setClass.
     * 
     * @return array
     * @since PHP 5 >= 5.0.1
     **/
    function getFunctions(){}

    /**
     * Processes a SOAP request, calls necessary functions, and sends a
     * response back.
     * 
     * @param string $soap_request The SOAP request. If this argument is
     *   omitted, the request is assumed to be in the raw POST data of the
     *   HTTP request.
     * @return void
     * @since PHP 5 >= 5.0.1
     **/
    function handle($soap_request){}

    /**
     * Exports all methods from specified class.
     * 
     * The object can be made persistent across request for a given PHP
     * session with the SoapServer::setPersistence method.
     * 
     * @param string $class_name The name of the exported class.
     * @param string $args These optional parameters will be passed to the
     *   default class constructor during object creation.
     * @return void
     * @since PHP 5 >= 5.0.1
     **/
    function setClass($class_name, $args){}

    /**
     * This sets a specific object as the handler for SOAP requests, rather
     * than just a class as in SoapServer::setClass.
     * 
     * @param string $object The object to handle the requests.
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function setObject($object){}

    /**
     * This function allows saving data between requests in a PHP session. It
     * works only with a server that exports functions from a class with
     * SoapServer::setClass or SoapServer::setObject.
     * 
     * @param string $mode One of the SOAP_PERSISTENCE_XXX constants.
     *   SOAP_PERSISTENCE_REQUEST - persist the object for the duration of a
     *   request. SOAP_PERSISTENCE_SESSION - persist the object for the
     *   duration of a session.
     * @return void
     * @since PHP 5 >= 5.1.2
     **/
    function setPersistence($mode){}

    /**
     * This constructor allows the creation of SoapServer objects in WSDL or
     * non-WSDL mode.
     * 
     * @param mixed $wsdl To use the SoapServer in WSDL mode, pass the URI
     *   of a WSDL file. Otherwise, pass and set the uri option to the target
     *   namespace for the server.
     * @param array $options Allow setting a default SOAP version
     *   (soap_version), internal character encoding (encoding), and actor
     *   URI (actor). The classmap option can be used to map some WSDL types
     *   to PHP classes. This option must be an array with WSDL types as keys
     *   and names of PHP classes as values. The typemap option is an array
     *   of type mappings. Type mapping is an array with keys type_name,
     *   type_ns (namespace URI), from_xml (callback accepting one string
     *   parameter) and to_xml (callback accepting one object parameter). The
     *   cache_wsdl option is one of WSDL_CACHE_NONE, WSDL_CACHE_DISK,
     *   WSDL_CACHE_MEMORY or WSDL_CACHE_BOTH. There is also a features
     *   option which can be set to SOAP_WAIT_ONE_WAY_CALLS,
     *   SOAP_SINGLE_ELEMENT_ARRAYS, SOAP_USE_XSI_ARRAY_TYPE.
     * @since PHP 5 >= 5.0.1
     **/
    function SoapServer($wsdl, $options){}

    /**
     * SoapServer::SoapServer
     * 
     * @param mixed $wsdl
     * @param array $options
     * @since PHP 5 >= 5.0.1
     **/
    function __construct($wsdl, $options){}

}
/**
 * A class representing a variable or object for use with SOAP services.
 **/
class SoapVar {
    /**
     * Constructs a new SoapVar object.
     * 
     * @param string $data The data to pass or return.
     * @param string $encoding The encoding ID, one of the XSD_...
     *   constants.
     * @param string $type_name The type name.
     * @param string $type_namespace The type namespace.
     * @param string $node_name The XML node name.
     * @param string $node_namespace The XML node namespace.
     * @since PHP 5 >= 5.0.1
     **/
    function SoapVar($data, $encoding, $type_name, $type_namespace, $node_name, $node_namespace){}

    /**
     * SoapVar::SoapVar
     * 
     * @param string $data
     * @param string $encoding
     * @param string $type_name
     * @param string $type_namespace
     * @param string $node_name
     * @param string $node_namespace
     * @since PHP 5 >= 5.0.1
     **/
    function __construct($data, $encoding, $type_name, $type_namespace, $node_name, $node_namespace){}

}
/**
 * Used to send requests to a Solr server. Currently, cloning and
 * serialization of SolrClient instances is not supported.
 **/
class SolrClient {
    /**
     * This method adds a document to the index.
     * 
     * @param SolrInputDocument $doc The SolrInputDocument instance.
     * @param bool $allowDups If duplicates will be overwritten.
     * @param int $commitWithin Number of milliseconds within which to
     *   commit this document. Available since Solr 1.4
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function addDocument($doc, $allowDups, $commitWithin){}

    /**
     * Adds a collection of documents to the index.
     * 
     * @param array $docs An array containing the collection of
     *   SolrInputDocument instances. This array must be an actual variable.
     * @param bool $allowDups If duplicates will be overwritten.
     * @param int $commitWithin Number of milliseconds within which to
     *   commit the documents to the index. This was only available since
     *   Solr 1.4
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function addDocuments($docs, $allowDups, $commitWithin){}

    /**
     * This method finalizes all add/deletes made to the index.
     * 
     * @param int $maxSegments Optimizes down to at most this number of
     *   segments. Since Solr 1.3
     * @param bool $waitFlush Block until index changes are flushed to
     *   disk.
     * @param bool $waitSearcher Block until a new searcher is opened and
     *   registered as the main query searcher, making the changes visible.
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function commit($maxSegments, $waitFlush, $waitSearcher){}

    /**
     * Deletes the document with the specified ID. Where ID is the value of
     * the uniqueKey field declared in the schema
     * 
     * @param string $id The value of the uniqueKey field declared in the
     *   schema
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function deleteById($id){}

    /**
     * Deletes a collection of documents with the specified set of ids.
     * 
     * @param array $ids An array of IDs representing the uniqueKey field
     *   declared in the schema for each document to be deleted. This must be
     *   an actual php variable.
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function deleteByIds($ids){}

    /**
     * Removes all documents matching any of the queries
     * 
     * @param array $queries The array of queries. This must be an actual
     *   php variable.
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function deleteByQueries($queries){}

    /**
     * Deletes all documents matching the given query.
     * 
     * @param string $query The query
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function deleteByQuery($query){}

    /**
     * Returns the debug data for the last connection attempt
     * 
     * @return string
     * @since PECL solr >= 0.9.7
     **/
    function getDebug(){}

    /**
     * Returns the client options set internally. Very useful for debugging.
     * The values returned are readonly and can only be set when the object
     * is instantiated.
     * 
     * @return array
     * @since PECL solr >= 0.9.6
     **/
    function getOptions(){}

    /**
     * Defragments the index for faster search performance.
     * 
     * @param int $maxSegments Optimizes down to at most this number of
     *   segments. Since Solr 1.3
     * @param bool $waitFlush Block until index changes are flushed to
     *   disk.
     * @param bool $waitSearcher Block until a new searcher is opened and
     *   registered as the main query searcher, making the changes visible.
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function optimize($maxSegments, $waitFlush, $waitSearcher){}

    /**
     * Checks if the Solr server is still alive. Sends a HEAD request to the
     * Apache Solr server.
     * 
     * @return SolrPingResponse
     * @since PECL solr >= 0.9.2
     **/
    function ping(){}

    /**
     * Sends a query to the server.
     * 
     * @param SolrParams $query A SolrParam object. It is recommended to
     *   use SolrQuery for advanced queries.
     * @return SolrQueryResponse
     * @since PECL solr >= 0.9.2
     **/
    function query($query){}

    /**
     * Sends a raw XML update request to the server
     * 
     * @param string $raw_request An XML string with the raw request to the
     *   server.
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function request($raw_request){}

    /**
     * Rollbacks all add/deletes made to the index since the last commit. It
     * neither calls any event listeners nor creates a new searcher.
     * 
     * @return SolrUpdateResponse
     * @since PECL solr >= 0.9.2
     **/
    function rollback(){}

    /**
     * Sets the response writer used to prepare the response from Solr
     * 
     * @param string $responseWriter One of the following : - xml -
     *   phpnative
     * @return void
     * @since PECL solr >= 0.9.11
     **/
    function setResponseWriter($responseWriter){}

    /**
     * Changes the specified servlet type to a new value
     * 
     * @param int $type One of the following : -
     *   SolrClient::SEARCH_SERVLET_TYPE - SolrClient::UPDATE_SERVLET_TYPE -
     *   SolrClient::THREADS_SERVLET_TYPE - SolrClient::PING_SERVLET_TYPE -
     *   SolrClient::TERMS_SERVLET_TYPE
     * @param string $value The new value for the servlet
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function setServlet($type, $value){}

    /**
     * Checks the threads status
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function threads(){}

    /**
     * Constructor for the SolrClient object
     * 
     * @param array $clientOptions This is an array containing one of the
     *   following keys : - secure (Boolean value indicating whether or not
     *   to connect in secure mode) - hostname (The hostname for the Solr
     *   server) - port (The port number) - path (The path to solr) - wt (The
     *   name of the response writer e.g. xml, phpnative) - login (The
     *   username used for HTTP Authentication, if any) - password (The HTTP
     *   Authentication password) - proxy_host (The hostname for the proxy
     *   server, if any) - proxy_port (The proxy port) - proxy_login (The
     *   proxy username) - proxy_password (The proxy password) - timeout
     *   (This is maximum time in seconds allowed for the http data transfer
     *   operation. Default is 30 seconds) - ssl_cert (File name to a
     *   PEM-formatted file containing the private key + private certificate
     *   (concatenated in that order) ) - ssl_key (File name to a
     *   PEM-formatted private key file only) - ssl_keypassword (Password for
     *   private key) - ssl_cainfo (Name of file holding one or more CA
     *   certificates to verify peer with) - ssl_capath (Name of directory
     *   holding multiple CA certificates to verify peer with ) Please note
     *   the if the ssl_cert file only contains the private certificate, you
     *   have to specify a separate ssl_key file The ssl_keypassword option
     *   is required if the ssl_cert or ssl_key options are set.
     * @since PECL solr >= 0.9.2
     **/
    function __construct($clientOptions){}

    /**
     * Destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * An exception thrown when there is an error while making a request to
 * the server from the client.
 **/
class SolrClientException extends SolrException {
    /**
     * Returns internal information where the Exception was thrown.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getInternalInfo(){}

}
/**
 * Represents a Solr document retrieved from a query response.
 **/
class SolrDocument implements ArrayAccess, Iterator, Traversable, Serializable {
    /**
     * This method adds a field to the SolrDocument instance.
     * 
     * @param string $fieldName The name of the field
     * @param string $fieldValue The value of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function addField($fieldName, $fieldValue){}

    /**
     * Resets the current object. Discards all the fields and resets the
     * document boost to zero.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function clear(){}

    /**
     * Retrieves the current field
     * 
     * @return SolrDocumentField
     * @since PECL solr >= 0.9.2
     **/
    function current(){}

    /**
     * Removes a field from the document.
     * 
     * @param string $fieldName Name of the field
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function deleteField($fieldName){}

    /**
     * Checks if the requested field as a valid fieldname in the document.
     * 
     * @param string $fieldName The name of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function fieldExists($fieldName){}

    /**
     * Retrieves a field by name.
     * 
     * @param string $fieldName Name of the field.
     * @return SolrDocumentField
     * @since PECL solr >= 0.9.2
     **/
    function getField($fieldName){}

    /**
     * Returns the number of fields in this document. Multi-value fields are
     * only counted once.
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getFieldCount(){}

    /**
     * Returns an array of fields names in the document.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFieldNames(){}

    /**
     * Returns a SolrInputDocument equivalent of the object. This is useful
     * if one wishes to resubmit/update a document retrieved from a query.
     * 
     * @return SolrInputDocument
     * @since PECL solr >= 0.9.2
     **/
    function getInputDocument(){}

    /**
     * Retrieves the current key.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function key(){}

    /**
     * Merges source to the current SolrDocument.
     * 
     * @param SolrDocument $sourceDoc The source document.
     * @param bool $overwrite If this is then fields with the same name in
     *   the destination document will be overwritten.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function merge($sourceDoc, $overwrite){}

    /**
     * Moves the internal pointer to the next field.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function next(){}

    /**
     * Checks if a particular field exists. This is used when the object is
     * treated as an array.
     * 
     * @param string $fieldName The name of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function offsetExists($fieldName){}

    /**
     * This is used to retrieve the field when the object is treated as an
     * array.
     * 
     * @param string $fieldName The name of the field.
     * @return SolrDocumentField
     * @since PECL solr >= 0.9.2
     **/
    function offsetGet($fieldName){}

    /**
     * Used when the object is treated as an array to add a field to the
     * document.
     * 
     * @param string $fieldName The name of the field.
     * @param string $fieldValue The value for this field.
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function offsetSet($fieldName, $fieldValue){}

    /**
     * Removes a field from the document.
     * 
     * @param string $fieldName The name of the field.
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function offsetUnset($fieldName){}

    /**
     * This is an alias to SolrDocument::clear()
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function reset(){}

    /**
     * Resets the internal pointer to the beginning.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function rewind(){}

    /**
     * Used for custom serialization.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function serialize(){}

    /**
     * The fields are rearranged according to the specified criteria and sort
     * direction Fields can be sorted by boost values, field names and number
     * of values. The sortOrderBy parameter must be one of : *
     * SolrDocument::SORT_FIELD_NAME * SolrDocument::SORT_FIELD_BOOST_VALUE *
     * SolrDocument::SORT_FIELD_VALUE_COUNT The sortDirection can be one of :
     * * SolrDocument::SORT_DEFAULT * SolrDocument::SORT_ASC *
     * SolrDocument::SORT_DESC The default way is to sort in ascending order.
     * 
     * @param int $sortOrderBy The sort criteria.
     * @param int $sortDirection The sort direction.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function sort($sortOrderBy, $sortDirection){}

    /**
     * Returns an array representation of the document.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function toArray(){}

    /**
     * Custom serialization of SolrDocument objects
     * 
     * @param string $serialized An XML representation of the document.
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function unserialize($serialized){}

    /**
     * Checks if the current position internally is still valid. It is used
     * during foreach operations.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function valid(){}

    /**
     * Creates a copy of a SolrDocument object. Not to be called directly.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __clone(){}

    /**
     * Constructor for SolrDocument
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor for SolrDocument.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

    /**
     * Magic method for accessing the field as a property.
     * 
     * @param string $fieldName The name of the field.
     * @return SolrDocumentField
     * @since PECL solr >= 0.9.2
     **/
    function __get($fieldName){}

    /**
     * Checks if a field exists
     * 
     * @param string $fieldName Name of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function __isset($fieldName){}

    /**
     * Adds another field to the document. Used to set the fields as new
     * properties.
     * 
     * @param string $fieldName Name of the field.
     * @param string $fieldValue Field value.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function __set($fieldName, $fieldValue){}

    /**
     * Removes a field from the document when the field is access as an
     * object property.
     * 
     * @param string $fieldName The name of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function __unset($fieldName){}

}
/**
 * This represents a field in a Solr document. All its properties are
 * read-only.
 **/
class SolrDocumentField {
    /**
     * Constructor.
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * This is the base class for all exception thrown by the Solr extension
 * classes.
 **/
class SolrException extends Exception {
    /**
     * Returns internal information where the Exception was thrown.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getInternalInfo(){}

}
/**
 * Represents a response from the solr server.
 **/
class SolrGenericResponse extends SolrResponse {
    /**
     * Constructor
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * This object is thrown when an illeglal or invalid argument is passed
 * to a method.
 **/
class SolrIllegalArgumentException extends SolrException {
    /**
     * Returns internal information where the Exception was thrown.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getInternalInfo(){}

}
/**
 * This object is thrown when an illegal or unsupported operation is
 * performed on an object.
 **/
class SolrIllegalOperationException extends SolrException {
    /**
     * Returns internal information where the Exception was thrown.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getInternalInfo(){}

}
/**
 * This class represents a Solr document that is about to be submitted to
 * the Solr index.
 **/
class SolrInputDocument {
    /**
     * For multi-value fields, if a valid boost value is specified, the
     * specified value will be multiplied by the current boost value for this
     * field.
     * 
     * @param string $fieldName The name of the field
     * @param string $fieldValue The value for the field.
     * @param float $fieldBoostValue The index time boost for the field.
     *   Though this cannot be negative, you can still pass values less than
     *   1.0 but they must be greater than zero.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function addField($fieldName, $fieldValue, $fieldBoostValue){}

    /**
     * Resets the document by dropping all the fields and resets the document
     * boost to zero.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function clear(){}

    /**
     * Removes a field from the document.
     * 
     * @param string $fieldName The name of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function deleteField($fieldName){}

    /**
     * Checks if a field exists
     * 
     * @param string $fieldName Name of the field.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function fieldExists($fieldName){}

    /**
     * Retrieves the current boost value for the document.
     * 
     * @return float
     * @since PECL solr >= 0.9.2
     **/
    function getBoost(){}

    /**
     * Retrieves a field in the document.
     * 
     * @param string $fieldName The name of the field.
     * @return SolrDocumentField
     * @since PECL solr >= 0.9.2
     **/
    function getField($fieldName){}

    /**
     * Retrieves the boost value for a particular field.
     * 
     * @param string $fieldName The name of the field.
     * @return float
     * @since PECL solr >= 0.9.2
     **/
    function getFieldBoost($fieldName){}

    /**
     * Returns the number of fields in the document.
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getFieldCount(){}

    /**
     * Returns an array containing all the fields in the document.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFieldNames(){}

    /**
     * Merges one input document into another.
     * 
     * @param SolrInputDocument $sourceDoc The source document.
     * @param bool $overwrite If this is it will replace matching fields in
     *   the destination document.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function merge($sourceDoc, $overwrite){}

    /**
     * This is an alias of SolrInputDocument::clear
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function reset(){}

    /**
     * Sets the boost value for this document.
     * 
     * @param float $documentBoostValue The index-time boost value for this
     *   document.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function setBoost($documentBoostValue){}

    /**
     * Sets the index-time boost value for a field. This replaces the current
     * boost value for this field.
     * 
     * @param string $fieldName The name of the field.
     * @param float $fieldBoostValue The index time boost value.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function setFieldBoost($fieldName, $fieldBoostValue){}

    /**
     * The fields are rearranged according to the specified criteria and sort
     * direction Fields can be sorted by boost values, field names and number
     * of values. The $order_by parameter must be one of : *
     * SolrInputDocument::SORT_FIELD_NAME *
     * SolrInputDocument::SORT_FIELD_BOOST_VALUE *
     * SolrInputDocument::SORT_FIELD_VALUE_COUNT The sort direction can be
     * one of : * SolrInputDocument::SORT_DEFAULT *
     * SolrInputDocument::SORT_ASC * SolrInputDocument::SORT_DESC
     * 
     * @param int $sortOrderBy The sort criteria
     * @param int $sortDirection The sort direction
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function sort($sortOrderBy, $sortDirection){}

    /**
     * Returns an array representation of the input document.
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function toArray(){}

    /**
     * Should not be called directly. It is used to create a deep copy of a
     * SolrInputDocument.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __clone(){}

    /**
     * Constructor.
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * Represents a collection of name-value pairs sent to the Solr server
 * during a request.
 **/
class SolrModifiableParams extends SolrParams implements Serializable {
    /**
     * Constructor
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * This is an object whose properties can also by accessed using the
 * array syntax. All its properties are read-only.
 **/
class SolrObject implements ArrayAccess {
    /**
     * Returns an array of all the names of the properties
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getPropertyNames(){}

    /**
     * Checks if the property exists. This is used when the object is treated
     * as an array.
     * 
     * @param string $property_name The name of the property.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function offsetExists($property_name){}

    /**
     * Used to get the value of a property. This is used when the object is
     * treated as an array.
     * 
     * @param string $property_name Name of the property.
     * @return mixed
     * @since PECL solr >= 0.9.2
     **/
    function offsetGet($property_name){}

    /**
     * Sets the value for a property. This is used when the object is treated
     * as an array. This object is read-only. This should never be attempted.
     * 
     * @param string $property_name The name of the property.
     * @param string $property_value The new value.
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function offsetSet($property_name, $property_value){}

    /**
     * Sets the value for the property. This is used when the object is
     * treated as an array. This object is read-only. This should never be
     * attempted.
     * 
     * @param string $property_name The name of the property.
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function offsetUnset($property_name){}

    /**
     * Creates Solr object.
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * The destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * Represents a collection of name-value pairs sent to the Solr server
 * during a request.
 **/
class SolrParams implements Serializable {
    /**
     * This is an alias for SolrParams::addParam
     * 
     * @param string $name The name of the parameter
     * @param string $value The value of the parameter
     * @return SolrParams
     * @since PECL solr >= 0.9.2
     **/
    function add($name, $value){}

    /**
     * Adds a parameter to the object. This is used for parameters that can
     * be specified multiple times.
     * 
     * @param string $name Name of parameter
     * @param string $value Value of parameter
     * @return SolrParams
     * @since PECL solr >= 0.9.2
     **/
    function addParam($name, $value){}

    /**
     * This is an alias for SolrParams::getParam
     * 
     * @param string $param_name Then name of the parameter
     * @return mixed
     * @since PECL solr >= 0.9.2
     **/
    function get($param_name){}

    /**
     * Returns a parameter with name param_name
     * 
     * @param string $param_name The name of the parameter
     * @return mixed
     * @since PECL solr >= 0.9.2
     **/
    function getParam($param_name){}

    /**
     * Returns an array of non URL-encoded parameters
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getParams(){}

    /**
     * Returns an array on URL-encoded parameters
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getPreparedParams(){}

    /**
     * Used for custom serialization
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function serialize(){}

    /**
     * An alias of SolrParams::setParam
     * 
     * @param string $name Then name of the parameter
     * @param string $value The parameter value
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function set($name, $value){}

    /**
     * Sets the query parameter to the specified value. This is used for
     * parameters that can only be specified once. Subsequent calls with the
     * same parameter name will override the existing value
     * 
     * @param string $name Name of the parameter
     * @param string $value Value of the parameter
     * @return SolrParams
     * @since PECL solr >= 0.9.2
     **/
    function setParam($name, $value){}

    /**
     * Returns all the name-value pair parameters in the object
     * 
     * @param bool $url_encode Whether to return URL-encoded values
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function toString($url_encode){}

    /**
     * Used for custom serialization
     * 
     * @param string $serialized The serialized representation of the
     *   object
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function unserialize($serialized){}

}
/**
 * Represents a response to a ping request to the server
 **/
class SolrPingResponse extends SolrResponse {
    /**
     * Returns the response from the server. This should be empty because the
     * request as a HEAD request.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getResponse(){}

    /**
     * Constructor
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * Represents a collection of name-value pairs sent to the Solr server
 * during a request.
 **/
class SolrQuery extends SolrModifiableParams implements Serializable {
    /**
     * This method allows you to specify a field which should be treated as a
     * facet.
     * 
     * It can be used multiple times with different field names to indicate
     * multiple facet fields
     * 
     * @param string $dateField The name of the date field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addFacetDateField($dateField){}

    /**
     * Sets the facet.date.other parameter. Accepts an optional field
     * override
     * 
     * @param string $value The value to use.
     * @param string $field_override The field name for the override.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addFacetDateOther($value, $field_override){}

    /**
     * Adds another field to the facet
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addFacetField($field){}

    /**
     * Adds a facet query
     * 
     * @param string $facetQuery The facet query
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addFacetQuery($facetQuery){}

    /**
     * This method is used to used to specify a set of fields to return,
     * thereby restricting the amount of data returned in the response.
     * 
     * It should be called multiple time, once for each field name.
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addField($field){}

    /**
     * Specifies a filter query
     * 
     * @param string $fq The filter query
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addFilterQuery($fq){}

    /**
     * Maps to hl.fl. This is used to specify that highlighted snippets
     * should be generated for a particular field
     * 
     * @param string $field Name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addHighlightField($field){}

    /**
     * Maps to mlt.fl. It specifies that a field should be used for
     * similarity.
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addMltField($field){}

    /**
     * Maps to mlt.qf. It is used to specify query fields and their boosts
     * 
     * @param string $field The name of the field
     * @param float $boost Its boost value
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addMltQueryField($field, $boost){}

    /**
     * Used to control how the results should be sorted.
     * 
     * @param string $field The name of the field
     * @param int $order The sort direction. This should be either
     *   SolrQuery::ORDER_ASC or SolrQuery::ORDER_DESC.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addSortField($field, $order){}

    /**
     * Requests a return of sub results for values within the given facet.
     * Maps to the stats.facet field
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addStatsFacet($field){}

    /**
     * Maps to stats.field parameter This methods adds another stats.field
     * parameter.
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function addStatsField($field){}

    /**
     * Returns the value of the facet parameter.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getFacet(){}

    /**
     * Returns the value for the facet.date.end parameter. This method
     * accepts an optional field override
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getFacetDateEnd($field_override){}

    /**
     * Returns all the facet.date fields
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFacetDateFields(){}

    /**
     * Returns the value of the facet.date.gap parameter. It accepts an
     * optional field override
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getFacetDateGap($field_override){}

    /**
     * Returns the value of the facet.date.hardend parameter. Accepts an
     * optional field override
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getFacetDateHardEnd($field_override){}

    /**
     * Returns the value for the facet.date.other parameter. This method
     * accepts an optional field override.
     * 
     * @param string $field_override The name of the field
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFacetDateOther($field_override){}

    /**
     * Returns the lower bound for the first date range for all date faceting
     * on this field. Accepts an optional field override
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getFacetDateStart($field_override){}

    /**
     * Returns all the facet fields
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFacetFields(){}

    /**
     * Returns the maximum number of constraint counts that should be
     * returned for the facet fields. This method accepts an optional field
     * override
     * 
     * @param string $field_override The name of the field to override for
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getFacetLimit($field_override){}

    /**
     * Returns the value of the facet.method parameter. This accepts an
     * optional field override.
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getFacetMethod($field_override){}

    /**
     * Returns the minimum counts for facet fields should be included in the
     * response. It accepts an optional field override
     * 
     * @param string $field_override The name of the field
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getFacetMinCount($field_override){}

    /**
     * Returns the current state of the facet.missing parameter. This accepts
     * an optional field override
     * 
     * @param string $field_override The name of the field
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getFacetMissing($field_override){}

    /**
     * Returns an offset into the list of constraints to be used for
     * pagination. Accepts an optional field override
     * 
     * @param string $field_override The name of the field to override for.
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getFacetOffset($field_override){}

    /**
     * Returns the facet prefix
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getFacetPrefix($field_override){}

    /**
     * Returns all the facet queries
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFacetQueries(){}

    /**
     * Returns an integer (SolrQuery::FACET_SORT_INDEX or
     * SolrQuery::FACET_SORT_COUNT)
     * 
     * @param string $field_override The name of the field
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getFacetSort($field_override){}

    /**
     * Returns the list of fields that will be returned in the response
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFields(){}

    /**
     * Returns an array of filter queries. These are queries that can be used
     * to restrict the super set of documents that can be returned, without
     * influencing score
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getFilterQueries(){}

    /**
     * Returns a boolean indicating whether or not to enable highlighted
     * snippets to be generated in the query response.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getHighlight(){}

    /**
     * Returns the highlight field to use as backup or default. It accepts an
     * optional override.
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightAlternateField($field_override){}

    /**
     * Returns all the fields that Solr should generate highlighted snippets
     * for
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightFields(){}

    /**
     * Returns the formatter for the highlighted output
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightFormatter($field_override){}

    /**
     * Returns the text snippet generator for highlighted text. Accepts an
     * optional field override.
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightFragmenter($field_override){}

    /**
     * Returns the number of characters of fragments to consider for
     * highlighting. Zero implies no fragmenting. The entire field should be
     * used.
     * 
     * @param string $field_override The name of the field
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightFragsize($field_override){}

    /**
     * Returns whether or not to enable highlighting for
     * range/wildcard/fuzzy/prefix queries
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightHighlightMultiTerm(){}

    /**
     * Returns the maximum number of characters of the field to return
     * 
     * @param string $field_override The name of the field
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightMaxAlternateFieldLength($field_override){}

    /**
     * Returns the maximum number of characters into a document to look for
     * suitable snippets
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightMaxAnalyzedChars(){}

    /**
     * Returns whether or not the collapse contiguous fragments into a single
     * fragment. Accepts an optional field override.
     * 
     * @param string $field_override The name of the field
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightMergeContiguous($field_override){}

    /**
     * Returns the maximum number of characters from a field when using the
     * regex fragmenter
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightRegexMaxAnalyzedChars(){}

    /**
     * Returns the regular expression used for fragmenting
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightRegexPattern(){}

    /**
     * Returns the factor by which the regex fragmenter can deviate from the
     * ideal fragment size to accomodate the regular expression
     * 
     * @return float
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightRegexSlop(){}

    /**
     * Returns if a field will only be highlighted if the query matched in
     * this particular field.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightRequireFieldMatch(){}

    /**
     * Returns the text which appears after a highlighted term. Accepts an
     * optional field override
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightSimplePost($field_override){}

    /**
     * Returns the text which appears before a highlighted term. Accepts an
     * optional field override
     * 
     * @param string $field_override The name of the field
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightSimplePre($field_override){}

    /**
     * Returns the maximum number of highlighted snippets to generate per
     * field. Accepts an optional field override
     * 
     * @param string $field_override The name of the field
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightSnippets($field_override){}

    /**
     * Returns whether or not to use SpanScorer to highlight phrase terms
     * only when they appear within the query phrase in the document.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getHighlightUsePhraseHighlighter(){}

    /**
     * Returns whether or not MoreLikeThis results should be enabled
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getMlt(){}

    /**
     * Returns whether or not the query will be boosted by the interesting
     * term relevance
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getMltBoost(){}

    /**
     * Returns the number of similar documents to return for each result
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltCount(){}

    /**
     * Returns all the fields to use for similarity
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getMltFields(){}

    /**
     * Returns the maximum number of query terms that will be included in any
     * generated query
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltMaxNumQueryTerms(){}

    /**
     * Returns the maximum number of tokens to parse in each document field
     * that is not stored with TermVector support
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltMaxNumTokens(){}

    /**
     * Returns the maximum word length above which words will be ignored
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltMaxWordLength(){}

    /**
     * Returns the treshold frequency at which words will be ignored which do
     * not occur in at least this many docs
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltMinDocFrequency(){}

    /**
     * Returns the frequency below which terms will be ignored in the source
     * document
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltMinTermFrequency(){}

    /**
     * Returns the minimum word length below which words will be ignored
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getMltMinWordLength(){}

    /**
     * Returns the query fields and their boosts
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getMltQueryFields(){}

    /**
     * Returns the main search query
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getQuery(){}

    /**
     * Returns the maximum number of documents from the complete result set
     * to return to the client for every request
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getRows(){}

    /**
     * Returns all the sort fields
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getSortFields(){}

    /**
     * Returns the offset in the complete result set for the queries where
     * the set of returned documents should begin.
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getStart(){}

    /**
     * Returns whether or not stats is enabled
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getStats(){}

    /**
     * Returns all the stats facets that were set
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getStatsFacets(){}

    /**
     * Returns all the statistics fields
     * 
     * @return array
     * @since PECL solr >= 0.9.2
     **/
    function getStatsFields(){}

    /**
     * Returns whether or not the TermsComponent is enabled
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getTerms(){}

    /**
     * Returns the field from which the terms are retrieved
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getTermsField(){}

    /**
     * Returns whether or not to include the lower bound in the result set
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getTermsIncludeLowerBound(){}

    /**
     * Returns whether or not to include the upper bound term in the result
     * set
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getTermsIncludeUpperBound(){}

    /**
     * Returns the maximum number of terms Solr should return
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getTermsLimit(){}

    /**
     * Returns the term to start at
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getTermsLowerBound(){}

    /**
     * Returns the maximum document frequency
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getTermsMaxCount(){}

    /**
     * Returns the minimum document frequency to return in order to be
     * included
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getTermsMinCount(){}

    /**
     * Returns the prefix to which matching terms must be restricted. This
     * will restrict matches to only terms that start with the prefix
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getTermsPrefix(){}

    /**
     * Returns a boolean indicating whether or not to return the raw
     * characters of the indexed term, regardless of if it is human readable
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function getTermsReturnRaw(){}

    /**
     * SolrQuery::TERMS_SORT_INDEX indicates that the terms are returned by
     * index order. SolrQuery::TERMS_SORT_COUNT implies that the terms are
     * sorted by term frequency (highest count first)
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getTermsSort(){}

    /**
     * Returns the term to stop at
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getTermsUpperBound(){}

    /**
     * Returns the time in milliseconds allowed for the query to finish.
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getTimeAllowed(){}

    /**
     * The name of the field
     * 
     * @param string $field The name of the date field to remove
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeFacetDateField($field){}

    /**
     * Removes one of the facet.date.other parameters
     * 
     * @param string $value The value
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeFacetDateOther($value, $field_override){}

    /**
     * Removes one of the facet.date parameters
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeFacetField($field){}

    /**
     * Removes one of the facet.query parameters.
     * 
     * @param string $value The value
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeFacetQuery($value){}

    /**
     * Removes a field from the list of fields
     * 
     * @param string $field Name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeField($field){}

    /**
     * Removes a filter query.
     * 
     * @param string $fq The filter query to remove
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeFilterQuery($fq){}

    /**
     * Removes one of the fields used for highlighting.
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeHighlightField($field){}

    /**
     * Removes one of the moreLikeThis fields.
     * 
     * @param string $field Name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeMltField($field){}

    /**
     * Removes one of the moreLikeThis query fields.
     * 
     * @param string $queryField The query field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeMltQueryField($queryField){}

    /**
     * Removes one of the sort fields
     * 
     * @param string $field The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeSortField($field){}

    /**
     * Removes one of the stats.facet parameters
     * 
     * @param string $value The value
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeStatsFacet($value){}

    /**
     * Removes one of the stats.field parameters
     * 
     * @param string $field The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function removeStatsField($field){}

    /**
     * If set to true, Solr places the name of the handle used in the
     * response to the client for debugging purposes.
     * 
     * @param bool $flag or
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setEchoHandler($flag){}

    /**
     * Instructs Solr what kinds of Request parameters should be included in
     * the response for debugging purposes, legal values include:
     * 
     * - none - don't include any request parameters for debugging - explicit
     * - include the parameters explicitly specified by the client in the
     * request - all - include all parameters involved in this request,
     * either specified explicitly by the client, or implicit because of the
     * request handler configuration.
     * 
     * @param string $type The type of parameters to include
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setEchoParams($type){}

    /**
     * Sets the explainOther common query parameter
     * 
     * @param string $query The Lucene query to identify a set of documents
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setExplainOther($query){}

    /**
     * Enables or disables faceting.
     * 
     * @param bool $flag enables faceting and disables it.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacet($flag){}

    /**
     * Maps to facet.date.end
     * 
     * @param string $value See facet.date.end
     * @param string $field_override Name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetDateEnd($value, $field_override){}

    /**
     * Maps to facet.date.gap
     * 
     * @param string $value See facet.date.gap
     * @param string $field_override The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetDateGap($value, $field_override){}

    /**
     * Maps to facet.date.hardend
     * 
     * @param bool $value See facet.date.hardend
     * @param string $field_override The name of the field
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetDateHardEnd($value, $field_override){}

    /**
     * Maps to facet.date.start
     * 
     * @param string $value See facet.date.start
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetDateStart($value, $field_override){}

    /**
     * Sets the minimum document frequency used for determining term count
     * 
     * @param int $frequency The minimum frequency
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetEnumCacheMinDefaultFrequency($frequency, $field_override){}

    /**
     * Maps to facet.limit. Sets the maximum number of constraint counts that
     * should be returned for the facet fields.
     * 
     * @param int $limit The maximum number of constraint counts
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetLimit($limit, $field_override){}

    /**
     * Specifies the type of algorithm to use when faceting a field. This
     * method accepts optional field override.
     * 
     * @param string $method The method to use.
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetMethod($method, $field_override){}

    /**
     * Sets the minimum counts for facet fields that should be included in
     * the response
     * 
     * @param int $mincount The minimum count
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetMinCount($mincount, $field_override){}

    /**
     * Used to indicate that in addition to the Term-based constraints of a
     * facet field, a count of all matching results which have no value for
     * the field should be computed
     * 
     * @param bool $flag turns this feature on. disables it.
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetMissing($flag, $field_override){}

    /**
     * Sets the offset into the list of constraints to allow for pagination.
     * 
     * @param int $offset The offset
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetOffset($offset, $field_override){}

    /**
     * Specifies a string prefix with which to limits the terms on which to
     * facet.
     * 
     * @param string $prefix The prefix string
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetPrefix($prefix, $field_override){}

    /**
     * Determines the ordering of the facet field constraints
     * 
     * @param int $facetSort Use SolrQuery::FACET_SORT_INDEX for sorting by
     *   index order or SolrQuery::FACET_SORT_COUNT for sorting by count.
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setFacetSort($facetSort, $field_override){}

    /**
     * Setting it to enables highlighted snippets to be generated in the
     * query response.
     * 
     * Setting it to disables highlighting
     * 
     * @param bool $flag Enable or disable highlighting
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlight($flag){}

    /**
     * If a snippet cannot be generated because there were no matching terms,
     * one can specify a field to use as the backup or default summary
     * 
     * @param string $field The name of the backup field
     * @param string $field_override The name of the field we are
     *   overriding this setting for.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightAlternateField($field, $field_override){}

    /**
     * Specify a formatter for the highlight output.
     * 
     * @param string $formatter Currently the only legal value is "simple"
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightFormatter($formatter, $field_override){}

    /**
     * Specify a text snippet generator for highlighted text.
     * 
     * @param string $fragmenter The standard fragmenter is gap. Another
     *   option is regex, which tries to create fragments that resembles a
     *   certain regular expression
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightFragmenter($fragmenter, $field_override){}

    /**
     * Sets the size, in characters, of fragments to consider for
     * highlighting. "0" indicates that the whole field value should be used
     * (no fragmenting).
     * 
     * @param int $size The size, in characters, of fragments to consider
     *   for highlighting
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightFragsize($size, $field_override){}

    /**
     * Use SpanScorer to highlight phrase terms only when they appear within
     * the query phrase in the document.
     * 
     * @param bool $flag Whether or not to use SpanScorer to highlight
     *   phrase terms only when they appear within the query phrase in the
     *   document.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightHighlightMultiTerm($flag){}

    /**
     * If SolrQuery::setHighlightAlternateField() was passed the value , this
     * parameter specifies the maximum number of characters of the field to
     * return
     * 
     * Any value less than or equal to 0 means unlimited.
     * 
     * @param int $fieldLength The length of the field
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightMaxAlternateFieldLength($fieldLength, $field_override){}

    /**
     * Specifies the number of characters into a document to look for
     * suitable snippets
     * 
     * @param int $value The number of characters into a document to look
     *   for suitable snippets
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightMaxAnalyzedChars($value){}

    /**
     * Whether or not to collapse contiguous fragments into a single fragment
     * 
     * @param bool $flag Whether or not to collapse contiguous fragments
     *   into a single fragment
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightMergeContiguous($flag, $field_override){}

    /**
     * Specify the maximum number of characters to analyze from a field when
     * using the regex fragmenter
     * 
     * @param int $maxAnalyzedChars The maximum number of characters to
     *   analyze from a field when using the regex fragmenter
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightRegexMaxAnalyzedChars($maxAnalyzedChars){}

    /**
     * Specifies the regular expression for fragmenting. This could be used
     * to extract sentences
     * 
     * @param string $value The regular expression for fragmenting. This
     *   could be used to extract sentences
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightRegexPattern($value){}

    /**
     * The factor by which the regex fragmenter can stray from the ideal
     * fragment size ( specfied by SolrQuery::setHighlightFragsize )to
     * accomodate the regular expression
     * 
     * @param float $factor The factor by which the regex fragmenter can
     *   stray from the ideal fragment size
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightRegexSlop($factor){}

    /**
     * If , then a field will only be highlighted if the query matched in
     * this particular field.
     * 
     * This will only work if SolrQuery::setHighlightUsePhraseHighlighter()
     * was set to
     * 
     * @param bool $flag or
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightRequireFieldMatch($flag){}

    /**
     * Sets the text which appears before a highlighted term
     * 
     * @param string $simplePost Sets the text which appears after a
     *   highlighted term The default is </em>
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightSimplePost($simplePost, $field_override){}

    /**
     * Sets the text which appears before a highlighted term
     * 
     * The default is <em>
     * 
     * @param string $simplePre The text which appears before a highlighted
     *   term
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightSimplePre($simplePre, $field_override){}

    /**
     * Sets the maximum number of highlighted snippets to generate per field
     * 
     * @param int $value The maximum number of highlighted snippets to
     *   generate per field
     * @param string $field_override The name of the field.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightSnippets($value, $field_override){}

    /**
     * Sets whether or not to use SpanScorer to highlight phrase terms only
     * when they appear within the query phrase in the document
     * 
     * @param bool $flag Whether or not to use SpanScorer to highlight
     *   phrase terms only when they appear within the query phrase in the
     *   document
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setHighlightUsePhraseHighlighter($flag){}

    /**
     * Enables or disables moreLikeThis
     * 
     * @param bool $flag enables it and turns it off.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMlt($flag){}

    /**
     * Set if the query will be boosted by the interesting term relevance
     * 
     * @param bool $flag Sets to or
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltBoost($flag){}

    /**
     * Set the number of similar documents to return for each result
     * 
     * @param int $count The number of similar documents to return for each
     *   result
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltCount($count){}

    /**
     * Sets the maximum number of query terms that will be included in any
     * generated query.
     * 
     * @param int $value The maximum number of query terms that will be
     *   included in any generated query
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltMaxNumQueryTerms($value){}

    /**
     * Specifies the maximum number of tokens to parse in each example doc
     * field that is not stored with TermVector support.
     * 
     * @param int $value The maximum number of tokens to parse
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltMaxNumTokens($value){}

    /**
     * Sets the maximum word length above which words will be ignored.
     * 
     * @param int $maxWordLength The maximum word length above which words
     *   will be ignored
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltMaxWordLength($maxWordLength){}

    /**
     * The frequency at which words will be ignored which do not occur in at
     * least this many docs.
     * 
     * @param int $minDocFrequency Sets the frequency at which words will
     *   be ignored which do not occur in at least this many docs.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltMinDocFrequency($minDocFrequency){}

    /**
     * Sets the frequency below which terms will be ignored in the source
     * docs
     * 
     * @param int $minTermFrequency The frequency below which terms will be
     *   ignored in the source docs
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltMinTermFrequency($minTermFrequency){}

    /**
     * Sets the minimum word length below which words will be ignored.
     * 
     * @param int $minWordLength The minimum word length below which words
     *   will be ignored
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setMltMinWordLength($minWordLength){}

    /**
     * Exclude the header from the returned results.
     * 
     * @param bool $flag excludes the header from the result.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setOmitHeader($flag){}

    /**
     * Sets the search query.
     * 
     * @param string $query The search query
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setQuery($query){}

    /**
     * Specifies the maximum number of rows to return in the result
     * 
     * @param int $rows The maximum number of rows to return
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setRows($rows){}

    /**
     * Whether to show debug info
     * 
     * @param bool $flag Whether to show debug info. or
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setShowDebugInfo($flag){}

    /**
     * Specifies the number of rows to skip. Useful in pagination of results.
     * 
     * @param int $start The number of rows to skip.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setStart($start){}

    /**
     * Enables or disables the Stats component.
     * 
     * @param bool $flag turns on the stats component and disables it.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setStats($flag){}

    /**
     * Enables or disables the TermsComponent
     * 
     * @param bool $flag enables it. turns it off
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTerms($flag){}

    /**
     * Sets the name of the field to get the terms from
     * 
     * @param string $fieldname The field name
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsField($fieldname){}

    /**
     * Include the lower bound term in the result set.
     * 
     * @param bool $flag Include the lower bound term in the result set
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsIncludeLowerBound($flag){}

    /**
     * Include the upper bound term in the result set.
     * 
     * @param bool $flag or
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsIncludeUpperBound($flag){}

    /**
     * Sets the maximum number of terms to return
     * 
     * @param int $limit The maximum number of terms to return. All the
     *   terms will be returned if the limit is negative.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsLimit($limit){}

    /**
     * Specifies the Term to start from
     * 
     * @param string $lowerBound The lower bound Term
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsLowerBound($lowerBound){}

    /**
     * Sets the maximum document frequency.
     * 
     * @param int $frequency The maximum document frequency.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsMaxCount($frequency){}

    /**
     * Sets the minimum doc frequency to return in order to be included
     * 
     * @param int $frequency The minimum frequency
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsMinCount($frequency){}

    /**
     * Restrict matches to terms that start with the prefix
     * 
     * @param string $prefix Restrict matches to terms that start with the
     *   prefix
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsPrefix($prefix){}

    /**
     * If true, return the raw characters of the indexed term, regardless of
     * if it is human readable
     * 
     * @param bool $flag or
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsReturnRaw($flag){}

    /**
     * If SolrQuery::TERMS_SORT_COUNT, sorts the terms by the term frequency
     * (highest count first). If SolrQuery::TERMS_SORT_INDEX, returns the
     * terms in index order
     * 
     * @param int $sortType SolrQuery::TERMS_SORT_INDEX or
     *   SolrQuery::TERMS_SORT_COUNT
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsSort($sortType){}

    /**
     * Sets the term to stop at
     * 
     * @param string $upperBound The term to stop at
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTermsUpperBound($upperBound){}

    /**
     * The time allowed for a search to finish. This value only applies to
     * the search and not to requests in general. Time is in milliseconds.
     * Values less than or equal to zero implies no time restriction. Partial
     * results may be returned, if there are any.
     * 
     * @param int $timeAllowed The time allowed for a search to finish.
     * @return SolrQuery
     * @since PECL solr >= 0.9.2
     **/
    function setTimeAllowed($timeAllowed){}

    /**
     * Constructor.
     * 
     * @param string $q Optional search query
     * @since PECL solr >= 0.9.2
     **/
    function __construct($q){}

    /**
     * Destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * Represents a response to a query request.
 **/
class SolrQueryResponse extends SolrResponse {
    /**
     * Constructor
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor.
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * Represents a response from the Solr server.
 **/
class SolrResponse {
    /**
     * Returns the XML response as serialized PHP data
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getDigestedResponse(){}

    /**
     * Returns the HTTP status of the response.
     * 
     * @return int
     * @since PECL solr >= 0.9.2
     **/
    function getHttpStatus(){}

    /**
     * Returns more details on the HTTP status.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getHttpStatusMessage(){}

    /**
     * Returns the raw request sent to the Solr server.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getRawRequest(){}

    /**
     * Returns the raw request headers sent to the Solr server.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getRawRequestHeaders(){}

    /**
     * Returns the raw response from the server.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getRawResponse(){}

    /**
     * Returns the raw response headers from the server.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getRawResponseHeaders(){}

    /**
     * Returns the full URL the request was sent to.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getRequestUrl(){}

    /**
     * Returns a SolrObject representing the XML response from the server.
     * 
     * @return SolrObject
     * @since PECL solr >= 0.9.2
     **/
    function getResponse(){}

    /**
     * Sets the parse mode.
     * 
     * @param int $parser_mode SolrResponse::PARSE_SOLR_DOC parses
     *   documents in SolrDocument instances. SolrResponse::PARSE_SOLR_OBJ
     *   parses document into SolrObjects.
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function setParseMode($parser_mode){}

    /**
     * Used to check if the request to the server was successful.
     * 
     * @return bool
     * @since PECL solr >= 0.9.2
     **/
    function success(){}

}
/**
 * Represents a response to an update request.
 **/
class SolrUpdateResponse extends SolrResponse {
    /**
     * Constructor
     * 
     * @since PECL solr >= 0.9.2
     **/
    function __construct(){}

    /**
     * Destructor
     * 
     * @return void
     * @since PECL solr >= 0.9.2
     **/
    function __destruct(){}

}
/**
 * Contains utility methods for retrieving the current extension version
 * and preparing query phrases. Also contains method for escaping query
 * strings and parsing XML responses.
 **/
class SolrUtils {
    /**
     * This method parses an response XML string from the Apache Solr server
     * into a SolrObject. It throws a SolrException if there was an error.
     * 
     * @param string $xmlresponse The XML response string from the Solr
     *   server.
     * @param int $parse_mode Use SolrResponse::PARSE_SOLR_OBJ or
     *   SolrResponse::PARSE_SOLR_DOC
     * @return SolrObject
     * @since PECL solr >= 0.9.2
     **/
    function digestXmlResponse($xmlresponse, $parse_mode){}

    /**
     * Lucene supports escaping special characters that are part of the query
     * syntax.
     * 
     * The current list special characters are:
     * 
     * + - && || ! ( ) { } [ ] ^ " ~ * ? : \
     * 
     * These characters are part of the query syntax and must be escaped
     * 
     * @param string $str This is the query string to be escaped.
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function escapeQueryChars($str){}

    /**
     * Returns the current Solr version.
     * 
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function getSolrVersion(){}

    /**
     * Prepares a phrase from an unescaped lucene string.
     * 
     * @param string $str The lucene phrase.
     * @return string
     * @since PECL solr >= 0.9.2
     **/
    function queryPhrase($str){}

}
/**
 * The SphinxClient class provides object-oriented interface to Sphinx.
 **/
class SphinxClient {
    /**
     * Adds query with the current settings to multi-query batch. This method
     * doesn't affect current settings (sorting, filtering, grouping etc.) in
     * any way.
     * 
     * @param string $query Query string.
     * @param string $index An index name (or names).
     * @param string $comment
     * @return int
     * @since PECL sphinx >= 0.1.0
     **/
    function addQuery($query, $index, $comment){}

    /**
     * Connects to searchd, requests it to generate excerpts (snippets) from
     * the given documents, and returns the results.
     * 
     * @param array $docs Array of strings with documents' contents.
     * @param string $index Index name.
     * @param string $words Keywords to highlight.
     * @param array $opts Associative array of additional highlighting
     *   options (see below).
     * @return array
     * @since PECL sphinx >= 0.1.0
     **/
    function buildExcerpts($docs, $index, $words, $opts){}

    /**
     * Extracts keywords from {@link query} using tokenizer settings for the
     * given {@link index}, optionally with per-keyword occurrence
     * statistics.
     * 
     * @param string $query A query to extract keywords from.
     * @param string $index An index to get tokenizing settings and keyword
     *   occurrence statistics from.
     * @param bool $hits A boolean flag to enable/disable keyword
     *   statistics generation.
     * @return array
     * @since PECL sphinx >= 0.1.0
     **/
    function buildKeywords($query, $index, $hits){}

    /**
     * Closes previously opened persistent connection.
     * 
     * @return bool
     * @since PECL sphinx >= 1.0.3
     **/
    function close(){}

    /**
     * Escapes characters that are treated as special operators by the query
     * language parser.
     * 
     * @param string $string String to escape.
     * @return string
     * @since PECL sphinx >= 0.1.0
     **/
    function escapeString($string){}

    /**
     * Returns string with the last error message. If there were no errors
     * during the previous API call, empty string is returned. This method
     * doesn't reset the error message, so you can safely call it several
     * times.
     * 
     * @return string
     * @since PECL sphinx >= 0.1.0
     **/
    function getLastError(){}

    /**
     * Returns last warning message. If there were no warnings during the
     * previous API call, empty string is returned. This method doesn't reset
     * the warning, so you can safely call it several times.
     * 
     * @return string
     * @since PECL sphinx >= 0.1.0
     **/
    function getLastWarning(){}

    /**
     * Opens persistent connection to the server.
     * 
     * @return bool
     * @since PECL sphinx >= 1.0.3
     **/
    function open(){}

    /**
     * Connects to searchd server, runs the given search query with the
     * current settings, obtains and returns the result set.
     * 
     * @param string $query Query string.
     * @param string $index An index name (or names).
     * @param string $comment
     * @return array
     * @since PECL sphinx >= 0.1.0
     **/
    function query($query, $index, $comment){}

    /**
     * Clears all currently set filters. This call is normally required when
     * using multi-queries. You might want to set different filters for
     * different queries in the batch. To do that, you should call {@link
     * SphinxClient::resetFilters} and add new filters using the respective
     * calls.
     * 
     * @return void
     * @since PECL sphinx >= 0.1.0
     **/
    function resetFilters(){}

    /**
     * Clears all currently group-by settings, and disables group-by. This
     * call is normally required only when using multi-queries.
     * 
     * @return void
     * @since PECL sphinx >= 0.1.0
     **/
    function resetGroupBy(){}

    /**
     * Connects to searchd, runs a batch of all queries added using , obtains
     * and returns the result sets.
     * 
     * @return array
     * @since PECL sphinx >= 0.1.0
     **/
    function runQueries(){}

    /**
     * Controls the format of search results set arrays (whether matches
     * should be returned as an array or a hash).
     * 
     * @param bool $array_result If {@link array_result} is , matches are
     *   returned as a hash with document IDs as keys, and other information
     *   (weight, attributes) as values. If {@link array_result} is , matches
     *   are returned as a plain array with complete per-match information
     *   including document IDs.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setArrayResult($array_result){}

    /**
     * Sets connection timeout (in seconds) for searchd connection.
     * 
     * @param float $timeout Timeout in seconds.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setConnectTimeout($timeout){}

    /**
     * Binds per-field weights by name.
     * 
     * Match ranking can be affected by per-field weights. See Sphinx
     * documentation for an explanation on how phrase proximity ranking is
     * affected. This call lets you specify non-default weights for full-text
     * fields.
     * 
     * The weights must be positive 32-bit integers, so be careful not to hit
     * 32-bit integer maximum. The final weight is a 32-bit integer too.
     * Default weight value is 1. Unknown field names are silently ignored.
     * 
     * @param array $weights Associative array of field names and field
     *   weights.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setFieldWeights($weights){}

    /**
     * Adds new integer values set filter to the existing list of filters.
     * 
     * @param string $attribute An attribute name.
     * @param array $values Plain array of integer values.
     * @param bool $exclude If set to , matching documents are excluded
     *   from the result set.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setFilter($attribute, $values, $exclude){}

    /**
     * Adds new float range filter to the existing list of filters. Only
     * those documents which have {@link attribute} value stored in the index
     * between {@link min} and {@link max} (including values that are exactly
     * equal to {@link min} or {@link max}) will be matched (or rejected, if
     * {@link exclude} is ).
     * 
     * @param string $attribute An attribute name.
     * @param float $min Minimum value.
     * @param float $max Maximum value.
     * @param bool $exclude If set to , matching documents are excluded
     *   from the result set.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setFilterFloatRange($attribute, $min, $max, $exclude){}

    /**
     * Adds new integer range filter to the existing list of filters. Only
     * those documents which have {@link attribute} value stored in the index
     * between {@link min} and {@link max} (including values that are exactly
     * equal to {@link min} or {@link max}) will be matched (or rejected, if
     * {@link exclude} is ).
     * 
     * @param string $attribute An attribute name.
     * @param int $min Minimum value.
     * @param int $max Maximum value.
     * @param bool $exclude If set to , matching documents are excluded
     *   from the result set.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setFilterRange($attribute, $min, $max, $exclude){}

    /**
     * Sets anchor point for a geosphere distance (geodistance) calculations
     * and enables them.
     * 
     * Once an anchor point is set, you can use magic "@geodist" attribute
     * name in your filters and/or sorting expressions.
     * 
     * @param string $attrlat Name of a latitude attribute.
     * @param string $attrlong Name of a longitude attribute.
     * @param float $latitude Anchor latitude in radians.
     * @param float $longitude Anchor longitude in radians.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setGeoAnchor($attrlat, $attrlong, $latitude, $longitude){}

    /**
     * Sets grouping attribute, function, and group sorting mode, and enables
     * grouping.
     * 
     * Grouping feature is very similar to GROUP BY clause in SQL. Results
     * produced by this function call are going to be the same as produced by
     * the following pseudo code: SELECT ... GROUP BY $func($attribute) ORDER
     * BY $groupsort.
     * 
     * @param string $attribute A string containing group-by attribute
     *   name.
     * @param int $func Constant, which sets a function applied to the
     *   attribute value in order to compute group-by key.
     * @param string $groupsort An optional clause controlling how the
     *   groups are sorted.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setGroupBy($attribute, $func, $groupsort){}

    /**
     * Sets attribute name for per-group distinct values count calculations.
     * Only available for grouping queries. For each group, all values of
     * {@link attribute} will be stored, then the amount of distinct values
     * will be calculated and returned to the client. This feature is similar
     * to COUNT(DISTINCT) clause in SQL.
     * 
     * @param string $attribute A string containing group-by attribute
     *   name.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setGroupDistinct($attribute){}

    /**
     * Sets an accepted range of document IDs. Default range is from 0 to 0,
     * i.e. no limit. Only those records that have document ID between {@link
     * min} and {@link max} (including IDs exactly equal to {@link min} or
     * {@link max}) will be matched.
     * 
     * @param int $min Minimum ID value.
     * @param int $max Maximum ID value.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setIDRange($min, $max){}

    /**
     * Sets per-index weights and enables weighted summing of match weights
     * across different indexes.
     * 
     * @param array $weights An associative array mapping string index
     *   names to integer weights. Default is empty array, i.e. weighting
     *   summing is disabled.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setIndexWeights($weights){}

    /**
     * Sets {@link offset} into server-side result set and amount of matches
     * to return to client starting from that offset ({@link limit}). Can
     * additionally control maximum server-side result set size for current
     * query ({@link max_matches}) and the threshold amount of matches to
     * stop searching at ({@link cutoff}).
     * 
     * @param int $offset Result set offset.
     * @param int $limit Amount of matches to return.
     * @param int $max_matches Controls how much matches searchd will keep
     *   in RAM while searching.
     * @param int $cutoff Used for advanced performance control. It tells
     *   searchd to forcibly stop search query once {@link cutoff} matches
     *   have been found and processed.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setLimits($offset, $limit, $max_matches, $cutoff){}

    /**
     * Sets full-text query matching mode. {@link mode} is one of the
     * constants listed below. Match modes Constant Description SPH_MATCH_ALL
     * Match all query words (default mode). SPH_MATCH_ANY Match any of query
     * words. SPH_MATCH_PHRASE Match query as a phrase, requiring perfect
     * match. SPH_MATCH_BOOLEAN Match query as a boolean expression.
     * SPH_MATCH_EXTENDED Match query as an expression in Sphinx internal
     * query language. SPH_MATCH_FULLSCAN Enables fullscan.
     * SPH_MATCH_EXTENDED2 The same as SPH_MATCH_EXTENDED plus ranking and
     * quorum searching support.
     * 
     * @param int $mode Matching mode.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setMatchMode($mode){}

    /**
     * Sets maximum search query time.
     * 
     * @param int $qtime Maximum query time, in milliseconds. It must be a
     *   non-negative integer. Default value is 0, i.e. no limit.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setMaxQueryTime($qtime){}

    /**
     * Sets temporary (per-query) per-document attribute value overrides.
     * Override feature lets you "temporary" update attribute values for some
     * documents within a single query, leaving all other queries unaffected.
     * This might be useful for personalized data
     * 
     * @param string $attribute An attribute name.
     * @param int $type An attribute type. Only supports scalar attributes.
     * @param array $values Array of attribute values that maps document
     *   IDs to overridden attribute values.
     * @return bool
     * @since PECL sphinx >= 1.0.3
     **/
    function setOverride($attribute, $type, $values){}

    /**
     * Sets ranking mode. Only available in SPH_MATCH_EXTENDED2 matching
     * mode. Ranking modes Constant Description SPH_RANK_PROXIMITY_BM25
     * Default ranking mode which uses both proximity and BM25 ranking.
     * SPH_RANK_BM25 Statistical ranking mode which uses BM25 ranking only
     * (similar to most of other full-text engines). This mode is faster, but
     * may result in worse quality on queries which contain more than 1
     * keyword. SPH_RANK_NONE Disables ranking. This mode is the fastest. It
     * is essentially equivalent to boolean searching, a weight of 1 is
     * assigned to all matches.
     * 
     * @param int $ranker Ranking mode.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setRankingMode($ranker){}

    /**
     * Sets distributed retry count and delay.
     * 
     * On temporary failures searchd will attempt up to {@link count} retries
     * per agent. {@link delay} is the delay between the retries, in
     * milliseconds. Retries are disabled by default. Note that this call
     * will not make the API itself retry on temporary failure; it only tells
     * searchd to do so.
     * 
     * @param int $count Number of retries.
     * @param int $delay Delay between retries, in milliseconds.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setRetries($count, $delay){}

    /**
     * Sets the select clause, listing specific attributes to fetch, and
     * expressions to compute and fetch.
     * 
     * @param string $clause SQL-like clause.
     * @return bool
     * @since PECL sphinx >= 1.0.1
     **/
    function setSelect($clause){}

    /**
     * Sets searchd host name and TCP port. All subsequent requests will use
     * the new host and port settings. Default host and port are 'localhost'
     * and 3312, respectively.
     * 
     * @param string $server IP or hostname.
     * @param int $port Port number.
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setServer($server, $port){}

    /**
     * Sets matches sorting mode. See available modes below. Sorting modes
     * Constant Description SPH_SORT_RELEVANCE Sort by relevance in
     * descending order (best matches first). SPH_SORT_ATTR_DESC Sort by an
     * attribute in descending order (bigger attribute values first).
     * SPH_SORT_ATTR_ASC Sort by an attribute in ascending order (smaller
     * attribute values first). SPH_SORT_TIME_SEGMENTS Sort by time segments
     * (last hour/day/week/month) in descending order, and then by relevance
     * in descending order. SPH_SORT_EXTENDED Sort by SQL-like combination of
     * columns in ASC/DESC order. SPH_SORT_EXPR Sort by an arithmetic
     * expression.
     * 
     * @param int $mode Sorting mode.
     * @param string $sortby
     * @return bool
     * @since PECL sphinx >= 0.1.0
     **/
    function setSortMode($mode, $sortby){}

    /**
     * Queries searchd status, and returns an array of status variable name
     * and value pairs.
     * 
     * @return array
     * @since PECL sphinx >= 1.0.3
     **/
    function status(){}

    /**
     * Instantly updates given attribute values in given documents.
     * 
     * @param string $index Name of the index (or indexes) to be updated.
     * @param array $attributes Array of attribute names, listing
     *   attributes that are updated.
     * @param array $values Associative array containing document IDs as
     *   keys and array of attribute values as values.
     * @return int
     * @since PECL sphinx >= 0.1.0
     **/
    function updateAttributes($index, $attributes, $values){}

    /**
     * Creates a new SphinxClient object.
     * 
     * @since PECL sphinx >= 0.1.0
     **/
    function __construct(){}

}
/**
 * The SplBool class is used to enforce strong typing of the bool type.
 **/
class SplBool {
}
/**
 * The SplDoublyLinkedList class provides the main functionalities of a
 * doubly linked list.
 **/
class SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function bottom(){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function count(){}

    /**
     * Get the current doubly linked list node.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function getIteratorMode(){}

    /**
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function isEmpty(){}

    /**
     * This function returns the current node index
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Move the iterator to the next node.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * @param mixed $index The index being checked.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function offsetExists($index){}

    /**
     * @param mixed $index The index with the value.
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function offsetGet($index){}

    /**
     * Sets the value at the specified {@link index} to {@link newval}.
     * 
     * @param mixed $index The index being set.
     * @param mixed $newval The new value for the {@link index}.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function offsetSet($index, $newval){}

    /**
     * Unsets the value at the specified index.
     * 
     * @param mixed $index The index being unset.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function offsetUnset($index){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function pop(){}

    /**
     * Move the iterator to the previous node.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function prev(){}

    /**
     * Pushes {@link value} at the end of the doubly linked list.
     * 
     * @param mixed $value The value to push.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function push($value){}

    /**
     * This rewinds the iterator to the beginning.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * @param int $mode There are two orthogonal sets of modes that can be
     *   set: The default mode is: SplDoublyLinkedList::IT_MODE_FIFO |
     *   SplDoublyLinkedList::IT_MODE_KEEP
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setIteratorMode($mode){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function shift(){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function top(){}

    /**
     * Prepends {@link value} at the beginning of the doubly linked list.
     * 
     * @param mixed $value The value to unshift.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function unshift($value){}

    /**
     * Checks if the doubly linked list contains any more nodes.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function valid(){}

}
/**
 * SplEnum gives the ability to emulate and create "Enum" objects
 * natively in PHP.
 **/
class SplEnum {
}
/**
 * The SplFileInfo class offers a high-level object oriented interface to
 * information for an individual file.
 **/
class SplFileInfo {
    /**
     * Gets the last access time for the file.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getATime(){}

    /**
     * This method returns the base name of the file, directory, or link
     * without path info.
     * 
     * @param string $suffix Optional suffix to omit from the base name
     *   returned.
     * @return string
     * @since PHP 5 >= 5.2.2
     **/
    function getBasename($suffix){}

    /**
     * Returns the inode change time for the file. The time returned is a
     * Unix timestamp.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getCTime(){}

    /**
     * This method gets an SplFileInfo object for the referenced file.
     * 
     * @param string $class_name Name of an SplFileInfo derived class to
     *   use.
     * @return SplFileInfo
     * @since PHP 5 >= 5.1.2
     **/
    function getFileInfo($class_name){}

    /**
     * Gets the filename without any path information.
     * 
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getFilename(){}

    /**
     * Gets the file group. The group ID is returned in numerical format.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getGroup(){}

    /**
     * Gets the inode number for the filesystem object.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getInode(){}

    /**
     * Gets the target of a filesystem link.
     * 
     * @return string
     * @since PHP 5 >= 5.2.2
     **/
    function getLinkTarget(){}

    /**
     * Returns the time when the contents of the file were changed. The time
     * returned is a Unix timestamp.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getMTime(){}

    /**
     * Gets the file owner. The owner ID is returned in numerical format.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getOwner(){}

    /**
     * Returns the path to the file, omitting the filename and any trailing
     * slash.
     * 
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getPath(){}

    /**
     * Gets an SplFileInfo object for the parent of the current file.
     * 
     * @param string $class_name Name of an SplFileInfo derived class to
     *   use.
     * @return SplFileInfo
     * @since PHP 5 >= 5.1.2
     **/
    function getPathInfo($class_name){}

    /**
     * Returns the path to the file.
     * 
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getPathname(){}

    /**
     * Gets the file permissions for the file.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getPerms(){}

    /**
     * This method expands all symbolic links, resolves relative references
     * and returns the real path to the file.
     * 
     * @return string
     * @since PHP 5 >= 5.2.2
     **/
    function getRealPath(){}

    /**
     * Returns the filesize in bytes for the file referenced.
     * 
     * @return int
     * @since PHP 5 >= 5.1.2
     **/
    function getSize(){}

    /**
     * Returns the type of the file referenced.
     * 
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getType(){}

    /**
     * This method can be used to determine if the file is a directory.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isDir(){}

    /**
     * Checks if the file is executable.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isExecutable(){}

    /**
     * Checks if the file referenced by this SplFileInfo object exists and is
     * a regular file.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isFile(){}

    /**
     * Use this method to check if the file referenced by the SplFileInfo
     * object is a link.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isLink(){}

    /**
     * Check if the file is readable.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isReadable(){}

    /**
     * Checks if the current entry is writable.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isWritable(){}

    /**
     * Creates an SplFileObject object of the file. This is useful because
     * SplFileObject contains additional methods for manipulating the file
     * whereas SplFileInfo is only useful for gaining information, like
     * whether the file is writable.
     * 
     * @param string $open_mode The mode for opening the file. See the
     *   {@link fopen} documentation for descriptions of possible modes. The
     *   default is read only.
     * @param bool $use_include_path
     * @param resource $context
     * @return SplFileObject
     * @since PHP 5 >= 5.1.2
     **/
    function openFile($open_mode, $use_include_path, $context){}

    /**
     * Set the class name which SplFileInfo will use to open files with when
     * openFile() is called. The class name passed to this method must be
     * derived from SplFileObject.
     * 
     * @param string $class_name The class name to use when openFile() is
     *   called.
     * @return void
     * @since PHP 5 >= 5.1.2
     **/
    function setFileClass($class_name){}

    /**
     * Use this method to set a custom class which will be used when
     * getFileInfo and getPathInfo are called. The class name passed to this
     * method must be derived from SplFileInfo.
     * 
     * @param string $class_name The class name to use.
     * @return void
     * @since PHP 5 >= 5.1.2
     **/
    function setInfoClass($class_name){}

    /**
     * Creates a new SplFileInfo object for the file_name specified. The file
     * does not need to exist, or be readable.
     * 
     * @param string $file_name Path to the file.
     * @since PHP 5 >= 5.1.2
     **/
    function __construct($file_name){}

    /**
     * This method will return the file name of the referenced file.
     * 
     * @return void
     * @since PHP 5 >= 5.1.2
     **/
    function __toString(){}

}
/**
 * The SplFileObject class offers an object oriented interface for a
 * file.
 **/
class SplFileObject extends SplFileInfo implements RecursiveIterator, Traversable, Iterator, SeekableIterator {
    /**
     * Retrieves the current line of the file.
     * 
     * @return string|array
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * Determine whether the end of file has been reached
     * 
     * @return boolean
     * @since PHP 5 >= 5.1.0
     **/
    function eof(){}

    /**
     * Forces a write of all buffered output to the file.
     * 
     * @return boolean
     * @since PHP 5 >= 5.1.0
     **/
    function fflush(){}

    /**
     * Gets a character from the file.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function fgetc(){}

    /**
     * Gets a line from the file which is in CSV format and returns an array
     * containing the fields read.
     * 
     * @param string $delimiter The field delimiter (one character only).
     *   Defaults as a comma or the value set using
     *   SplFileObject::setCsvControl.
     * @param string $enclosure The field enclosure character (one
     *   character only). Defaults as a double quotation mark or the value
     *   set using SplFileObject::setCsvControl.
     * @param string $escape The escape character (one character only).
     *   Defaults as a backslash (\) or the value set using
     *   SplFileObject::setCsvControl.
     * @return array
     * @since PHP 5 >= 5.1.0
     **/
    function fgetcsv($delimiter, $enclosure, $escape){}

    /**
     * Gets a line from the file.
     * 
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function fgets(){}

    /**
     * Identical to SplFileObject::fgets, except that SplFileObject::fgetss
     * attempts to strip any HTML and PHP tags from the text it reads.
     * 
     * @param string $allowable_tags You can use the optional third
     *   parameter to specify tags which should not be stripped.
     * @return string
     * @since PHP 5 >= 5.1.0
     **/
    function fgetss($allowable_tags){}

    /**
     * Locks or unlocks the file in the same portable way as {@link flock}.
     * 
     * @param int $operation {@link operation} is one of the following:
     *   LOCK_SH to acquire a shared lock (reader). LOCK_EX to acquire an
     *   exclusive lock (writer). LOCK_UN to release a lock (shared or
     *   exclusive). LOCK_NB to not block while locking (not supported on
     *   Windows).
     * @param int $wouldblock Set to if the lock would block (EWOULDBLOCK
     *   errno condition).
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function flock($operation, &$wouldblock){}

    /**
     * Reads to EOF on the given file pointer from the current position and
     * writes the results to the output buffer.
     * 
     * You may need to call SplFileObject::rewind to reset the file pointer
     * to the beginning of the file if you have already written data to the
     * file.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function fpassthru(){}

    /**
     * Reads a line from the file and interprets it according to the
     * specified {@link format}, which is described in the documentation for
     * {@link sprintf}.
     * 
     * Any whitespace in the {@link format} string matches any whitespace in
     * the line from the file. This means that even a tab \t in the format
     * string can match a single space character in the input stream.
     * 
     * @param string $format The specified format as described in the
     *   {@link sprintf} documentation.
     * @return mixed
     * @since PHP 5 >= 5.1.0
     **/
    function fscanf($format){}

    /**
     * Seek to a position in the file measured in bytes from the beginning of
     * the file, obtained by adding {@link offset} to the position specified
     * by {@link whence}.
     * 
     * @param int $offset The offset. A negative value can be used to move
     *   backwards through the file which is useful when SEEK_END is used as
     *   the {@link whence} value.
     * @param int $whence {@link whence} values are: SEEK_SET - Set
     *   position equal to {@link offset} bytes. SEEK_CUR - Set position to
     *   current location plus {@link offset}. SEEK_END - Set position to
     *   end-of-file plus {@link offset}. If {@link whence} is not specified,
     *   it is assumed to be SEEK_SET.
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function fseek($offset, $whence){}

    /**
     * Gathers the statistics of the file. Behaves identically to {@link
     * fstat}.
     * 
     * @return array
     * @since PHP 5 >= 5.1.0
     **/
    function fstat(){}

    /**
     * Returns the position of the file pointer which represents the current
     * offset in the file stream.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function ftell(){}

    /**
     * Truncates the file to {@link size} bytes.
     * 
     * @param int $size The size to truncate to.
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function ftruncate($size){}

    /**
     * Writes the contents of {@link string} to the file
     * 
     * @param string $str The string to be written to the file.
     * @param int $length If the {@link length} argument is given, writing
     *   will stop after {@link length} bytes have been written or the end of
     *   {@link string} is reached, whichever comes first.
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function fwrite($str, $length){}

    /**
     * An SplFileObject does not have children so this method returns .
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function getChildren(){}

    /**
     * Gets the delimiter and enclosure character used for parsing CSV
     * fields.
     * 
     * @return array
     * @since PHP 5 >= 5.2.0
     **/
    function getCsvControl(){}

    /**
     * Gets the flags set for an instance of SplFileObject as an integer.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getFlags(){}

    /**
     * Gets the maximum line length as set by SplFileObject::setMaxLineLen.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function getMaxLineLen(){}

    /**
     * An SplFileObject does not have children so this method always return .
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function hasChildren(){}

    /**
     * Gets the current line number.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Moves ahead to the next line in the file.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Rewinds the file back to the first line.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Seek to specified line in the file.
     * 
     * @param int $line_pos The zero-based line number to seek to.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function seek($line_pos){}

    /**
     * Sets the delimiter and enclosure character for parsing CSV fields.
     * 
     * @param string $delimiter The field delimiter (one character only).
     * @param string $enclosure The field enclosure character (one
     *   character only).
     * @param string $escape The field escape character (one character
     *   only).
     * @return void
     * @since PHP 5 >= 5.2.0
     **/
    function setCsvControl($delimiter, $enclosure, $escape){}

    /**
     * Sets the flags to be used by the SplFileObject.
     * 
     * @param int $flags Bit mask of the flags to set. See SplFileObject
     *   constants for the available flags.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setFlags($flags){}

    /**
     * Sets the maximum length of a line to be read.
     * 
     * @param int $max_len The maximum length of a line.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function setMaxLineLen($max_len){}

    /**
     * Check whether EOF has been reached.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

    /**
     * Construct a new file object.
     * 
     * @param string $filename The file to read.
     * @param string $open_mode The mode in which to open the file. See
     *   {@link fopen} for a list of allowed modes.
     * @param bool $use_include_path Whether to search in the include_path
     *   for {@link filename}.
     * @param resource $context A valid context resource created with
     *   {@link stream_context_create}.
     * @since PHP 5 >= 5.1.0
     **/
    function __construct($filename, $open_mode, $use_include_path, $context){}

}
/**
 * The SplFixedArray class provides the main functionalities of array.
 * The main differences between a SplFixedArray and a normal PHP array is
 * that the SplFixedArray is of fixed length and allows only integers
 * within the range as indexes. The advantage is that it allows a faster
 * array implementation.
 **/
class SplFixedArray implements Iterator, ArrayAccess, Countable {
    /**
     * Returns the size of the array.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function count(){}

    /**
     * Get the current array element.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * Import the PHP array {@link array} in a new SplFixedArray instance
     * 
     * @param array $array The array to import.
     * @param boolean $save_indexes Try to save the numeric indexes used in
     *   the original array.
     * @return SplFixedArray
     * @since PHP 5 >= 5.3.0
     **/
    function fromArray($array, $save_indexes){}

    /**
     * Gets the size of the array.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function getSize(){}

    /**
     * Returns the current array index.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Move the iterator to the next array entry.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * Checks whether the requested index {@link index} exists.
     * 
     * @param int $index The index being checked.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function offsetExists($index){}

    /**
     * Returns the value at the index {@link index}.
     * 
     * @param int $index The index with the value.
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function offsetGet($index){}

    /**
     * Sets the value at the specified {@link index} to {@link newval}.
     * 
     * @param int $index The index being set.
     * @param mixed $newval The new value for the {@link index}.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function offsetSet($index, $newval){}

    /**
     * Unsets the value at the specified index.
     * 
     * @param int $index The index being unset.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function offsetUnset($index){}

    /**
     * Rewinds the iterator to the beginning.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * Change the size of an array to the new size of {@link size}.
     * 
     * @param int $size The new array size.
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function setSize($size){}

    /**
     * Returns a PHP array from the fixed array.
     * 
     * @return array
     * @since PHP 5 >= 5.3.0
     **/
    function toArray(){}

    /**
     * Checks if the array contains any more elements.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function valid(){}

}
/**
 * The SplFloat class is used to enforce strong typing of the float type.
 **/
class SplFloat {
}
/**
 * The SplHeap class provides the main functionalities of an Heap.
 **/
class SplHeap implements Iterator, Countable {
    /**
     * Compare {@link value1} with {@link value2}.
     * 
     * @param mixed $value1 The value of the first node being compared.
     * @param mixed $value2 The value of the second node being compared.
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function compare($value1, $value2){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function count(){}

    /**
     * Get the current datastructure node.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function extract(){}

    /**
     * Insert {@link value} in the heap.
     * 
     * @param mixed $value The value to insert.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function insert($value){}

    /**
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function isEmpty(){}

    /**
     * This function returns the current node index
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Extracts the top node from the heap.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function recoverFromCorruption(){}

    /**
     * This rewinds the iterator to the beginning. This is a no-op for heaps
     * as the iterator is virtual and in fact never moves from the top of the
     * heap.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function top(){}

    /**
     * Checks if the heap contains any more nodes.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function valid(){}

}
/**
 * The SplInt class is used to enforce strong typing of the integer type.
 **/
class SplInt {
}
/**
 * The SplMaxHeap class provides the main functionalities of a heap,
 * keeping the maximum on the top.
 **/
class SplMaxHeap extends SplHeap implements Iterator, Countable {
    /**
     * Compare {@link value1} with {@link value2}.
     * 
     * @param mixed $value1 The value of the first node being compared.
     * @param mixed $value2 The value of the second node being compared.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function compare($value1, $value2){}

}
/**
 * The SplMinHeap class provides the main functionalities of a heap,
 * keeping the minimum on the top.
 **/
class SplMinHeap extends SplHeap implements Iterator, Countable {
    /**
     * Compare {@link value1} with {@link value2}.
     * 
     * @param mixed $value1 The value of the first node being compared.
     * @param mixed $value2 The value of the second node being compared.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function compare($value1, $value2){}

}
/**
 * The SplObjectStorage class provides a map from objects to data or, by
 * ignoring data, an object set. This dual purpose can be useful in many
 * cases involving the need to uniquely identify objects.
 **/
class SplObjectStorage implements Countable, Iterator, Traversable, Serializable, ArrayAccess {
    /**
     * Adds all objects-data pairs from a different storage in the current
     * storage.
     * 
     * @param SplObjectStorage $storage The storage you want to import.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function addAll($storage){}

    /**
     * Adds an object inside the storage, and optionaly associate it to some
     * data.
     * 
     * @param object $object The object to add.
     * @param mixed $data The data to associate with the object.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function attach($object, $data){}

    /**
     * Checks if the storage contains the object provided.
     * 
     * @param object $object The object to look for.
     * @return boolean
     * @since PHP 5 >= 5.1.0
     **/
    function contains($object){}

    /**
     * Counts the number of objects in the storage.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function count(){}

    /**
     * Returns the current storage entry.
     * 
     * @return object
     * @since PHP 5 >= 5.1.0
     **/
    function current(){}

    /**
     * Removes the object from the storage.
     * 
     * @param object $object The object to remove.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function detach($object){}

    /**
     * Returns the data, or info, associated with the object pointed by the
     * current iterator position.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function getInfo(){}

    /**
     * Returns the index at which the iterator currently is.
     * 
     * @return int
     * @since PHP 5 >= 5.1.0
     **/
    function key(){}

    /**
     * Moves the iterator to the next object in the storage.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function next(){}

    /**
     * Checks whether an object exists in the storage.
     * 
     * @param object $object The object to look for.
     * @return boolean
     * @since PHP 5 >= 5.3.0
     **/
    function offsetExists($object){}

    /**
     * Returns the data associated with an object in the storage.
     * 
     * @param object $object The object to look for.
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function offsetGet($object){}

    /**
     * Associate data to an object in the storage.
     * 
     * @param object $object The object to associate data with.
     * @param mixed $info The data to associate with the object.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function offsetSet($object, $info){}

    /**
     * Removes an object from the storage.
     * 
     * @param object $object The object to remove.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function offsetUnset($object){}

    /**
     * Removes objects contained in another storage from the current storage.
     * 
     * @param SplObjectStorage $storage The storage containing the elements
     *   to remove.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function removeAll($storage){}

    /**
     * Rewind the iterator to the first storage element.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function rewind(){}

    /**
     * Returns a string representation of the storage.
     * 
     * @return string
     * @since PHP 5 >= 5.2.2
     **/
    function serialize(){}

    /**
     * Associates data, or info, with the object currently pointed to by the
     * iterator.
     * 
     * @param mixed $data The data to associate with the current iterator
     *   entry.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setInfo($data){}

    /**
     * Unserializes storage entries and attach them to the current storage.
     * 
     * @param string $serialized The serialized representation of a
     *   storage.
     * @return void
     * @since PHP 5 >= 5.2.2
     **/
    function unserialize($serialized){}

    /**
     * Returns if the current iterator entry is valid.
     * 
     * @return boolean
     * @since PHP 5 >= 5.1.0
     **/
    function valid(){}

}
/**
 * The interface is used alongside to implement the Observer Design
 * Pattern.
 **/
interface SplObserver {
    /**
     * This method is called when any SplSubject to which the observer is
     * attached calls SplSubject::notify.
     * 
     * @param SplSubject $subject The SplSubject notifying the observer of
     *   an update.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function update($subject);

}
/**
 * The SplPriorityQueue class provides the main functionalities of an
 * prioritized queue, implemented using a heap.
 **/
class SplPriorityQueue implements Iterator, Countable {
    /**
     * Compare {@link priority1} with {@link priority2}.
     * 
     * @param mixed $priority1 The priority of the first node being
     *   compared.
     * @param mixed $priority2 The priority of the second node being
     *   compared.
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function compare($priority1, $priority2){}

    /**
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function count(){}

    /**
     * Get the current datastructure node.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function current(){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function extract(){}

    /**
     * Insert {@link value} with the priority {@link priority} in the queue.
     * 
     * @param mixed $value The value to insert.
     * @param mixed $priority The associated priority.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function insert($value, $priority){}

    /**
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function isEmpty(){}

    /**
     * This function returns the current node index
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function key(){}

    /**
     * Extracts the top node from the queue.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function next(){}

    /**
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function recoverFromCorruption(){}

    /**
     * This rewinds the iterator to the beginning. This is a no-op for heaps
     * as the iterator is virtual and in fact never moves from the top of the
     * heap.
     * 
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function rewind(){}

    /**
     * @param int $flags Defines what is extracted by
     *   SplPriorityQueue::current, SplPriorityQueue::top and
     *   SplPriorityQueue::extract. The default mode is
     *   SplPriorityQueue::EXTR_DATA.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setExtractFlags($flags){}

    /**
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function top(){}

    /**
     * Checks if the queue contains any more nodes.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function valid(){}

}
/**
 * The SplQueue class provides the main functionalities of a queue
 * implemented using a doubly linked list.
 **/
class SplQueue extends SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
    /**
     * Dequeues {@link value} from the top of of the queue.
     * 
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function dequeue(){}

    /**
     * Enqueues {@link value} at the end of the queue.
     * 
     * @param mixed $value The value to enqueue.
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function enqueue($value){}

    /**
     * @param int $mode There is only one iteration parameter you can
     *   modify. The default mode is: SplDoublyLinkedList::IT_MODE_FIFO |
     *   SplDoublyLinkedList::IT_MODE_KEEP
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setIteratorMode($mode){}

}
/**
 * The SplStack class provides the main functionalities of a stack
 * implemented using a doubly linked list.
 **/
class SplStack extends SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
    /**
     * @param int $mode There is only one iteration parameter you can
     *   modify. The default mode is 0x2 : SplDoublyLinkedList::IT_MODE_LIFO
     *   | SplDoublyLinkedList::IT_MODE_KEEP
     * @return void
     * @since PHP 5 >= 5.3.0
     **/
    function setIteratorMode($mode){}

}
/**
 * The SplString class is used to enforce strong typing of the string
 * type.
 **/
class SplString {
}
/**
 * The interface is used alongside to implement the Observer Design
 * Pattern.
 **/
interface SplSubject {
    /**
     * Attaches an SplObserver so that it can be notified of updates.
     * 
     * @param SplObserver $observer The SplObserver to attach.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function attach($observer);

    /**
     * Detaches an observer from the subject to no longer notify it of
     * updates.
     * 
     * @param SplObserver $observer The SplObserver to detach.
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function detach($observer);

    /**
     * Notifies all attached observers.
     * 
     * @return void
     * @since PHP 5 >= 5.1.0
     **/
    function notify();

}
/**
 * The SplTempFileObject class offers an object oriented interface for a
 * temporary file.
 **/
class SplTempFileObject extends SplFileObject implements SeekableIterator, Iterator, Traversable, RecursiveIterator {
    /**
     * Construct a new temporary file object.
     * 
     * @param integer $max_memory The maximum amount of memory (in bytes,
     *   default is 2 MB) for the temporary file to use. If the temporary
     *   file exceeds this size, it will be moved to a file in the system's
     *   temp directory. If {@link max_memory} is negative, only memory will
     *   be used. If {@link max_memory} is zero, no memory will be used.
     * @since PHP 5 >= 5.1.2
     **/
    function __construct($max_memory){}

}
/**
 * A class that interfaces SQLite 3 databases.
 **/
class SQLite3 {
    /**
     * Returns the number of database rows that were changed (or inserted or
     * deleted) by the most recent SQL statement.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function changes(){}

    /**
     * Closes the database connection.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function close(){}

    /**
     * Registers a PHP function or user-defined function for use as an SQL
     * aggregate function for use within SQL statements.
     * 
     * @param string $name Name of the SQL aggregate to be created or
     *   redefined.
     * @param mixed $step_callback The name of a PHP function or
     *   user-defined function to apply as a callback for every item in the
     *   aggregate.
     * @param mixed $final_callback The name of a PHP function or
     *   user-defined function to apply as a callback at the end of the
     *   aggregate data.
     * @param int $argument_count The number of arguments that the SQL
     *   aggregate takes. If this parameter is negative, then the SQL
     *   aggregate may take any number of arguments.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function createAggregate($name, $step_callback, $final_callback, $argument_count){}

    /**
     * Registers a PHP function or user-defined function for use as an SQL
     * scalar function for use within SQL statements.
     * 
     * @param string $name Name of the SQL function to be created or
     *   redefined.
     * @param mixed $callback The name of a PHP function or user-defined
     *   function to apply as a callback, defining the behavior of the SQL
     *   function.
     * @param int $argument_count The number of arguments that the SQL
     *   function takes. If this parameter is negative, then the SQL function
     *   may take any number of arguments.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function createFunction($name, $callback, $argument_count){}

    /**
     * Returns a string that has been properly escaped for safe inclusion in
     * an SQL statement.
     * 
     * @param string $value The string to be escaped.
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function escapeString($value){}

    /**
     * Executes a result-less query against a given database.
     * 
     * @param string $query The SQL query to execute (typically an INSERT,
     *   UPDATE, or DELETE query).
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function exec($query){}

    /**
     * Returns the numeric result code of the most recent failed SQLite
     * request.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function lastErrorCode(){}

    /**
     * Returns English text describing the most recent failed SQLite request.
     * 
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function lastErrorMsg(){}

    /**
     * Returns the row ID of the most recent INSERT into the database.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function lastInsertRowID(){}

    /**
     * Attempts to load an SQLite extension library.
     * 
     * @param string $shared_library The name of the library to load. The
     *   library must be located in the directory specified in the configure
     *   option sqlite3.extension_dir.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function loadExtension($shared_library){}

    /**
     * Opens an SQLite 3 Database. If the build includes encryption, then it
     * will attempt to use the key.
     * 
     * @param string $filename Path to the SQLite database.
     * @param int $flags Optional flags used to determine how to open the
     *   SQLite database. By default, open uses SQLITE3_OPEN_READWRITE |
     *   SQLITE3_OPEN_CREATE. SQLITE3_OPEN_READONLY: Open the database for
     *   reading only. SQLITE3_OPEN_READWRITE: Open the database for reading
     *   and writing. SQLITE3_OPEN_CREATE: Create the database if it does not
     *   exist.
     * @param string $encryption_key An optional encryption key used when
     *   encrypting and decrypting an SQLite database.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function open($filename, $flags, $encryption_key){}

    /**
     * Prepares an SQL statement for execution and returns an SQLite3Stmt
     * object.
     * 
     * @param string $query The SQL query to prepare.
     * @return SQLite3Stmt
     * @since PHP 5 >= 5.3.0
     **/
    function prepare($query){}

    /**
     * Executes an SQL query, returning an SQLite3Result object if the query
     * returns results.
     * 
     * @param string $query The SQL query to execute.
     * @return SQLite3Result
     * @since PHP 5 >= 5.3.0
     **/
    function query($query){}

    /**
     * Executes a query and returns a single result.
     * 
     * @param string $query The SQL query to execute.
     * @param bool $entire_row By default, querySingle returns the value of
     *   the first column returned by the query. If entire_row is , then it
     *   returns an array of the entire first row.
     * @return mixed
     * @since PHP 5 >= 5.3.0
     **/
    function querySingle($query, $entire_row){}

    /**
     * Returns the SQLite3 library version as a string constant and as a
     * number.
     * 
     * @return array
     * @since PHP 5 >= 5.3.0
     **/
    function version(){}

    /**
     * Instantiates an SQLite3 object and opens a connection to an SQLite 3
     * database. If the build includes encryption, then it will attempt to
     * use the key.
     * 
     * @param string $filename Path to the SQLite database.
     * @param int $flags Optional flags used to determine how to open the
     *   SQLite database. By default, open uses SQLITE3_OPEN_READWRITE |
     *   SQLITE3_OPEN_CREATE. SQLITE3_OPEN_READONLY: Open the database for
     *   reading only. SQLITE3_OPEN_READWRITE: Open the database for reading
     *   and writing. SQLITE3_OPEN_CREATE: Create the database if it does not
     *   exist.
     * @param string $encryption_key An optional encryption key used when
     *   encrypting and decrypting an SQLite database.
     * @since PHP 5 >= 5.3.0
     **/
    function __construct($filename, $flags, $encryption_key){}

}
/**
 * A class that handles result sets for the SQLite 3 extension.
 **/
class SQLite3Result {
    /**
     * Returns the name of the column specified by the {@link column_number}.
     * 
     * @param int $column_number The numeric zero-based index of the
     *   column.
     * @return string
     * @since PHP 5 >= 5.3.0
     **/
    function columnName($column_number){}

    /**
     * Returns the type of the column identified by {@link column_number}.
     * 
     * @param int $column_number The numeric zero-based index of the
     *   column.
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function columnType($column_number){}

    /**
     * Fetches a result row as an associative or numerically indexed array or
     * both. By default, fetches as both.
     * 
     * @param int $mode Controls how the next row will be returned to the
     *   caller. This value must be one of either SQLITE3_ASSOC, SQLITE3_NUM,
     *   or SQLITE3_BOTH. SQLITE3_ASSOC: returns an array indexed by column
     *   name as returned in the corresponding result set SQLITE3_NUM:
     *   returns an array indexed by column number as returned in the
     *   corresponding result set, starting at column 0 SQLITE3_BOTH: returns
     *   an array indexed by both column name and number as returned in the
     *   corresponding result set, starting at column 0
     * @return array
     * @since PHP 5 >= 5.3.0
     **/
    function fetchArray($mode){}

    /**
     * Closes the result set.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function finalize(){}

    /**
     * Returns the number of columns in the result set.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function numColumns(){}

    /**
     * Resets the result set back to the first row.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function reset(){}

}
/**
 * A class that handles prepared statements for the SQLite 3 extension.
 **/
class SQLite3Stmt {
    /**
     * Binds a parameter to a statement variable.
     * 
     * @param string $sql_param An string identifying the statement
     *   variable to which the parameter should be bound.
     * @param mixed $param The parameter to bind to a statement variable.
     * @param int $type The data type of the parameter to bind.
     *   SQLITE3_INTEGER: The value is a signed integer, stored in 1, 2, 3,
     *   4, 6, or 8 bytes depending on the magnitude of the value.
     *   SQLITE3_FLOAT: The value is a floating point value, stored as an
     *   8-byte IEEE floating point number. SQLITE3_TEXT: The value is a text
     *   string, stored using the database encoding (UTF-8, UTF-16BE or
     *   UTF-16-LE). SQLITE3_BLOB: The value is a blob of data, stored
     *   exactly as it was input. SQLITE3_NULL: The value is a NULL value.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function bindParam($sql_param, &$param, $type){}

    /**
     * Binds the value of a parameter to a statement variable.
     * 
     * @param string $sql_param An string identifying the statement
     *   variable to which the value should be bound.
     * @param mixed $value The value to bind to a statement variable.
     * @param int $type The data type of the value to bind.
     *   SQLITE3_INTEGER: The value is a signed integer, stored in 1, 2, 3,
     *   4, 6, or 8 bytes depending on the magnitude of the value.
     *   SQLITE3_FLOAT: The value is a floating point value, stored as an
     *   8-byte IEEE floating point number. SQLITE3_TEXT: The value is a text
     *   string, stored using the database encoding (UTF-8, UTF-16BE or
     *   UTF-16-LE). SQLITE3_BLOB: The value is a blob of data, stored
     *   exactly as it was input. SQLITE3_NULL: The value is a NULL value.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function bindValue($sql_param, $value, $type){}

    /**
     * Clears all current bound parameters.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function clear(){}

    /**
     * Closes the prepared statement.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function close(){}

    /**
     * Executes a prepared statement and returns a result set object.
     * 
     * @return SQLite3Result
     * @since PHP 5 >= 5.3.0
     **/
    function execute(){}

    /**
     * Returns the number of parameters within the prepared statement.
     * 
     * @return int
     * @since PHP 5 >= 5.3.0
     **/
    function paramCount(){}

    /**
     * Resets the prepared statement to its state prior to execution. All
     * bindings remain intact after reset.
     * 
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function reset(){}

}
class SQLiteDatabase {
    /**
     * {@link sqlite_array_query} executes the given query and returns an
     * array of the entire result set. It is similar to calling {@link
     * sqlite_query} and then {@link sqlite_fetch_array} for each row in the
     * result set. {@link sqlite_array_query} is significantly faster than
     * the aforementioned.
     * 
     * @param string $query The query to be executed. Data inside the query
     *   should be properly escaped.
     * @param int $result_type The SQLite Database resource; returned from
     *   {@link sqlite_open} when used procedurally. This parameter is not
     *   required when using the object-oriented method.
     * @param bool $decode_binary
     * @return array
     **/
    function arrayQuery($query, $result_type, $decode_binary){}

    /**
     * Set the maximum time, in milliseconds, that SQLite will wait for a
     * {@link dbhandle} to become ready for use.
     * 
     * @param int $milliseconds The SQLite Database resource; returned from
     *   {@link sqlite_open} when used procedurally. This parameter is not
     *   required when using the object-oriented method.
     * @return void
     **/
    function busyTimeout($milliseconds){}

    /**
     * Returns the numbers of rows that were changed by the most recent SQL
     * statement executed against the {@link dbhandle} database handle.
     * 
     * @return int
     **/
    function changes(){}

    /**
     * {@link sqlite_create_aggregate} is similar to {@link
     * sqlite_create_function} except that it registers functions that can be
     * used to calculate a result aggregated across all the rows of a query.
     * 
     * The key difference between this function and {@link
     * sqlite_create_function} is that two functions are required to manage
     * the aggregate; {@link step_func} is called for each row of the result
     * set. Your PHP function should accumulate the result and store it into
     * the aggregation context. Once all the rows have been processed, {@link
     * finalize_func} will be called and it should then take the data from
     * the aggregation context and return the result. Callback functions
     * should return a type understood by SQLite (i.e. scalar type).
     * 
     * @param string $function_name The SQLite Database resource; returned
     *   from {@link sqlite_open} when used procedurally. This parameter is
     *   not required when using the object-oriented method.
     * @param callback $step_func The name of the function used in SQL
     *   statements.
     * @param callback $finalize_func Callback function called for each row
     *   of the result set.
     * @param int $num_args Callback function to aggregate the "stepped"
     *   data from each row.
     * @return void
     **/
    function createAggregate($function_name, $step_func, $finalize_func, $num_args){}

    /**
     * {@link sqlite_create_function} allows you to register a PHP function
     * with SQLite as an UDF (User Defined Function), so that it can be
     * called from within your SQL statements.
     * 
     * The UDF can be used in any SQL statement that can call functions, such
     * as SELECT and UPDATE statements and also in triggers.
     * 
     * @param string $function_name The SQLite Database resource; returned
     *   from {@link sqlite_open} when used procedurally. This parameter is
     *   not required when using the object-oriented method.
     * @param callback $callback The name of the function used in SQL
     *   statements.
     * @param int $num_args Callback function to handle the defined SQL
     *   function.
     * @return void
     **/
    function createFunction($function_name, $callback, $num_args){}

    /**
     * {@link sqlite_fetch_column_types} returns an array of column data
     * types from the specified {@link table_name} table.
     * 
     * @param string $table_name The table name to query.
     * @param int $result_type The SQLite Database resource; returned from
     *   {@link sqlite_open} when used procedurally. This parameter is not
     *   required when using the object-oriented method.
     * @return array
     **/
    function fetchColumnTypes($table_name, $result_type){}

    /**
     * Returns the error code from the last operation performed on {@link
     * dbhandle} (the database handle), or 0 when no error occurred. A human
     * readable description of the error code can be retrieved using {@link
     * sqlite_error_string}.
     * 
     * @return int
     **/
    function lastError(){}

    /**
     * Returns the rowid of the row that was most recently inserted into the
     * database {@link dbhandle}, if it was created as an auto-increment
     * field.
     * 
     * @return int
     **/
    function lastInsertRowid(){}

    /**
     * Executes an SQL statement given by the {@link query} against a given
     * database handle.
     * 
     * @param string $query The SQLite Database resource; returned from
     *   {@link sqlite_open} when used procedurally. This parameter is not
     *   required when using the object-oriented method.
     * @param int $result_type The query to be executed. Data inside the
     *   query should be properly escaped.
     * @param string $error_msg
     * @return SQLiteResult
     **/
    function query($query, $result_type, &$error_msg){}

    /**
     * Executes an SQL statement given by the {@link query} against a given
     * database handle (specified by the {@link dbhandle} parameter).
     * 
     * @param string $query The SQLite Database resource; returned from
     *   {@link sqlite_open} when used procedurally. This parameter is not
     *   required when using the object-oriented method.
     * @param string $error_msg The query to be executed. Data inside the
     *   query should be properly escaped.
     * @return bool
     **/
    function queryExec($query, &$error_msg){}

    /**
     * @param string $query
     * @param bool $first_row_only
     * @param bool $decode_binary
     * @return array
     **/
    function singleQuery($query, $first_row_only, $decode_binary){}

    /**
     * {@link sqlite_unbuffered_query} is identical to {@link sqlite_query}
     * except that the result that is returned is a sequential forward-only
     * result set that can only be used to read each row, one after the
     * other.
     * 
     * This function is ideal for generating things such as HTML tables where
     * you only need to process one row at a time and don't need to randomly
     * access the row data.
     * 
     * @param string $query The SQLite Database resource; returned from
     *   {@link sqlite_open} when used procedurally. This parameter is not
     *   required when using the object-oriented method.
     * @param int $result_type The query to be executed. Data inside the
     *   query should be properly escaped.
     * @param string $error_msg
     * @return SQLiteUnbuffered
     **/
    function unbufferedQuery($query, $result_type, &$error_msg){}

}
class SQLiteResult {
    /**
     * Fetches the value of a column named {@link index_or_name} (if it is a
     * string), or of the ordinal column numbered {@link index_or_name} (if
     * it is an integer) from the current row of the query result handle
     * {@link result}.
     * 
     * @param mixed $index_or_name The SQLite result resource. This
     *   parameter is not required when using the object-oriented method.
     * @param bool $decode_binary The column index or name to fetch.
     * @return mixed
     **/
    function column($index_or_name, $decode_binary){}

    /**
     * {@link sqlite_current} is identical to {@link sqlite_fetch_array}
     * except that it does not advance to the next row prior to returning the
     * data; it returns the data from the current position only.
     * 
     * @param int $result_type The SQLite result resource. This parameter
     *   is not required when using the object-oriented method.
     * @param bool $decode_binary
     * @return array
     **/
    function current($result_type, $decode_binary){}

    /**
     * Fetches the next row from the given {@link result} handle. If there
     * are no more rows, returns , otherwise returns an associative array
     * representing the row data.
     * 
     * @param int $result_type The SQLite result resource. This parameter
     *   is not required when using the object-oriented method.
     * @param bool $decode_binary
     * @return array
     **/
    function fetch($result_type, $decode_binary){}

    /**
     * {@link sqlite_fetch_all} returns an array of the entire result set
     * from the {@link result} resource. It is similar to calling {@link
     * sqlite_query} (or {@link sqlite_unbuffered_query}) and then {@link
     * sqlite_fetch_array} for each row in the result set.
     * 
     * @param int $result_type The SQLite result resource. This parameter
     *   is not required when using the object-oriented method.
     * @param bool $decode_binary
     * @return array
     **/
    function fetchAll($result_type, $decode_binary){}

    /**
     * @param string $class_name
     * @param array $ctor_params
     * @param bool $decode_binary
     * @return object
     **/
    function fetchObject($class_name, $ctor_params, $decode_binary){}

    /**
     * {@link sqlite_fetch_single} is identical to {@link sqlite_fetch_array}
     * except that it returns the value of the first column of the rowset.
     * 
     * This is the most optimal way to retrieve data when you are only
     * interested in the values from a single column of data.
     * 
     * @param bool $decode_binary The SQLite result resource. This
     *   parameter is not required when using the object-oriented method.
     * @return string
     **/
    function fetchSingle($decode_binary){}

    /**
     * Given the ordinal column number, {@link field_index}, {@link
     * sqlite_field_name} returns the name of that field in the result set
     * {@link result}.
     * 
     * @param int $field_index The SQLite result resource. This parameter
     *   is not required when using the object-oriented method.
     * @return string
     **/
    function fieldName($field_index){}

    /**
     * Find whether there are more previous rows from the given result
     * handle.
     * 
     * @return bool
     **/
    function hasPrev(){}

    /**
     * {@link sqlite_key} returns the current row index of the buffered
     * result set {@link result}.
     * 
     * @return int
     **/
    function key(){}

    /**
     * {@link sqlite_next} advances the result handle {@link result} to the
     * next row.
     * 
     * @return bool
     **/
    function next(){}

    /**
     * Returns the number of fields in the {@link result} set.
     * 
     * @return int
     **/
    function numFields(){}

    /**
     * Returns the number of rows in the buffered {@link result} set.
     * 
     * @return int
     **/
    function numRows(){}

    /**
     * {@link sqlite_prev} seeks back the {@link result} handle to the
     * previous row.
     * 
     * @return bool
     **/
    function prev(){}

    /**
     * {@link sqlite_rewind} seeks back to the first row in the given result
     * set.
     * 
     * @return bool
     **/
    function rewind(){}

    /**
     * {@link sqlite_seek} seeks to the row given by the parameter {@link
     * rownum}.
     * 
     * @param int $rownum The SQLite result resource. This parameter is not
     *   required when using the object-oriented method.
     * @return bool
     **/
    function seek($rownum){}

    /**
     * {@link sqlite_fetch_single} is identical to {@link sqlite_fetch_array}
     * except that it returns the value of the first column of the rowset.
     * 
     * This is the most optimal way to retrieve data when you are only
     * interested in the values from a single column of data.
     * 
     * @param bool $decode_binary The SQLite result resource. This
     *   parameter is not required when using the object-oriented method.
     * @return string
     **/
    function sqlite_fetch_string($decode_binary){}

    /**
     * Finds whether more rows are available from the given result handle.
     * 
     * @return bool
     **/
    function valid(){}

}
/**
 * Created by typecasting to object.
 **/
class stdClass {
}
/**
 * Represents a connection between PHP and a Stomp compliant Message
 * Broker.
 **/
class Stomp {
    /**
     * Rolls back a transaction in progress.
     * 
     * @param string $transaction_id The transaction to abort.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function abort($transaction_id, $headers){}

    /**
     * Acknowledges consumption of a message from a subscription using client
     * acknowledgment.
     * 
     * @param mixed $msg The message/messageId to be acknowledged.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function ack($msg, $headers){}

    /**
     * Starts a transaction.
     * 
     * @param string $transaction_id The transaction id.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function begin($transaction_id, $headers){}

    /**
     * Commits a transaction in progress.
     * 
     * @param string $transaction_id The transaction id.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function commit($transaction_id, $headers){}

    /**
     * Gets the last stomp error.
     * 
     * @return string
     * @since PECL stomp >= 0.1.0
     **/
    function error(){}

    /**
     * Gets read timeout
     * 
     * @return array
     * @since PECL stomp >= 0.3.0
     **/
    function getReadTimeout(){}

    /**
     * Gets the current stomp session ID.
     * 
     * @return string
     * @since PECL stomp >= 0.1.0
     **/
    function getSessionId(){}

    /**
     * Indicates whether or not there is a frame ready to read.
     * 
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function hasFrame(){}

    /**
     * Reads the next frame. It is possible to instantiate an object of a
     * specific class, and pass parameters to that class's constructor.
     * 
     * @param string $class_name The name of the class to instantiate. If
     *   not specified, a stompFrame object is returned.
     * @return stompframe
     * @since PECL stomp >= 0.1.0
     **/
    function readFrame($class_name){}

    /**
     * Sends a message to the Message Broker.
     * 
     * @param string $destination Where to send the message
     * @param mixed $msg Message to send.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function send($destination, $msg, $headers){}

    /**
     * Sets read timeout.
     * 
     * @param int $seconds The seconds part of the timeout to be set.
     * @param int $microseconds The microseconds part of the timeout to be
     *   set.
     * @return void
     * @since PECL stomp >= 0.3.0
     **/
    function setReadTimeout($seconds, $microseconds){}

    /**
     * Registers to listen to a given destination.
     * 
     * @param string $destination Destination to subscribe to.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function subscribe($destination, $headers){}

    /**
     * Removes an existing subscription.
     * 
     * @param string $destination Subscription to remove.
     * @param array $headers
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function unsubscribe($destination, $headers){}

    /**
     * Opens a connection to a stomp compliant Message Broker.
     * 
     * @param string $broker The broker URI
     * @param string $username The username.
     * @param string $password The password.
     * @since PECL stomp >= 0.1.0
     **/
    function __construct($broker, $username, $password){}

    /**
     * Closes a previously opened connection.
     * 
     * @return bool
     * @since PECL stomp >= 0.1.0
     **/
    function __destruct(){}

}
/**
 * Represents an error raised by the stomp extension. See for more
 * information about Exceptions in PHP.
 **/
class StompException extends Exception {
}
/**
 * Represents a message which was sent or received from a Stomp compliant
 * Message Broker.
 **/
class StompFrame {
    /**
     * Constructor.
     * 
     * @param string $command Frame command
     * @param array $headers Frame headers ().
     * @param string $body Frame body.
     * @since PECL stomp >= 0.1.0
     **/
    function __construct($command, $headers, $body){}

}
/**
 * Allows you to implement your own protocol handlers and streams for use
 * with all the other filesystem functions (such as , etc.).
 * 
 * An instance of this class is initialized as soon as a stream function
 * tries to access the protocol it is associated with.
 **/
class streamWrapper {
    /**
     * This method is called in response to {@link closedir}.
     * 
     * Any resources which were locked, or allocated, during opening and use
     * of the directory stream should be released.
     * 
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function dir_closedir(){}

    /**
     * This method is called in response to {@link opendir}.
     * 
     * @param string $path Specifies the URL that was passed to {@link
     *   opendir}.
     * @param int $options Whether or not to enforce safe_mode (0x04).
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function dir_opendir($path, $options){}

    /**
     * This method is called in response to {@link readdir}.
     * 
     * @return string
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function dir_readdir(){}

    /**
     * This method is called in response to {@link rewinddir}.
     * 
     * Should reset the output generated by streamWrapper::dir_readdir. i.e.:
     * The next call to streamWrapper::dir_readdir should return the first
     * entry in the location returned by streamWrapper::dir_opendir.
     * 
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function dir_rewinddir(){}

    /**
     * This method is called in response to {@link mkdir}.
     * 
     * @param string $path Directory which should be created.
     * @param int $mode The value passed to {@link mkdir}.
     * @param int $options A bitwise mask of values, such as
     *   STREAM_MKDIR_RECURSIVE.
     * @return bool
     * @since PHP 5
     **/
    function mkdir($path, $mode, $options){}

    /**
     * This method is called in response to {@link rename}.
     * 
     * Should attempt to rename {@link path_from} to {@link path_to}
     * 
     * @param string $path_from The URL to the current file.
     * @param string $path_to The URL which the {@link path_from} should be
     *   renamed to.
     * @return bool
     * @since PHP 5
     **/
    function rename($path_from, $path_to){}

    /**
     * This method is called in response to {@link rmdir}.
     * 
     * @param string $path The directory URL which should be removed.
     * @param int $options A bitwise mask of values, such as
     *   STREAM_MKDIR_RECURSIVE.
     * @return bool
     * @since PHP 5
     **/
    function rmdir($path, $options){}

    /**
     * This method is called in response to {@link stream_select}.
     * 
     * @param int $cast_as Can be STREAM_CAST_FOR_SELECT when {@link
     *   stream_select} is calling {@link stream_cast} or
     *   STREAM_CAST_AS_STREAM when {@link stream_cast} is called for other
     *   uses.
     * @return resource
     * @since PHP 5 >= 5.3.0
     **/
    function stream_cast($cast_as){}

    /**
     * This method is called in response to {@link fclose}.
     * 
     * All resources that were locked, or allocated, by the wrapper should be
     * released.
     * 
     * @return void
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_close(){}

    /**
     * This method is called in response to {@link feof}.
     * 
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_eof(){}

    /**
     * This method is called in response to {@link fflush}.
     * 
     * If you have cached data in your stream but not yet stored it into the
     * underlying storage, you should do so now.
     * 
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_flush(){}

    /**
     * This method is called in response to {@link flock}, when {@link
     * file_put_contents} (when {@link flags} contains LOCK_EX), {@link
     * stream_set_blocking} and when closing the stream (LOCK_UN).
     * 
     * @param mode $operation {@link operation} is one of the following:
     *   LOCK_SH to acquire a shared lock (reader). LOCK_EX to acquire an
     *   exclusive lock (writer). LOCK_UN to release a lock (shared or
     *   exclusive). LOCK_NB if you don't want {@link flock} to block while
     *   locking. (not supported on Windows)
     * @return bool
     * @since PHP 5
     **/
    function stream_lock($operation){}

    /**
     * This method is called immediately after the wrapper is initialized
     * (f.e. by {@link fopen} and {@link file_get_contents}).
     * 
     * @param string $path Specifies the URL that was passed to the
     *   original function.
     * @param string $mode The mode used to open the file, as detailed for
     *   {@link fopen}.
     * @param int $options Holds additional flags set by the streams API.
     *   It can hold one or more of the following values OR'd together. Flag
     *   Description STREAM_USE_PATH If {@link path} is relative, search for
     *   the resource using the include_path. STREAM_REPORT_ERRORS If this
     *   flag is set, you are responsible for raising errors using {@link
     *   trigger_error} during opening of the stream. If this flag is not
     *   set, you should not raise any errors.
     * @param string $opened_path If the {@link path} is opened
     *   successfully, and STREAM_USE_PATH is set in {@link options}, {@link
     *   opened_path} should be set to the full path of the file/resource
     *   that was actually opened.
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_open($path, $mode, $options, &$opened_path){}

    /**
     * This method is called in response to {@link fread} and {@link fgets}.
     * 
     * @param int $count How many bytes of data from the current position
     *   should be returned.
     * @return string
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_read($count){}

    /**
     * This method is called in response to {@link fseek}.
     * 
     * The read/write position of the stream should be updated according to
     * the {@link offset} and {@link whence}.
     * 
     * @param int $offset The stream offset to seek to.
     * @param int $whence Possible values: SEEK_SET - Set position equal to
     *   {@link offset} bytes. SEEK_CUR - Set position to current location
     *   plus {@link offset}. SEEK_END - Set position to end-of-file plus
     *   {@link offset}.
     * @return bool
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_seek($offset, $whence){}

    /**
     * This method is called to set options on the stream.
     * 
     * @param int $option One of: STREAM_OPTION_BLOCKING (The method was
     *   called in response to {@link stream_set_blocking})
     *   STREAM_OPTION_READ_TIMEOUT (The method was called in response to
     *   {@link stream_set_timeout}) STREAM_OPTION_WRITE_BUFFER (The method
     *   was called in response to {@link stream_set_write_buffer})
     * @param int $arg1 If {@link option} is STREAM_OPTION_BLOCKING:
     *   requested blocking mode (1 meaning block 0 not blocking).
     *   STREAM_OPTION_READ_TIMEOUT: the timeout in seconds.
     *   STREAM_OPTION_WRITE_BUFFER: buffer mode (STREAM_BUFFER_NONE or
     *   STREAM_BUFFER_FULL).
     * @param int $arg2 If {@link option} is STREAM_OPTION_BLOCKING: This
     *   option is not set. STREAM_OPTION_READ_TIMEOUT: the timeout in
     *   microseconds. STREAM_OPTION_WRITE_BUFFER: the requested buffer size.
     * @return bool
     * @since PHP 5 >= 5.3.0
     **/
    function stream_set_option($option, $arg1, $arg2){}

    /**
     * This method is called in response to {@link fstat}.
     * 
     * @return array
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_stat(){}

    /**
     * This method is called in response to {@link ftell}.
     * 
     * @return int
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_tell(){}

    /**
     * This method is called in response to {@link fwrite}.
     * 
     * @param string $data Should be stored into the underlying stream.
     * @return int
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function stream_write($data){}

    /**
     * This method is called in response to {@link unlink}.
     * 
     * @param string $path The file URL which should be deleted.
     * @return bool
     * @since PHP 5
     **/
    function unlink($path){}

    /**
     * This method is called in response to all {@link stat} related
     * functions, such as: {@link chmod} (only when safe_mode is enabled)
     * {@link copy} {@link fileperms} {@link fileinode} {@link filesize}
     * {@link fileowner} {@link filegroup} {@link fileatime} {@link
     * filemtime} {@link filectime} {@link filetype} {@link is_writable}
     * {@link is_readable} {@link is_executable} {@link is_file} {@link
     * is_dir} {@link is_link} {@link file_exists} {@link lstat} {@link stat}
     * SplFileInfo::getPerms SplFileInfo::getInode SplFileInfo::getSize
     * SplFileInfo::getOwner SplFileInfo::getGroup SplFileInfo::getATime
     * SplFileInfo::getMTime SplFileInfo::getCTime SplFileInfo::getType
     * SplFileInfo::isWritable SplFileInfo::isReadable
     * SplFileInfo::isExecutable SplFileInfo::isFile SplFileInfo::isDir
     * SplFileInfo::isLink RecursiveDirectoryIterator::hasChildren
     * 
     * @param string $path The file path or URL to stat. Note that in the
     *   case of a URL, it must be a :// delimited URL. Other URL forms are
     *   not supported.
     * @param int $flags Holds additional flags set by the streams API. It
     *   can hold one or more of the following values OR'd together. Flag
     *   Description STREAM_URL_STAT_LINK For resources with the ability to
     *   link to other resource (such as an HTTP Location: forward, or a
     *   filesystem symlink). This flag specified that only information about
     *   the link itself should be returned, not the resource pointed to by
     *   the link. This flag is set in response to calls to {@link lstat},
     *   {@link is_link}, or {@link filetype}. STREAM_URL_STAT_QUIET If this
     *   flag is set, your wrapper should not raise any errors. If this flag
     *   is not set, you are responsible for reporting errors using the
     *   {@link trigger_error} function during stating of the path.
     * @return array
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function url_stat($path, $flags){}

    /**
     * Called when opening the stream wrapper, right before
     * streamWrapper::stream_open.
     * 
     * @since PHP 4 >= 4.3.2, PHP 5
     **/
    function __construct(){}

}
/**
 * SWFAction.
 **/
class SWFAction {
    /**
     * Creates a new SWFAction and compiles the given {@link script} in it.
     * 
     * @param string $script An ActionScript snippet to associate with the
     *   SWFAction. See for more details.
     * @return SWFAction
     * @since PHP 5
     **/
    function __construct($script){}

}
/**
 * SWFBitmap.
 **/
class SWFBitmap {
    /**
     * Returns the bitmap's height.
     * 
     * @return float
     * @since PHP 5
     **/
    function getHeight(){}

    /**
     * Returns the bitmap's width.
     * 
     * @return float
     * @since PHP 5
     **/
    function getWidth(){}

    /**
     * Creates the new SWFBitmap object from the given {@link file}.
     * 
     * @param mixed $file You can't import png images directly, though-
     *   have to use the png2dbl utility to make a dbl ("define bits
     *   lossless") file from the png. The reason for this is that I don't
     *   want a dependency on the png library in ming- autoconf should solve
     *   this, but that's not set up yet.
     * @param mixed $alphafile An MSK file to be used as an alpha mask for
     *   a JPEG image.
     * @return SWFBitmap
     * @since PHP 5
     **/
    function __construct($file, $alphafile){}

}
/**
 * SWFButton.
 **/
class SWFButton {
    /**
     * Adds the given {@link action} to the button for the given conditions.
     * 
     * @param SWFAction $action An SWFAction, returned by .
     * @param int $flags The following {@link flags} are valid:
     *   SWFBUTTON_MOUSEOVER, SWFBUTTON_MOUSEOUT, SWFBUTTON_MOUSEUP,
     *   SWFBUTTON_MOUSEUPOUTSIDE, SWFBUTTON_MOUSEDOWN, SWFBUTTON_DRAGOUT and
     *   SWFBUTTON_DRAGOVER.
     * @return void
     * @since PHP 5
     **/
    function addAction($action, $flags){}

    /**
     * @param SWFSound $sound
     * @param int $flags
     * @return SWFSoundInstance
     * @since PHP 5
     **/
    function addASound($sound, $flags){}

    /**
     * Adds the given {@link shape} to the button.
     * 
     * @param SWFShape $shape An SWFShape instance
     * @param int $flags The following {@link flags} are valid:
     *   SWFBUTTON_UP, SWFBUTTON_OVER, SWFBUTTON_DOWN and SWFBUTTON_HIT.
     *   SWFBUTTON_HIT isn't ever displayed, it defines the hit region for
     *   the button. That is, everywhere the hit shape would be drawn is
     *   considered a "touchable" part of the button.
     * @return void
     * @since PHP 5
     **/
    function addShape($shape, $flags){}

    /**
     * Sets the action to be performed when the button is clicked.
     * 
     * This is a shortcut for called with the SWFBUTTON_MOUSEUP flag.
     * 
     * @param SWFAction $action An SWFAction, returned by .
     * @return void
     * @since PHP 5
     **/
    function setAction($action){}

    /**
     * {@link swfbutton->setdown} alias for addShape(shape, SWFBUTTON_DOWN).
     * 
     * @param SWFShape $shape
     * @return void
     * @since PHP 5
     **/
    function setDown($shape){}

    /**
     * {@link swfbutton->sethit} alias for addShape(shape, SWFBUTTON_HIT).
     * 
     * @param SWFShape $shape
     * @return void
     * @since PHP 5
     **/
    function setHit($shape){}

    /**
     * @param int $flag This parameter can be used for a slight different
     *   behavior of buttons. You can set it to 0 (off) or 1 (on).
     * @return void
     * @since PHP 5
     **/
    function setMenu($flag){}

    /**
     * {@link swfbutton->setover} alias for addShape(shape, SWFBUTTON_OVER).
     * 
     * @param SWFShape $shape
     * @return void
     * @since PHP 5
     **/
    function setOver($shape){}

    /**
     * {@link swfbutton->setup} alias for addShape(shape, SWFBUTTON_UP).
     * 
     * @param SWFShape $shape
     * @return void
     * @since PHP 5
     **/
    function setUp($shape){}

    /**
     * Creates a new Button.
     * 
     * @return SWFButton
     * @since PHP 5
     **/
    function __construct(){}

}
/**
 * SWFDisplayItem.
 **/
class SWFDisplayItem {
    /**
     * @param SWFAction $action An SWFAction, returned by .
     * @param int $flags
     * @return void
     * @since PHP 5
     **/
    function addAction($action, $flags){}

    /**
     * {@link swfdisplayitem->addcolor} adds the color to this item's color
     * transform. The color is given in its RGB form.
     * 
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $a
     * @return void
     * @since PHP 5
     **/
    function addColor($red, $green, $blue, $a){}

    /**
     * @return void
     * @since PHP 5
     **/
    function endMask(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getRot(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getX(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getXScale(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getXSkew(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getY(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getYScale(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getYSkew(){}

    /**
     * {@link swfdisplayitem->move} moves the current object by ({@link
     * dx},{@link dy}) from its current position.
     * 
     * @param float $dx
     * @param float $dy
     * @return void
     * @since PHP 5
     **/
    function move($dx, $dy){}

    /**
     * {@link swfdisplayitem->moveto} moves the current object to ({@link
     * x},{@link y}) in global coordinates.
     * 
     * @param float $x
     * @param float $y
     * @return void
     * @since PHP 5
     **/
    function moveTo($x, $y){}

    /**
     * {@link swfdisplayitem->multcolor} multiplies the item's color
     * transform by the given values.
     * 
     * @param float $red Value of red component
     * @param float $green Value of green component
     * @param float $blue Value of blue component
     * @param float $a Value of alpha component
     * @return void
     * @since PHP 5
     **/
    function multColor($red, $green, $blue, $a){}

    /**
     * {@link swfdisplayitem->remove} removes this object from the movie's
     * display list.
     * 
     * @return void
     * @since PHP 5
     **/
    function remove(){}

    /**
     * {@link swfdisplayitem->rotate} rotates the current object by {@link
     * angle} degrees from its current rotation.
     * 
     * @param float $angle
     * @return void
     * @since PHP 5
     **/
    function rotate($angle){}

    /**
     * {@link swfdisplayitem->rotateto} set the current object rotation to
     * {@link angle} degrees in global coordinates.
     * 
     * @param float $angle
     * @return void
     * @since PHP 5
     **/
    function rotateTo($angle){}

    /**
     * {@link swfdisplayitem->scale} scales the current object by ({@link
     * dx},{@link dy}) from its current size.
     * 
     * @param float $dx
     * @param float $dy
     * @return void
     * @since PHP 5
     **/
    function scale($dx, $dy){}

    /**
     * {@link swfdisplayitem->scaleto} scales the current object to ({@link
     * x},{@link y}) in global coordinates.
     * 
     * @param float $x
     * @param float $y
     * @return void
     * @since PHP 5
     **/
    function scaleTo($x, $y){}

    /**
     * {@link swfdisplayitem->setdepth} sets the object's z-order to {@link
     * depth}. Depth defaults to the order in which instances are created (by
     * adding a shape/text to a movie)- newer ones are on top of older ones.
     * If two objects are given the same depth, only the later-defined one
     * can be moved.
     * 
     * @param int $depth
     * @return void
     * @since PHP 5
     **/
    function setDepth($depth){}

    /**
     * @param int $level
     * @return void
     * @since PHP 5
     **/
    function setMaskLevel($level){}

    /**
     * @param float $a
     * @param float $b
     * @param float $c
     * @param float $d
     * @param float $x
     * @param float $y
     * @return void
     * @since PHP 5
     **/
    function setMatrix($a, $b, $c, $d, $x, $y){}

    /**
     * {@link swfdisplayitem->setname} sets the object's name to {@link
     * name}, for targetting with action script. Only useful on sprites.
     * 
     * @param string $name
     * @return void
     * @since PHP 5
     **/
    function setName($name){}

    /**
     * {@link swfdisplayitem->setratio} sets the object's ratio to {@link
     * ratio}. Obviously only useful for morphs.
     * 
     * @param float $ratio
     * @return void
     * @since PHP 5
     **/
    function setRatio($ratio){}

    /**
     * {@link swfdisplayitem->skewx} adds {@link ddegrees} to current x-skew.
     * 
     * @param float $ddegrees
     * @return void
     * @since PHP 5
     **/
    function skewX($ddegrees){}

    /**
     * {@link swfdisplayitem->skewxto} sets the x-skew to {@link degrees}.
     * For {@link degrees} is 1.0, it means a 45-degree forward slant. More
     * is more forward, less is more backward.
     * 
     * @param float $degrees
     * @return void
     * @since PHP 5
     **/
    function skewXTo($degrees){}

    /**
     * {@link swfdisplayitem->skewy} adds {@link ddegrees} to current y-skew.
     * 
     * @param float $ddegrees
     * @return void
     * @since PHP 5
     **/
    function skewY($ddegrees){}

    /**
     * {@link swfdisplayitem->skewyto} sets the y-skew to {@link degrees}.
     * For {@link degrees} is 1.0, it means a 45-degree forward slant. More
     * is more upward, less is more downward.
     * 
     * @param float $degrees
     * @return void
     * @since PHP 5
     **/
    function skewYTo($degrees){}

}
/**
 * The object allows you to transform (scale, skew, rotate) bitmap and
 * gradient fills.
 * 
 * objects are created by the method.
 **/
class SWFFill {
    /**
     * Moves the fill origin to the given global coordinates.
     * 
     * @param float $x X-coordinate
     * @param float $y Y-coordinate
     * @return void
     * @since PHP 5
     **/
    function moveTo($x, $y){}

    /**
     * Sets the fill rotation to the given {@link angle}.
     * 
     * @param float $angle The rotation angle, in degrees.
     * @return void
     * @since PHP 5
     **/
    function rotateTo($angle){}

    /**
     * Sets the fill scale to the given coordinates.
     * 
     * @param float $x X-coordinate
     * @param float $y Y-coordinate
     * @return void
     * @since PHP 5
     **/
    function scaleTo($x, $y){}

    /**
     * Sets the fill x-skew to {@link x}.
     * 
     * @param float $x When {@link x} is 1.0, it is a 45-degree forward
     *   slant. More is more forward, less is more backward.
     * @return void
     * @since PHP 5
     **/
    function skewXTo($x){}

    /**
     * Sets the fill y-skew to {@link y}.
     * 
     * @param float $y When {@link y} is 1.0, it is a 45-degree upward
     *   slant. More is more upward, less is more downward.
     * @return void
     * @since PHP 5
     **/
    function skewYTo($y){}

}
/**
 * The object represent a reference to the font definition, for us with
 * and .
 **/
class SWFFont {
    /**
     * @return float
     * @since PHP 5
     **/
    function getAscent(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getDescent(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getLeading(){}

    /**
     * @param int $code
     * @return string
     * @since PHP 5
     **/
    function getShape($code){}

    /**
     * @param string $string
     * @return float
     * @since PHP 5
     **/
    function getUTF8Width($string){}

    /**
     * {@link swffont->getwidth} returns the string {@link string}'s width,
     * using font's default scaling. You'll probably want to use the {@link
     * swftext} version of this method which uses the text object's scale.
     * 
     * @param string $string
     * @return float
     * @since PHP 5
     **/
    function getWidth($string){}

    /**
     * If {@link filename} is the name of an FDB file (i.e., it ends in
     * ".fdb"), load the font definition found in said file. Otherwise,
     * create a browser-defined font reference.
     * 
     * FDB ("font definition block") is a very simple wrapper for the SWF
     * DefineFont2 block which contains a full description of a font. One may
     * create FDB files from SWT Generator template files with the included
     * makefdb utility- look in the util directory off the main ming
     * distribution directory.
     * 
     * Browser-defined fonts don't contain any information about the font
     * other than its name. It is assumed that the font definition will be
     * provided by the movie player. The fonts _serif, _sans, and _typewriter
     * should always be available. For example:
     * 
     * <?php $f = newSWFFont("_sans"); ?>
     * 
     * will give you the standard sans-serif font, probably the same as what
     * you'd get with <font name="sans-serif"> in HTML.
     * 
     * @param string $filename
     * @return SWFFont
     * @since PHP 5
     **/
    function __construct($filename){}

}
/**
 * SWFFontChar.
 **/
class SWFFontChar {
    /**
     * @param string $char
     * @return void
     * @since PHP 5
     **/
    function addChars($char){}

    /**
     * @param string $char
     * @return void
     * @since PHP 5
     **/
    function addUTF8Chars($char){}

}
/**
 * SWFGradient.
 **/
class SWFGradient {
    /**
     * {@link swfgradient->addentry} adds an entry to the gradient list.
     * {@link ratio} is a number between 0 and 1 indicating where in the
     * gradient this color appears. Thou shalt add entries in order of
     * increasing ratio.
     * 
     * {@link red}, {@link green}, {@link blue} is a color (RGB mode).
     * 
     * @param float $ratio
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return void
     * @since PHP 5
     **/
    function addEntry($ratio, $red, $green, $blue, $alpha){}

    /**
     * {@link swfgradient} creates a new SWFGradient object.
     * 
     * This simple example will draw a big black-to-white gradient as
     * background, and a reddish disc in its center. {@link swfgradient}
     * example
     * 
     * <?php
     * 
     * $m = new SWFMovie(); $m->setDimension(320, 240);
     * 
     * $s = new SWFShape();
     * 
     * // first gradient- black to white $g = new SWFGradient();
     * $g->addEntry(0.0, 0, 0, 0); $g->addEntry(1.0, 0xff, 0xff, 0xff);
     * 
     * $f = $s->addFill($g, SWFFILL_LINEAR_GRADIENT); $f->scaleTo(0.01);
     * $f->moveTo(160, 120); $s->setRightFill($f); $s->drawLine(320, 0);
     * $s->drawLine(0, 240); $s->drawLine(-320, 0); $s->drawLine(0, -240);
     * 
     * $m->add($s);
     * 
     * $s = new SWFShape();
     * 
     * // second gradient- radial gradient from red to transparent $g = new
     * SWFGradient(); $g->addEntry(0.0, 0xff, 0, 0, 0xff); $g->addEntry(1.0,
     * 0xff, 0, 0, 0);
     * 
     * $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT); $f->scaleTo(0.005);
     * $f->moveTo(160, 120); $s->setRightFill($f); $s->drawLine(320, 0);
     * $s->drawLine(0, 240); $s->drawLine(-320, 0); $s->drawLine(0, -240);
     * 
     * $m->add($s);
     * 
     * header('Content-type: application/x-shockwave-flash'); $m->output();
     * ?>
     * 
     * @return SWFGradient
     * @since PHP 5
     **/
    function __construct(){}

}
/**
 * The methods here are sort of weird. It would make more sense to just
 * have newSWFMorph(shape1, shape2);, but as things are now, shape2 needs
 * to know that it's the second part of a morph. (This, because it starts
 * writing its output as soon as it gets drawing commands- if it kept its
 * own description of its shapes and wrote on completion this and some
 * other things would be much easier.)
 **/
class SWFMorph {
    /**
     * Gets the morph's starting shape.
     * 
     * @return SWFShape
     * @since PHP 5
     **/
    function getShape1(){}

    /**
     * Gets the morph's ending shape.
     * 
     * @return SWFShape
     * @since PHP 5
     **/
    function getShape2(){}

    /**
     * Creates a new SWFMorph object.
     * 
     * Also called a "shape tween". This thing lets you make those tacky
     * twisting things that make your computer choke. Oh, joy!
     * 
     * @return SWFMorph
     * @since PHP 5
     **/
    function __construct(){}

}
/**
 * is a movie object representing an SWF movie.
 **/
class SWFMovie {
    /**
     * Adds an SWF object {@link instance} to the current movie.
     * 
     * @param object $instance Any type of object instance, like , , .
     * @return mixed
     * @since PHP 5
     **/
    function add($instance){}

    /**
     * @param SWFCharacter $char
     * @param string $name
     * @return void
     * @since PHP 5
     **/
    function addExport($char, $name){}

    /**
     * @param SWFFont $font
     * @return mixed
     * @since PHP 5
     **/
    function addFont($font){}

    /**
     * @param string $libswf
     * @param string $name
     * @return SWFSprite
     * @since PHP 5
     **/
    function importChar($libswf, $name){}

    /**
     * @param string $libswf
     * @param string $name
     * @return SWFFontChar
     * @since PHP 5
     **/
    function importFont($libswf, $name){}

    /**
     * @param string $label
     * @return void
     * @since PHP 5
     **/
    function labelFrame($label){}

    /**
     * Moves to the next frame of the animation.
     * 
     * @return void
     * @since PHP 5
     **/
    function nextFrame(){}

    /**
     * Dumps the SWFMovie.
     * 
     * Don't forget to send the Content-Type HTTP header file before using
     * this function, in order to display the movie in a browser.
     * 
     * @param int $compression The compression level can be a value between
     *   0 and 9, defining the SWF compression similar to gzip compression.
     *   This parameter is only available as of Flash MX (6).
     * @return int
     * @since PHP 5
     **/
    function output($compression){}

    /**
     * Removes the given object {@link instance} from the display list.
     * 
     * @param object $instance
     * @return void
     * @since PHP 5.2.1-5.3.0, PECL ming SVN
     **/
    function remove($instance){}

    /**
     * Saves the SWF movie to the specified {@link filename}.
     * 
     * @param string $filename The path to the saved SWF document.
     * @param int $compression The compression level can be a value between
     *   0 and 9, defining the SWF compression similar to gzip compression.
     *   This parameter is only available as of Flash MX (6).
     * @return int
     * @since PHP 5
     **/
    function save($filename, $compression){}

    /**
     * @param resource $x
     * @param int $compression The compression level can be a value between
     *   0 and 9, defining the SWF compression similar to gzip compression.
     *   This parameter is only available as of Flash MX (6).
     * @return int
     * @since PHP 5
     **/
    function saveToFile($x, $compression){}

    /**
     * Sets the background color.
     * 
     * Why is there no rgba version? Think about it, you might want to let
     * the HTML background show through. There's a way to do that, but it
     * only works on IE4. Search the site for details.
     * 
     * @param int $red Value of red component
     * @param int $green Value of green component
     * @param int $blue Value of blue component
     * @return void
     * @since PHP 5
     **/
    function setbackground($red, $green, $blue){}

    /**
     * Sets the movie's dimension to the specified {@link width} and {@link
     * height}.
     * 
     * @param float $width The movie width.
     * @param float $height The movie height.
     * @return void
     * @since PHP 5
     **/
    function setDimension($width, $height){}

    /**
     * Sets the total number of frames in the animation to the given {@link
     * number}.
     * 
     * @param int $number The number of frames.
     * @return void
     * @since PHP 5
     **/
    function setFrames($number){}

    /**
     * Sets the frame rate to the specified {@link rate}.
     * 
     * Animation will slow down if the player can't render frames fast
     * enough- unless there's a streaming sound, in which case display frames
     * are sacrificed to keep sound from skipping.
     * 
     * @param float $rate The frame rate, in frame per seconds.
     * @return void
     * @since PHP 5
     **/
    function setRate($rate){}

    /**
     * @param SWFSound $sound
     * @return SWFSoundInstance
     * @since PHP 5
     **/
    function startSound($sound){}

    /**
     * @param SWFSound $sound
     * @return void
     * @since PHP 5
     **/
    function stopSound($sound){}

    /**
     * Streams the given MP3 file {@link mp3file}.
     * 
     * This method is not very robust in dealing with oddities (can skip over
     * an initial ID3 tag, but that's about it).
     * 
     * Note that the movie isn't smart enough to put enough frames in to
     * contain the entire mp3 stream- you'll have to add (length of song *
     * frames per second) frames to get the entire stream in.
     * 
     * @param mixed $mp3file Can be a file pointer returned by {@link
     *   fopen} or the MP3 data, as a binary string.
     * @param float $skip Number of seconds to skip.
     * @return int
     * @since PHP 5
     **/
    function streamMP3($mp3file, $skip){}

    /**
     * @return void
     * @since PHP 5
     **/
    function writeExports(){}

    /**
     * Creates a new movie object, representing an SWF movie.
     * 
     * @param int $version The desired SWF version. Default is 4.
     * @return SWFMovie
     * @since PHP 5
     **/
    function __construct($version){}

}
/**
 * SWFPrebuiltClip.
 **/
class SWFPrebuiltClip {
    /**
     * @param mixed $file
     * @return SWFPrebuiltClip
     * @since PHP 5.0.5-5.3.0, PECL ming SVN
     **/
    function __construct($file){}

}
/**
 * SWFShape.
 **/
class SWFShape {
    /**
     * {@link SWFShape->addFill} adds a solid fill to the shape's list of
     * fill styles. {@link SWFShape->addFill} accepts three different types
     * of arguments.
     * 
     * {@link red}, {@link green}, {@link blue} is a color (RGB mode).
     * 
     * The {@link bitmap} argument is an {@link SWFBitmap} object. The {@link
     * flags} argument can be one of the following values:
     * SWFFILL_CLIPPED_BITMAP, SWFFILL_TILED_BITMAP, SWFFILL_LINEAR_GRADIENT
     * or SWFFILL_RADIAL_GRADIENT. Default is SWFFILL_TILED_BITMAP for
     * SWFBitmap and SWFFILL_LINEAR_GRADIENT for SWFGradient.
     * 
     * The {@link gradient} argument is an {@link SWFGradient} object. The
     * flags argument can be one of the following values :
     * SWFFILL_RADIAL_GRADIENT or SWFFILL_LINEAR_GRADIENT. Default is
     * SWFFILL_LINEAR_GRADIENT. I'm sure about this one. Really.
     * 
     * {@link SWFShape->addFill} returns an {@link SWFFill} object for use
     * with the {@link SWFShape->setLeftFill} and {@link
     * SWFShape->setRightFill} functions described below.
     * 
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return SWFFill
     * @since PHP 5
     **/
    function addFill($red, $green, $blue, $alpha){}

    /**
     * @param float $r
     * @param float $startAngle
     * @param float $endAngle
     * @return void
     * @since PHP 5
     **/
    function drawArc($r, $startAngle, $endAngle){}

    /**
     * @param float $r
     * @return void
     * @since PHP 5
     **/
    function drawCircle($r){}

    /**
     * @param float $bx
     * @param float $by
     * @param float $cx
     * @param float $cy
     * @param float $dx
     * @param float $dy
     * @return int
     * @since PHP 5
     **/
    function drawCubic($bx, $by, $cx, $cy, $dx, $dy){}

    /**
     * @param float $bx
     * @param float $by
     * @param float $cx
     * @param float $cy
     * @param float $dx
     * @param float $dy
     * @return int
     * @since PHP 5
     **/
    function drawCubicTo($bx, $by, $cx, $cy, $dx, $dy){}

    /**
     * @param float $controldx
     * @param float $controldy
     * @param float $anchordx
     * @param float $anchordy
     * @param float $targetdx
     * @param float $targetdy
     * @return int
     * @since PHP 5
     **/
    function drawCurve($controldx, $controldy, $anchordx, $anchordy, $targetdx, $targetdy){}

    /**
     * @param float $controlx
     * @param float $controly
     * @param float $anchorx
     * @param float $anchory
     * @param float $targetx
     * @param float $targety
     * @return int
     * @since PHP 5
     **/
    function drawCurveTo($controlx, $controly, $anchorx, $anchory, $targetx, $targety){}

    /**
     * @param SWFFont $font
     * @param string $character
     * @param int $size
     * @return void
     * @since PHP 5
     **/
    function drawGlyph($font, $character, $size){}

    /**
     * @param float $dx
     * @param float $dy
     * @return void
     * @since PHP 5
     **/
    function drawLine($dx, $dy){}

    /**
     * @param float $x
     * @param float $y
     * @return void
     * @since PHP 5
     **/
    function drawLineTo($x, $y){}

    /**
     * @param float $dx
     * @param float $dy
     * @return void
     * @since PHP 5
     **/
    function movePen($dx, $dy){}

    /**
     * @param float $x
     * @param float $y
     * @return void
     * @since PHP 5
     **/
    function movePenTo($x, $y){}

    /**
     * What this nonsense is about is, every edge segment borders at most two
     * fills. When rasterizing the object, it's pretty handy to know what
     * those fills are ahead of time, so the swf format requires these to be
     * specified.
     * 
     * {@link swfshape->setleftfill} sets the fill on the left side of the
     * edge- that is, on the interior if you're defining the outline of the
     * shape in a counter-clockwise fashion. The fill object is an SWFFill
     * object returned from one of the addFill functions above.
     * 
     * This seems to be reversed when you're defining a shape in a morph,
     * though. If your browser crashes, just try setting the fill on the
     * other side.
     * 
     * @param SWFGradient $fill
     * @return void
     * @since PHP 5
     **/
    function setLeftFill($fill){}

    /**
     * {@link swfshape->setline} sets the shape's line style. {@link width}
     * is the line's width. If {@link width} is 0, the line's style is
     * removed (then, all other arguments are ignored). If {@link width} > 0,
     * then line's color is set to {@link red}, {@link green}, {@link blue}.
     * Last parameter {@link a} is optional.
     * 
     * You must declare all line styles before you use them (see example).
     * 
     * @param SWFShape $shape
     * @return void
     * @since PHP 5
     **/
    function setLine($shape){}

    /**
     * @param SWFGradient $fill
     * @return void
     **/
    function setRightFill($fill){}

    /**
     * Created a new SWFShape object.
     * 
     * @return SWFShape
     * @since PHP 5
     **/
    function __construct(){}

}
/**
 * SWFSound.
 **/
class SWFSound {
    /**
     * @param string $filename
     * @param int $flags
     * @return SWFSound
     * @since PHP 5
     **/
    function __construct($filename, $flags){}

}
/**
 * objects are returned by the and methods.
 **/
class SWFSoundInstance {
    /**
     * @param int $point
     * @return void
     * @since PHP 5
     **/
    function loopCount($point){}

    /**
     * @param int $point
     * @return void
     * @since PHP 5
     **/
    function loopInPoint($point){}

    /**
     * @param int $point
     * @return void
     * @since PHP 5
     **/
    function loopOutPoint($point){}

    /**
     * @return void
     * @since PHP 5
     **/
    function noMultiple(){}

}
/**
 * An is also known as a "movie clip", this allows one to create objects
 * which are animated in their own timelines. Hence, the sprite has most
 * of the same methods as the movie.
 **/
class SWFSprite {
    /**
     * {@link swfsprite->add} adds a {@link swfshape}, a {@link swfbutton}, a
     * {@link swftext}, a {@link swfaction} or a {@link swfsprite} object.
     * 
     * For displayable types ({@link swfshape}, {@link swfbutton}, {@link
     * swftext}, {@link swfaction} or {@link swfsprite}), this returns a
     * handle to the object in a display list.
     * 
     * @param object $object
     * @return void
     * @since PHP 5
     **/
    function add($object){}

    /**
     * @param string $label
     * @return void
     * @since PHP 5
     **/
    function labelFrame($label){}

    /**
     * {@link swfsprite->setframes} moves to the next frame of the animation.
     * 
     * @return void
     * @since PHP 5
     **/
    function nextFrame(){}

    /**
     * {@link swfsprite->remove} remove a {@link swfshape}, a {@link
     * swfbutton}, a {@link swftext}, a {@link swfaction} or a {@link
     * swfsprite} object from the sprite.
     * 
     * @param object $object
     * @return void
     * @since PHP 5
     **/
    function remove($object){}

    /**
     * {@link swfsprite->setframes} sets the total number of frames in the
     * animation to {@link numberofframes}.
     * 
     * @param int $number
     * @return void
     * @since PHP 5
     **/
    function setFrames($number){}

    /**
     * @param SWFSound $sount
     * @return SWFSoundInstance
     * @since PHP 5
     **/
    function startSound($sount){}

    /**
     * @param SWFSound $sount
     * @return void
     * @since PHP 5
     **/
    function stopSound($sount){}

    /**
     * Creates a new SWFSprite object.
     * 
     * @return SWFSprite
     * @since PHP 5
     **/
    function __construct(){}

}
/**
 * SWFText.
 **/
class SWFText {
    /**
     * {@link swftext->addstring} draws the string {@link string} at the
     * current pen (cursor) location. Pen is at the baseline of the text;
     * i.e., ascending text is in the -y direction.
     * 
     * @param string $string
     * @return void
     * @since PHP 5
     **/
    function addString($string){}

    /**
     * @param string $text
     * @return void
     * @since PHP 5
     **/
    function addUTF8String($text){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getAscent(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getDescent(){}

    /**
     * @return float
     * @since PHP 5
     **/
    function getLeading(){}

    /**
     * @param string $string
     * @return float
     * @since PHP 5
     **/
    function getUTF8Width($string){}

    /**
     * Returns the rendered width of the {@link string} at the text object's
     * current font, scale, and spacing settings.
     * 
     * @param string $string
     * @return float
     * @since PHP 5
     **/
    function getWidth($string){}

    /**
     * {@link swftext->moveto} moves the pen (or cursor, if that makes more
     * sense) to ({@link x},{@link y}) in text object's coordinate space. If
     * either is zero, though, value in that dimension stays the same.
     * Annoying, should be fixed.
     * 
     * @param float $x
     * @param float $y
     * @return void
     * @since PHP 5
     **/
    function moveTo($x, $y){}

    /**
     * Changes the current text color.
     * 
     * @param int $red Value of red component
     * @param int $green Value of green component
     * @param int $blue Value of blue component
     * @param int $a Value of alpha component
     * @return void
     * @since PHP 5
     **/
    function setColor($red, $green, $blue, $a){}

    /**
     * {@link swftext->setfont} sets the current font to {@link font}.
     * 
     * @param SWFFont $font
     * @return void
     * @since PHP 5
     **/
    function setFont($font){}

    /**
     * {@link swftext->setheight} sets the current font height to {@link
     * height}. Default is 240.
     * 
     * @param float $height
     * @return void
     * @since PHP 5
     **/
    function setHeight($height){}

    /**
     * {@link swftext->setspacing} sets the current font spacing to {@link
     * spacing}. Default is 1.0. 0 is all of the letters written at the same
     * point. This doesn't really work that well because it inflates the
     * advance across the letter, doesn't add the same amount of spacing
     * between the letters. I should try and explain that better, prolly. Or
     * just fix the damn thing to do constant spacing. This was really just a
     * way to figure out how letter advances work, anyway.. So nyah.
     * 
     * @param float $spacing
     * @return void
     * @since PHP 5
     **/
    function setSpacing($spacing){}

    /**
     * Creates a new SWFText object, fresh for manipulating.
     * 
     * @return void
     * @since PHP 5
     **/
    function __construct(){}

}
/**
 * SWFTextField.
 **/
class SWFTextField {
    /**
     * @param string $chars
     * @return void
     * @since PHP 5
     **/
    function addChars($chars){}

    /**
     * {@link swftextfield->setname} concatenates the string {@link string}
     * to the text field.
     * 
     * @param string $string
     * @return void
     * @since PHP 5
     **/
    function addString($string){}

    /**
     * {@link swftextfield->align} sets the text field alignment to {@link
     * alignement}. Valid values for {@link alignement} are :
     * SWFTEXTFIELD_ALIGN_LEFT, SWFTEXTFIELD_ALIGN_RIGHT,
     * SWFTEXTFIELD_ALIGN_CENTER and SWFTEXTFIELD_ALIGN_JUSTIFY.
     * 
     * @param int $alignement
     * @return void
     * @since PHP 5
     **/
    function align($alignement){}

    /**
     * {@link swftextfield->setbounds} sets the text field width to {@link
     * width} and height to {@link height}. If you don't set the bounds
     * yourself, Ming makes a poor guess at what the bounds are.
     * 
     * @param float $width
     * @param float $height
     * @return void
     * @since PHP 5
     **/
    function setBounds($width, $height){}

    /**
     * {@link swftextfield->setcolor} sets the color of the text field.
     * Default is fully opaque black. Color is represented using RGB system.
     * 
     * @param int $red Value of red component
     * @param int $green Value of green component
     * @param int $blue Value of blue component
     * @param int $a Value of alpha component
     * @return void
     * @since PHP 5
     **/
    function setColor($red, $green, $blue, $a){}

    /**
     * {@link swftextfield->setfont} sets the text field font to the
     * [browser-defined?] {@link font} font.
     * 
     * @param SWFFont $font
     * @return void
     * @since PHP 5
     **/
    function setFont($font){}

    /**
     * {@link swftextfield->setheight} sets the font height of this text
     * field font to the given height {@link height}. Default is 240.
     * 
     * @param float $height
     * @return void
     * @since PHP 5
     **/
    function setHeight($height){}

    /**
     * {@link swftextfield->setindentation} sets the indentation of the first
     * line in the text field, to {@link width}.
     * 
     * @param float $width
     * @return void
     * @since PHP 5
     **/
    function setIndentation($width){}

    /**
     * {@link swftextfield->setleftmargin} sets the left margin width of the
     * text field to {@link width}. Default is 0.
     * 
     * @param float $width
     * @return void
     * @since PHP 5
     **/
    function setLeftMargin($width){}

    /**
     * {@link swftextfield->setlinespacing} sets the line spacing of the text
     * field to the height of {@link height}. Default is 40.
     * 
     * @param float $height
     * @return void
     * @since PHP 5
     **/
    function setLineSpacing($height){}

    /**
     * {@link swftextfield->setmargins} set both margins at once, for the man
     * on the go.
     * 
     * @param float $left
     * @param float $right
     * @return void
     * @since PHP 5
     **/
    function setMargins($left, $right){}

    /**
     * {@link swftextfield->setname} sets the variable name of this text
     * field to {@link name}, for form posting and action scripting purposes.
     * 
     * @param string $name
     * @return void
     * @since PHP 5
     **/
    function setName($name){}

    /**
     * @param float $padding
     * @return void
     * @since PHP 5
     **/
    function setPadding($padding){}

    /**
     * {@link swftextfield->setrightmargin} sets the right margin width of
     * the text field to {@link width}. Default is 0.
     * 
     * @param float $width
     * @return void
     * @since PHP 5
     **/
    function setRightMargin($width){}

    /**
     * {@link swftextfield} creates a new text field object. Text Fields are
     * less flexible than {@link swftext} objects- they can't be rotated,
     * scaled non-proportionally, or skewed, but they can be used as form
     * entries, and they can use browser-defined fonts.
     * 
     * The optional flags change the text field's behavior. It has the
     * following possibles values : SWFTEXTFIELD_DRAWBOX draws the outline of
     * the textfield SWFTEXTFIELD_HASLENGTH SWFTEXTFIELD_HTML allows text
     * markup using HTML-tags SWFTEXTFIELD_MULTILINE allows multiple lines
     * SWFTEXTFIELD_NOEDIT indicates that the field shouldn't be
     * user-editable SWFTEXTFIELD_NOSELECT makes the field non-selectable
     * SWFTEXTFIELD_PASSWORD obscures the data entry SWFTEXTFIELD_WORDWRAP
     * allows text to wrap Flags are combined with the bitwise OR operation.
     * For example,
     * 
     * <?php $t = newSWFTextField(SWFTEXTFIELD_PASSWORD |
     * SWFTEXTFIELD_NOEDIT); ?>
     * 
     * creates a totally useless non-editable password field.
     * 
     * @param int $flags
     * @return SWFTextField
     * @since PHP 5
     **/
    function __construct($flags){}

}
/**
 * SWFVideoStream.
 **/
class SWFVideoStream {
    /**
     * This function returns the number of video-frames of a SWFVideoStream.
     * 
     * @return int
     * @since PHP 5.0.5-5.3.0, PECL ming SVN
     **/
    function getNumFrames(){}

    /**
     * Sets the width and height for streamed videos.
     * 
     * @param int $x Width in pixels.
     * @param int $y Height in pixels.
     * @return void
     * @since PHP 5.0.5-5.3.0, PECL ming SVN
     **/
    function setDimension($x, $y){}

    /**
     * @param string $file
     * @return SWFVideoStream
     * @since PHP 5.0.5-5.3.0, PECL ming SVN
     **/
    function __construct($file){}

}
interface Swish {
    const IN_ALL = 0;
    const IN_BODY = 0;
    const IN_BODY_BIT = 0;
    const IN_COMMENTS = 0;
    const IN_COMMENTS_BIT = 0;
    const IN_EMPHASIZED = 0;
    const IN_EMPHASIZED_BIT = 0;
    const IN_FILE = 0;
    const IN_FILE_BIT = 0;
    const IN_HEAD = 0;
    const IN_HEADER = 0;
    const IN_HEADER_BIT = 0;
    const IN_HEAD_BIT = 0;
    const IN_META = 0;
    const IN_META_BIT = 0;
    const IN_TITLE = 0;
    const IN_TITLE_BIT = 0;
    const META_TYPE_DATE = 0;
    const META_TYPE_STRING = 0;
    const META_TYPE_ULONG = 0;
    const META_TYPE_UNDEF = 0;
    /**
     * @param string $index_name The name of the index file.
     * @return array
     * @since PECL swish >= 0.1.0
     **/
    function getMetaList($index_name);

    /**
     * @param string $index_name The name of the index file.
     * @return array
     * @since PECL swish >= 0.1.0
     **/
    function getPropertyList($index_name);

    /**
     * Prepare and return a search object, which you can later use for
     * unlimited number of queries.
     * 
     * @param string $query Optional query string. The query can be also
     *   set using {@link SwishSearch->execute} method.
     * @return object
     * @since PECL swish >= 0.1.0
     **/
    function prepare($query);

    /**
     * A quick method to execute a search with default parameters.
     * 
     * @param string $query Query string.
     * @return object
     * @since PECL swish >= 0.1.0
     **/
    function query($query);

    /**
     * @param string $index_names The list of index files separated by
     *   spaces.
     * @return void
     * @since PECL swish >= 0.1.0
     **/
    function __construct($index_names);

}
class SwishResult {
    /**
     * @return array
     * @since PECL swish >= 0.1.0
     **/
    function getMetaList(){}

    /**
     * Stems the word based on the fuzzy mode used during indexing. Each
     * result object is linked with its index, so the results are based on
     * this index.
     * 
     * @param string $word The word to stem.
     * @return array
     * @since PECL swish >= 0.1.0
     **/
    function stem($word){}

}
class SwishResults {
    /**
     * @param string $index_name The name of the index used to initialize
     *   Swish object.
     * @return array
     * @since PECL swish >= 0.1.0
     **/
    function getParsedWords($index_name){}

    /**
     * @param string $index_name The name of the index used to initialize
     *   Swish object.
     * @return array
     * @since PECL swish >= 0.1.0
     **/
    function getRemovedStopwords($index_name){}

    /**
     * @return object
     * @since PECL swish >= 0.1.0
     **/
    function nextResult(){}

    /**
     * @param int $position Zero-based position number. Cannot be less than
     *   zero.
     * @return int
     * @since PECL swish >= 0.1.0
     **/
    function seekResult($position){}

}
class SwishSearch {
    /**
     * Searches the index file(s) based on the parameters set in the search
     * object.
     * 
     * @param string $query The query string is an optional parameter, it
     *   can be also set using {@link Swish->prepare} method. The query
     *   string is preserved between executions, so you can set it once, but
     *   execute the search multiple times.
     * @return object
     * @since PECL swish >= 0.1.0
     **/
    function execute($query){}

    /**
     * Reset the search limits previous set by .
     * 
     * @return void
     * @since PECL swish >= 0.1.0
     **/
    function resetLimit(){}

    /**
     * @param string $property Search result property name.
     * @param string $low The lowest value of the property.
     * @param string $high The highest value of the property.
     * @return void
     * @since PECL swish >= 0.1.0
     **/
    function setLimit($property, $low, $high){}

    /**
     * @param string $delimiter Phrase delimiter character. The default
     *   delimiter is double-quotes.
     * @return void
     * @since PECL swish >= 0.1.0
     **/
    function setPhraseDelimiter($delimiter){}

    /**
     * @param string $sort Sort order of the results is a string containing
     *   name of a result property combined with sort direction ("asc" or
     *   "desc"). Examples: "swishrank desc", "swishdocpath asc", "swishtitle
     *   asc", "swishdocsize desc", "swishlastmodified desc" etc.
     * @return void
     * @since PECL swish >= 0.1.0
     **/
    function setSort($sort){}

    /**
     * @param int $structure The structure flag a bitmask is used to limit
     *   search to certain parts of HTML documents (like title, meta, body
     *   etc.). Its possible values are listed below. To combine several
     *   values use bitwise OR operator, see example below.
     * @return void
     * @since PECL swish >= 0.1.0
     **/
    function setStructure($structure){}

}
/**
 * An HTML node in an HTML file, as detected by tidy.
 **/
class Tidy {
    /**
     * Returns warnings and errors which occurred parsing the specified
     * document.
     * 
     * @var string
     **/
    var $errorBuffer;
    /**
     * Returns a tidyNode object starting from the <body> tag of the tidy
     * parse tree.
     * 
     * @return tidyNode
     **/
    function body(){}

    /**
     * This function cleans and repairs the given tidy {@link object}.
     * 
     * @return bool
     **/
    function cleanRepair(){}

    /**
     * Runs diagnostic tests on the given tidy {@link object}, adding some
     * more information about the document in the error buffer.
     * 
     * @return bool
     **/
    function diagnose(){}

    /**
     * Gets the list of the configuration options in use by the given tidy
     * {@link object}.
     * 
     * @return array
     **/
    function getConfig(){}

    /**
     * Returns the detected HTML version for the specified tidy {@link
     * object}.
     * 
     * @return int
     **/
    function getHtmlVer(){}

    /**
     * Returns the value of the specified {@link option} for the specified
     * tidy {@link object}.
     * 
     * @param string $option
     * @return mixed
     **/
    function getOpt($option){}

    /**
     * {@link tidy_get_opt_doc} returns the documentation for the given
     * option name.
     * 
     * @param string $optname
     * @return string
     **/
    function getOptDoc($optname){}

    /**
     * Gets the release date of the Tidy library.
     * 
     * @return string
     **/
    function getRelease(){}

    /**
     * Returns the status for the specified tidy {@link object}.
     * 
     * @return int
     **/
    function getStatus(){}

    /**
     * Returns a tidyNode object starting from the <head> tag of the tidy
     * parse tree.
     * 
     * @return tidyNode
     **/
    function head(){}

    /**
     * Returns a tidyNode object starting from the <html> tag of the tidy
     * parse tree.
     * 
     * @return tidyNode
     **/
    function html(){}

    /**
     * Tells if the document is a XHTML document.
     * 
     * @return bool
     **/
    function isXhtml(){}

    /**
     * Tells if the document is a generic (non HTML/XHTML) XML document.
     * 
     * @return bool
     **/
    function isXml(){}

    /**
     * Parses the given file.
     * 
     * @param string $filename If the {@link filename} parameter is given,
     *   this function will also read that file and initialize the object
     *   with the file, acting like {@link tidy_parse_file}.
     * @param mixed $config The config {@link config} can be passed either
     *   as an array or as a string. If a string is passed, it is interpreted
     *   as the name of the configuration file, otherwise, it is interpreted
     *   as the options themselves. For an explanation about each option, see
     *   .
     * @param string $encoding The {@link encoding} parameter sets the
     *   encoding for input/output documents. The possible values for
     *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
     *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
     * @param bool $use_include_path Search for the file in the
     *   include_path.
     * @return bool
     **/
    function parseFile($filename, $config, $encoding, $use_include_path){}

    /**
     * Parses a document stored in a string.
     * 
     * @param string $input The data to be parsed.
     * @param mixed $config The config {@link config} can be passed either
     *   as an array or as a string. If a string is passed, it is interpreted
     *   as the name of the configuration file, otherwise, it is interpreted
     *   as the options themselves. For an explanation about each option,
     *   visit .
     * @param string $encoding The {@link encoding} parameter sets the
     *   encoding for input/output documents. The possible values for
     *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
     *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
     * @return bool
     **/
    function parseString($input, $config, $encoding){}

    /**
     * Repairs the given file and returns it as a string.
     * 
     * @param string $filename The file to be repaired.
     * @param mixed $config The config {@link config} can be passed either
     *   as an array or as a string. If a string is passed, it is interpreted
     *   as the name of the configuration file, otherwise, it is interpreted
     *   as the options themselves. Check
     *   http://tidy.sourceforge.net/docs/quickref.html for an explanation
     *   about each option.
     * @param string $encoding The {@link encoding} parameter sets the
     *   encoding for input/output documents. The possible values for
     *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
     *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
     * @param bool $use_include_path Search for the file in the
     *   include_path.
     * @return string
     **/
    function repairFile($filename, $config, $encoding, $use_include_path){}

    /**
     * Repairs the given string.
     * 
     * @param string $data The data to be repaired.
     * @param mixed $config The config {@link config} can be passed either
     *   as an array or as a string. If a string is passed, it is interpreted
     *   as the name of the configuration file, otherwise, it is interpreted
     *   as the options themselves. Check for an explanation about each
     *   option.
     * @param string $encoding The {@link encoding} parameter sets the
     *   encoding for input/output documents. The possible values for
     *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
     *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
     * @return string
     **/
    function repairString($data, $config, $encoding){}

    /**
     * Returns a tidyNode object representing the root of the tidy parse
     * tree.
     * 
     * @return tidyNode
     **/
    function root(){}

    /**
     * Constructs a new tidy object.
     * 
     * @param string $filename If the {@link filename} parameter is given,
     *   this function will also read that file and initialize the object
     *   with the file, acting like {@link tidy_parse_file}.
     * @param mixed $config The config {@link config} can be passed either
     *   as an array or as a string. If a string is passed, it is interpreted
     *   as the name of the configuration file, otherwise, it is interpreted
     *   as the options themselves. For an explanation about each option,
     *   visit .
     * @param string $encoding The {@link encoding} parameter sets the
     *   encoding for input/output documents. The possible values for
     *   encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac,
     *   win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.
     * @param bool $use_include_path Search for the file in the
     *   include_path.
     * @return tidy
     * @since PHP 5, PECL tidy >= 0.5.2
     **/
    function __construct($filename, $config, $encoding, $use_include_path){}

}
/**
 * An HTML node in an HTML file, as detected by tidy.
 **/
class tidyNode {
    /**
     * Returns the parent node of the current node.
     * 
     * @return tidyNode
     * @since PHP 5 >= 5.2.2
     **/
    function getParent(){}

    /**
     * Tells if the node has children.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function hasChildren(){}

    /**
     * Tells if the node has siblings.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function hasSiblings(){}

    /**
     * Tells whether the current node is ASP.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function isAsp(){}

    /**
     * Tells if the node is a comment.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function isComment(){}

    /**
     * Tells if the node is part of HTML document.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function isHtml(){}

    /**
     * Tells if the node is JSTE.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function isJste(){}

    /**
     * Tells if the node is PHP.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function isPhp(){}

    /**
     * Tells if the node represents a text (without any markup).
     * 
     * @return bool
     * @since PHP 5 >= 5.0.1
     **/
    function isText(){}

}
/**
 * The main Tokyo Tyrant class
 **/
class TokyoTyrant {
    /**
     * Adds to an int or double value. This increments the value by the given
     * amount and returns the new value. If the key does not exist a new key
     * is created with initial value of the increment parameter.
     * 
     * @param string $key The string key
     * @param number $increment The amount to increment
     * @param int $type TokyoTyrant::RDB_RECINT or TokyoTyrant::RDB_RECDBL
     *   constant. If this parameter is omitted the type is guessed from the
     *   {@link increment} parameters type.
     * @return number
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function add($key, $increment, $type){}

    /**
     * Connects to a remote database
     * 
     * @param string $host The hostname
     * @param int $port The port. Default: 1978
     * @param array $options Connection options: timeout (default: 5.0),
     *   reconnect (default: ) and persistent (default: )
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function connect($host, $port, $options){}

    /**
     * Connects to a database using an uri
     * 
     * @param string $uri An URI to the database. For example
     *   tcp://localhost:1979/
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function connectUri($uri){}

    /**
     * Makes a copy of the current database
     * 
     * @param string $path Path to where to copy the database. The user
     *   running the remote database must have a write access to the
     *   directory.
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function copy($path){}

    /**
     * Executes a remote script extension.
     * 
     * @param string $name Name of the function to execute
     * @param int $options Either TokyoTyrant::RDBXO_LCKREC for record
     *   locking and TokyoTyrant::RDBXO_LCKGLB for global locking.
     * @param string $key The key to pass to the function
     * @param string $value The value to pass to the function
     * @return string
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function ext($name, $options, $key, $value){}

    /**
     * Returns the forward matching keys from the database
     * 
     * @param string $prefix Prefix of the keys
     * @param int $max_recs Maximum records to return
     * @return array
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function fwmKeys($prefix, $max_recs){}

    /**
     * This method is used to return a value or multiple values. This method
     * accepts a string or an array as a value.
     * 
     * @param mixed $keys A string key or an array of string keys
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function get($keys){}

    /**
     * Gets an iterator for iterating all keys / values in the database.
     * 
     * @return TokyoTyrantIterator
     **/
    function getIterator(){}

    /**
     * Returns the number of records in the database
     * 
     * @return int
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function num(){}

    /**
     * Removes a record or multiple records. This method accepts a string for
     * a single key or an array of keys for multiple records.
     * 
     * @param mixed $keys A string key or an array of string keys
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function out($keys){}

    /**
     * Puts a key-value pair into the database or multiple key-value pairs.
     * If {@link keys} is string then the second parameter value defines the
     * value. The second parameter is mandatory if {@link keys} is a string.
     * If the key exists the value will be replaced with new value.
     * 
     * @param mixed $keys A string key or an array of key-value pairs
     * @param string $value The value in case a string key is used
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function put($keys, $value){}

    /**
     * Appends a value into existing key or multiple values if {@link keys}
     * is an array. The second parameter is mandatory if {@link keys} is a
     * string. If the record does not exist a new record is created.
     * 
     * @param mixed $keys A string key or an array of key-value pairs
     * @param string $value The value in case a string key is used
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putCat($keys, $value){}

    /**
     * Puts a key-value pair into the database or multiple key-value pairs.
     * If {@link keys} is string then the second parameter value defines the
     * value. The second parameter is mandatory if {@link keys} is a string.
     * If the key already exists this method throws an exception indicating
     * that the records exists.
     * 
     * @param mixed $keys A string key or an array of key-value pairs
     * @param string $value The string value
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putKeep($keys, $value){}

    /**
     * Puts a key-value pair into the database or multiple key-value pairs.
     * If {@link keys} is string then the second parameter value defines the
     * value. The second parameter is mandatory if {@link keys} is a string.
     * This method does not wait for the response from the server.
     * 
     * @param mixed $keys A string key or an array of key-value pairs
     * @param string $value The value in case a string key is used
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putNr($keys, $value){}

    /**
     * Concatenate to a record and shift to left.
     * 
     * @param string $key A string key
     * @param string $value The value to concatenate
     * @param int $width The width of the record
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putShl($key, $value, $width){}

    /**
     * Restore the database from the update log.
     * 
     * @param string $log_dir Directory where the log is
     * @param int $timestamp Beginning timestamp with microseconds
     * @param bool $check_consistency Whether to check consistency:
     *   Default:
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function restore($log_dir, $timestamp, $check_consistency){}

    /**
     * Sets the replication master of the database
     * 
     * @param string $host Hostname of the replication master. If the
     *   replication is disabled.
     * @param int $port Port of the replication master
     * @param int $timestamp Beginning timestamp with microseconds
     * @param bool $check_consistency Whether to check consistency.
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function setMaster($host, $port, $timestamp, $check_consistency){}

    /**
     * Returns the size of a value by key
     * 
     * @param string $key The key of which size to fetch
     * @return int
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function size($key){}

    /**
     * Returns statistics of the remote database
     * 
     * @return array
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function stat(){}

    /**
     * Synchronizes the database on to the physical device
     * 
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function sync(){}

    /**
     * Tunes database connection options.
     * 
     * @param float $timeout The objects timeout value (default: 5.0)
     * @param int $options Bitmask of options to tune. This can be either 0
     *   or TokyoTyrant::RDBT_RECON. It is recommended not to change the
     *   second parameter.
     * @return TokyoTyrant
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function tune($timeout, $options){}

    /**
     * Empties a remote database
     * 
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function vanish(){}

    /**
     * Constructs a new TokyoTyrant object and optionally connects to the
     * database
     * 
     * @param string $host The hostname. Default:
     * @param int $port port number. Default: 1978
     * @param array $options Connection options: timeout (default: 5.0),
     *   reconnect (default: ) and persistent (default: )
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function __construct($host, $port, $options){}

}
/**
 * TokyoTyrantException
 **/
class tokyotyrantexception extends Exception {
}
/**
 * Provides an iterator for TokyoTyrant and TokyoTyrantTable objects. The
 * iterator iterates over over all keys and values in the database.
 * TokyoTyrantIterator was added in version 0.2.0.
 **/
class TokyoTyrantIterator {
    /**
     * Returns the current value during iteration.
     * 
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function current(){}

    /**
     * Returns the current key.
     * 
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function key(){}

    /**
     * Move to next key during iteration and return it's value.
     * 
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function next(){}

    /**
     * Rewinds the iterator for new iteration. Called automatically at the
     * beginning of foreach.
     * 
     * @return void
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function rewind(){}

    /**
     * Checks whether the internal pointer points to valid element.
     * 
     * @return boolean
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function valid(){}

    /**
     * Construct a new TokyoTyrantIterator object. One connection can have
     * multiple iterators but it is not quaranteed that all items are
     * traversed in that case. {@link object} parameter can be either an of
     * instance TokyoTyrant or TokyoTyrantTable.
     * 
     * @param mixed $object
     * @return TokyoTyrantIterator
     * @since PECL tokyo_tyrant >= 0.2.0
     **/
    function __construct($object){}

}
/**
 * This class is used to query the table databases
 **/
class TokyoTyrantQuery implements Iterator, Traversable {
    /**
     * Adds a condition to the query. Condition can be something like: get
     * all keys which value matches expr.
     * 
     * @param string $name Name of the column in the condition
     * @param int $op The operator. One of the TokyoTyrant::RDBQC_*
     *   constants
     * @param string $expr The expression
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function addCond($name, $op, $expr){}

    /**
     * Returns a count of how many records a query returns.
     * 
     * @return int
     **/
    function count(){}

    /**
     * Returns the current element. Part of Iterator interface
     * 
     * @return array
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function current(){}

    /**
     * Get the hint string of the query. The hint string contains information
     * about an executed query and it could be compared to for example MySQL
     * EXPLAIN statement.
     * 
     * @return string
     **/
    function hint(){}

    /**
     * Returns the current key. Part of the Iterator interface
     * 
     * @return string
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function key(){}

    /**
     * Executes multiple queries on a database and returns matching records.
     * The current object is always the left most object in the search.
     * 
     * @param array $queries Array of TokyoTyrantQuery objects
     * @param int $type One of the TokyoTyrant::RDBMS_* constants
     * @return array
     **/
    function metaSearch($queries, $type){}

    /**
     * Returns the next result in the resultset. Part of the Iterator
     * interface.
     * 
     * @return array
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function next(){}

    /**
     * Removes all records that match the query. Works exactly like search
     * but removes the records instead of returning them.
     * 
     * @return TokyoTyrantQuery
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function out(){}

    /**
     * Rewind the resultset and executes the query if it has not been
     * executed. Part of the Iterator interface.
     * 
     * @return bool
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function rewind(){}

    /**
     * Executes a search on the table database. Returns an array of arrays
     * containing the matching records. In the returned array the first level
     * is the primary key of the data and the second level is the row data.
     * 
     * @return array
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function search(){}

    /**
     * Set the maximum amount of records to return on a query.
     * 
     * @param int $max Maximum amount of records. Default: -1
     * @param int $skip How many records to skip from the start. Default:
     *   -1
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function setLimit($max, $skip){}

    /**
     * Checks if the current item is valid. Part of the Iterator interface
     * 
     * @return bool
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function valid(){}

    /**
     * Construct a new query object
     * 
     * @param TokyoTyrantTable $table TokyoTyrantTable object with active
     *   database connection
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function __construct($table){}

}
/**
 * Provides an API to the table databases. A table database can be create
 * using the following command: . In Tokyo Tyrant the table API is a
 * schemaless database which can store arbitrary amount of key-value
 * pairs under a single primary key.
 **/
class TokyoTyrantTable extends TokyoTyrant {
    /**
     * This method is not supported with table databases.
     * 
     * @param string $key The string key
     * @param mixed $increment The amount to increment
     * @param string $type TokyoTyrant::RDB_RECINT or
     *   TokyoTyrant::RDB_RECDBL constant. If this parameter is omitted the
     *   type is guessed from the {@link increment} parameters type.
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function add($key, $increment, $type){}

    /**
     * Generates an unique id inside the table database. In table databases
     * rows are referenced using a numeric primary key.
     * 
     * @return int
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function genUid(){}

    /**
     * Gets a row from table database. {@link keys} is a single integer for
     * the primary key of the row or an array of integers for multiple rows.
     * 
     * @param mixed $keys The primary key, can be a string or an integer
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function get($keys){}

    /**
     * Gets an iterator for iterating all keys / values in the database.
     * 
     * @return TokyoTyrantIterator
     **/
    function getIterator(){}

    /**
     * Get a query object to execute searches on the database
     * 
     * @return TokyoTyrantQuery
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function getQuery(){}

    /**
     * Removes records from a table database.
     * 
     * @param mixed $keys A single integer key or an array of integers
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function out($keys){}

    /**
     * Puts a new row into the database. This method parameters are {@link
     * key} which is the primary key of the row, passing will generate a new
     * unique id. {@link value} is an array containing the row contents which
     * is usually key value pairs.
     * 
     * @param string $key The primary key of the row
     * @param array $columns The row contents
     * @return int
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function put($key, $columns){}

    /**
     * This method can be used to add new columns to existing records.
     * Existing keys will be left unmodified but any new columns will be
     * appended to the row. Passing null as key will generate a new row.
     * 
     * @param string $key The primary key of the row or
     * @param array $columns Array of row contents
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putCat($key, $columns){}

    /**
     * Puts a new record into the database. If the key already exists this
     * method throws an exception indicating that the records exists.
     * 
     * @param string $key The primary key of the row or
     * @param array $columns Array of the row contents
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putKeep($key, $columns){}

    /**
     * This method is not supported on table databases. Calling this method
     * through TokyoTyrantTable is considered an error and an
     * TokyoTyrantException will be thrown.
     * 
     * @param mixed $keys A string key or an array of key-value pairs
     * @param string $value The value in case a string key is used
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putNr($keys, $value){}

    /**
     * This method is not supported on table databases. Calling this method
     * through TokyoTyrantTable is considered an error and an
     * TokyoTyrantException will be thrown.
     * 
     * @param string $key A string key
     * @param string $value The value to concatenate
     * @param int $width The width of the record
     * @return void
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function putShl($key, $value, $width){}

    /**
     * Sets an index on a specified column. The index type is one of the
     * TokyoTyrant::RDBIT_* constants. Passing TokyoTyrant::RDBIT_VOID
     * removes the index.
     * 
     * @param string $column The name of the column
     * @param int $type The index type
     * @return mixed
     * @since PECL tokyo_tyrant >= 0.1.0
     **/
    function setIndex($column, $type){}

}
/**
 * Interface to detect if a class is traversable using .
 * 
 * Abstract base interface that cannot be implemented alone. Instead it
 * must be implemented by either or .
 * 
 * This interface has no methods, its only purpose is to be the base
 * interface for all traversable classes.
 **/
interface Traversable {
}
/**
 * Exception thrown when you try to remove an element of an empty
 * container
 **/
class UnderflowException extends RuntimeException {
}
/**
 * Exception thrown if a value does not match with a set of values
 **/
class UnexpectedValueException extends RuntimeException {
}
/**
 * The XMLReader extension is an XML Pull parser. The reader acts as a
 * cursor going forward on the document stream and stopping at each node
 * on the way.
 **/
interface XMLReader {
    const ATTRIBUTE = 0;
    const CDATA = 0;
    const COMMENT = 0;
    const DEFAULTATTRS = 0;
    const DOC = 0;
    const DOC_FRAGMENT = 0;
    const DOC_TYPE = 0;
    const ELEMENT = 0;
    const END_ELEMENT = 0;
    const END_ENTITY = 0;
    const ENTITY = 0;
    const ENTITY_REF = 0;
    const LOADDTD = 0;
    const NONE = 0;
    const NOTATION = 0;
    const PI = 0;
    const SIGNIFICANT_WHITESPACE = 0;
    const SUBST_ENTITIES = 0;
    const TEXT = 0;
    const VALIDATE = 0;
    const WHITESPACE = 0;
    const XML_DECLARATION = 0;
    /**
     * Closes the input the XMLReader object is currently parsing.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function close();

    /**
     * This method copies the current node and returns the appropriate DOM
     * object.
     * 
     * @return DOMNode
     * @since PHP 5 >= 5.1.2
     **/
    function expand();

    /**
     * Returns the value of a named attribute or an empty string if attribute
     * does not exist or not positioned on an element node.
     * 
     * @param string $name The name of the attribute.
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getAttribute($name);

    /**
     * Returns the value of an attribute based on its position or an empty
     * string if attribute does not exist or not positioned on an element
     * node.
     * 
     * @param int $index The position of the attribute.
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getAttributeNo($index);

    /**
     * Returns the value of an attribute by name and namespace URI or an
     * empty string if attribute does not exist or not positioned on an
     * element node.
     * 
     * @param string $localName The local name.
     * @param string $namespaceURI The namespace URI.
     * @return string
     * @since PHP 5 >= 5.1.2
     **/
    function getAttributeNs($localName, $namespaceURI);

    /**
     * Indicates if specified property has been set.
     * 
     * @param int $property One of the parser option constants.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function getParserProperty($property);

    /**
     * Returns a boolean indicating if the document being parsed is currently
     * valid.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function isValid();

    /**
     * Lookup in scope namespace for a given prefix.
     * 
     * @param string $prefix String containing the prefix.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function lookupNamespace($prefix);

    /**
     * Positions cursor on the named attribute.
     * 
     * @param string $name The name of the attribute.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function moveToAttribute($name);

    /**
     * Positions cursor on attribute based on its position.
     * 
     * @param int $index The position of the attribute.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function moveToAttributeNo($index);

    /**
     * Positions cursor on the named attribute in specified namespace.
     * 
     * @param string $localName The local name.
     * @param string $namespaceURI The namespace URI.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function moveToAttributeNs($localName, $namespaceURI);

    /**
     * Moves cursor to the parent Element of current Attribute.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function moveToElement();

    /**
     * Moves cursor to the first Attribute.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function moveToFirstAttribute();

    /**
     * Moves cursor to the next Attribute if positioned on an Attribute or
     * moves to first attribute if positioned on an Element.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function moveToNextAttribute();

    /**
     * Positions cursor on the next node skipping all subtrees.
     * 
     * @param string $localname The name of the next node to move to.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function next($localname);

    /**
     * Set the URI containing the XML document to be parsed.
     * 
     * @param string $URI URI pointing to the document.
     * @param string $encoding The document encoding or .
     * @param int $options A bitmask of the LIBXML_* constants.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function open($URI, $encoding, $options);

    /**
     * Moves cursor to the next node in the document.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function read();

    /**
     * Reads the contents of the current node, including child nodes and
     * markup.
     * 
     * @return string
     * @since PHP 5 >= 5.2.0
     **/
    function readInnerXML();

    /**
     * Reads the contents of the current node, including the node itself.
     * 
     * @return string
     * @since PHP 5 >= 5.2.0
     **/
    function readOuterXML();

    /**
     * Reads the contents of the current node as an string.
     * 
     * @return string
     * @since PHP 5 >= 5.2.0
     **/
    function readString();

    /**
     * Set or Unset parser option for the parser. The options must be set
     * after {@link xmlreader-open} or {@link xmlreader-xml} are called and
     * before the first {@link xmlreader-read} call.
     * 
     * @param int $property One of the parser option constants.
     * @param bool $value If set to the option will be enabled otherwise
     *   will be disabled.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function setParserProperty($property, $value);

    /**
     * Set the filename or URI for the RelaxNG Schema to use for validation.
     * 
     * @param string $filename filename or URI pointing to a RelaxNG
     *   Schema.
     * @return bool
     * @since PHP 5 >= 5.2.0
     **/
    function setRelaxNGSchema($filename);

    /**
     * Set the data containing a RelaxNG Schema to use for validation.
     * 
     * @param string $source String containing the RelaxNG Schema.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function setRelaxNGSchemaSource($source);

    /**
     * Use W3C XSD schema to validate the document as it is processed.
     * Activation is only possible before the first Read().
     * 
     * @param string $filename The filename of the XSD schema.
     * @return bool
     * @since PHP 5 >= 5.2.0
     **/
    function setSchema($filename);

    /**
     * Set the data containing the XML to parse.
     * 
     * @param string $source String containing the XML to be parsed.
     * @param string $encoding The document encoding or .
     * @param int $options A bitmask of the LIBXML_* constants.
     * @return bool
     * @since PHP 5 >= 5.1.2
     **/
    function xml($source, $encoding, $options);

}
class XMLWriter {
    /**
     * Ends the current attribute.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endAttribute(){}

    /**
     * Ends the current CDATA section.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endCData(){}

    /**
     * Ends the current comment.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0
     **/
    function endComment(){}

    /**
     * Ends the current document.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endDocument(){}

    /**
     * Ends the DTD of the document.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endDTD(){}

    /**
     * Ends the current DTD attribute list.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endDTDAttlist(){}

    /**
     * Ends the current DTD element.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endDTDElement(){}

    /**
     * Ends the current DTD entity.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endDTDEntity(){}

    /**
     * Ends the current element.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endElement(){}

    /**
     * Ends the current processing instruction.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function endPI(){}

    /**
     * Flushes the current buffer.
     * 
     * @param bool $empty Whether to empty the buffer or no. Default is .
     * @return mixed
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0
     **/
    function flush($empty){}

    /**
     * End the current xml element. Writes an end tag even if the element is
     * empty.
     * 
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL xmlwriter >= 2.0.4
     **/
    function fullEndElement(){}

    /**
     * Creates a new XMLWriter using memory for string output.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function openMemory(){}

    /**
     * Creates a new XMLWriter using {@link uri} for the output.
     * 
     * @param string $uri The URI of the resource for the output.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function openURI($uri){}

    /**
     * Returns the current buffer.
     * 
     * @param bool $flush Whether to flush the output buffer or no. Default
     *   is .
     * @return string
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function outputMemory($flush){}

    /**
     * Toggles indentation on or off.
     * 
     * @param bool $indent Whether indentation is enabled.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function setIndent($indent){}

    /**
     * Sets the string which will be used to indent each element/attribute of
     * the resulting xml.
     * 
     * @param string $indentString The indentation string.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function setIndentString($indentString){}

    /**
     * Starts an attribute.
     * 
     * @param string $name The attribute name.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startAttribute($name){}

    /**
     * Starts a namespaced attribute.
     * 
     * @param string $prefix The namespace prefix.
     * @param string $name The attribute name.
     * @param string $uri The namespace URI.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startAttributeNS($prefix, $name, $uri){}

    /**
     * Starts a CDATA.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startCData(){}

    /**
     * Starts a comment.
     * 
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 1.0.0
     **/
    function startComment(){}

    /**
     * Starts a document.
     * 
     * @param string $version The version number of the document as part of
     *   the XML declaration. Defaults to 1.0.
     * @param string $encoding The encoding of the document as part of the
     *   XML declaration. by default.
     * @param string $standalone yes or no.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startDocument($version, $encoding, $standalone){}

    /**
     * Starts a DTD.
     * 
     * @param string $qualifiedName The qualified name of the document type
     *   to create.
     * @param string $publicId The external subset public identifier.
     * @param string $systemId The external subset system identifier.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startDTD($qualifiedName, $publicId, $systemId){}

    /**
     * Starts a DTD attribute list.
     * 
     * @param string $name The attribute list name.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startDTDAttlist($name){}

    /**
     * Starts a DTD element.
     * 
     * @param string $qualifiedName The qualified name of the document type
     *   to create.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startDTDElement($qualifiedName){}

    /**
     * Starts a DTD entity.
     * 
     * @param string $name The name of the entity.
     * @param bool $isparam
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startDTDEntity($name, $isparam){}

    /**
     * Starts an element.
     * 
     * @param string $name The element name.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startElement($name){}

    /**
     * Starts a namespaced element.
     * 
     * @param string $prefix The namespace prefix.
     * @param string $name The element name.
     * @param string $uri The namespace URI.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startElementNS($prefix, $name, $uri){}

    /**
     * Starts a processing instruction tag.
     * 
     * @param string $target The target of the processing instruction.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function startPI($target){}

    /**
     * Writes a text.
     * 
     * @param string $content The contents of the text.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function text($content){}

    /**
     * Writes a full attribute.
     * 
     * @param string $name The name of the attribute.
     * @param string $value The value of the attribute.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeAttribute($name, $value){}

    /**
     * Writes a full namespaced attribute.
     * 
     * @param string $prefix The namespace prefix.
     * @param string $name The attribute name.
     * @param string $uri The namespace URI.
     * @param string $content The attribute value.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeAttributeNS($prefix, $name, $uri, $content){}

    /**
     * Writes a full CDATA.
     * 
     * @param string $content The contents of the CDATA.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeCData($content){}

    /**
     * Writes a full comment.
     * 
     * @param string $content The contents of the comment.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeComment($content){}

    /**
     * Writes a full DTD.
     * 
     * @param string $name The DTD name.
     * @param string $publicId The external subset public identifier.
     * @param string $systemId The external subset system identifier.
     * @param string $subset The content of the DTD.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeDTD($name, $publicId, $systemId, $subset){}

    /**
     * Writes a DTD attribute list.
     * 
     * @param string $name The name of the DTD attribute list.
     * @param string $content The content of the DTD attribute list.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeDTDAttlist($name, $content){}

    /**
     * Writes a full DTD element.
     * 
     * @param string $name The name of the DTD element.
     * @param string $content The content of the element.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeDTDElement($name, $content){}

    /**
     * Writes a full DTD entity.
     * 
     * @param string $name The name of the entity.
     * @param string $content The content of the entity.
     * @param bool $pe
     * @param string $pubid
     * @param string $sysid
     * @param string $ndataid
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeDTDEntity($name, $content, $pe, $pubid, $sysid, $ndataid){}

    /**
     * Writes a full element tag.
     * 
     * @param string $name The element name.
     * @param string $content The element contents.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeElement($name, $content){}

    /**
     * Writes a full namespaced element tag.
     * 
     * @param string $prefix The namespace prefix.
     * @param string $name The element name.
     * @param string $uri The namespace URI.
     * @param string $content The element contents.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writeElementNS($prefix, $name, $uri, $content){}

    /**
     * Writes a processing instruction.
     * 
     * @param string $target The target of the processing instruction.
     * @param string $content The content of the processing instruction.
     * @return bool
     * @since PHP 5 >= 5.1.2, PECL xmlwriter >= 0.1.0
     **/
    function writePI($target, $content){}

    /**
     * Writes a raw xml text.
     * 
     * @param string $content The text string to write.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL xmlwriter >= 2.0.4
     **/
    function writeRaw($content){}

}
class XPathContext {
    /**
     * The optional {@link contextnode} can be specified for doing relative
     * XPath queries.
     * 
     * See also {@link xpath_new_context}.
     * 
     * @param string $xpath_expression
     * @param domnode $contextnode
     * @return XPathObject
     **/
    function xpath_eval($xpath_expression, $contextnode){}

    /**
     * {@link xpath_eval_expression} Example
     * 
     * <?php
     * 
     * include("example.inc");
     * 
     * if (!$dom = domxml_open_mem($xmlstr)) { echo "Error while parsing the
     * document\n"; exit; }
     * 
     * $xpath = xpath_new_context($dom);
     * var_dump(xpath_eval_expression($xpath, '/chapter/@language'));
     * 
     * ?>
     * 
     * object(XPathObject)(2) { ["type"]=> int(1) ["nodeset"]=> array(1) {
     * [0]=> object(domattribute)(5) { ["type"]=> int(2) ["name"]=> string(8)
     * "language" ["value"]=> string(2) "en" [0]=> int(7) [1]=>
     * int(138004256) } } }
     * 
     * See also {@link xpath_eval}.
     * 
     * @param string $expression
     * @param domnode $contextnode
     * @return XPathObject
     **/
    function xpath_eval_expression($expression, $contextnode){}

    /**
     * @param string $eval_str
     * @param domnode $contextnode
     * @return int
     **/
    function xptr_eval($eval_str, $contextnode){}

}
/**
 * Description of the class.
 **/
class XSLTProcessor {
    /**
     * Gets a parameter if previously set by {@link
     * XSLTProcessor::setParameter}.
     * 
     * @param string $namespaceURI The namespace URI of the XSLT parameter.
     * @param string $localName The local name of the XSLT parameter.
     * @return string
     * @since PHP 5
     **/
    function getParameter($namespaceURI, $localName){}

    /**
     * This method determine if PHP was built with the EXSLT library.
     * 
     * @return bool
     * @since PHP 5 >= 5.0.4
     **/
    function hasExsltSupport(){}

    /**
     * This method import the stylesheet into the XSLTProcessor for
     * transformations.
     * 
     * @param object $stylesheet The imported style sheet as a DOMDocument
     *   or SimpleXMLElement object.
     * @return void
     * @since PHP 5
     **/
    function importStylesheet($stylesheet){}

    /**
     * This method enables the ability to use PHP functions as XSLT functions
     * within XSL stylesheets.
     * 
     * @param mixed $restrict Use this parameter to only allow certain
     *   functions to be called from XSLT. This parameter can be either a
     *   string (a function name) or an array of functions.
     * @return void
     * @since PHP 5 >= 5.0.4
     **/
    function registerPHPFunctions($restrict){}

    /**
     * Removes a parameter, if set. This will make the processor use the
     * default value for the parameter as specified in the stylesheet.
     * 
     * @param string $namespaceURI The namespace URI of the XSLT parameter.
     * @param string $localName The local name of the XSLT parameter.
     * @return bool
     * @since PHP 5
     **/
    function removeParameter($namespaceURI, $localName){}

    /**
     * Sets the value of one or more parameters to be used in subsequent
     * transformations with XSLTProcessor. If the parameter doesn't exist in
     * the stylesheet it will be ignored.
     * 
     * @param string $namespace The namespace URI of the XSLT parameter.
     * @param string $name The local name of the XSLT parameter.
     * @param string $value The new value of the XSLT parameter.
     * @return bool
     * @since PHP 5
     **/
    function setParameter($namespace, $name, $value){}

    /**
     * Sets the file to output profiling information when processing a
     * stylesheet.
     * 
     * @param string $filename Path to the file to dump profiling
     *   information.
     * @return bool
     * @since PHP >= 5.3.0
     **/
    function setProfiling($filename){}

    /**
     * Transforms the source node to a DOMDocument applying the stylesheet
     * given by the {@link XSLTProcessor::importStylesheet} method.
     * 
     * @param DOMNode $doc The node to be transformed.
     * @return DOMDocument
     * @since PHP 5
     **/
    function transformToDoc($doc){}

    /**
     * Transforms the source node to an URI applying the stylesheet given by
     * the {@link XSLTProcessor::importStylesheet} method.
     * 
     * @param DOMDocument $doc The transformed document.
     * @param string $uri
     * @return int
     * @since PHP 5
     **/
    function transformToURI($doc, $uri){}

    /**
     * Transforms the source node to a string applying the stylesheet given
     * by the {@link xsltprocessor::importStylesheet} method.
     * 
     * @param DOMDocument $doc The transformed document.
     * @return string
     * @since PHP 5
     **/
    function transformToXML($doc){}

}
/**
 * A file archive, compressed with Zip.
 **/
interface ZIPARCHIVE {
    const CHECKCONS = 0;
    const CM_BZIP2 = 0;
    const CM_DEFAULT = 0;
    const CM_DEFLATE = 0;
    const CM_DEFLATE64 = 0;
    const CM_IMPLODE = 0;
    const CM_PKWARE_IMPLODE = 0;
    const CM_REDUCE_1 = 0;
    const CM_REDUCE_2 = 0;
    const CM_REDUCE_3 = 0;
    const CM_REDUCE_4 = 0;
    const CM_SHRINK = 0;
    const CM_STORE = 0;
    const CREATE = 0;
    const ER_CHANGED = '';
    const ER_CLOSE = 0;
    const ER_COMPNOTSUPP = 0;
    const ER_CRC = 0;
    const ER_DELETED = 0;
    const ER_EOF = 0;
    const ER_EXISTS = 0;
    const ER_INCONS = 0;
    const ER_INTERNAL = 0;
    const ER_INVAL = 0;
    const ER_MEMORY = 0;
    const ER_MULTIDISK = 0;
    const ER_NOENT = 0;
    const ER_NOZIP = 0;
    const ER_OK = 0;
    const ER_OPEN = 0;
    const ER_READ = 0;
    const ER_REMOVE = 0;
    const ER_RENAME = 0;
    const ER_SEEK = 0;
    const ER_TMPOPEN = 0;
    const ER_WRITE = 0;
    const ER_ZIPCLOSED = 0;
    const ER_ZLIB = 0;
    const EXCL = 0;
    const FL_COMPRESSED = 0;
    const FL_NOCASE = 0;
    const FL_NODIR = 0;
    const FL_UNCHANGED = 0;
    const OVERWRITE = 0;
    /**
     * Adds an empty directory in the archive.
     * 
     * @param string $dirname The directory to add.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.8.0
     **/
    function addEmptyDir($dirname);

    /**
     * Adds a file to a ZIP archive from a given path.
     * 
     * @param string $filename The path to the file to add.
     * @param string $localname local name inside ZIP archive.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function addFile($filename, $localname);

    /**
     * Add a file to a ZIP archive using its contents.
     * 
     * @param string $localname The name of the entry to create.
     * @param string $contents The contents to use to create the entry. It
     *   is used in a binary safe mode.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function addFromString($localname, $contents);

    /**
     * Close opened or created archive and save changes. This method is
     * automatically called at the end of the script.
     * 
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function close();

    /**
     * Delete an entry in the archive using its index.
     * 
     * @param int $index Index of the entry to delete.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function deleteIndex($index);

    /**
     * Delete an entry in the archive using its name.
     * 
     * @param string $name Name of the entry to delete.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function deleteName($name);

    /**
     * Extract the complete archive or the given files to the specified
     * destination.
     * 
     * @param string $destination Location where to extract the files.
     * @param mixed $entries The entries to extract. It accepts either a
     *   single entry name or an array of names.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function extractTo($destination, $entries);

    /**
     * Returns the Zip archive comment.
     * 
     * @return string
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function getArchiveComment();

    /**
     * Returns the comment of an entry using the entry index.
     * 
     * @param int $index Index of the entry
     * @param int $flags If flags is set to ZIPARCHIVE::FL_UNCHANGED, the
     *   original unchanged comment is returned.
     * @return string
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.4.0
     **/
    function getCommentIndex($index, $flags);

    /**
     * Returns the comment of an entry using the entry name.
     * 
     * @param string $name Name of the entry
     * @param int $flags If flags is set to ZIPARCHIVE::FL_UNCHANGED, the
     *   original unchanged comment is returned.
     * @return string
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.4.0
     **/
    function getCommentName($name, $flags);

    /**
     * Returns the entry contents using its index.
     * 
     * @param int $index Index of the entry
     * @param int $flags The flags to use to open the archive. the
     *   following values may be ORed to it. ZIPARCHIVE::FL_UNCHANGED
     *   ZIPARCHIVE::FL_COMPRESSED
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.3.0
     **/
    function getFromIndex($index, $flags);

    /**
     * Returns the entry contents using its name.
     * 
     * @param string $name Name of the entry
     * @param int $flags The flags to use to open the archive. the
     *   following values may be ORed to it. ZIPARCHIVE::FL_UNCHANGED
     *   ZIPARCHIVE::FL_COMPRESSED
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function getFromName($name, $flags);

    /**
     * Returns the name of an entry using its index.
     * 
     * @param int $index Index of the entry.
     * @return string
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function getNameIndex($index);

    /**
     * Returns the status error message, system and/or zip messages.
     * 
     * @return string
     * @since PHP 5 >= 5.2.7
     **/
    function getStatusString();

    /**
     * Get a file handler to the entry defined by its name. For now it only
     * supports read operations.
     * 
     * @param string $name The name of the entry to use.
     * @return resource
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function getStream($name);

    /**
     * Locates an entry using its name.
     * 
     * @param string $name The name of the entry to look up
     * @param int $flags The flags are specified by ORing the following
     *   values, or 0 for none of them. ZIPARCHIVE::FL_NOCASE
     *   ZIPARCHIVE::FL_NODIR
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function locateName($name, $flags);

    /**
     * Opens a new zip archive for reading, writing or modifying.
     * 
     * @param string $filename The file name of the ZIP archive to open.
     * @param int $flags The mode to use to open the archive.
     *   ZIPARCHIVE::OVERWRITE ZIPARCHIVE::CREATE ZIPARCHIVE::EXCL
     *   ZIPARCHIVE::CHECKCONS
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function open($filename, $flags);

    /**
     * Renames an entry defined by its index.
     * 
     * @param int $index Index of the entry to rename.
     * @param string $newname New name.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function renameIndex($index, $newname);

    /**
     * Renames an entry defined by its name.
     * 
     * @param string $name Name of the entry to rename.
     * @param string $newname New name.
     * @return bool
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function renameName($name, $newname);

    /**
     * Set the comment of a ZIP archive.
     * 
     * @param string $comment The contents of the comment.
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.4.0
     **/
    function setArchiveComment($comment);

    /**
     * Set the comment of an entry defined by its index.
     * 
     * @param int $index Index of the entry.
     * @param string $comment The contents of the comment.
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.4.0
     **/
    function setCommentIndex($index, $comment);

    /**
     * Set the comment of an entry defined by its name.
     * 
     * @param string $name Name of the entry.
     * @param string $comment The contents of the comment.
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.4.0
     **/
    function setCommentName($name, $comment);

    /**
     * The function obtains information about the entry defined by its index.
     * 
     * @param int $index Index of the entry
     * @param int $flags ZIPARCHIVE::FL_UNCHANGED may be ORed to it to
     *   request information about the original file in the archive, ignoring
     *   any changes made.
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function statIndex($index, $flags);

    /**
     * The function obtains information about the entry defined by its name.
     * 
     * @param name $name Name of the entry
     * @param int $flags The flags argument specifies how the name lookup
     *   should be done. Also, ZIPARCHIVE::FL_UNCHANGED may be ORed to it to
     *   request information about the original file in the archive, ignoring
     *   any changes made. ZIPARCHIVE::FL_NOCASE ZIPARCHIVE::FL_NODIR
     *   ZIPARCHIVE::FL_UNCHANGED
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function statName($name, $flags);

    /**
     * Undo all changes done in the archive.
     * 
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function unchangeAll();

    /**
     * Revert all global changes to the archive archive. For now, this only
     * reverts archive comment changes.
     * 
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function unchangeArchive();

    /**
     * Revert all changes done to an entry at the given index.
     * 
     * @param int $index Index of the entry.
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.1.0
     **/
    function unchangeIndex($index);

    /**
     * Revert all changes done to an entry.
     * 
     * @param string $name Name of the entry.
     * @return mixed
     * @since PHP 5 >= 5.2.0, PECL zip >= 1.5.0
     **/
    function unchangeName($name);

}
define('ABDAY_1', 0);
define('ABDAY_2', 0);
define('ABDAY_3', 0);
define('ABDAY_4', 0);
define('ABDAY_5', 0);
define('ABDAY_6', 0);
define('ABDAY_7', 0);
define('ABMON_1', 0);
define('ABMON_2', 0);
define('ABMON_3', 0);
define('ABMON_4', 0);
define('ABMON_5', 0);
define('ABMON_6', 0);
define('ABMON_7', 0);
define('ABMON_8', 0);
define('ABMON_9', 0);
define('ABMON_10', 0);
define('ABMON_11', 0);
define('ABMON_12', 0);
define('AF_INET', 0);
define('AF_INET6', 0);
define('AF_UNIX', 0);
define('ALC_FREQUENCY', 0);
define('ALC_REFRESH', 0);
define('ALC_SYNC', 0);
define('ALT_DIGITS', 0);
define('AL_BITS', 0);
define('AL_BUFFER', 0);
define('AL_CHANNELS', 0);
define('AL_CONE_INNER_ANGLE', 0);
define('AL_CONE_OUTER_ANGLE', 0);
define('AL_CONE_OUTER_GAIN', 0);
define('AL_DIRECTION', 0);
define('AL_FALSE', 0);
define('AL_FORMAT_MONO8', 0);
define('AL_FORMAT_MONO16', 0);
define('AL_FORMAT_STEREO8', 0);
define('AL_FORMAT_STEREO16', 0);
define('AL_FREQUENCY', 0);
define('AL_GAIN', 0);
define('AL_INITIAL', 0);
define('AL_LOOPING', 0);
define('AL_MAX_DISTANCE', 0);
define('AL_MAX_GAIN', 0);
define('AL_MIN_GAIN', 0);
define('AL_ORIENTATION', 0);
define('AL_PAUSED', 0);
define('AL_PITCH', 0);
define('AL_PLAYING', 0);
define('AL_POSITION', 0);
define('AL_REFERENCE_DISTANCE', 0);
define('AL_ROLLOFF_FACTOR', 0);
define('AL_SIZE', 0);
define('AL_SOURCE_RELATIVE', 0);
define('AL_SOURCE_STATE', 0);
define('AL_STOPPED', 0);
define('AL_TRUE', 0);
define('AL_VELOCITY', 0);
define('AM_STR', 0);
define('APACHE_MAP', 0);
define('APD_VERSION', '');
define('ARGS_TRACE', 0);
define('ASSERT_ACTIVE', 0);
define('ASSERT_BAIL', 0);
define('ASSERT_CALLBACK', 0);
define('ASSERT_QUIET_EVAL', 0);
define('ASSERT_QUITE_EVAL', 0);
define('ASSERT_WARNING', 0);
define('ASSIGNMENT_TRACE', 0);
define('BBCODE_ARG_DOUBLE_QUOTE', 0);
define('BBCODE_ARG_HTML_QUOTE', 0);
define('BBCODE_ARG_QUOTE_ESCAPING', 0);
define('BBCODE_ARG_SINGLE_QUOTE', 0);
define('BBCODE_AUTO_CORRECT', 0);
define('BBCODE_CORRECT_REOPEN_TAGS', 0);
define('BBCODE_DEFAULT_SMILEYS_OFF', 0);
define('BBCODE_DEFAULT_SMILEYS_ON', 0);
define('BBCODE_DISABLE_TREE_BUILD', 0);
define('BBCODE_FLAGS_ARG_PARSING', 0);
define('BBCODE_FLAGS_CDATA_NOT_ALLOWED', 0);
define('BBCODE_FLAGS_DENY_REOPEN_CHILD', 0);
define('BBCODE_FLAGS_ONE_OPEN_PER_LEVEL', 0);
define('BBCODE_FLAGS_REMOVE_IF_EMPTY', 0);
define('BBCODE_FLAGS_SMILEYS_OFF', 0);
define('BBCODE_FLAGS_SMILEYS_ON', 0);
define('BBCODE_FORCE_SMILEYS_OFF', 0);
define('BBCODE_SET_FLAGS_ADD', 0);
define('BBCODE_SET_FLAGS_REMOVE', 0);
define('BBCODE_SET_FLAGS_SET', 0);
define('BBCODE_SMILEYS_CASE_INSENSITIVE', 0);
define('BBCODE_TYPE_ARG', 0);
define('BBCODE_TYPE_NOARG', 0);
define('BBCODE_TYPE_OPTARG', 0);
define('BBCODE_TYPE_ROOT', 0);
define('BBCODE_TYPE_SINGLE', 0);
define('BSDown', 0.0);
define('BSHitTest', 0.0);
define('BSOver', 0.0);
define('BSUp', 0.0);
define('BUS_ADRALN', 0);
define('BUS_ADRERR', 0);
define('BUS_OBJERR', 0);
define('ButtonEnter', 0);
define('ButtonExit', 0);
define('CAL_DOW_DAYNO', 0);
define('CAL_DOW_LONG', 0);
define('CAL_DOW_SHORT', 0);
define('CAL_FRENCH', 0);
define('CAL_GREGORIAN', 0);
define('CAL_JEWISH', 0);
define('CAL_JULIAN', 0);
define('CAL_MONTH_FRENCH', 0);
define('CAL_MONTH_GREGORIAN_LONG', 0);
define('CAL_MONTH_GREGORIAN_SHORT', 0);
define('CAL_MONTH_JEWISH', 0);
define('CAL_MONTH_JULIAN_LONG', 0);
define('CAL_MONTH_JULIAN_SHORT', 0);
define('CAL_NUM_CALS', 0);
define('CASE_LOWER', 0);
define('CASE_UPPER', 0);
define('CHAR_MAX', 0);
define('CLASSKIT_ACC_PRIVATE', 0);
define('CLASSKIT_ACC_PROTECTED', 0);
define('CLASSKIT_ACC_PUBLIC', 0);
define('CLASSKIT_AGGREGATE_OVERRIDE', 0);
define('CLASSKIT_VERSION', '');
define('CLD_CONTINUED', 0);
define('CLD_DUMPED', 0);
define('CLD_EXITED', 0);
define('CLD_KILLED', 0);
define('CLD_STOPPED', 0);
define('CLD_TRAPPED', 0);
define('CLSCTX_ALL', 0);
/**
 * The code that manages objects of this class is an in-process handler.
 * This is a DLL that runs in the client process and implements
 * client-side structures of this class when instances of the class are
 * accessed remotely.
 **/
define('CLSCTX_INPROC_HANDLER', 0);
/**
 * The code that creates and manages objects of this class is a DLL that
 * runs in the same process as the caller of the function specifying the
 * class context.
 **/
define('CLSCTX_INPROC_SERVER', 0);
/**
 * The EXE code that creates and manages objects of this class runs on
 * same machine but is loaded in a separate process space.
 **/
define('CLSCTX_LOCAL_SERVER', 0);
/**
 * A remote context. The code that creates and manages objects of this
 * class is run on a different computer.
 **/
define('CLSCTX_REMOTE_SERVER', 0);
define('CLSCTX_SERVER', 0);
define('CL_EXPUNGE', 0);
define('CODESET', 0);
define('CONNECTION_ABORTED', 0);
define('CONNECTION_NORMAL', 0);
define('CONNECTION_TIMEOUT', 0);
define('COUNT_NORMAL', 0);
define('COUNT_RECURSIVE', 0);
/**
 * Default to ANSI code page.
 **/
define('CP_ACP', 0);
/**
 * Macintosh code page.
 **/
define('CP_MACCP', 0);
define('CP_MOVE', 0);
/**
 * Default to OEM code page.
 **/
define('CP_OEMCP', 0);
define('CP_SYMBOL', 0);
/**
 * Current thread's ANSI code page
 **/
define('CP_THREAD_ACP', 0);
define('CP_UID', 0);
/**
 * Unicode (UTF-7).
 **/
define('CP_UTF7', 0);
/**
 * Unicode (UTF-8).
 **/
define('CP_UTF8', 0);
define('CREDITS_ALL', 0);
define('CREDITS_DOCS', 0);
define('CREDITS_FULLPAGE', 0);
define('CREDITS_GENERAL', 0);
define('CREDITS_GROUP', 0);
define('CREDITS_MODULES', 0);
define('CREDITS_QA', 0);
define('CREDITS_SAPI', 0);
define('CRNCYSTR', 0);
define('CRYPT_BLOWFISH', 0);
define('CRYPT_EXT_DES', 0);
define('CRYPT_MD5', 0);
define('CRYPT_SALT_LENGTH', 0);
define('CRYPT_STD_DES', 0);
define('CURLOPT_AUTOREFERER', 0);
define('CURLOPT_COOKIESESSION', 0);
define('CURLOPT_DNS_USE_GLOBAL_CACHE', 0);
define('CURRENCY_SYMBOL', 0);
define('CYRUS_CALLBACK_NOLITERAL', 0);
define('CYRUS_CALLBACK_NUMBERED', 0);
define('CYRUS_CONN_INITIALRESPONSE', 0);
define('CYRUS_CONN_NONSYNCLITERAL', 0);
define('DAY_1', 0);
define('DAY_2', 0);
define('DAY_3', 0);
define('DAY_4', 0);
define('DAY_5', 0);
define('DAY_6', 0);
define('DAY_7', 0);
define('DB2_AUTOCOMMIT_OFF', 0);
define('DB2_AUTOCOMMIT_ON', 0);
define('DB2_BINARY', 0);
define('DB2_CASE_LOWER', 0);
define('DB2_CASE_NATURAL', 0);
define('DB2_CASE_UPPER', 0);
define('DB2_CHAR', 0);
define('DB2_CONVERT', 0);
define('DB2_DEFERRED_PREPARE_OFF', 0);
define('DB2_DEFERRED_PREPARE_ON', 0);
define('DB2_DOUBLE', 0);
define('DB2_FORWARD_ONLY', 0);
define('DB2_LONG', 0);
define('DB2_PARAM_FILE', 0);
define('DB2_PARAM_IN', 0);
define('DB2_PARAM_INOUT', 0);
define('DB2_PARAM_OUT', 0);
define('DB2_PASSTHRU', 0);
define('DB2_SCROLLABLE', 0);
/**
 * The server can't close
 **/
define('DBPLUS_ERR_CLOSE', 0);
/**
 * A client sent a corrupt tuple
 **/
define('DBPLUS_ERR_CORRUPT_TUPLE', 0);
/**
 * Invalid crc in the superpage
 **/
define('DBPLUS_ERR_CRC', 0);
/**
 * Create() system call failed
 **/
define('DBPLUS_ERR_CREATE', 0);
/**
 * Error in the parser
 **/
define('DBPLUS_ERR_DBPARSE', 0);
/**
 * Exit condition caused by prexit() * procedure
 **/
define('DBPLUS_ERR_DBPREEXIT', 0);
/**
 * Run error in db
 **/
define('DBPLUS_ERR_DBRUNERR', 0);
/**
 * Tried to insert a duplicate tuple
 **/
define('DBPLUS_ERR_DUPLICATE', 0);
/**
 * Relation is empty (server)
 **/
define('DBPLUS_ERR_EMPTY', 0);
/**
 * End of scan from rget()
 **/
define('DBPLUS_ERR_EOSCAN', 0);
/**
 * Can't create a fifo
 **/
define('DBPLUS_ERR_FIFO', 0);
/**
 * Tuple exceeds maximum length
 **/
define('DBPLUS_ERR_LENGTH', 0);
/**
 * Relation was already locked
 **/
define('DBPLUS_ERR_LOCKED', 0);
/**
 * Lseek() system call failed
 **/
define('DBPLUS_ERR_LSEEK', 0);
/**
 * File is not a relation
 **/
define('DBPLUS_ERR_MAGIC', 0);
/**
 * Malloc() call failed
 **/
define('DBPLUS_ERR_MALLOC', 0);
/**
 * Too many secondary indices
 **/
define('DBPLUS_ERR_NIDX', 0);
/**
 * Null error condition
 **/
define('DBPLUS_ERR_NOERR', 0);
/**
 * Relation cannot be locked
 **/
define('DBPLUS_ERR_NOLOCK', 0);
/**
 * Error use of max users
 **/
define('DBPLUS_ERR_NUSERS', 0);
/**
 * Caused by a signal
 **/
define('DBPLUS_ERR_ONTRAP', 0);
/**
 * Open() system call failed
 **/
define('DBPLUS_ERR_OPEN', 0);
/**
 * The server should not really die but after a disaster send ERR_PANIC
 * to all its clients
 **/
define('DBPLUS_ERR_PANIC', 0);
/**
 * Permission denied
 **/
define('DBPLUS_ERR_PERM', 0);
/**
 * Relation uses a different page size
 **/
define('DBPLUS_ERR_PGSIZE', 0);
/**
 * Piped relation requires lseek()
 **/
define('DBPLUS_ERR_PIPE', 0);
/**
 * Caused by invalid usage
 **/
define('DBPLUS_ERR_PREEXIT', 0);
/**
 * Error in the preprocessor
 **/
define('DBPLUS_ERR_PREPROC', 0);
/**
 * Read error on relation
 **/
define('DBPLUS_ERR_READ', 0);
/**
 * Only two users
 **/
define('DBPLUS_ERR_RESTRICTED', 0);
/**
 * TCL_error
 **/
define('DBPLUS_ERR_TCL', 0);
define('DBPLUS_ERR_UNKNOWN', 0);
/**
 * An error in the use of the library by an application programmer
 **/
define('DBPLUS_ERR_USER', 0);
/**
 * File is a very old relation
 **/
define('DBPLUS_ERR_VERSION', 0);
/**
 * Wait a little (Simple only)
 **/
define('DBPLUS_ERR_WAIT', 0);
/**
 * The Simple routines encountered a non fatal error which was corrected
 **/
define('DBPLUS_ERR_WARNING0', 0);
/**
 * The record is write locked
 **/
define('DBPLUS_ERR_WLOCKED', 0);
/**
 * Relation already opened for writing
 **/
define('DBPLUS_ERR_WOPEN', 0);
/**
 * Write error on relation
 **/
define('DBPLUS_ERR_WRITE', 0);
define('DBX_CMP_ASC', 0);
define('DBX_CMP_DESC', 0);
define('DBX_CMP_NATIVE', 0);
define('DBX_CMP_NUMBER', 0);
define('DBX_CMP_TEXT', 0);
define('DBX_COLNAMES_LOWERCASE', 0);
define('DBX_COLNAMES_UNCHANGED', 0);
define('DBX_COLNAMES_UPPERCASE', 0);
define('DBX_FBSQL', 0);
define('DBX_MSSQL', 0);
define('DBX_MYSQL', 0);
define('DBX_OCI8', 0);
define('DBX_ODBC', 0);
define('DBX_PERSISTENT', 0);
define('DBX_PGSQL', 0);
define('DBX_RESULT_ASSOC', 0);
define('DBX_RESULT_INDEX', 0);
define('DBX_RESULT_INFO', 0);
define('DBX_RESULT_UNBUFFERED', 0);
define('DBX_SQLITE', 0);
define('DBX_SYBASECT', 0);
define('DC_BORLAND', 0);
define('DC_CALL_CDECL', 0);
define('DC_CALL_STD', 0);
define('DC_CALL_STD_BO', 0);
define('DC_CALL_STD_M8', 0);
define('DC_CALL_STD_MS', 0);
define('DC_FLAG_ARGPTR', 0);
define('DC_MICROSOFT', 0);
define('DC_RETVAL_MATH4', 0);
define('DC_RETVAL_MATH8', 0);
define('DECIMAL_POINT', 0);
define('DEFAULT_INCLUDE_PATH', '');
define('DIRECTORY_SEPARATOR', '');
/**
 * A return error that indicates a divide by zero error.
 **/
define('DISP_E_DIVBYZERO', 0);
/**
 * An error that indicates that a value could not be coerced to its
 * expected representation.
 **/
define('DISP_E_OVERFLOW', 0);
define('DNS_A', 0);
define('DNS_AAAA', 0);
define('DNS_ALL', 0);
define('DNS_ANY', 0);
define('DNS_CNAME', 0);
define('DNS_HINFO', 0);
define('DNS_MX', 0);
define('DNS_NS', 0);
define('DNS_PTR', 0);
define('DNS_SOA', 0);
define('DNS_TXT', 0);
define('DOMSTRING_SIZE_ERR', 0);
/**
 * If any node is inserted somewhere it doesn't belong
 **/
define('DOM_HIERARCHY_REQUEST_ERR', 0);
/**
 * If index or size is negative, or greater than the allowed value.
 **/
define('DOM_INDEX_SIZE_ERR', 0);
/**
 * If an attempt is made to add an attribute that is already in use
 * elsewhere.
 **/
define('DOM_INUSE_ATTRIBUTE_ERR', 0);
/**
 * If a parameter or an operation is not supported by the underlying
 * object.
 **/
define('DOM_INVALID_ACCESS_ERR', 0);
/**
 * If an invalid or illegal character is specified, such as in a name.
 **/
define('DOM_INVALID_CHARACTER_ERR', 0);
/**
 * If an attempt is made to modify the type of the underlying object.
 **/
define('DOM_INVALID_MODIFICATION_ERR', 0);
/**
 * If an attempt is made to use an object that is not, or is no longer,
 * usable.
 **/
define('DOM_INVALID_STATE_ERR', 0);
/**
 * If an attempt is made to create or change an object in a way which is
 * incorrect with regard to namespaces.
 **/
define('DOM_NAMESPACE_ERR', 0);
/**
 * If an attempt is made to reference a node in a context where it does
 * not exist.
 **/
define('DOM_NOT_FOUND_ERR', 0);
/**
 * If the implementation does not support the requested type of object or
 * operation.
 **/
define('DOM_NOT_SUPPORTED_ERR', 0);
/**
 * If data is specified for a node which does not support data.
 **/
define('DOM_NO_DATA_ALLOWED_ERR', 0);
/**
 * If an attempt is made to modify an object where modifications are not
 * allowed.
 **/
define('DOM_NO_MODIFICATION_ALLOWED_ERR', 0);
/**
 * Error code not part of the DOM specification. Meant for PHP errors.
 **/
define('DOM_PHP_ERR', 0);
/**
 * If an invalid or illegal string is specified.
 **/
define('DOM_SYNTAX_ERR', 0);
/**
 * If a call to a method such as insertBefore or removeChild would make
 * the Node invalid with respect to "partial validity", this exception
 * would be raised and the operation would not be done.
 **/
define('DOM_VALIDATION_ERR', 0);
/**
 * If a node is used in a different document than the one that created
 * it.
 **/
define('DOM_WRONG_DOCUMENT_ERR', 0);
define('D_FMT', 0);
define('D_T_FMT', 0);
define('ENC7BIT', 0);
define('ENC8BIT', 0);
define('ENCBASE64', 0);
define('ENCBINARY', 0);
define('ENCOTHER', 0);
define('ENCQUOTEDPRINTABLE', 0);
define('ENT_COMPAT', 0);
define('ENT_NOQUOTES', 0);
define('ENT_QUOTES', 0);
define('ERA', 0);
define('ERA_D_FMT', 0);
define('ERA_D_T_FMT', 0);
define('ERA_T_FMT', 0);
define('ERA_YEAR', 0);
define('ERROR_TRACE', 0);
define('EVLOOP_NONBLOCK', 0);
define('EVLOOP_ONCE', 0);
define('EV_PERSIST', 0);
define('EV_READ', 0);
define('EV_SIGNAL', 0);
define('EV_TIMEOUT', 0);
define('EV_WRITE', 0);
define('EXP_EOF', 0);
define('EXP_EXACT', 0);
define('EXP_FULLBUFFER', 0);
define('EXP_GLOB', 0);
define('EXP_REGEXP', 0);
define('EXP_TIMEOUT', 0);
define('EXTR_IF_EXISTS', 0);
define('EXTR_OVERWRITE', 0);
define('EXTR_PREFIX_ALL', 0);
define('EXTR_PREFIX_IF_EXISTS', 0);
define('EXTR_PREFIX_INVALID', 0);
define('EXTR_PREFIX_SAME', 0);
define('EXTR_REFS', 0);
define('EXTR_SKIP', 0);
/**
 * 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously
 **/
define('E_ALL', 0);
/**
 * since PHP 4
 **/
define('E_COMPILE_ERROR', 0);
/**
 * since PHP 4
 **/
define('E_COMPILE_WARNING', 0);
/**
 * since PHP 4
 **/
define('E_CORE_ERROR', 0);
/**
 * since PHP 4
 **/
define('E_CORE_WARNING', 0);
/**
 * since PHP 5.3.0
 **/
define('E_DEPRECATED', 0);
define('E_ERROR', 0);
define('E_NOTICE', 0);
define('E_PARSE', 0);
/**
 * since PHP 5.2.0
 **/
define('E_RECOVERABLE_ERROR', 0);
/**
 * since PHP 5
 **/
define('E_STRICT', 0);
/**
 * since PHP 5.3.0
 **/
define('E_USER_DEPRECATED', 0);
/**
 * since PHP 4
 **/
define('E_USER_ERROR', 0);
/**
 * since PHP 4
 **/
define('E_USER_NOTICE', 0);
/**
 * since PHP 4
 **/
define('E_USER_WARNING', 0);
define('E_WARNING', 0);
define('FAMAcknowledge', 0);
define('FAMChanged', 0);
define('FAMCreated', 0);
define('FAMDeleted', 0);
define('FAMEndExist', 0);
define('FAMExists', 0);
define('FAMMoved', 0);
define('FAMStartExecuting', 0);
define('FAMStopExecuting', 0);
define('FBSQL_ASSOC', 0);
define('FBSQL_BOTH', 0);
define('FBSQL_ISO_READ_COMMITTED', 0);
define('FBSQL_ISO_READ_UNCOMMITTED', 0);
define('FBSQL_ISO_REPEATABLE_READ', 0);
define('FBSQL_ISO_SERIALIZABLE', 0);
define('FBSQL_ISO_VERSIONED', 0);
define('FBSQL_LOB_DIRECT', 0);
define('FBSQL_LOB_HANDLE', 0);
define('FBSQL_LOCK_DEFERRED', 0);
define('FBSQL_LOCK_OPTIMISTIC', 0);
define('FBSQL_LOCK_PESSIMISTIC', 0);
define('FBSQL_NOEXEC', 0);
define('FBSQL_NUM', 0);
define('FBSQL_RUNNING', 0);
define('FBSQL_STARTING', 0);
define('FBSQL_STOPPED', 0);
define('FBSQL_STOPPING', 0);
define('FBSQL_UNKNOWN', 0);
define('FDFAA', 0);
define('FDFAction', 0);
define('FDFAP', 0);
define('FDFAPRef', 0);
define('FDFAS', 0);
define('FDFCalculate', 0);
define('FDFClearFf', 0);
define('FDFClrF', 0);
define('FDFDown', 0);
define('FDFDownAP', 0);
define('FDFEnter', 0);
define('FDFExit', 0);
define('FDFFf', 0);
define('FDFFile', 0);
define('FDFFlags', 0);
define('FDFFormat', 0);
define('FDFID', 0);
define('FDFIF', 0);
define('FDFKeystroke', 0);
define('FDFNormalAP', 0);
define('FDFRolloverAP', 0);
define('FDFSetF', 0);
define('FDFSetFf', 0);
define('FDFStatus', 0);
define('FDFUp', 0);
define('FDFValidate', 0);
define('FDFValue', 0);
define('FILEINFO_COMPRESS', 0);
define('FILEINFO_CONTINUE', 0);
define('FILEINFO_DEVICES', 0);
define('FILEINFO_MIME', 0);
define('FILEINFO_MIME_ENCODING', 0);
define('FILEINFO_MIME_TYPE', 0);
define('FILEINFO_NONE', 0);
define('FILEINFO_PRESERVE_ATIME', 0);
define('FILEINFO_RAW', 0);
define('FILEINFO_SYMLINK', 0);
define('FILE_APPEND', 0);
define('FILE_BINARY', 0);
define('FILE_IGNORE_NEW_LINES', 0);
define('FILE_NO_DEFAULT_CONTEXT', 0);
define('FILE_SKIP_EMPTY_LINES', 0);
define('FILE_TEXT', 0);
define('FILE_USE_INCLUDE_PATH', 0);
define('FILTER_CALLBACK', 0);
define('FILTER_DEFAULT', 0);
define('FILTER_FLAG_ALLOW_FRACTION', 0);
define('FILTER_FLAG_ALLOW_HEX', 0);
define('FILTER_FLAG_ALLOW_OCTAL', 0);
define('FILTER_FLAG_ALLOW_SCIENTIFIC', 0);
define('FILTER_FLAG_ALLOW_THOUSAND', 0);
define('FILTER_FLAG_EMPTY_STRING_NULL', 0);
define('FILTER_FLAG_ENCODE_AMP', 0);
define('FILTER_FLAG_ENCODE_HIGH', 0);
define('FILTER_FLAG_ENCODE_LOW', 0);
define('FILTER_FLAG_HOST_REQUIRED', 0);
define('FILTER_FLAG_IPV4', 0);
define('FILTER_FLAG_IPV6', 0);
define('FILTER_FLAG_NONE', 0);
define('FILTER_FLAG_NO_ENCODE_QUOTES', 0);
define('FILTER_FLAG_NO_PRIV_RANGE', 0);
define('FILTER_FLAG_NO_RES_RANGE', 0);
define('FILTER_FLAG_PATH_REQUIRED', 0);
define('FILTER_FLAG_QUERY_REQUIRED', 0);
define('FILTER_FLAG_SCHEME_REQUIRED', 0);
define('FILTER_FLAG_STRIP_HIGH', 0);
define('FILTER_FLAG_STRIP_LOW', 0);
define('FILTER_FORCE_ARRAY', 0);
define('FILTER_NULL_ON_FAILURE', 0);
define('FILTER_REQUIRE_ARRAY', 0);
define('FILTER_REQUIRE_SCALAR', 0);
define('FILTER_SANITIZE_EMAIL', 0);
define('FILTER_SANITIZE_ENCODED', 0);
define('FILTER_SANITIZE_MAGIC_QUOTES', 0);
define('FILTER_SANITIZE_NUMBER_FLOAT', 0);
define('FILTER_SANITIZE_NUMBER_INT', 0);
define('FILTER_SANITIZE_SPECIAL_CHARS', 0);
define('FILTER_SANITIZE_STRING', 0);
define('FILTER_SANITIZE_STRIPPED', 0);
define('FILTER_SANITIZE_URL', 0);
define('FILTER_UNSAFE_RAW', 0);
define('FILTER_VALIDATE_BOOLEAN', 0);
define('FILTER_VALIDATE_EMAIL', 0);
define('FILTER_VALIDATE_FLOAT', 0);
define('FILTER_VALIDATE_INT', 0);
define('FILTER_VALIDATE_IP', 0);
define('FILTER_VALIDATE_REGEXP', 0);
define('FILTER_VALIDATE_URL', 0);
define('FNM_CASEFOLD', 0);
define('FNM_NOESCAPE', 0);
define('FNM_PATHNAME', 0);
define('FNM_PERIOD', 0);
define('FORCE_DEFLATE', 0);
define('FORCE_GZIP', 0);
define('FPE_FLTDIV', 0);
define('FPE_FLTINV', 0);
define('FPE_FLTOVF', 0);
define('FPE_FLTRES', 0);
define('FPE_FLTSUB', 0);
define('FPE_FLTUND', 0);
define('FPE_INTDIV', 0);
define('FPE_INTOVF', 0);
define('FRAC_DIGITS', 0);
define('FRIBIDI_AUTO', 0);
define('FRIBIDI_CHARSET_8859_6', 0);
define('FRIBIDI_CHARSET_8859_8', 0);
define('FRIBIDI_CHARSET_CAP_RTL', 0);
define('FRIBIDI_CHARSET_CP1255', 0);
define('FRIBIDI_CHARSET_CP1256', 0);
define('FRIBIDI_CHARSET_ISIRI_3342', 0);
define('FRIBIDI_CHARSET_UTF8', 0);
define('FRIBIDI_LTR', 0);
define('FRIBIDI_RTL', 0);
define('FTP_ASCII', 0);
define('FTP_BINARY', 0);
define('FTP_IMAGE', 0);
define('FTP_TEXT', 0);
define('FTP_TIMEOUT_SEC', 0);
define('FT_INTERNAL', 0);
define('FT_NOT', 0);
define('FT_PEEK', 0);
define('FT_PREFETCHTEXT', 0);
define('FT_UID', 0);
define('FUNCTION_TRACE', 0);
define('F_DUPFD', 0);
define('F_GETFD', 0);
define('F_GETFL', 0);
define('F_GETLK', 0);
define('F_GETOWN', 0);
define('F_RDLCK', 0);
define('F_SETFL', 0);
define('F_SETLK', 0);
define('F_SETLKW', 0);
define('F_SETOWN', 0);
define('F_UNLCK', 0);
define('F_WRLCK', 0);
define('GD_BUNDLED', 0);
define('GD_EXTRA_VERSION', '');
define('GD_MAJOR_VERSION', 0);
define('GD_MINOR_VERSION', 0);
define('GD_RELEASE_VERSION', 0);
define('GD_VERSION', '');
define('GEOIP_ASNUM_EDITION', 0);
define('GEOIP_CITY_EDITION_REV0', 0);
define('GEOIP_CITY_EDITION_REV1', 0);
define('GEOIP_COUNTRY_EDITION', 0);
define('GEOIP_DOMAIN_EDITION', 0);
define('GEOIP_ISP_EDITION', 0);
define('GEOIP_NETSPEED_EDITION', 0);
define('GEOIP_ORG_EDITION', 0);
define('GEOIP_PROXY_EDITION', 0);
define('GEOIP_REGION_EDITION_REV0', 0);
define('GEOIP_REGION_EDITION_REV1', 0);
define('GLOB_AVAILABLE_FLAGS', 0);
define('GLOB_BRACE', 0);
define('GLOB_MARK', 0);
define('GLOB_NOCHECK', 0);
define('GLOB_NOESCAPE', 0);
define('GLOB_NOSORT', 0);
define('GLOB_ONLYDIR', 0);
define('GMP_ROUND_MINUSINF', 0);
define('GMP_ROUND_PLUSINF', 0);
define('GMP_ROUND_ZERO', 0);
define('GMP_VERSION', '');
define('GNUPG_ERROR_EXCEPTION', 0);
define('GNUPG_ERROR_SILENT', 0);
define('GNUPG_ERROR_WARNING', 0);
define('GNUPG_PROTOCOL_CMS', 0);
define('GNUPG_PROTOCOL_OpenPGP', 0);
define('GNUPG_SIGSUM_BAD_POLICY', 0);
define('GNUPG_SIGSUM_CRL_MISSING', 0);
define('GNUPG_SIGSUM_CRL_TOO_OLD', 0);
define('GNUPG_SIGSUM_GREEN', 0);
define('GNUPG_SIGSUM_KEY_EXPIRED', 0);
define('GNUPG_SIGSUM_KEY_MISSING', 0);
define('GNUPG_SIGSUM_KEY_REVOKED', 0);
define('GNUPG_SIGSUM_RED', 0);
define('GNUPG_SIGSUM_SIG_EXPIRED', 0);
define('GNUPG_SIGSUM_SYS_ERROR', 0);
define('GNUPG_SIGSUM_VALID', 0);
define('GNUPG_SIG_MODE_CLEAR', 0);
define('GNUPG_SIG_MODE_DETACH', 0);
define('GNUPG_SIG_MODE_NORMAL', 0);
define('GNUPG_VALIDITY_FULL', 0);
define('GNUPG_VALIDITY_MARGINAL', 0);
define('GNUPG_VALIDITY_NEVER', 0);
define('GNUPG_VALIDITY_ULTIMATE', 0);
define('GNUPG_VALIDITY_UNDEFINED', 0);
define('GNUPG_VALIDITY_UNKNOWN', 0);
define('GOPHER_BINARY', 0);
define('GOPHER_BINHEX', 0);
define('GOPHER_DIRECTORY', 0);
define('GOPHER_DOCUMENT', 0);
define('GOPHER_DOSBINARY', 0);
define('GOPHER_HTTP', 0);
define('GOPHER_INFO', 0);
define('GOPHER_UNKNOWN', 0);
define('GOPHER_UUENCODED', 0);
define('GROUPING', 0);
define('GSLC_SSL_NO_AUTH', 0);
define('GSLC_SSL_ONEWAY_AUTH', 0);
define('GSLC_SSL_TWOWAY_AUTH', 0);
define('HASH_HMAC', 0);
define('HTML_ENTITIES', 0);
define('HTML_SPECIALCHARS', 0);
define('HTTP_SUPPORT', 0);
define('HTTP_SUPPORT_ENCODINGS', 0);
define('HTTP_SUPPORT_MAGICMIME', 0);
define('HTTP_SUPPORT_REQUESTS', 0);
define('HTTP_SUPPORT_SSLREQUESTS', 0);
define('HW_ATTR_LANG', 0);
define('HW_ATTR_NONE', 0);
define('HW_ATTR_NR', 0);
define('IBASE_REC_VERSION', 0);
define('IBASE_TEXT', 0);
define('ICONV_IMPL', 0);
define('ICONV_MIME_DECODE_CONTINUE_ON_ERROR', 0);
define('ICONV_MIME_DECODE_STRICT', 0);
define('ICONV_VERSION', 0);
define('IdletoOverDown', 0);
define('IdletoOverUp', 0);
define('IFX_HOLD', 0);
define('IFX_LO_APPEND', 0);
define('IFX_LO_BUFFER', 0);
define('IFX_LO_NOBUFFER', 0);
define('IFX_LO_RDONLY', 0);
define('IFX_LO_RDWR', 0);
define('IFX_LO_WRONLY', 0);
define('IFX_SCROLL', 0);
define('IIS_ANONYMOUS', 0);
define('IIS_BASIC', 0);
define('IIS_EXECUTE', 0);
define('IIS_NTLM', 0);
define('IIS_PAUSED', 0);
define('IIS_READ', 0);
define('IIS_RUNNING', 0);
define('IIS_SCRIPT', 0);
define('IIS_STARTING', 0);
define('IIS_STOPPED', 0);
define('IIS_WRITE', 0);
define('ILL_BADSTK', 0);
define('ILL_COPROC', 0);
define('ILL_ILLADR', 0);
define('ILL_ILLOPC', 0);
define('ILL_ILLOPN', 0);
define('ILL_ILLTRP', 0);
define('ILL_PRVOPC', 0);
define('ILL_PRVREG', 0);
define('IMAGETYPE_BMP', 0);
define('IMAGETYPE_GIF', 0);
define('IMAGETYPE_ICO', 0);
define('IMAGETYPE_IFF', 0);
define('IMAGETYPE_JB2', 0);
define('IMAGETYPE_JP2', 0);
define('IMAGETYPE_JPC', 0);
define('IMAGETYPE_JPEG', 0);
define('IMAGETYPE_JPEG2000', 0);
define('IMAGETYPE_JPX', 0);
define('IMAGETYPE_PNG', 0);
define('IMAGETYPE_PSD', 0);
define('IMAGETYPE_SWC', 0);
define('IMAGETYPE_SWF', 0);
define('IMAGETYPE_TIFF_II', 0);
define('IMAGETYPE_TIFF_MM', 0);
define('IMAGETYPE_WBMP', 0);
define('IMAGETYPE_XBM', 0);
define('IMAP_CLOSETIMEOUT', 0);
define('IMAP_GC_ELT', 0);
define('IMAP_GC_ENV', 0);
define('IMAP_GC_TEXTS', 0);
define('IMAP_OPENTIMEOUT', 0);
define('IMAP_READTIMEOUT', 0);
define('IMAP_WRITETIMEOUT', 0);
define('IMG_ARC_CHORD', 0);
define('IMG_ARC_EDGED', 0);
define('IMG_ARC_NOFILL', 0);
define('IMG_ARC_PIE', 0);
define('IMG_ARC_ROUNDED', 0);
define('IMG_COLOR_BRUSHED', 0);
define('IMG_COLOR_STYLED', 0);
define('IMG_COLOR_STYLEDBRUSHED', 0);
define('IMG_COLOR_TILED', 0);
define('IMG_COLOR_TRANSPARENT', 0);
define('IMG_EFFECT_ALPHABLEND', 0);
define('IMG_EFFECT_NORMAL', 0);
define('IMG_EFFECT_OVERLAY', 0);
define('IMG_EFFECT_REPLACE', 0);
define('IMG_FILTER_BRIGHTNESS', 0);
define('IMG_FILTER_COLORIZE', 0);
define('IMG_FILTER_CONTRAST', 0);
define('IMG_FILTER_EDGEDETECT', 0);
define('IMG_FILTER_EMBOSS', 0);
define('IMG_FILTER_GAUSSIAN_BLUR', 0);
define('IMG_FILTER_GRAYSCALE', 0);
define('IMG_FILTER_MEAN_REMOVAL', 0);
define('IMG_FILTER_NEGATE', 0);
define('IMG_FILTER_PIXELATE', 0);
define('IMG_FILTER_SELECTIVE_BLUR', 0);
define('IMG_FILTER_SMOOTH', 0);
define('IMG_GD2_COMPRESSED', 0);
define('IMG_GD2_RAW', 0);
define('IMG_GIF', 0);
define('IMG_JPEG', 0);
define('IMG_JPG', 0);
define('IMG_PNG', 0);
define('IMG_WBMP', 0);
define('IMG_XPM', 0);
define('INF', 0);
define('INFO_ALL', 0);
define('INFO_CONFIGURATION', 0);
define('INFO_CREDITS', 0);
define('INFO_ENVIRONMENT', 0);
define('INFO_GENERAL', 0);
define('INFO_LICENSE', 0);
define('INFO_MODULES', 0);
define('INFO_VARIABLES', 0);
define('INGRES_API_VERSION', 0);
define('INGRES_ASSOC', 0);
define('INGRES_BOTH', 0);
define('INGRES_CURSOR_READONLY', 0);
define('INGRES_CURSOR_UPDATE', 0);
define('INGRES_DATE_DMY', 0);
define('INGRES_DATE_FINNISH', 0);
define('INGRES_DATE_GERMAN', 0);
define('INGRES_DATE_ISO', 0);
define('INGRES_DATE_ISO4', 0);
define('INGRES_DATE_MDY', 0);
define('INGRES_DATE_MULTINATIONAL', 0);
define('INGRES_DATE_MULTINATIONAL4', 0);
define('INGRES_DATE_YMD', 0);
define('INGRES_EXT_VERSION', '');
define('INGRES_MONEY_LEADING', 0);
define('INGRES_MONEY_TRAILING', 0);
define('INGRES_NUM', 0);
define('INGRES_STRUCTURE_BTREE', 0);
define('INGRES_STRUCTURE_CBTREE', 0);
define('INGRES_STRUCTURE_CHASH', 0);
define('INGRES_STRUCTURE_CHEAP', 0);
define('INGRES_STRUCTURE_CISAM', 0);
define('INGRES_STRUCTURE_HASH', 0);
define('INGRES_STRUCTURE_HEAP', 0);
define('INGRES_STRUCTURE_ISAM', 0);
define('INI_ALL', 0);
define('INI_PERDIR', 0);
define('INI_SCANNER_NORMAL', 0);
define('INI_SCANNER_RAW', 0);
define('INI_SYSTEM', 0);
define('INI_USER', 0);
define('INPUT_COOKIE', 0);
define('INPUT_ENV', 0);
define('INPUT_GET', 0);
define('INPUT_POST', 0);
define('INPUT_REQUEST', 0);
define('INPUT_SERVER', 0);
define('INPUT_SESSION', 0);
define('INT_CURR_SYMBOL', 0);
define('INT_FRAC_DIGITS', 0);
define('IN_ACCESS', 0);
define('IN_ALL_EVENTS', 0);
define('IN_ATTRIB', 0);
define('IN_CLOSE', 0);
define('IN_CLOSE_NOWRITE', 0);
define('IN_CLOSE_WRITE', 0);
define('IN_CREATE', 0);
define('IN_DELETE', 0);
define('IN_DELETE_SELF', 0);
define('IN_DONT_FOLLOW', 0);
define('IN_IGNORED', 0);
define('IN_ISDIR', 0);
define('IN_MASK_ADD', 0);
define('IN_MODIFY', 0);
define('IN_MOVE', 0);
define('IN_MOVED_FROM', 0);
define('IN_MOVED_TO', 0);
define('IN_MOVE_SELF', 0);
define('IN_ONESHOT', 0);
define('IN_ONLYDIR', 0);
define('IN_OPEN', 0);
define('IN_Q_OVERFLOW', 0);
define('IN_UNMOUNT', 0);
define('JSON_ERROR_CTRL_CHAR', 0);
define('JSON_ERROR_DEPTH', 0);
define('JSON_ERROR_NONE', 0);
define('JSON_ERROR_SYNTAX', 0);
define('JSON_ERROR_UTF8', 0);
define('LATT_HASCHILDREN', 0);
define('LATT_HASNOCHILDREN', 0);
define('LATT_MARKED', 0);
define('LATT_NOINFERIORS', 0);
define('LATT_NOSELECT', 0);
define('LATT_REFERRAL', 0);
define('LATT_UNMARKED', 0);
define('LC_ALL', 0);
define('LC_COLLATE', 0);
define('LC_CTYPE', 0);
define('LC_MESSAGES', 0);
define('LC_MONETARY', 0);
define('LC_NUMERIC', 0);
define('LC_TIME', 0);
define('LDAP_DEREF_ALWAYS', 0);
define('LDAP_DEREF_FINDING', 0);
define('LDAP_DEREF_NEVER', 0);
define('LDAP_DEREF_SEARCHING', 0);
define('LDAP_OPT_CLIENT_CONTROLS', 0);
define('LDAP_OPT_DEBUG_LEVEL', 0);
define('LDAP_OPT_DEREF', 0);
define('LDAP_OPT_ERROR_NUMBER', 0);
define('LDAP_OPT_ERROR_STRING', 0);
define('LDAP_OPT_HOST_NAME', 0);
define('LDAP_OPT_MATCHED_DN', 0);
define('LDAP_OPT_NETWORK_TIMEOUT', 0);
define('LDAP_OPT_PROTOCOL_VERSION', 0);
define('LDAP_OPT_REFERRALS', 0);
define('LDAP_OPT_RESTART', 0);
define('LDAP_OPT_SERVER_CONTROLS', 0);
define('LDAP_OPT_SIZELIMIT', 0);
define('LDAP_OPT_TIMELIMIT', 0);
define('LIBEXSLT_DOTTED_VERSION', '');
define('LIBEXSLT_VERSION', 0);
define('LIBXML_COMPACT', 0);
define('LIBXML_DOTTED_VERSION', '');
define('LIBXML_DTDATTR', 0);
define('LIBXML_DTDLOAD', 0);
define('LIBXML_DTDVALID', 0);
define('LIBXML_ERR_ERROR', 0);
define('LIBXML_ERR_FATAL', 0);
define('LIBXML_ERR_NONE', 0);
define('LIBXML_ERR_WARNING', 0);
define('LIBXML_NOBLANKS', 0);
define('LIBXML_NOCDATA', 0);
define('LIBXML_NOEMPTYTAG', 0);
define('LIBXML_NOENT', 0);
define('LIBXML_NOERROR', 0);
define('LIBXML_NONET', 0);
define('LIBXML_NOWARNING', 0);
define('LIBXML_NOXMLDECL', 0);
define('LIBXML_NSCLEAN', 0);
define('LIBXML_VERSION', 0);
define('LIBXML_XINCLUDE', 0);
define('LIBXSLT_DOTTED_VERSION', '');
define('LIBXSLT_VERSION', 0);
define('LOCK_EX', 0);
define('LOCK_NB', 0);
define('LOCK_SH', 0);
define('LOCK_UN', 0);
define('LOG_ALERT', 0);
define('LOG_AUTH', 0);
define('LOG_AUTHPRIV', 0);
define('LOG_CONS', 0);
define('LOG_CRIT', 0);
define('LOG_CRON', 0);
define('LOG_DAEMON', 0);
define('LOG_DEBUG', 0);
define('LOG_EMERG', 0);
define('LOG_ERR', 0);
define('LOG_INFO', 0);
define('LOG_KERN', 0);
define('LOG_LOCAL0', 0);
define('LOG_LOCAL0 ... LOG_LOCAL7', 0);
define('LOG_LOCAL1', 0);
define('LOG_LOCAL2', 0);
define('LOG_LOCAL3', 0);
define('LOG_LOCAL4', 0);
define('LOG_LOCAL5', 0);
define('LOG_LOCAL6', 0);
define('LOG_LOCAL7', 0);
define('LOG_LPR', 0);
define('LOG_MAIL', 0);
define('LOG_NDELAY', 0);
define('LOG_NEWS', 0);
define('LOG_NOTICE', 0);
define('LOG_NOWAIT', 0);
define('LOG_ODELAY', 0);
define('LOG_PERROR', 0);
define('LOG_PID', 0);
define('LOG_SYSLOG', 0);
define('LOG_USER', 0);
define('LOG_UUCP', 0);
define('LOG_WARNING', 0);
define('MAILPARSE_EXTRACT_OUTPUT', 0);
define('MAILPARSE_EXTRACT_RETURN', 0);
define('MAILPARSE_EXTRACT_STREAM', 0);
define('MB_CASE_LOWER', 0);
define('MB_CASE_TITLE', 0);
define('MB_CASE_UPPER', 0);
define('MB_OVERLOAD_MAIL', 0);
define('MB_OVERLOAD_REGEX', 0);
define('MB_OVERLOAD_STRING', 0);
define('MEMCACHE_COMPRESSED', 0);
define('MEMCACHE_HAVE_SESSION', 0);
define('MEMORY_TRACE', 0);
define('MenuEnter', 0);
define('MenuExit', 0);
define('MING_NEW', 0);
define('MING_ZLIB', 0);
/**
 * iMoniker COM status code, return on errors where the function call
 * failed due to unavailability.
 **/
define('MK_E_UNAVAILABLE', 0);
define('MOD_COLOR', 0);
define('MOD_MATRIX', 0);
define('MON_1', 0);
define('MON_2', 0);
define('MON_3', 0);
define('MON_4', 0);
define('MON_5', 0);
define('MON_6', 0);
define('MON_7', 0);
define('MON_8', 0);
define('MON_9', 0);
define('MON_10', 0);
define('MON_11', 0);
define('MON_12', 0);
define('MON_DECIMAL_POINT', 0);
define('MON_GROUPING', 0);
define('MON_THOUSANDS_SEP', 0);
define('MSG_DONTROUTE', 0);
define('MSG_EOF', 0);
define('MSG_EOR', 0);
define('MSG_OOB', 0);
define('MSG_PEEK', 0);
define('MSG_WAITALL', 0);
define('MSQL_ASSOC', 0);
define('MSQL_BOTH', 0);
define('MSQL_NUM', 0);
define('MSSQL_ASSOC', 0);
define('MSSQL_BOTH', 0);
define('MSSQL_NUM', 0);
define('MYSQL_ASSOC', 0);
define('MYSQL_BOTH', 0);
define('MYSQL_CLIENT_COMPRESS', 0);
define('MYSQL_CLIENT_IGNORE_SPACE', 0);
define('MYSQL_CLIENT_INTERACTIVE', 0);
define('MYSQL_CLIENT_SSL', 0);
define('MYSQL_NUM', 0);
define('M_1_PI', 0);
define('M_2_PI', 0);
define('M_2_SQRTPI', 0);
define('M_DONE', 0);
define('M_E', 0);
define('M_ERROR', 0);
define('M_EULER', 0);
define('M_FAIL', 0);
define('M_LN2', 0);
define('M_LN10', 0);
define('M_LNPI', 0);
define('M_LOG2E', 0);
define('M_LOG10E', 0);
define('M_PENDING', 0);
define('M_PI', 0);
define('M_PI_2', 0);
define('M_PI_4', 0);
define('M_SQRT1_2', 0);
define('M_SQRT2', 0);
define('M_SQRT3', 0);
define('M_SQRTPI', 0);
define('M_SUCCESS', 0);
define('NAN', 0);
define('NCURSES_ALL_MOUSE_EVENTS', 0);
define('NCURSES_BUTTON1_CLICKED', 0);
define('NCURSES_BUTTON1_DOUBLE_CLICKED', 0);
define('NCURSES_BUTTON1_PRESSED', 0);
define('NCURSES_BUTTON1_RELEASED', 0);
define('NCURSES_BUTTON1_TRIPLE_CLICKED', 0);
define('NCURSES_BUTTON_ALT', 0);
define('NCURSES_BUTTON_CTRL', 0);
define('NCURSES_BUTTON_SHIFT', 0);
define('NCURSES_COLOR_BLACK', 0);
define('NCURSES_COLOR_BLUE', 0);
define('NCURSES_COLOR_CYAN', 0);
define('NCURSES_COLOR_GREEN', 0);
define('NCURSES_COLOR_MAGENTA', 0);
define('NCURSES_COLOR_RED', 0);
define('NCURSES_COLOR_WHITE', 0);
define('NCURSES_COLOR_YELLOW', 0);
define('NCURSES_KEY_A1', 0);
define('NCURSES_KEY_A3', 0);
define('NCURSES_KEY_B2', 0);
define('NCURSES_KEY_BACKSPACE', 0);
define('NCURSES_KEY_BEG', 0);
define('NCURSES_KEY_BTAB', 0);
define('NCURSES_KEY_C1', 0);
define('NCURSES_KEY_C3', 0);
define('NCURSES_KEY_CANCEL', 0);
define('NCURSES_KEY_CATAB', 0);
define('NCURSES_KEY_CLEAR', 0);
define('NCURSES_KEY_CLOSE', 0);
define('NCURSES_KEY_COMMAND', 0);
define('NCURSES_KEY_COPY', 0);
define('NCURSES_KEY_CREATE', 0);
define('NCURSES_KEY_CTAB', 0);
define('NCURSES_KEY_DC', 0);
define('NCURSES_KEY_DL', 0);
define('NCURSES_KEY_DOWN', 0);
define('NCURSES_KEY_EIC', 0);
define('NCURSES_KEY_END', 0);
define('NCURSES_KEY_EOL', 0);
define('NCURSES_KEY_EOS', 0);
define('NCURSES_KEY_EXIT', 0);
define('NCURSES_KEY_F0', 0);
define('NCURSES_KEY_FIND', 0);
define('NCURSES_KEY_HELP', 0);
define('NCURSES_KEY_HOME', 0);
define('NCURSES_KEY_IC', 0);
define('NCURSES_KEY_IL', 0);
define('NCURSES_KEY_LEFT', 0);
define('NCURSES_KEY_LL', 0);
define('NCURSES_KEY_MARK', 0);
define('NCURSES_KEY_MAX', 0);
define('NCURSES_KEY_MESSAGE', 0);
define('NCURSES_KEY_MOUSE', 0);
define('NCURSES_KEY_MOVE', 0);
define('NCURSES_KEY_NEXT', 0);
define('NCURSES_KEY_NPAGE', 0);
define('NCURSES_KEY_OPEN', 0);
define('NCURSES_KEY_OPTIONS', 0);
define('NCURSES_KEY_PPAGE', 0);
define('NCURSES_KEY_PREVIOUS', 0);
define('NCURSES_KEY_PRINT', 0);
define('NCURSES_KEY_REDO', 0);
define('NCURSES_KEY_REFERENCE', 0);
define('NCURSES_KEY_REFRESH', 0);
define('NCURSES_KEY_REPLACE', 0);
define('NCURSES_KEY_RESET', 0);
define('NCURSES_KEY_RESTART', 0);
define('NCURSES_KEY_RESUME', 0);
define('NCURSES_KEY_RIGHT', 0);
define('NCURSES_KEY_SAVE', 0);
define('NCURSES_KEY_SBEG', 0);
define('NCURSES_KEY_SCANCEL', 0);
define('NCURSES_KEY_SCOMMAND', 0);
define('NCURSES_KEY_SCOPY', 0);
define('NCURSES_KEY_SCREATE', 0);
define('NCURSES_KEY_SDC', 0);
define('NCURSES_KEY_SDL', 0);
define('NCURSES_KEY_SELECT', 0);
define('NCURSES_KEY_SEND', 0);
define('NCURSES_KEY_SEOL', 0);
define('NCURSES_KEY_SEXIT', 0);
define('NCURSES_KEY_SF', 0);
define('NCURSES_KEY_SFIND', 0);
define('NCURSES_KEY_SHELP', 0);
define('NCURSES_KEY_SHOME', 0);
define('NCURSES_KEY_SIC', 0);
define('NCURSES_KEY_SLEFT', 0);
define('NCURSES_KEY_SMESSAGE', 0);
define('NCURSES_KEY_SMOVE', 0);
define('NCURSES_KEY_SNEXT', 0);
define('NCURSES_KEY_SOPTIONS', 0);
define('NCURSES_KEY_SPREVIOUS', 0);
define('NCURSES_KEY_SPRINT', 0);
define('NCURSES_KEY_SR', 0);
define('NCURSES_KEY_SREDO', 0);
define('NCURSES_KEY_SREPLACE', 0);
define('NCURSES_KEY_SRESET', 0);
define('NCURSES_KEY_SRIGHT', 0);
define('NCURSES_KEY_SRSUME', 0);
define('NCURSES_KEY_SSAVE', 0);
define('NCURSES_KEY_SSUSPEND', 0);
define('NCURSES_KEY_STAB', 0);
define('NCURSES_KEY_UNDO', 0);
define('NCURSES_KEY_UP', 0);
define('NCURSES_REPORT_MOUSE_POSITION', 0);
define('NEGATIVE_SIGN', 0);
define('NEWT_ANCHOR_BOTTOM', 0);
define('NEWT_ANCHOR_LEFT', 0);
define('NEWT_ANCHOR_RIGHT', 0);
define('NEWT_ANCHOR_TOP', 0);
define('NEWT_ARG_APPEND', 0);
define('NEWT_ARG_LAST', 0);
define('NEWT_CHECKBOXTREE_COLLAPSED', 0);
define('NEWT_CHECKBOXTREE_EXPANDED', 0);
define('NEWT_CHECKBOXTREE_HIDE_BOX', 0);
define('NEWT_CHECKBOXTREE_SELECTED', 0);
define('NEWT_CHECKBOXTREE_UNSELECTABLE', 0);
define('NEWT_CHECKBOXTREE_UNSELECTED', 0);
define('NEWT_COLORSET_ACTBUTTON', 0);
define('NEWT_COLORSET_ACTCHECKBOX', 0);
define('NEWT_COLORSET_ACTLISTBOX', 0);
define('NEWT_COLORSET_ACTSELLISTBOX', 0);
define('NEWT_COLORSET_ACTTEXTBOX', 0);
define('NEWT_COLORSET_BORDER', 0);
define('NEWT_COLORSET_BUTTON', 0);
define('NEWT_COLORSET_CHECKBOX', 0);
define('NEWT_COLORSET_COMPACTBUTTON', 0);
define('NEWT_COLORSET_DISENTRY', 0);
define('NEWT_COLORSET_EMPTYSCALE', 0);
define('NEWT_COLORSET_ENTRY', 0);
define('NEWT_COLORSET_FULLSCALE', 0);
define('NEWT_COLORSET_HELPLINE', 0);
define('NEWT_COLORSET_LABEL', 0);
define('NEWT_COLORSET_LISTBOX', 0);
define('NEWT_COLORSET_ROOT', 0);
define('NEWT_COLORSET_ROOTTEXT', 0);
define('NEWT_COLORSET_SELLISTBOX', 0);
define('NEWT_COLORSET_SHADOW', 0);
define('NEWT_COLORSET_TEXTBOX', 0);
define('NEWT_COLORSET_TITLE', 0);
define('NEWT_COLORSET_WINDOW', 0);
define('NEWT_ENTRY_DISABLED', 0);
define('NEWT_ENTRY_HIDDEN', 0);
define('NEWT_ENTRY_RETURNEXIT', 0);
define('NEWT_ENTRY_SCROLL', 0);
define('NEWT_EXIT_COMPONENT', 0);
define('NEWT_EXIT_FDREADY', 0);
define('NEWT_EXIT_HOTKEY', 0);
define('NEWT_EXIT_TIMER', 0);
define('NEWT_FD_EXCEPT', 0);
define('NEWT_FD_READ', 0);
define('NEWT_FD_WRITE', 0);
define('NEWT_FLAGS_RESET', 0);
define('NEWT_FLAGS_SET', 0);
define('NEWT_FLAGS_TOGGLE', 0);
define('NEWT_FLAG_BORDER', 0);
define('NEWT_FLAG_CHECKBOX', 0);
define('NEWT_FLAG_DISABLED', 0);
define('NEWT_FLAG_HIDDEN', 0);
define('NEWT_FLAG_MULTIPLE', 0);
define('NEWT_FLAG_NOF12', 0);
define('NEWT_FLAG_PASSWORD', 0);
define('NEWT_FLAG_RETURNEXIT', 0);
define('NEWT_FLAG_SCROLL', 0);
define('NEWT_FLAG_SELECTED', 0);
define('NEWT_FLAG_SHOWCURSOR', 0);
define('NEWT_FLAG_WRAP', 0);
define('NEWT_FORM_NOF12', 0);
define('NEWT_GRID_COMPONENT', 0);
define('NEWT_GRID_EMPTY', 0);
define('NEWT_GRID_FLAG_GROWX', 0);
define('NEWT_GRID_FLAG_GROWY', 0);
define('NEWT_GRID_SUBGRID', 0);
define('NEWT_KEY_BKSPC', 0);
define('NEWT_KEY_DELETE', 0);
define('NEWT_KEY_DOWN', 0);
define('NEWT_KEY_END', 0);
define('NEWT_KEY_ENTER', 0);
define('NEWT_KEY_ESCAPE', 0);
define('NEWT_KEY_EXTRA_BASE', 0);
define('NEWT_KEY_F1', 0);
define('NEWT_KEY_F2', 0);
define('NEWT_KEY_F3', 0);
define('NEWT_KEY_F4', 0);
define('NEWT_KEY_F5', 0);
define('NEWT_KEY_F6', 0);
define('NEWT_KEY_F7', 0);
define('NEWT_KEY_F8', 0);
define('NEWT_KEY_F9', 0);
define('NEWT_KEY_F10', 0);
define('NEWT_KEY_F11', 0);
define('NEWT_KEY_F12', 0);
define('NEWT_KEY_HOME', 0);
define('NEWT_KEY_INSERT', 0);
define('NEWT_KEY_LEFT', 0);
define('NEWT_KEY_PGDN', 0);
define('NEWT_KEY_PGUP', 0);
define('NEWT_KEY_RESIZE', 0);
define('NEWT_KEY_RETURN', 0);
define('NEWT_KEY_RIGHT', 0);
define('NEWT_KEY_SUSPEND', 0);
define('NEWT_KEY_TAB', 0);
define('NEWT_KEY_UNTAB', 0);
define('NEWT_KEY_UP', 0);
define('NEWT_LISTBOX_RETURNEXIT', 0);
define('NEWT_TEXTBOX_SCROLL', 0);
define('NEWT_TEXTBOX_WRAP', 0);
define('NIL', 0);
define('NOEXPR', 0);
/**
 * Ignore case sensitivity.
 **/
define('NORM_IGNORECASE', 0);
/**
 * Ignore Kana type.
 **/
define('NORM_IGNOREKANATYPE', 0);
/**
 * Ignore Arabic kashida characters.
 **/
define('NORM_IGNOREKASHIDA', 0);
/**
 * Ignore nonspacing characters.
 **/
define('NORM_IGNORENONSPACE', 0);
/**
 * Ignore symbols.
 **/
define('NORM_IGNORESYMBOLS', 0);
/**
 * Ignore string width.
 **/
define('NORM_IGNOREWIDTH', 0);
define('NOSTR', 0);
define('N_CS_PRECEDES', 0);
define('N_SEP_BY_SPACE', 0);
define('N_SIGN_POSN', 0);
define('OCI_B_BFILE', 0);
define('OCI_B_BLOB', 0);
define('OCI_B_CFILEE', 0);
define('OCI_B_CLOB', 0);
define('OCI_B_CURSOR', 0);
define('OCI_B_INT', 0);
define('OCI_B_NTY', 0);
define('OCI_B_NUM', 0);
define('OCI_B_ROWID', 0);
define('OCI_B_SQLT_NTY', 0);
define('OCI_DEFAULT', 0);
define('OCI_DTYPE_FILE', 0);
define('OCI_DTYPE_LOB', 0);
define('OCI_DTYPE_ROWID', 0);
define('OCI_NO_AUTO_COMMIT', 0);
define('ODBC_BINMODE_CONVERT', 0);
define('ODBC_BINMODE_PASSTHRU', 0);
define('ODBC_BINMODE_RETURN', 0);
define('ODBC_TYPE', 0);
define('OGGVORBIS_PCM_S8', 0);
define('OGGVORBIS_PCM_S16_BE', 0);
define('OGGVORBIS_PCM_S16_LE', 0);
define('OGGVORBIS_PCM_U8', 0);
define('OGGVORBIS_PCM_U16_BE', 0);
define('OGGVORBIS_PCM_U16_LE', 0);
define('OP_ANONYMOUS', 0);
define('OP_DEBUG', 0);
define('OP_EXPUNGE', 0);
define('OP_HALFOPEN', 0);
define('OP_PROTOTYPE', 0);
define('OP_READONLY', 0);
define('OP_SECURE', 0);
define('OP_SHORTCACHE', 0);
define('OP_SILENT', 0);
define('OutDowntoIdle', 0);
define('OutDowntoOverDown', 0);
define('OverDowntoIdle', 0);
define('OverDowntoOutDown', 0);
define('OverUptoIdle', 0);
define('OverUptoOverDown', 0);
define('O_APPEND', 0);
define('O_ASYNC', 0);
define('O_CREAT', 0);
define('O_EXCL', 0);
define('O_NDELAY', 0);
define('O_NOCTTY', 0);
define('O_NONBLOCK', 0);
define('O_RDONLY', 0);
define('O_RDWR', 0);
define('O_SYNC', 0);
define('O_TRUNC', 0);
define('O_WRONLY', 0);
define('PATHINFO_BASENAME', 0);
define('PATHINFO_DIRNAME', 0);
define('PATHINFO_EXTENSION', 0);
define('PATHINFO_FILENAME', 0);
define('PATH_SEPARATOR', '');
define('PCRE_VERSION', 0);
define('PEAR_EXTENSION_DIR', '');
define('PEAR_INSTALL_DIR', '');
define('PGSQL_ASSOC', 0);
define('PGSQL_BAD_RESPONSE', 0);
define('PGSQL_BOTH', 0);
define('PGSQL_COMMAND_OK', 0);
define('PGSQL_CONNECTION_BAD', 0);
define('PGSQL_CONNECTION_OK', 0);
define('PGSQL_CONNECT_FORCE_NEW', 0);
define('PGSQL_CONV_FORCE_NULL', 0);
define('PGSQL_CONV_IGNORE_DEFAULT', 0);
define('PGSQL_COPY_IN', 0);
define('PGSQL_COPY_OUT', 0);
define('PGSQL_DIAG_CONTEXT', 0);
define('PGSQL_DIAG_INTERNAL_POSITION', 0);
define('PGSQL_DIAG_INTERNAL_QUERY', 0);
define('PGSQL_DIAG_MESSAGE_DETAIL', 0);
define('PGSQL_DIAG_MESSAGE_HINT', 0);
define('PGSQL_DIAG_MESSAGE_PRIMARY', 0);
define('PGSQL_DIAG_SEVERITY', 0);
define('PGSQL_DIAG_SOURCE_FILE', 0);
define('PGSQL_DIAG_SOURCE_FUNCTION', 0);
define('PGSQL_DIAG_SOURCE_LINE', 0);
define('PGSQL_DIAG_SQLSTATE', 0);
define('PGSQL_DIAG_STATEMENT_POSITION', 0);
define('PGSQL_EMPTY_QUERY', 0);
define('PGSQL_ERRORS_DEFAULT', 0);
define('PGSQL_ERRORS_TERSE', 0);
define('PGSQL_ERRORS_VERBOSE', 0);
define('PGSQL_FATAL_ERROR', 0);
define('PGSQL_NONFATAL_ERROR', 0);
define('PGSQL_NUM', 0);
define('PGSQL_SEEK_CUR', 0);
define('PGSQL_SEEK_END', 0);
define('PGSQL_SEEK_SET', 0);
define('PGSQL_STATUS_LONG', 0);
define('PGSQL_STATUS_STRING', 0);
define('PGSQL_TRANSACTION_ACTIVE', 0);
define('PGSQL_TRANSACTION_IDLE', 0);
define('PGSQL_TRANSACTION_INERROR', 0);
define('PGSQL_TRANSACTION_INTRANS', 0);
define('PGSQL_TRANSACTION_UNKNOWN', 0);
define('PGSQL_TUPLES_OK', 0);
define('PHP_BINARY_READ', 0);
define('PHP_BINDIR', '');
define('PHP_CONFIG_FILE_PATH', '');
define('PHP_CONFIG_FILE_SCAN_DIR', '');
define('PHP_DATADIR', '');
define('PHP_DEBUG', 0);
define('PHP_EOL', '');
define('PHP_EXTENSION_DIR', '');
define('PHP_EXTRA_VERSION', '');
define('PHP_INT_MAX', 0);
define('PHP_INT_SIZE', 0);
define('PHP_LIBDIR', '');
define('PHP_LOCALSTATEDIR', '');
define('PHP_MAJOR_VERSION', 0);
define('PHP_MAXPATHLEN', 0);
define('PHP_MINOR_VERSION', 0);
define('PHP_NORMAL_READ', 0);
define('PHP_OS', '');
define('PHP_OUTPUT_HANDLER_CONT', 0);
define('PHP_OUTPUT_HANDLER_END', 0);
define('PHP_OUTPUT_HANDLER_START', 0);
define('PHP_PREFIX', '');
define('PHP_RELEASE_VERSION', 0);
define('PHP_ROUND_HALF_DOWN', 0);
define('PHP_ROUND_HALF_EVEN', 0);
define('PHP_ROUND_HALF_ODD', 0);
define('PHP_ROUND_HALF_UP', 0);
define('PHP_SAPI', '');
define('PHP_SHLIB_SUFFIX', '');
define('PHP_SYSCONFDIR', '');
define('PHP_URL_FRAGMENT', 0);
define('PHP_URL_HOST', 0);
define('PHP_URL_PASS', 0);
define('PHP_URL_PATH', 0);
define('PHP_URL_PORT', 0);
define('PHP_URL_QUERY', 0);
define('PHP_URL_SCHEME', 0);
define('PHP_URL_USER', 0);
define('PHP_VERSION', '');
define('PHP_VERSION_ID', 0);
define('PHP_WINDOWS_NT_DOMAIN_CONTROLLER', 0);
define('PHP_WINDOWS_NT_SERVER', 0);
define('PHP_WINDOWS_NT_WORKSTATION', 0);
define('PHP_WINDOWS_VERSION_BUILD', 0);
define('PHP_WINDOWS_VERSION_MAJOR', 0);
define('PHP_WINDOWS_VERSION_MINOR', 0);
define('PHP_WINDOWS_VERSION_PLATFORM', 0);
define('PHP_WINDOWS_VERSION_PRODUCTTYPE', 0);
define('PHP_WINDOWS_VERSION_SP_MAJOR', 0);
define('PHP_WINDOWS_VERSION_SP_MINOR', 0);
define('PHP_WINDOWS_VERSION_SUITEMASK', 0);
define('PHP_ZTS', 0);
define('PKCS7_BINARY', 0);
define('PKCS7_DETACHED', 0);
define('PKCS7_NOATTR', 0);
define('PKCS7_NOCERTS', 0);
define('PKCS7_NOCHAIN', 0);
define('PKCS7_NOINTERN', 0);
define('PKCS7_NOSIGS', 0);
define('PKCS7_NOVERIFY', 0);
define('PKCS7_TEXT', 0);
define('PM_STR', 0);
define('PNG_ALL_FILTERS', 0);
define('PNG_FILTER_AVG', 0);
define('PNG_FILTER_NONE', 0);
define('PNG_FILTER_PAETH', 0);
define('PNG_FILTER_SUB', 0);
define('PNG_FILTER_UP', 0);
define('PNG_NO_FILTER', 0);
define('POLL_ERR', 0);
define('POLL_HUP', 0);
define('POLL_IN', 0);
define('POLL_MSG', 0);
define('POLL_OUT', 0);
define('POLL_PRI', 0);
define('POSITIVE_SIGN', 0);
define('POSIX_F_OK', 0);
define('POSIX_R_OK', 0);
define('POSIX_S_IFBLK', 0);
define('POSIX_S_IFCHR', 0);
define('POSIX_S_IFIFO', 0);
define('POSIX_S_IFREG', 0);
define('POSIX_S_IFSOCK', 0);
define('POSIX_W_OK', 0);
define('POSIX_X_OK', 0);
define('PREG_BACKTRACK_LIMIT_ERROR', 0);
define('PREG_BAD_UTF8_ERROR', 0);
define('PREG_BAD_UTF8_OFFSET_ERROR', 0);
define('PREG_INTERNAL_ERROR', 0);
define('PREG_NO_ERROR', 0);
define('PREG_OFFSET_CAPTURE', 0);
define('PREG_PATTERN_ORDER', 0);
define('PREG_RECURSION_LIMIT_ERROR', 0);
define('PREG_SET_ORDER', 0);
define('PREG_SPLIT_DELIM_CAPTURE', 0);
define('PREG_SPLIT_NO_EMPTY', 0);
define('PREG_SPLIT_OFFSET_CAPTURE', 0);
define('PRINTER_BACKGROUND_COLOR', 0);
define('PRINTER_BRUSH_CROSS', 0);
define('PRINTER_BRUSH_CUSTOM', 0);
define('PRINTER_BRUSH_DIAGCROSS', 0);
define('PRINTER_BRUSH_DIAGONAL', 0);
define('PRINTER_BRUSH_FDIAGONAL', 0);
define('PRINTER_BRUSH_HORIZONTAL', 0);
define('PRINTER_BRUSH_SOLID', 0);
define('PRINTER_BRUSH_VERTICAL', 0);
define('PRINTER_COPIES', 0);
define('PRINTER_DEVICENAME', 0);
define('PRINTER_DRIVERVERSION', 0);
define('PRINTER_ENUM_CONNECTIONS', 0);
define('PRINTER_ENUM_DEFAULT', 0);
define('PRINTER_ENUM_LOCAL', 0);
define('PRINTER_ENUM_NAME', 0);
define('PRINTER_ENUM_NETWORK', 0);
define('PRINTER_ENUM_REMOTE', 0);
define('PRINTER_ENUM_SHARED', 0);
define('PRINTER_FORMAT_A3', 0);
define('PRINTER_FORMAT_A4', 0);
define('PRINTER_FORMAT_A5', 0);
define('PRINTER_FORMAT_B4', 0);
define('PRINTER_FORMAT_B5', 0);
define('PRINTER_FORMAT_CUSTOM', 0);
define('PRINTER_FORMAT_FOLIO', 0);
define('PRINTER_FORMAT_LEGAL', 0);
define('PRINTER_FORMAT_LETTER', 0);
define('PRINTER_FW_BOLD', 0);
define('PRINTER_FW_HEAVY', 0);
define('PRINTER_FW_LIGHT', 0);
define('PRINTER_FW_MEDIUM', 0);
define('PRINTER_FW_NORMAL', 0);
define('PRINTER_FW_THIN', 0);
define('PRINTER_FW_ULTRABOLD', 0);
define('PRINTER_FW_ULTRALIGHT', 0);
define('PRINTER_MODE', 0);
define('PRINTER_ORIENTATION', 0);
define('PRINTER_ORIENTATION_LANDSCAPE', 0);
define('PRINTER_ORIENTATION_PORTRAIT', 0);
define('PRINTER_OUTPUT_FILE', 0);
define('PRINTER_PAPER_FORMAT', 0);
define('PRINTER_PAPER_LENGTH', 0);
define('PRINTER_PAPER_WIDTH', 0);
define('PRINTER_PEN_DASH', 0);
define('PRINTER_PEN_DASHDOT', 0);
define('PRINTER_PEN_DASHDOTDOT', 0);
define('PRINTER_PEN_DOT', 0);
define('PRINTER_PEN_INVISIBLE', 0);
define('PRINTER_PEN_SOLID', 0);
define('PRINTER_RESOLUTION_X', 0);
define('PRINTER_RESOLUTION_Y', 0);
define('PRINTER_SCALE', 0);
define('PRINTER_TA_BASELINE', 0);
define('PRINTER_TA_BOTTOM', 0);
define('PRINTER_TA_CENTER', 0);
define('PRINTER_TA_LEFT', 0);
define('PRINTER_TA_RIGHT', 0);
define('PRINTER_TA_TOP', 0);
define('PRINTER_TEXT_ALIGN', 0);
define('PRINTER_TEXT_COLOR', 0);
define('PRINTER_TITLE', 0);
define('PROF_TRACE', 0);
define('PSFS_ERR_FATAL', 0);
define('PSFS_FEED_ME', 0);
define('PSFS_FLAG_FLUSH_CLOSE', 0);
define('PSFS_FLAG_FLUSH_INC', 0);
define('PSFS_FLAG_NORMAL', 0);
define('PSFS_PASS_ON', 0);
define('PSPELL_BAD_SPELLERS', 0);
define('PSPELL_FAST', 0);
define('PSPELL_NORMAL', 0);
define('PSPELL_RUN_TOGETHER', 0);
define('P_CS_PRECEDES', 0);
define('P_SEP_BY_SPACE', 0);
define('P_SIGN_POSN', 0);
define('RADIXCHAR', 0);
define('RAR_HOST_BEOS', 0);
define('RAR_HOST_MSDOS', 0);
define('RAR_HOST_OS2', 0);
define('RAR_HOST_UNIX', 0);
define('RAR_HOST_WIN32', 0);
define('RUNKIT_ACC_PRIVATE', 0);
define('RUNKIT_ACC_PROTECTED', 0);
define('RUNKIT_ACC_PUBLIC', 0);
define('RUNKIT_IMPORT_CLASSES', 0);
define('RUNKIT_IMPORT_CLASS_CONSTS', 0);
define('RUNKIT_IMPORT_CLASS_METHODS', 0);
define('RUNKIT_IMPORT_CLASS_PROPS', 0);
define('RUNKIT_IMPORT_FUNCTIONS', 0);
define('RUNKIT_IMPORT_OVERRIDE', 0);
define('RUNKIT_VERSION', '');
define('SAM_AUTO', '');
define('SAM_BOOLEAN', '');
define('SAM_BUS', '');
define('SAM_BYTE', '');
define('SAM_BYTES', '');
define('SAM_CORRELID', '');
define('SAM_DELIVERYMODE', '');
define('SAM_DOUBLE', '');
define('SAM_ENDPOINTS', '');
define('SAM_FLOAT', '');
define('SAM_HOST', '');
define('SAM_INT', '');
define('SAM_LONG', '');
define('SAM_MANUAL', '');
define('SAM_MESSAGEID', '');
define('SAM_MQTT', '');
define('SAM_MQTT_CLEANSTART', false);
define('SAM_NON_PERSISTENT', '');
define('SAM_PASSWORD', '');
define('SAM_PERSISTENT', '');
define('SAM_PORT', '');
define('SAM_PRIORITY', '');
define('SAM_REPLY_TO', '');
define('SAM_RTT', '');
define('SAM_STRING', '');
define('SAM_TARGETCHAIN', '');
define('SAM_TEXT', '');
define('SAM_TIMETOLIVE', '');
define('SAM_TRANSACTIONS', '');
define('SAM_USERID', '');
define('SAM_WAIT', '');
define('SAM_WMQ', '');
define('SAM_WMQ_BINDINGS', '');
define('SAM_WMQ_CLIENT', '');
define('SAM_WMQ_TARGET_CLIENT', '');
define('SAM_WPM', '');
define('SA_ALL', 0);
define('SA_MESSAGES', 0);
define('SA_RECENT', 0);
define('SA_UIDNEXT', 0);
define('SA_UIDVALIDITY', 0);
define('SA_UNSEEN', 0);
define('SEEK_CUR', 0);
define('SEEK_END', 0);
define('SEEK_SET', 0);
define('SEGV_ACCERR', 0);
define('SEGV_MAPERR', 0);
define('SE_FREE', 0);
define('SE_NOPREFETCH', 0);
define('SE_UID', 0);
define('SID', '');
define('SIGABRT', 0);
define('SIGALRM', 0);
define('SIGBABY', 0);
define('SIGBUS', 0);
define('SIGCHLD', 0);
define('SIGCLD', 0);
define('SIGCONT', 0);
define('SIGFPE', 0);
define('SIGHUP', 0);
define('SIGILL', 0);
define('SIGINT', 0);
define('SIGIO', 0);
define('SIGIOT', 0);
define('SIGKILL', 0);
define('SIGPIPE', 0);
define('SIGPOLL', 0);
define('SIGPROF', 0);
define('SIGPWR', 0);
define('SIGQUIT', 0);
define('SIGSEGV', 0);
define('SIGSTKFLT', 0);
define('SIGSTOP', 0);
define('SIGSYS', 0);
define('SIGTERM', 0);
define('SIGTRAP', 0);
define('SIGTSTP', 0);
define('SIGTTIN', 0);
define('SIGTTOU', 0);
define('SIGURG', 0);
define('SIGUSR1', 0);
define('SIGUSR2', 0);
define('SIGVTALRM', 0);
define('SIGWINCH', 0);
define('SIGXCPU', 0);
define('SIGXFSZ', 0);
define('SIG_BLOCK', 0);
define('SIG_DFL', 0);
define('SIG_ERR', 0);
define('SIG_IGN', 0);
define('SIG_SETMASK', 0);
define('SIG_UNBLOCK', 0);
define('SI_ASYNCIO', 0);
define('SI_KERNEL', 0);
define('SI_MSGGQ', 0);
define('SI_NOINFO', 0);
define('SI_QUEUE', 0);
define('SI_SIGIO', 0);
define('SI_TIMER', 0);
define('SI_TKILL', 0);
define('SI_USER', 0);
define('SNMP_BIT_STR', 0);
define('SNMP_COUNTER', 0);
define('SNMP_COUNTER64', 0);
define('SNMP_INTEGER', 0);
define('SNMP_IPADDRESS', 0);
define('SNMP_NULL', 0);
define('SNMP_OBJECT_ID', 0);
define('SNMP_OCTET_STR', 0);
define('SNMP_OID_OUTPUT_FULL', 0);
define('SNMP_OID_OUTPUT_NUMERIC', 0);
define('SNMP_OPAQUE', 0);
define('SNMP_TIMETICKS', 0);
define('SNMP_UINTEGER', 0);
define('SNMP_UNSIGNED', 0);
define('SNMP_VALUE_LIBRARY', 0);
define('SNMP_VALUE_OBJECT', 0);
define('SNMP_VALUE_PLAIN', 0);
define('SOAP_1_1', 0);
define('SOAP_1_2', 0);
define('SOAP_ACTOR_NEXT', 0);
define('SOAP_ACTOR_NONE', 0);
define('SOAP_ACTOR_UNLIMATERECEIVER', 0);
define('SOAP_AUTHENTICATION_BASIC', 0);
define('SOAP_AUTHENTICATION_DIGEST', 0);
define('SOAP_COMPRESSION_ACCEPT', 0);
define('SOAP_COMPRESSION_DEFLATE', 0);
define('SOAP_COMPRESSION_GZIP', 0);
define('SOAP_DOCUMENT', 0);
define('SOAP_ENCODED', 0);
define('SOAP_ENC_ARRAY', 0);
define('SOAP_ENC_OBJECT', 0);
define('SOAP_FUNCTIONS_ALL', 0);
define('SOAP_LITERAL', 0);
define('SOAP_PERSISTENCE_REQUEST', 0);
define('SOAP_PERSISTENCE_SESSION', 0);
define('SOAP_RPC', 0);
define('SOAP_SINGLE_ELEMENT_ARRAYS', 0);
define('SOAP_USE_XSI_ARRAY_TYPE', 0);
define('SOAP_WAIT_ONE_WAY_CALLS', 0);
define('SOCK_DGRAM', 0);
define('SOCK_RAW', 0);
define('SOCK_RDM', 0);
define('SOCK_SEQPACKET', 0);
define('SOCK_STREAM', 0);
define('SOL_SOCKET', 0);
define('SOL_TCP', 0);
define('SOL_UDP', 0);
define('SORTARRIVAL', 0);
define('SORTCC', 0);
define('SORTDATE', 0);
define('SORTFROM', 0);
define('SORTSIZE', 0);
define('SORTSUBJECT', 0);
define('SORTTO', 0);
define('SORT_ASC', 0);
define('SORT_DESC', 0);
define('SORT_NUMERIC', 0);
define('SORT_REGULAR', 0);
define('SORT_STRING', 0);
define('SO_BROADCAST', 0);
define('SO_DEBUG', 0);
define('SO_DONTROUTE', 0);
define('SO_ERROR', 0);
define('SO_FREE', 0);
define('SO_KEEPALIVE', 0);
define('SO_LINGER', 0);
define('SO_NOSERVER', 0);
define('SO_OOBINLINE', 0);
define('SO_RCVBUF', 0);
define('SO_RCVLOWAT', 0);
define('SO_RCVTIMEO', 0);
define('SO_REUSEADDR', 0);
define('SO_SNDBUF', 0);
define('SO_SNDLOWAT', 0);
define('SO_SNDTIMEO', 0);
define('SO_TYPE', 0);
define('SQLBIT', 0);
define('SQLCHAR', 0);
define('SQLFLT4', 0);
define('SQLFLT8', 0);
define('SQLINT1', 0);
define('SQLINT2', 0);
define('SQLINT4', 0);
define('SQLITE_ASSOC', 0);
define('SQLITE_BOTH', 0);
define('SQLITE_NUM', 0);
define('SQLTEXT', 0);
define('SQLVARCHAR', 0);
define('SQL_BEST_ROWID', 0);
define('SQL_BIGINT', 0);
define('SQL_BINARY', 0);
define('SQL_BIT', 0);
define('SQL_CHAR', 0);
define('SQL_CONCURRENCY', 0);
define('SQL_CONCUR_LOCK', 0);
define('SQL_CONCUR_READ_ONLY', 0);
define('SQL_CONCUR_ROWVER', 0);
define('SQL_CONCUR_VALUES', 0);
define('SQL_CURSOR_DYNAMIC', 0);
define('SQL_CURSOR_FORWARD_ONLY', 0);
define('SQL_CURSOR_KEYSET_DRIVEN', 0);
define('SQL_CURSOR_STATIC', 0);
define('SQL_CURSOR_TYPE', 0);
define('SQL_CUR_USE_DRIVER', 0);
define('SQL_CUR_USE_IF_NEEDED', 0);
define('SQL_CUR_USE_ODBC', 0);
define('SQL_DATE', 0);
define('SQL_DECIMAL', 0);
define('SQL_DOUBLE', 0);
define('SQL_ENSURE', 0);
define('SQL_FLOAT', 0);
define('SQL_INDEX_ALL', 0);
define('SQL_INDEX_UNIQUE', 0);
define('SQL_INTEGER', 0);
define('SQL_KEYSET_SIZE', 0);
define('SQL_LONGVARBINARY', 0);
define('SQL_LONGVARCHAR', 0);
define('SQL_NO_NULLS', 0);
define('SQL_NULLABLE', 0);
define('SQL_NUMERIC', 0);
define('SQL_ODBC_CURSORS', 0);
define('SQL_QUICK', 0);
define('SQL_REAL', 0);
define('SQL_ROWVER', 0);
define('SQL_SCOPE_CURROW', 0);
define('SQL_SCOPE_SESSION', 0);
define('SQL_SCOPE_TRANSACTION', 0);
define('SQL_SMALLINT', 0);
define('SQL_TIME', 0);
define('SQL_TIMESTAMP', 0);
define('SQL_TINYINT', 0);
define('SQL_TYPE_DATE', 0);
define('SQL_TYPE_TIME', 0);
define('SQL_TYPE_TIMESTAMP', 0);
define('SQL_VARBINARY', 0);
define('SQL_VARCHAR', 0);
define('SSH2_DEFAULT_TERMINAL', '');
define('SSH2_DEFAULT_TERM_HEIGHT', 0);
define('SSH2_DEFAULT_TERM_UNIT', 0);
define('SSH2_DEFAULT_TERM_WIDTH', 0);
define('SSH2_FINGERPRINT_HEX', 0);
define('SSH2_FINGERPRINT_MD5', 0);
define('SSH2_FINGERPRINT_RAW', 0);
define('SSH2_FINGERPRINT_SHA1', 0);
define('SSH2_STREAM_STDERR', 0);
define('SSH2_STREAM_STDIO', 0);
define('SSH2_TERM_UNIT_CHARS', 0);
define('SSH2_TERM_UNIT_PIXELS', 0);
define('STATEMENT_TRACE', 0);
/**
 * An already opened stream to stderr. This saves opening it with
 * 
 * <?php $stderr = fopen('php://stderr', 'w'); ?>
 **/
define('STDERR', 0);
/**
 * An already opened stream to stdin. This saves opening it with
 * 
 * <?php $stdin = fopen('php://stdin', 'r'); ?>
 * 
 * If you want to read single line from stdin, you can use
 * 
 * <?php $line = trim(fgets(STDIN)); // reads one line from STDIN
 * fscanf(STDIN, "%d\n", $number); // reads number from STDIN ?>
 **/
define('STDIN', 0);
/**
 * An already opened stream to stdout. This saves opening it with
 * 
 * <?php $stdout = fopen('php://stdout', 'w'); ?>
 **/
define('STDOUT', 0);
define('STREAM_CAST_AS_STREAM', 0);
define('STREAM_CAST_FOR_SELECT', 0);
define('STREAM_CLIENT_ASYNC_CONNECT', 0);
define('STREAM_CLIENT_CONNECT', 0);
define('STREAM_CLIENT_PERSISTENT', 0);
define('STREAM_FILTER_ALL', 0);
define('STREAM_FILTER_READ', 0);
define('STREAM_FILTER_WRITE', 0);
define('STREAM_IPPROTO_ICMP', 0);
define('STREAM_IPPROTO_IP', 0);
define('STREAM_IPPROTO_RAW', 0);
define('STREAM_IPPROTO_TCP', 0);
define('STREAM_IPPROTO_UDP', 0);
define('STREAM_NOTIFY_AUTH_REQUIRED', 0);
define('STREAM_NOTIFY_AUTH_RESULT', 0);
define('STREAM_NOTIFY_COMPLETED', 0);
define('STREAM_NOTIFY_CONNECT', 0);
define('STREAM_NOTIFY_FAILURE', 0);
define('STREAM_NOTIFY_FILE_SIZE_IS', 0);
define('STREAM_NOTIFY_MIME_TYPE_IS', 0);
define('STREAM_NOTIFY_PROGRESS', 0);
define('STREAM_NOTIFY_REDIRECTED', 0);
define('STREAM_NOTIFY_RESOLVE', 0);
define('STREAM_NOTIFY_SEVERITY_ERR', 0);
define('STREAM_NOTIFY_SEVERITY_INFO', 0);
define('STREAM_NOTIFY_SEVERITY_WARN', 0);
define('STREAM_PF_INET', 0);
define('STREAM_PF_INET6', 0);
define('STREAM_PF_UNIX', 0);
define('STREAM_REPORT_ERRORS', 0);
define('STREAM_SERVER_BIND', 0);
define('STREAM_SERVER_LISTEN', 0);
define('STREAM_SHUT_RD', 0);
define('STREAM_SHUT_RDWR', 0);
define('STREAM_SHUT_WR', 0);
define('STREAM_SOCK_DGRAM', 0);
define('STREAM_SOCK_RAW', 0);
define('STREAM_SOCK_RDM', 0);
define('STREAM_SOCK_SEQPACKET', 0);
define('STREAM_SOCK_STREAM', 0);
define('STREAM_USE_PATH', 0);
define('STR_PAD_BOTH', 0);
define('STR_PAD_LEFT', 0);
define('STR_PAD_RIGHT', 0);
define('ST_SET', 0);
define('ST_SILENT', 0);
define('ST_UID', 0);
define('SUMMARY_TRACE', 0);
define('SUNFUNCS_RET_DOUBLE', 0);
define('SUNFUNCS_RET_STRING', 0);
define('SUNFUNCS_RET_TIMESTAMP', 0);
define('SVN_REVISION_HEAD', 0);
define('SWFACTION_DATA', 0);
define('SWFACTION_ENTERFRAME', 0);
define('SWFACTION_KEYDOWN', 0);
define('SWFACTION_KEYUP', 0);
define('SWFACTION_MOUSEDOWN', 0);
define('SWFACTION_MOUSEMOVE', 0);
define('SWFACTION_MOUSEUP', 0);
define('SWFACTION_ONLOAD', 0);
define('SWFACTION_UNLOAD', 0);
define('SWFBUTTON_DOWN', 0);
define('SWFBUTTON_DRAGOUT', 0);
define('SWFBUTTON_DRAGOVER', 0);
define('SWFBUTTON_HIT', 0);
define('SWFBUTTON_MOUSEDOWN', 0);
define('SWFBUTTON_MOUSEOUT', 0);
define('SWFBUTTON_MOUSEOVER', 0);
define('SWFBUTTON_MOUSEUP', 0);
define('SWFBUTTON_MOUSEUPOUTSIDE', 0);
define('SWFBUTTON_OVER', 0);
define('SWFBUTTON_UP', 0);
define('SWFFILL_CLIPPED_BITMAP', 0);
define('SWFFILL_LINEAR_GRADIENT', 0);
define('SWFFILL_RADIAL_GRADIENT', 0);
define('SWFFILL_TILED_BITMAP', 0);
define('SWFTEXTFIELD_ALIGN_CENTER', 0);
define('SWFTEXTFIELD_ALIGN_JUSTIFY', 0);
define('SWFTEXTFIELD_ALIGN_LEFT', 0);
define('SWFTEXTFIELD_ALIGN_RIGHT', 0);
define('SWFTEXTFIELD_DRAWBOX', 0);
define('SWFTEXTFIELD_HASLENGTH', 0);
define('SWFTEXTFIELD_HTML', 0);
define('SWFTEXTFIELD_MULTILINE', 0);
define('SWFTEXTFIELD_NOEDIT', 0);
define('SWFTEXTFIELD_NOSELECT', 0);
define('SWFTEXTFIELD_PASSWORD', 0);
define('SWFTEXTFIELD_WORDWRAP', 0);
define('S_IRGRP', 0);
define('S_IROTH', 0);
define('S_IRUSR', 0);
define('S_IRWXG', 0);
define('S_IRWXO', 0);
define('S_IRWXU', 0);
define('S_IWGRP', 0);
define('S_IWOTH', 0);
define('S_IWUSR', 0);
define('S_IXGRP', 0);
define('S_IXOTH', 0);
define('S_IXUSR', 0);
define('TCP_NODELAY', 0);
define('THOUSANDS_SEP', 0);
define('THOUSEP', 0);
define('TIDY_ATTR_ABBR', 0);
define('TIDY_ATTR_ACCEPT', 0);
define('TIDY_ATTR_ACCEPT_CHARSET', 0);
define('TIDY_ATTR_ACCESSKEY', 0);
define('TIDY_ATTR_ACTION', 0);
define('TIDY_ATTR_ADD_DATE', 0);
define('TIDY_ATTR_ALIGN', 0);
define('TIDY_ATTR_ALINK', 0);
define('TIDY_ATTR_ALT', 0);
define('TIDY_ATTR_ARCHIVE', 0);
define('TIDY_ATTR_AXIS', 0);
define('TIDY_ATTR_BACKGROUND', 0);
define('TIDY_ATTR_BGCOLOR', 0);
define('TIDY_ATTR_BGPROPERTIES', 0);
define('TIDY_ATTR_BORDER', 0);
define('TIDY_ATTR_BORDERCOLOR', 0);
define('TIDY_ATTR_BOTTOMMARGIN', 0);
define('TIDY_ATTR_CELLPADDING', 0);
define('TIDY_ATTR_CELLSPACING', 0);
define('TIDY_ATTR_CHAR', 0);
define('TIDY_ATTR_CHAROFF', 0);
define('TIDY_ATTR_CHARSET', 0);
define('TIDY_ATTR_CHECKED', 0);
define('TIDY_ATTR_CITE', 0);
define('TIDY_ATTR_CLASS', 0);
define('TIDY_ATTR_CLASSID', 0);
define('TIDY_ATTR_CLEAR', 0);
define('TIDY_ATTR_CODE', 0);
define('TIDY_ATTR_CODEBASE', 0);
define('TIDY_ATTR_CODETYPE', 0);
define('TIDY_ATTR_COLOR', 0);
define('TIDY_ATTR_COLS', 0);
define('TIDY_ATTR_COLSPAN', 0);
define('TIDY_ATTR_COMPACT', 0);
define('TIDY_ATTR_CONTENT', 0);
define('TIDY_ATTR_COORDS', 0);
define('TIDY_ATTR_DATA', 0);
define('TIDY_ATTR_DATAFLD', 0);
define('TIDY_ATTR_DATAPAGESIZE', 0);
define('TIDY_ATTR_DATASRC', 0);
define('TIDY_ATTR_DATETIME', 0);
define('TIDY_ATTR_DECLARE', 0);
define('TIDY_ATTR_DEFER', 0);
define('TIDY_ATTR_DIR', 0);
define('TIDY_ATTR_DISABLED', 0);
define('TIDY_ATTR_ENCODING', 0);
define('TIDY_ATTR_ENCTYPE', 0);
define('TIDY_ATTR_FACE', 0);
define('TIDY_ATTR_FOR', 0);
define('TIDY_ATTR_FRAME', 0);
define('TIDY_ATTR_FRAMEBORDER', 0);
define('TIDY_ATTR_FRAMESPACING', 0);
define('TIDY_ATTR_GRIDX', 0);
define('TIDY_ATTR_GRIDY', 0);
define('TIDY_ATTR_HEADERS', 0);
define('TIDY_ATTR_HEIGHT', 0);
define('TIDY_ATTR_HREF', 0);
define('TIDY_ATTR_HREFLANG', 0);
define('TIDY_ATTR_HSPACE', 0);
define('TIDY_ATTR_HTTP_EQUIV', 0);
define('TIDY_ATTR_ID', 0);
define('TIDY_ATTR_ISMAP', 0);
define('TIDY_ATTR_LABEL', 0);
define('TIDY_ATTR_LANG', 0);
define('TIDY_ATTR_LANGUAGE', 0);
define('TIDY_ATTR_LAST_MODIFIED', 0);
define('TIDY_ATTR_LAST_VISIT', 0);
define('TIDY_ATTR_LEFTMARGIN', 0);
define('TIDY_ATTR_LINK', 0);
define('TIDY_ATTR_LONGDESC', 0);
define('TIDY_ATTR_LOWSRC', 0);
define('TIDY_ATTR_MARGINHEIGHT', 0);
define('TIDY_ATTR_MARGINWIDTH', 0);
define('TIDY_ATTR_MAXLENGTH', 0);
define('TIDY_ATTR_MEDIA', 0);
define('TIDY_ATTR_METHOD', 0);
define('TIDY_ATTR_MULTIPLE', 0);
define('TIDY_ATTR_NAME', 0);
define('TIDY_ATTR_NOHREF', 0);
define('TIDY_ATTR_NORESIZE', 0);
define('TIDY_ATTR_NOSHADE', 0);
define('TIDY_ATTR_NOWRAP', 0);
define('TIDY_ATTR_OBJECT', 0);
define('TIDY_ATTR_OnAFTERUPDATE', 0);
define('TIDY_ATTR_OnBEFOREUNLOAD', 0);
define('TIDY_ATTR_OnBEFOREUPDATE', 0);
define('TIDY_ATTR_OnBLUR', 0);
define('TIDY_ATTR_OnCHANGE', 0);
define('TIDY_ATTR_OnCLICK', 0);
define('TIDY_ATTR_OnDATAAVAILABLE', 0);
define('TIDY_ATTR_OnDATASETCHANGED', 0);
define('TIDY_ATTR_OnDATASETCOMPLETE', 0);
define('TIDY_ATTR_OnDBLCLICK', 0);
define('TIDY_ATTR_OnERRORUPDATE', 0);
define('TIDY_ATTR_OnFOCUS', 0);
define('TIDY_ATTR_OnKEYDOWN', 0);
define('TIDY_ATTR_OnKEYPRESS', 0);
define('TIDY_ATTR_OnKEYUP', 0);
define('TIDY_ATTR_OnLOAD', 0);
define('TIDY_ATTR_OnMOUSEDOWN', 0);
define('TIDY_ATTR_OnMOUSEMOVE', 0);
define('TIDY_ATTR_OnMOUSEOUT', 0);
define('TIDY_ATTR_OnMOUSEOVER', 0);
define('TIDY_ATTR_OnMOUSEUP', 0);
define('TIDY_ATTR_OnRESET', 0);
define('TIDY_ATTR_OnROWENTER', 0);
define('TIDY_ATTR_OnROWEXIT', 0);
define('TIDY_ATTR_OnSELECT', 0);
define('TIDY_ATTR_OnSUBMIT', 0);
define('TIDY_ATTR_OnUNLOAD', 0);
define('TIDY_ATTR_PROFILE', 0);
define('TIDY_ATTR_PROMPT', 0);
define('TIDY_ATTR_RBSPAN', 0);
define('TIDY_ATTR_READONLY', 0);
define('TIDY_ATTR_REL', 0);
define('TIDY_ATTR_REV', 0);
define('TIDY_ATTR_RIGHTMARGIN', 0);
define('TIDY_ATTR_ROWS', 0);
define('TIDY_ATTR_ROWSPAN', 0);
define('TIDY_ATTR_RULES', 0);
define('TIDY_ATTR_SCHEME', 0);
define('TIDY_ATTR_SCOPE', 0);
define('TIDY_ATTR_SCROLLING', 0);
define('TIDY_ATTR_SELECTED', 0);
define('TIDY_ATTR_SHAPE', 0);
define('TIDY_ATTR_SHOWGRID', 0);
define('TIDY_ATTR_SHOWGRIDX', 0);
define('TIDY_ATTR_SHOWGRIDY', 0);
define('TIDY_ATTR_SIZE', 0);
define('TIDY_ATTR_SPAN', 0);
define('TIDY_ATTR_SRC', 0);
define('TIDY_ATTR_STANDBY', 0);
define('TIDY_ATTR_START', 0);
define('TIDY_ATTR_STYLE', 0);
define('TIDY_ATTR_SUMMARY', 0);
define('TIDY_ATTR_TABINDEX', 0);
define('TIDY_ATTR_TARGET', 0);
define('TIDY_ATTR_TEXT', 0);
define('TIDY_ATTR_TITLE', 0);
define('TIDY_ATTR_TOPMARGIN', 0);
define('TIDY_ATTR_TYPE', 0);
define('TIDY_ATTR_UNKNOWN', 0);
define('TIDY_ATTR_USEMAP', 0);
define('TIDY_ATTR_VALIGN', 0);
define('TIDY_ATTR_VALUE', 0);
define('TIDY_ATTR_VALUETYPE', 0);
define('TIDY_ATTR_VERSION', 0);
define('TIDY_ATTR_VLINK', 0);
define('TIDY_ATTR_VSPACE', 0);
define('TIDY_ATTR_WIDTH', 0);
define('TIDY_ATTR_WRAP', 0);
define('TIDY_ATTR_XMLNS', 0);
define('TIDY_ATTR_XML_LANG', 0);
define('TIDY_ATTR_XML_SPACE', 0);
define('TIDY_NODETYPE_ASP', 0);
define('TIDY_NODETYPE_CDATA', 0);
define('TIDY_NODETYPE_COMMENT', 0);
define('TIDY_NODETYPE_DOCTYPE', 0);
define('TIDY_NODETYPE_END', 0);
define('TIDY_NODETYPE_JSTE', 0);
define('TIDY_NODETYPE_PHP', 0);
define('TIDY_NODETYPE_PROCINS', 0);
define('TIDY_NODETYPE_ROOT', 0);
define('TIDY_NODETYPE_SECTION', 0);
define('TIDY_NODETYPE_START', 0);
define('TIDY_NODETYPE_STARTEND', 0);
define('TIDY_NODETYPE_TEXT', 0);
define('TIDY_NODETYPE_XMLDECL', 0);
define('TIDY_TAG_A', 0);
define('TIDY_TAG_ABBR', 0);
define('TIDY_TAG_ACRONYM', 0);
define('TIDY_TAG_ALIGN', 0);
define('TIDY_TAG_APPLET', 0);
define('TIDY_TAG_AREA', 0);
define('TIDY_TAG_B', 0);
define('TIDY_TAG_BASE', 0);
define('TIDY_TAG_BASEFONT', 0);
define('TIDY_TAG_BDO', 0);
define('TIDY_TAG_BGSOUND', 0);
define('TIDY_TAG_BIG', 0);
define('TIDY_TAG_BLINK', 0);
define('TIDY_TAG_BLOCKQUOTE', 0);
define('TIDY_TAG_BODY', 0);
define('TIDY_TAG_BR', 0);
define('TIDY_TAG_BUTTON', 0);
define('TIDY_TAG_CAPTION', 0);
define('TIDY_TAG_CENTER', 0);
define('TIDY_TAG_CITE', 0);
define('TIDY_TAG_CODE', 0);
define('TIDY_TAG_COL', 0);
define('TIDY_TAG_COLGROUP', 0);
define('TIDY_TAG_COMMENT', 0);
define('TIDY_TAG_DD', 0);
define('TIDY_TAG_DEL', 0);
define('TIDY_TAG_DFN', 0);
define('TIDY_TAG_DIR', 0);
define('TIDY_TAG_DIV', 0);
define('TIDY_TAG_DL', 0);
define('TIDY_TAG_DT', 0);
define('TIDY_TAG_EM', 0);
define('TIDY_TAG_EMBED', 0);
define('TIDY_TAG_FIELDSET', 0);
define('TIDY_TAG_FONT', 0);
define('TIDY_TAG_FORM', 0);
define('TIDY_TAG_FRAME', 0);
define('TIDY_TAG_FRAMESET', 0);
define('TIDY_TAG_H1', 0);
define('TIDY_TAG_H2', 0);
define('TIDY_TAG_H3', 0);
define('TIDY_TAG_H4', 0);
define('TIDY_TAG_H5', 0);
define('TIDY_TAG_H6', 0);
define('TIDY_TAG_HEAD', 0);
define('TIDY_TAG_HR', 0);
define('TIDY_TAG_HTML', 0);
define('TIDY_TAG_I', 0);
define('TIDY_TAG_IFRAME', 0);
define('TIDY_TAG_ILAYER', 0);
define('TIDY_TAG_IMG', 0);
define('TIDY_TAG_INPUT', 0);
define('TIDY_TAG_INS', 0);
define('TIDY_TAG_ISINDEX', 0);
define('TIDY_TAG_KBD', 0);
define('TIDY_TAG_KEYGEN', 0);
define('TIDY_TAG_LABEL', 0);
define('TIDY_TAG_LAYER', 0);
define('TIDY_TAG_LEGEND', 0);
define('TIDY_TAG_LI', 0);
define('TIDY_TAG_LINK', 0);
define('TIDY_TAG_LISTING', 0);
define('TIDY_TAG_MAP', 0);
define('TIDY_TAG_MARQUEE', 0);
define('TIDY_TAG_MENU', 0);
define('TIDY_TAG_META', 0);
define('TIDY_TAG_MULTICOL', 0);
define('TIDY_TAG_NOBR', 0);
define('TIDY_TAG_NOEMBED', 0);
define('TIDY_TAG_NOFRAMES', 0);
define('TIDY_TAG_NOLAYER', 0);
define('TIDY_TAG_NOSAVE', 0);
define('TIDY_TAG_NOSCRIPT', 0);
define('TIDY_TAG_OBJECT', 0);
define('TIDY_TAG_OL', 0);
define('TIDY_TAG_OPTGROUP', 0);
define('TIDY_TAG_OPTION', 0);
define('TIDY_TAG_P', 0);
define('TIDY_TAG_PARAM', 0);
define('TIDY_TAG_PLAINTEXT', 0);
define('TIDY_TAG_PRE', 0);
define('TIDY_TAG_Q', 0);
define('TIDY_TAG_RP', 0);
define('TIDY_TAG_RT', 0);
define('TIDY_TAG_RTC', 0);
define('TIDY_TAG_RUBY', 0);
define('TIDY_TAG_S', 0);
define('TIDY_TAG_SAMP', 0);
define('TIDY_TAG_SCRIPT', 0);
define('TIDY_TAG_SELECT', 0);
define('TIDY_TAG_SERVER', 0);
define('TIDY_TAG_SERVLET', 0);
define('TIDY_TAG_SMALL', 0);
define('TIDY_TAG_SPACER', 0);
define('TIDY_TAG_SPAN', 0);
define('TIDY_TAG_STRIKE', 0);
define('TIDY_TAG_STRONG', 0);
define('TIDY_TAG_STYLE', 0);
define('TIDY_TAG_SUB', 0);
define('TIDY_TAG_TABLE', 0);
define('TIDY_TAG_TBODY', 0);
define('TIDY_TAG_TD', 0);
define('TIDY_TAG_TEXTAREA', 0);
define('TIDY_TAG_TFOOT', 0);
define('TIDY_TAG_TH', 0);
define('TIDY_TAG_THEAD', 0);
define('TIDY_TAG_TITLE', 0);
define('TIDY_TAG_TR', 0);
define('TIDY_TAG_TT', 0);
define('TIDY_TAG_U', 0);
define('TIDY_TAG_UL', 0);
define('TIDY_TAG_UNKNOWN', 0);
define('TIDY_TAG_VAR', 0);
define('TIDY_TAG_WBR', 0);
define('TIDY_TAG_XMP', 0);
define('TIMING_TRACE', 0);
define('TRAP_BRKPT', 0);
define('TRAP_TRACE', 0);
define('TYPEAPPLICATION', 0);
define('TYPEAUDIO', 0);
define('TYPEIMAGE', 0);
define('TYPEMESSAGE', 0);
define('TYPEMODEL', 0);
define('TYPEMULTIPART', 0);
define('TYPEOTHER', 0);
define('TYPETEXT', 0);
define('TYPEVIDEO', 0);
define('TYPE_MENUBUTTON', 0);
define('TYPE_PUSHBUTTON', 0);
define('T_FMT', 0);
define('T_FMT_AMPM', 0);
define('UDM_CACHE_DISABLED', 0);
define('UDM_CACHE_ENABLED', 0);
define('UDM_CROSSWORDS_DISABLED', 0);
define('UDM_CROSSWORDS_ENABLED', 0);
define('UDM_CROSS_WORDS_DISABLED', 0);
define('UDM_CROSS_WORDS_ENABLED', 0);
define('UDM_FIELD_CATEGORY', 0);
define('UDM_FIELD_CHARSET', 0);
define('UDM_FIELD_CONTENT', 0);
define('UDM_FIELD_CRC', 0);
define('UDM_FIELD_DESC', 0);
define('UDM_FIELD_DESCRIPTION', 0);
define('UDM_FIELD_KEYWORDS', 0);
define('UDM_FIELD_LANG', 0);
define('UDM_FIELD_MODIFIED', 0);
define('UDM_FIELD_ORDER', 0);
define('UDM_FIELD_RATING', 0);
define('UDM_FIELD_SCORE', 0);
define('UDM_FIELD_SIZE', 0);
define('UDM_FIELD_TEXT', 0);
define('UDM_FIELD_TITLE', 0);
define('UDM_FIELD_URL', 0);
define('UDM_FIELD_URLID', 0);
define('UDM_ISPELL_PREFIXES_DISABLED', 0);
define('UDM_ISPELL_PREFIXES_ENABLED', 0);
define('UDM_ISPELL_PREFIX_DISABLED', 0);
define('UDM_ISPELL_PREFIX_ENABLED', 0);
define('UDM_ISPELL_TYPE_AFFIX', 0);
define('UDM_ISPELL_TYPE_DB', 0);
define('UDM_ISPELL_TYPE_SERVER', 0);
define('UDM_ISPELL_TYPE_SPELL', 0);
define('UDM_LIMIT_CAT', 0);
define('UDM_LIMIT_DATE', 0);
define('UDM_LIMIT_LANG', 0);
define('UDM_LIMIT_TAG', 0);
define('UDM_LIMIT_URL', 0);
define('UDM_MATCH_BEGIN', 0);
define('UDM_MATCH_END', 0);
define('UDM_MATCH_SUBSTR', 0);
define('UDM_MATCH_WORD', 0);
define('UDM_MODE_ALL', 0);
define('UDM_MODE_ANY', 0);
define('UDM_MODE_BOOL', 0);
define('UDM_MODE_PHRASE', 0);
define('UDM_PARAM_BROWSER_CHARSET', 0);
define('UDM_PARAM_CACHE_MODE', 0);
define('UDM_PARAM_CHARSET', 0);
define('UDM_PARAM_CROSSWORDS', 0);
define('UDM_PARAM_CROSS_WORDS', 0);
define('UDM_PARAM_DATADIR', 0);
define('UDM_PARAM_FIRST_DOC', 0);
define('UDM_PARAM_FOUND', 0);
define('UDM_PARAM_HLBEG', 0);
define('UDM_PARAM_HLEND', 0);
define('UDM_PARAM_ISPELL_PREFIX', 0);
define('UDM_PARAM_ISPELL_PREFIXES', 0);
define('UDM_PARAM_LAST_DOC', 0);
define('UDM_PARAM_LOCAL_CHARSET', 0);
define('UDM_PARAM_MAX_WORDLEN', 0);
define('UDM_PARAM_MAX_WORD_LEN', 0);
define('UDM_PARAM_MIN_WORDLEN', 0);
define('UDM_PARAM_MIN_WORD_LEN', 0);
define('UDM_PARAM_NUM_ROWS', 0);
define('UDM_PARAM_PAGE_NUM', 0);
define('UDM_PARAM_PAGE_SIZE', 0);
define('UDM_PARAM_PHRASE_MODE', 0);
define('UDM_PARAM_PREFIX', 0);
define('UDM_PARAM_PREFIXES', 0);
define('UDM_PARAM_QSTRING', 0);
define('UDM_PARAM_REMOTE_ADDR', 0);
define('UDM_PARAM_SEARCHD', 0);
define('UDM_PARAM_SEARCHTIME', 0);
define('UDM_PARAM_SEARCH_MODE', 0);
define('UDM_PARAM_SEARCH_TIME', 0);
define('UDM_PARAM_STOPFILE', 0);
define('UDM_PARAM_STOPTABLE', 0);
define('UDM_PARAM_STOP_FILE', 0);
define('UDM_PARAM_STOP_TABLE', 0);
define('UDM_PARAM_SYNONYM', 0);
define('UDM_PARAM_TRACK_MODE', 0);
define('UDM_PARAM_VARDIR', 0);
define('UDM_PARAM_WEIGHT_FACTOR', 0);
define('UDM_PARAM_WORDINFO', 0);
define('UDM_PARAM_WORD_INFO', 0);
define('UDM_PARAM_WORD_MATCH', 0);
define('UDM_PHRASE_DISABLED', 0);
define('UDM_PHRASE_ENABLED', 0);
define('UDM_PREFIXES_DISABLED', 0);
define('UDM_PREFIXES_ENABLED', 0);
define('UDM_PREFIX_DISABLED', 0);
define('UDM_PREFIX_ENABLED', 0);
define('UDM_TRACK_DISABLED', 0);
define('UDM_TRACK_ENABLED', 0);
define('UNKNOWN_TYPE', 0);
/**
 * The two parameters are equal.
 **/
define('VARCMP_EQ', 0);
define('VARCMP_GT', 0);
define('VARCMP_LT', 0);
/**
 * Either expression is NULL.
 **/
define('VARCMP_NULL', 0);
define('VT_ARRAY', 0);
/**
 * Boolean value.
 **/
define('VT_BOOL', 0);
/**
 * Pointer to a null-terminated Unicode string.
 **/
define('VT_BSTR', 0);
define('VT_BYREF', 0);
/**
 * 8-byte two's complement integer (scaled by 10,000).
 **/
define('VT_CY', 0);
define('VT_DATE', 0);
/**
 * A decimal structure.
 **/
define('VT_DECIMAL', 0);
/**
 * A pointer to a pointer to an object was specified.
 **/
define('VT_DISPATCH', 0);
define('VT_EMPTY', 0);
/**
 * Error code; containing the status code associated with the error.
 **/
define('VT_ERROR', 0);
/**
 * 1-byte signed integer.
 **/
define('VT_I1', 0);
/**
 * Two bytes representing a 2-byte signed integer value.
 **/
define('VT_I2', 0);
/**
 * 4-byte signed integer value.
 **/
define('VT_I4', 0);
define('VT_INT', 0);
/**
 * NULL pointer reference.
 **/
define('VT_NULL', 0);
/**
 * 32-bit IEEE floating point value.
 **/
define('VT_R4', 0);
/**
 * 64-bit IEEE floating point value.
 **/
define('VT_R8', 0);
/**
 * 1-byte unsigned integer.
 **/
define('VT_UI1', 0);
/**
 * 2-byte unsigned integer.
 **/
define('VT_UI2', 0);
/**
 * 4-byte unsigned integer.
 **/
define('VT_UI4', 0);
define('VT_UINT', 0);
/**
 * A pointer to an object that implements the IUnknown interface.
 **/
define('VT_UNKNOWN', 0);
define('VT_VARIANT', 0);
define('WIN32_ERROR_CALL_NOT_IMPLEMENTED', 0);
define('WIN32_NO_ERROR', 0);
define('WIN32_SERVICE_ACCEPT_HARDWAREPROFILECHANGE', 0);
define('WIN32_SERVICE_ACCEPT_NETBINDCHANGE', 0);
define('WIN32_SERVICE_ACCEPT_PARAMCHANGE', 0);
define('WIN32_SERVICE_ACCEPT_PAUSE_CONTINUE', 0);
define('WIN32_SERVICE_ACCEPT_POWEREVENT', 0);
define('WIN32_SERVICE_ACCEPT_SESSIONCHANGE', 0);
define('WIN32_SERVICE_ACCEPT_SHUTDOWN', 0);
define('WIN32_SERVICE_ACCEPT_STOP', 0);
define('WIN32_SERVICE_CONTINUE_PENDING', 0);
define('WIN32_SERVICE_CONTROL_CONTINUE', 0);
define('WIN32_SERVICE_CONTROL_HARDWAREPROFILECHANGE', 0);
define('WIN32_SERVICE_CONTROL_INTERROGATE', 0);
define('WIN32_SERVICE_CONTROL_PAUSE', 0);
define('WIN32_SERVICE_CONTROL_POWEREVENT', 0);
define('WIN32_SERVICE_CONTROL_SESSIONCHANGE', 0);
define('WIN32_SERVICE_CONTROL_STOP', 0);
define('WIN32_SERVICE_FILE_SYSTEM_DRIVER', 0);
define('WIN32_SERVICE_INTERACTIVE_PROCESS', 0);
define('WIN32_SERVICE_KERNEL_DRIVER', 0);
define('WIN32_SERVICE_PAUSED', 0);
define('WIN32_SERVICE_PAUSE_PENDING', 0);
define('WIN32_SERVICE_RUNNING', 0);
define('WIN32_SERVICE_RUNS_IN_SYSTEM_PROCESS', 0);
define('WIN32_SERVICE_START_PENDING', 0);
define('WIN32_SERVICE_STOPPED', 0);
define('WIN32_SERVICE_STOP_PENDING', 0);
define('WIN32_SERVICE_WIN32_OWN_PROCESS', 0);
define('WIN32_SERVICE_WIN32_SHARE_PROCESS', 0);
define('WNOHANG', 0);
define('WSDL_CACHE_BOTH', 0);
define('WSDL_CACHE_DISK', 0);
define('WSDL_CACHE_MEMORY', 0);
define('WSDL_CACHE_NONE', 0);
define('WUNTRACED', 0);
define('XATTR_CREATE', 0);
define('XATTR_DONTFOLLOW', 0);
define('XATTR_REPLACE', 0);
define('XATTR_ROOT', 0);
define('XDIFF_PATCH_NORMAL', 0);
define('XDIFF_PATCH_REVERSE', 0);
define('XML_ATTRIBUTE_CDATA', 0);
define('XML_ATTRIBUTE_DECL_NODE', 0);
define('XML_ATTRIBUTE_ENTITY', 0);
define('XML_ATTRIBUTE_ENUMERATION', 0);
define('XML_ATTRIBUTE_ID', 0);
define('XML_ATTRIBUTE_IDREF', 0);
define('XML_ATTRIBUTE_IDREFS', 0);
define('XML_ATTRIBUTE_NMTOKEN', 0);
define('XML_ATTRIBUTE_NMTOKENS', 0);
/**
 * Node is an attribute
 **/
define('XML_ATTRIBUTE_NODE', 0);
define('XML_ATTRIBUTE_NOTATION', 0);
define('XML_CDATA_SECTION_NODE', 0);
/**
 * Node is a comment
 **/
define('XML_COMMENT_NODE', 0);
define('XML_DOCUMENT_FRAG_NODE', 0);
/**
 * Node is a document
 **/
define('XML_DOCUMENT_NODE', 0);
define('XML_DOCUMENT_TYPE_NODE', 0);
define('XML_DTD_NODE', 0);
define('XML_ELEMENT_DECL_NODE', 0);
/**
 * Node is an element
 **/
define('XML_ELEMENT_NODE', 0);
define('XML_ENTITY_DECL_NODE', 0);
/**
 * Node is an entity like &nbsp;
 **/
define('XML_ENTITY_NODE', 0);
define('XML_ENTITY_REF_NODE', 0);
define('XML_ERROR_ASYNC_ENTITY', 0);
define('XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF', 0);
define('XML_ERROR_BAD_CHAR_REF', 0);
define('XML_ERROR_BINARY_ENTITY_REF', 0);
define('XML_ERROR_DUPLICATE_ATTRIBUTE', 0);
define('XML_ERROR_EXTERNAL_ENTITY_HANDLING', 0);
define('XML_ERROR_INCORRECT_ENCODING', 0);
define('XML_ERROR_INVALID_TOKEN', 0);
define('XML_ERROR_JUNK_AFTER_DOC_ELEMENT', 0);
define('XML_ERROR_MISPLACED_XML_PI', 0);
define('XML_ERROR_NONE', 0);
define('XML_ERROR_NO_ELEMENTS', 0);
define('XML_ERROR_NO_MEMORY', 0);
define('XML_ERROR_PARAM_ENTITY_REF', 0);
define('XML_ERROR_PARTIAL_CHAR', 0);
define('XML_ERROR_RECURSIVE_ENTITY_REF', 0);
define('XML_ERROR_SYNTAX', 0);
define('XML_ERROR_TAG_MISMATCH', 0);
define('XML_ERROR_UNCLOSED_CDATA_SECTION', 0);
define('XML_ERROR_UNCLOSED_TOKEN', 0);
define('XML_ERROR_UNDEFINED_ENTITY', 0);
define('XML_ERROR_UNKNOWN_ENCODING', 0);
define('XML_GLOBAL_NAMESPACE', 0);
define('XML_HTML_DOCUMENT_NODE', 0);
define('XML_LOCAL_NAMESPACE', 0);
define('XML_NAMESPACE_DECL_NODE', 0);
define('XML_NOTATION_NODE', 0);
define('XML_OPTION_CASE_FOLDING', 0);
define('XML_OPTION_SKIP_TAGSTART', 0);
define('XML_OPTION_SKIP_WHITE', 0);
define('XML_OPTION_TARGET_ENCODING', 0);
/**
 * Node is a processing instruction
 **/
define('XML_PI_NODE', 0);
define('XML_SAX_IMPL', '');
/**
 * Node is a piece of text
 **/
define('XML_TEXT_NODE', 0);
define('XPATH_BOOLEAN', 0);
define('XPATH_LOCATIONSET', 0);
define('XPATH_NODESET', 0);
define('XPATH_NUMBER', 0);
define('XPATH_POINT', 0);
define('XPATH_RANGE', 0);
define('XPATH_STRING', 0);
define('XPATH_UNDEFINED', 0);
define('XPATH_USERS', 0);
define('XSD_1999_NAMESPACE', 0);
define('XSD_1999_TIMEINSTANT', 0);
define('XSD_ANYTYPE', 0);
define('XSD_ANYURI', 0);
define('XSD_ANYXML', 0);
define('XSD_BASE64BINARY', 0);
define('XSD_BOOLEAN', 0);
define('XSD_BYTE', 0);
define('XSD_DATE', 0);
define('XSD_DATETIME', 0);
define('XSD_DECIMAL', 0);
define('XSD_DOUBLE', 0);
define('XSD_DURATION', 0);
define('XSD_ENTITIES', 0);
define('XSD_ENTITY', 0);
define('XSD_FLOAT', 0);
define('XSD_GDAY', 0);
define('XSD_GMONTH', 0);
define('XSD_GMONTHDAY', 0);
define('XSD_GYEAR', 0);
define('XSD_GYEARMONTH', 0);
define('XSD_HEXBINARY', 0);
define('XSD_ID', 0);
define('XSD_IDREF', 0);
define('XSD_IDREFS', 0);
define('XSD_INT', 0);
define('XSD_INTEGER', 0);
define('XSD_LANGUAGE', 0);
define('XSD_LONG', 0);
define('XSD_NAME', 0);
define('XSD_NAMESPACE', 0);
define('XSD_NCNAME', 0);
define('XSD_NEGATIVEINTEGER', 0);
define('XSD_NMTOKEN', 0);
define('XSD_NMTOKENS', 0);
define('XSD_NONNEGATIVEINTEGER', 0);
define('XSD_NONPOSITIVEINTEGER', 0);
define('XSD_NORMALIZEDSTRING', 0);
define('XSD_NOTATION', 0);
define('XSD_POSITIVEINTEGER', 0);
define('XSD_QNAME', 0);
define('XSD_SHORT', 0);
define('XSD_STRING', 0);
define('XSD_TIME', 0);
define('XSD_TOKEN', 0);
define('XSD_UNSIGNEDBYTE', 0);
define('XSD_UNSIGNEDINT', 0);
define('XSD_UNSIGNEDLONG', 0);
define('XSD_UNSIGNEDSHORT', 0);
define('XSLT_ERR_UNSUPPORTED_SCHEME', 0);
define('XSLT_OPT_SILENT', 0);
define('XSLT_SABOPT_DISABLE_ADDING_META', 0);
define('XSLT_SABOPT_DISABLE_STRIPPING', 0);
define('XSLT_SABOPT_FILES_TO_HANDLER', 0);
define('XSLT_SABOPT_IGNORE_DOC_NOT_FOUND', 0);
define('XSLT_SABOPT_PARSE_PUBLIC_ENTITIES', 0);
define('XSL_CLONE_ALWAYS', 0);
define('XSL_CLONE_AUTO', 0);
define('XSL_CLONE_NEVER', 0);
define('YAML_ANY_SCALAR_STYLE', 0);
define('YAML_DOUBLE_QUOTED_SCALAR_STYLE', 0);
define('YAML_FOLDED_SCALAR_STYLE', 0);
define('YAML_LITERAL_SCALAR_STYLE', 0);
define('YAML_PLAIN_SCALAR_STYLE', 0);
define('YAML_SINGLE_QUOTED_SCALAR_STYLE', 0);
define('YESEXPR', 0);
define('YESSTR', 0);
define('YPERR_ACCESS', 0);
define('YPERR_BADARGS', 0);
define('YPERR_BADDB', 0);
define('YPERR_BUSY', 0);
define('YPERR_DOMAIN', 0);
define('YPERR_KEY', 0);
define('YPERR_MAP', 0);
define('YPERR_NODOM', 0);
define('YPERR_NOMORE', 0);
define('YPERR_PMAP', 0);
define('YPERR_RESRC', 0);
define('YPERR_RPC', 0);
define('YPERR_VERS', 0);
define('YPERR_YPBIND', 0);
define('YPERR_YPERR', 0);
define('YPERR_YPSERV', 0);
define('__COMPILER_HALT_OFFSET__', 0);
